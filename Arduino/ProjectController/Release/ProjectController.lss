
ProjectController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000019e  00800100  000052c6  0000535a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000052c6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000176  0080029e  0080029e  000054f8  2**0
                  ALLOC
  3 .stab         000097f8  00000000  00000000  000054f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008d69  00000000  00000000  0000ecf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <__vector_7>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 d9 0c 	jmp	0x19b2	; 0x19b2 <__vector_11>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 99 15 	jmp	0x2b32	; 0x2b32 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 29 23 	jmp	0x4652	; 0x4652 <__vector_18>
      4c:	0c 94 5a 23 	jmp	0x46b4	; 0x46b4 <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	b5 24       	eor	r11, r5

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	12 e0       	ldi	r17, 0x02	; 2
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e6 ec       	ldi	r30, 0xC6	; 198
      d8:	f2 e5       	ldi	r31, 0x52	; 82
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	ae 39       	cpi	r26, 0x9E	; 158
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	14 e0       	ldi	r17, 0x04	; 4
      e8:	ae e9       	ldi	r26, 0x9E	; 158
      ea:	b2 e0       	ldi	r27, 0x02	; 2
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a4 31       	cpi	r26, 0x14	; 20
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c4 ec       	ldi	r28, 0xC4	; 196
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	22 97       	sbiw	r28, 0x02	; 2
     100:	fe 01       	movw	r30, r28
     102:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <__tablejump__>
     106:	c2 3c       	cpi	r28, 0xC2	; 194
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <main>
     110:	0c 94 61 29 	jmp	0x52c2	; 0x52c2 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_ZN12AccelStepper4stepEh>:
     118:	dc 01       	movw	r26, r24
     11a:	12 96       	adiw	r26, 0x02	; 2
     11c:	2c 91       	ld	r18, X
     11e:	12 97       	sbiw	r26, 0x02	; 2
     120:	21 30       	cpi	r18, 0x01	; 1
     122:	79 f0       	breq	.+30     	; 0x142 <_ZN12AccelStepper4stepEh+0x2a>
     124:	21 30       	cpi	r18, 0x01	; 1
     126:	28 f0       	brcs	.+10     	; 0x132 <_ZN12AccelStepper4stepEh+0x1a>
     128:	22 30       	cpi	r18, 0x02	; 2
     12a:	99 f0       	breq	.+38     	; 0x152 <_ZN12AccelStepper4stepEh+0x3a>
     12c:	24 30       	cpi	r18, 0x04	; 4
     12e:	01 f5       	brne	.+64     	; 0x170 <_ZN12AccelStepper4stepEh+0x58>
     130:	18 c0       	rjmp	.+48     	; 0x162 <_ZN12AccelStepper4stepEh+0x4a>
     132:	dc 01       	movw	r26, r24
     134:	ed 91       	ld	r30, X+
     136:	fc 91       	ld	r31, X
     138:	02 80       	ldd	r0, Z+2	; 0x02
     13a:	f3 81       	ldd	r31, Z+3	; 0x03
     13c:	e0 2d       	mov	r30, r0
     13e:	09 95       	icall
     140:	08 95       	ret
     142:	dc 01       	movw	r26, r24
     144:	ed 91       	ld	r30, X+
     146:	fc 91       	ld	r31, X
     148:	11 97       	sbiw	r26, 0x01	; 1
     14a:	04 80       	ldd	r0, Z+4	; 0x04
     14c:	f5 81       	ldd	r31, Z+5	; 0x05
     14e:	e0 2d       	mov	r30, r0
     150:	06 c0       	rjmp	.+12     	; 0x15e <_ZN12AccelStepper4stepEh+0x46>
     152:	dc 01       	movw	r26, r24
     154:	ed 91       	ld	r30, X+
     156:	fc 91       	ld	r31, X
     158:	06 80       	ldd	r0, Z+6	; 0x06
     15a:	f7 81       	ldd	r31, Z+7	; 0x07
     15c:	e0 2d       	mov	r30, r0
     15e:	09 95       	icall
     160:	08 95       	ret
     162:	dc 01       	movw	r26, r24
     164:	ed 91       	ld	r30, X+
     166:	fc 91       	ld	r31, X
     168:	00 84       	ldd	r0, Z+8	; 0x08
     16a:	f1 85       	ldd	r31, Z+9	; 0x09
     16c:	e0 2d       	mov	r30, r0
     16e:	09 95       	icall
     170:	08 95       	ret

00000172 <_ZN12AccelStepper5step0Ev>:
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	ec 01       	movw	r28, r24
     178:	6f 85       	ldd	r22, Y+15	; 0x0f
     17a:	78 89       	ldd	r23, Y+16	; 0x10
     17c:	89 89       	ldd	r24, Y+17	; 0x11
     17e:	9a 89       	ldd	r25, Y+18	; 0x12
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	a9 01       	movw	r20, r18
     186:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__gtsf2>
     18a:	18 16       	cp	r1, r24
     18c:	1c f4       	brge	.+6      	; 0x194 <_ZN12AccelStepper5step0Ev+0x22>
     18e:	eb a1       	ldd	r30, Y+35	; 0x23
     190:	fc a1       	ldd	r31, Y+36	; 0x24
     192:	02 c0       	rjmp	.+4      	; 0x198 <_ZN12AccelStepper5step0Ev+0x26>
     194:	ed a1       	ldd	r30, Y+37	; 0x25
     196:	fe a1       	ldd	r31, Y+38	; 0x26
     198:	09 95       	icall
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	08 95       	ret

000001a0 <_ZN12AccelStepper5step4Eh>:
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	ec 01       	movw	r28, r24
     1a6:	61 30       	cpi	r22, 0x01	; 1
     1a8:	71 f0       	breq	.+28     	; 0x1c6 <_ZN12AccelStepper5step4Eh+0x26>
     1aa:	61 30       	cpi	r22, 0x01	; 1
     1ac:	28 f0       	brcs	.+10     	; 0x1b8 <_ZN12AccelStepper5step4Eh+0x18>
     1ae:	62 30       	cpi	r22, 0x02	; 2
     1b0:	c9 f0       	breq	.+50     	; 0x1e4 <_ZN12AccelStepper5step4Eh+0x44>
     1b2:	63 30       	cpi	r22, 0x03	; 3
     1b4:	71 f5       	brne	.+92     	; 0x212 <_ZN12AccelStepper5step4Eh+0x72>
     1b6:	1d c0       	rjmp	.+58     	; 0x1f2 <_ZN12AccelStepper5step4Eh+0x52>
     1b8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ba:	61 e0       	ldi	r22, 0x01	; 1
     1bc:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     1c0:	8c 81       	ldd	r24, Y+4	; 0x04
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	06 c0       	rjmp	.+12     	; 0x1d2 <_ZN12AccelStepper5step4Eh+0x32>
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     1ce:	8c 81       	ldd	r24, Y+4	; 0x04
     1d0:	61 e0       	ldi	r22, 0x01	; 1
     1d2:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     1d6:	8d 81       	ldd	r24, Y+5	; 0x05
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     1de:	8e 81       	ldd	r24, Y+6	; 0x06
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	15 c0       	rjmp	.+42     	; 0x20e <_ZN12AccelStepper5step4Eh+0x6e>
     1e4:	8b 81       	ldd	r24, Y+3	; 0x03
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     1ec:	8c 81       	ldd	r24, Y+4	; 0x04
     1ee:	61 e0       	ldi	r22, 0x01	; 1
     1f0:	06 c0       	rjmp	.+12     	; 0x1fe <_ZN12AccelStepper5step4Eh+0x5e>
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     1fa:	8c 81       	ldd	r24, Y+4	; 0x04
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     202:	8d 81       	ldd	r24, Y+5	; 0x05
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     20a:	8e 81       	ldd	r24, Y+6	; 0x06
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <_ZN12AccelStepper5step2Eh>:
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	ec 01       	movw	r28, r24
     21e:	61 30       	cpi	r22, 0x01	; 1
     220:	51 f0       	breq	.+20     	; 0x236 <_ZN12AccelStepper5step2Eh+0x1e>
     222:	61 30       	cpi	r22, 0x01	; 1
     224:	28 f0       	brcs	.+10     	; 0x230 <_ZN12AccelStepper5step2Eh+0x18>
     226:	62 30       	cpi	r22, 0x02	; 2
     228:	69 f0       	breq	.+26     	; 0x244 <_ZN12AccelStepper5step2Eh+0x2c>
     22a:	63 30       	cpi	r22, 0x03	; 3
     22c:	b1 f4       	brne	.+44     	; 0x25a <_ZN12AccelStepper5step2Eh+0x42>
     22e:	0d c0       	rjmp	.+26     	; 0x24a <_ZN12AccelStepper5step2Eh+0x32>
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	02 c0       	rjmp	.+4      	; 0x23a <_ZN12AccelStepper5step2Eh+0x22>
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	61 e0       	ldi	r22, 0x01	; 1
     23a:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     23e:	8c 81       	ldd	r24, Y+4	; 0x04
     240:	61 e0       	ldi	r22, 0x01	; 1
     242:	09 c0       	rjmp	.+18     	; 0x256 <_ZN12AccelStepper5step2Eh+0x3e>
     244:	8b 81       	ldd	r24, Y+3	; 0x03
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	02 c0       	rjmp	.+4      	; 0x24e <_ZN12AccelStepper5step2Eh+0x36>
     24a:	8b 81       	ldd	r24, Y+3	; 0x03
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     252:	8c 81       	ldd	r24, Y+4	; 0x04
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <_ZN12AccelStepper5step1Eh>:
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	6f 85       	ldd	r22, Y+15	; 0x0f
     26c:	78 89       	ldd	r23, Y+16	; 0x10
     26e:	89 89       	ldd	r24, Y+17	; 0x11
     270:	9a 89       	ldd	r25, Y+18	; 0x12
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	a9 01       	movw	r20, r18
     278:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__gtsf2>
     27c:	18 16       	cp	r1, r24
     27e:	0c f0       	brlt	.+2      	; 0x282 <_ZN12AccelStepper5step1Eh+0x22>
     280:	10 e0       	ldi	r17, 0x00	; 0
     282:	8c 81       	ldd	r24, Y+4	; 0x04
     284:	61 2f       	mov	r22, r17
     286:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     28a:	8b 81       	ldd	r24, Y+3	; 0x03
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <delayMicroseconds>
     29a:	8b 81       	ldd	r24, Y+3	; 0x03
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	08 95       	ret

000002aa <_ZN12AccelStepper12desiredSpeedEv>:
     2aa:	af 92       	push	r10
     2ac:	bf 92       	push	r11
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
     2c0:	6b 85       	ldd	r22, Y+11	; 0x0b
     2c2:	7c 85       	ldd	r23, Y+12	; 0x0c
     2c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     2c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     2c8:	2f 81       	ldd	r18, Y+7	; 0x07
     2ca:	38 85       	ldd	r19, Y+8	; 0x08
     2cc:	49 85       	ldd	r20, Y+9	; 0x09
     2ce:	5a 85       	ldd	r21, Y+10	; 0x0a
     2d0:	62 1b       	sub	r22, r18
     2d2:	73 0b       	sbc	r23, r19
     2d4:	84 0b       	sbc	r24, r20
     2d6:	95 0b       	sbc	r25, r21
     2d8:	09 f4       	brne	.+2      	; 0x2dc <_ZN12AccelStepper12desiredSpeedEv+0x32>
     2da:	d9 c0       	rjmp	.+434    	; 0x48e <_ZN12AccelStepper12desiredSpeedEv+0x1e4>
     2dc:	16 16       	cp	r1, r22
     2de:	17 06       	cpc	r1, r23
     2e0:	18 06       	cpc	r1, r24
     2e2:	19 06       	cpc	r1, r25
     2e4:	8c f4       	brge	.+34     	; 0x308 <_ZN12AccelStepper12desiredSpeedEv+0x5e>
     2e6:	0e 94 01 12 	call	0x2402	; 0x2402 <__floatsisf>
     2ea:	9b 01       	movw	r18, r22
     2ec:	ac 01       	movw	r20, r24
     2ee:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__addsf3>
     2f2:	2f 89       	ldd	r18, Y+23	; 0x17
     2f4:	38 8d       	ldd	r19, Y+24	; 0x18
     2f6:	49 8d       	ldd	r20, Y+25	; 0x19
     2f8:	5a 8d       	ldd	r21, Y+26	; 0x1a
     2fa:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__mulsf3>
     2fe:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <sqrt>
     302:	7b 01       	movw	r14, r22
     304:	8c 01       	movw	r16, r24
     306:	1b c0       	rjmp	.+54     	; 0x33e <_ZN12AccelStepper12desiredSpeedEv+0x94>
     308:	90 95       	com	r25
     30a:	80 95       	com	r24
     30c:	70 95       	com	r23
     30e:	61 95       	neg	r22
     310:	7f 4f       	sbci	r23, 0xFF	; 255
     312:	8f 4f       	sbci	r24, 0xFF	; 255
     314:	9f 4f       	sbci	r25, 0xFF	; 255
     316:	0e 94 01 12 	call	0x2402	; 0x2402 <__floatsisf>
     31a:	9b 01       	movw	r18, r22
     31c:	ac 01       	movw	r20, r24
     31e:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__addsf3>
     322:	2f 89       	ldd	r18, Y+23	; 0x17
     324:	38 8d       	ldd	r19, Y+24	; 0x18
     326:	49 8d       	ldd	r20, Y+25	; 0x19
     328:	5a 8d       	ldd	r21, Y+26	; 0x1a
     32a:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__mulsf3>
     32e:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <sqrt>
     332:	7b 01       	movw	r14, r22
     334:	8c 01       	movw	r16, r24
     336:	17 fb       	bst	r17, 7
     338:	10 95       	com	r17
     33a:	17 f9       	bld	r17, 7
     33c:	10 95       	com	r17
     33e:	af 84       	ldd	r10, Y+15	; 0x0f
     340:	b8 88       	ldd	r11, Y+16	; 0x10
     342:	c9 88       	ldd	r12, Y+17	; 0x11
     344:	da 88       	ldd	r13, Y+18	; 0x12
     346:	c8 01       	movw	r24, r16
     348:	b7 01       	movw	r22, r14
     34a:	a6 01       	movw	r20, r12
     34c:	95 01       	movw	r18, r10
     34e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__gtsf2>
     352:	18 16       	cp	r1, r24
     354:	0c f0       	brlt	.+2      	; 0x358 <_ZN12AccelStepper12desiredSpeedEv+0xae>
     356:	45 c0       	rjmp	.+138    	; 0x3e2 <_ZN12AccelStepper12desiredSpeedEv+0x138>
     358:	c6 01       	movw	r24, r12
     35a:	b5 01       	movw	r22, r10
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	a9 01       	movw	r20, r18
     362:	0e 94 41 11 	call	0x2282	; 0x2282 <__eqsf2>
     366:	88 23       	and	r24, r24
     368:	59 f4       	brne	.+22     	; 0x380 <_ZN12AccelStepper12desiredSpeedEv+0xd6>
     36a:	2f 89       	ldd	r18, Y+23	; 0x17
     36c:	38 8d       	ldd	r19, Y+24	; 0x18
     36e:	49 8d       	ldd	r20, Y+25	; 0x19
     370:	5a 8d       	ldd	r21, Y+26	; 0x1a
     372:	ca 01       	movw	r24, r20
     374:	b9 01       	movw	r22, r18
     376:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__addsf3>
     37a:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <sqrt>
     37e:	1d c0       	rjmp	.+58     	; 0x3ba <_ZN12AccelStepper12desiredSpeedEv+0x110>
     380:	6f 89       	ldd	r22, Y+23	; 0x17
     382:	78 8d       	ldd	r23, Y+24	; 0x18
     384:	89 8d       	ldd	r24, Y+25	; 0x19
     386:	9a 8d       	ldd	r25, Y+26	; 0x1a
     388:	a6 01       	movw	r20, r12
     38a:	95 01       	movw	r18, r10
     38c:	0e 94 93 10 	call	0x2126	; 0x2126 <__divsf3>
     390:	e6 2e       	mov	r14, r22
     392:	f7 2e       	mov	r15, r23
     394:	08 2f       	mov	r16, r24
     396:	19 2f       	mov	r17, r25
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	a9 01       	movw	r20, r18
     39e:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__gtsf2>
     3a2:	18 16       	cp	r1, r24
     3a4:	24 f0       	brlt	.+8      	; 0x3ae <_ZN12AccelStepper12desiredSpeedEv+0x104>
     3a6:	17 fb       	bst	r17, 7
     3a8:	10 95       	com	r17
     3aa:	17 f9       	bld	r17, 7
     3ac:	10 95       	com	r17
     3ae:	c6 01       	movw	r24, r12
     3b0:	b5 01       	movw	r22, r10
     3b2:	a8 01       	movw	r20, r16
     3b4:	97 01       	movw	r18, r14
     3b6:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__addsf3>
     3ba:	c6 2e       	mov	r12, r22
     3bc:	b7 2e       	mov	r11, r23
     3be:	a8 2e       	mov	r10, r24
     3c0:	d9 2e       	mov	r13, r25
     3c2:	eb 88       	ldd	r14, Y+19	; 0x13
     3c4:	fc 88       	ldd	r15, Y+20	; 0x14
     3c6:	0d 89       	ldd	r16, Y+21	; 0x15
     3c8:	1e 89       	ldd	r17, Y+22	; 0x16
     3ca:	a8 01       	movw	r20, r16
     3cc:	97 01       	movw	r18, r14
     3ce:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__gtsf2>
     3d2:	18 16       	cp	r1, r24
     3d4:	0c f4       	brge	.+2      	; 0x3d8 <_ZN12AccelStepper12desiredSpeedEv+0x12e>
     3d6:	65 c0       	rjmp	.+202    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3d8:	ec 2c       	mov	r14, r12
     3da:	fb 2c       	mov	r15, r11
     3dc:	0a 2d       	mov	r16, r10
     3de:	1d 2d       	mov	r17, r13
     3e0:	60 c0       	rjmp	.+192    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3e2:	c8 01       	movw	r24, r16
     3e4:	b7 01       	movw	r22, r14
     3e6:	a6 01       	movw	r20, r12
     3e8:	95 01       	movw	r18, r10
     3ea:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__ltsf2>
     3ee:	87 ff       	sbrs	r24, 7
     3f0:	58 c0       	rjmp	.+176    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3f2:	c6 01       	movw	r24, r12
     3f4:	b5 01       	movw	r22, r10
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	a9 01       	movw	r20, r18
     3fc:	0e 94 41 11 	call	0x2282	; 0x2282 <__eqsf2>
     400:	88 23       	and	r24, r24
     402:	89 f4       	brne	.+34     	; 0x426 <_ZN12AccelStepper12desiredSpeedEv+0x17c>
     404:	2f 89       	ldd	r18, Y+23	; 0x17
     406:	38 8d       	ldd	r19, Y+24	; 0x18
     408:	49 8d       	ldd	r20, Y+25	; 0x19
     40a:	5a 8d       	ldd	r21, Y+26	; 0x1a
     40c:	ca 01       	movw	r24, r20
     40e:	b9 01       	movw	r22, r18
     410:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__addsf3>
     414:	0e 94 7c 25 	call	0x4af8	; 0x4af8 <sqrt>
     418:	5b 01       	movw	r10, r22
     41a:	6c 01       	movw	r12, r24
     41c:	d7 fa       	bst	r13, 7
     41e:	d0 94       	com	r13
     420:	d7 f8       	bld	r13, 7
     422:	d0 94       	com	r13
     424:	21 c0       	rjmp	.+66     	; 0x468 <_ZN12AccelStepper12desiredSpeedEv+0x1be>
     426:	6f 89       	ldd	r22, Y+23	; 0x17
     428:	78 8d       	ldd	r23, Y+24	; 0x18
     42a:	89 8d       	ldd	r24, Y+25	; 0x19
     42c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     42e:	a6 01       	movw	r20, r12
     430:	95 01       	movw	r18, r10
     432:	0e 94 93 10 	call	0x2126	; 0x2126 <__divsf3>
     436:	e6 2e       	mov	r14, r22
     438:	f7 2e       	mov	r15, r23
     43a:	08 2f       	mov	r16, r24
     43c:	19 2f       	mov	r17, r25
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	a9 01       	movw	r20, r18
     444:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__gtsf2>
     448:	18 16       	cp	r1, r24
     44a:	24 f0       	brlt	.+8      	; 0x454 <_ZN12AccelStepper12desiredSpeedEv+0x1aa>
     44c:	17 fb       	bst	r17, 7
     44e:	10 95       	com	r17
     450:	17 f9       	bld	r17, 7
     452:	10 95       	com	r17
     454:	c6 01       	movw	r24, r12
     456:	b5 01       	movw	r22, r10
     458:	a8 01       	movw	r20, r16
     45a:	97 01       	movw	r18, r14
     45c:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__subsf3>
     460:	a6 2e       	mov	r10, r22
     462:	b7 2e       	mov	r11, r23
     464:	c8 2e       	mov	r12, r24
     466:	d9 2e       	mov	r13, r25
     468:	eb 88       	ldd	r14, Y+19	; 0x13
     46a:	fc 88       	ldd	r15, Y+20	; 0x14
     46c:	0d 89       	ldd	r16, Y+21	; 0x15
     46e:	1e 89       	ldd	r17, Y+22	; 0x16
     470:	17 fb       	bst	r17, 7
     472:	10 95       	com	r17
     474:	17 f9       	bld	r17, 7
     476:	10 95       	com	r17
     478:	c6 01       	movw	r24, r12
     47a:	b5 01       	movw	r22, r10
     47c:	a8 01       	movw	r20, r16
     47e:	97 01       	movw	r18, r14
     480:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__ltsf2>
     484:	87 fd       	sbrc	r24, 7
     486:	0d c0       	rjmp	.+26     	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     488:	86 01       	movw	r16, r12
     48a:	75 01       	movw	r14, r10
     48c:	0a c0       	rjmp	.+20     	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     48e:	0f 2e       	mov	r0, r31
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	ef 2e       	mov	r14, r31
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	ff 2e       	mov	r15, r31
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	0f 2f       	mov	r16, r31
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	1f 2f       	mov	r17, r31
     4a0:	f0 2d       	mov	r31, r0
     4a2:	6e 2d       	mov	r22, r14
     4a4:	7f 2d       	mov	r23, r15
     4a6:	80 2f       	mov	r24, r16
     4a8:	91 2f       	mov	r25, r17
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	df 90       	pop	r13
     4b8:	cf 90       	pop	r12
     4ba:	bf 90       	pop	r11
     4bc:	af 90       	pop	r10
     4be:	08 95       	ret

000004c0 <_ZN12AccelStepper8runSpeedEv>:
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	ec 01       	movw	r28, r24
     4d6:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <millis>
     4da:	5b 01       	movw	r10, r22
     4dc:	6c 01       	movw	r12, r24
     4de:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4e2:	ad 8d       	ldd	r26, Y+29	; 0x1d
     4e4:	be 8d       	ldd	r27, Y+30	; 0x1e
     4e6:	2f 8d       	ldd	r18, Y+31	; 0x1f
     4e8:	38 a1       	ldd	r19, Y+32	; 0x20
     4ea:	49 a1       	ldd	r20, Y+33	; 0x21
     4ec:	5a a1       	ldd	r21, Y+34	; 0x22
     4ee:	82 0f       	add	r24, r18
     4f0:	93 1f       	adc	r25, r19
     4f2:	a4 1f       	adc	r26, r20
     4f4:	b5 1f       	adc	r27, r21
     4f6:	8a 15       	cp	r24, r10
     4f8:	9b 05       	cpc	r25, r11
     4fa:	ac 05       	cpc	r26, r12
     4fc:	bd 05       	cpc	r27, r13
     4fe:	c0 f5       	brcc	.+112    	; 0x570 <_ZN12AccelStepper8runSpeedEv+0xb0>
     500:	ef 84       	ldd	r14, Y+15	; 0x0f
     502:	f8 88       	ldd	r15, Y+16	; 0x10
     504:	09 89       	ldd	r16, Y+17	; 0x11
     506:	1a 89       	ldd	r17, Y+18	; 0x12
     508:	c8 01       	movw	r24, r16
     50a:	b7 01       	movw	r22, r14
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	a9 01       	movw	r20, r18
     512:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__gtsf2>
     516:	18 16       	cp	r1, r24
     518:	44 f4       	brge	.+16     	; 0x52a <_ZN12AccelStepper8runSpeedEv+0x6a>
     51a:	8f 81       	ldd	r24, Y+7	; 0x07
     51c:	98 85       	ldd	r25, Y+8	; 0x08
     51e:	a9 85       	ldd	r26, Y+9	; 0x09
     520:	ba 85       	ldd	r27, Y+10	; 0x0a
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	a1 1d       	adc	r26, r1
     526:	b1 1d       	adc	r27, r1
     528:	10 c0       	rjmp	.+32     	; 0x54a <_ZN12AccelStepper8runSpeedEv+0x8a>
     52a:	c8 01       	movw	r24, r16
     52c:	b7 01       	movw	r22, r14
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	a9 01       	movw	r20, r18
     534:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__ltsf2>
     538:	87 ff       	sbrs	r24, 7
     53a:	0b c0       	rjmp	.+22     	; 0x552 <_ZN12AccelStepper8runSpeedEv+0x92>
     53c:	8f 81       	ldd	r24, Y+7	; 0x07
     53e:	98 85       	ldd	r25, Y+8	; 0x08
     540:	a9 85       	ldd	r26, Y+9	; 0x09
     542:	ba 85       	ldd	r27, Y+10	; 0x0a
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	a1 09       	sbc	r26, r1
     548:	b1 09       	sbc	r27, r1
     54a:	8f 83       	std	Y+7, r24	; 0x07
     54c:	98 87       	std	Y+8, r25	; 0x08
     54e:	a9 87       	std	Y+9, r26	; 0x09
     550:	ba 87       	std	Y+10, r27	; 0x0a
     552:	e8 81       	ld	r30, Y
     554:	f9 81       	ldd	r31, Y+1	; 0x01
     556:	6f 81       	ldd	r22, Y+7	; 0x07
     558:	63 70       	andi	r22, 0x03	; 3
     55a:	01 90       	ld	r0, Z+
     55c:	f0 81       	ld	r31, Z
     55e:	e0 2d       	mov	r30, r0
     560:	ce 01       	movw	r24, r28
     562:	09 95       	icall
     564:	af 8e       	std	Y+31, r10	; 0x1f
     566:	b8 a2       	std	Y+32, r11	; 0x20
     568:	c9 a2       	std	Y+33, r12	; 0x21
     56a:	da a2       	std	Y+34, r13	; 0x22
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	01 c0       	rjmp	.+2      	; 0x572 <_ZN12AccelStepper8runSpeedEv+0xb2>
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	bf 90       	pop	r11
     584:	af 90       	pop	r10
     586:	08 95       	ret

00000588 <_ZN12AccelStepper12distanceToGoEv>:
     588:	fc 01       	movw	r30, r24
     58a:	23 85       	ldd	r18, Z+11	; 0x0b
     58c:	34 85       	ldd	r19, Z+12	; 0x0c
     58e:	45 85       	ldd	r20, Z+13	; 0x0d
     590:	56 85       	ldd	r21, Z+14	; 0x0e
     592:	87 81       	ldd	r24, Z+7	; 0x07
     594:	90 85       	ldd	r25, Z+8	; 0x08
     596:	a1 85       	ldd	r26, Z+9	; 0x09
     598:	b2 85       	ldd	r27, Z+10	; 0x0a
     59a:	28 1b       	sub	r18, r24
     59c:	39 0b       	sbc	r19, r25
     59e:	4a 0b       	sbc	r20, r26
     5a0:	5b 0b       	sbc	r21, r27
     5a2:	b9 01       	movw	r22, r18
     5a4:	ca 01       	movw	r24, r20
     5a6:	08 95       	ret

000005a8 <_ZN12AccelStepper14targetPositionEv>:
     5a8:	fc 01       	movw	r30, r24
     5aa:	63 85       	ldd	r22, Z+11	; 0x0b
     5ac:	74 85       	ldd	r23, Z+12	; 0x0c
     5ae:	85 85       	ldd	r24, Z+13	; 0x0d
     5b0:	96 85       	ldd	r25, Z+14	; 0x0e
     5b2:	08 95       	ret

000005b4 <_ZN12AccelStepper15currentPositionEv>:
     5b4:	fc 01       	movw	r30, r24
     5b6:	67 81       	ldd	r22, Z+7	; 0x07
     5b8:	70 85       	ldd	r23, Z+8	; 0x08
     5ba:	81 85       	ldd	r24, Z+9	; 0x09
     5bc:	92 85       	ldd	r25, Z+10	; 0x0a
     5be:	08 95       	ret

000005c0 <_ZN12AccelStepper18setCurrentPositionEl>:
     5c0:	fc 01       	movw	r30, r24
     5c2:	47 83       	std	Z+7, r20	; 0x07
     5c4:	50 87       	std	Z+8, r21	; 0x08
     5c6:	61 87       	std	Z+9, r22	; 0x09
     5c8:	72 87       	std	Z+10, r23	; 0x0a
     5ca:	08 95       	ret

000005cc <_ZN12AccelStepperC1EPFvvES1_>:
     5cc:	fc 01       	movw	r30, r24
     5ce:	84 e0       	ldi	r24, 0x04	; 4
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	91 83       	std	Z+1, r25	; 0x01
     5d4:	80 83       	st	Z, r24
     5d6:	12 82       	std	Z+2, r1	; 0x02
     5d8:	17 82       	std	Z+7, r1	; 0x07
     5da:	10 86       	std	Z+8, r1	; 0x08
     5dc:	11 86       	std	Z+9, r1	; 0x09
     5de:	12 86       	std	Z+10, r1	; 0x0a
     5e0:	13 86       	std	Z+11, r1	; 0x0b
     5e2:	14 86       	std	Z+12, r1	; 0x0c
     5e4:	15 86       	std	Z+13, r1	; 0x0d
     5e6:	16 86       	std	Z+14, r1	; 0x0e
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	dc 01       	movw	r26, r24
     5ee:	87 87       	std	Z+15, r24	; 0x0f
     5f0:	90 8b       	std	Z+16, r25	; 0x10
     5f2:	a1 8b       	std	Z+17, r26	; 0x11
     5f4:	b2 8b       	std	Z+18, r27	; 0x12
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e8       	ldi	r26, 0x80	; 128
     5fc:	bf e3       	ldi	r27, 0x3F	; 63
     5fe:	83 8b       	std	Z+19, r24	; 0x13
     600:	94 8b       	std	Z+20, r25	; 0x14
     602:	a5 8b       	std	Z+21, r26	; 0x15
     604:	b6 8b       	std	Z+22, r27	; 0x16
     606:	87 8b       	std	Z+23, r24	; 0x17
     608:	90 8f       	std	Z+24, r25	; 0x18
     60a:	a1 8f       	std	Z+25, r26	; 0x19
     60c:	b2 8f       	std	Z+26, r27	; 0x1a
     60e:	13 8e       	std	Z+27, r1	; 0x1b
     610:	14 8e       	std	Z+28, r1	; 0x1c
     612:	15 8e       	std	Z+29, r1	; 0x1d
     614:	16 8e       	std	Z+30, r1	; 0x1e
     616:	17 8e       	std	Z+31, r1	; 0x1f
     618:	10 a2       	std	Z+32, r1	; 0x20
     61a:	11 a2       	std	Z+33, r1	; 0x21
     61c:	12 a2       	std	Z+34, r1	; 0x22
     61e:	13 82       	std	Z+3, r1	; 0x03
     620:	14 82       	std	Z+4, r1	; 0x04
     622:	15 82       	std	Z+5, r1	; 0x05
     624:	16 82       	std	Z+6, r1	; 0x06
     626:	74 a3       	std	Z+36, r23	; 0x24
     628:	63 a3       	std	Z+35, r22	; 0x23
     62a:	56 a3       	std	Z+38, r21	; 0x26
     62c:	45 a3       	std	Z+37, r20	; 0x25
     62e:	08 95       	ret

00000630 <_ZN12AccelStepper8setSpeedEf>:
     630:	af 92       	push	r10
     632:	bf 92       	push	r11
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	ec 01       	movw	r28, r24
     646:	9a 01       	movw	r18, r20
     648:	ab 01       	movw	r20, r22
     64a:	2f 87       	std	Y+15, r18	; 0x0f
     64c:	38 8b       	std	Y+16, r19	; 0x10
     64e:	49 8b       	std	Y+17, r20	; 0x11
     650:	5a 8b       	std	Y+18, r21	; 0x12
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	8a e7       	ldi	r24, 0x7A	; 122
     658:	94 e4       	ldi	r25, 0x44	; 68
     65a:	0e 94 93 10 	call	0x2126	; 0x2126 <__divsf3>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	5b 01       	movw	r10, r22
     664:	6c 01       	movw	r12, r24
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	a9 01       	movw	r20, r18
     66c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__gtsf2>
     670:	18 16       	cp	r1, r24
     672:	1c f4       	brge	.+6      	; 0x67a <_ZN12AccelStepper8setSpeedEf+0x4a>
     674:	b7 01       	movw	r22, r14
     676:	c8 01       	movw	r24, r16
     678:	03 c0       	rjmp	.+6      	; 0x680 <_ZN12AccelStepper8setSpeedEf+0x50>
     67a:	c6 01       	movw	r24, r12
     67c:	b5 01       	movw	r22, r10
     67e:	90 58       	subi	r25, 0x80	; 128
     680:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
     684:	6b 8f       	std	Y+27, r22	; 0x1b
     686:	7c 8f       	std	Y+28, r23	; 0x1c
     688:	8d 8f       	std	Y+29, r24	; 0x1d
     68a:	9e 8f       	std	Y+30, r25	; 0x1e
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	df 90       	pop	r13
     69a:	cf 90       	pop	r12
     69c:	bf 90       	pop	r11
     69e:	af 90       	pop	r10
     6a0:	08 95       	ret

000006a2 <_ZN12AccelStepper15computeNewSpeedEv>:
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
     6a8:	e8 81       	ld	r30, Y
     6aa:	f9 81       	ldd	r31, Y+1	; 0x01
     6ac:	02 84       	ldd	r0, Z+10	; 0x0a
     6ae:	f3 85       	ldd	r31, Z+11	; 0x0b
     6b0:	e0 2d       	mov	r30, r0
     6b2:	09 95       	icall
     6b4:	ab 01       	movw	r20, r22
     6b6:	bc 01       	movw	r22, r24
     6b8:	ce 01       	movw	r24, r28
     6ba:	0e 94 18 03 	call	0x630	; 0x630 <_ZN12AccelStepper8setSpeedEf>
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <_ZN12AccelStepper15setAccelerationEf>:
     6c4:	fc 01       	movw	r30, r24
     6c6:	47 8b       	std	Z+23, r20	; 0x17
     6c8:	50 8f       	std	Z+24, r21	; 0x18
     6ca:	61 8f       	std	Z+25, r22	; 0x19
     6cc:	72 8f       	std	Z+26, r23	; 0x1a
     6ce:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     6d2:	08 95       	ret

000006d4 <_ZN12AccelStepper11setMaxSpeedEf>:
     6d4:	fc 01       	movw	r30, r24
     6d6:	43 8b       	std	Z+19, r20	; 0x13
     6d8:	54 8b       	std	Z+20, r21	; 0x14
     6da:	65 8b       	std	Z+21, r22	; 0x15
     6dc:	76 8b       	std	Z+22, r23	; 0x16
     6de:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     6e2:	08 95       	ret

000006e4 <_ZN12AccelStepper3runEv>:
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	ec 01       	movw	r28, r24
     6ea:	2b 85       	ldd	r18, Y+11	; 0x0b
     6ec:	3c 85       	ldd	r19, Y+12	; 0x0c
     6ee:	4d 85       	ldd	r20, Y+13	; 0x0d
     6f0:	5e 85       	ldd	r21, Y+14	; 0x0e
     6f2:	8f 81       	ldd	r24, Y+7	; 0x07
     6f4:	98 85       	ldd	r25, Y+8	; 0x08
     6f6:	a9 85       	ldd	r26, Y+9	; 0x09
     6f8:	ba 85       	ldd	r27, Y+10	; 0x0a
     6fa:	28 17       	cp	r18, r24
     6fc:	39 07       	cpc	r19, r25
     6fe:	4a 07       	cpc	r20, r26
     700:	5b 07       	cpc	r21, r27
     702:	49 f0       	breq	.+18     	; 0x716 <_ZN12AccelStepper3runEv+0x32>
     704:	ce 01       	movw	r24, r28
     706:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN12AccelStepper8runSpeedEv>
     70a:	88 23       	and	r24, r24
     70c:	31 f0       	breq	.+12     	; 0x71a <_ZN12AccelStepper3runEv+0x36>
     70e:	ce 01       	movw	r24, r28
     710:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     714:	02 c0       	rjmp	.+4      	; 0x71a <_ZN12AccelStepper3runEv+0x36>
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	01 c0       	rjmp	.+2      	; 0x71c <_ZN12AccelStepper3runEv+0x38>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <_ZN12AccelStepper6moveToEl>:
     722:	fc 01       	movw	r30, r24
     724:	43 87       	std	Z+11, r20	; 0x0b
     726:	54 87       	std	Z+12, r21	; 0x0c
     728:	65 87       	std	Z+13, r22	; 0x0d
     72a:	76 87       	std	Z+14, r23	; 0x0e
     72c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     730:	08 95       	ret

00000732 <_ZN12AccelStepper4moveEl>:
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	fc 01       	movw	r30, r24
     738:	07 81       	ldd	r16, Z+7	; 0x07
     73a:	10 85       	ldd	r17, Z+8	; 0x08
     73c:	21 85       	ldd	r18, Z+9	; 0x09
     73e:	32 85       	ldd	r19, Z+10	; 0x0a
     740:	40 0f       	add	r20, r16
     742:	51 1f       	adc	r21, r17
     744:	62 1f       	adc	r22, r18
     746:	73 1f       	adc	r23, r19
     748:	43 87       	std	Z+11, r20	; 0x0b
     74a:	54 87       	std	Z+12, r21	; 0x0c
     74c:	65 87       	std	Z+13, r22	; 0x0d
     74e:	76 87       	std	Z+14, r23	; 0x0e
     750:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	08 95       	ret

0000075a <_ZN12AccelStepper5speedEv>:
     75a:	fc 01       	movw	r30, r24
     75c:	57 85       	ldd	r21, Z+15	; 0x0f
     75e:	40 89       	ldd	r20, Z+16	; 0x10
     760:	31 89       	ldd	r19, Z+17	; 0x11
     762:	22 89       	ldd	r18, Z+18	; 0x12
     764:	65 2f       	mov	r22, r21
     766:	74 2f       	mov	r23, r20
     768:	83 2f       	mov	r24, r19
     76a:	92 2f       	mov	r25, r18
     76c:	08 95       	ret

0000076e <_ZN12AccelStepper14disableOutputsEv>:
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	ec 01       	movw	r28, r24
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	88 23       	and	r24, r24
     778:	99 f0       	breq	.+38     	; 0x7a0 <_ZN12AccelStepper14disableOutputsEv+0x32>
     77a:	8b 81       	ldd	r24, Y+3	; 0x03
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     78a:	8a 81       	ldd	r24, Y+2	; 0x02
     78c:	84 30       	cpi	r24, 0x04	; 4
     78e:	41 f4       	brne	.+16     	; 0x7a0 <_ZN12AccelStepper14disableOutputsEv+0x32>
     790:	8d 81       	ldd	r24, Y+5	; 0x05
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     798:	8e 81       	ldd	r24, Y+6	; 0x06
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <_ZN12AccelStepper13enableOutputsEv>:
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	ec 01       	movw	r28, r24
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	88 23       	and	r24, r24
     7b0:	99 f0       	breq	.+38     	; 0x7d8 <_ZN12AccelStepper13enableOutputsEv+0x32>
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <pinMode>
     7ba:	8c 81       	ldd	r24, Y+4	; 0x04
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <pinMode>
     7c2:	8a 81       	ldd	r24, Y+2	; 0x02
     7c4:	84 30       	cpi	r24, 0x04	; 4
     7c6:	41 f4       	brne	.+16     	; 0x7d8 <_ZN12AccelStepper13enableOutputsEv+0x32>
     7c8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <pinMode>
     7d0:	8e 81       	ldd	r24, Y+6	; 0x06
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <pinMode>
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <_ZN12AccelStepperC1Ehhhhh>:
     7de:	ef 92       	push	r14
     7e0:	0f 93       	push	r16
     7e2:	fc 01       	movw	r30, r24
     7e4:	84 e0       	ldi	r24, 0x04	; 4
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	91 83       	std	Z+1, r25	; 0x01
     7ea:	80 83       	st	Z, r24
     7ec:	62 83       	std	Z+2, r22	; 0x02
     7ee:	17 82       	std	Z+7, r1	; 0x07
     7f0:	10 86       	std	Z+8, r1	; 0x08
     7f2:	11 86       	std	Z+9, r1	; 0x09
     7f4:	12 86       	std	Z+10, r1	; 0x0a
     7f6:	13 86       	std	Z+11, r1	; 0x0b
     7f8:	14 86       	std	Z+12, r1	; 0x0c
     7fa:	15 86       	std	Z+13, r1	; 0x0d
     7fc:	16 86       	std	Z+14, r1	; 0x0e
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	dc 01       	movw	r26, r24
     804:	87 87       	std	Z+15, r24	; 0x0f
     806:	90 8b       	std	Z+16, r25	; 0x10
     808:	a1 8b       	std	Z+17, r26	; 0x11
     80a:	b2 8b       	std	Z+18, r27	; 0x12
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	a0 e8       	ldi	r26, 0x80	; 128
     812:	bf e3       	ldi	r27, 0x3F	; 63
     814:	83 8b       	std	Z+19, r24	; 0x13
     816:	94 8b       	std	Z+20, r25	; 0x14
     818:	a5 8b       	std	Z+21, r26	; 0x15
     81a:	b6 8b       	std	Z+22, r27	; 0x16
     81c:	87 8b       	std	Z+23, r24	; 0x17
     81e:	90 8f       	std	Z+24, r25	; 0x18
     820:	a1 8f       	std	Z+25, r26	; 0x19
     822:	b2 8f       	std	Z+26, r27	; 0x1a
     824:	13 8e       	std	Z+27, r1	; 0x1b
     826:	14 8e       	std	Z+28, r1	; 0x1c
     828:	15 8e       	std	Z+29, r1	; 0x1d
     82a:	16 8e       	std	Z+30, r1	; 0x1e
     82c:	17 8e       	std	Z+31, r1	; 0x1f
     82e:	10 a2       	std	Z+32, r1	; 0x20
     830:	11 a2       	std	Z+33, r1	; 0x21
     832:	12 a2       	std	Z+34, r1	; 0x22
     834:	43 83       	std	Z+3, r20	; 0x03
     836:	24 83       	std	Z+4, r18	; 0x04
     838:	05 83       	std	Z+5, r16	; 0x05
     83a:	e6 82       	std	Z+6, r14	; 0x06
     83c:	cf 01       	movw	r24, r30
     83e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_ZN12AccelStepper13enableOutputsEv>
     842:	0f 91       	pop	r16
     844:	ef 90       	pop	r14
     846:	08 95       	ret

00000848 <_ZN12AccelStepper13runToPositionEv>:
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
     84e:	ce 01       	movw	r24, r28
     850:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN12AccelStepper3runEv>
     854:	88 23       	and	r24, r24
     856:	d9 f7       	brne	.-10     	; 0x84e <_ZN12AccelStepper13runToPositionEv+0x6>
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_ZN12AccelStepper18runSpeedToPositionEv>:
     85e:	fc 01       	movw	r30, r24
     860:	63 85       	ldd	r22, Z+11	; 0x0b
     862:	74 85       	ldd	r23, Z+12	; 0x0c
     864:	85 85       	ldd	r24, Z+13	; 0x0d
     866:	96 85       	ldd	r25, Z+14	; 0x0e
     868:	27 81       	ldd	r18, Z+7	; 0x07
     86a:	30 85       	ldd	r19, Z+8	; 0x08
     86c:	41 85       	ldd	r20, Z+9	; 0x09
     86e:	52 85       	ldd	r21, Z+10	; 0x0a
     870:	62 17       	cp	r22, r18
     872:	73 07       	cpc	r23, r19
     874:	84 07       	cpc	r24, r20
     876:	95 07       	cpc	r25, r21
     878:	21 f0       	breq	.+8      	; 0x882 <_ZN12AccelStepper18runSpeedToPositionEv+0x24>
     87a:	cf 01       	movw	r24, r30
     87c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN12AccelStepper8runSpeedEv>
     880:	08 95       	ret
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	08 95       	ret

00000886 <_ZN12AccelStepper16runToNewPositionEl>:
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	ec 01       	movw	r28, r24
     88c:	4b 87       	std	Y+11, r20	; 0x0b
     88e:	5c 87       	std	Y+12, r21	; 0x0c
     890:	6d 87       	std	Y+13, r22	; 0x0d
     892:	7e 87       	std	Y+14, r23	; 0x0e
     894:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     898:	ce 01       	movw	r24, r28
     89a:	0e 94 24 04 	call	0x848	; 0x848 <_ZN12AccelStepper13runToPositionEv>
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <_ZN7DCMotorC1Ei>:
     8a4:	fc 01       	movw	r30, r24
     8a6:	86 2f       	mov	r24, r22
     8a8:	60 83       	st	Z, r22
     8aa:	71 83       	std	Z+1, r23	; 0x01
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <pinMode>
     8b2:	08 95       	ret

000008b4 <_ZN7DCMotor13setMotorspeedEi>:
     8b4:	fc 01       	movw	r30, r24
     8b6:	80 81       	ld	r24, Z
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_Z10SoftPWMSetahh>
     8be:	08 95       	ret

000008c0 <_Z12DCMotor_intiv>:
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	0e 94 a9 0a 	call	0x1552	; 0x1552 <_Z12SoftPWMBeginh>
     8c6:	08 95       	ret

000008c8 <_ZN3LCDC1Ehhhhhhhh>:
     8c8:	6f 92       	push	r6
     8ca:	7f 92       	push	r7
     8cc:	8f 92       	push	r8
     8ce:	af 92       	push	r10
     8d0:	cf 92       	push	r12
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	df 93       	push	r29
     8dc:	cf 93       	push	r28
     8de:	00 d0       	rcall	.+0      	; 0x8e0 <_ZN3LCDC1Ehhhhhhhh+0x18>
     8e0:	0f 92       	push	r0
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
     8e6:	3c 01       	movw	r6, r24
     8e8:	85 e1       	ldi	r24, 0x15	; 21
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	2b 83       	std	Y+3, r18	; 0x03
     8ee:	4a 83       	std	Y+2, r20	; 0x02
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <_Znwj>
     8f6:	f8 2e       	mov	r15, r24
     8f8:	19 2f       	mov	r17, r25
     8fa:	69 81       	ldd	r22, Y+1	; 0x01
     8fc:	4a 81       	ldd	r20, Y+2	; 0x02
     8fe:	2b 81       	ldd	r18, Y+3	; 0x03
     900:	0e 94 6a 07 	call	0xed4	; 0xed4 <_ZN13LiquidCrystalC1Ehhhhhh>
     904:	f3 01       	movw	r30, r6
     906:	f0 82       	st	Z, r15
     908:	11 83       	std	Z+1, r17	; 0x01
     90a:	8f 2d       	mov	r24, r15
     90c:	91 2f       	mov	r25, r17
     90e:	6a 2d       	mov	r22, r10
     910:	48 2d       	mov	r20, r8
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	0e 94 b4 06 	call	0xd68	; 0xd68 <_ZN13LiquidCrystal5beginEhhh>
     918:	f3 01       	movw	r30, r6
     91a:	80 81       	ld	r24, Z
     91c:	91 81       	ldd	r25, Z+1	; 0x01
     91e:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN13LiquidCrystal5clearEv>
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	cf 91       	pop	r28
     92a:	df 91       	pop	r29
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	cf 90       	pop	r12
     936:	af 90       	pop	r10
     938:	8f 90       	pop	r8
     93a:	7f 90       	pop	r7
     93c:	6f 90       	pop	r6
     93e:	08 95       	ret

00000940 <_ZN3LCD5traceE6String>:
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
     94a:	8b 01       	movw	r16, r22
     94c:	88 81       	ld	r24, Y
     94e:	99 81       	ldd	r25, Y+1	; 0x01
     950:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN13LiquidCrystal5clearEv>
     954:	88 81       	ld	r24, Y
     956:	99 81       	ldd	r25, Y+1	; 0x01
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN13LiquidCrystal9setCursorEhh>
     960:	88 81       	ld	r24, Y
     962:	99 81       	ldd	r25, Y+1	; 0x01
     964:	b8 01       	movw	r22, r16
     966:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <_ZN5Print5printERK6String>
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	08 95       	ret

00000974 <_ZN3LCD9updateLCDEiiii>:
     974:	af 92       	push	r10
     976:	bf 92       	push	r11
     978:	cf 92       	push	r12
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	ec 01       	movw	r28, r24
     98a:	6b 01       	movw	r12, r22
     98c:	5a 01       	movw	r10, r20
     98e:	79 01       	movw	r14, r18
     990:	88 81       	ld	r24, Y
     992:	99 81       	ldd	r25, Y+1	; 0x01
     994:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN13LiquidCrystal5clearEv>
     998:	88 81       	ld	r24, Y
     99a:	99 81       	ldd	r25, Y+1	; 0x01
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN13LiquidCrystal9setCursorEhh>
     9a4:	88 81       	ld	r24, Y
     9a6:	99 81       	ldd	r25, Y+1	; 0x01
     9a8:	60 e1       	ldi	r22, 0x10	; 16
     9aa:	71 e0       	ldi	r23, 0x01	; 1
     9ac:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_ZN5Print5printEPKc>
     9b0:	88 81       	ld	r24, Y
     9b2:	99 81       	ldd	r25, Y+1	; 0x01
     9b4:	b6 01       	movw	r22, r12
     9b6:	4a e0       	ldi	r20, 0x0A	; 10
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN5Print5printEii>
     9be:	88 81       	ld	r24, Y
     9c0:	99 81       	ldd	r25, Y+1	; 0x01
     9c2:	69 e0       	ldi	r22, 0x09	; 9
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN13LiquidCrystal9setCursorEhh>
     9ca:	88 81       	ld	r24, Y
     9cc:	99 81       	ldd	r25, Y+1	; 0x01
     9ce:	66 e1       	ldi	r22, 0x16	; 22
     9d0:	71 e0       	ldi	r23, 0x01	; 1
     9d2:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_ZN5Print5printEPKc>
     9d6:	88 81       	ld	r24, Y
     9d8:	99 81       	ldd	r25, Y+1	; 0x01
     9da:	b5 01       	movw	r22, r10
     9dc:	4a e0       	ldi	r20, 0x0A	; 10
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN5Print5printEii>
     9e4:	88 81       	ld	r24, Y
     9e6:	99 81       	ldd	r25, Y+1	; 0x01
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	41 e0       	ldi	r20, 0x01	; 1
     9ec:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN13LiquidCrystal9setCursorEhh>
     9f0:	88 81       	ld	r24, Y
     9f2:	99 81       	ldd	r25, Y+1	; 0x01
     9f4:	6b e1       	ldi	r22, 0x1B	; 27
     9f6:	71 e0       	ldi	r23, 0x01	; 1
     9f8:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_ZN5Print5printEPKc>
     9fc:	88 81       	ld	r24, Y
     9fe:	99 81       	ldd	r25, Y+1	; 0x01
     a00:	b7 01       	movw	r22, r14
     a02:	4a e0       	ldi	r20, 0x0A	; 10
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN5Print5printEii>
     a0a:	88 81       	ld	r24, Y
     a0c:	99 81       	ldd	r25, Y+1	; 0x01
     a0e:	69 e0       	ldi	r22, 0x09	; 9
     a10:	41 e0       	ldi	r20, 0x01	; 1
     a12:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN13LiquidCrystal9setCursorEhh>
     a16:	88 81       	ld	r24, Y
     a18:	99 81       	ldd	r25, Y+1	; 0x01
     a1a:	61 e2       	ldi	r22, 0x21	; 33
     a1c:	71 e0       	ldi	r23, 0x01	; 1
     a1e:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_ZN5Print5printEPKc>
     a22:	88 81       	ld	r24, Y
     a24:	99 81       	ldd	r25, Y+1	; 0x01
     a26:	b8 01       	movw	r22, r16
     a28:	4a e0       	ldi	r20, 0x0A	; 10
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN5Print5printEii>
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	ff 90       	pop	r15
     a3a:	ef 90       	pop	r14
     a3c:	df 90       	pop	r13
     a3e:	cf 90       	pop	r12
     a40:	bf 90       	pop	r11
     a42:	af 90       	pop	r10
     a44:	08 95       	ret

00000a46 <_ZN13LiquidCrystal11pulseEnableEv>:
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	ec 01       	movw	r28, r24
     a4c:	8e 81       	ldd	r24, Y+6	; 0x06
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <delayMicroseconds>
     a5c:	8e 81       	ldd	r24, Y+6	; 0x06
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <delayMicroseconds>
     a6c:	8e 81       	ldd	r24, Y+6	; 0x06
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     a74:	84 e6       	ldi	r24, 0x64	; 100
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <delayMicroseconds>
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <_ZN13LiquidCrystal10write4bitsEh>:
     a82:	af 92       	push	r10
     a84:	bf 92       	push	r11
     a86:	cf 92       	push	r12
     a88:	df 92       	push	r13
     a8a:	ef 92       	push	r14
     a8c:	ff 92       	push	r15
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	7c 01       	movw	r14, r24
     a98:	8c 01       	movw	r16, r24
     a9a:	09 5f       	subi	r16, 0xF9	; 249
     a9c:	1f 4f       	sbci	r17, 0xFF	; 255
     a9e:	c0 e0       	ldi	r28, 0x00	; 0
     aa0:	d0 e0       	ldi	r29, 0x00	; 0
     aa2:	a6 2e       	mov	r10, r22
     aa4:	bb 24       	eor	r11, r11
     aa6:	68 01       	movw	r12, r16
     aa8:	f8 01       	movw	r30, r16
     aaa:	81 91       	ld	r24, Z+
     aac:	8f 01       	movw	r16, r30
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <pinMode>
     ab4:	b5 01       	movw	r22, r10
     ab6:	0c 2e       	mov	r0, r28
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <_ZN13LiquidCrystal10write4bitsEh+0x3c>
     aba:	75 95       	asr	r23
     abc:	67 95       	ror	r22
     abe:	0a 94       	dec	r0
     ac0:	e2 f7       	brpl	.-8      	; 0xaba <_ZN13LiquidCrystal10write4bitsEh+0x38>
     ac2:	61 70       	andi	r22, 0x01	; 1
     ac4:	f6 01       	movw	r30, r12
     ac6:	80 81       	ld	r24, Z
     ac8:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     acc:	21 96       	adiw	r28, 0x01	; 1
     ace:	c4 30       	cpi	r28, 0x04	; 4
     ad0:	d1 05       	cpc	r29, r1
     ad2:	49 f7       	brne	.-46     	; 0xaa6 <_ZN13LiquidCrystal10write4bitsEh+0x24>
     ad4:	c7 01       	movw	r24, r14
     ad6:	0e 94 23 05 	call	0xa46	; 0xa46 <_ZN13LiquidCrystal11pulseEnableEv>
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	08 95       	ret

00000af0 <_ZN13LiquidCrystal10write8bitsEh>:
     af0:	af 92       	push	r10
     af2:	bf 92       	push	r11
     af4:	cf 92       	push	r12
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	7c 01       	movw	r14, r24
     b06:	8c 01       	movw	r16, r24
     b08:	09 5f       	subi	r16, 0xF9	; 249
     b0a:	1f 4f       	sbci	r17, 0xFF	; 255
     b0c:	c0 e0       	ldi	r28, 0x00	; 0
     b0e:	d0 e0       	ldi	r29, 0x00	; 0
     b10:	a6 2e       	mov	r10, r22
     b12:	bb 24       	eor	r11, r11
     b14:	68 01       	movw	r12, r16
     b16:	f8 01       	movw	r30, r16
     b18:	81 91       	ld	r24, Z+
     b1a:	8f 01       	movw	r16, r30
     b1c:	61 e0       	ldi	r22, 0x01	; 1
     b1e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <pinMode>
     b22:	b5 01       	movw	r22, r10
     b24:	0c 2e       	mov	r0, r28
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <_ZN13LiquidCrystal10write8bitsEh+0x3c>
     b28:	75 95       	asr	r23
     b2a:	67 95       	ror	r22
     b2c:	0a 94       	dec	r0
     b2e:	e2 f7       	brpl	.-8      	; 0xb28 <_ZN13LiquidCrystal10write8bitsEh+0x38>
     b30:	61 70       	andi	r22, 0x01	; 1
     b32:	f6 01       	movw	r30, r12
     b34:	80 81       	ld	r24, Z
     b36:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     b3a:	21 96       	adiw	r28, 0x01	; 1
     b3c:	c8 30       	cpi	r28, 0x08	; 8
     b3e:	d1 05       	cpc	r29, r1
     b40:	49 f7       	brne	.-46     	; 0xb14 <_ZN13LiquidCrystal10write8bitsEh+0x24>
     b42:	c7 01       	movw	r24, r14
     b44:	0e 94 23 05 	call	0xa46	; 0xa46 <_ZN13LiquidCrystal11pulseEnableEv>
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	ff 90       	pop	r15
     b52:	ef 90       	pop	r14
     b54:	df 90       	pop	r13
     b56:	cf 90       	pop	r12
     b58:	bf 90       	pop	r11
     b5a:	af 90       	pop	r10
     b5c:	08 95       	ret

00000b5e <_ZN13LiquidCrystal4sendEhh>:
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	ec 01       	movw	r28, r24
     b66:	16 2f       	mov	r17, r22
     b68:	8c 81       	ldd	r24, Y+4	; 0x04
     b6a:	64 2f       	mov	r22, r20
     b6c:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     b70:	8d 81       	ldd	r24, Y+5	; 0x05
     b72:	8f 3f       	cpi	r24, 0xFF	; 255
     b74:	19 f0       	breq	.+6      	; 0xb7c <_ZN13LiquidCrystal4sendEhh+0x1e>
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     b7c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b7e:	84 ff       	sbrs	r24, 4
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <_ZN13LiquidCrystal4sendEhh+0x2e>
     b82:	ce 01       	movw	r24, r28
     b84:	61 2f       	mov	r22, r17
     b86:	0e 94 78 05 	call	0xaf0	; 0xaf0 <_ZN13LiquidCrystal10write8bitsEh>
     b8a:	0f c0       	rjmp	.+30     	; 0xbaa <_ZN13LiquidCrystal4sendEhh+0x4c>
     b8c:	21 2f       	mov	r18, r17
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	84 e0       	ldi	r24, 0x04	; 4
     b92:	35 95       	asr	r19
     b94:	27 95       	ror	r18
     b96:	8a 95       	dec	r24
     b98:	e1 f7       	brne	.-8      	; 0xb92 <_ZN13LiquidCrystal4sendEhh+0x34>
     b9a:	ce 01       	movw	r24, r28
     b9c:	62 2f       	mov	r22, r18
     b9e:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN13LiquidCrystal10write4bitsEh>
     ba2:	ce 01       	movw	r24, r28
     ba4:	61 2f       	mov	r22, r17
     ba6:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN13LiquidCrystal10write4bitsEh>
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	08 95       	ret

00000bb2 <_ZN13LiquidCrystal5writeEh>:
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN13LiquidCrystal4sendEhh>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	08 95       	ret

00000bbe <_ZN13LiquidCrystal7commandEh>:
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN13LiquidCrystal4sendEhh>
     bc4:	08 95       	ret

00000bc6 <_ZN13LiquidCrystal10createCharEhPh>:
     bc6:	cf 92       	push	r12
     bc8:	df 92       	push	r13
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <_ZN13LiquidCrystal10createCharEhPh+0x12>
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	6c 01       	movw	r12, r24
     bde:	67 70       	andi	r22, 0x07	; 7
     be0:	66 0f       	add	r22, r22
     be2:	66 0f       	add	r22, r22
     be4:	66 0f       	add	r22, r22
     be6:	60 64       	ori	r22, 0x40	; 64
     be8:	49 83       	std	Y+1, r20	; 0x01
     bea:	5a 83       	std	Y+2, r21	; 0x02
     bec:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     bf0:	49 81       	ldd	r20, Y+1	; 0x01
     bf2:	5a 81       	ldd	r21, Y+2	; 0x02
     bf4:	e4 2e       	mov	r14, r20
     bf6:	f5 2e       	mov	r15, r21
     bf8:	00 e0       	ldi	r16, 0x00	; 0
     bfa:	10 e0       	ldi	r17, 0x00	; 0
     bfc:	d7 01       	movw	r26, r14
     bfe:	6d 91       	ld	r22, X+
     c00:	7d 01       	movw	r14, r26
     c02:	d6 01       	movw	r26, r12
     c04:	ed 91       	ld	r30, X+
     c06:	fc 91       	ld	r31, X
     c08:	01 90       	ld	r0, Z+
     c0a:	f0 81       	ld	r31, Z
     c0c:	e0 2d       	mov	r30, r0
     c0e:	c6 01       	movw	r24, r12
     c10:	09 95       	icall
     c12:	0f 5f       	subi	r16, 0xFF	; 255
     c14:	1f 4f       	sbci	r17, 0xFF	; 255
     c16:	08 30       	cpi	r16, 0x08	; 8
     c18:	11 05       	cpc	r17, r1
     c1a:	81 f7       	brne	.-32     	; 0xbfc <_ZN13LiquidCrystal10createCharEhPh+0x36>
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	df 90       	pop	r13
     c2e:	cf 90       	pop	r12
     c30:	08 95       	ret

00000c32 <_ZN13LiquidCrystal12noAutoscrollEv>:
     c32:	fc 01       	movw	r30, r24
     c34:	61 89       	ldd	r22, Z+17	; 0x11
     c36:	6e 7f       	andi	r22, 0xFE	; 254
     c38:	61 8b       	std	Z+17, r22	; 0x11
     c3a:	64 60       	ori	r22, 0x04	; 4
     c3c:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     c40:	08 95       	ret

00000c42 <_ZN13LiquidCrystal10autoscrollEv>:
     c42:	fc 01       	movw	r30, r24
     c44:	61 89       	ldd	r22, Z+17	; 0x11
     c46:	26 2f       	mov	r18, r22
     c48:	21 60       	ori	r18, 0x01	; 1
     c4a:	21 8b       	std	Z+17, r18	; 0x11
     c4c:	65 60       	ori	r22, 0x05	; 5
     c4e:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     c52:	08 95       	ret

00000c54 <_ZN13LiquidCrystal11rightToLeftEv>:
     c54:	fc 01       	movw	r30, r24
     c56:	61 89       	ldd	r22, Z+17	; 0x11
     c58:	6d 7f       	andi	r22, 0xFD	; 253
     c5a:	61 8b       	std	Z+17, r22	; 0x11
     c5c:	64 60       	ori	r22, 0x04	; 4
     c5e:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     c62:	08 95       	ret

00000c64 <_ZN13LiquidCrystal11leftToRightEv>:
     c64:	fc 01       	movw	r30, r24
     c66:	61 89       	ldd	r22, Z+17	; 0x11
     c68:	26 2f       	mov	r18, r22
     c6a:	22 60       	ori	r18, 0x02	; 2
     c6c:	21 8b       	std	Z+17, r18	; 0x11
     c6e:	66 60       	ori	r22, 0x06	; 6
     c70:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     c74:	08 95       	ret

00000c76 <_ZN13LiquidCrystal18scrollDisplayRightEv>:
     c76:	6c e1       	ldi	r22, 0x1C	; 28
     c78:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     c7c:	08 95       	ret

00000c7e <_ZN13LiquidCrystal17scrollDisplayLeftEv>:
     c7e:	68 e1       	ldi	r22, 0x18	; 24
     c80:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     c84:	08 95       	ret

00000c86 <_ZN13LiquidCrystal5blinkEv>:
     c86:	fc 01       	movw	r30, r24
     c88:	60 89       	ldd	r22, Z+16	; 0x10
     c8a:	26 2f       	mov	r18, r22
     c8c:	21 60       	ori	r18, 0x01	; 1
     c8e:	20 8b       	std	Z+16, r18	; 0x10
     c90:	69 60       	ori	r22, 0x09	; 9
     c92:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     c96:	08 95       	ret

00000c98 <_ZN13LiquidCrystal7noBlinkEv>:
     c98:	fc 01       	movw	r30, r24
     c9a:	60 89       	ldd	r22, Z+16	; 0x10
     c9c:	6e 7f       	andi	r22, 0xFE	; 254
     c9e:	60 8b       	std	Z+16, r22	; 0x10
     ca0:	68 60       	ori	r22, 0x08	; 8
     ca2:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     ca6:	08 95       	ret

00000ca8 <_ZN13LiquidCrystal6cursorEv>:
     ca8:	fc 01       	movw	r30, r24
     caa:	60 89       	ldd	r22, Z+16	; 0x10
     cac:	26 2f       	mov	r18, r22
     cae:	22 60       	ori	r18, 0x02	; 2
     cb0:	20 8b       	std	Z+16, r18	; 0x10
     cb2:	6a 60       	ori	r22, 0x0A	; 10
     cb4:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     cb8:	08 95       	ret

00000cba <_ZN13LiquidCrystal8noCursorEv>:
     cba:	fc 01       	movw	r30, r24
     cbc:	60 89       	ldd	r22, Z+16	; 0x10
     cbe:	6d 7f       	andi	r22, 0xFD	; 253
     cc0:	60 8b       	std	Z+16, r22	; 0x10
     cc2:	68 60       	ori	r22, 0x08	; 8
     cc4:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     cc8:	08 95       	ret

00000cca <_ZN13LiquidCrystal7displayEv>:
     cca:	fc 01       	movw	r30, r24
     ccc:	60 89       	ldd	r22, Z+16	; 0x10
     cce:	26 2f       	mov	r18, r22
     cd0:	24 60       	ori	r18, 0x04	; 4
     cd2:	20 8b       	std	Z+16, r18	; 0x10
     cd4:	6c 60       	ori	r22, 0x0C	; 12
     cd6:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     cda:	08 95       	ret

00000cdc <_ZN13LiquidCrystal9noDisplayEv>:
     cdc:	fc 01       	movw	r30, r24
     cde:	60 89       	ldd	r22, Z+16	; 0x10
     ce0:	6b 7f       	andi	r22, 0xFB	; 251
     ce2:	60 8b       	std	Z+16, r22	; 0x10
     ce4:	68 60       	ori	r22, 0x08	; 8
     ce6:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     cea:	08 95       	ret

00000cec <_ZN13LiquidCrystal9setCursorEhh>:
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	28 97       	sbiw	r28, 0x08	; 8
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	fe 01       	movw	r30, r28
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	ad e2       	ldi	r26, 0x2D	; 45
     d06:	b1 e0       	ldi	r27, 0x01	; 1
     d08:	28 e0       	ldi	r18, 0x08	; 8
     d0a:	0d 90       	ld	r0, X+
     d0c:	01 92       	st	Z+, r0
     d0e:	21 50       	subi	r18, 0x01	; 1
     d10:	e1 f7       	brne	.-8      	; 0xd0a <_ZN13LiquidCrystal9setCursorEhh+0x1e>
     d12:	fc 01       	movw	r30, r24
     d14:	23 89       	ldd	r18, Z+19	; 0x13
     d16:	42 17       	cp	r20, r18
     d18:	10 f0       	brcs	.+4      	; 0xd1e <_ZN13LiquidCrystal9setCursorEhh+0x32>
     d1a:	42 2f       	mov	r20, r18
     d1c:	41 50       	subi	r20, 0x01	; 1
     d1e:	e4 2f       	mov	r30, r20
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	ee 0f       	add	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	ec 0f       	add	r30, r28
     d28:	fd 1f       	adc	r31, r29
     d2a:	21 81       	ldd	r18, Z+1	; 0x01
     d2c:	26 0f       	add	r18, r22
     d2e:	20 68       	ori	r18, 0x80	; 128
     d30:	62 2f       	mov	r22, r18
     d32:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     d36:	28 96       	adiw	r28, 0x08	; 8
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <_ZN13LiquidCrystal4homeEv>:
     d48:	62 e0       	ldi	r22, 0x02	; 2
     d4a:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     d4e:	80 ed       	ldi	r24, 0xD0	; 208
     d50:	97 e0       	ldi	r25, 0x07	; 7
     d52:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <delayMicroseconds>
     d56:	08 95       	ret

00000d58 <_ZN13LiquidCrystal5clearEv>:
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     d5e:	80 ed       	ldi	r24, 0xD0	; 208
     d60:	97 e0       	ldi	r25, 0x07	; 7
     d62:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <delayMicroseconds>
     d66:	08 95       	ret

00000d68 <_ZN13LiquidCrystal5beginEhhh>:
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	ec 01       	movw	r28, r24
     d6e:	42 30       	cpi	r20, 0x02	; 2
     d70:	18 f0       	brcs	.+6      	; 0xd78 <_ZN13LiquidCrystal5beginEhhh+0x10>
     d72:	8f 85       	ldd	r24, Y+15	; 0x0f
     d74:	88 60       	ori	r24, 0x08	; 8
     d76:	8f 87       	std	Y+15, r24	; 0x0f
     d78:	4b 8b       	std	Y+19, r20	; 0x13
     d7a:	1c 8a       	std	Y+20, r1	; 0x14
     d7c:	22 23       	and	r18, r18
     d7e:	29 f0       	breq	.+10     	; 0xd8a <_ZN13LiquidCrystal5beginEhhh+0x22>
     d80:	41 30       	cpi	r20, 0x01	; 1
     d82:	19 f4       	brne	.+6      	; 0xd8a <_ZN13LiquidCrystal5beginEhhh+0x22>
     d84:	8f 85       	ldd	r24, Y+15	; 0x0f
     d86:	84 60       	ori	r24, 0x04	; 4
     d88:	8f 87       	std	Y+15, r24	; 0x0f
     d8a:	80 e5       	ldi	r24, 0x50	; 80
     d8c:	93 ec       	ldi	r25, 0xC3	; 195
     d8e:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <delayMicroseconds>
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     da2:	8d 81       	ldd	r24, Y+5	; 0x05
     da4:	8f 3f       	cpi	r24, 0xFF	; 255
     da6:	19 f0       	breq	.+6      	; 0xdae <_ZN13LiquidCrystal5beginEhhh+0x46>
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
     dae:	6f 85       	ldd	r22, Y+15	; 0x0f
     db0:	64 fd       	sbrc	r22, 4
     db2:	1d c0       	rjmp	.+58     	; 0xdee <_ZN13LiquidCrystal5beginEhhh+0x86>
     db4:	ce 01       	movw	r24, r28
     db6:	63 e0       	ldi	r22, 0x03	; 3
     db8:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN13LiquidCrystal10write4bitsEh>
     dbc:	84 e9       	ldi	r24, 0x94	; 148
     dbe:	91 e1       	ldi	r25, 0x11	; 17
     dc0:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <delayMicroseconds>
     dc4:	ce 01       	movw	r24, r28
     dc6:	63 e0       	ldi	r22, 0x03	; 3
     dc8:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN13LiquidCrystal10write4bitsEh>
     dcc:	84 e9       	ldi	r24, 0x94	; 148
     dce:	91 e1       	ldi	r25, 0x11	; 17
     dd0:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <delayMicroseconds>
     dd4:	ce 01       	movw	r24, r28
     dd6:	63 e0       	ldi	r22, 0x03	; 3
     dd8:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN13LiquidCrystal10write4bitsEh>
     ddc:	86 e9       	ldi	r24, 0x96	; 150
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <delayMicroseconds>
     de4:	ce 01       	movw	r24, r28
     de6:	62 e0       	ldi	r22, 0x02	; 2
     de8:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN13LiquidCrystal10write4bitsEh>
     dec:	16 c0       	rjmp	.+44     	; 0xe1a <_ZN13LiquidCrystal5beginEhhh+0xb2>
     dee:	60 62       	ori	r22, 0x20	; 32
     df0:	ce 01       	movw	r24, r28
     df2:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     df6:	84 e9       	ldi	r24, 0x94	; 148
     df8:	91 e1       	ldi	r25, 0x11	; 17
     dfa:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <delayMicroseconds>
     dfe:	6f 85       	ldd	r22, Y+15	; 0x0f
     e00:	60 62       	ori	r22, 0x20	; 32
     e02:	ce 01       	movw	r24, r28
     e04:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     e08:	86 e9       	ldi	r24, 0x96	; 150
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 3c 16 	call	0x2c78	; 0x2c78 <delayMicroseconds>
     e10:	6f 85       	ldd	r22, Y+15	; 0x0f
     e12:	60 62       	ori	r22, 0x20	; 32
     e14:	ce 01       	movw	r24, r28
     e16:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     e1a:	6f 85       	ldd	r22, Y+15	; 0x0f
     e1c:	60 62       	ori	r22, 0x20	; 32
     e1e:	ce 01       	movw	r24, r28
     e20:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     e24:	84 e0       	ldi	r24, 0x04	; 4
     e26:	88 8b       	std	Y+16, r24	; 0x10
     e28:	ce 01       	movw	r24, r28
     e2a:	0e 94 65 06 	call	0xcca	; 0xcca <_ZN13LiquidCrystal7displayEv>
     e2e:	ce 01       	movw	r24, r28
     e30:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN13LiquidCrystal5clearEv>
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	89 8b       	std	Y+17, r24	; 0x11
     e38:	ce 01       	movw	r24, r28
     e3a:	66 e0       	ldi	r22, 0x06	; 6
     e3c:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
     e46:	6f 92       	push	r6
     e48:	7f 92       	push	r7
     e4a:	8f 92       	push	r8
     e4c:	af 92       	push	r10
     e4e:	cf 92       	push	r12
     e50:	ef 92       	push	r14
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	3c 01       	movw	r6, r24
     e60:	16 2f       	mov	r17, r22
     e62:	84 2f       	mov	r24, r20
     e64:	f3 01       	movw	r30, r6
     e66:	44 83       	std	Z+4, r20	; 0x04
     e68:	25 83       	std	Z+5, r18	; 0x05
     e6a:	06 83       	std	Z+6, r16	; 0x06
     e6c:	e7 82       	std	Z+7, r14	; 0x07
     e6e:	c0 86       	std	Z+8, r12	; 0x08
     e70:	a1 86       	std	Z+9, r10	; 0x09
     e72:	82 86       	std	Z+10, r8	; 0x0a
     e74:	9d 85       	ldd	r25, Y+13	; 0x0d
     e76:	93 87       	std	Z+11, r25	; 0x0b
     e78:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7a:	94 87       	std	Z+12, r25	; 0x0c
     e7c:	9f 85       	ldd	r25, Y+15	; 0x0f
     e7e:	95 87       	std	Z+13, r25	; 0x0d
     e80:	98 89       	ldd	r25, Y+16	; 0x10
     e82:	96 87       	std	Z+14, r25	; 0x0e
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <pinMode>
     e8a:	f3 01       	movw	r30, r6
     e8c:	85 81       	ldd	r24, Z+5	; 0x05
     e8e:	8f 3f       	cpi	r24, 0xFF	; 255
     e90:	19 f0       	breq	.+6      	; 0xe98 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x52>
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <pinMode>
     e98:	f3 01       	movw	r30, r6
     e9a:	86 81       	ldd	r24, Z+6	; 0x06
     e9c:	61 e0       	ldi	r22, 0x01	; 1
     e9e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <pinMode>
     ea2:	11 23       	and	r17, r17
     ea4:	19 f0       	breq	.+6      	; 0xeac <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x66>
     ea6:	f3 01       	movw	r30, r6
     ea8:	17 86       	std	Z+15, r1	; 0x0f
     eaa:	03 c0       	rjmp	.+6      	; 0xeb2 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x6c>
     eac:	80 e1       	ldi	r24, 0x10	; 16
     eae:	f3 01       	movw	r30, r6
     eb0:	87 87       	std	Z+15, r24	; 0x0f
     eb2:	c3 01       	movw	r24, r6
     eb4:	60 e1       	ldi	r22, 0x10	; 16
     eb6:	41 e0       	ldi	r20, 0x01	; 1
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	0e 94 b4 06 	call	0xd68	; 0xd68 <_ZN13LiquidCrystal5beginEhhh>
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	ef 90       	pop	r14
     ec8:	cf 90       	pop	r12
     eca:	af 90       	pop	r10
     ecc:	8f 90       	pop	r8
     ece:	7f 90       	pop	r7
     ed0:	6f 90       	pop	r6
     ed2:	08 95       	ret

00000ed4 <_ZN13LiquidCrystalC1Ehhhhhh>:
     ed4:	8f 92       	push	r8
     ed6:	af 92       	push	r10
     ed8:	cf 92       	push	r12
     eda:	ef 92       	push	r14
     edc:	0f 93       	push	r16
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	a6 2f       	mov	r26, r22
     ee4:	74 2f       	mov	r23, r20
     ee6:	52 2f       	mov	r21, r18
     ee8:	30 2f       	mov	r19, r16
     eea:	ae 2c       	mov	r10, r14
     eec:	8c 2c       	mov	r8, r12
     eee:	ec 01       	movw	r28, r24
     ef0:	1b 82       	std	Y+3, r1	; 0x03
     ef2:	1a 82       	std	Y+2, r1	; 0x02
     ef4:	e9 e2       	ldi	r30, 0x29	; 41
     ef6:	f1 e0       	ldi	r31, 0x01	; 1
     ef8:	f9 83       	std	Y+1, r31	; 0x01
     efa:	e8 83       	st	Y, r30
     efc:	00 d0       	rcall	.+0      	; 0xefe <_ZN13LiquidCrystalC1Ehhhhhh+0x2a>
     efe:	00 d0       	rcall	.+0      	; 0xf00 <_ZN13LiquidCrystalC1Ehhhhhh+0x2c>
     f00:	ed b7       	in	r30, 0x3d	; 61
     f02:	fe b7       	in	r31, 0x3e	; 62
     f04:	31 96       	adiw	r30, 0x01	; 1
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	19 82       	std	Y+1, r1	; 0x01
     f0c:	11 82       	std	Z+1, r1	; 0x01
     f0e:	12 82       	std	Z+2, r1	; 0x02
     f10:	13 82       	std	Z+3, r1	; 0x03
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	4a 2f       	mov	r20, r26
     f16:	2f ef       	ldi	r18, 0xFF	; 255
     f18:	07 2f       	mov	r16, r23
     f1a:	e5 2e       	mov	r14, r21
     f1c:	c3 2e       	mov	r12, r19
     f1e:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	0f 91       	pop	r16
     f30:	ef 90       	pop	r14
     f32:	cf 90       	pop	r12
     f34:	af 90       	pop	r10
     f36:	8f 90       	pop	r8
     f38:	08 95       	ret

00000f3a <_ZN13LiquidCrystalC1Ehhhhhhh>:
     f3a:	8f 92       	push	r8
     f3c:	af 92       	push	r10
     f3e:	cf 92       	push	r12
     f40:	ef 92       	push	r14
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	16 2f       	mov	r17, r22
     f4c:	f4 2f       	mov	r31, r20
     f4e:	e2 2f       	mov	r30, r18
     f50:	70 2f       	mov	r23, r16
     f52:	5e 2d       	mov	r21, r14
     f54:	3c 2d       	mov	r19, r12
     f56:	8a 2c       	mov	r8, r10
     f58:	dc 01       	movw	r26, r24
     f5a:	13 96       	adiw	r26, 0x03	; 3
     f5c:	1c 92       	st	X, r1
     f5e:	1e 92       	st	-X, r1
     f60:	12 97       	sbiw	r26, 0x02	; 2
     f62:	c9 e2       	ldi	r28, 0x29	; 41
     f64:	d1 e0       	ldi	r29, 0x01	; 1
     f66:	cd 93       	st	X+, r28
     f68:	dc 93       	st	X, r29
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <_ZN13LiquidCrystalC1Ehhhhhhh+0x32>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <_ZN13LiquidCrystalC1Ehhhhhhh+0x34>
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	21 96       	adiw	r28, 0x01	; 1
     f74:	ad b7       	in	r26, 0x3d	; 61
     f76:	be b7       	in	r27, 0x3e	; 62
     f78:	11 96       	adiw	r26, 0x01	; 1
     f7a:	1c 92       	st	X, r1
     f7c:	19 82       	std	Y+1, r1	; 0x01
     f7e:	1a 82       	std	Y+2, r1	; 0x02
     f80:	1b 82       	std	Y+3, r1	; 0x03
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	41 2f       	mov	r20, r17
     f86:	2f 2f       	mov	r18, r31
     f88:	0e 2f       	mov	r16, r30
     f8a:	e7 2e       	mov	r14, r23
     f8c:	c5 2e       	mov	r12, r21
     f8e:	a3 2e       	mov	r10, r19
     f90:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ef 90       	pop	r14
     fa6:	cf 90       	pop	r12
     fa8:	af 90       	pop	r10
     faa:	8f 90       	pop	r8
     fac:	08 95       	ret

00000fae <_ZN13LiquidCrystalC1Ehhhhhhhhhh>:
     fae:	8f 92       	push	r8
     fb0:	af 92       	push	r10
     fb2:	cf 92       	push	r12
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	f6 2e       	mov	r15, r22
     fc6:	f4 2f       	mov	r31, r20
     fc8:	e2 2f       	mov	r30, r18
     fca:	70 2f       	mov	r23, r16
     fcc:	5e 2d       	mov	r21, r14
     fce:	3c 2d       	mov	r19, r12
     fd0:	dc 01       	movw	r26, r24
     fd2:	13 96       	adiw	r26, 0x03	; 3
     fd4:	1c 92       	st	X, r1
     fd6:	1e 92       	st	-X, r1
     fd8:	12 97       	sbiw	r26, 0x02	; 2
     fda:	09 e2       	ldi	r16, 0x29	; 41
     fdc:	11 e0       	ldi	r17, 0x01	; 1
     fde:	0d 93       	st	X+, r16
     fe0:	1c 93       	st	X, r17
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <_ZN13LiquidCrystalC1Ehhhhhhhhhh+0x36>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <_ZN13LiquidCrystalC1Ehhhhhhhhhh+0x38>
     fe6:	0d b7       	in	r16, 0x3d	; 61
     fe8:	1e b7       	in	r17, 0x3e	; 62
     fea:	0f 5f       	subi	r16, 0xFF	; 255
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	ad b7       	in	r26, 0x3d	; 61
     ff0:	be b7       	in	r27, 0x3e	; 62
     ff2:	11 96       	adiw	r26, 0x01	; 1
     ff4:	ac 92       	st	X, r10
     ff6:	d8 01       	movw	r26, r16
     ff8:	11 96       	adiw	r26, 0x01	; 1
     ffa:	8c 92       	st	X, r8
     ffc:	11 97       	sbiw	r26, 0x01	; 1
     ffe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1000:	12 96       	adiw	r26, 0x02	; 2
    1002:	2c 93       	st	X, r18
    1004:	12 97       	sbiw	r26, 0x02	; 2
    1006:	2d 85       	ldd	r18, Y+13	; 0x0d
    1008:	13 96       	adiw	r26, 0x03	; 3
    100a:	2c 93       	st	X, r18
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	4f 2d       	mov	r20, r15
    1010:	2f ef       	ldi	r18, 0xFF	; 255
    1012:	0f 2f       	mov	r16, r31
    1014:	ee 2e       	mov	r14, r30
    1016:	c7 2e       	mov	r12, r23
    1018:	a5 2e       	mov	r10, r21
    101a:	83 2e       	mov	r8, r19
    101c:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	cf 90       	pop	r12
    1036:	af 90       	pop	r10
    1038:	8f 90       	pop	r8
    103a:	08 95       	ret

0000103c <_ZN13LiquidCrystalC1Ehhhhhhhhhhh>:
    103c:	8f 92       	push	r8
    103e:	af 92       	push	r10
    1040:	cf 92       	push	r12
    1042:	df 92       	push	r13
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	a6 2f       	mov	r26, r22
    1056:	f4 2e       	mov	r15, r20
    1058:	d2 2e       	mov	r13, r18
    105a:	70 2f       	mov	r23, r16
    105c:	5e 2d       	mov	r21, r14
    105e:	3c 2d       	mov	r19, r12
    1060:	ba 2d       	mov	r27, r10
    1062:	fc 01       	movw	r30, r24
    1064:	13 82       	std	Z+3, r1	; 0x03
    1066:	12 82       	std	Z+2, r1	; 0x02
    1068:	09 e2       	ldi	r16, 0x29	; 41
    106a:	11 e0       	ldi	r17, 0x01	; 1
    106c:	11 83       	std	Z+1, r17	; 0x01
    106e:	00 83       	st	Z, r16
    1070:	00 d0       	rcall	.+0      	; 0x1072 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh+0x36>
    1072:	00 d0       	rcall	.+0      	; 0x1074 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh+0x38>
    1074:	0d b7       	in	r16, 0x3d	; 61
    1076:	1e b7       	in	r17, 0x3e	; 62
    1078:	0f 5f       	subi	r16, 0xFF	; 255
    107a:	1f 4f       	sbci	r17, 0xFF	; 255
    107c:	ed b7       	in	r30, 0x3d	; 61
    107e:	fe b7       	in	r31, 0x3e	; 62
    1080:	81 82       	std	Z+1, r8	; 0x01
    1082:	2d 85       	ldd	r18, Y+13	; 0x0d
    1084:	f8 01       	movw	r30, r16
    1086:	21 83       	std	Z+1, r18	; 0x01
    1088:	2e 85       	ldd	r18, Y+14	; 0x0e
    108a:	22 83       	std	Z+2, r18	; 0x02
    108c:	2f 85       	ldd	r18, Y+15	; 0x0f
    108e:	23 83       	std	Z+3, r18	; 0x03
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	4a 2f       	mov	r20, r26
    1094:	2f 2d       	mov	r18, r15
    1096:	0d 2d       	mov	r16, r13
    1098:	e7 2e       	mov	r14, r23
    109a:	c5 2e       	mov	r12, r21
    109c:	a3 2e       	mov	r10, r19
    109e:	8b 2e       	mov	r8, r27
    10a0:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	af 90       	pop	r10
    10be:	8f 90       	pop	r8
    10c0:	08 95       	ret

000010c2 <_ZN12PDControllerC1Ed>:
    10c2:	cf 93       	push	r28
    10c4:	df 93       	push	r29
    10c6:	ec 01       	movw	r28, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	ba 01       	movw	r22, r20
    10cc:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixsfsi>
    10d0:	79 8f       	std	Y+25, r23	; 0x19
    10d2:	68 8f       	std	Y+24, r22	; 0x18
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	08 95       	ret

000010da <_ZN12PDController7computeEd>:
    10da:	6f 92       	push	r6
    10dc:	7f 92       	push	r7
    10de:	8f 92       	push	r8
    10e0:	9f 92       	push	r9
    10e2:	af 92       	push	r10
    10e4:	bf 92       	push	r11
    10e6:	cf 92       	push	r12
    10e8:	df 92       	push	r13
    10ea:	ef 92       	push	r14
    10ec:	ff 92       	push	r15
    10ee:	0f 93       	push	r16
    10f0:	1f 93       	push	r17
    10f2:	cf 93       	push	r28
    10f4:	df 93       	push	r29
    10f6:	ec 01       	movw	r28, r24
    10f8:	7a 01       	movw	r14, r20
    10fa:	8b 01       	movw	r16, r22
    10fc:	48 83       	st	Y, r20
    10fe:	59 83       	std	Y+1, r21	; 0x01
    1100:	6a 83       	std	Y+2, r22	; 0x02
    1102:	7b 83       	std	Y+3, r23	; 0x03
    1104:	68 85       	ldd	r22, Y+8	; 0x08
    1106:	79 85       	ldd	r23, Y+9	; 0x09
    1108:	8a 85       	ldd	r24, Y+10	; 0x0a
    110a:	9b 85       	ldd	r25, Y+11	; 0x0b
    110c:	a8 01       	movw	r20, r16
    110e:	97 01       	movw	r18, r14
    1110:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__subsf3>
    1114:	28 89       	ldd	r18, Y+16	; 0x10
    1116:	39 89       	ldd	r19, Y+17	; 0x11
    1118:	4a 89       	ldd	r20, Y+18	; 0x12
    111a:	5b 89       	ldd	r21, Y+19	; 0x13
    111c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__mulsf3>
    1120:	5b 01       	movw	r10, r22
    1122:	6c 01       	movw	r12, r24
    1124:	c8 01       	movw	r24, r16
    1126:	b7 01       	movw	r22, r14
    1128:	2c 85       	ldd	r18, Y+12	; 0x0c
    112a:	3d 85       	ldd	r19, Y+13	; 0x0d
    112c:	4e 85       	ldd	r20, Y+14	; 0x0e
    112e:	5f 85       	ldd	r21, Y+15	; 0x0f
    1130:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__subsf3>
    1134:	2c 89       	ldd	r18, Y+20	; 0x14
    1136:	3d 89       	ldd	r19, Y+21	; 0x15
    1138:	4e 89       	ldd	r20, Y+22	; 0x16
    113a:	5f 89       	ldd	r21, Y+23	; 0x17
    113c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__mulsf3>
    1140:	9b 01       	movw	r18, r22
    1142:	ac 01       	movw	r20, r24
    1144:	c6 01       	movw	r24, r12
    1146:	b5 01       	movw	r22, r10
    1148:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__addsf3>
    114c:	d6 2e       	mov	r13, r22
    114e:	c7 2e       	mov	r12, r23
    1150:	b8 2e       	mov	r11, r24
    1152:	a9 2e       	mov	r10, r25
    1154:	a6 01       	movw	r20, r12
    1156:	95 01       	movw	r18, r10
    1158:	85 2f       	mov	r24, r21
    115a:	94 2f       	mov	r25, r20
    115c:	a3 2f       	mov	r26, r19
    115e:	b2 2f       	mov	r27, r18
    1160:	8c 83       	std	Y+4, r24	; 0x04
    1162:	9d 83       	std	Y+5, r25	; 0x05
    1164:	ae 83       	std	Y+6, r26	; 0x06
    1166:	bf 83       	std	Y+7, r27	; 0x07
    1168:	6e 8c       	ldd	r6, Y+30	; 0x1e
    116a:	7f 8c       	ldd	r7, Y+31	; 0x1f
    116c:	88 a0       	ldd	r8, Y+32	; 0x20
    116e:	99 a0       	ldd	r9, Y+33	; 0x21
    1170:	65 2f       	mov	r22, r21
    1172:	74 2f       	mov	r23, r20
    1174:	83 2f       	mov	r24, r19
    1176:	92 2f       	mov	r25, r18
    1178:	a4 01       	movw	r20, r8
    117a:	93 01       	movw	r18, r6
    117c:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__gtsf2>
    1180:	18 16       	cp	r1, r24
    1182:	84 f0       	brlt	.+32     	; 0x11a4 <_ZN12PDController7computeEd+0xca>
    1184:	6a 8c       	ldd	r6, Y+26	; 0x1a
    1186:	7b 8c       	ldd	r7, Y+27	; 0x1b
    1188:	8c 8c       	ldd	r8, Y+28	; 0x1c
    118a:	9d 8c       	ldd	r9, Y+29	; 0x1d
    118c:	a6 01       	movw	r20, r12
    118e:	95 01       	movw	r18, r10
    1190:	65 2f       	mov	r22, r21
    1192:	74 2f       	mov	r23, r20
    1194:	83 2f       	mov	r24, r19
    1196:	92 2f       	mov	r25, r18
    1198:	a4 01       	movw	r20, r8
    119a:	93 01       	movw	r18, r6
    119c:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__ltsf2>
    11a0:	87 ff       	sbrs	r24, 7
    11a2:	04 c0       	rjmp	.+8      	; 0x11ac <_ZN12PDController7computeEd+0xd2>
    11a4:	6c 82       	std	Y+4, r6	; 0x04
    11a6:	7d 82       	std	Y+5, r7	; 0x05
    11a8:	8e 82       	std	Y+6, r8	; 0x06
    11aa:	9f 82       	std	Y+7, r9	; 0x07
    11ac:	ec 86       	std	Y+12, r14	; 0x0c
    11ae:	fd 86       	std	Y+13, r15	; 0x0d
    11b0:	0e 87       	std	Y+14, r16	; 0x0e
    11b2:	1f 87       	std	Y+15, r17	; 0x0f
    11b4:	df 91       	pop	r29
    11b6:	cf 91       	pop	r28
    11b8:	1f 91       	pop	r17
    11ba:	0f 91       	pop	r16
    11bc:	ff 90       	pop	r15
    11be:	ef 90       	pop	r14
    11c0:	df 90       	pop	r13
    11c2:	cf 90       	pop	r12
    11c4:	bf 90       	pop	r11
    11c6:	af 90       	pop	r10
    11c8:	9f 90       	pop	r9
    11ca:	8f 90       	pop	r8
    11cc:	7f 90       	pop	r7
    11ce:	6f 90       	pop	r6
    11d0:	08 95       	ret

000011d2 <_ZN12PDController10setTuningsEdd>:
    11d2:	af 92       	push	r10
    11d4:	bf 92       	push	r11
    11d6:	cf 92       	push	r12
    11d8:	df 92       	push	r13
    11da:	ef 92       	push	r14
    11dc:	ff 92       	push	r15
    11de:	0f 93       	push	r16
    11e0:	1f 93       	push	r17
    11e2:	cf 93       	push	r28
    11e4:	df 93       	push	r29
    11e6:	ec 01       	movw	r28, r24
    11e8:	5a 01       	movw	r10, r20
    11ea:	6b 01       	movw	r12, r22
    11ec:	78 01       	movw	r14, r16
    11ee:	89 01       	movw	r16, r18
    11f0:	68 8d       	ldd	r22, Y+24	; 0x18
    11f2:	79 8d       	ldd	r23, Y+25	; 0x19
    11f4:	88 27       	eor	r24, r24
    11f6:	77 fd       	sbrc	r23, 7
    11f8:	80 95       	com	r24
    11fa:	98 2f       	mov	r25, r24
    11fc:	0e 94 01 12 	call	0x2402	; 0x2402 <__floatsisf>
    1200:	20 e0       	ldi	r18, 0x00	; 0
    1202:	30 e0       	ldi	r19, 0x00	; 0
    1204:	4a e7       	ldi	r20, 0x7A	; 122
    1206:	54 e4       	ldi	r21, 0x44	; 68
    1208:	0e 94 93 10 	call	0x2126	; 0x2126 <__divsf3>
    120c:	56 2f       	mov	r21, r22
    120e:	47 2f       	mov	r20, r23
    1210:	38 2f       	mov	r19, r24
    1212:	29 2f       	mov	r18, r25
    1214:	a8 8a       	std	Y+16, r10	; 0x10
    1216:	b9 8a       	std	Y+17, r11	; 0x11
    1218:	ca 8a       	std	Y+18, r12	; 0x12
    121a:	db 8a       	std	Y+19, r13	; 0x13
    121c:	c8 01       	movw	r24, r16
    121e:	b7 01       	movw	r22, r14
    1220:	da 01       	movw	r26, r20
    1222:	f9 01       	movw	r30, r18
    1224:	2b 2f       	mov	r18, r27
    1226:	3a 2f       	mov	r19, r26
    1228:	4f 2f       	mov	r20, r31
    122a:	5e 2f       	mov	r21, r30
    122c:	0e 94 93 10 	call	0x2126	; 0x2126 <__divsf3>
    1230:	6c 8b       	std	Y+20, r22	; 0x14
    1232:	7d 8b       	std	Y+21, r23	; 0x15
    1234:	8e 8b       	std	Y+22, r24	; 0x16
    1236:	9f 8b       	std	Y+23, r25	; 0x17
    1238:	df 91       	pop	r29
    123a:	cf 91       	pop	r28
    123c:	1f 91       	pop	r17
    123e:	0f 91       	pop	r16
    1240:	ff 90       	pop	r15
    1242:	ef 90       	pop	r14
    1244:	df 90       	pop	r13
    1246:	cf 90       	pop	r12
    1248:	bf 90       	pop	r11
    124a:	af 90       	pop	r10
    124c:	08 95       	ret

0000124e <_ZN12PDController13setSampleTimeEi>:
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	ec 01       	movw	r28, r24
    1260:	8b 01       	movw	r16, r22
    1262:	16 16       	cp	r1, r22
    1264:	17 06       	cpc	r1, r23
    1266:	2c f5       	brge	.+74     	; 0x12b2 <_ZN12PDController13setSampleTimeEi+0x64>
    1268:	b8 01       	movw	r22, r16
    126a:	88 27       	eor	r24, r24
    126c:	77 fd       	sbrc	r23, 7
    126e:	80 95       	com	r24
    1270:	98 2f       	mov	r25, r24
    1272:	0e 94 01 12 	call	0x2402	; 0x2402 <__floatsisf>
    1276:	6b 01       	movw	r12, r22
    1278:	7c 01       	movw	r14, r24
    127a:	68 8d       	ldd	r22, Y+24	; 0x18
    127c:	79 8d       	ldd	r23, Y+25	; 0x19
    127e:	88 27       	eor	r24, r24
    1280:	77 fd       	sbrc	r23, 7
    1282:	80 95       	com	r24
    1284:	98 2f       	mov	r25, r24
    1286:	0e 94 01 12 	call	0x2402	; 0x2402 <__floatsisf>
    128a:	9b 01       	movw	r18, r22
    128c:	ac 01       	movw	r20, r24
    128e:	c7 01       	movw	r24, r14
    1290:	b6 01       	movw	r22, r12
    1292:	0e 94 93 10 	call	0x2126	; 0x2126 <__divsf3>
    1296:	9b 01       	movw	r18, r22
    1298:	ac 01       	movw	r20, r24
    129a:	6c 89       	ldd	r22, Y+20	; 0x14
    129c:	7d 89       	ldd	r23, Y+21	; 0x15
    129e:	8e 89       	ldd	r24, Y+22	; 0x16
    12a0:	9f 89       	ldd	r25, Y+23	; 0x17
    12a2:	0e 94 93 10 	call	0x2126	; 0x2126 <__divsf3>
    12a6:	6c 8b       	std	Y+20, r22	; 0x14
    12a8:	7d 8b       	std	Y+21, r23	; 0x15
    12aa:	8e 8b       	std	Y+22, r24	; 0x16
    12ac:	9f 8b       	std	Y+23, r25	; 0x17
    12ae:	19 8f       	std	Y+25, r17	; 0x19
    12b0:	08 8f       	std	Y+24, r16	; 0x18
    12b2:	df 91       	pop	r29
    12b4:	cf 91       	pop	r28
    12b6:	1f 91       	pop	r17
    12b8:	0f 91       	pop	r16
    12ba:	ff 90       	pop	r15
    12bc:	ef 90       	pop	r14
    12be:	df 90       	pop	r13
    12c0:	cf 90       	pop	r12
    12c2:	08 95       	ret

000012c4 <_ZN12PDController15setOutputLimitsEdd>:
    12c4:	6f 92       	push	r6
    12c6:	7f 92       	push	r7
    12c8:	8f 92       	push	r8
    12ca:	9f 92       	push	r9
    12cc:	af 92       	push	r10
    12ce:	bf 92       	push	r11
    12d0:	cf 92       	push	r12
    12d2:	df 92       	push	r13
    12d4:	ef 92       	push	r14
    12d6:	ff 92       	push	r15
    12d8:	0f 93       	push	r16
    12da:	1f 93       	push	r17
    12dc:	cf 93       	push	r28
    12de:	df 93       	push	r29
    12e0:	ec 01       	movw	r28, r24
    12e2:	5a 01       	movw	r10, r20
    12e4:	6b 01       	movw	r12, r22
    12e6:	78 01       	movw	r14, r16
    12e8:	89 01       	movw	r16, r18
    12ea:	cb 01       	movw	r24, r22
    12ec:	ba 01       	movw	r22, r20
    12ee:	a8 01       	movw	r20, r16
    12f0:	97 01       	movw	r18, r14
    12f2:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__gtsf2>
    12f6:	18 16       	cp	r1, r24
    12f8:	2c f1       	brlt	.+74     	; 0x1344 <_ZN12PDController15setOutputLimitsEdd+0x80>
    12fa:	aa 8e       	std	Y+26, r10	; 0x1a
    12fc:	bb 8e       	std	Y+27, r11	; 0x1b
    12fe:	cc 8e       	std	Y+28, r12	; 0x1c
    1300:	dd 8e       	std	Y+29, r13	; 0x1d
    1302:	ee 8e       	std	Y+30, r14	; 0x1e
    1304:	ff 8e       	std	Y+31, r15	; 0x1f
    1306:	08 a3       	std	Y+32, r16	; 0x20
    1308:	19 a3       	std	Y+33, r17	; 0x21
    130a:	6c 80       	ldd	r6, Y+4	; 0x04
    130c:	7d 80       	ldd	r7, Y+5	; 0x05
    130e:	8e 80       	ldd	r8, Y+6	; 0x06
    1310:	9f 80       	ldd	r9, Y+7	; 0x07
    1312:	c4 01       	movw	r24, r8
    1314:	b3 01       	movw	r22, r6
    1316:	a8 01       	movw	r20, r16
    1318:	97 01       	movw	r18, r14
    131a:	0e 94 71 11 	call	0x22e2	; 0x22e2 <__gtsf2>
    131e:	18 16       	cp	r1, r24
    1320:	2c f4       	brge	.+10     	; 0x132c <_ZN12PDController15setOutputLimitsEdd+0x68>
    1322:	ec 82       	std	Y+4, r14	; 0x04
    1324:	fd 82       	std	Y+5, r15	; 0x05
    1326:	0e 83       	std	Y+6, r16	; 0x06
    1328:	1f 83       	std	Y+7, r17	; 0x07
    132a:	0c c0       	rjmp	.+24     	; 0x1344 <_ZN12PDController15setOutputLimitsEdd+0x80>
    132c:	c4 01       	movw	r24, r8
    132e:	b3 01       	movw	r22, r6
    1330:	a6 01       	movw	r20, r12
    1332:	95 01       	movw	r18, r10
    1334:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__ltsf2>
    1338:	87 ff       	sbrs	r24, 7
    133a:	04 c0       	rjmp	.+8      	; 0x1344 <_ZN12PDController15setOutputLimitsEdd+0x80>
    133c:	ac 82       	std	Y+4, r10	; 0x04
    133e:	bd 82       	std	Y+5, r11	; 0x05
    1340:	ce 82       	std	Y+6, r12	; 0x06
    1342:	df 82       	std	Y+7, r13	; 0x07
    1344:	df 91       	pop	r29
    1346:	cf 91       	pop	r28
    1348:	1f 91       	pop	r17
    134a:	0f 91       	pop	r16
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	bf 90       	pop	r11
    1356:	af 90       	pop	r10
    1358:	9f 90       	pop	r9
    135a:	8f 90       	pop	r8
    135c:	7f 90       	pop	r7
    135e:	6f 90       	pop	r6
    1360:	08 95       	ret

00001362 <_ZN12PDController12outputSerialEidd>:
    1362:	8f 92       	push	r8
    1364:	9f 92       	push	r9
    1366:	af 92       	push	r10
    1368:	bf 92       	push	r11
    136a:	cf 92       	push	r12
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	4b 01       	movw	r8, r22
    137c:	59 01       	movw	r10, r18
    137e:	6a 01       	movw	r12, r20
    1380:	c1 ef       	ldi	r28, 0xF1	; 241
    1382:	d3 e0       	ldi	r29, 0x03	; 3
    1384:	ce 01       	movw	r24, r28
    1386:	65 e3       	ldi	r22, 0x35	; 53
    1388:	71 e0       	ldi	r23, 0x01	; 1
    138a:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_ZN5Print5printEPKc>
    138e:	ce 01       	movw	r24, r28
    1390:	b4 01       	movw	r22, r8
    1392:	4a e0       	ldi	r20, 0x0A	; 10
    1394:	50 e0       	ldi	r21, 0x00	; 0
    1396:	0e 94 7f 21 	call	0x42fe	; 0x42fe <_ZN5Print5printEii>
    139a:	ce 01       	movw	r24, r28
    139c:	69 e3       	ldi	r22, 0x39	; 57
    139e:	71 e0       	ldi	r23, 0x01	; 1
    13a0:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_ZN5Print5printEPKc>
    13a4:	ce 01       	movw	r24, r28
    13a6:	b6 01       	movw	r22, r12
    13a8:	a5 01       	movw	r20, r10
    13aa:	22 e0       	ldi	r18, 0x02	; 2
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <_ZN5Print5printEdi>
    13b2:	ce 01       	movw	r24, r28
    13b4:	6c e3       	ldi	r22, 0x3C	; 60
    13b6:	71 e0       	ldi	r23, 0x01	; 1
    13b8:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_ZN5Print5printEPKc>
    13bc:	ce 01       	movw	r24, r28
    13be:	b8 01       	movw	r22, r16
    13c0:	a7 01       	movw	r20, r14
    13c2:	22 e0       	ldi	r18, 0x02	; 2
    13c4:	30 e0       	ldi	r19, 0x00	; 0
    13c6:	0e 94 5d 22 	call	0x44ba	; 0x44ba <_ZN5Print7printlnEdi>
    13ca:	df 91       	pop	r29
    13cc:	cf 91       	pop	r28
    13ce:	1f 91       	pop	r17
    13d0:	0f 91       	pop	r16
    13d2:	ff 90       	pop	r15
    13d4:	ef 90       	pop	r14
    13d6:	df 90       	pop	r13
    13d8:	cf 90       	pop	r12
    13da:	bf 90       	pop	r11
    13dc:	af 90       	pop	r10
    13de:	9f 90       	pop	r9
    13e0:	8f 90       	pop	r8
    13e2:	08 95       	ret

000013e4 <_Z26PDController_setSampleTimej>:
    13e4:	9c 01       	movw	r18, r24
    13e6:	46 e0       	ldi	r20, 0x06	; 6
    13e8:	22 0f       	add	r18, r18
    13ea:	33 1f       	adc	r19, r19
    13ec:	4a 95       	dec	r20
    13ee:	e1 f7       	brne	.-8      	; 0x13e8 <_Z26PDController_setSampleTimej+0x4>
    13f0:	28 1b       	sub	r18, r24
    13f2:	39 0b       	sbc	r19, r25
    13f4:	30 93 89 00 	sts	0x0089, r19
    13f8:	20 93 88 00 	sts	0x0088, r18
    13fc:	08 95       	ret

000013fe <_Z17PDController_initj>:
    13fe:	f8 94       	cli
    1400:	10 92 80 00 	sts	0x0080, r1
    1404:	e1 e8       	ldi	r30, 0x81	; 129
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	10 82       	st	Z, r1
    140a:	10 92 85 00 	sts	0x0085, r1
    140e:	10 92 84 00 	sts	0x0084, r1
    1412:	9c 01       	movw	r18, r24
    1414:	56 e0       	ldi	r21, 0x06	; 6
    1416:	22 0f       	add	r18, r18
    1418:	33 1f       	adc	r19, r19
    141a:	5a 95       	dec	r21
    141c:	e1 f7       	brne	.-8      	; 0x1416 <_Z17PDController_initj+0x18>
    141e:	28 1b       	sub	r18, r24
    1420:	39 0b       	sbc	r19, r25
    1422:	30 93 89 00 	sts	0x0089, r19
    1426:	20 93 88 00 	sts	0x0088, r18
    142a:	80 81       	ld	r24, Z
    142c:	88 60       	ori	r24, 0x08	; 8
    142e:	80 83       	st	Z, r24
    1430:	80 81       	ld	r24, Z
    1432:	84 60       	ori	r24, 0x04	; 4
    1434:	80 83       	st	Z, r24
    1436:	ef e6       	ldi	r30, 0x6F	; 111
    1438:	f0 e0       	ldi	r31, 0x00	; 0
    143a:	80 81       	ld	r24, Z
    143c:	82 60       	ori	r24, 0x02	; 2
    143e:	80 83       	st	Z, r24
    1440:	78 94       	sei
    1442:	08 95       	ret

00001444 <__vector_7>:
    1444:	1f 92       	push	r1
    1446:	0f 92       	push	r0
    1448:	0f b6       	in	r0, 0x3f	; 63
    144a:	0f 92       	push	r0
    144c:	11 24       	eor	r1, r1
    144e:	2f 93       	push	r18
    1450:	3f 93       	push	r19
    1452:	4f 93       	push	r20
    1454:	5f 93       	push	r21
    1456:	6f 93       	push	r22
    1458:	8f 93       	push	r24
    145a:	9f 93       	push	r25
    145c:	af 93       	push	r26
    145e:	bf 93       	push	r27
    1460:	ef 93       	push	r30
    1462:	ff 93       	push	r31
    1464:	80 91 45 01 	lds	r24, 0x0145
    1468:	8f 5f       	subi	r24, 0xFF	; 255
    146a:	80 93 45 01 	sts	0x0145, r24
    146e:	80 91 45 01 	lds	r24, 0x0145
    1472:	88 23       	and	r24, r24
    1474:	19 f0       	breq	.+6      	; 0x147c <__vector_7+0x38>
    1476:	ef e9       	ldi	r30, 0x9F	; 159
    1478:	f2 e0       	ldi	r31, 0x02	; 2
    147a:	40 c0       	rjmp	.+128    	; 0x14fc <__vector_7+0xb8>
    147c:	e0 ea       	ldi	r30, 0xA0	; 160
    147e:	f2 e0       	ldi	r31, 0x02	; 2
    1480:	66 81       	ldd	r22, Z+6	; 0x06
    1482:	66 23       	and	r22, r22
    1484:	19 f4       	brne	.+6      	; 0x148c <__vector_7+0x48>
    1486:	87 81       	ldd	r24, Z+7	; 0x07
    1488:	88 23       	and	r24, r24
    148a:	f9 f0       	breq	.+62     	; 0x14ca <__vector_7+0x86>
    148c:	84 81       	ldd	r24, Z+4	; 0x04
    148e:	90 e0       	ldi	r25, 0x00	; 0
    1490:	25 81       	ldd	r18, Z+5	; 0x05
    1492:	30 e0       	ldi	r19, 0x00	; 0
    1494:	ac 01       	movw	r20, r24
    1496:	42 1b       	sub	r20, r18
    1498:	53 0b       	sbc	r21, r19
    149a:	14 16       	cp	r1, r20
    149c:	15 06       	cpc	r1, r21
    149e:	44 f4       	brge	.+16     	; 0x14b0 <__vector_7+0x6c>
    14a0:	66 23       	and	r22, r22
    14a2:	a1 f0       	breq	.+40     	; 0x14cc <__vector_7+0x88>
    14a4:	26 0f       	add	r18, r22
    14a6:	31 1d       	adc	r19, r1
    14a8:	28 17       	cp	r18, r24
    14aa:	39 07       	cpc	r19, r25
    14ac:	7c f4       	brge	.+30     	; 0x14cc <__vector_7+0x88>
    14ae:	0b c0       	rjmp	.+22     	; 0x14c6 <__vector_7+0x82>
    14b0:	41 15       	cp	r20, r1
    14b2:	51 05       	cpc	r21, r1
    14b4:	59 f0       	breq	.+22     	; 0x14cc <__vector_7+0x88>
    14b6:	47 81       	ldd	r20, Z+7	; 0x07
    14b8:	44 23       	and	r20, r20
    14ba:	41 f0       	breq	.+16     	; 0x14cc <__vector_7+0x88>
    14bc:	24 1b       	sub	r18, r20
    14be:	31 09       	sbc	r19, r1
    14c0:	82 17       	cp	r24, r18
    14c2:	93 07       	cpc	r25, r19
    14c4:	1c f4       	brge	.+6      	; 0x14cc <__vector_7+0x88>
    14c6:	c9 01       	movw	r24, r18
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <__vector_7+0x88>
    14ca:	84 81       	ldd	r24, Z+4	; 0x04
    14cc:	85 83       	std	Z+5, r24	; 0x05
    14ce:	85 81       	ldd	r24, Z+5	; 0x05
    14d0:	88 23       	and	r24, r24
    14d2:	71 f0       	breq	.+28     	; 0x14f0 <__vector_7+0xac>
    14d4:	90 81       	ld	r25, Z
    14d6:	a1 81       	ldd	r26, Z+1	; 0x01
    14d8:	b2 81       	ldd	r27, Z+2	; 0x02
    14da:	83 81       	ldd	r24, Z+3	; 0x03
    14dc:	99 23       	and	r25, r25
    14de:	21 f4       	brne	.+8      	; 0x14e8 <__vector_7+0xa4>
    14e0:	9c 91       	ld	r25, X
    14e2:	98 2b       	or	r25, r24
    14e4:	9c 93       	st	X, r25
    14e6:	04 c0       	rjmp	.+8      	; 0x14f0 <__vector_7+0xac>
    14e8:	9c 91       	ld	r25, X
    14ea:	80 95       	com	r24
    14ec:	89 23       	and	r24, r25
    14ee:	8c 93       	st	X, r24
    14f0:	39 96       	adiw	r30, 0x09	; 9
    14f2:	83 e0       	ldi	r24, 0x03	; 3
    14f4:	e4 35       	cpi	r30, 0x54	; 84
    14f6:	f8 07       	cpc	r31, r24
    14f8:	19 f6       	brne	.-122    	; 0x1480 <__vector_7+0x3c>
    14fa:	bd cf       	rjmp	.-134    	; 0x1476 <__vector_7+0x32>
    14fc:	80 81       	ld	r24, Z
    14fe:	87 fd       	sbrc	r24, 7
    1500:	13 c0       	rjmp	.+38     	; 0x1528 <__vector_7+0xe4>
    1502:	80 91 45 01 	lds	r24, 0x0145
    1506:	96 81       	ldd	r25, Z+6	; 0x06
    1508:	98 17       	cp	r25, r24
    150a:	71 f4       	brne	.+28     	; 0x1528 <__vector_7+0xe4>
    150c:	81 81       	ldd	r24, Z+1	; 0x01
    150e:	a2 81       	ldd	r26, Z+2	; 0x02
    1510:	b3 81       	ldd	r27, Z+3	; 0x03
    1512:	94 81       	ldd	r25, Z+4	; 0x04
    1514:	88 23       	and	r24, r24
    1516:	29 f4       	brne	.+10     	; 0x1522 <__vector_7+0xde>
    1518:	2c 91       	ld	r18, X
    151a:	89 2f       	mov	r24, r25
    151c:	80 95       	com	r24
    151e:	82 23       	and	r24, r18
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <__vector_7+0xe2>
    1522:	8c 91       	ld	r24, X
    1524:	89 2b       	or	r24, r25
    1526:	8c 93       	st	X, r24
    1528:	39 96       	adiw	r30, 0x09	; 9
    152a:	83 e0       	ldi	r24, 0x03	; 3
    152c:	e3 35       	cpi	r30, 0x53	; 83
    152e:	f8 07       	cpc	r31, r24
    1530:	29 f7       	brne	.-54     	; 0x14fc <__vector_7+0xb8>
    1532:	ff 91       	pop	r31
    1534:	ef 91       	pop	r30
    1536:	bf 91       	pop	r27
    1538:	af 91       	pop	r26
    153a:	9f 91       	pop	r25
    153c:	8f 91       	pop	r24
    153e:	6f 91       	pop	r22
    1540:	5f 91       	pop	r21
    1542:	4f 91       	pop	r20
    1544:	3f 91       	pop	r19
    1546:	2f 91       	pop	r18
    1548:	0f 90       	pop	r0
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	0f 90       	pop	r0
    154e:	1f 90       	pop	r1
    1550:	18 95       	reti

00001552 <_Z12SoftPWMBeginh>:
    1552:	91 e0       	ldi	r25, 0x01	; 1
    1554:	97 bb       	out	0x17, r25	; 23
    1556:	92 e0       	ldi	r25, 0x02	; 2
    1558:	90 93 b1 00 	sts	0x00B1, r25
    155c:	90 93 b0 00 	sts	0x00B0, r25
    1560:	22 e8       	ldi	r18, 0x82	; 130
    1562:	20 93 b3 00 	sts	0x00B3, r18
    1566:	90 93 70 00 	sts	0x0070, r25
    156a:	90 91 70 00 	lds	r25, 0x0070
    156e:	ef e9       	ldi	r30, 0x9F	; 159
    1570:	f2 e0       	ldi	r31, 0x02	; 2
    1572:	9f ef       	ldi	r25, 0xFF	; 255
    1574:	90 83       	st	Z, r25
    1576:	11 82       	std	Z+1, r1	; 0x01
    1578:	13 82       	std	Z+3, r1	; 0x03
    157a:	12 82       	std	Z+2, r1	; 0x02
    157c:	17 82       	std	Z+7, r1	; 0x07
    157e:	10 86       	std	Z+8, r1	; 0x08
    1580:	39 96       	adiw	r30, 0x09	; 9
    1582:	23 e0       	ldi	r18, 0x03	; 3
    1584:	e3 35       	cpi	r30, 0x53	; 83
    1586:	f2 07       	cpc	r31, r18
    1588:	a9 f7       	brne	.-22     	; 0x1574 <_Z12SoftPWMBeginh+0x22>
    158a:	80 93 9e 02 	sts	0x029E, r24
    158e:	08 95       	ret

00001590 <_Z18SoftPWMSetPolarityah>:
    1590:	91 e0       	ldi	r25, 0x01	; 1
    1592:	66 23       	and	r22, r22
    1594:	09 f4       	brne	.+2      	; 0x1598 <_Z18SoftPWMSetPolarityah+0x8>
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	ef e9       	ldi	r30, 0x9F	; 159
    159a:	f2 e0       	ldi	r31, 0x02	; 2
    159c:	20 81       	ld	r18, Z
    159e:	87 ff       	sbrs	r24, 7
    15a0:	03 c0       	rjmp	.+6      	; 0x15a8 <_Z18SoftPWMSetPolarityah+0x18>
    15a2:	27 ff       	sbrs	r18, 7
    15a4:	03 c0       	rjmp	.+6      	; 0x15ac <_Z18SoftPWMSetPolarityah+0x1c>
    15a6:	03 c0       	rjmp	.+6      	; 0x15ae <_Z18SoftPWMSetPolarityah+0x1e>
    15a8:	28 17       	cp	r18, r24
    15aa:	09 f4       	brne	.+2      	; 0x15ae <_Z18SoftPWMSetPolarityah+0x1e>
    15ac:	91 83       	std	Z+1, r25	; 0x01
    15ae:	39 96       	adiw	r30, 0x09	; 9
    15b0:	23 e0       	ldi	r18, 0x03	; 3
    15b2:	e3 35       	cpi	r30, 0x53	; 83
    15b4:	f2 07       	cpc	r31, r18
    15b6:	91 f7       	brne	.-28     	; 0x159c <_Z18SoftPWMSetPolarityah+0xc>
    15b8:	08 95       	ret

000015ba <_Z10SoftPWMSetahh>:
    15ba:	1f 93       	push	r17
    15bc:	18 2f       	mov	r17, r24
    15be:	44 23       	and	r20, r20
    15c0:	29 f0       	breq	.+10     	; 0x15cc <_Z10SoftPWMSetahh+0x12>
    15c2:	10 92 b2 00 	sts	0x00B2, r1
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	80 93 45 01 	sts	0x0145, r24
    15cc:	ef e9       	ldi	r30, 0x9F	; 159
    15ce:	f2 e0       	ldi	r31, 0x02	; 2
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	8f ef       	ldi	r24, 0xFF	; 255
    15d4:	20 81       	ld	r18, Z
    15d6:	17 ff       	sbrs	r17, 7
    15d8:	03 c0       	rjmp	.+6      	; 0x15e0 <_Z10SoftPWMSetahh+0x26>
    15da:	27 ff       	sbrs	r18, 7
    15dc:	03 c0       	rjmp	.+6      	; 0x15e4 <_Z10SoftPWMSetahh+0x2a>
    15de:	05 c0       	rjmp	.+10     	; 0x15ea <_Z10SoftPWMSetahh+0x30>
    15e0:	21 17       	cp	r18, r17
    15e2:	19 f4       	brne	.+6      	; 0x15ea <_Z10SoftPWMSetahh+0x30>
    15e4:	65 83       	std	Z+5, r22	; 0x05
    15e6:	17 ff       	sbrs	r17, 7
    15e8:	4d c0       	rjmp	.+154    	; 0x1684 <_Z10SoftPWMSetahh+0xca>
    15ea:	8f 3f       	cpi	r24, 0xFF	; 255
    15ec:	19 f4       	brne	.+6      	; 0x15f4 <_Z10SoftPWMSetahh+0x3a>
    15ee:	20 81       	ld	r18, Z
    15f0:	27 fd       	sbrc	r18, 7
    15f2:	89 2f       	mov	r24, r25
    15f4:	9f 5f       	subi	r25, 0xFF	; 255
    15f6:	39 96       	adiw	r30, 0x09	; 9
    15f8:	94 31       	cpi	r25, 0x14	; 20
    15fa:	61 f7       	brne	.-40     	; 0x15d4 <_Z10SoftPWMSetahh+0x1a>
    15fc:	17 fd       	sbrc	r17, 7
    15fe:	42 c0       	rjmp	.+132    	; 0x1684 <_Z10SoftPWMSetahh+0xca>
    1600:	8f 3f       	cpi	r24, 0xFF	; 255
    1602:	09 f4       	brne	.+2      	; 0x1606 <_Z10SoftPWMSetahh+0x4c>
    1604:	3f c0       	rjmp	.+126    	; 0x1684 <_Z10SoftPWMSetahh+0xca>
    1606:	99 27       	eor	r25, r25
    1608:	87 fd       	sbrc	r24, 7
    160a:	90 95       	com	r25
    160c:	dc 01       	movw	r26, r24
    160e:	23 e0       	ldi	r18, 0x03	; 3
    1610:	aa 0f       	add	r26, r26
    1612:	bb 1f       	adc	r27, r27
    1614:	2a 95       	dec	r18
    1616:	e1 f7       	brne	.-8      	; 0x1610 <_Z10SoftPWMSetahh+0x56>
    1618:	a8 0f       	add	r26, r24
    161a:	b9 1f       	adc	r27, r25
    161c:	a1 56       	subi	r26, 0x61	; 97
    161e:	bd 4f       	sbci	r27, 0xFD	; 253
    1620:	1c 93       	st	X, r17
    1622:	80 91 9e 02 	lds	r24, 0x029E
    1626:	11 96       	adiw	r26, 0x01	; 1
    1628:	8c 93       	st	X, r24
    162a:	11 97       	sbiw	r26, 0x01	; 1
    162c:	21 2f       	mov	r18, r17
    162e:	33 27       	eor	r19, r19
    1630:	27 fd       	sbrc	r18, 7
    1632:	30 95       	com	r19
    1634:	f9 01       	movw	r30, r18
    1636:	ea 57       	subi	r30, 0x7A	; 122
    1638:	ff 4f       	sbci	r31, 0xFF	; 255
    163a:	e4 91       	lpm	r30, Z+
    163c:	f0 e0       	ldi	r31, 0x00	; 0
    163e:	ee 0f       	add	r30, r30
    1640:	ff 1f       	adc	r31, r31
    1642:	ee 58       	subi	r30, 0x8E	; 142
    1644:	ff 4f       	sbci	r31, 0xFF	; 255
    1646:	45 91       	lpm	r20, Z+
    1648:	54 91       	lpm	r21, Z+
    164a:	12 96       	adiw	r26, 0x02	; 2
    164c:	4c 93       	st	X, r20
    164e:	12 97       	sbiw	r26, 0x02	; 2
    1650:	13 96       	adiw	r26, 0x03	; 3
    1652:	5c 93       	st	X, r21
    1654:	13 97       	sbiw	r26, 0x03	; 3
    1656:	26 56       	subi	r18, 0x66	; 102
    1658:	3f 4f       	sbci	r19, 0xFF	; 255
    165a:	f9 01       	movw	r30, r18
    165c:	24 91       	lpm	r18, Z+
    165e:	14 96       	adiw	r26, 0x04	; 4
    1660:	2c 93       	st	X, r18
    1662:	14 97       	sbiw	r26, 0x04	; 4
    1664:	15 96       	adiw	r26, 0x05	; 5
    1666:	6c 93       	st	X, r22
    1668:	15 97       	sbiw	r26, 0x05	; 5
    166a:	88 23       	and	r24, r24
    166c:	19 f4       	brne	.+6      	; 0x1674 <_Z10SoftPWMSetahh+0xba>
    166e:	81 2f       	mov	r24, r17
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <_Z10SoftPWMSetahh+0xbe>
    1674:	81 2f       	mov	r24, r17
    1676:	61 e0       	ldi	r22, 0x01	; 1
    1678:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
    167c:	81 2f       	mov	r24, r17
    167e:	61 e0       	ldi	r22, 0x01	; 1
    1680:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <pinMode>
    1684:	1f 91       	pop	r17
    1686:	08 95       	ret

00001688 <_Z17SoftPWMSetPercentahh>:
    1688:	e8 2f       	mov	r30, r24
    168a:	8f ef       	ldi	r24, 0xFF	; 255
    168c:	68 9f       	mul	r22, r24
    168e:	b0 01       	movw	r22, r0
    1690:	11 24       	eor	r1, r1
    1692:	cb 01       	movw	r24, r22
    1694:	64 e6       	ldi	r22, 0x64	; 100
    1696:	70 e0       	ldi	r23, 0x00	; 0
    1698:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <__udivmodhi4>
    169c:	8e 2f       	mov	r24, r30
    169e:	0e 94 dd 0a 	call	0x15ba	; 0x15ba <_Z10SoftPWMSetahh>
    16a2:	08 95       	ret

000016a4 <_Z10SoftPWMEnda>:
    16a4:	0f 93       	push	r16
    16a6:	1f 93       	push	r17
    16a8:	cf 93       	push	r28
    16aa:	df 93       	push	r29
    16ac:	18 2f       	mov	r17, r24
    16ae:	cf e9       	ldi	r28, 0x9F	; 159
    16b0:	d2 e0       	ldi	r29, 0x02	; 2
    16b2:	0f ef       	ldi	r16, 0xFF	; 255
    16b4:	88 81       	ld	r24, Y
    16b6:	17 ff       	sbrs	r17, 7
    16b8:	03 c0       	rjmp	.+6      	; 0x16c0 <_Z10SoftPWMEnda+0x1c>
    16ba:	87 ff       	sbrs	r24, 7
    16bc:	03 c0       	rjmp	.+6      	; 0x16c4 <_Z10SoftPWMEnda+0x20>
    16be:	0b c0       	rjmp	.+22     	; 0x16d6 <_Z10SoftPWMEnda+0x32>
    16c0:	81 17       	cp	r24, r17
    16c2:	49 f4       	brne	.+18     	; 0x16d6 <_Z10SoftPWMEnda+0x32>
    16c4:	88 81       	ld	r24, Y
    16c6:	61 e0       	ldi	r22, 0x01	; 1
    16c8:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
    16cc:	88 81       	ld	r24, Y
    16ce:	60 e0       	ldi	r22, 0x00	; 0
    16d0:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <pinMode>
    16d4:	08 83       	st	Y, r16
    16d6:	29 96       	adiw	r28, 0x09	; 9
    16d8:	83 e0       	ldi	r24, 0x03	; 3
    16da:	c3 35       	cpi	r28, 0x53	; 83
    16dc:	d8 07       	cpc	r29, r24
    16de:	51 f7       	brne	.-44     	; 0x16b4 <_Z10SoftPWMEnda+0x10>
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	1f 91       	pop	r17
    16e6:	0f 91       	pop	r16
    16e8:	08 95       	ret

000016ea <_Z18SoftPWMSetFadeTimeajj>:
    16ea:	2f 92       	push	r2
    16ec:	3f 92       	push	r3
    16ee:	4f 92       	push	r4
    16f0:	5f 92       	push	r5
    16f2:	6f 92       	push	r6
    16f4:	7f 92       	push	r7
    16f6:	8f 92       	push	r8
    16f8:	9f 92       	push	r9
    16fa:	af 92       	push	r10
    16fc:	bf 92       	push	r11
    16fe:	cf 92       	push	r12
    1700:	df 92       	push	r13
    1702:	ef 92       	push	r14
    1704:	ff 92       	push	r15
    1706:	1f 93       	push	r17
    1708:	df 93       	push	r29
    170a:	cf 93       	push	r28
    170c:	00 d0       	rcall	.+0      	; 0x170e <_Z18SoftPWMSetFadeTimeajj+0x24>
    170e:	00 d0       	rcall	.+0      	; 0x1710 <_Z18SoftPWMSetFadeTimeajj+0x26>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	18 2f       	mov	r17, r24
    1716:	4b 01       	movw	r8, r22
    1718:	5a 01       	movw	r10, r20
    171a:	2f e9       	ldi	r18, 0x9F	; 159
    171c:	32 e0       	ldi	r19, 0x02	; 2
    171e:	2a 01       	movw	r4, r20
    1720:	66 24       	eor	r6, r6
    1722:	77 24       	eor	r7, r7
    1724:	40 ef       	ldi	r20, 0xF0	; 240
    1726:	c4 2e       	mov	r12, r20
    1728:	4f e0       	ldi	r20, 0x0F	; 15
    172a:	d4 2e       	mov	r13, r20
    172c:	e1 2c       	mov	r14, r1
    172e:	f1 2c       	mov	r15, r1
    1730:	cb 01       	movw	r24, r22
    1732:	a0 e0       	ldi	r26, 0x00	; 0
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	89 83       	std	Y+1, r24	; 0x01
    1738:	9a 83       	std	Y+2, r25	; 0x02
    173a:	ab 83       	std	Y+3, r26	; 0x03
    173c:	bc 83       	std	Y+4, r27	; 0x04
    173e:	19 01       	movw	r2, r18
    1740:	d1 01       	movw	r26, r2
    1742:	8c 91       	ld	r24, X
    1744:	17 ff       	sbrs	r17, 7
    1746:	03 c0       	rjmp	.+6      	; 0x174e <_Z18SoftPWMSetFadeTimeajj+0x64>
    1748:	87 ff       	sbrs	r24, 7
    174a:	03 c0       	rjmp	.+6      	; 0x1752 <_Z18SoftPWMSetFadeTimeajj+0x68>
    174c:	26 c0       	rjmp	.+76     	; 0x179a <_Z18SoftPWMSetFadeTimeajj+0xb0>
    174e:	81 17       	cp	r24, r17
    1750:	21 f5       	brne	.+72     	; 0x179a <_Z18SoftPWMSetFadeTimeajj+0xb0>
    1752:	81 14       	cp	r8, r1
    1754:	91 04       	cpc	r9, r1
    1756:	51 f0       	breq	.+20     	; 0x176c <_Z18SoftPWMSetFadeTimeajj+0x82>
    1758:	c7 01       	movw	r24, r14
    175a:	b6 01       	movw	r22, r12
    175c:	29 81       	ldd	r18, Y+1	; 0x01
    175e:	3a 81       	ldd	r19, Y+2	; 0x02
    1760:	4b 81       	ldd	r20, Y+3	; 0x03
    1762:	5c 81       	ldd	r21, Y+4	; 0x04
    1764:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__udivmodsi4>
    1768:	c9 01       	movw	r24, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <_Z18SoftPWMSetFadeTimeajj+0x86>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	f1 01       	movw	r30, r2
    1772:	87 83       	std	Z+7, r24	; 0x07
    1774:	a1 14       	cp	r10, r1
    1776:	b1 04       	cpc	r11, r1
    1778:	41 f0       	breq	.+16     	; 0x178a <_Z18SoftPWMSetFadeTimeajj+0xa0>
    177a:	c7 01       	movw	r24, r14
    177c:	b6 01       	movw	r22, r12
    177e:	a3 01       	movw	r20, r6
    1780:	92 01       	movw	r18, r4
    1782:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__udivmodsi4>
    1786:	c9 01       	movw	r24, r18
    1788:	02 c0       	rjmp	.+4      	; 0x178e <_Z18SoftPWMSetFadeTimeajj+0xa4>
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	d1 01       	movw	r26, r2
    1790:	18 96       	adiw	r26, 0x08	; 8
    1792:	8c 93       	st	X, r24
    1794:	18 97       	sbiw	r26, 0x08	; 8
    1796:	17 ff       	sbrs	r17, 7
    1798:	09 c0       	rjmp	.+18     	; 0x17ac <_Z18SoftPWMSetFadeTimeajj+0xc2>
    179a:	e9 e0       	ldi	r30, 0x09	; 9
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	2e 0e       	add	r2, r30
    17a0:	3f 1e       	adc	r3, r31
    17a2:	f3 e5       	ldi	r31, 0x53	; 83
    17a4:	2f 16       	cp	r2, r31
    17a6:	f3 e0       	ldi	r31, 0x03	; 3
    17a8:	3f 06       	cpc	r3, r31
    17aa:	51 f6       	brne	.-108    	; 0x1740 <_Z18SoftPWMSetFadeTimeajj+0x56>
    17ac:	0f 90       	pop	r0
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	cf 91       	pop	r28
    17b6:	df 91       	pop	r29
    17b8:	1f 91       	pop	r17
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	df 90       	pop	r13
    17c0:	cf 90       	pop	r12
    17c2:	bf 90       	pop	r11
    17c4:	af 90       	pop	r10
    17c6:	9f 90       	pop	r9
    17c8:	8f 90       	pop	r8
    17ca:	7f 90       	pop	r7
    17cc:	6f 90       	pop	r6
    17ce:	5f 90       	pop	r5
    17d0:	4f 90       	pop	r4
    17d2:	3f 90       	pop	r3
    17d4:	2f 90       	pop	r2
    17d6:	08 95       	ret

000017d8 <_ZN12StepperMotorC1Ehhh>:
    17d8:	ef 92       	push	r14
    17da:	0f 93       	push	r16
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	ec 01       	movw	r28, r24
    17e2:	04 e0       	ldi	r16, 0x04	; 4
    17e4:	35 e0       	ldi	r19, 0x05	; 5
    17e6:	e3 2e       	mov	r14, r19
    17e8:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN12AccelStepperC1Ehhhhh>
    17ec:	8a e4       	ldi	r24, 0x4A	; 74
    17ee:	91 e0       	ldi	r25, 0x01	; 1
    17f0:	99 83       	std	Y+1, r25	; 0x01
    17f2:	88 83       	st	Y, r24
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	0f 91       	pop	r16
    17fa:	ef 90       	pop	r14
    17fc:	08 95       	ret

000017fe <_ZN12StepperMotor12advanceFrameEi>:
    17fe:	ef 92       	push	r14
    1800:	ff 92       	push	r15
    1802:	0f 93       	push	r16
    1804:	1f 93       	push	r17
    1806:	cf 93       	push	r28
    1808:	df 93       	push	r29
    180a:	7c 01       	movw	r14, r24
    180c:	eb 01       	movw	r28, r22
    180e:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN12AccelStepper15currentPositionEv>
    1812:	ab 01       	movw	r20, r22
    1814:	bc 01       	movw	r22, r24
    1816:	8e 01       	movw	r16, r28
    1818:	22 27       	eor	r18, r18
    181a:	17 fd       	sbrc	r17, 7
    181c:	20 95       	com	r18
    181e:	32 2f       	mov	r19, r18
    1820:	40 0f       	add	r20, r16
    1822:	51 1f       	adc	r21, r17
    1824:	62 1f       	adc	r22, r18
    1826:	73 1f       	adc	r23, r19
    1828:	c7 01       	movw	r24, r14
    182a:	0e 94 91 03 	call	0x722	; 0x722 <_ZN12AccelStepper6moveToEl>
    182e:	df 91       	pop	r29
    1830:	cf 91       	pop	r28
    1832:	1f 91       	pop	r17
    1834:	0f 91       	pop	r16
    1836:	ff 90       	pop	r15
    1838:	ef 90       	pop	r14
    183a:	08 95       	ret

0000183c <_ZN12StepperMotor12reverseFrameEi>:
    183c:	cf 93       	push	r28
    183e:	df 93       	push	r29
    1840:	ec 01       	movw	r28, r24
    1842:	88 27       	eor	r24, r24
    1844:	77 fd       	sbrc	r23, 7
    1846:	80 95       	com	r24
    1848:	98 2f       	mov	r25, r24
    184a:	0e 94 01 12 	call	0x2402	; 0x2402 <__floatsisf>
    184e:	ab 01       	movw	r20, r22
    1850:	bc 01       	movw	r22, r24
    1852:	ce 01       	movw	r24, r28
    1854:	0e 94 18 03 	call	0x630	; 0x630 <_ZN12AccelStepper8setSpeedEf>
    1858:	df 91       	pop	r29
    185a:	cf 91       	pop	r28
    185c:	08 95       	ret

0000185e <setup>:
    185e:	8f 92       	push	r8
    1860:	af 92       	push	r10
    1862:	cf 92       	push	r12
    1864:	ef 92       	push	r14
    1866:	ff 92       	push	r15
    1868:	0f 93       	push	r16
    186a:	1f 93       	push	r17
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	81 ef       	ldi	r24, 0xF1	; 241
    1872:	93 e0       	ldi	r25, 0x03	; 3
    1874:	40 e8       	ldi	r20, 0x80	; 128
    1876:	55 e2       	ldi	r21, 0x25	; 37
    1878:	60 e0       	ldi	r22, 0x00	; 0
    187a:	70 e0       	ldi	r23, 0x00	; 0
    187c:	0e 94 e0 23 	call	0x47c0	; 0x47c0 <_ZN14HardwareSerial5beginEm>
    1880:	82 e0       	ldi	r24, 0x02	; 2
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <_Znwj>
    1888:	18 2f       	mov	r17, r24
    188a:	f9 2e       	mov	r15, r25
    188c:	6c e0       	ldi	r22, 0x0C	; 12
    188e:	4b e0       	ldi	r20, 0x0B	; 11
    1890:	25 e0       	ldi	r18, 0x05	; 5
    1892:	04 e0       	ldi	r16, 0x04	; 4
    1894:	e3 e0       	ldi	r30, 0x03	; 3
    1896:	ee 2e       	mov	r14, r30
    1898:	72 e0       	ldi	r23, 0x02	; 2
    189a:	c7 2e       	mov	r12, r23
    189c:	50 e1       	ldi	r21, 0x10	; 16
    189e:	a5 2e       	mov	r10, r21
    18a0:	32 e0       	ldi	r19, 0x02	; 2
    18a2:	83 2e       	mov	r8, r19
    18a4:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN3LCDC1Ehhhhhhhh>
    18a8:	10 93 55 03 	sts	0x0355, r17
    18ac:	f0 92 56 03 	sts	0x0356, r15
    18b0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_Z12DCMotor_intiv>
    18b4:	82 e0       	ldi	r24, 0x02	; 2
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <_Znwj>
    18bc:	f8 2e       	mov	r15, r24
    18be:	19 2f       	mov	r17, r25
    18c0:	61 e1       	ldi	r22, 0x11	; 17
    18c2:	70 e0       	ldi	r23, 0x00	; 0
    18c4:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN7DCMotorC1Ei>
    18c8:	f0 92 57 03 	sts	0x0357, r15
    18cc:	10 93 58 03 	sts	0x0358, r17
    18d0:	82 e0       	ldi	r24, 0x02	; 2
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <_Znwj>
    18d8:	f8 2e       	mov	r15, r24
    18da:	19 2f       	mov	r17, r25
    18dc:	62 e1       	ldi	r22, 0x12	; 18
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN7DCMotorC1Ei>
    18e4:	f0 92 59 03 	sts	0x0359, r15
    18e8:	10 93 5a 03 	sts	0x035A, r17
    18ec:	8a ef       	ldi	r24, 0xFA	; 250
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 ff 09 	call	0x13fe	; 0x13fe <_Z17PDController_initj>
    18f4:	82 e2       	ldi	r24, 0x22	; 34
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <_Znwj>
    18fc:	e8 2e       	mov	r14, r24
    18fe:	e7 01       	movw	r28, r14
    1900:	7e 01       	movw	r14, r28
    1902:	f9 2e       	mov	r15, r25
    1904:	e7 01       	movw	r28, r14
    1906:	c7 01       	movw	r24, r14
    1908:	40 e0       	ldi	r20, 0x00	; 0
    190a:	50 e0       	ldi	r21, 0x00	; 0
    190c:	6a e7       	ldi	r22, 0x7A	; 122
    190e:	73 e4       	ldi	r23, 0x43	; 67
    1910:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN12PDControllerC1Ed>
    1914:	f0 92 54 03 	sts	0x0354, r15
    1918:	e0 92 53 03 	sts	0x0353, r14
    191c:	80 e0       	ldi	r24, 0x00	; 0
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	a8 e4       	ldi	r26, 0x48	; 72
    1922:	b3 e4       	ldi	r27, 0x43	; 67
    1924:	88 87       	std	Y+8, r24	; 0x08
    1926:	99 87       	std	Y+9, r25	; 0x09
    1928:	aa 87       	std	Y+10, r26	; 0x0a
    192a:	bb 87       	std	Y+11, r27	; 0x0b
    192c:	c7 01       	movw	r24, r14
    192e:	40 e0       	ldi	r20, 0x00	; 0
    1930:	50 e0       	ldi	r21, 0x00	; 0
    1932:	60 e8       	ldi	r22, 0x80	; 128
    1934:	7e e3       	ldi	r23, 0x3E	; 62
    1936:	0a e0       	ldi	r16, 0x0A	; 10
    1938:	17 ed       	ldi	r17, 0xD7	; 215
    193a:	23 ea       	ldi	r18, 0xA3	; 163
    193c:	3b e3       	ldi	r19, 0x3B	; 59
    193e:	0e 94 e9 08 	call	0x11d2	; 0x11d2 <_ZN12PDController10setTuningsEdd>
    1942:	80 91 53 03 	lds	r24, 0x0353
    1946:	90 91 54 03 	lds	r25, 0x0354
    194a:	40 e0       	ldi	r20, 0x00	; 0
    194c:	50 e0       	ldi	r21, 0x00	; 0
    194e:	6f e7       	ldi	r22, 0x7F	; 127
    1950:	73 ec       	ldi	r23, 0xC3	; 195
    1952:	00 e0       	ldi	r16, 0x00	; 0
    1954:	10 e0       	ldi	r17, 0x00	; 0
    1956:	98 01       	movw	r18, r16
    1958:	0e 94 62 09 	call	0x12c4	; 0x12c4 <_ZN12PDController15setOutputLimitsEdd>
    195c:	87 e2       	ldi	r24, 0x27	; 39
    195e:	90 e0       	ldi	r25, 0x00	; 0
    1960:	0e 94 46 1f 	call	0x3e8c	; 0x3e8c <_Znwj>
    1964:	f8 2e       	mov	r15, r24
    1966:	19 2f       	mov	r17, r25
    1968:	62 e0       	ldi	r22, 0x02	; 2
    196a:	48 e0       	ldi	r20, 0x08	; 8
    196c:	29 e0       	ldi	r18, 0x09	; 9
    196e:	0e 94 ec 0b 	call	0x17d8	; 0x17d8 <_ZN12StepperMotorC1Ehhh>
    1972:	f0 92 5b 03 	sts	0x035B, r15
    1976:	10 93 5c 03 	sts	0x035C, r17
    197a:	8f 2d       	mov	r24, r15
    197c:	91 2f       	mov	r25, r17
    197e:	40 e0       	ldi	r20, 0x00	; 0
    1980:	50 e0       	ldi	r21, 0x00	; 0
    1982:	6a ef       	ldi	r22, 0xFA	; 250
    1984:	73 e4       	ldi	r23, 0x43	; 67
    1986:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN12AccelStepper11setMaxSpeedEf>
    198a:	80 91 5b 03 	lds	r24, 0x035B
    198e:	90 91 5c 03 	lds	r25, 0x035C
    1992:	40 e0       	ldi	r20, 0x00	; 0
    1994:	50 e0       	ldi	r21, 0x00	; 0
    1996:	68 e4       	ldi	r22, 0x48	; 72
    1998:	73 e4       	ldi	r23, 0x43	; 67
    199a:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN12AccelStepper15setAccelerationEf>
    199e:	df 91       	pop	r29
    19a0:	cf 91       	pop	r28
    19a2:	1f 91       	pop	r17
    19a4:	0f 91       	pop	r16
    19a6:	ff 90       	pop	r15
    19a8:	ef 90       	pop	r14
    19aa:	cf 90       	pop	r12
    19ac:	af 90       	pop	r10
    19ae:	8f 90       	pop	r8
    19b0:	08 95       	ret

000019b2 <__vector_11>:
    19b2:	1f 92       	push	r1
    19b4:	0f 92       	push	r0
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	0f 92       	push	r0
    19ba:	11 24       	eor	r1, r1
    19bc:	ef 92       	push	r14
    19be:	ff 92       	push	r15
    19c0:	0f 93       	push	r16
    19c2:	1f 93       	push	r17
    19c4:	2f 93       	push	r18
    19c6:	3f 93       	push	r19
    19c8:	4f 93       	push	r20
    19ca:	5f 93       	push	r21
    19cc:	6f 93       	push	r22
    19ce:	7f 93       	push	r23
    19d0:	8f 93       	push	r24
    19d2:	9f 93       	push	r25
    19d4:	af 93       	push	r26
    19d6:	bf 93       	push	r27
    19d8:	ef 93       	push	r30
    19da:	ff 93       	push	r31
    19dc:	e0 90 53 03 	lds	r14, 0x0353
    19e0:	f0 90 54 03 	lds	r15, 0x0354
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	0e 94 18 15 	call	0x2a30	; 0x2a30 <analogRead>
    19ea:	9c 01       	movw	r18, r24
    19ec:	b9 01       	movw	r22, r18
    19ee:	88 27       	eor	r24, r24
    19f0:	77 fd       	sbrc	r23, 7
    19f2:	80 95       	com	r24
    19f4:	98 2f       	mov	r25, r24
    19f6:	0e 94 01 12 	call	0x2402	; 0x2402 <__floatsisf>
    19fa:	ab 01       	movw	r20, r22
    19fc:	bc 01       	movw	r22, r24
    19fe:	c7 01       	movw	r24, r14
    1a00:	0e 94 6d 08 	call	0x10da	; 0x10da <_ZN12PDController7computeEd>
    1a04:	80 91 53 03 	lds	r24, 0x0353
    1a08:	90 91 54 03 	lds	r25, 0x0354
    1a0c:	fc 01       	movw	r30, r24
    1a0e:	20 81       	ld	r18, Z
    1a10:	31 81       	ldd	r19, Z+1	; 0x01
    1a12:	42 81       	ldd	r20, Z+2	; 0x02
    1a14:	53 81       	ldd	r21, Z+3	; 0x03
    1a16:	e4 80       	ldd	r14, Z+4	; 0x04
    1a18:	f5 80       	ldd	r15, Z+5	; 0x05
    1a1a:	06 81       	ldd	r16, Z+6	; 0x06
    1a1c:	17 81       	ldd	r17, Z+7	; 0x07
    1a1e:	61 e0       	ldi	r22, 0x01	; 1
    1a20:	70 e0       	ldi	r23, 0x00	; 0
    1a22:	0e 94 b1 09 	call	0x1362	; 0x1362 <_ZN12PDController12outputSerialEidd>
    1a26:	e0 90 57 03 	lds	r14, 0x0357
    1a2a:	f0 90 58 03 	lds	r15, 0x0358
    1a2e:	e0 91 53 03 	lds	r30, 0x0353
    1a32:	f0 91 54 03 	lds	r31, 0x0354
    1a36:	64 81       	ldd	r22, Z+4	; 0x04
    1a38:	75 81       	ldd	r23, Z+5	; 0x05
    1a3a:	86 81       	ldd	r24, Z+6	; 0x06
    1a3c:	97 81       	ldd	r25, Z+7	; 0x07
    1a3e:	9f 77       	andi	r25, 0x7F	; 127
    1a40:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixsfsi>
    1a44:	9b 01       	movw	r18, r22
    1a46:	ac 01       	movw	r20, r24
    1a48:	c7 01       	movw	r24, r14
    1a4a:	b9 01       	movw	r22, r18
    1a4c:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN7DCMotor13setMotorspeedEi>
    1a50:	e0 90 59 03 	lds	r14, 0x0359
    1a54:	f0 90 5a 03 	lds	r15, 0x035A
    1a58:	e0 91 53 03 	lds	r30, 0x0353
    1a5c:	f0 91 54 03 	lds	r31, 0x0354
    1a60:	64 81       	ldd	r22, Z+4	; 0x04
    1a62:	75 81       	ldd	r23, Z+5	; 0x05
    1a64:	86 81       	ldd	r24, Z+6	; 0x06
    1a66:	97 81       	ldd	r25, Z+7	; 0x07
    1a68:	9f 77       	andi	r25, 0x7F	; 127
    1a6a:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixsfsi>
    1a6e:	9b 01       	movw	r18, r22
    1a70:	ac 01       	movw	r20, r24
    1a72:	c7 01       	movw	r24, r14
    1a74:	b9 01       	movw	r22, r18
    1a76:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN7DCMotor13setMotorspeedEi>
    1a7a:	ff 91       	pop	r31
    1a7c:	ef 91       	pop	r30
    1a7e:	bf 91       	pop	r27
    1a80:	af 91       	pop	r26
    1a82:	9f 91       	pop	r25
    1a84:	8f 91       	pop	r24
    1a86:	7f 91       	pop	r23
    1a88:	6f 91       	pop	r22
    1a8a:	5f 91       	pop	r21
    1a8c:	4f 91       	pop	r20
    1a8e:	3f 91       	pop	r19
    1a90:	2f 91       	pop	r18
    1a92:	1f 91       	pop	r17
    1a94:	0f 91       	pop	r16
    1a96:	ff 90       	pop	r15
    1a98:	ef 90       	pop	r14
    1a9a:	0f 90       	pop	r0
    1a9c:	0f be       	out	0x3f, r0	; 63
    1a9e:	0f 90       	pop	r0
    1aa0:	1f 90       	pop	r1
    1aa2:	18 95       	reti

00001aa4 <_Z10setFilmPosv>:
    1aa4:	ef 92       	push	r14
    1aa6:	ff 92       	push	r15
    1aa8:	0f 93       	push	r16
    1aaa:	1f 93       	push	r17
    1aac:	df 93       	push	r29
    1aae:	cf 93       	push	r28
    1ab0:	cd b7       	in	r28, 0x3d	; 61
    1ab2:	de b7       	in	r29, 0x3e	; 62
    1ab4:	27 97       	sbiw	r28, 0x07	; 7
    1ab6:	0f b6       	in	r0, 0x3f	; 63
    1ab8:	f8 94       	cli
    1aba:	de bf       	out	0x3e, r29	; 62
    1abc:	0f be       	out	0x3f, r0	; 63
    1abe:	cd bf       	out	0x3d, r28	; 61
    1ac0:	e0 90 55 03 	lds	r14, 0x0355
    1ac4:	f0 90 56 03 	lds	r15, 0x0356
    1ac8:	8e 01       	movw	r16, r28
    1aca:	0f 5f       	subi	r16, 0xFF	; 255
    1acc:	1f 4f       	sbci	r17, 0xFF	; 255
    1ace:	c8 01       	movw	r24, r16
    1ad0:	66 e5       	ldi	r22, 0x56	; 86
    1ad2:	71 e0       	ldi	r23, 0x01	; 1
    1ad4:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <_ZN6StringC1EPKc>
    1ad8:	c7 01       	movw	r24, r14
    1ada:	b8 01       	movw	r22, r16
    1adc:	0e 94 a0 04 	call	0x940	; 0x940 <_ZN3LCD5traceE6String>
    1ae0:	c8 01       	movw	r24, r16
    1ae2:	0e 94 34 17 	call	0x2e68	; 0x2e68 <_ZN6StringD1Ev>
    1ae6:	68 eb       	ldi	r22, 0xB8	; 184
    1ae8:	7b e0       	ldi	r23, 0x0B	; 11
    1aea:	80 e0       	ldi	r24, 0x00	; 0
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <delay>
    1af2:	27 96       	adiw	r28, 0x07	; 7
    1af4:	0f b6       	in	r0, 0x3f	; 63
    1af6:	f8 94       	cli
    1af8:	de bf       	out	0x3e, r29	; 62
    1afa:	0f be       	out	0x3f, r0	; 63
    1afc:	cd bf       	out	0x3d, r28	; 61
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	1f 91       	pop	r17
    1b04:	0f 91       	pop	r16
    1b06:	ff 90       	pop	r15
    1b08:	ef 90       	pop	r14
    1b0a:	08 95       	ret

00001b0c <_Z13emergencyStopv>:
    1b0c:	08 95       	ret

00001b0e <main>:
    1b0e:	0f 93       	push	r16
    1b10:	1f 93       	push	r17
    1b12:	0e 94 46 16 	call	0x2c8c	; 0x2c8c <init>
    1b16:	0e 94 2f 0c 	call	0x185e	; 0x185e <setup>
    1b1a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <_Z10setFilmPosv>
    1b1e:	80 91 55 03 	lds	r24, 0x0355
    1b22:	90 91 56 03 	lds	r25, 0x0356
    1b26:	60 e0       	ldi	r22, 0x00	; 0
    1b28:	70 e0       	ldi	r23, 0x00	; 0
    1b2a:	40 e0       	ldi	r20, 0x00	; 0
    1b2c:	50 e0       	ldi	r21, 0x00	; 0
    1b2e:	20 e0       	ldi	r18, 0x00	; 0
    1b30:	30 e0       	ldi	r19, 0x00	; 0
    1b32:	00 e0       	ldi	r16, 0x00	; 0
    1b34:	10 e0       	ldi	r17, 0x00	; 0
    1b36:	0e 94 ba 04 	call	0x974	; 0x974 <_ZN3LCD9updateLCDEiiii>
    1b3a:	80 91 5b 03 	lds	r24, 0x035B
    1b3e:	90 91 5c 03 	lds	r25, 0x035C
    1b42:	60 e9       	ldi	r22, 0x90	; 144
    1b44:	71 e0       	ldi	r23, 0x01	; 1
    1b46:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <_ZN12StepperMotor12advanceFrameEi>
    1b4a:	80 91 5b 03 	lds	r24, 0x035B
    1b4e:	90 91 5c 03 	lds	r25, 0x035C
    1b52:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN12AccelStepper3runEv>
    1b56:	88 23       	and	r24, r24
    1b58:	c1 f7       	brne	.-16     	; 0x1b4a <main+0x3c>
    1b5a:	80 91 5d 03 	lds	r24, 0x035D
    1b5e:	90 91 5e 03 	lds	r25, 0x035E
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	90 93 5e 03 	sts	0x035E, r25
    1b68:	80 93 5d 03 	sts	0x035D, r24
    1b6c:	68 ee       	ldi	r22, 0xE8	; 232
    1b6e:	73 e0       	ldi	r23, 0x03	; 3
    1b70:	80 e0       	ldi	r24, 0x00	; 0
    1b72:	90 e0       	ldi	r25, 0x00	; 0
    1b74:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <delay>
    1b78:	60 91 5d 03 	lds	r22, 0x035D
    1b7c:	70 91 5e 03 	lds	r23, 0x035E
    1b80:	80 91 55 03 	lds	r24, 0x0355
    1b84:	90 91 56 03 	lds	r25, 0x0356
    1b88:	d0 cf       	rjmp	.-96     	; 0x1b2a <main+0x1c>

00001b8a <__fixunssfsi>:
    1b8a:	ef 92       	push	r14
    1b8c:	ff 92       	push	r15
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	7b 01       	movw	r14, r22
    1b94:	8c 01       	movw	r16, r24
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	40 e0       	ldi	r20, 0x00	; 0
    1b9c:	5f e4       	ldi	r21, 0x4F	; 79
    1b9e:	0e 94 a1 11 	call	0x2342	; 0x2342 <__gesf2>
    1ba2:	87 fd       	sbrc	r24, 7
    1ba4:	11 c0       	rjmp	.+34     	; 0x1bc8 <__fixunssfsi+0x3e>
    1ba6:	c8 01       	movw	r24, r16
    1ba8:	b7 01       	movw	r22, r14
    1baa:	20 e0       	ldi	r18, 0x00	; 0
    1bac:	30 e0       	ldi	r19, 0x00	; 0
    1bae:	40 e0       	ldi	r20, 0x00	; 0
    1bb0:	5f e4       	ldi	r21, 0x4F	; 79
    1bb2:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__subsf3>
    1bb6:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixsfsi>
    1bba:	9b 01       	movw	r18, r22
    1bbc:	ac 01       	movw	r20, r24
    1bbe:	20 50       	subi	r18, 0x00	; 0
    1bc0:	30 40       	sbci	r19, 0x00	; 0
    1bc2:	40 40       	sbci	r20, 0x00	; 0
    1bc4:	50 48       	sbci	r21, 0x80	; 128
    1bc6:	06 c0       	rjmp	.+12     	; 0x1bd4 <__fixunssfsi+0x4a>
    1bc8:	c8 01       	movw	r24, r16
    1bca:	b7 01       	movw	r22, r14
    1bcc:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixsfsi>
    1bd0:	9b 01       	movw	r18, r22
    1bd2:	ac 01       	movw	r20, r24
    1bd4:	b9 01       	movw	r22, r18
    1bd6:	ca 01       	movw	r24, r20
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	ff 90       	pop	r15
    1bde:	ef 90       	pop	r14
    1be0:	08 95       	ret

00001be2 <_fpadd_parts>:
    1be2:	a0 e0       	ldi	r26, 0x00	; 0
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e7 ef       	ldi	r30, 0xF7	; 247
    1be8:	fd e0       	ldi	r31, 0x0D	; 13
    1bea:	0c 94 3f 25 	jmp	0x4a7e	; 0x4a7e <__prologue_saves__+0x8>
    1bee:	fc 01       	movw	r30, r24
    1bf0:	ea 01       	movw	r28, r20
    1bf2:	80 81       	ld	r24, Z
    1bf4:	82 30       	cpi	r24, 0x02	; 2
    1bf6:	08 f4       	brcc	.+2      	; 0x1bfa <_fpadd_parts+0x18>
    1bf8:	38 c1       	rjmp	.+624    	; 0x1e6a <_fpadd_parts+0x288>
    1bfa:	db 01       	movw	r26, r22
    1bfc:	9c 91       	ld	r25, X
    1bfe:	92 30       	cpi	r25, 0x02	; 2
    1c00:	08 f4       	brcc	.+2      	; 0x1c04 <_fpadd_parts+0x22>
    1c02:	30 c1       	rjmp	.+608    	; 0x1e64 <_fpadd_parts+0x282>
    1c04:	84 30       	cpi	r24, 0x04	; 4
    1c06:	59 f4       	brne	.+22     	; 0x1c1e <_fpadd_parts+0x3c>
    1c08:	94 30       	cpi	r25, 0x04	; 4
    1c0a:	09 f0       	breq	.+2      	; 0x1c0e <_fpadd_parts+0x2c>
    1c0c:	2e c1       	rjmp	.+604    	; 0x1e6a <_fpadd_parts+0x288>
    1c0e:	91 81       	ldd	r25, Z+1	; 0x01
    1c10:	11 96       	adiw	r26, 0x01	; 1
    1c12:	8c 91       	ld	r24, X
    1c14:	11 97       	sbiw	r26, 0x01	; 1
    1c16:	98 17       	cp	r25, r24
    1c18:	09 f0       	breq	.+2      	; 0x1c1c <_fpadd_parts+0x3a>
    1c1a:	21 c1       	rjmp	.+578    	; 0x1e5e <_fpadd_parts+0x27c>
    1c1c:	26 c1       	rjmp	.+588    	; 0x1e6a <_fpadd_parts+0x288>
    1c1e:	94 30       	cpi	r25, 0x04	; 4
    1c20:	09 f4       	brne	.+2      	; 0x1c24 <_fpadd_parts+0x42>
    1c22:	20 c1       	rjmp	.+576    	; 0x1e64 <_fpadd_parts+0x282>
    1c24:	92 30       	cpi	r25, 0x02	; 2
    1c26:	b1 f4       	brne	.+44     	; 0x1c54 <_fpadd_parts+0x72>
    1c28:	82 30       	cpi	r24, 0x02	; 2
    1c2a:	09 f0       	breq	.+2      	; 0x1c2e <_fpadd_parts+0x4c>
    1c2c:	1e c1       	rjmp	.+572    	; 0x1e6a <_fpadd_parts+0x288>
    1c2e:	ca 01       	movw	r24, r20
    1c30:	af 01       	movw	r20, r30
    1c32:	28 e0       	ldi	r18, 0x08	; 8
    1c34:	da 01       	movw	r26, r20
    1c36:	0d 90       	ld	r0, X+
    1c38:	ad 01       	movw	r20, r26
    1c3a:	dc 01       	movw	r26, r24
    1c3c:	0d 92       	st	X+, r0
    1c3e:	cd 01       	movw	r24, r26
    1c40:	21 50       	subi	r18, 0x01	; 1
    1c42:	c1 f7       	brne	.-16     	; 0x1c34 <_fpadd_parts+0x52>
    1c44:	db 01       	movw	r26, r22
    1c46:	11 96       	adiw	r26, 0x01	; 1
    1c48:	8c 91       	ld	r24, X
    1c4a:	11 97       	sbiw	r26, 0x01	; 1
    1c4c:	91 81       	ldd	r25, Z+1	; 0x01
    1c4e:	89 23       	and	r24, r25
    1c50:	89 83       	std	Y+1, r24	; 0x01
    1c52:	0a c1       	rjmp	.+532    	; 0x1e68 <_fpadd_parts+0x286>
    1c54:	82 30       	cpi	r24, 0x02	; 2
    1c56:	09 f4       	brne	.+2      	; 0x1c5a <_fpadd_parts+0x78>
    1c58:	05 c1       	rjmp	.+522    	; 0x1e64 <_fpadd_parts+0x282>
    1c5a:	c2 80       	ldd	r12, Z+2	; 0x02
    1c5c:	d3 80       	ldd	r13, Z+3	; 0x03
    1c5e:	db 01       	movw	r26, r22
    1c60:	12 96       	adiw	r26, 0x02	; 2
    1c62:	6d 90       	ld	r6, X+
    1c64:	7c 90       	ld	r7, X
    1c66:	13 97       	sbiw	r26, 0x03	; 3
    1c68:	24 81       	ldd	r18, Z+4	; 0x04
    1c6a:	35 81       	ldd	r19, Z+5	; 0x05
    1c6c:	46 81       	ldd	r20, Z+6	; 0x06
    1c6e:	57 81       	ldd	r21, Z+7	; 0x07
    1c70:	14 96       	adiw	r26, 0x04	; 4
    1c72:	ed 90       	ld	r14, X+
    1c74:	fd 90       	ld	r15, X+
    1c76:	0d 91       	ld	r16, X+
    1c78:	1c 91       	ld	r17, X
    1c7a:	17 97       	sbiw	r26, 0x07	; 7
    1c7c:	c6 01       	movw	r24, r12
    1c7e:	86 19       	sub	r24, r6
    1c80:	97 09       	sbc	r25, r7
    1c82:	5c 01       	movw	r10, r24
    1c84:	97 ff       	sbrs	r25, 7
    1c86:	04 c0       	rjmp	.+8      	; 0x1c90 <_fpadd_parts+0xae>
    1c88:	aa 24       	eor	r10, r10
    1c8a:	bb 24       	eor	r11, r11
    1c8c:	a8 1a       	sub	r10, r24
    1c8e:	b9 0a       	sbc	r11, r25
    1c90:	b0 e2       	ldi	r27, 0x20	; 32
    1c92:	ab 16       	cp	r10, r27
    1c94:	b1 04       	cpc	r11, r1
    1c96:	0c f0       	brlt	.+2      	; 0x1c9a <_fpadd_parts+0xb8>
    1c98:	61 c0       	rjmp	.+194    	; 0x1d5c <_fpadd_parts+0x17a>
    1c9a:	18 16       	cp	r1, r24
    1c9c:	19 06       	cpc	r1, r25
    1c9e:	6c f5       	brge	.+90     	; 0x1cfa <_fpadd_parts+0x118>
    1ca0:	37 01       	movw	r6, r14
    1ca2:	48 01       	movw	r8, r16
    1ca4:	0a 2c       	mov	r0, r10
    1ca6:	04 c0       	rjmp	.+8      	; 0x1cb0 <_fpadd_parts+0xce>
    1ca8:	96 94       	lsr	r9
    1caa:	87 94       	ror	r8
    1cac:	77 94       	ror	r7
    1cae:	67 94       	ror	r6
    1cb0:	0a 94       	dec	r0
    1cb2:	d2 f7       	brpl	.-12     	; 0x1ca8 <_fpadd_parts+0xc6>
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	a0 e0       	ldi	r26, 0x00	; 0
    1cba:	b0 e0       	ldi	r27, 0x00	; 0
    1cbc:	0a 2c       	mov	r0, r10
    1cbe:	04 c0       	rjmp	.+8      	; 0x1cc8 <_fpadd_parts+0xe6>
    1cc0:	88 0f       	add	r24, r24
    1cc2:	99 1f       	adc	r25, r25
    1cc4:	aa 1f       	adc	r26, r26
    1cc6:	bb 1f       	adc	r27, r27
    1cc8:	0a 94       	dec	r0
    1cca:	d2 f7       	brpl	.-12     	; 0x1cc0 <_fpadd_parts+0xde>
    1ccc:	01 97       	sbiw	r24, 0x01	; 1
    1cce:	a1 09       	sbc	r26, r1
    1cd0:	b1 09       	sbc	r27, r1
    1cd2:	8e 21       	and	r24, r14
    1cd4:	9f 21       	and	r25, r15
    1cd6:	a0 23       	and	r26, r16
    1cd8:	b1 23       	and	r27, r17
    1cda:	ee 24       	eor	r14, r14
    1cdc:	ff 24       	eor	r15, r15
    1cde:	87 01       	movw	r16, r14
    1ce0:	e3 94       	inc	r14
    1ce2:	00 97       	sbiw	r24, 0x00	; 0
    1ce4:	a1 05       	cpc	r26, r1
    1ce6:	b1 05       	cpc	r27, r1
    1ce8:	19 f4       	brne	.+6      	; 0x1cf0 <_fpadd_parts+0x10e>
    1cea:	ee 24       	eor	r14, r14
    1cec:	ff 24       	eor	r15, r15
    1cee:	87 01       	movw	r16, r14
    1cf0:	e6 28       	or	r14, r6
    1cf2:	f7 28       	or	r15, r7
    1cf4:	08 29       	or	r16, r8
    1cf6:	19 29       	or	r17, r9
    1cf8:	3c c0       	rjmp	.+120    	; 0x1d72 <_fpadd_parts+0x190>
    1cfa:	00 97       	sbiw	r24, 0x00	; 0
    1cfc:	d1 f1       	breq	.+116    	; 0x1d72 <_fpadd_parts+0x190>
    1cfe:	ca 0c       	add	r12, r10
    1d00:	db 1c       	adc	r13, r11
    1d02:	39 01       	movw	r6, r18
    1d04:	4a 01       	movw	r8, r20
    1d06:	0a 2c       	mov	r0, r10
    1d08:	04 c0       	rjmp	.+8      	; 0x1d12 <_fpadd_parts+0x130>
    1d0a:	96 94       	lsr	r9
    1d0c:	87 94       	ror	r8
    1d0e:	77 94       	ror	r7
    1d10:	67 94       	ror	r6
    1d12:	0a 94       	dec	r0
    1d14:	d2 f7       	brpl	.-12     	; 0x1d0a <_fpadd_parts+0x128>
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	a0 e0       	ldi	r26, 0x00	; 0
    1d1c:	b0 e0       	ldi	r27, 0x00	; 0
    1d1e:	0a 2c       	mov	r0, r10
    1d20:	04 c0       	rjmp	.+8      	; 0x1d2a <_fpadd_parts+0x148>
    1d22:	88 0f       	add	r24, r24
    1d24:	99 1f       	adc	r25, r25
    1d26:	aa 1f       	adc	r26, r26
    1d28:	bb 1f       	adc	r27, r27
    1d2a:	0a 94       	dec	r0
    1d2c:	d2 f7       	brpl	.-12     	; 0x1d22 <_fpadd_parts+0x140>
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	a1 09       	sbc	r26, r1
    1d32:	b1 09       	sbc	r27, r1
    1d34:	82 23       	and	r24, r18
    1d36:	93 23       	and	r25, r19
    1d38:	a4 23       	and	r26, r20
    1d3a:	b5 23       	and	r27, r21
    1d3c:	21 e0       	ldi	r18, 0x01	; 1
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	50 e0       	ldi	r21, 0x00	; 0
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	a1 05       	cpc	r26, r1
    1d48:	b1 05       	cpc	r27, r1
    1d4a:	19 f4       	brne	.+6      	; 0x1d52 <_fpadd_parts+0x170>
    1d4c:	20 e0       	ldi	r18, 0x00	; 0
    1d4e:	30 e0       	ldi	r19, 0x00	; 0
    1d50:	a9 01       	movw	r20, r18
    1d52:	26 29       	or	r18, r6
    1d54:	37 29       	or	r19, r7
    1d56:	48 29       	or	r20, r8
    1d58:	59 29       	or	r21, r9
    1d5a:	0b c0       	rjmp	.+22     	; 0x1d72 <_fpadd_parts+0x190>
    1d5c:	6c 14       	cp	r6, r12
    1d5e:	7d 04       	cpc	r7, r13
    1d60:	24 f4       	brge	.+8      	; 0x1d6a <_fpadd_parts+0x188>
    1d62:	ee 24       	eor	r14, r14
    1d64:	ff 24       	eor	r15, r15
    1d66:	87 01       	movw	r16, r14
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <_fpadd_parts+0x190>
    1d6a:	63 01       	movw	r12, r6
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	a9 01       	movw	r20, r18
    1d72:	81 81       	ldd	r24, Z+1	; 0x01
    1d74:	fb 01       	movw	r30, r22
    1d76:	91 81       	ldd	r25, Z+1	; 0x01
    1d78:	89 17       	cp	r24, r25
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <_fpadd_parts+0x19c>
    1d7c:	45 c0       	rjmp	.+138    	; 0x1e08 <_fpadd_parts+0x226>
    1d7e:	88 23       	and	r24, r24
    1d80:	49 f0       	breq	.+18     	; 0x1d94 <_fpadd_parts+0x1b2>
    1d82:	d8 01       	movw	r26, r16
    1d84:	c7 01       	movw	r24, r14
    1d86:	82 1b       	sub	r24, r18
    1d88:	93 0b       	sbc	r25, r19
    1d8a:	a4 0b       	sbc	r26, r20
    1d8c:	b5 0b       	sbc	r27, r21
    1d8e:	9c 01       	movw	r18, r24
    1d90:	ad 01       	movw	r20, r26
    1d92:	04 c0       	rjmp	.+8      	; 0x1d9c <_fpadd_parts+0x1ba>
    1d94:	2e 19       	sub	r18, r14
    1d96:	3f 09       	sbc	r19, r15
    1d98:	40 0b       	sbc	r20, r16
    1d9a:	51 0b       	sbc	r21, r17
    1d9c:	57 fd       	sbrc	r21, 7
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <_fpadd_parts+0x1c6>
    1da0:	19 82       	std	Y+1, r1	; 0x01
    1da2:	db 82       	std	Y+3, r13	; 0x03
    1da4:	ca 82       	std	Y+2, r12	; 0x02
    1da6:	0b c0       	rjmp	.+22     	; 0x1dbe <_fpadd_parts+0x1dc>
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	89 83       	std	Y+1, r24	; 0x01
    1dac:	db 82       	std	Y+3, r13	; 0x03
    1dae:	ca 82       	std	Y+2, r12	; 0x02
    1db0:	50 95       	com	r21
    1db2:	40 95       	com	r20
    1db4:	30 95       	com	r19
    1db6:	21 95       	neg	r18
    1db8:	3f 4f       	sbci	r19, 0xFF	; 255
    1dba:	4f 4f       	sbci	r20, 0xFF	; 255
    1dbc:	5f 4f       	sbci	r21, 0xFF	; 255
    1dbe:	2c 83       	std	Y+4, r18	; 0x04
    1dc0:	3d 83       	std	Y+5, r19	; 0x05
    1dc2:	4e 83       	std	Y+6, r20	; 0x06
    1dc4:	5f 83       	std	Y+7, r21	; 0x07
    1dc6:	0d c0       	rjmp	.+26     	; 0x1de2 <_fpadd_parts+0x200>
    1dc8:	88 0f       	add	r24, r24
    1dca:	99 1f       	adc	r25, r25
    1dcc:	aa 1f       	adc	r26, r26
    1dce:	bb 1f       	adc	r27, r27
    1dd0:	8c 83       	std	Y+4, r24	; 0x04
    1dd2:	9d 83       	std	Y+5, r25	; 0x05
    1dd4:	ae 83       	std	Y+6, r26	; 0x06
    1dd6:	bf 83       	std	Y+7, r27	; 0x07
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	9b 81       	ldd	r25, Y+3	; 0x03
    1ddc:	01 97       	sbiw	r24, 0x01	; 1
    1dde:	9b 83       	std	Y+3, r25	; 0x03
    1de0:	8a 83       	std	Y+2, r24	; 0x02
    1de2:	8c 81       	ldd	r24, Y+4	; 0x04
    1de4:	9d 81       	ldd	r25, Y+5	; 0x05
    1de6:	ae 81       	ldd	r26, Y+6	; 0x06
    1de8:	bf 81       	ldd	r27, Y+7	; 0x07
    1dea:	9c 01       	movw	r18, r24
    1dec:	ad 01       	movw	r20, r26
    1dee:	21 50       	subi	r18, 0x01	; 1
    1df0:	30 40       	sbci	r19, 0x00	; 0
    1df2:	40 40       	sbci	r20, 0x00	; 0
    1df4:	50 40       	sbci	r21, 0x00	; 0
    1df6:	2f 3f       	cpi	r18, 0xFF	; 255
    1df8:	ef ef       	ldi	r30, 0xFF	; 255
    1dfa:	3e 07       	cpc	r19, r30
    1dfc:	ef ef       	ldi	r30, 0xFF	; 255
    1dfe:	4e 07       	cpc	r20, r30
    1e00:	ef e3       	ldi	r30, 0x3F	; 63
    1e02:	5e 07       	cpc	r21, r30
    1e04:	08 f3       	brcs	.-62     	; 0x1dc8 <_fpadd_parts+0x1e6>
    1e06:	0b c0       	rjmp	.+22     	; 0x1e1e <_fpadd_parts+0x23c>
    1e08:	89 83       	std	Y+1, r24	; 0x01
    1e0a:	db 82       	std	Y+3, r13	; 0x03
    1e0c:	ca 82       	std	Y+2, r12	; 0x02
    1e0e:	2e 0d       	add	r18, r14
    1e10:	3f 1d       	adc	r19, r15
    1e12:	40 1f       	adc	r20, r16
    1e14:	51 1f       	adc	r21, r17
    1e16:	2c 83       	std	Y+4, r18	; 0x04
    1e18:	3d 83       	std	Y+5, r19	; 0x05
    1e1a:	4e 83       	std	Y+6, r20	; 0x06
    1e1c:	5f 83       	std	Y+7, r21	; 0x07
    1e1e:	83 e0       	ldi	r24, 0x03	; 3
    1e20:	88 83       	st	Y, r24
    1e22:	2c 81       	ldd	r18, Y+4	; 0x04
    1e24:	3d 81       	ldd	r19, Y+5	; 0x05
    1e26:	4e 81       	ldd	r20, Y+6	; 0x06
    1e28:	5f 81       	ldd	r21, Y+7	; 0x07
    1e2a:	57 ff       	sbrs	r21, 7
    1e2c:	1d c0       	rjmp	.+58     	; 0x1e68 <_fpadd_parts+0x286>
    1e2e:	da 01       	movw	r26, r20
    1e30:	c9 01       	movw	r24, r18
    1e32:	81 70       	andi	r24, 0x01	; 1
    1e34:	90 70       	andi	r25, 0x00	; 0
    1e36:	a0 70       	andi	r26, 0x00	; 0
    1e38:	b0 70       	andi	r27, 0x00	; 0
    1e3a:	56 95       	lsr	r21
    1e3c:	47 95       	ror	r20
    1e3e:	37 95       	ror	r19
    1e40:	27 95       	ror	r18
    1e42:	82 2b       	or	r24, r18
    1e44:	93 2b       	or	r25, r19
    1e46:	a4 2b       	or	r26, r20
    1e48:	b5 2b       	or	r27, r21
    1e4a:	8c 83       	std	Y+4, r24	; 0x04
    1e4c:	9d 83       	std	Y+5, r25	; 0x05
    1e4e:	ae 83       	std	Y+6, r26	; 0x06
    1e50:	bf 83       	std	Y+7, r27	; 0x07
    1e52:	8a 81       	ldd	r24, Y+2	; 0x02
    1e54:	9b 81       	ldd	r25, Y+3	; 0x03
    1e56:	01 96       	adiw	r24, 0x01	; 1
    1e58:	9b 83       	std	Y+3, r25	; 0x03
    1e5a:	8a 83       	std	Y+2, r24	; 0x02
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <_fpadd_parts+0x286>
    1e5e:	e6 e6       	ldi	r30, 0x66	; 102
    1e60:	f1 e0       	ldi	r31, 0x01	; 1
    1e62:	03 c0       	rjmp	.+6      	; 0x1e6a <_fpadd_parts+0x288>
    1e64:	fb 01       	movw	r30, r22
    1e66:	01 c0       	rjmp	.+2      	; 0x1e6a <_fpadd_parts+0x288>
    1e68:	fe 01       	movw	r30, r28
    1e6a:	cf 01       	movw	r24, r30
    1e6c:	cd b7       	in	r28, 0x3d	; 61
    1e6e:	de b7       	in	r29, 0x3e	; 62
    1e70:	ee e0       	ldi	r30, 0x0E	; 14
    1e72:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <__epilogue_restores__+0x8>

00001e76 <__addsf3>:
    1e76:	a0 e2       	ldi	r26, 0x20	; 32
    1e78:	b0 e0       	ldi	r27, 0x00	; 0
    1e7a:	e1 e4       	ldi	r30, 0x41	; 65
    1e7c:	ff e0       	ldi	r31, 0x0F	; 15
    1e7e:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__prologue_saves__+0x18>
    1e82:	69 83       	std	Y+1, r22	; 0x01
    1e84:	7a 83       	std	Y+2, r23	; 0x02
    1e86:	8b 83       	std	Y+3, r24	; 0x03
    1e88:	9c 83       	std	Y+4, r25	; 0x04
    1e8a:	2d 83       	std	Y+5, r18	; 0x05
    1e8c:	3e 83       	std	Y+6, r19	; 0x06
    1e8e:	4f 83       	std	Y+7, r20	; 0x07
    1e90:	58 87       	std	Y+8, r21	; 0x08
    1e92:	89 e0       	ldi	r24, 0x09	; 9
    1e94:	e8 2e       	mov	r14, r24
    1e96:	f1 2c       	mov	r15, r1
    1e98:	ec 0e       	add	r14, r28
    1e9a:	fd 1e       	adc	r15, r29
    1e9c:	ce 01       	movw	r24, r28
    1e9e:	01 96       	adiw	r24, 0x01	; 1
    1ea0:	b7 01       	movw	r22, r14
    1ea2:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    1ea6:	8e 01       	movw	r16, r28
    1ea8:	0f 5e       	subi	r16, 0xEF	; 239
    1eaa:	1f 4f       	sbci	r17, 0xFF	; 255
    1eac:	ce 01       	movw	r24, r28
    1eae:	05 96       	adiw	r24, 0x05	; 5
    1eb0:	b8 01       	movw	r22, r16
    1eb2:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    1eb6:	c7 01       	movw	r24, r14
    1eb8:	b8 01       	movw	r22, r16
    1eba:	ae 01       	movw	r20, r28
    1ebc:	47 5e       	subi	r20, 0xE7	; 231
    1ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    1ec0:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_fpadd_parts>
    1ec4:	0e 94 85 13 	call	0x270a	; 0x270a <__pack_f>
    1ec8:	a0 96       	adiw	r28, 0x20	; 32
    1eca:	e6 e0       	ldi	r30, 0x06	; 6
    1ecc:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__epilogue_restores__+0x18>

00001ed0 <__subsf3>:
    1ed0:	a0 e2       	ldi	r26, 0x20	; 32
    1ed2:	b0 e0       	ldi	r27, 0x00	; 0
    1ed4:	ee e6       	ldi	r30, 0x6E	; 110
    1ed6:	ff e0       	ldi	r31, 0x0F	; 15
    1ed8:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__prologue_saves__+0x18>
    1edc:	69 83       	std	Y+1, r22	; 0x01
    1ede:	7a 83       	std	Y+2, r23	; 0x02
    1ee0:	8b 83       	std	Y+3, r24	; 0x03
    1ee2:	9c 83       	std	Y+4, r25	; 0x04
    1ee4:	2d 83       	std	Y+5, r18	; 0x05
    1ee6:	3e 83       	std	Y+6, r19	; 0x06
    1ee8:	4f 83       	std	Y+7, r20	; 0x07
    1eea:	58 87       	std	Y+8, r21	; 0x08
    1eec:	8e 01       	movw	r16, r28
    1eee:	07 5f       	subi	r16, 0xF7	; 247
    1ef0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ef2:	ce 01       	movw	r24, r28
    1ef4:	01 96       	adiw	r24, 0x01	; 1
    1ef6:	b8 01       	movw	r22, r16
    1ef8:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    1efc:	91 e1       	ldi	r25, 0x11	; 17
    1efe:	e9 2e       	mov	r14, r25
    1f00:	f1 2c       	mov	r15, r1
    1f02:	ec 0e       	add	r14, r28
    1f04:	fd 1e       	adc	r15, r29
    1f06:	ce 01       	movw	r24, r28
    1f08:	05 96       	adiw	r24, 0x05	; 5
    1f0a:	b7 01       	movw	r22, r14
    1f0c:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    1f10:	8a 89       	ldd	r24, Y+18	; 0x12
    1f12:	91 e0       	ldi	r25, 0x01	; 1
    1f14:	89 27       	eor	r24, r25
    1f16:	8a 8b       	std	Y+18, r24	; 0x12
    1f18:	c8 01       	movw	r24, r16
    1f1a:	b7 01       	movw	r22, r14
    1f1c:	ae 01       	movw	r20, r28
    1f1e:	47 5e       	subi	r20, 0xE7	; 231
    1f20:	5f 4f       	sbci	r21, 0xFF	; 255
    1f22:	0e 94 f1 0d 	call	0x1be2	; 0x1be2 <_fpadd_parts>
    1f26:	0e 94 85 13 	call	0x270a	; 0x270a <__pack_f>
    1f2a:	a0 96       	adiw	r28, 0x20	; 32
    1f2c:	e6 e0       	ldi	r30, 0x06	; 6
    1f2e:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__epilogue_restores__+0x18>

00001f32 <__mulsf3>:
    1f32:	a0 e2       	ldi	r26, 0x20	; 32
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	ef e9       	ldi	r30, 0x9F	; 159
    1f38:	ff e0       	ldi	r31, 0x0F	; 15
    1f3a:	0c 94 3b 25 	jmp	0x4a76	; 0x4a76 <__prologue_saves__>
    1f3e:	69 83       	std	Y+1, r22	; 0x01
    1f40:	7a 83       	std	Y+2, r23	; 0x02
    1f42:	8b 83       	std	Y+3, r24	; 0x03
    1f44:	9c 83       	std	Y+4, r25	; 0x04
    1f46:	2d 83       	std	Y+5, r18	; 0x05
    1f48:	3e 83       	std	Y+6, r19	; 0x06
    1f4a:	4f 83       	std	Y+7, r20	; 0x07
    1f4c:	58 87       	std	Y+8, r21	; 0x08
    1f4e:	ce 01       	movw	r24, r28
    1f50:	01 96       	adiw	r24, 0x01	; 1
    1f52:	be 01       	movw	r22, r28
    1f54:	67 5f       	subi	r22, 0xF7	; 247
    1f56:	7f 4f       	sbci	r23, 0xFF	; 255
    1f58:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    1f5c:	ce 01       	movw	r24, r28
    1f5e:	05 96       	adiw	r24, 0x05	; 5
    1f60:	be 01       	movw	r22, r28
    1f62:	6f 5e       	subi	r22, 0xEF	; 239
    1f64:	7f 4f       	sbci	r23, 0xFF	; 255
    1f66:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    1f6a:	99 85       	ldd	r25, Y+9	; 0x09
    1f6c:	92 30       	cpi	r25, 0x02	; 2
    1f6e:	78 f0       	brcs	.+30     	; 0x1f8e <__mulsf3+0x5c>
    1f70:	89 89       	ldd	r24, Y+17	; 0x11
    1f72:	82 30       	cpi	r24, 0x02	; 2
    1f74:	c0 f0       	brcs	.+48     	; 0x1fa6 <__mulsf3+0x74>
    1f76:	94 30       	cpi	r25, 0x04	; 4
    1f78:	19 f4       	brne	.+6      	; 0x1f80 <__mulsf3+0x4e>
    1f7a:	82 30       	cpi	r24, 0x02	; 2
    1f7c:	41 f4       	brne	.+16     	; 0x1f8e <__mulsf3+0x5c>
    1f7e:	cb c0       	rjmp	.+406    	; 0x2116 <__mulsf3+0x1e4>
    1f80:	84 30       	cpi	r24, 0x04	; 4
    1f82:	19 f4       	brne	.+6      	; 0x1f8a <__mulsf3+0x58>
    1f84:	92 30       	cpi	r25, 0x02	; 2
    1f86:	79 f4       	brne	.+30     	; 0x1fa6 <__mulsf3+0x74>
    1f88:	c6 c0       	rjmp	.+396    	; 0x2116 <__mulsf3+0x1e4>
    1f8a:	92 30       	cpi	r25, 0x02	; 2
    1f8c:	51 f4       	brne	.+20     	; 0x1fa2 <__mulsf3+0x70>
    1f8e:	81 e0       	ldi	r24, 0x01	; 1
    1f90:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f92:	9a 89       	ldd	r25, Y+18	; 0x12
    1f94:	29 17       	cp	r18, r25
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <__mulsf3+0x68>
    1f98:	80 e0       	ldi	r24, 0x00	; 0
    1f9a:	8a 87       	std	Y+10, r24	; 0x0a
    1f9c:	ce 01       	movw	r24, r28
    1f9e:	09 96       	adiw	r24, 0x09	; 9
    1fa0:	bc c0       	rjmp	.+376    	; 0x211a <__mulsf3+0x1e8>
    1fa2:	82 30       	cpi	r24, 0x02	; 2
    1fa4:	51 f4       	brne	.+20     	; 0x1fba <__mulsf3+0x88>
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	2a 85       	ldd	r18, Y+10	; 0x0a
    1faa:	9a 89       	ldd	r25, Y+18	; 0x12
    1fac:	29 17       	cp	r18, r25
    1fae:	09 f4       	brne	.+2      	; 0x1fb2 <__mulsf3+0x80>
    1fb0:	80 e0       	ldi	r24, 0x00	; 0
    1fb2:	8a 8b       	std	Y+18, r24	; 0x12
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	41 96       	adiw	r24, 0x11	; 17
    1fb8:	b0 c0       	rjmp	.+352    	; 0x211a <__mulsf3+0x1e8>
    1fba:	6d 84       	ldd	r6, Y+13	; 0x0d
    1fbc:	7e 84       	ldd	r7, Y+14	; 0x0e
    1fbe:	8f 84       	ldd	r8, Y+15	; 0x0f
    1fc0:	98 88       	ldd	r9, Y+16	; 0x10
    1fc2:	ed 88       	ldd	r14, Y+21	; 0x15
    1fc4:	fe 88       	ldd	r15, Y+22	; 0x16
    1fc6:	0f 89       	ldd	r16, Y+23	; 0x17
    1fc8:	18 8d       	ldd	r17, Y+24	; 0x18
    1fca:	e0 e2       	ldi	r30, 0x20	; 32
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	80 e0       	ldi	r24, 0x00	; 0
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	aa 24       	eor	r10, r10
    1fd6:	bb 24       	eor	r11, r11
    1fd8:	65 01       	movw	r12, r10
    1fda:	20 e0       	ldi	r18, 0x00	; 0
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	a9 01       	movw	r20, r18
    1fe0:	b3 01       	movw	r22, r6
    1fe2:	61 70       	andi	r22, 0x01	; 1
    1fe4:	70 70       	andi	r23, 0x00	; 0
    1fe6:	61 15       	cp	r22, r1
    1fe8:	71 05       	cpc	r23, r1
    1fea:	d1 f0       	breq	.+52     	; 0x2020 <__mulsf3+0xee>
    1fec:	2e 0d       	add	r18, r14
    1fee:	3f 1d       	adc	r19, r15
    1ff0:	40 1f       	adc	r20, r16
    1ff2:	51 1f       	adc	r21, r17
    1ff4:	15 01       	movw	r2, r10
    1ff6:	26 01       	movw	r4, r12
    1ff8:	28 0e       	add	r2, r24
    1ffa:	39 1e       	adc	r3, r25
    1ffc:	4a 1e       	adc	r4, r26
    1ffe:	5b 1e       	adc	r5, r27
    2000:	81 e0       	ldi	r24, 0x01	; 1
    2002:	90 e0       	ldi	r25, 0x00	; 0
    2004:	a0 e0       	ldi	r26, 0x00	; 0
    2006:	b0 e0       	ldi	r27, 0x00	; 0
    2008:	2e 15       	cp	r18, r14
    200a:	3f 05       	cpc	r19, r15
    200c:	40 07       	cpc	r20, r16
    200e:	51 07       	cpc	r21, r17
    2010:	18 f0       	brcs	.+6      	; 0x2018 <__mulsf3+0xe6>
    2012:	80 e0       	ldi	r24, 0x00	; 0
    2014:	90 e0       	ldi	r25, 0x00	; 0
    2016:	dc 01       	movw	r26, r24
    2018:	82 0d       	add	r24, r2
    201a:	93 1d       	adc	r25, r3
    201c:	a4 1d       	adc	r26, r4
    201e:	b5 1d       	adc	r27, r5
    2020:	aa 0c       	add	r10, r10
    2022:	bb 1c       	adc	r11, r11
    2024:	cc 1c       	adc	r12, r12
    2026:	dd 1c       	adc	r13, r13
    2028:	17 ff       	sbrs	r17, 7
    202a:	09 c0       	rjmp	.+18     	; 0x203e <__mulsf3+0x10c>
    202c:	61 e0       	ldi	r22, 0x01	; 1
    202e:	26 2e       	mov	r2, r22
    2030:	31 2c       	mov	r3, r1
    2032:	41 2c       	mov	r4, r1
    2034:	51 2c       	mov	r5, r1
    2036:	a2 28       	or	r10, r2
    2038:	b3 28       	or	r11, r3
    203a:	c4 28       	or	r12, r4
    203c:	d5 28       	or	r13, r5
    203e:	31 97       	sbiw	r30, 0x01	; 1
    2040:	49 f0       	breq	.+18     	; 0x2054 <__mulsf3+0x122>
    2042:	ee 0c       	add	r14, r14
    2044:	ff 1c       	adc	r15, r15
    2046:	00 1f       	adc	r16, r16
    2048:	11 1f       	adc	r17, r17
    204a:	96 94       	lsr	r9
    204c:	87 94       	ror	r8
    204e:	77 94       	ror	r7
    2050:	67 94       	ror	r6
    2052:	c6 cf       	rjmp	.-116    	; 0x1fe0 <__mulsf3+0xae>
    2054:	6b 89       	ldd	r22, Y+19	; 0x13
    2056:	7c 89       	ldd	r23, Y+20	; 0x14
    2058:	eb 85       	ldd	r30, Y+11	; 0x0b
    205a:	fc 85       	ldd	r31, Y+12	; 0x0c
    205c:	6e 0f       	add	r22, r30
    205e:	7f 1f       	adc	r23, r31
    2060:	6e 5f       	subi	r22, 0xFE	; 254
    2062:	7f 4f       	sbci	r23, 0xFF	; 255
    2064:	7c 8f       	std	Y+28, r23	; 0x1c
    2066:	6b 8f       	std	Y+27, r22	; 0x1b
    2068:	61 e0       	ldi	r22, 0x01	; 1
    206a:	ea 85       	ldd	r30, Y+10	; 0x0a
    206c:	7a 89       	ldd	r23, Y+18	; 0x12
    206e:	e7 17       	cp	r30, r23
    2070:	09 f4       	brne	.+2      	; 0x2074 <__mulsf3+0x142>
    2072:	60 e0       	ldi	r22, 0x00	; 0
    2074:	6a 8f       	std	Y+26, r22	; 0x1a
    2076:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2078:	7c 8d       	ldd	r23, Y+28	; 0x1c
    207a:	10 c0       	rjmp	.+32     	; 0x209c <__mulsf3+0x16a>
    207c:	fc 01       	movw	r30, r24
    207e:	e1 70       	andi	r30, 0x01	; 1
    2080:	f0 70       	andi	r31, 0x00	; 0
    2082:	30 97       	sbiw	r30, 0x00	; 0
    2084:	29 f0       	breq	.+10     	; 0x2090 <__mulsf3+0x15e>
    2086:	56 95       	lsr	r21
    2088:	47 95       	ror	r20
    208a:	37 95       	ror	r19
    208c:	27 95       	ror	r18
    208e:	50 68       	ori	r21, 0x80	; 128
    2090:	b6 95       	lsr	r27
    2092:	a7 95       	ror	r26
    2094:	97 95       	ror	r25
    2096:	87 95       	ror	r24
    2098:	6f 5f       	subi	r22, 0xFF	; 255
    209a:	7f 4f       	sbci	r23, 0xFF	; 255
    209c:	b7 fd       	sbrc	r27, 7
    209e:	ee cf       	rjmp	.-36     	; 0x207c <__mulsf3+0x14a>
    20a0:	0c c0       	rjmp	.+24     	; 0x20ba <__mulsf3+0x188>
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	aa 1f       	adc	r26, r26
    20a8:	bb 1f       	adc	r27, r27
    20aa:	57 fd       	sbrc	r21, 7
    20ac:	81 60       	ori	r24, 0x01	; 1
    20ae:	22 0f       	add	r18, r18
    20b0:	33 1f       	adc	r19, r19
    20b2:	44 1f       	adc	r20, r20
    20b4:	55 1f       	adc	r21, r21
    20b6:	61 50       	subi	r22, 0x01	; 1
    20b8:	70 40       	sbci	r23, 0x00	; 0
    20ba:	80 30       	cpi	r24, 0x00	; 0
    20bc:	e0 e0       	ldi	r30, 0x00	; 0
    20be:	9e 07       	cpc	r25, r30
    20c0:	e0 e0       	ldi	r30, 0x00	; 0
    20c2:	ae 07       	cpc	r26, r30
    20c4:	e0 e4       	ldi	r30, 0x40	; 64
    20c6:	be 07       	cpc	r27, r30
    20c8:	60 f3       	brcs	.-40     	; 0x20a2 <__mulsf3+0x170>
    20ca:	6b 8f       	std	Y+27, r22	; 0x1b
    20cc:	7c 8f       	std	Y+28, r23	; 0x1c
    20ce:	6f e7       	ldi	r22, 0x7F	; 127
    20d0:	e6 2e       	mov	r14, r22
    20d2:	f1 2c       	mov	r15, r1
    20d4:	01 2d       	mov	r16, r1
    20d6:	11 2d       	mov	r17, r1
    20d8:	e8 22       	and	r14, r24
    20da:	f9 22       	and	r15, r25
    20dc:	0a 23       	and	r16, r26
    20de:	1b 23       	and	r17, r27
    20e0:	60 e4       	ldi	r22, 0x40	; 64
    20e2:	e6 16       	cp	r14, r22
    20e4:	f1 04       	cpc	r15, r1
    20e6:	01 05       	cpc	r16, r1
    20e8:	11 05       	cpc	r17, r1
    20ea:	61 f4       	brne	.+24     	; 0x2104 <__mulsf3+0x1d2>
    20ec:	87 fd       	sbrc	r24, 7
    20ee:	0a c0       	rjmp	.+20     	; 0x2104 <__mulsf3+0x1d2>
    20f0:	21 15       	cp	r18, r1
    20f2:	31 05       	cpc	r19, r1
    20f4:	41 05       	cpc	r20, r1
    20f6:	51 05       	cpc	r21, r1
    20f8:	29 f0       	breq	.+10     	; 0x2104 <__mulsf3+0x1d2>
    20fa:	80 5c       	subi	r24, 0xC0	; 192
    20fc:	9f 4f       	sbci	r25, 0xFF	; 255
    20fe:	af 4f       	sbci	r26, 0xFF	; 255
    2100:	bf 4f       	sbci	r27, 0xFF	; 255
    2102:	80 78       	andi	r24, 0x80	; 128
    2104:	8d 8f       	std	Y+29, r24	; 0x1d
    2106:	9e 8f       	std	Y+30, r25	; 0x1e
    2108:	af 8f       	std	Y+31, r26	; 0x1f
    210a:	b8 a3       	std	Y+32, r27	; 0x20
    210c:	83 e0       	ldi	r24, 0x03	; 3
    210e:	89 8f       	std	Y+25, r24	; 0x19
    2110:	ce 01       	movw	r24, r28
    2112:	49 96       	adiw	r24, 0x19	; 25
    2114:	02 c0       	rjmp	.+4      	; 0x211a <__mulsf3+0x1e8>
    2116:	86 e6       	ldi	r24, 0x66	; 102
    2118:	91 e0       	ldi	r25, 0x01	; 1
    211a:	0e 94 85 13 	call	0x270a	; 0x270a <__pack_f>
    211e:	a0 96       	adiw	r28, 0x20	; 32
    2120:	e2 e1       	ldi	r30, 0x12	; 18
    2122:	0c 94 57 25 	jmp	0x4aae	; 0x4aae <__epilogue_restores__>

00002126 <__divsf3>:
    2126:	a8 e1       	ldi	r26, 0x18	; 24
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	e9 e9       	ldi	r30, 0x99	; 153
    212c:	f0 e1       	ldi	r31, 0x10	; 16
    212e:	0c 94 43 25 	jmp	0x4a86	; 0x4a86 <__prologue_saves__+0x10>
    2132:	69 83       	std	Y+1, r22	; 0x01
    2134:	7a 83       	std	Y+2, r23	; 0x02
    2136:	8b 83       	std	Y+3, r24	; 0x03
    2138:	9c 83       	std	Y+4, r25	; 0x04
    213a:	2d 83       	std	Y+5, r18	; 0x05
    213c:	3e 83       	std	Y+6, r19	; 0x06
    213e:	4f 83       	std	Y+7, r20	; 0x07
    2140:	58 87       	std	Y+8, r21	; 0x08
    2142:	8e 01       	movw	r16, r28
    2144:	07 5f       	subi	r16, 0xF7	; 247
    2146:	1f 4f       	sbci	r17, 0xFF	; 255
    2148:	ce 01       	movw	r24, r28
    214a:	01 96       	adiw	r24, 0x01	; 1
    214c:	b8 01       	movw	r22, r16
    214e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    2152:	81 e1       	ldi	r24, 0x11	; 17
    2154:	e8 2e       	mov	r14, r24
    2156:	f1 2c       	mov	r15, r1
    2158:	ec 0e       	add	r14, r28
    215a:	fd 1e       	adc	r15, r29
    215c:	ce 01       	movw	r24, r28
    215e:	05 96       	adiw	r24, 0x05	; 5
    2160:	b7 01       	movw	r22, r14
    2162:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    2166:	99 85       	ldd	r25, Y+9	; 0x09
    2168:	92 30       	cpi	r25, 0x02	; 2
    216a:	08 f4       	brcc	.+2      	; 0x216e <__divsf3+0x48>
    216c:	83 c0       	rjmp	.+262    	; 0x2274 <__divsf3+0x14e>
    216e:	89 89       	ldd	r24, Y+17	; 0x11
    2170:	82 30       	cpi	r24, 0x02	; 2
    2172:	08 f4       	brcc	.+2      	; 0x2176 <__divsf3+0x50>
    2174:	7b c0       	rjmp	.+246    	; 0x226c <__divsf3+0x146>
    2176:	2a 85       	ldd	r18, Y+10	; 0x0a
    2178:	3a 89       	ldd	r19, Y+18	; 0x12
    217a:	23 27       	eor	r18, r19
    217c:	2a 87       	std	Y+10, r18	; 0x0a
    217e:	94 30       	cpi	r25, 0x04	; 4
    2180:	11 f0       	breq	.+4      	; 0x2186 <__divsf3+0x60>
    2182:	92 30       	cpi	r25, 0x02	; 2
    2184:	21 f4       	brne	.+8      	; 0x218e <__divsf3+0x68>
    2186:	98 17       	cp	r25, r24
    2188:	09 f0       	breq	.+2      	; 0x218c <__divsf3+0x66>
    218a:	6c c0       	rjmp	.+216    	; 0x2264 <__divsf3+0x13e>
    218c:	71 c0       	rjmp	.+226    	; 0x2270 <__divsf3+0x14a>
    218e:	84 30       	cpi	r24, 0x04	; 4
    2190:	39 f4       	brne	.+14     	; 0x21a0 <__divsf3+0x7a>
    2192:	1d 86       	std	Y+13, r1	; 0x0d
    2194:	1e 86       	std	Y+14, r1	; 0x0e
    2196:	1f 86       	std	Y+15, r1	; 0x0f
    2198:	18 8a       	std	Y+16, r1	; 0x10
    219a:	1c 86       	std	Y+12, r1	; 0x0c
    219c:	1b 86       	std	Y+11, r1	; 0x0b
    219e:	6a c0       	rjmp	.+212    	; 0x2274 <__divsf3+0x14e>
    21a0:	82 30       	cpi	r24, 0x02	; 2
    21a2:	19 f4       	brne	.+6      	; 0x21aa <__divsf3+0x84>
    21a4:	84 e0       	ldi	r24, 0x04	; 4
    21a6:	89 87       	std	Y+9, r24	; 0x09
    21a8:	65 c0       	rjmp	.+202    	; 0x2274 <__divsf3+0x14e>
    21aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    21ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    21ae:	2b 89       	ldd	r18, Y+19	; 0x13
    21b0:	3c 89       	ldd	r19, Y+20	; 0x14
    21b2:	82 1b       	sub	r24, r18
    21b4:	93 0b       	sbc	r25, r19
    21b6:	9c 87       	std	Y+12, r25	; 0x0c
    21b8:	8b 87       	std	Y+11, r24	; 0x0b
    21ba:	2d 85       	ldd	r18, Y+13	; 0x0d
    21bc:	3e 85       	ldd	r19, Y+14	; 0x0e
    21be:	4f 85       	ldd	r20, Y+15	; 0x0f
    21c0:	58 89       	ldd	r21, Y+16	; 0x10
    21c2:	ed 88       	ldd	r14, Y+21	; 0x15
    21c4:	fe 88       	ldd	r15, Y+22	; 0x16
    21c6:	0f 89       	ldd	r16, Y+23	; 0x17
    21c8:	18 8d       	ldd	r17, Y+24	; 0x18
    21ca:	2e 15       	cp	r18, r14
    21cc:	3f 05       	cpc	r19, r15
    21ce:	40 07       	cpc	r20, r16
    21d0:	51 07       	cpc	r21, r17
    21d2:	38 f4       	brcc	.+14     	; 0x21e2 <__divsf3+0xbc>
    21d4:	22 0f       	add	r18, r18
    21d6:	33 1f       	adc	r19, r19
    21d8:	44 1f       	adc	r20, r20
    21da:	55 1f       	adc	r21, r21
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	9c 87       	std	Y+12, r25	; 0x0c
    21e0:	8b 87       	std	Y+11, r24	; 0x0b
    21e2:	6f e1       	ldi	r22, 0x1F	; 31
    21e4:	70 e0       	ldi	r23, 0x00	; 0
    21e6:	a1 2c       	mov	r10, r1
    21e8:	b1 2c       	mov	r11, r1
    21ea:	c1 2c       	mov	r12, r1
    21ec:	a0 e4       	ldi	r26, 0x40	; 64
    21ee:	da 2e       	mov	r13, r26
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	dc 01       	movw	r26, r24
    21f6:	2e 15       	cp	r18, r14
    21f8:	3f 05       	cpc	r19, r15
    21fa:	40 07       	cpc	r20, r16
    21fc:	51 07       	cpc	r21, r17
    21fe:	40 f0       	brcs	.+16     	; 0x2210 <__divsf3+0xea>
    2200:	8a 29       	or	r24, r10
    2202:	9b 29       	or	r25, r11
    2204:	ac 29       	or	r26, r12
    2206:	bd 29       	or	r27, r13
    2208:	2e 19       	sub	r18, r14
    220a:	3f 09       	sbc	r19, r15
    220c:	40 0b       	sbc	r20, r16
    220e:	51 0b       	sbc	r21, r17
    2210:	d6 94       	lsr	r13
    2212:	c7 94       	ror	r12
    2214:	b7 94       	ror	r11
    2216:	a7 94       	ror	r10
    2218:	22 0f       	add	r18, r18
    221a:	33 1f       	adc	r19, r19
    221c:	44 1f       	adc	r20, r20
    221e:	55 1f       	adc	r21, r21
    2220:	61 50       	subi	r22, 0x01	; 1
    2222:	70 40       	sbci	r23, 0x00	; 0
    2224:	41 f7       	brne	.-48     	; 0x21f6 <__divsf3+0xd0>
    2226:	6f e7       	ldi	r22, 0x7F	; 127
    2228:	e6 2e       	mov	r14, r22
    222a:	f1 2c       	mov	r15, r1
    222c:	01 2d       	mov	r16, r1
    222e:	11 2d       	mov	r17, r1
    2230:	e8 22       	and	r14, r24
    2232:	f9 22       	and	r15, r25
    2234:	0a 23       	and	r16, r26
    2236:	1b 23       	and	r17, r27
    2238:	60 e4       	ldi	r22, 0x40	; 64
    223a:	e6 16       	cp	r14, r22
    223c:	f1 04       	cpc	r15, r1
    223e:	01 05       	cpc	r16, r1
    2240:	11 05       	cpc	r17, r1
    2242:	61 f4       	brne	.+24     	; 0x225c <__divsf3+0x136>
    2244:	87 fd       	sbrc	r24, 7
    2246:	0a c0       	rjmp	.+20     	; 0x225c <__divsf3+0x136>
    2248:	21 15       	cp	r18, r1
    224a:	31 05       	cpc	r19, r1
    224c:	41 05       	cpc	r20, r1
    224e:	51 05       	cpc	r21, r1
    2250:	29 f0       	breq	.+10     	; 0x225c <__divsf3+0x136>
    2252:	80 5c       	subi	r24, 0xC0	; 192
    2254:	9f 4f       	sbci	r25, 0xFF	; 255
    2256:	af 4f       	sbci	r26, 0xFF	; 255
    2258:	bf 4f       	sbci	r27, 0xFF	; 255
    225a:	80 78       	andi	r24, 0x80	; 128
    225c:	8d 87       	std	Y+13, r24	; 0x0d
    225e:	9e 87       	std	Y+14, r25	; 0x0e
    2260:	af 87       	std	Y+15, r26	; 0x0f
    2262:	b8 8b       	std	Y+16, r27	; 0x10
    2264:	8e 01       	movw	r16, r28
    2266:	07 5f       	subi	r16, 0xF7	; 247
    2268:	1f 4f       	sbci	r17, 0xFF	; 255
    226a:	04 c0       	rjmp	.+8      	; 0x2274 <__divsf3+0x14e>
    226c:	87 01       	movw	r16, r14
    226e:	02 c0       	rjmp	.+4      	; 0x2274 <__divsf3+0x14e>
    2270:	06 e6       	ldi	r16, 0x66	; 102
    2272:	11 e0       	ldi	r17, 0x01	; 1
    2274:	c8 01       	movw	r24, r16
    2276:	0e 94 85 13 	call	0x270a	; 0x270a <__pack_f>
    227a:	68 96       	adiw	r28, 0x18	; 24
    227c:	ea e0       	ldi	r30, 0x0A	; 10
    227e:	0c 94 5f 25 	jmp	0x4abe	; 0x4abe <__epilogue_restores__+0x10>

00002282 <__eqsf2>:
    2282:	a8 e1       	ldi	r26, 0x18	; 24
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e7 e4       	ldi	r30, 0x47	; 71
    2288:	f1 e1       	ldi	r31, 0x11	; 17
    228a:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__prologue_saves__+0x18>
    228e:	69 83       	std	Y+1, r22	; 0x01
    2290:	7a 83       	std	Y+2, r23	; 0x02
    2292:	8b 83       	std	Y+3, r24	; 0x03
    2294:	9c 83       	std	Y+4, r25	; 0x04
    2296:	2d 83       	std	Y+5, r18	; 0x05
    2298:	3e 83       	std	Y+6, r19	; 0x06
    229a:	4f 83       	std	Y+7, r20	; 0x07
    229c:	58 87       	std	Y+8, r21	; 0x08
    229e:	8e 01       	movw	r16, r28
    22a0:	07 5f       	subi	r16, 0xF7	; 247
    22a2:	1f 4f       	sbci	r17, 0xFF	; 255
    22a4:	ce 01       	movw	r24, r28
    22a6:	01 96       	adiw	r24, 0x01	; 1
    22a8:	b8 01       	movw	r22, r16
    22aa:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    22ae:	81 e1       	ldi	r24, 0x11	; 17
    22b0:	e8 2e       	mov	r14, r24
    22b2:	f1 2c       	mov	r15, r1
    22b4:	ec 0e       	add	r14, r28
    22b6:	fd 1e       	adc	r15, r29
    22b8:	ce 01       	movw	r24, r28
    22ba:	05 96       	adiw	r24, 0x05	; 5
    22bc:	b7 01       	movw	r22, r14
    22be:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    22c2:	89 85       	ldd	r24, Y+9	; 0x09
    22c4:	82 30       	cpi	r24, 0x02	; 2
    22c6:	40 f0       	brcs	.+16     	; 0x22d8 <__eqsf2+0x56>
    22c8:	89 89       	ldd	r24, Y+17	; 0x11
    22ca:	82 30       	cpi	r24, 0x02	; 2
    22cc:	28 f0       	brcs	.+10     	; 0x22d8 <__eqsf2+0x56>
    22ce:	c8 01       	movw	r24, r16
    22d0:	b7 01       	movw	r22, r14
    22d2:	0e 94 bc 14 	call	0x2978	; 0x2978 <__fpcmp_parts_f>
    22d6:	01 c0       	rjmp	.+2      	; 0x22da <__eqsf2+0x58>
    22d8:	81 e0       	ldi	r24, 0x01	; 1
    22da:	68 96       	adiw	r28, 0x18	; 24
    22dc:	e6 e0       	ldi	r30, 0x06	; 6
    22de:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__epilogue_restores__+0x18>

000022e2 <__gtsf2>:
    22e2:	a8 e1       	ldi	r26, 0x18	; 24
    22e4:	b0 e0       	ldi	r27, 0x00	; 0
    22e6:	e7 e7       	ldi	r30, 0x77	; 119
    22e8:	f1 e1       	ldi	r31, 0x11	; 17
    22ea:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__prologue_saves__+0x18>
    22ee:	69 83       	std	Y+1, r22	; 0x01
    22f0:	7a 83       	std	Y+2, r23	; 0x02
    22f2:	8b 83       	std	Y+3, r24	; 0x03
    22f4:	9c 83       	std	Y+4, r25	; 0x04
    22f6:	2d 83       	std	Y+5, r18	; 0x05
    22f8:	3e 83       	std	Y+6, r19	; 0x06
    22fa:	4f 83       	std	Y+7, r20	; 0x07
    22fc:	58 87       	std	Y+8, r21	; 0x08
    22fe:	8e 01       	movw	r16, r28
    2300:	07 5f       	subi	r16, 0xF7	; 247
    2302:	1f 4f       	sbci	r17, 0xFF	; 255
    2304:	ce 01       	movw	r24, r28
    2306:	01 96       	adiw	r24, 0x01	; 1
    2308:	b8 01       	movw	r22, r16
    230a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    230e:	81 e1       	ldi	r24, 0x11	; 17
    2310:	e8 2e       	mov	r14, r24
    2312:	f1 2c       	mov	r15, r1
    2314:	ec 0e       	add	r14, r28
    2316:	fd 1e       	adc	r15, r29
    2318:	ce 01       	movw	r24, r28
    231a:	05 96       	adiw	r24, 0x05	; 5
    231c:	b7 01       	movw	r22, r14
    231e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	82 30       	cpi	r24, 0x02	; 2
    2326:	40 f0       	brcs	.+16     	; 0x2338 <__gtsf2+0x56>
    2328:	89 89       	ldd	r24, Y+17	; 0x11
    232a:	82 30       	cpi	r24, 0x02	; 2
    232c:	28 f0       	brcs	.+10     	; 0x2338 <__gtsf2+0x56>
    232e:	c8 01       	movw	r24, r16
    2330:	b7 01       	movw	r22, r14
    2332:	0e 94 bc 14 	call	0x2978	; 0x2978 <__fpcmp_parts_f>
    2336:	01 c0       	rjmp	.+2      	; 0x233a <__gtsf2+0x58>
    2338:	8f ef       	ldi	r24, 0xFF	; 255
    233a:	68 96       	adiw	r28, 0x18	; 24
    233c:	e6 e0       	ldi	r30, 0x06	; 6
    233e:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__epilogue_restores__+0x18>

00002342 <__gesf2>:
    2342:	a8 e1       	ldi	r26, 0x18	; 24
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e7 ea       	ldi	r30, 0xA7	; 167
    2348:	f1 e1       	ldi	r31, 0x11	; 17
    234a:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__prologue_saves__+0x18>
    234e:	69 83       	std	Y+1, r22	; 0x01
    2350:	7a 83       	std	Y+2, r23	; 0x02
    2352:	8b 83       	std	Y+3, r24	; 0x03
    2354:	9c 83       	std	Y+4, r25	; 0x04
    2356:	2d 83       	std	Y+5, r18	; 0x05
    2358:	3e 83       	std	Y+6, r19	; 0x06
    235a:	4f 83       	std	Y+7, r20	; 0x07
    235c:	58 87       	std	Y+8, r21	; 0x08
    235e:	8e 01       	movw	r16, r28
    2360:	07 5f       	subi	r16, 0xF7	; 247
    2362:	1f 4f       	sbci	r17, 0xFF	; 255
    2364:	ce 01       	movw	r24, r28
    2366:	01 96       	adiw	r24, 0x01	; 1
    2368:	b8 01       	movw	r22, r16
    236a:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    236e:	81 e1       	ldi	r24, 0x11	; 17
    2370:	e8 2e       	mov	r14, r24
    2372:	f1 2c       	mov	r15, r1
    2374:	ec 0e       	add	r14, r28
    2376:	fd 1e       	adc	r15, r29
    2378:	ce 01       	movw	r24, r28
    237a:	05 96       	adiw	r24, 0x05	; 5
    237c:	b7 01       	movw	r22, r14
    237e:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    2382:	89 85       	ldd	r24, Y+9	; 0x09
    2384:	82 30       	cpi	r24, 0x02	; 2
    2386:	40 f0       	brcs	.+16     	; 0x2398 <__gesf2+0x56>
    2388:	89 89       	ldd	r24, Y+17	; 0x11
    238a:	82 30       	cpi	r24, 0x02	; 2
    238c:	28 f0       	brcs	.+10     	; 0x2398 <__gesf2+0x56>
    238e:	c8 01       	movw	r24, r16
    2390:	b7 01       	movw	r22, r14
    2392:	0e 94 bc 14 	call	0x2978	; 0x2978 <__fpcmp_parts_f>
    2396:	01 c0       	rjmp	.+2      	; 0x239a <__gesf2+0x58>
    2398:	8f ef       	ldi	r24, 0xFF	; 255
    239a:	68 96       	adiw	r28, 0x18	; 24
    239c:	e6 e0       	ldi	r30, 0x06	; 6
    239e:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__epilogue_restores__+0x18>

000023a2 <__ltsf2>:
    23a2:	a8 e1       	ldi	r26, 0x18	; 24
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e7 ed       	ldi	r30, 0xD7	; 215
    23a8:	f1 e1       	ldi	r31, 0x11	; 17
    23aa:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__prologue_saves__+0x18>
    23ae:	69 83       	std	Y+1, r22	; 0x01
    23b0:	7a 83       	std	Y+2, r23	; 0x02
    23b2:	8b 83       	std	Y+3, r24	; 0x03
    23b4:	9c 83       	std	Y+4, r25	; 0x04
    23b6:	2d 83       	std	Y+5, r18	; 0x05
    23b8:	3e 83       	std	Y+6, r19	; 0x06
    23ba:	4f 83       	std	Y+7, r20	; 0x07
    23bc:	58 87       	std	Y+8, r21	; 0x08
    23be:	8e 01       	movw	r16, r28
    23c0:	07 5f       	subi	r16, 0xF7	; 247
    23c2:	1f 4f       	sbci	r17, 0xFF	; 255
    23c4:	ce 01       	movw	r24, r28
    23c6:	01 96       	adiw	r24, 0x01	; 1
    23c8:	b8 01       	movw	r22, r16
    23ca:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    23ce:	81 e1       	ldi	r24, 0x11	; 17
    23d0:	e8 2e       	mov	r14, r24
    23d2:	f1 2c       	mov	r15, r1
    23d4:	ec 0e       	add	r14, r28
    23d6:	fd 1e       	adc	r15, r29
    23d8:	ce 01       	movw	r24, r28
    23da:	05 96       	adiw	r24, 0x05	; 5
    23dc:	b7 01       	movw	r22, r14
    23de:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	82 30       	cpi	r24, 0x02	; 2
    23e6:	40 f0       	brcs	.+16     	; 0x23f8 <__ltsf2+0x56>
    23e8:	89 89       	ldd	r24, Y+17	; 0x11
    23ea:	82 30       	cpi	r24, 0x02	; 2
    23ec:	28 f0       	brcs	.+10     	; 0x23f8 <__ltsf2+0x56>
    23ee:	c8 01       	movw	r24, r16
    23f0:	b7 01       	movw	r22, r14
    23f2:	0e 94 bc 14 	call	0x2978	; 0x2978 <__fpcmp_parts_f>
    23f6:	01 c0       	rjmp	.+2      	; 0x23fa <__ltsf2+0x58>
    23f8:	81 e0       	ldi	r24, 0x01	; 1
    23fa:	68 96       	adiw	r28, 0x18	; 24
    23fc:	e6 e0       	ldi	r30, 0x06	; 6
    23fe:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__epilogue_restores__+0x18>

00002402 <__floatsisf>:
    2402:	a8 e0       	ldi	r26, 0x08	; 8
    2404:	b0 e0       	ldi	r27, 0x00	; 0
    2406:	e7 e0       	ldi	r30, 0x07	; 7
    2408:	f2 e1       	ldi	r31, 0x12	; 18
    240a:	0c 94 47 25 	jmp	0x4a8e	; 0x4a8e <__prologue_saves__+0x18>
    240e:	7b 01       	movw	r14, r22
    2410:	8c 01       	movw	r16, r24
    2412:	83 e0       	ldi	r24, 0x03	; 3
    2414:	89 83       	std	Y+1, r24	; 0x01
    2416:	d8 01       	movw	r26, r16
    2418:	c7 01       	movw	r24, r14
    241a:	88 27       	eor	r24, r24
    241c:	b7 fd       	sbrc	r27, 7
    241e:	83 95       	inc	r24
    2420:	99 27       	eor	r25, r25
    2422:	aa 27       	eor	r26, r26
    2424:	bb 27       	eor	r27, r27
    2426:	28 2f       	mov	r18, r24
    2428:	8a 83       	std	Y+2, r24	; 0x02
    242a:	e1 14       	cp	r14, r1
    242c:	f1 04       	cpc	r15, r1
    242e:	01 05       	cpc	r16, r1
    2430:	11 05       	cpc	r17, r1
    2432:	19 f4       	brne	.+6      	; 0x243a <__floatsisf+0x38>
    2434:	82 e0       	ldi	r24, 0x02	; 2
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	37 c0       	rjmp	.+110    	; 0x24a8 <__floatsisf+0xa6>
    243a:	8e e1       	ldi	r24, 0x1E	; 30
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	9c 83       	std	Y+4, r25	; 0x04
    2440:	8b 83       	std	Y+3, r24	; 0x03
    2442:	22 23       	and	r18, r18
    2444:	89 f0       	breq	.+34     	; 0x2468 <__floatsisf+0x66>
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	e8 16       	cp	r14, r24
    244a:	80 e0       	ldi	r24, 0x00	; 0
    244c:	f8 06       	cpc	r15, r24
    244e:	80 e0       	ldi	r24, 0x00	; 0
    2450:	08 07       	cpc	r16, r24
    2452:	80 e8       	ldi	r24, 0x80	; 128
    2454:	18 07       	cpc	r17, r24
    2456:	69 f1       	breq	.+90     	; 0x24b2 <__floatsisf+0xb0>
    2458:	10 95       	com	r17
    245a:	00 95       	com	r16
    245c:	f0 94       	com	r15
    245e:	e0 94       	com	r14
    2460:	e1 1c       	adc	r14, r1
    2462:	f1 1c       	adc	r15, r1
    2464:	01 1d       	adc	r16, r1
    2466:	11 1d       	adc	r17, r1
    2468:	ed 82       	std	Y+5, r14	; 0x05
    246a:	fe 82       	std	Y+6, r15	; 0x06
    246c:	0f 83       	std	Y+7, r16	; 0x07
    246e:	18 87       	std	Y+8, r17	; 0x08
    2470:	c8 01       	movw	r24, r16
    2472:	b7 01       	movw	r22, r14
    2474:	0e 94 2b 13 	call	0x2656	; 0x2656 <__clzsi2>
    2478:	9c 01       	movw	r18, r24
    247a:	21 50       	subi	r18, 0x01	; 1
    247c:	30 40       	sbci	r19, 0x00	; 0
    247e:	12 16       	cp	r1, r18
    2480:	13 06       	cpc	r1, r19
    2482:	94 f4       	brge	.+36     	; 0x24a8 <__floatsisf+0xa6>
    2484:	02 2e       	mov	r0, r18
    2486:	04 c0       	rjmp	.+8      	; 0x2490 <__floatsisf+0x8e>
    2488:	ee 0c       	add	r14, r14
    248a:	ff 1c       	adc	r15, r15
    248c:	00 1f       	adc	r16, r16
    248e:	11 1f       	adc	r17, r17
    2490:	0a 94       	dec	r0
    2492:	d2 f7       	brpl	.-12     	; 0x2488 <__floatsisf+0x86>
    2494:	ed 82       	std	Y+5, r14	; 0x05
    2496:	fe 82       	std	Y+6, r15	; 0x06
    2498:	0f 83       	std	Y+7, r16	; 0x07
    249a:	18 87       	std	Y+8, r17	; 0x08
    249c:	8e e1       	ldi	r24, 0x1E	; 30
    249e:	90 e0       	ldi	r25, 0x00	; 0
    24a0:	82 1b       	sub	r24, r18
    24a2:	93 0b       	sbc	r25, r19
    24a4:	9c 83       	std	Y+4, r25	; 0x04
    24a6:	8b 83       	std	Y+3, r24	; 0x03
    24a8:	ce 01       	movw	r24, r28
    24aa:	01 96       	adiw	r24, 0x01	; 1
    24ac:	0e 94 85 13 	call	0x270a	; 0x270a <__pack_f>
    24b0:	04 c0       	rjmp	.+8      	; 0x24ba <__floatsisf+0xb8>
    24b2:	60 e0       	ldi	r22, 0x00	; 0
    24b4:	70 e0       	ldi	r23, 0x00	; 0
    24b6:	80 e0       	ldi	r24, 0x00	; 0
    24b8:	9f ec       	ldi	r25, 0xCF	; 207
    24ba:	28 96       	adiw	r28, 0x08	; 8
    24bc:	e6 e0       	ldi	r30, 0x06	; 6
    24be:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__epilogue_restores__+0x18>

000024c2 <__fixsfsi>:
    24c2:	ac e0       	ldi	r26, 0x0C	; 12
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e7 e6       	ldi	r30, 0x67	; 103
    24c8:	f2 e1       	ldi	r31, 0x12	; 18
    24ca:	0c 94 4b 25 	jmp	0x4a96	; 0x4a96 <__prologue_saves__+0x20>
    24ce:	69 83       	std	Y+1, r22	; 0x01
    24d0:	7a 83       	std	Y+2, r23	; 0x02
    24d2:	8b 83       	std	Y+3, r24	; 0x03
    24d4:	9c 83       	std	Y+4, r25	; 0x04
    24d6:	ce 01       	movw	r24, r28
    24d8:	01 96       	adiw	r24, 0x01	; 1
    24da:	be 01       	movw	r22, r28
    24dc:	6b 5f       	subi	r22, 0xFB	; 251
    24de:	7f 4f       	sbci	r23, 0xFF	; 255
    24e0:	0e 94 53 14 	call	0x28a6	; 0x28a6 <__unpack_f>
    24e4:	8d 81       	ldd	r24, Y+5	; 0x05
    24e6:	82 30       	cpi	r24, 0x02	; 2
    24e8:	81 f1       	breq	.+96     	; 0x254a <__fixsfsi+0x88>
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	70 f1       	brcs	.+92     	; 0x254a <__fixsfsi+0x88>
    24ee:	84 30       	cpi	r24, 0x04	; 4
    24f0:	21 f4       	brne	.+8      	; 0x24fa <__fixsfsi+0x38>
    24f2:	8e 81       	ldd	r24, Y+6	; 0x06
    24f4:	88 23       	and	r24, r24
    24f6:	69 f1       	breq	.+90     	; 0x2552 <__fixsfsi+0x90>
    24f8:	0a c0       	rjmp	.+20     	; 0x250e <__fixsfsi+0x4c>
    24fa:	2f 81       	ldd	r18, Y+7	; 0x07
    24fc:	38 85       	ldd	r19, Y+8	; 0x08
    24fe:	37 fd       	sbrc	r19, 7
    2500:	24 c0       	rjmp	.+72     	; 0x254a <__fixsfsi+0x88>
    2502:	6e 81       	ldd	r22, Y+6	; 0x06
    2504:	2f 31       	cpi	r18, 0x1F	; 31
    2506:	31 05       	cpc	r19, r1
    2508:	3c f0       	brlt	.+14     	; 0x2518 <__fixsfsi+0x56>
    250a:	66 23       	and	r22, r22
    250c:	11 f1       	breq	.+68     	; 0x2552 <__fixsfsi+0x90>
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e0       	ldi	r20, 0x00	; 0
    2514:	50 e8       	ldi	r21, 0x80	; 128
    2516:	21 c0       	rjmp	.+66     	; 0x255a <__fixsfsi+0x98>
    2518:	8e e1       	ldi	r24, 0x1E	; 30
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	82 1b       	sub	r24, r18
    251e:	93 0b       	sbc	r25, r19
    2520:	29 85       	ldd	r18, Y+9	; 0x09
    2522:	3a 85       	ldd	r19, Y+10	; 0x0a
    2524:	4b 85       	ldd	r20, Y+11	; 0x0b
    2526:	5c 85       	ldd	r21, Y+12	; 0x0c
    2528:	04 c0       	rjmp	.+8      	; 0x2532 <__fixsfsi+0x70>
    252a:	56 95       	lsr	r21
    252c:	47 95       	ror	r20
    252e:	37 95       	ror	r19
    2530:	27 95       	ror	r18
    2532:	8a 95       	dec	r24
    2534:	d2 f7       	brpl	.-12     	; 0x252a <__fixsfsi+0x68>
    2536:	66 23       	and	r22, r22
    2538:	81 f0       	breq	.+32     	; 0x255a <__fixsfsi+0x98>
    253a:	50 95       	com	r21
    253c:	40 95       	com	r20
    253e:	30 95       	com	r19
    2540:	21 95       	neg	r18
    2542:	3f 4f       	sbci	r19, 0xFF	; 255
    2544:	4f 4f       	sbci	r20, 0xFF	; 255
    2546:	5f 4f       	sbci	r21, 0xFF	; 255
    2548:	08 c0       	rjmp	.+16     	; 0x255a <__fixsfsi+0x98>
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	a9 01       	movw	r20, r18
    2550:	04 c0       	rjmp	.+8      	; 0x255a <__fixsfsi+0x98>
    2552:	2f ef       	ldi	r18, 0xFF	; 255
    2554:	3f ef       	ldi	r19, 0xFF	; 255
    2556:	4f ef       	ldi	r20, 0xFF	; 255
    2558:	5f e7       	ldi	r21, 0x7F	; 127
    255a:	b9 01       	movw	r22, r18
    255c:	ca 01       	movw	r24, r20
    255e:	2c 96       	adiw	r28, 0x0c	; 12
    2560:	e2 e0       	ldi	r30, 0x02	; 2
    2562:	0c 94 67 25 	jmp	0x4ace	; 0x4ace <__epilogue_restores__+0x20>

00002566 <__floatunsisf>:
    2566:	a8 e0       	ldi	r26, 0x08	; 8
    2568:	b0 e0       	ldi	r27, 0x00	; 0
    256a:	e9 eb       	ldi	r30, 0xB9	; 185
    256c:	f2 e1       	ldi	r31, 0x12	; 18
    256e:	0c 94 45 25 	jmp	0x4a8a	; 0x4a8a <__prologue_saves__+0x14>
    2572:	7b 01       	movw	r14, r22
    2574:	8c 01       	movw	r16, r24
    2576:	1a 82       	std	Y+2, r1	; 0x02
    2578:	61 15       	cp	r22, r1
    257a:	71 05       	cpc	r23, r1
    257c:	81 05       	cpc	r24, r1
    257e:	91 05       	cpc	r25, r1
    2580:	19 f4       	brne	.+6      	; 0x2588 <__floatunsisf+0x22>
    2582:	82 e0       	ldi	r24, 0x02	; 2
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	5f c0       	rjmp	.+190    	; 0x2646 <__floatunsisf+0xe0>
    2588:	83 e0       	ldi	r24, 0x03	; 3
    258a:	89 83       	std	Y+1, r24	; 0x01
    258c:	8e e1       	ldi	r24, 0x1E	; 30
    258e:	c8 2e       	mov	r12, r24
    2590:	d1 2c       	mov	r13, r1
    2592:	dc 82       	std	Y+4, r13	; 0x04
    2594:	cb 82       	std	Y+3, r12	; 0x03
    2596:	ed 82       	std	Y+5, r14	; 0x05
    2598:	fe 82       	std	Y+6, r15	; 0x06
    259a:	0f 83       	std	Y+7, r16	; 0x07
    259c:	18 87       	std	Y+8, r17	; 0x08
    259e:	c8 01       	movw	r24, r16
    25a0:	b7 01       	movw	r22, r14
    25a2:	0e 94 2b 13 	call	0x2656	; 0x2656 <__clzsi2>
    25a6:	fc 01       	movw	r30, r24
    25a8:	31 97       	sbiw	r30, 0x01	; 1
    25aa:	f7 ff       	sbrs	r31, 7
    25ac:	3a c0       	rjmp	.+116    	; 0x2622 <__floatunsisf+0xbc>
    25ae:	aa 27       	eor	r26, r26
    25b0:	bb 27       	eor	r27, r27
    25b2:	ae 1b       	sub	r26, r30
    25b4:	bf 0b       	sbc	r27, r31
    25b6:	21 e0       	ldi	r18, 0x01	; 1
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e0       	ldi	r20, 0x00	; 0
    25bc:	50 e0       	ldi	r21, 0x00	; 0
    25be:	0a 2e       	mov	r0, r26
    25c0:	04 c0       	rjmp	.+8      	; 0x25ca <__floatunsisf+0x64>
    25c2:	22 0f       	add	r18, r18
    25c4:	33 1f       	adc	r19, r19
    25c6:	44 1f       	adc	r20, r20
    25c8:	55 1f       	adc	r21, r21
    25ca:	0a 94       	dec	r0
    25cc:	d2 f7       	brpl	.-12     	; 0x25c2 <__floatunsisf+0x5c>
    25ce:	21 50       	subi	r18, 0x01	; 1
    25d0:	30 40       	sbci	r19, 0x00	; 0
    25d2:	40 40       	sbci	r20, 0x00	; 0
    25d4:	50 40       	sbci	r21, 0x00	; 0
    25d6:	2e 21       	and	r18, r14
    25d8:	3f 21       	and	r19, r15
    25da:	40 23       	and	r20, r16
    25dc:	51 23       	and	r21, r17
    25de:	61 e0       	ldi	r22, 0x01	; 1
    25e0:	70 e0       	ldi	r23, 0x00	; 0
    25e2:	80 e0       	ldi	r24, 0x00	; 0
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	21 15       	cp	r18, r1
    25e8:	31 05       	cpc	r19, r1
    25ea:	41 05       	cpc	r20, r1
    25ec:	51 05       	cpc	r21, r1
    25ee:	19 f4       	brne	.+6      	; 0x25f6 <__floatunsisf+0x90>
    25f0:	60 e0       	ldi	r22, 0x00	; 0
    25f2:	70 e0       	ldi	r23, 0x00	; 0
    25f4:	cb 01       	movw	r24, r22
    25f6:	04 c0       	rjmp	.+8      	; 0x2600 <__floatunsisf+0x9a>
    25f8:	16 95       	lsr	r17
    25fa:	07 95       	ror	r16
    25fc:	f7 94       	ror	r15
    25fe:	e7 94       	ror	r14
    2600:	aa 95       	dec	r26
    2602:	d2 f7       	brpl	.-12     	; 0x25f8 <__floatunsisf+0x92>
    2604:	e6 2a       	or	r14, r22
    2606:	f7 2a       	or	r15, r23
    2608:	08 2b       	or	r16, r24
    260a:	19 2b       	or	r17, r25
    260c:	ed 82       	std	Y+5, r14	; 0x05
    260e:	fe 82       	std	Y+6, r15	; 0x06
    2610:	0f 83       	std	Y+7, r16	; 0x07
    2612:	18 87       	std	Y+8, r17	; 0x08
    2614:	8e e1       	ldi	r24, 0x1E	; 30
    2616:	90 e0       	ldi	r25, 0x00	; 0
    2618:	8e 1b       	sub	r24, r30
    261a:	9f 0b       	sbc	r25, r31
    261c:	9c 83       	std	Y+4, r25	; 0x04
    261e:	8b 83       	std	Y+3, r24	; 0x03
    2620:	12 c0       	rjmp	.+36     	; 0x2646 <__floatunsisf+0xe0>
    2622:	30 97       	sbiw	r30, 0x00	; 0
    2624:	81 f0       	breq	.+32     	; 0x2646 <__floatunsisf+0xe0>
    2626:	0e 2e       	mov	r0, r30
    2628:	04 c0       	rjmp	.+8      	; 0x2632 <__floatunsisf+0xcc>
    262a:	ee 0c       	add	r14, r14
    262c:	ff 1c       	adc	r15, r15
    262e:	00 1f       	adc	r16, r16
    2630:	11 1f       	adc	r17, r17
    2632:	0a 94       	dec	r0
    2634:	d2 f7       	brpl	.-12     	; 0x262a <__floatunsisf+0xc4>
    2636:	ed 82       	std	Y+5, r14	; 0x05
    2638:	fe 82       	std	Y+6, r15	; 0x06
    263a:	0f 83       	std	Y+7, r16	; 0x07
    263c:	18 87       	std	Y+8, r17	; 0x08
    263e:	ce 1a       	sub	r12, r30
    2640:	df 0a       	sbc	r13, r31
    2642:	dc 82       	std	Y+4, r13	; 0x04
    2644:	cb 82       	std	Y+3, r12	; 0x03
    2646:	ce 01       	movw	r24, r28
    2648:	01 96       	adiw	r24, 0x01	; 1
    264a:	0e 94 85 13 	call	0x270a	; 0x270a <__pack_f>
    264e:	28 96       	adiw	r28, 0x08	; 8
    2650:	e8 e0       	ldi	r30, 0x08	; 8
    2652:	0c 94 61 25 	jmp	0x4ac2	; 0x4ac2 <__epilogue_restores__+0x14>

00002656 <__clzsi2>:
    2656:	af 92       	push	r10
    2658:	bf 92       	push	r11
    265a:	cf 92       	push	r12
    265c:	df 92       	push	r13
    265e:	ef 92       	push	r14
    2660:	ff 92       	push	r15
    2662:	0f 93       	push	r16
    2664:	1f 93       	push	r17
    2666:	7b 01       	movw	r14, r22
    2668:	8c 01       	movw	r16, r24
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	e8 16       	cp	r14, r24
    266e:	80 e0       	ldi	r24, 0x00	; 0
    2670:	f8 06       	cpc	r15, r24
    2672:	81 e0       	ldi	r24, 0x01	; 1
    2674:	08 07       	cpc	r16, r24
    2676:	80 e0       	ldi	r24, 0x00	; 0
    2678:	18 07       	cpc	r17, r24
    267a:	58 f4       	brcc	.+22     	; 0x2692 <__clzsi2+0x3c>
    267c:	ef ef       	ldi	r30, 0xFF	; 255
    267e:	ee 16       	cp	r14, r30
    2680:	f1 04       	cpc	r15, r1
    2682:	01 05       	cpc	r16, r1
    2684:	11 05       	cpc	r17, r1
    2686:	09 f0       	breq	.+2      	; 0x268a <__clzsi2+0x34>
    2688:	90 f4       	brcc	.+36     	; 0x26ae <__clzsi2+0x58>
    268a:	80 e0       	ldi	r24, 0x00	; 0
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	dc 01       	movw	r26, r24
    2690:	17 c0       	rjmp	.+46     	; 0x26c0 <__clzsi2+0x6a>
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	ef 16       	cp	r14, r31
    2696:	f0 e0       	ldi	r31, 0x00	; 0
    2698:	ff 06       	cpc	r15, r31
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	0f 07       	cpc	r16, r31
    269e:	f1 e0       	ldi	r31, 0x01	; 1
    26a0:	1f 07       	cpc	r17, r31
    26a2:	50 f4       	brcc	.+20     	; 0x26b8 <__clzsi2+0x62>
    26a4:	80 e1       	ldi	r24, 0x10	; 16
    26a6:	90 e0       	ldi	r25, 0x00	; 0
    26a8:	a0 e0       	ldi	r26, 0x00	; 0
    26aa:	b0 e0       	ldi	r27, 0x00	; 0
    26ac:	09 c0       	rjmp	.+18     	; 0x26c0 <__clzsi2+0x6a>
    26ae:	88 e0       	ldi	r24, 0x08	; 8
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	a0 e0       	ldi	r26, 0x00	; 0
    26b4:	b0 e0       	ldi	r27, 0x00	; 0
    26b6:	04 c0       	rjmp	.+8      	; 0x26c0 <__clzsi2+0x6a>
    26b8:	88 e1       	ldi	r24, 0x18	; 24
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	a0 e0       	ldi	r26, 0x00	; 0
    26be:	b0 e0       	ldi	r27, 0x00	; 0
    26c0:	20 e2       	ldi	r18, 0x20	; 32
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	40 e0       	ldi	r20, 0x00	; 0
    26c6:	50 e0       	ldi	r21, 0x00	; 0
    26c8:	28 1b       	sub	r18, r24
    26ca:	39 0b       	sbc	r19, r25
    26cc:	4a 0b       	sbc	r20, r26
    26ce:	5b 0b       	sbc	r21, r27
    26d0:	57 01       	movw	r10, r14
    26d2:	68 01       	movw	r12, r16
    26d4:	04 c0       	rjmp	.+8      	; 0x26de <__clzsi2+0x88>
    26d6:	d6 94       	lsr	r13
    26d8:	c7 94       	ror	r12
    26da:	b7 94       	ror	r11
    26dc:	a7 94       	ror	r10
    26de:	8a 95       	dec	r24
    26e0:	d2 f7       	brpl	.-12     	; 0x26d6 <__clzsi2+0x80>
    26e2:	d6 01       	movw	r26, r12
    26e4:	c5 01       	movw	r24, r10
    26e6:	82 59       	subi	r24, 0x92	; 146
    26e8:	9e 4f       	sbci	r25, 0xFE	; 254
    26ea:	fc 01       	movw	r30, r24
    26ec:	80 81       	ld	r24, Z
    26ee:	28 1b       	sub	r18, r24
    26f0:	31 09       	sbc	r19, r1
    26f2:	41 09       	sbc	r20, r1
    26f4:	51 09       	sbc	r21, r1
    26f6:	c9 01       	movw	r24, r18
    26f8:	1f 91       	pop	r17
    26fa:	0f 91       	pop	r16
    26fc:	ff 90       	pop	r15
    26fe:	ef 90       	pop	r14
    2700:	df 90       	pop	r13
    2702:	cf 90       	pop	r12
    2704:	bf 90       	pop	r11
    2706:	af 90       	pop	r10
    2708:	08 95       	ret

0000270a <__pack_f>:
    270a:	ef 92       	push	r14
    270c:	ff 92       	push	r15
    270e:	0f 93       	push	r16
    2710:	1f 93       	push	r17
    2712:	cf 93       	push	r28
    2714:	df 93       	push	r29
    2716:	fc 01       	movw	r30, r24
    2718:	24 81       	ldd	r18, Z+4	; 0x04
    271a:	35 81       	ldd	r19, Z+5	; 0x05
    271c:	46 81       	ldd	r20, Z+6	; 0x06
    271e:	57 81       	ldd	r21, Z+7	; 0x07
    2720:	61 81       	ldd	r22, Z+1	; 0x01
    2722:	80 81       	ld	r24, Z
    2724:	82 30       	cpi	r24, 0x02	; 2
    2726:	20 f4       	brcc	.+8      	; 0x2730 <__pack_f+0x26>
    2728:	40 61       	ori	r20, 0x10	; 16
    272a:	ef ef       	ldi	r30, 0xFF	; 255
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	a3 c0       	rjmp	.+326    	; 0x2876 <__pack_f+0x16c>
    2730:	84 30       	cpi	r24, 0x04	; 4
    2732:	09 f4       	brne	.+2      	; 0x2736 <__pack_f+0x2c>
    2734:	9b c0       	rjmp	.+310    	; 0x286c <__pack_f+0x162>
    2736:	82 30       	cpi	r24, 0x02	; 2
    2738:	09 f4       	brne	.+2      	; 0x273c <__pack_f+0x32>
    273a:	92 c0       	rjmp	.+292    	; 0x2860 <__pack_f+0x156>
    273c:	21 15       	cp	r18, r1
    273e:	31 05       	cpc	r19, r1
    2740:	41 05       	cpc	r20, r1
    2742:	51 05       	cpc	r21, r1
    2744:	09 f4       	brne	.+2      	; 0x2748 <__pack_f+0x3e>
    2746:	8f c0       	rjmp	.+286    	; 0x2866 <__pack_f+0x15c>
    2748:	02 80       	ldd	r0, Z+2	; 0x02
    274a:	f3 81       	ldd	r31, Z+3	; 0x03
    274c:	e0 2d       	mov	r30, r0
    274e:	8f ef       	ldi	r24, 0xFF	; 255
    2750:	e2 38       	cpi	r30, 0x82	; 130
    2752:	f8 07       	cpc	r31, r24
    2754:	0c f0       	brlt	.+2      	; 0x2758 <__pack_f+0x4e>
    2756:	5a c0       	rjmp	.+180    	; 0x280c <__pack_f+0x102>
    2758:	c2 e8       	ldi	r28, 0x82	; 130
    275a:	df ef       	ldi	r29, 0xFF	; 255
    275c:	ce 1b       	sub	r28, r30
    275e:	df 0b       	sbc	r29, r31
    2760:	ca 31       	cpi	r28, 0x1A	; 26
    2762:	d1 05       	cpc	r29, r1
    2764:	6c f5       	brge	.+90     	; 0x27c0 <__pack_f+0xb6>
    2766:	79 01       	movw	r14, r18
    2768:	8a 01       	movw	r16, r20
    276a:	0c 2e       	mov	r0, r28
    276c:	04 c0       	rjmp	.+8      	; 0x2776 <__pack_f+0x6c>
    276e:	16 95       	lsr	r17
    2770:	07 95       	ror	r16
    2772:	f7 94       	ror	r15
    2774:	e7 94       	ror	r14
    2776:	0a 94       	dec	r0
    2778:	d2 f7       	brpl	.-12     	; 0x276e <__pack_f+0x64>
    277a:	81 e0       	ldi	r24, 0x01	; 1
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	a0 e0       	ldi	r26, 0x00	; 0
    2780:	b0 e0       	ldi	r27, 0x00	; 0
    2782:	0c 2e       	mov	r0, r28
    2784:	04 c0       	rjmp	.+8      	; 0x278e <__pack_f+0x84>
    2786:	88 0f       	add	r24, r24
    2788:	99 1f       	adc	r25, r25
    278a:	aa 1f       	adc	r26, r26
    278c:	bb 1f       	adc	r27, r27
    278e:	0a 94       	dec	r0
    2790:	d2 f7       	brpl	.-12     	; 0x2786 <__pack_f+0x7c>
    2792:	01 97       	sbiw	r24, 0x01	; 1
    2794:	a1 09       	sbc	r26, r1
    2796:	b1 09       	sbc	r27, r1
    2798:	82 23       	and	r24, r18
    279a:	93 23       	and	r25, r19
    279c:	a4 23       	and	r26, r20
    279e:	b5 23       	and	r27, r21
    27a0:	21 e0       	ldi	r18, 0x01	; 1
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	40 e0       	ldi	r20, 0x00	; 0
    27a6:	50 e0       	ldi	r21, 0x00	; 0
    27a8:	00 97       	sbiw	r24, 0x00	; 0
    27aa:	a1 05       	cpc	r26, r1
    27ac:	b1 05       	cpc	r27, r1
    27ae:	19 f4       	brne	.+6      	; 0x27b6 <__pack_f+0xac>
    27b0:	20 e0       	ldi	r18, 0x00	; 0
    27b2:	30 e0       	ldi	r19, 0x00	; 0
    27b4:	a9 01       	movw	r20, r18
    27b6:	2e 29       	or	r18, r14
    27b8:	3f 29       	or	r19, r15
    27ba:	40 2b       	or	r20, r16
    27bc:	51 2b       	or	r21, r17
    27be:	03 c0       	rjmp	.+6      	; 0x27c6 <__pack_f+0xbc>
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	a9 01       	movw	r20, r18
    27c6:	da 01       	movw	r26, r20
    27c8:	c9 01       	movw	r24, r18
    27ca:	8f 77       	andi	r24, 0x7F	; 127
    27cc:	90 70       	andi	r25, 0x00	; 0
    27ce:	a0 70       	andi	r26, 0x00	; 0
    27d0:	b0 70       	andi	r27, 0x00	; 0
    27d2:	80 34       	cpi	r24, 0x40	; 64
    27d4:	91 05       	cpc	r25, r1
    27d6:	a1 05       	cpc	r26, r1
    27d8:	b1 05       	cpc	r27, r1
    27da:	39 f4       	brne	.+14     	; 0x27ea <__pack_f+0xe0>
    27dc:	27 ff       	sbrs	r18, 7
    27de:	09 c0       	rjmp	.+18     	; 0x27f2 <__pack_f+0xe8>
    27e0:	20 5c       	subi	r18, 0xC0	; 192
    27e2:	3f 4f       	sbci	r19, 0xFF	; 255
    27e4:	4f 4f       	sbci	r20, 0xFF	; 255
    27e6:	5f 4f       	sbci	r21, 0xFF	; 255
    27e8:	04 c0       	rjmp	.+8      	; 0x27f2 <__pack_f+0xe8>
    27ea:	21 5c       	subi	r18, 0xC1	; 193
    27ec:	3f 4f       	sbci	r19, 0xFF	; 255
    27ee:	4f 4f       	sbci	r20, 0xFF	; 255
    27f0:	5f 4f       	sbci	r21, 0xFF	; 255
    27f2:	e1 e0       	ldi	r30, 0x01	; 1
    27f4:	f0 e0       	ldi	r31, 0x00	; 0
    27f6:	20 30       	cpi	r18, 0x00	; 0
    27f8:	80 e0       	ldi	r24, 0x00	; 0
    27fa:	38 07       	cpc	r19, r24
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	48 07       	cpc	r20, r24
    2800:	80 e4       	ldi	r24, 0x40	; 64
    2802:	58 07       	cpc	r21, r24
    2804:	28 f5       	brcc	.+74     	; 0x2850 <__pack_f+0x146>
    2806:	e0 e0       	ldi	r30, 0x00	; 0
    2808:	f0 e0       	ldi	r31, 0x00	; 0
    280a:	22 c0       	rjmp	.+68     	; 0x2850 <__pack_f+0x146>
    280c:	e0 38       	cpi	r30, 0x80	; 128
    280e:	f1 05       	cpc	r31, r1
    2810:	6c f5       	brge	.+90     	; 0x286c <__pack_f+0x162>
    2812:	e1 58       	subi	r30, 0x81	; 129
    2814:	ff 4f       	sbci	r31, 0xFF	; 255
    2816:	da 01       	movw	r26, r20
    2818:	c9 01       	movw	r24, r18
    281a:	8f 77       	andi	r24, 0x7F	; 127
    281c:	90 70       	andi	r25, 0x00	; 0
    281e:	a0 70       	andi	r26, 0x00	; 0
    2820:	b0 70       	andi	r27, 0x00	; 0
    2822:	80 34       	cpi	r24, 0x40	; 64
    2824:	91 05       	cpc	r25, r1
    2826:	a1 05       	cpc	r26, r1
    2828:	b1 05       	cpc	r27, r1
    282a:	39 f4       	brne	.+14     	; 0x283a <__pack_f+0x130>
    282c:	27 ff       	sbrs	r18, 7
    282e:	09 c0       	rjmp	.+18     	; 0x2842 <__pack_f+0x138>
    2830:	20 5c       	subi	r18, 0xC0	; 192
    2832:	3f 4f       	sbci	r19, 0xFF	; 255
    2834:	4f 4f       	sbci	r20, 0xFF	; 255
    2836:	5f 4f       	sbci	r21, 0xFF	; 255
    2838:	04 c0       	rjmp	.+8      	; 0x2842 <__pack_f+0x138>
    283a:	21 5c       	subi	r18, 0xC1	; 193
    283c:	3f 4f       	sbci	r19, 0xFF	; 255
    283e:	4f 4f       	sbci	r20, 0xFF	; 255
    2840:	5f 4f       	sbci	r21, 0xFF	; 255
    2842:	57 ff       	sbrs	r21, 7
    2844:	05 c0       	rjmp	.+10     	; 0x2850 <__pack_f+0x146>
    2846:	56 95       	lsr	r21
    2848:	47 95       	ror	r20
    284a:	37 95       	ror	r19
    284c:	27 95       	ror	r18
    284e:	31 96       	adiw	r30, 0x01	; 1
    2850:	87 e0       	ldi	r24, 0x07	; 7
    2852:	56 95       	lsr	r21
    2854:	47 95       	ror	r20
    2856:	37 95       	ror	r19
    2858:	27 95       	ror	r18
    285a:	8a 95       	dec	r24
    285c:	d1 f7       	brne	.-12     	; 0x2852 <__pack_f+0x148>
    285e:	0b c0       	rjmp	.+22     	; 0x2876 <__pack_f+0x16c>
    2860:	e0 e0       	ldi	r30, 0x00	; 0
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	05 c0       	rjmp	.+10     	; 0x2870 <__pack_f+0x166>
    2866:	e0 e0       	ldi	r30, 0x00	; 0
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	05 c0       	rjmp	.+10     	; 0x2876 <__pack_f+0x16c>
    286c:	ef ef       	ldi	r30, 0xFF	; 255
    286e:	f0 e0       	ldi	r31, 0x00	; 0
    2870:	20 e0       	ldi	r18, 0x00	; 0
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	a9 01       	movw	r20, r18
    2876:	8e 2f       	mov	r24, r30
    2878:	87 95       	ror	r24
    287a:	88 27       	eor	r24, r24
    287c:	87 95       	ror	r24
    287e:	94 2f       	mov	r25, r20
    2880:	9f 77       	andi	r25, 0x7F	; 127
    2882:	67 95       	ror	r22
    2884:	66 27       	eor	r22, r22
    2886:	67 95       	ror	r22
    2888:	e6 95       	lsr	r30
    288a:	e2 2e       	mov	r14, r18
    288c:	a9 2f       	mov	r26, r25
    288e:	a8 2b       	or	r26, r24
    2890:	fe 2f       	mov	r31, r30
    2892:	f6 2b       	or	r31, r22
    2894:	62 2f       	mov	r22, r18
    2896:	73 2f       	mov	r23, r19
    2898:	8a 2f       	mov	r24, r26
    289a:	9f 2f       	mov	r25, r31
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	e6 e0       	ldi	r30, 0x06	; 6
    28a2:	0c 94 63 25 	jmp	0x4ac6	; 0x4ac6 <__epilogue_restores__+0x18>

000028a6 <__unpack_f>:
    28a6:	dc 01       	movw	r26, r24
    28a8:	fb 01       	movw	r30, r22
    28aa:	2c 91       	ld	r18, X
    28ac:	11 96       	adiw	r26, 0x01	; 1
    28ae:	3c 91       	ld	r19, X
    28b0:	11 97       	sbiw	r26, 0x01	; 1
    28b2:	12 96       	adiw	r26, 0x02	; 2
    28b4:	8c 91       	ld	r24, X
    28b6:	12 97       	sbiw	r26, 0x02	; 2
    28b8:	48 2f       	mov	r20, r24
    28ba:	4f 77       	andi	r20, 0x7F	; 127
    28bc:	50 e0       	ldi	r21, 0x00	; 0
    28be:	98 2f       	mov	r25, r24
    28c0:	99 1f       	adc	r25, r25
    28c2:	99 27       	eor	r25, r25
    28c4:	99 1f       	adc	r25, r25
    28c6:	13 96       	adiw	r26, 0x03	; 3
    28c8:	6c 91       	ld	r22, X
    28ca:	13 97       	sbiw	r26, 0x03	; 3
    28cc:	86 2f       	mov	r24, r22
    28ce:	88 0f       	add	r24, r24
    28d0:	89 2b       	or	r24, r25
    28d2:	90 e0       	ldi	r25, 0x00	; 0
    28d4:	66 1f       	adc	r22, r22
    28d6:	66 27       	eor	r22, r22
    28d8:	66 1f       	adc	r22, r22
    28da:	61 83       	std	Z+1, r22	; 0x01
    28dc:	00 97       	sbiw	r24, 0x00	; 0
    28de:	39 f5       	brne	.+78     	; 0x292e <__unpack_f+0x88>
    28e0:	21 15       	cp	r18, r1
    28e2:	31 05       	cpc	r19, r1
    28e4:	41 05       	cpc	r20, r1
    28e6:	51 05       	cpc	r21, r1
    28e8:	11 f4       	brne	.+4      	; 0x28ee <__unpack_f+0x48>
    28ea:	82 e0       	ldi	r24, 0x02	; 2
    28ec:	29 c0       	rjmp	.+82     	; 0x2940 <__unpack_f+0x9a>
    28ee:	82 e8       	ldi	r24, 0x82	; 130
    28f0:	9f ef       	ldi	r25, 0xFF	; 255
    28f2:	93 83       	std	Z+3, r25	; 0x03
    28f4:	82 83       	std	Z+2, r24	; 0x02
    28f6:	67 e0       	ldi	r22, 0x07	; 7
    28f8:	22 0f       	add	r18, r18
    28fa:	33 1f       	adc	r19, r19
    28fc:	44 1f       	adc	r20, r20
    28fe:	55 1f       	adc	r21, r21
    2900:	6a 95       	dec	r22
    2902:	d1 f7       	brne	.-12     	; 0x28f8 <__unpack_f+0x52>
    2904:	83 e0       	ldi	r24, 0x03	; 3
    2906:	80 83       	st	Z, r24
    2908:	09 c0       	rjmp	.+18     	; 0x291c <__unpack_f+0x76>
    290a:	22 0f       	add	r18, r18
    290c:	33 1f       	adc	r19, r19
    290e:	44 1f       	adc	r20, r20
    2910:	55 1f       	adc	r21, r21
    2912:	82 81       	ldd	r24, Z+2	; 0x02
    2914:	93 81       	ldd	r25, Z+3	; 0x03
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	93 83       	std	Z+3, r25	; 0x03
    291a:	82 83       	std	Z+2, r24	; 0x02
    291c:	20 30       	cpi	r18, 0x00	; 0
    291e:	80 e0       	ldi	r24, 0x00	; 0
    2920:	38 07       	cpc	r19, r24
    2922:	80 e0       	ldi	r24, 0x00	; 0
    2924:	48 07       	cpc	r20, r24
    2926:	80 e4       	ldi	r24, 0x40	; 64
    2928:	58 07       	cpc	r21, r24
    292a:	78 f3       	brcs	.-34     	; 0x290a <__unpack_f+0x64>
    292c:	20 c0       	rjmp	.+64     	; 0x296e <__unpack_f+0xc8>
    292e:	8f 3f       	cpi	r24, 0xFF	; 255
    2930:	91 05       	cpc	r25, r1
    2932:	79 f4       	brne	.+30     	; 0x2952 <__unpack_f+0xac>
    2934:	21 15       	cp	r18, r1
    2936:	31 05       	cpc	r19, r1
    2938:	41 05       	cpc	r20, r1
    293a:	51 05       	cpc	r21, r1
    293c:	19 f4       	brne	.+6      	; 0x2944 <__unpack_f+0x9e>
    293e:	84 e0       	ldi	r24, 0x04	; 4
    2940:	80 83       	st	Z, r24
    2942:	08 95       	ret
    2944:	44 ff       	sbrs	r20, 4
    2946:	03 c0       	rjmp	.+6      	; 0x294e <__unpack_f+0xa8>
    2948:	81 e0       	ldi	r24, 0x01	; 1
    294a:	80 83       	st	Z, r24
    294c:	10 c0       	rjmp	.+32     	; 0x296e <__unpack_f+0xc8>
    294e:	10 82       	st	Z, r1
    2950:	0e c0       	rjmp	.+28     	; 0x296e <__unpack_f+0xc8>
    2952:	8f 57       	subi	r24, 0x7F	; 127
    2954:	90 40       	sbci	r25, 0x00	; 0
    2956:	93 83       	std	Z+3, r25	; 0x03
    2958:	82 83       	std	Z+2, r24	; 0x02
    295a:	83 e0       	ldi	r24, 0x03	; 3
    295c:	80 83       	st	Z, r24
    295e:	87 e0       	ldi	r24, 0x07	; 7
    2960:	22 0f       	add	r18, r18
    2962:	33 1f       	adc	r19, r19
    2964:	44 1f       	adc	r20, r20
    2966:	55 1f       	adc	r21, r21
    2968:	8a 95       	dec	r24
    296a:	d1 f7       	brne	.-12     	; 0x2960 <__unpack_f+0xba>
    296c:	50 64       	ori	r21, 0x40	; 64
    296e:	24 83       	std	Z+4, r18	; 0x04
    2970:	35 83       	std	Z+5, r19	; 0x05
    2972:	46 83       	std	Z+6, r20	; 0x06
    2974:	57 83       	std	Z+7, r21	; 0x07
    2976:	08 95       	ret

00002978 <__fpcmp_parts_f>:
    2978:	fc 01       	movw	r30, r24
    297a:	db 01       	movw	r26, r22
    297c:	90 81       	ld	r25, Z
    297e:	92 30       	cpi	r25, 0x02	; 2
    2980:	08 f4       	brcc	.+2      	; 0x2984 <__fpcmp_parts_f+0xc>
    2982:	49 c0       	rjmp	.+146    	; 0x2a16 <__fpcmp_parts_f+0x9e>
    2984:	8c 91       	ld	r24, X
    2986:	82 30       	cpi	r24, 0x02	; 2
    2988:	08 f4       	brcc	.+2      	; 0x298c <__fpcmp_parts_f+0x14>
    298a:	45 c0       	rjmp	.+138    	; 0x2a16 <__fpcmp_parts_f+0x9e>
    298c:	94 30       	cpi	r25, 0x04	; 4
    298e:	51 f4       	brne	.+20     	; 0x29a4 <__fpcmp_parts_f+0x2c>
    2990:	61 81       	ldd	r22, Z+1	; 0x01
    2992:	84 30       	cpi	r24, 0x04	; 4
    2994:	b1 f5       	brne	.+108    	; 0x2a02 <__fpcmp_parts_f+0x8a>
    2996:	11 96       	adiw	r26, 0x01	; 1
    2998:	2c 91       	ld	r18, X
    299a:	11 97       	sbiw	r26, 0x01	; 1
    299c:	30 e0       	ldi	r19, 0x00	; 0
    299e:	26 1b       	sub	r18, r22
    29a0:	31 09       	sbc	r19, r1
    29a2:	41 c0       	rjmp	.+130    	; 0x2a26 <__fpcmp_parts_f+0xae>
    29a4:	84 30       	cpi	r24, 0x04	; 4
    29a6:	21 f0       	breq	.+8      	; 0x29b0 <__fpcmp_parts_f+0x38>
    29a8:	92 30       	cpi	r25, 0x02	; 2
    29aa:	41 f4       	brne	.+16     	; 0x29bc <__fpcmp_parts_f+0x44>
    29ac:	82 30       	cpi	r24, 0x02	; 2
    29ae:	b1 f1       	breq	.+108    	; 0x2a1c <__fpcmp_parts_f+0xa4>
    29b0:	11 96       	adiw	r26, 0x01	; 1
    29b2:	8c 91       	ld	r24, X
    29b4:	11 97       	sbiw	r26, 0x01	; 1
    29b6:	88 23       	and	r24, r24
    29b8:	a1 f1       	breq	.+104    	; 0x2a22 <__fpcmp_parts_f+0xaa>
    29ba:	2d c0       	rjmp	.+90     	; 0x2a16 <__fpcmp_parts_f+0x9e>
    29bc:	61 81       	ldd	r22, Z+1	; 0x01
    29be:	82 30       	cpi	r24, 0x02	; 2
    29c0:	01 f1       	breq	.+64     	; 0x2a02 <__fpcmp_parts_f+0x8a>
    29c2:	11 96       	adiw	r26, 0x01	; 1
    29c4:	8c 91       	ld	r24, X
    29c6:	11 97       	sbiw	r26, 0x01	; 1
    29c8:	68 17       	cp	r22, r24
    29ca:	d9 f4       	brne	.+54     	; 0x2a02 <__fpcmp_parts_f+0x8a>
    29cc:	22 81       	ldd	r18, Z+2	; 0x02
    29ce:	33 81       	ldd	r19, Z+3	; 0x03
    29d0:	12 96       	adiw	r26, 0x02	; 2
    29d2:	8d 91       	ld	r24, X+
    29d4:	9c 91       	ld	r25, X
    29d6:	13 97       	sbiw	r26, 0x03	; 3
    29d8:	82 17       	cp	r24, r18
    29da:	93 07       	cpc	r25, r19
    29dc:	94 f0       	brlt	.+36     	; 0x2a02 <__fpcmp_parts_f+0x8a>
    29de:	28 17       	cp	r18, r24
    29e0:	39 07       	cpc	r19, r25
    29e2:	bc f0       	brlt	.+46     	; 0x2a12 <__fpcmp_parts_f+0x9a>
    29e4:	24 81       	ldd	r18, Z+4	; 0x04
    29e6:	35 81       	ldd	r19, Z+5	; 0x05
    29e8:	46 81       	ldd	r20, Z+6	; 0x06
    29ea:	57 81       	ldd	r21, Z+7	; 0x07
    29ec:	14 96       	adiw	r26, 0x04	; 4
    29ee:	8d 91       	ld	r24, X+
    29f0:	9d 91       	ld	r25, X+
    29f2:	0d 90       	ld	r0, X+
    29f4:	bc 91       	ld	r27, X
    29f6:	a0 2d       	mov	r26, r0
    29f8:	82 17       	cp	r24, r18
    29fa:	93 07       	cpc	r25, r19
    29fc:	a4 07       	cpc	r26, r20
    29fe:	b5 07       	cpc	r27, r21
    2a00:	18 f4       	brcc	.+6      	; 0x2a08 <__fpcmp_parts_f+0x90>
    2a02:	66 23       	and	r22, r22
    2a04:	41 f0       	breq	.+16     	; 0x2a16 <__fpcmp_parts_f+0x9e>
    2a06:	0d c0       	rjmp	.+26     	; 0x2a22 <__fpcmp_parts_f+0xaa>
    2a08:	28 17       	cp	r18, r24
    2a0a:	39 07       	cpc	r19, r25
    2a0c:	4a 07       	cpc	r20, r26
    2a0e:	5b 07       	cpc	r21, r27
    2a10:	28 f4       	brcc	.+10     	; 0x2a1c <__fpcmp_parts_f+0xa4>
    2a12:	66 23       	and	r22, r22
    2a14:	31 f0       	breq	.+12     	; 0x2a22 <__fpcmp_parts_f+0xaa>
    2a16:	21 e0       	ldi	r18, 0x01	; 1
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	05 c0       	rjmp	.+10     	; 0x2a26 <__fpcmp_parts_f+0xae>
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <__fpcmp_parts_f+0xae>
    2a22:	2f ef       	ldi	r18, 0xFF	; 255
    2a24:	3f ef       	ldi	r19, 0xFF	; 255
    2a26:	c9 01       	movw	r24, r18
    2a28:	08 95       	ret

00002a2a <analogReference>:
    2a2a:	80 93 74 02 	sts	0x0274, r24
    2a2e:	08 95       	ret

00002a30 <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2a30:	8e 30       	cpi	r24, 0x0E	; 14
    2a32:	08 f0       	brcs	.+2      	; 0x2a36 <analogRead+0x6>
    2a34:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2a36:	87 70       	andi	r24, 0x07	; 7
    2a38:	90 91 74 02 	lds	r25, 0x0274
    2a3c:	92 95       	swap	r25
    2a3e:	99 0f       	add	r25, r25
    2a40:	99 0f       	add	r25, r25
    2a42:	90 7c       	andi	r25, 0xC0	; 192
    2a44:	98 2b       	or	r25, r24
    2a46:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2a4a:	80 91 7a 00 	lds	r24, 0x007A
    2a4e:	80 64       	ori	r24, 0x40	; 64
    2a50:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2a54:	80 91 7a 00 	lds	r24, 0x007A
    2a58:	86 fd       	sbrc	r24, 6
    2a5a:	fc cf       	rjmp	.-8      	; 0x2a54 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2a5c:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    2a60:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2a64:	93 2f       	mov	r25, r19
    2a66:	80 e0       	ldi	r24, 0x00	; 0
    2a68:	30 e0       	ldi	r19, 0x00	; 0
    2a6a:	28 2b       	or	r18, r24
    2a6c:	39 2b       	or	r19, r25
}
    2a6e:	c9 01       	movw	r24, r18
    2a70:	08 95       	ret

00002a72 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2a72:	1f 93       	push	r17
    2a74:	cf 93       	push	r28
    2a76:	df 93       	push	r29
    2a78:	18 2f       	mov	r17, r24
    2a7a:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2a7c:	61 e0       	ldi	r22, 0x01	; 1
    2a7e:	0e 94 ae 16 	call	0x2d5c	; 0x2d5c <pinMode>
	if (val == 0)
    2a82:	20 97       	sbiw	r28, 0x00	; 0
    2a84:	09 f4       	brne	.+2      	; 0x2a88 <analogWrite+0x16>
    2a86:	4a c0       	rjmp	.+148    	; 0x2b1c <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    2a88:	cf 3f       	cpi	r28, 0xFF	; 255
    2a8a:	d1 05       	cpc	r29, r1
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <analogWrite+0x1e>
    2a8e:	49 c0       	rjmp	.+146    	; 0x2b22 <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2a90:	e1 2f       	mov	r30, r17
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	e2 55       	subi	r30, 0x52	; 82
    2a96:	ff 4f       	sbci	r31, 0xFF	; 255
    2a98:	e4 91       	lpm	r30, Z+
    2a9a:	e3 30       	cpi	r30, 0x03	; 3
    2a9c:	c1 f0       	breq	.+48     	; 0x2ace <analogWrite+0x5c>
    2a9e:	e4 30       	cpi	r30, 0x04	; 4
    2aa0:	28 f4       	brcc	.+10     	; 0x2aac <analogWrite+0x3a>
    2aa2:	e1 30       	cpi	r30, 0x01	; 1
    2aa4:	51 f0       	breq	.+20     	; 0x2aba <analogWrite+0x48>
    2aa6:	e2 30       	cpi	r30, 0x02	; 2
    2aa8:	b1 f5       	brne	.+108    	; 0x2b16 <analogWrite+0xa4>
    2aaa:	0c c0       	rjmp	.+24     	; 0x2ac4 <analogWrite+0x52>
    2aac:	e6 30       	cpi	r30, 0x06	; 6
    2aae:	19 f1       	breq	.+70     	; 0x2af6 <analogWrite+0x84>
    2ab0:	e7 30       	cpi	r30, 0x07	; 7
    2ab2:	49 f1       	breq	.+82     	; 0x2b06 <analogWrite+0x94>
    2ab4:	e4 30       	cpi	r30, 0x04	; 4
    2ab6:	79 f5       	brne	.+94     	; 0x2b16 <analogWrite+0xa4>
    2ab8:	14 c0       	rjmp	.+40     	; 0x2ae2 <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2aba:	84 b5       	in	r24, 0x24	; 36
    2abc:	80 68       	ori	r24, 0x80	; 128
    2abe:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2ac0:	c7 bd       	out	0x27, r28	; 39
				break;
    2ac2:	33 c0       	rjmp	.+102    	; 0x2b2a <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2ac4:	84 b5       	in	r24, 0x24	; 36
    2ac6:	80 62       	ori	r24, 0x20	; 32
    2ac8:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2aca:	c8 bd       	out	0x28, r28	; 40
				break;
    2acc:	2e c0       	rjmp	.+92     	; 0x2b2a <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2ace:	80 91 80 00 	lds	r24, 0x0080
    2ad2:	80 68       	ori	r24, 0x80	; 128
    2ad4:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    2ad8:	d0 93 89 00 	sts	0x0089, r29
    2adc:	c0 93 88 00 	sts	0x0088, r28
				break;
    2ae0:	24 c0       	rjmp	.+72     	; 0x2b2a <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2ae2:	80 91 80 00 	lds	r24, 0x0080
    2ae6:	80 62       	ori	r24, 0x20	; 32
    2ae8:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    2aec:	d0 93 8b 00 	sts	0x008B, r29
    2af0:	c0 93 8a 00 	sts	0x008A, r28
				break;
    2af4:	1a c0       	rjmp	.+52     	; 0x2b2a <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2af6:	80 91 b0 00 	lds	r24, 0x00B0
    2afa:	80 68       	ori	r24, 0x80	; 128
    2afc:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    2b00:	c0 93 b3 00 	sts	0x00B3, r28
				break;
    2b04:	12 c0       	rjmp	.+36     	; 0x2b2a <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2b06:	80 91 b0 00 	lds	r24, 0x00B0
    2b0a:	80 62       	ori	r24, 0x20	; 32
    2b0c:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    2b10:	c0 93 b4 00 	sts	0x00B4, r28
				break;
    2b14:	0a c0       	rjmp	.+20     	; 0x2b2a <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2b16:	c0 38       	cpi	r28, 0x80	; 128
    2b18:	d1 05       	cpc	r29, r1
    2b1a:	1c f4       	brge	.+6      	; 0x2b22 <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    2b1c:	81 2f       	mov	r24, r17
    2b1e:	60 e0       	ldi	r22, 0x00	; 0
    2b20:	02 c0       	rjmp	.+4      	; 0x2b26 <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    2b22:	81 2f       	mov	r24, r17
    2b24:	61 e0       	ldi	r22, 0x01	; 1
    2b26:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <digitalWrite>
				}
		}
	}
}
    2b2a:	df 91       	pop	r29
    2b2c:	cf 91       	pop	r28
    2b2e:	1f 91       	pop	r17
    2b30:	08 95       	ret

00002b32 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    2b32:	1f 92       	push	r1
    2b34:	0f 92       	push	r0
    2b36:	0f b6       	in	r0, 0x3f	; 63
    2b38:	0f 92       	push	r0
    2b3a:	11 24       	eor	r1, r1
    2b3c:	2f 93       	push	r18
    2b3e:	3f 93       	push	r19
    2b40:	8f 93       	push	r24
    2b42:	9f 93       	push	r25
    2b44:	af 93       	push	r26
    2b46:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2b48:	80 91 63 03 	lds	r24, 0x0363
    2b4c:	90 91 64 03 	lds	r25, 0x0364
    2b50:	a0 91 65 03 	lds	r26, 0x0365
    2b54:	b0 91 66 03 	lds	r27, 0x0366
	unsigned char f = timer0_fract;
    2b58:	30 91 67 03 	lds	r19, 0x0367

	m += MILLIS_INC;
    2b5c:	01 96       	adiw	r24, 0x01	; 1
    2b5e:	a1 1d       	adc	r26, r1
    2b60:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    2b62:	23 2f       	mov	r18, r19
    2b64:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2b66:	2d 37       	cpi	r18, 0x7D	; 125
    2b68:	20 f0       	brcs	.+8      	; 0x2b72 <__vector_16+0x40>
		f -= FRACT_MAX;
    2b6a:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    2b6c:	01 96       	adiw	r24, 0x01	; 1
    2b6e:	a1 1d       	adc	r26, r1
    2b70:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2b72:	20 93 67 03 	sts	0x0367, r18
	timer0_millis = m;
    2b76:	80 93 63 03 	sts	0x0363, r24
    2b7a:	90 93 64 03 	sts	0x0364, r25
    2b7e:	a0 93 65 03 	sts	0x0365, r26
    2b82:	b0 93 66 03 	sts	0x0366, r27
	timer0_overflow_count++;
    2b86:	80 91 5f 03 	lds	r24, 0x035F
    2b8a:	90 91 60 03 	lds	r25, 0x0360
    2b8e:	a0 91 61 03 	lds	r26, 0x0361
    2b92:	b0 91 62 03 	lds	r27, 0x0362
    2b96:	01 96       	adiw	r24, 0x01	; 1
    2b98:	a1 1d       	adc	r26, r1
    2b9a:	b1 1d       	adc	r27, r1
    2b9c:	80 93 5f 03 	sts	0x035F, r24
    2ba0:	90 93 60 03 	sts	0x0360, r25
    2ba4:	a0 93 61 03 	sts	0x0361, r26
    2ba8:	b0 93 62 03 	sts	0x0362, r27
}
    2bac:	bf 91       	pop	r27
    2bae:	af 91       	pop	r26
    2bb0:	9f 91       	pop	r25
    2bb2:	8f 91       	pop	r24
    2bb4:	3f 91       	pop	r19
    2bb6:	2f 91       	pop	r18
    2bb8:	0f 90       	pop	r0
    2bba:	0f be       	out	0x3f, r0	; 63
    2bbc:	0f 90       	pop	r0
    2bbe:	1f 90       	pop	r1
    2bc0:	18 95       	reti

00002bc2 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2bc2:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2bc4:	f8 94       	cli
	m = timer0_millis;
    2bc6:	20 91 63 03 	lds	r18, 0x0363
    2bca:	30 91 64 03 	lds	r19, 0x0364
    2bce:	40 91 65 03 	lds	r20, 0x0365
    2bd2:	50 91 66 03 	lds	r21, 0x0366
	SREG = oldSREG;
    2bd6:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    2bd8:	b9 01       	movw	r22, r18
    2bda:	ca 01       	movw	r24, r20
    2bdc:	08 95       	ret

00002bde <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2bde:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    2be0:	f8 94       	cli
	m = timer0_overflow_count;
    2be2:	20 91 5f 03 	lds	r18, 0x035F
    2be6:	30 91 60 03 	lds	r19, 0x0360
    2bea:	40 91 61 03 	lds	r20, 0x0361
    2bee:	50 91 62 03 	lds	r21, 0x0362
#if defined(TCNT0)
	t = TCNT0;
    2bf2:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2bf4:	a8 9b       	sbis	0x15, 0	; 21
    2bf6:	06 c0       	rjmp	.+12     	; 0x2c04 <micros+0x26>
    2bf8:	8f 3f       	cpi	r24, 0xFF	; 255
    2bfa:	21 f0       	breq	.+8      	; 0x2c04 <micros+0x26>
		m++;
    2bfc:	2f 5f       	subi	r18, 0xFF	; 255
    2bfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2c00:	4f 4f       	sbci	r20, 0xFF	; 255
    2c02:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2c04:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2c06:	54 2f       	mov	r21, r20
    2c08:	43 2f       	mov	r20, r19
    2c0a:	32 2f       	mov	r19, r18
    2c0c:	22 27       	eor	r18, r18
    2c0e:	28 0f       	add	r18, r24
    2c10:	31 1d       	adc	r19, r1
    2c12:	41 1d       	adc	r20, r1
    2c14:	51 1d       	adc	r21, r1
    2c16:	82 e0       	ldi	r24, 0x02	; 2
    2c18:	22 0f       	add	r18, r18
    2c1a:	33 1f       	adc	r19, r19
    2c1c:	44 1f       	adc	r20, r20
    2c1e:	55 1f       	adc	r21, r21
    2c20:	8a 95       	dec	r24
    2c22:	d1 f7       	brne	.-12     	; 0x2c18 <micros+0x3a>
}
    2c24:	b9 01       	movw	r22, r18
    2c26:	ca 01       	movw	r24, r20
    2c28:	08 95       	ret

00002c2a <delay>:

void delay(unsigned long ms)
{
    2c2a:	ef 92       	push	r14
    2c2c:	ff 92       	push	r15
    2c2e:	0f 93       	push	r16
    2c30:	1f 93       	push	r17
    2c32:	cf 93       	push	r28
    2c34:	df 93       	push	r29
    2c36:	7b 01       	movw	r14, r22
    2c38:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    2c3a:	0e 94 ef 15 	call	0x2bde	; 0x2bde <micros>
    2c3e:	eb 01       	movw	r28, r22

	while (ms > 0) {
    2c40:	0f c0       	rjmp	.+30     	; 0x2c60 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
    2c42:	0e 94 ef 15 	call	0x2bde	; 0x2bde <micros>
    2c46:	6c 1b       	sub	r22, r28
    2c48:	7d 0b       	sbc	r23, r29
    2c4a:	83 e0       	ldi	r24, 0x03	; 3
    2c4c:	68 3e       	cpi	r22, 0xE8	; 232
    2c4e:	78 07       	cpc	r23, r24
    2c50:	38 f0       	brcs	.+14     	; 0x2c60 <delay+0x36>
			ms--;
    2c52:	08 94       	sec
    2c54:	e1 08       	sbc	r14, r1
    2c56:	f1 08       	sbc	r15, r1
    2c58:	01 09       	sbc	r16, r1
    2c5a:	11 09       	sbc	r17, r1
			start += 1000;
    2c5c:	c8 51       	subi	r28, 0x18	; 24
    2c5e:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    2c60:	e1 14       	cp	r14, r1
    2c62:	f1 04       	cpc	r15, r1
    2c64:	01 05       	cpc	r16, r1
    2c66:	11 05       	cpc	r17, r1
    2c68:	61 f7       	brne	.-40     	; 0x2c42 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2c6a:	df 91       	pop	r29
    2c6c:	cf 91       	pop	r28
    2c6e:	1f 91       	pop	r17
    2c70:	0f 91       	pop	r16
    2c72:	ff 90       	pop	r15
    2c74:	ef 90       	pop	r14
    2c76:	08 95       	ret

00002c78 <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    2c78:	01 97       	sbiw	r24, 0x01	; 1
    2c7a:	39 f0       	breq	.+14     	; 0x2c8a <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    2c7c:	88 0f       	add	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	88 0f       	add	r24, r24
    2c82:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    2c84:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	f1 f7       	brne	.-4      	; 0x2c86 <delayMicroseconds+0xe>
    2c8a:	08 95       	ret

00002c8c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2c8c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2c8e:	84 b5       	in	r24, 0x24	; 36
    2c90:	82 60       	ori	r24, 0x02	; 2
    2c92:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2c94:	84 b5       	in	r24, 0x24	; 36
    2c96:	81 60       	ori	r24, 0x01	; 1
    2c98:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2c9a:	85 b5       	in	r24, 0x25	; 37
    2c9c:	82 60       	ori	r24, 0x02	; 2
    2c9e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2ca0:	85 b5       	in	r24, 0x25	; 37
    2ca2:	81 60       	ori	r24, 0x01	; 1
    2ca4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2ca6:	ee e6       	ldi	r30, 0x6E	; 110
    2ca8:	f0 e0       	ldi	r31, 0x00	; 0
    2caa:	80 81       	ld	r24, Z
    2cac:	81 60       	ori	r24, 0x01	; 1
    2cae:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2cb0:	e1 e8       	ldi	r30, 0x81	; 129
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2cb6:	80 81       	ld	r24, Z
    2cb8:	82 60       	ori	r24, 0x02	; 2
    2cba:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2cbc:	80 81       	ld	r24, Z
    2cbe:	81 60       	ori	r24, 0x01	; 1
    2cc0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2cc2:	e0 e8       	ldi	r30, 0x80	; 128
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	80 81       	ld	r24, Z
    2cc8:	81 60       	ori	r24, 0x01	; 1
    2cca:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2ccc:	e1 eb       	ldi	r30, 0xB1	; 177
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	84 60       	ori	r24, 0x04	; 4
    2cd4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2cd6:	e0 eb       	ldi	r30, 0xB0	; 176
    2cd8:	f0 e0       	ldi	r31, 0x00	; 0
    2cda:	80 81       	ld	r24, Z
    2cdc:	81 60       	ori	r24, 0x01	; 1
    2cde:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2ce0:	ea e7       	ldi	r30, 0x7A	; 122
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	80 81       	ld	r24, Z
    2ce6:	84 60       	ori	r24, 0x04	; 4
    2ce8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2cea:	80 81       	ld	r24, Z
    2cec:	82 60       	ori	r24, 0x02	; 2
    2cee:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2cf0:	80 81       	ld	r24, Z
    2cf2:	81 60       	ori	r24, 0x01	; 1
    2cf4:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2cf6:	80 81       	ld	r24, Z
    2cf8:	80 68       	ori	r24, 0x80	; 128
    2cfa:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2cfc:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    2d00:	08 95       	ret

00002d02 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2d02:	83 30       	cpi	r24, 0x03	; 3
    2d04:	71 f0       	breq	.+28     	; 0x2d22 <turnOffPWM+0x20>
    2d06:	84 30       	cpi	r24, 0x04	; 4
    2d08:	28 f4       	brcc	.+10     	; 0x2d14 <turnOffPWM+0x12>
    2d0a:	81 30       	cpi	r24, 0x01	; 1
    2d0c:	a1 f0       	breq	.+40     	; 0x2d36 <turnOffPWM+0x34>
    2d0e:	82 30       	cpi	r24, 0x02	; 2
    2d10:	21 f5       	brne	.+72     	; 0x2d5a <turnOffPWM+0x58>
    2d12:	14 c0       	rjmp	.+40     	; 0x2d3c <turnOffPWM+0x3a>
    2d14:	86 30       	cpi	r24, 0x06	; 6
    2d16:	b1 f0       	breq	.+44     	; 0x2d44 <turnOffPWM+0x42>
    2d18:	87 30       	cpi	r24, 0x07	; 7
    2d1a:	d1 f0       	breq	.+52     	; 0x2d50 <turnOffPWM+0x4e>
    2d1c:	84 30       	cpi	r24, 0x04	; 4
    2d1e:	e9 f4       	brne	.+58     	; 0x2d5a <turnOffPWM+0x58>
    2d20:	04 c0       	rjmp	.+8      	; 0x2d2a <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2d22:	80 91 80 00 	lds	r24, 0x0080
    2d26:	8f 77       	andi	r24, 0x7F	; 127
    2d28:	03 c0       	rjmp	.+6      	; 0x2d30 <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2d2a:	80 91 80 00 	lds	r24, 0x0080
    2d2e:	8f 7d       	andi	r24, 0xDF	; 223
    2d30:	80 93 80 00 	sts	0x0080, r24
    2d34:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2d36:	84 b5       	in	r24, 0x24	; 36
    2d38:	8f 77       	andi	r24, 0x7F	; 127
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2d3c:	84 b5       	in	r24, 0x24	; 36
    2d3e:	8f 7d       	andi	r24, 0xDF	; 223
    2d40:	84 bd       	out	0x24, r24	; 36
    2d42:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2d44:	80 91 b0 00 	lds	r24, 0x00B0
    2d48:	8f 77       	andi	r24, 0x7F	; 127
    2d4a:	80 93 b0 00 	sts	0x00B0, r24
    2d4e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2d50:	80 91 b0 00 	lds	r24, 0x00B0
    2d54:	8f 7d       	andi	r24, 0xDF	; 223
    2d56:	80 93 b0 00 	sts	0x00B0, r24
    2d5a:	08 95       	ret

00002d5c <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	fc 01       	movw	r30, r24
    2d60:	e6 56       	subi	r30, 0x66	; 102
    2d62:	ff 4f       	sbci	r31, 0xFF	; 255
    2d64:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    2d66:	fc 01       	movw	r30, r24
    2d68:	ea 57       	subi	r30, 0x7A	; 122
    2d6a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d6c:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    2d6e:	ee 23       	and	r30, r30
    2d70:	c1 f0       	breq	.+48     	; 0x2da2 <pinMode+0x46>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2d72:	f0 e0       	ldi	r31, 0x00	; 0
    2d74:	ee 0f       	add	r30, r30
    2d76:	ff 1f       	adc	r31, r31
    2d78:	e8 59       	subi	r30, 0x98	; 152
    2d7a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d7c:	85 91       	lpm	r24, Z+
    2d7e:	94 91       	lpm	r25, Z+
    2d80:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
    2d82:	66 23       	and	r22, r22
    2d84:	41 f4       	brne	.+16     	; 0x2d96 <pinMode+0x3a>
		uint8_t oldSREG = SREG;
    2d86:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2d88:	f8 94       	cli
		*reg &= ~bit;
    2d8a:	8c 91       	ld	r24, X
    2d8c:	20 95       	com	r18
    2d8e:	82 23       	and	r24, r18
    2d90:	8c 93       	st	X, r24
		SREG = oldSREG;
    2d92:	9f bf       	out	0x3f, r25	; 63
    2d94:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    2d96:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2d98:	f8 94       	cli
		*reg |= bit;
    2d9a:	8c 91       	ld	r24, X
    2d9c:	82 2b       	or	r24, r18
    2d9e:	8c 93       	st	X, r24
		SREG = oldSREG;
    2da0:	9f bf       	out	0x3f, r25	; 63
    2da2:	08 95       	ret

00002da4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2da4:	0f 93       	push	r16
    2da6:	1f 93       	push	r17
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	0f 92       	push	r0
    2dae:	cd b7       	in	r28, 0x3d	; 61
    2db0:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    2db2:	28 2f       	mov	r18, r24
    2db4:	30 e0       	ldi	r19, 0x00	; 0
    2db6:	f9 01       	movw	r30, r18
    2db8:	e2 55       	subi	r30, 0x52	; 82
    2dba:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbc:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2dbe:	f9 01       	movw	r30, r18
    2dc0:	e6 56       	subi	r30, 0x66	; 102
    2dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc4:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    2dc6:	2a 57       	subi	r18, 0x7A	; 122
    2dc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2dca:	f9 01       	movw	r30, r18
    2dcc:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2dce:	00 23       	and	r16, r16
    2dd0:	d9 f0       	breq	.+54     	; 0x2e08 <digitalWrite+0x64>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2dd2:	88 23       	and	r24, r24
    2dd4:	21 f0       	breq	.+8      	; 0x2dde <digitalWrite+0x3a>
    2dd6:	69 83       	std	Y+1, r22	; 0x01
    2dd8:	0e 94 81 16 	call	0x2d02	; 0x2d02 <turnOffPWM>
    2ddc:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    2dde:	e0 2f       	mov	r30, r16
    2de0:	f0 e0       	ldi	r31, 0x00	; 0
    2de2:	ee 0f       	add	r30, r30
    2de4:	ff 1f       	adc	r31, r31
    2de6:	ee 58       	subi	r30, 0x8E	; 142
    2de8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dea:	85 91       	lpm	r24, Z+
    2dec:	94 91       	lpm	r25, Z+
    2dee:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    2df0:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2df2:	f8 94       	cli

	if (val == LOW) {
    2df4:	66 23       	and	r22, r22
    2df6:	21 f4       	brne	.+8      	; 0x2e00 <digitalWrite+0x5c>
		*out &= ~bit;
    2df8:	8c 91       	ld	r24, X
    2dfa:	10 95       	com	r17
    2dfc:	81 23       	and	r24, r17
    2dfe:	02 c0       	rjmp	.+4      	; 0x2e04 <digitalWrite+0x60>
	} else {
		*out |= bit;
    2e00:	8c 91       	ld	r24, X
    2e02:	81 2b       	or	r24, r17
    2e04:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    2e06:	9f bf       	out	0x3f, r25	; 63
}
    2e08:	0f 90       	pop	r0
    2e0a:	cf 91       	pop	r28
    2e0c:	df 91       	pop	r29
    2e0e:	1f 91       	pop	r17
    2e10:	0f 91       	pop	r16
    2e12:	08 95       	ret

00002e14 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2e14:	0f 93       	push	r16
    2e16:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    2e18:	28 2f       	mov	r18, r24
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	f9 01       	movw	r30, r18
    2e1e:	e2 55       	subi	r30, 0x52	; 82
    2e20:	ff 4f       	sbci	r31, 0xFF	; 255
    2e22:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2e24:	f9 01       	movw	r30, r18
    2e26:	e6 56       	subi	r30, 0x66	; 102
    2e28:	ff 4f       	sbci	r31, 0xFF	; 255
    2e2a:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    2e2c:	2a 57       	subi	r18, 0x7A	; 122
    2e2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2e30:	f9 01       	movw	r30, r18
    2e32:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    2e34:	11 23       	and	r17, r17
    2e36:	91 f0       	breq	.+36     	; 0x2e5c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2e38:	88 23       	and	r24, r24
    2e3a:	11 f0       	breq	.+4      	; 0x2e40 <digitalRead+0x2c>
    2e3c:	0e 94 81 16 	call	0x2d02	; 0x2d02 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2e40:	e1 2f       	mov	r30, r17
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	ee 0f       	add	r30, r30
    2e46:	ff 1f       	adc	r31, r31
    2e48:	e4 58       	subi	r30, 0x84	; 132
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	85 91       	lpm	r24, Z+
    2e4e:	94 91       	lpm	r25, Z+
    2e50:	dc 01       	movw	r26, r24
    2e52:	8c 91       	ld	r24, X
    2e54:	80 23       	and	r24, r16
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2e56:	21 e0       	ldi	r18, 0x01	; 1
    2e58:	30 e0       	ldi	r19, 0x00	; 0
    2e5a:	11 f4       	brne	.+4      	; 0x2e60 <digitalRead+0x4c>
    2e5c:	20 e0       	ldi	r18, 0x00	; 0
    2e5e:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2e60:	c9 01       	movw	r24, r18
    2e62:	1f 91       	pop	r17
    2e64:	0f 91       	pop	r16
    2e66:	08 95       	ret

00002e68 <_ZN6StringD1Ev>:
	*this = buf;
}

String::~String()
{
	free(buffer);
    2e68:	fc 01       	movw	r30, r24
    2e6a:	80 81       	ld	r24, Z
    2e6c:	91 81       	ldd	r25, Z+1	; 0x01
    2e6e:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <free>
}
    2e72:	08 95       	ret

00002e74 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
    2e74:	cf 93       	push	r28
    2e76:	df 93       	push	r29
    2e78:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    2e7a:	88 81       	ld	r24, Y
    2e7c:	99 81       	ldd	r25, Y+1	; 0x01
    2e7e:	00 97       	sbiw	r24, 0x00	; 0
    2e80:	11 f0       	breq	.+4      	; 0x2e86 <_ZN6String10invalidateEv+0x12>
    2e82:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <free>
	buffer = NULL;
    2e86:	19 82       	std	Y+1, r1	; 0x01
    2e88:	18 82       	st	Y, r1
	capacity = len = 0;
    2e8a:	1d 82       	std	Y+5, r1	; 0x05
    2e8c:	1c 82       	std	Y+4, r1	; 0x04
    2e8e:	1b 82       	std	Y+3, r1	; 0x03
    2e90:	1a 82       	std	Y+2, r1	; 0x02
}
    2e92:	df 91       	pop	r29
    2e94:	cf 91       	pop	r28
    2e96:	08 95       	ret

00002e98 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    2e98:	0f 93       	push	r16
    2e9a:	1f 93       	push	r17
    2e9c:	cf 93       	push	r28
    2e9e:	df 93       	push	r29
    2ea0:	ec 01       	movw	r28, r24
    2ea2:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2ea4:	6f 5f       	subi	r22, 0xFF	; 255
    2ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea8:	88 81       	ld	r24, Y
    2eaa:	99 81       	ldd	r25, Y+1	; 0x01
    2eac:	0e 94 27 27 	call	0x4e4e	; 0x4e4e <realloc>
	if (newbuffer) {
    2eb0:	00 97       	sbiw	r24, 0x00	; 0
    2eb2:	31 f0       	breq	.+12     	; 0x2ec0 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    2eb4:	99 83       	std	Y+1, r25	; 0x01
    2eb6:	88 83       	st	Y, r24
		capacity = maxStrLen;
    2eb8:	1b 83       	std	Y+3, r17	; 0x03
    2eba:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	01 c0       	rjmp	.+2      	; 0x2ec2 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    2ec0:	80 e0       	ldi	r24, 0x00	; 0
}
    2ec2:	df 91       	pop	r29
    2ec4:	cf 91       	pop	r28
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	08 95       	ret

00002ecc <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    2ecc:	cf 93       	push	r28
    2ece:	df 93       	push	r29
    2ed0:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    2ed2:	88 81       	ld	r24, Y
    2ed4:	99 81       	ldd	r25, Y+1	; 0x01
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	29 f0       	breq	.+10     	; 0x2ee4 <_ZN6String7reserveEj+0x18>
    2eda:	8a 81       	ldd	r24, Y+2	; 0x02
    2edc:	9b 81       	ldd	r25, Y+3	; 0x03
    2ede:	86 17       	cp	r24, r22
    2ee0:	97 07       	cpc	r25, r23
    2ee2:	78 f4       	brcc	.+30     	; 0x2f02 <_ZN6String7reserveEj+0x36>
	if (changeBuffer(size)) {
    2ee4:	ce 01       	movw	r24, r28
    2ee6:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <_ZN6String12changeBufferEj>
    2eea:	88 23       	and	r24, r24
    2eec:	41 f0       	breq	.+16     	; 0x2efe <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    2eee:	8c 81       	ldd	r24, Y+4	; 0x04
    2ef0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ef2:	00 97       	sbiw	r24, 0x00	; 0
    2ef4:	31 f4       	brne	.+12     	; 0x2f02 <_ZN6String7reserveEj+0x36>
    2ef6:	e8 81       	ld	r30, Y
    2ef8:	f9 81       	ldd	r31, Y+1	; 0x01
    2efa:	10 82       	st	Z, r1
    2efc:	02 c0       	rjmp	.+4      	; 0x2f02 <_ZN6String7reserveEj+0x36>
		return 1;
	}
	return 0;
    2efe:	80 e0       	ldi	r24, 0x00	; 0
    2f00:	01 c0       	rjmp	.+2      	; 0x2f04 <_ZN6String7reserveEj+0x38>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    2f04:	df 91       	pop	r29
    2f06:	cf 91       	pop	r28
    2f08:	08 95       	ret

00002f0a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    2f0a:	ef 92       	push	r14
    2f0c:	ff 92       	push	r15
    2f0e:	0f 93       	push	r16
    2f10:	1f 93       	push	r17
    2f12:	cf 93       	push	r28
    2f14:	df 93       	push	r29
    2f16:	ec 01       	movw	r28, r24
    2f18:	7b 01       	movw	r14, r22
    2f1a:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    2f1c:	ba 01       	movw	r22, r20
    2f1e:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_ZN6String7reserveEj>
    2f22:	88 23       	and	r24, r24
    2f24:	21 f4       	brne	.+8      	; 0x2f2e <_ZN6String4copyEPKcj+0x24>
		invalidate();
    2f26:	ce 01       	movw	r24, r28
    2f28:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
		return *this;
    2f2c:	07 c0       	rjmp	.+14     	; 0x2f3c <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    2f2e:	1d 83       	std	Y+5, r17	; 0x05
    2f30:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    2f32:	88 81       	ld	r24, Y
    2f34:	99 81       	ldd	r25, Y+1	; 0x01
    2f36:	b7 01       	movw	r22, r14
    2f38:	0e 94 60 28 	call	0x50c0	; 0x50c0 <strcpy>
	return *this;
}
    2f3c:	ce 01       	movw	r24, r28
    2f3e:	df 91       	pop	r29
    2f40:	cf 91       	pop	r28
    2f42:	1f 91       	pop	r17
    2f44:	0f 91       	pop	r16
    2f46:	ff 90       	pop	r15
    2f48:	ef 90       	pop	r14
    2f4a:	08 95       	ret

00002f4c <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    2f4c:	cf 93       	push	r28
    2f4e:	df 93       	push	r29
    2f50:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2f52:	11 82       	std	Z+1, r1	; 0x01
    2f54:	10 82       	st	Z, r1
	capacity = 0;
    2f56:	13 82       	std	Z+3, r1	; 0x03
    2f58:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2f5a:	15 82       	std	Z+5, r1	; 0x05
    2f5c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2f5e:	16 82       	std	Z+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    2f60:	61 15       	cp	r22, r1
    2f62:	71 05       	cpc	r23, r1
    2f64:	59 f0       	breq	.+22     	; 0x2f7c <_ZN6StringC1EPKc+0x30>
    2f66:	eb 01       	movw	r28, r22
    2f68:	09 90       	ld	r0, Y+
    2f6a:	00 20       	and	r0, r0
    2f6c:	e9 f7       	brne	.-6      	; 0x2f68 <_ZN6StringC1EPKc+0x1c>
    2f6e:	ae 01       	movw	r20, r28
    2f70:	41 50       	subi	r20, 0x01	; 1
    2f72:	50 40       	sbci	r21, 0x00	; 0
    2f74:	46 1b       	sub	r20, r22
    2f76:	57 0b       	sbc	r21, r23
    2f78:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <_ZN6String4copyEPKcj>
}
    2f7c:	df 91       	pop	r29
    2f7e:	cf 91       	pop	r28
    2f80:	08 95       	ret

00002f82 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    2f82:	ef 92       	push	r14
    2f84:	ff 92       	push	r15
    2f86:	cf 93       	push	r28
    2f88:	df 93       	push	r29
    2f8a:	ec 01       	movw	r28, r24
    2f8c:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    2f8e:	86 17       	cp	r24, r22
    2f90:	97 07       	cpc	r25, r23
    2f92:	61 f0       	breq	.+24     	; 0x2fac <_ZN6StringaSERKS_+0x2a>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    2f94:	60 81       	ld	r22, Z
    2f96:	71 81       	ldd	r23, Z+1	; 0x01
    2f98:	61 15       	cp	r22, r1
    2f9a:	71 05       	cpc	r23, r1
    2f9c:	29 f0       	breq	.+10     	; 0x2fa8 <_ZN6StringaSERKS_+0x26>
    2f9e:	44 81       	ldd	r20, Z+4	; 0x04
    2fa0:	55 81       	ldd	r21, Z+5	; 0x05
    2fa2:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <_ZN6String4copyEPKcj>
    2fa6:	02 c0       	rjmp	.+4      	; 0x2fac <_ZN6StringaSERKS_+0x2a>
	else invalidate();
    2fa8:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
	
	return *this;
}
    2fac:	ce 01       	movw	r24, r28
    2fae:	df 91       	pop	r29
    2fb0:	cf 91       	pop	r28
    2fb2:	ff 90       	pop	r15
    2fb4:	ef 90       	pop	r14
    2fb6:	08 95       	ret

00002fb8 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    2fb8:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2fba:	11 82       	std	Z+1, r1	; 0x01
    2fbc:	10 82       	st	Z, r1
	capacity = 0;
    2fbe:	13 82       	std	Z+3, r1	; 0x03
    2fc0:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2fc2:	15 82       	std	Z+5, r1	; 0x05
    2fc4:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2fc6:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    2fc8:	0e 94 c1 17 	call	0x2f82	; 0x2f82 <_ZN6StringaSERKS_>
}
    2fcc:	08 95       	ret

00002fce <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    2fce:	0f 93       	push	r16
    2fd0:	1f 93       	push	r17
    2fd2:	8c 01       	movw	r16, r24
	if (cstr) copy(cstr, strlen(cstr));
    2fd4:	61 15       	cp	r22, r1
    2fd6:	71 05       	cpc	r23, r1
    2fd8:	61 f0       	breq	.+24     	; 0x2ff2 <_ZN6StringaSEPKc+0x24>
    2fda:	db 01       	movw	r26, r22
    2fdc:	0d 90       	ld	r0, X+
    2fde:	00 20       	and	r0, r0
    2fe0:	e9 f7       	brne	.-6      	; 0x2fdc <_ZN6StringaSEPKc+0xe>
    2fe2:	ad 01       	movw	r20, r26
    2fe4:	41 50       	subi	r20, 0x01	; 1
    2fe6:	50 40       	sbci	r21, 0x00	; 0
    2fe8:	46 1b       	sub	r20, r22
    2fea:	57 0b       	sbc	r21, r23
    2fec:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <_ZN6String4copyEPKcj>
    2ff0:	02 c0       	rjmp	.+4      	; 0x2ff6 <_ZN6StringaSEPKc+0x28>
	else invalidate();
    2ff2:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
	
	return *this;
}
    2ff6:	c8 01       	movw	r24, r16
    2ff8:	1f 91       	pop	r17
    2ffa:	0f 91       	pop	r16
    2ffc:	08 95       	ret

00002ffe <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    2ffe:	ef 92       	push	r14
    3000:	ff 92       	push	r15
    3002:	0f 93       	push	r16
    3004:	1f 93       	push	r17
    3006:	df 93       	push	r29
    3008:	cf 93       	push	r28
    300a:	cd b7       	in	r28, 0x3d	; 61
    300c:	de b7       	in	r29, 0x3e	; 62
    300e:	a1 97       	sbiw	r28, 0x21	; 33
    3010:	0f b6       	in	r0, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	0f be       	out	0x3f, r0	; 63
    3018:	cd bf       	out	0x3d, r28	; 61
    301a:	7c 01       	movw	r14, r24
    301c:	cb 01       	movw	r24, r22
    301e:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3020:	f7 01       	movw	r30, r14
    3022:	11 82       	std	Z+1, r1	; 0x01
    3024:	10 82       	st	Z, r1
	capacity = 0;
    3026:	13 82       	std	Z+3, r1	; 0x03
    3028:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    302a:	15 82       	std	Z+5, r1	; 0x05
    302c:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    302e:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    3030:	8e 01       	movw	r16, r28
    3032:	0f 5f       	subi	r16, 0xFF	; 255
    3034:	1f 4f       	sbci	r17, 0xFF	; 255
    3036:	a8 01       	movw	r20, r16
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	0e 94 13 29 	call	0x5226	; 0x5226 <ultoa>
	*this = buf;
    303e:	c7 01       	movw	r24, r14
    3040:	b8 01       	movw	r22, r16
    3042:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_ZN6StringaSEPKc>
}
    3046:	a1 96       	adiw	r28, 0x21	; 33
    3048:	0f b6       	in	r0, 0x3f	; 63
    304a:	f8 94       	cli
    304c:	de bf       	out	0x3e, r29	; 62
    304e:	0f be       	out	0x3f, r0	; 63
    3050:	cd bf       	out	0x3d, r28	; 61
    3052:	cf 91       	pop	r28
    3054:	df 91       	pop	r29
    3056:	1f 91       	pop	r17
    3058:	0f 91       	pop	r16
    305a:	ff 90       	pop	r15
    305c:	ef 90       	pop	r14
    305e:	08 95       	ret

00003060 <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    3060:	ef 92       	push	r14
    3062:	ff 92       	push	r15
    3064:	0f 93       	push	r16
    3066:	1f 93       	push	r17
    3068:	df 93       	push	r29
    306a:	cf 93       	push	r28
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	a2 97       	sbiw	r28, 0x22	; 34
    3072:	0f b6       	in	r0, 0x3f	; 63
    3074:	f8 94       	cli
    3076:	de bf       	out	0x3e, r29	; 62
    3078:	0f be       	out	0x3f, r0	; 63
    307a:	cd bf       	out	0x3d, r28	; 61
    307c:	7c 01       	movw	r14, r24
    307e:	cb 01       	movw	r24, r22
    3080:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3082:	f7 01       	movw	r30, r14
    3084:	11 82       	std	Z+1, r1	; 0x01
    3086:	10 82       	st	Z, r1
	capacity = 0;
    3088:	13 82       	std	Z+3, r1	; 0x03
    308a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    308c:	15 82       	std	Z+5, r1	; 0x05
    308e:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3090:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    3092:	8e 01       	movw	r16, r28
    3094:	0f 5f       	subi	r16, 0xFF	; 255
    3096:	1f 4f       	sbci	r17, 0xFF	; 255
    3098:	a8 01       	movw	r20, r16
    309a:	30 e0       	ldi	r19, 0x00	; 0
    309c:	0e 94 ca 28 	call	0x5194	; 0x5194 <ltoa>
	*this = buf;
    30a0:	c7 01       	movw	r24, r14
    30a2:	b8 01       	movw	r22, r16
    30a4:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_ZN6StringaSEPKc>
}
    30a8:	a2 96       	adiw	r28, 0x22	; 34
    30aa:	0f b6       	in	r0, 0x3f	; 63
    30ac:	f8 94       	cli
    30ae:	de bf       	out	0x3e, r29	; 62
    30b0:	0f be       	out	0x3f, r0	; 63
    30b2:	cd bf       	out	0x3d, r28	; 61
    30b4:	cf 91       	pop	r28
    30b6:	df 91       	pop	r29
    30b8:	1f 91       	pop	r17
    30ba:	0f 91       	pop	r16
    30bc:	ff 90       	pop	r15
    30be:	ef 90       	pop	r14
    30c0:	08 95       	ret

000030c2 <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    30c2:	ef 92       	push	r14
    30c4:	ff 92       	push	r15
    30c6:	0f 93       	push	r16
    30c8:	1f 93       	push	r17
    30ca:	df 93       	push	r29
    30cc:	cf 93       	push	r28
    30ce:	cd b7       	in	r28, 0x3d	; 61
    30d0:	de b7       	in	r29, 0x3e	; 62
    30d2:	61 97       	sbiw	r28, 0x11	; 17
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	7c 01       	movw	r14, r24
    30e0:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    30e2:	f7 01       	movw	r30, r14
    30e4:	11 82       	std	Z+1, r1	; 0x01
    30e6:	10 82       	st	Z, r1
	capacity = 0;
    30e8:	13 82       	std	Z+3, r1	; 0x03
    30ea:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    30ec:	15 82       	std	Z+5, r1	; 0x05
    30ee:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    30f0:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    30f2:	8e 01       	movw	r16, r28
    30f4:	0f 5f       	subi	r16, 0xFF	; 255
    30f6:	1f 4f       	sbci	r17, 0xFF	; 255
    30f8:	b8 01       	movw	r22, r16
    30fa:	50 e0       	ldi	r21, 0x00	; 0
    30fc:	0e 94 38 29 	call	0x5270	; 0x5270 <utoa>
	*this = buf;
    3100:	c7 01       	movw	r24, r14
    3102:	b8 01       	movw	r22, r16
    3104:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_ZN6StringaSEPKc>
}
    3108:	61 96       	adiw	r28, 0x11	; 17
    310a:	0f b6       	in	r0, 0x3f	; 63
    310c:	f8 94       	cli
    310e:	de bf       	out	0x3e, r29	; 62
    3110:	0f be       	out	0x3f, r0	; 63
    3112:	cd bf       	out	0x3d, r28	; 61
    3114:	cf 91       	pop	r28
    3116:	df 91       	pop	r29
    3118:	1f 91       	pop	r17
    311a:	0f 91       	pop	r16
    311c:	ff 90       	pop	r15
    311e:	ef 90       	pop	r14
    3120:	08 95       	ret

00003122 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    3122:	ef 92       	push	r14
    3124:	ff 92       	push	r15
    3126:	0f 93       	push	r16
    3128:	1f 93       	push	r17
    312a:	df 93       	push	r29
    312c:	cf 93       	push	r28
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
    3132:	62 97       	sbiw	r28, 0x12	; 18
    3134:	0f b6       	in	r0, 0x3f	; 63
    3136:	f8 94       	cli
    3138:	de bf       	out	0x3e, r29	; 62
    313a:	0f be       	out	0x3f, r0	; 63
    313c:	cd bf       	out	0x3d, r28	; 61
    313e:	7c 01       	movw	r14, r24
    3140:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3142:	f7 01       	movw	r30, r14
    3144:	11 82       	std	Z+1, r1	; 0x01
    3146:	10 82       	st	Z, r1
	capacity = 0;
    3148:	13 82       	std	Z+3, r1	; 0x03
    314a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    314c:	15 82       	std	Z+5, r1	; 0x05
    314e:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3150:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    3152:	8e 01       	movw	r16, r28
    3154:	0f 5f       	subi	r16, 0xFF	; 255
    3156:	1f 4f       	sbci	r17, 0xFF	; 255
    3158:	b8 01       	movw	r22, r16
    315a:	50 e0       	ldi	r21, 0x00	; 0
    315c:	0e 94 a9 28 	call	0x5152	; 0x5152 <itoa>
	*this = buf;
    3160:	c7 01       	movw	r24, r14
    3162:	b8 01       	movw	r22, r16
    3164:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_ZN6StringaSEPKc>
}
    3168:	62 96       	adiw	r28, 0x12	; 18
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	cd bf       	out	0x3d, r28	; 61
    3174:	cf 91       	pop	r28
    3176:	df 91       	pop	r29
    3178:	1f 91       	pop	r17
    317a:	0f 91       	pop	r16
    317c:	ff 90       	pop	r15
    317e:	ef 90       	pop	r14
    3180:	08 95       	ret

00003182 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    3182:	ef 92       	push	r14
    3184:	ff 92       	push	r15
    3186:	0f 93       	push	r16
    3188:	1f 93       	push	r17
    318a:	df 93       	push	r29
    318c:	cf 93       	push	r28
    318e:	cd b7       	in	r28, 0x3d	; 61
    3190:	de b7       	in	r29, 0x3e	; 62
    3192:	29 97       	sbiw	r28, 0x09	; 9
    3194:	0f b6       	in	r0, 0x3f	; 63
    3196:	f8 94       	cli
    3198:	de bf       	out	0x3e, r29	; 62
    319a:	0f be       	out	0x3f, r0	; 63
    319c:	cd bf       	out	0x3d, r28	; 61
    319e:	7c 01       	movw	r14, r24
    31a0:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    31a2:	f7 01       	movw	r30, r14
    31a4:	11 82       	std	Z+1, r1	; 0x01
    31a6:	10 82       	st	Z, r1
	capacity = 0;
    31a8:	13 82       	std	Z+3, r1	; 0x03
    31aa:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    31ac:	15 82       	std	Z+5, r1	; 0x05
    31ae:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    31b0:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    31b2:	90 e0       	ldi	r25, 0x00	; 0
    31b4:	8e 01       	movw	r16, r28
    31b6:	0f 5f       	subi	r16, 0xFF	; 255
    31b8:	1f 4f       	sbci	r17, 0xFF	; 255
    31ba:	b8 01       	movw	r22, r16
    31bc:	50 e0       	ldi	r21, 0x00	; 0
    31be:	0e 94 38 29 	call	0x5270	; 0x5270 <utoa>
	*this = buf;
    31c2:	c7 01       	movw	r24, r14
    31c4:	b8 01       	movw	r22, r16
    31c6:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_ZN6StringaSEPKc>
}
    31ca:	29 96       	adiw	r28, 0x09	; 9
    31cc:	0f b6       	in	r0, 0x3f	; 63
    31ce:	f8 94       	cli
    31d0:	de bf       	out	0x3e, r29	; 62
    31d2:	0f be       	out	0x3f, r0	; 63
    31d4:	cd bf       	out	0x3d, r28	; 61
    31d6:	cf 91       	pop	r28
    31d8:	df 91       	pop	r29
    31da:	1f 91       	pop	r17
    31dc:	0f 91       	pop	r16
    31de:	ff 90       	pop	r15
    31e0:	ef 90       	pop	r14
    31e2:	08 95       	ret

000031e4 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    31e4:	df 93       	push	r29
    31e6:	cf 93       	push	r28
    31e8:	00 d0       	rcall	.+0      	; 0x31ea <_ZN6StringC1Ec+0x6>
    31ea:	cd b7       	in	r28, 0x3d	; 61
    31ec:	de b7       	in	r29, 0x3e	; 62
    31ee:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    31f0:	11 82       	std	Z+1, r1	; 0x01
    31f2:	10 82       	st	Z, r1
	capacity = 0;
    31f4:	13 82       	std	Z+3, r1	; 0x03
    31f6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    31f8:	15 82       	std	Z+5, r1	; 0x05
    31fa:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    31fc:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    31fe:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    3200:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    3202:	be 01       	movw	r22, r28
    3204:	6f 5f       	subi	r22, 0xFF	; 255
    3206:	7f 4f       	sbci	r23, 0xFF	; 255
    3208:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_ZN6StringaSEPKc>
}
    320c:	0f 90       	pop	r0
    320e:	0f 90       	pop	r0
    3210:	cf 91       	pop	r28
    3212:	df 91       	pop	r29
    3214:	08 95       	ret

00003216 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    3216:	ef 92       	push	r14
    3218:	ff 92       	push	r15
    321a:	0f 93       	push	r16
    321c:	1f 93       	push	r17
    321e:	cf 93       	push	r28
    3220:	df 93       	push	r29
    3222:	ec 01       	movw	r28, r24
    3224:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
    3226:	0c 81       	ldd	r16, Y+4	; 0x04
    3228:	1d 81       	ldd	r17, Y+5	; 0x05
	if (!cstr) return 0;
    322a:	61 15       	cp	r22, r1
    322c:	71 05       	cpc	r23, r1
    322e:	b9 f0       	breq	.+46     	; 0x325e <_ZN6String6concatEPKcj+0x48>
	if (length == 0) return 1;
    3230:	41 15       	cp	r20, r1
    3232:	51 05       	cpc	r21, r1
    3234:	91 f0       	breq	.+36     	; 0x325a <_ZN6String6concatEPKcj+0x44>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    3236:	04 0f       	add	r16, r20
    3238:	15 1f       	adc	r17, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    323a:	b8 01       	movw	r22, r16
    323c:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_ZN6String7reserveEj>
    3240:	88 23       	and	r24, r24
    3242:	69 f0       	breq	.+26     	; 0x325e <_ZN6String6concatEPKcj+0x48>
	strcpy(buffer + len, cstr);
    3244:	28 81       	ld	r18, Y
    3246:	39 81       	ldd	r19, Y+1	; 0x01
    3248:	8c 81       	ldd	r24, Y+4	; 0x04
    324a:	9d 81       	ldd	r25, Y+5	; 0x05
    324c:	82 0f       	add	r24, r18
    324e:	93 1f       	adc	r25, r19
    3250:	b7 01       	movw	r22, r14
    3252:	0e 94 60 28 	call	0x50c0	; 0x50c0 <strcpy>
	len = newlen;
    3256:	1d 83       	std	Y+5, r17	; 0x05
    3258:	0c 83       	std	Y+4, r16	; 0x04

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
    325a:	81 e0       	ldi	r24, 0x01	; 1
    325c:	01 c0       	rjmp	.+2      	; 0x3260 <_ZN6String6concatEPKcj+0x4a>
	if (!reserve(newlen)) return 0;
    325e:	80 e0       	ldi	r24, 0x00	; 0
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	1f 91       	pop	r17
    3266:	0f 91       	pop	r16
    3268:	ff 90       	pop	r15
    326a:	ef 90       	pop	r14
    326c:	08 95       	ret

0000326e <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    326e:	fb 01       	movw	r30, r22
	return concat(s.buffer, s.len);
    3270:	60 81       	ld	r22, Z
    3272:	71 81       	ldd	r23, Z+1	; 0x01
    3274:	44 81       	ldd	r20, Z+4	; 0x04
    3276:	55 81       	ldd	r21, Z+5	; 0x05
    3278:	0e 94 0b 19 	call	0x3216	; 0x3216 <_ZN6String6concatEPKcj>
}
    327c:	08 95       	ret

0000327e <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    327e:	61 15       	cp	r22, r1
    3280:	71 05       	cpc	r23, r1
    3282:	61 f0       	breq	.+24     	; 0x329c <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
    3284:	db 01       	movw	r26, r22
    3286:	0d 90       	ld	r0, X+
    3288:	00 20       	and	r0, r0
    328a:	e9 f7       	brne	.-6      	; 0x3286 <_ZN6String6concatEPKc+0x8>
    328c:	ad 01       	movw	r20, r26
    328e:	41 50       	subi	r20, 0x01	; 1
    3290:	50 40       	sbci	r21, 0x00	; 0
    3292:	46 1b       	sub	r20, r22
    3294:	57 0b       	sbc	r21, r23
    3296:	0e 94 0b 19 	call	0x3216	; 0x3216 <_ZN6String6concatEPKcj>
    329a:	08 95       	ret
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    329c:	80 e0       	ldi	r24, 0x00	; 0
	return concat(cstr, strlen(cstr));
}
    329e:	08 95       	ret

000032a0 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    32a0:	df 93       	push	r29
    32a2:	cf 93       	push	r28
    32a4:	00 d0       	rcall	.+0      	; 0x32a6 <_ZN6String6concatEc+0x6>
    32a6:	cd b7       	in	r28, 0x3d	; 61
    32a8:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    32aa:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    32ac:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    32ae:	be 01       	movw	r22, r28
    32b0:	6f 5f       	subi	r22, 0xFF	; 255
    32b2:	7f 4f       	sbci	r23, 0xFF	; 255
    32b4:	41 e0       	ldi	r20, 0x01	; 1
    32b6:	50 e0       	ldi	r21, 0x00	; 0
    32b8:	0e 94 0b 19 	call	0x3216	; 0x3216 <_ZN6String6concatEPKcj>
}
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	cf 91       	pop	r28
    32c2:	df 91       	pop	r29
    32c4:	08 95       	ret

000032c6 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    32c6:	ef 92       	push	r14
    32c8:	ff 92       	push	r15
    32ca:	0f 93       	push	r16
    32cc:	1f 93       	push	r17
    32ce:	df 93       	push	r29
    32d0:	cf 93       	push	r28
    32d2:	00 d0       	rcall	.+0      	; 0x32d4 <_ZN6String6concatEh+0xe>
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <_ZN6String6concatEh+0x10>
    32d6:	cd b7       	in	r28, 0x3d	; 61
    32d8:	de b7       	in	r29, 0x3e	; 62
    32da:	7c 01       	movw	r14, r24
    32dc:	86 2f       	mov	r24, r22
	char buf[4];
	itoa(num, buf, 10);
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	8e 01       	movw	r16, r28
    32e2:	0f 5f       	subi	r16, 0xFF	; 255
    32e4:	1f 4f       	sbci	r17, 0xFF	; 255
    32e6:	b8 01       	movw	r22, r16
    32e8:	4a e0       	ldi	r20, 0x0A	; 10
    32ea:	50 e0       	ldi	r21, 0x00	; 0
    32ec:	0e 94 a9 28 	call	0x5152	; 0x5152 <itoa>
	return concat(buf, strlen(buf));
    32f0:	f8 01       	movw	r30, r16
    32f2:	01 90       	ld	r0, Z+
    32f4:	00 20       	and	r0, r0
    32f6:	e9 f7       	brne	.-6      	; 0x32f2 <_ZN6String6concatEh+0x2c>
    32f8:	af 01       	movw	r20, r30
    32fa:	41 50       	subi	r20, 0x01	; 1
    32fc:	50 40       	sbci	r21, 0x00	; 0
    32fe:	40 1b       	sub	r20, r16
    3300:	51 0b       	sbc	r21, r17
    3302:	c7 01       	movw	r24, r14
    3304:	b8 01       	movw	r22, r16
    3306:	0e 94 0b 19 	call	0x3216	; 0x3216 <_ZN6String6concatEPKcj>
}
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	0f 90       	pop	r0
    3312:	cf 91       	pop	r28
    3314:	df 91       	pop	r29
    3316:	1f 91       	pop	r17
    3318:	0f 91       	pop	r16
    331a:	ff 90       	pop	r15
    331c:	ef 90       	pop	r14
    331e:	08 95       	ret

00003320 <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    3320:	ef 92       	push	r14
    3322:	ff 92       	push	r15
    3324:	0f 93       	push	r16
    3326:	1f 93       	push	r17
    3328:	df 93       	push	r29
    332a:	cf 93       	push	r28
    332c:	cd b7       	in	r28, 0x3d	; 61
    332e:	de b7       	in	r29, 0x3e	; 62
    3330:	27 97       	sbiw	r28, 0x07	; 7
    3332:	0f b6       	in	r0, 0x3f	; 63
    3334:	f8 94       	cli
    3336:	de bf       	out	0x3e, r29	; 62
    3338:	0f be       	out	0x3f, r0	; 63
    333a:	cd bf       	out	0x3d, r28	; 61
    333c:	7c 01       	movw	r14, r24
    333e:	cb 01       	movw	r24, r22
	char buf[7];
	itoa(num, buf, 10);
    3340:	8e 01       	movw	r16, r28
    3342:	0f 5f       	subi	r16, 0xFF	; 255
    3344:	1f 4f       	sbci	r17, 0xFF	; 255
    3346:	b8 01       	movw	r22, r16
    3348:	4a e0       	ldi	r20, 0x0A	; 10
    334a:	50 e0       	ldi	r21, 0x00	; 0
    334c:	0e 94 a9 28 	call	0x5152	; 0x5152 <itoa>
	return concat(buf, strlen(buf));
    3350:	f8 01       	movw	r30, r16
    3352:	01 90       	ld	r0, Z+
    3354:	00 20       	and	r0, r0
    3356:	e9 f7       	brne	.-6      	; 0x3352 <_ZN6String6concatEi+0x32>
    3358:	af 01       	movw	r20, r30
    335a:	41 50       	subi	r20, 0x01	; 1
    335c:	50 40       	sbci	r21, 0x00	; 0
    335e:	40 1b       	sub	r20, r16
    3360:	51 0b       	sbc	r21, r17
    3362:	c7 01       	movw	r24, r14
    3364:	b8 01       	movw	r22, r16
    3366:	0e 94 0b 19 	call	0x3216	; 0x3216 <_ZN6String6concatEPKcj>
}
    336a:	27 96       	adiw	r28, 0x07	; 7
    336c:	0f b6       	in	r0, 0x3f	; 63
    336e:	f8 94       	cli
    3370:	de bf       	out	0x3e, r29	; 62
    3372:	0f be       	out	0x3f, r0	; 63
    3374:	cd bf       	out	0x3d, r28	; 61
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	1f 91       	pop	r17
    337c:	0f 91       	pop	r16
    337e:	ff 90       	pop	r15
    3380:	ef 90       	pop	r14
    3382:	08 95       	ret

00003384 <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
    3384:	ef 92       	push	r14
    3386:	ff 92       	push	r15
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	df 93       	push	r29
    338e:	cf 93       	push	r28
    3390:	00 d0       	rcall	.+0      	; 0x3392 <_ZN6String6concatEj+0xe>
    3392:	00 d0       	rcall	.+0      	; 0x3394 <_ZN6String6concatEj+0x10>
    3394:	00 d0       	rcall	.+0      	; 0x3396 <_ZN6String6concatEj+0x12>
    3396:	cd b7       	in	r28, 0x3d	; 61
    3398:	de b7       	in	r29, 0x3e	; 62
    339a:	7c 01       	movw	r14, r24
    339c:	cb 01       	movw	r24, r22
	char buf[6];
	utoa(num, buf, 10);
    339e:	8e 01       	movw	r16, r28
    33a0:	0f 5f       	subi	r16, 0xFF	; 255
    33a2:	1f 4f       	sbci	r17, 0xFF	; 255
    33a4:	b8 01       	movw	r22, r16
    33a6:	4a e0       	ldi	r20, 0x0A	; 10
    33a8:	50 e0       	ldi	r21, 0x00	; 0
    33aa:	0e 94 38 29 	call	0x5270	; 0x5270 <utoa>
	return concat(buf, strlen(buf));
    33ae:	f8 01       	movw	r30, r16
    33b0:	01 90       	ld	r0, Z+
    33b2:	00 20       	and	r0, r0
    33b4:	e9 f7       	brne	.-6      	; 0x33b0 <_ZN6String6concatEj+0x2c>
    33b6:	af 01       	movw	r20, r30
    33b8:	41 50       	subi	r20, 0x01	; 1
    33ba:	50 40       	sbci	r21, 0x00	; 0
    33bc:	40 1b       	sub	r20, r16
    33be:	51 0b       	sbc	r21, r17
    33c0:	c7 01       	movw	r24, r14
    33c2:	b8 01       	movw	r22, r16
    33c4:	0e 94 0b 19 	call	0x3216	; 0x3216 <_ZN6String6concatEPKcj>
}
    33c8:	26 96       	adiw	r28, 0x06	; 6
    33ca:	0f b6       	in	r0, 0x3f	; 63
    33cc:	f8 94       	cli
    33ce:	de bf       	out	0x3e, r29	; 62
    33d0:	0f be       	out	0x3f, r0	; 63
    33d2:	cd bf       	out	0x3d, r28	; 61
    33d4:	cf 91       	pop	r28
    33d6:	df 91       	pop	r29
    33d8:	1f 91       	pop	r17
    33da:	0f 91       	pop	r16
    33dc:	ff 90       	pop	r15
    33de:	ef 90       	pop	r14
    33e0:	08 95       	ret

000033e2 <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
    33e2:	ef 92       	push	r14
    33e4:	ff 92       	push	r15
    33e6:	0f 93       	push	r16
    33e8:	1f 93       	push	r17
    33ea:	df 93       	push	r29
    33ec:	cf 93       	push	r28
    33ee:	cd b7       	in	r28, 0x3d	; 61
    33f0:	de b7       	in	r29, 0x3e	; 62
    33f2:	2c 97       	sbiw	r28, 0x0c	; 12
    33f4:	0f b6       	in	r0, 0x3f	; 63
    33f6:	f8 94       	cli
    33f8:	de bf       	out	0x3e, r29	; 62
    33fa:	0f be       	out	0x3f, r0	; 63
    33fc:	cd bf       	out	0x3d, r28	; 61
    33fe:	7c 01       	movw	r14, r24
    3400:	cb 01       	movw	r24, r22
    3402:	ba 01       	movw	r22, r20
	char buf[12];
	ltoa(num, buf, 10);
    3404:	8e 01       	movw	r16, r28
    3406:	0f 5f       	subi	r16, 0xFF	; 255
    3408:	1f 4f       	sbci	r17, 0xFF	; 255
    340a:	a8 01       	movw	r20, r16
    340c:	2a e0       	ldi	r18, 0x0A	; 10
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	0e 94 ca 28 	call	0x5194	; 0x5194 <ltoa>
	return concat(buf, strlen(buf));
    3414:	f8 01       	movw	r30, r16
    3416:	01 90       	ld	r0, Z+
    3418:	00 20       	and	r0, r0
    341a:	e9 f7       	brne	.-6      	; 0x3416 <_ZN6String6concatEl+0x34>
    341c:	af 01       	movw	r20, r30
    341e:	41 50       	subi	r20, 0x01	; 1
    3420:	50 40       	sbci	r21, 0x00	; 0
    3422:	40 1b       	sub	r20, r16
    3424:	51 0b       	sbc	r21, r17
    3426:	c7 01       	movw	r24, r14
    3428:	b8 01       	movw	r22, r16
    342a:	0e 94 0b 19 	call	0x3216	; 0x3216 <_ZN6String6concatEPKcj>
}
    342e:	2c 96       	adiw	r28, 0x0c	; 12
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	f8 94       	cli
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	cf 91       	pop	r28
    343c:	df 91       	pop	r29
    343e:	1f 91       	pop	r17
    3440:	0f 91       	pop	r16
    3442:	ff 90       	pop	r15
    3444:	ef 90       	pop	r14
    3446:	08 95       	ret

00003448 <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    3448:	ef 92       	push	r14
    344a:	ff 92       	push	r15
    344c:	0f 93       	push	r16
    344e:	1f 93       	push	r17
    3450:	df 93       	push	r29
    3452:	cf 93       	push	r28
    3454:	cd b7       	in	r28, 0x3d	; 61
    3456:	de b7       	in	r29, 0x3e	; 62
    3458:	2b 97       	sbiw	r28, 0x0b	; 11
    345a:	0f b6       	in	r0, 0x3f	; 63
    345c:	f8 94       	cli
    345e:	de bf       	out	0x3e, r29	; 62
    3460:	0f be       	out	0x3f, r0	; 63
    3462:	cd bf       	out	0x3d, r28	; 61
    3464:	7c 01       	movw	r14, r24
    3466:	cb 01       	movw	r24, r22
    3468:	ba 01       	movw	r22, r20
	char buf[11];
	ultoa(num, buf, 10);
    346a:	8e 01       	movw	r16, r28
    346c:	0f 5f       	subi	r16, 0xFF	; 255
    346e:	1f 4f       	sbci	r17, 0xFF	; 255
    3470:	a8 01       	movw	r20, r16
    3472:	2a e0       	ldi	r18, 0x0A	; 10
    3474:	30 e0       	ldi	r19, 0x00	; 0
    3476:	0e 94 13 29 	call	0x5226	; 0x5226 <ultoa>
	return concat(buf, strlen(buf));
    347a:	f8 01       	movw	r30, r16
    347c:	01 90       	ld	r0, Z+
    347e:	00 20       	and	r0, r0
    3480:	e9 f7       	brne	.-6      	; 0x347c <_ZN6String6concatEm+0x34>
    3482:	af 01       	movw	r20, r30
    3484:	41 50       	subi	r20, 0x01	; 1
    3486:	50 40       	sbci	r21, 0x00	; 0
    3488:	40 1b       	sub	r20, r16
    348a:	51 0b       	sbc	r21, r17
    348c:	c7 01       	movw	r24, r14
    348e:	b8 01       	movw	r22, r16
    3490:	0e 94 0b 19 	call	0x3216	; 0x3216 <_ZN6String6concatEPKcj>
}
    3494:	2b 96       	adiw	r28, 0x0b	; 11
    3496:	0f b6       	in	r0, 0x3f	; 63
    3498:	f8 94       	cli
    349a:	de bf       	out	0x3e, r29	; 62
    349c:	0f be       	out	0x3f, r0	; 63
    349e:	cd bf       	out	0x3d, r28	; 61
    34a0:	cf 91       	pop	r28
    34a2:	df 91       	pop	r29
    34a4:	1f 91       	pop	r17
    34a6:	0f 91       	pop	r16
    34a8:	ff 90       	pop	r15
    34aa:	ef 90       	pop	r14
    34ac:	08 95       	ret

000034ae <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    34ae:	0f 93       	push	r16
    34b0:	1f 93       	push	r17
    34b2:	8c 01       	movw	r16, r24
    34b4:	fb 01       	movw	r30, r22
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    34b6:	60 81       	ld	r22, Z
    34b8:	71 81       	ldd	r23, Z+1	; 0x01
    34ba:	44 81       	ldd	r20, Z+4	; 0x04
    34bc:	55 81       	ldd	r21, Z+5	; 0x05
    34be:	0e 94 0b 19 	call	0x3216	; 0x3216 <_ZN6String6concatEPKcj>
    34c2:	88 23       	and	r24, r24
    34c4:	19 f4       	brne	.+6      	; 0x34cc <_ZplRK15StringSumHelperRK6String+0x1e>
    34c6:	c8 01       	movw	r24, r16
    34c8:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
	return a;
}
    34cc:	c8 01       	movw	r24, r16
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
    34d2:	08 95       	ret

000034d4 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
    34d8:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    34da:	61 15       	cp	r22, r1
    34dc:	71 05       	cpc	r23, r1
    34de:	69 f0       	breq	.+26     	; 0x34fa <_ZplRK15StringSumHelperPKc+0x26>
    34e0:	db 01       	movw	r26, r22
    34e2:	0d 90       	ld	r0, X+
    34e4:	00 20       	and	r0, r0
    34e6:	e9 f7       	brne	.-6      	; 0x34e2 <_ZplRK15StringSumHelperPKc+0xe>
    34e8:	ad 01       	movw	r20, r26
    34ea:	41 50       	subi	r20, 0x01	; 1
    34ec:	50 40       	sbci	r21, 0x00	; 0
    34ee:	46 1b       	sub	r20, r22
    34f0:	57 0b       	sbc	r21, r23
    34f2:	0e 94 0b 19 	call	0x3216	; 0x3216 <_ZN6String6concatEPKcj>
    34f6:	88 23       	and	r24, r24
    34f8:	19 f4       	brne	.+6      	; 0x3500 <_ZplRK15StringSumHelperPKc+0x2c>
    34fa:	c8 01       	movw	r24, r16
    34fc:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
	return a;
}
    3500:	c8 01       	movw	r24, r16
    3502:	1f 91       	pop	r17
    3504:	0f 91       	pop	r16
    3506:	08 95       	ret

00003508 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    3508:	0f 93       	push	r16
    350a:	1f 93       	push	r17
    350c:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    350e:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN6String6concatEc>
    3512:	88 23       	and	r24, r24
    3514:	19 f4       	brne	.+6      	; 0x351c <_ZplRK15StringSumHelperc+0x14>
    3516:	c8 01       	movw	r24, r16
    3518:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
	return a;
}
    351c:	c8 01       	movw	r24, r16
    351e:	1f 91       	pop	r17
    3520:	0f 91       	pop	r16
    3522:	08 95       	ret

00003524 <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
    3524:	0f 93       	push	r16
    3526:	1f 93       	push	r17
    3528:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    352a:	0e 94 63 19 	call	0x32c6	; 0x32c6 <_ZN6String6concatEh>
    352e:	88 23       	and	r24, r24
    3530:	19 f4       	brne	.+6      	; 0x3538 <_ZplRK15StringSumHelperh+0x14>
    3532:	c8 01       	movw	r24, r16
    3534:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
	return a;
}
    3538:	c8 01       	movw	r24, r16
    353a:	1f 91       	pop	r17
    353c:	0f 91       	pop	r16
    353e:	08 95       	ret

00003540 <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    3540:	0f 93       	push	r16
    3542:	1f 93       	push	r17
    3544:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3546:	0e 94 90 19 	call	0x3320	; 0x3320 <_ZN6String6concatEi>
    354a:	88 23       	and	r24, r24
    354c:	19 f4       	brne	.+6      	; 0x3554 <_ZplRK15StringSumHelperi+0x14>
    354e:	c8 01       	movw	r24, r16
    3550:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
	return a;
}
    3554:	c8 01       	movw	r24, r16
    3556:	1f 91       	pop	r17
    3558:	0f 91       	pop	r16
    355a:	08 95       	ret

0000355c <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    355c:	0f 93       	push	r16
    355e:	1f 93       	push	r17
    3560:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3562:	0e 94 c2 19 	call	0x3384	; 0x3384 <_ZN6String6concatEj>
    3566:	88 23       	and	r24, r24
    3568:	19 f4       	brne	.+6      	; 0x3570 <_ZplRK15StringSumHelperj+0x14>
    356a:	c8 01       	movw	r24, r16
    356c:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
	return a;
}
    3570:	c8 01       	movw	r24, r16
    3572:	1f 91       	pop	r17
    3574:	0f 91       	pop	r16
    3576:	08 95       	ret

00003578 <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    3578:	0f 93       	push	r16
    357a:	1f 93       	push	r17
    357c:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    357e:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <_ZN6String6concatEl>
    3582:	88 23       	and	r24, r24
    3584:	19 f4       	brne	.+6      	; 0x358c <_ZplRK15StringSumHelperl+0x14>
    3586:	c8 01       	movw	r24, r16
    3588:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
	return a;
}
    358c:	c8 01       	movw	r24, r16
    358e:	1f 91       	pop	r17
    3590:	0f 91       	pop	r16
    3592:	08 95       	ret

00003594 <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    3594:	0f 93       	push	r16
    3596:	1f 93       	push	r17
    3598:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    359a:	0e 94 24 1a 	call	0x3448	; 0x3448 <_ZN6String6concatEm>
    359e:	88 23       	and	r24, r24
    35a0:	19 f4       	brne	.+6      	; 0x35a8 <_ZplRK15StringSumHelperm+0x14>
    35a2:	c8 01       	movw	r24, r16
    35a4:	0e 94 3a 17 	call	0x2e74	; 0x2e74 <_ZN6String10invalidateEv>
	return a;
}
    35a8:	c8 01       	movw	r24, r16
    35aa:	1f 91       	pop	r17
    35ac:	0f 91       	pop	r16
    35ae:	08 95       	ret

000035b0 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    35b0:	cf 93       	push	r28
    35b2:	df 93       	push	r29
    35b4:	fc 01       	movw	r30, r24
    35b6:	db 01       	movw	r26, r22
	if (!buffer || !s.buffer) {
    35b8:	80 81       	ld	r24, Z
    35ba:	91 81       	ldd	r25, Z+1	; 0x01
    35bc:	00 97       	sbiw	r24, 0x00	; 0
    35be:	31 f0       	breq	.+12     	; 0x35cc <_ZNK6String9compareToERKS_+0x1c>
    35c0:	6d 91       	ld	r22, X+
    35c2:	7c 91       	ld	r23, X
    35c4:	11 97       	sbiw	r26, 0x01	; 1
    35c6:	61 15       	cp	r22, r1
    35c8:	71 05       	cpc	r23, r1
    35ca:	e9 f4       	brne	.+58     	; 0x3606 <_ZNK6String9compareToERKS_+0x56>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    35cc:	cd 91       	ld	r28, X+
    35ce:	dc 91       	ld	r29, X
    35d0:	11 97       	sbiw	r26, 0x01	; 1
    35d2:	20 97       	sbiw	r28, 0x00	; 0
    35d4:	69 f0       	breq	.+26     	; 0x35f0 <_ZNK6String9compareToERKS_+0x40>
    35d6:	14 96       	adiw	r26, 0x04	; 4
    35d8:	2d 91       	ld	r18, X+
    35da:	3c 91       	ld	r19, X
    35dc:	15 97       	sbiw	r26, 0x05	; 5
    35de:	21 15       	cp	r18, r1
    35e0:	31 05       	cpc	r19, r1
    35e2:	31 f0       	breq	.+12     	; 0x35f0 <_ZNK6String9compareToERKS_+0x40>
    35e4:	28 81       	ld	r18, Y
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	30 95       	com	r19
    35ea:	21 95       	neg	r18
    35ec:	3f 4f       	sbci	r19, 0xFF	; 255
    35ee:	12 c0       	rjmp	.+36     	; 0x3614 <_ZNK6String9compareToERKS_+0x64>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    35f0:	00 97       	sbiw	r24, 0x00	; 0
    35f2:	71 f0       	breq	.+28     	; 0x3610 <_ZNK6String9compareToERKS_+0x60>
    35f4:	24 81       	ldd	r18, Z+4	; 0x04
    35f6:	35 81       	ldd	r19, Z+5	; 0x05
    35f8:	21 15       	cp	r18, r1
    35fa:	31 05       	cpc	r19, r1
    35fc:	49 f0       	breq	.+18     	; 0x3610 <_ZNK6String9compareToERKS_+0x60>
    35fe:	fc 01       	movw	r30, r24
    3600:	20 81       	ld	r18, Z
    3602:	30 e0       	ldi	r19, 0x00	; 0
    3604:	07 c0       	rjmp	.+14     	; 0x3614 <_ZNK6String9compareToERKS_+0x64>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    3606:	0e 94 57 28 	call	0x50ae	; 0x50ae <strcmp>
    360a:	28 2f       	mov	r18, r24
    360c:	39 2f       	mov	r19, r25
    360e:	02 c0       	rjmp	.+4      	; 0x3614 <_ZNK6String9compareToERKS_+0x64>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    3610:	20 e0       	ldi	r18, 0x00	; 0
    3612:	30 e0       	ldi	r19, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    3614:	c9 01       	movw	r24, r18
    3616:	df 91       	pop	r29
    3618:	cf 91       	pop	r28
    361a:	08 95       	ret

0000361c <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    361c:	fc 01       	movw	r30, r24
    361e:	44 81       	ldd	r20, Z+4	; 0x04
    3620:	55 81       	ldd	r21, Z+5	; 0x05
    3622:	fb 01       	movw	r30, r22
    3624:	24 81       	ldd	r18, Z+4	; 0x04
    3626:	35 81       	ldd	r19, Z+5	; 0x05
    3628:	42 17       	cp	r20, r18
    362a:	53 07       	cpc	r21, r19
    362c:	29 f4       	brne	.+10     	; 0x3638 <_ZNK6String6equalsERKS_+0x1c>
    362e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZNK6String9compareToERKS_>
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    3632:	21 e0       	ldi	r18, 0x01	; 1
    3634:	00 97       	sbiw	r24, 0x00	; 0
    3636:	09 f0       	breq	.+2      	; 0x363a <_ZNK6String6equalsERKS_+0x1e>
{
	return (len == s2.len && compareTo(s2) == 0);
    3638:	20 e0       	ldi	r18, 0x00	; 0
}
    363a:	82 2f       	mov	r24, r18
    363c:	08 95       	ret

0000363e <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
    363e:	fc 01       	movw	r30, r24
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3640:	84 81       	ldd	r24, Z+4	; 0x04
    3642:	95 81       	ldd	r25, Z+5	; 0x05
    3644:	00 97       	sbiw	r24, 0x00	; 0
    3646:	41 f4       	brne	.+16     	; 0x3658 <_ZNK6String6equalsEPKc+0x1a>
    3648:	61 15       	cp	r22, r1
    364a:	71 05       	cpc	r23, r1
    364c:	19 f0       	breq	.+6      	; 0x3654 <_ZNK6String6equalsEPKc+0x16>
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	fb 01       	movw	r30, r22
    3652:	09 c0       	rjmp	.+18     	; 0x3666 <_ZNK6String6equalsEPKc+0x28>
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	08 95       	ret
    3658:	01 90       	ld	r0, Z+
    365a:	f0 81       	ld	r31, Z
    365c:	e0 2d       	mov	r30, r0
	if (cstr == NULL) return buffer[0] == 0;
    365e:	61 15       	cp	r22, r1
    3660:	71 05       	cpc	r23, r1
    3662:	31 f4       	brne	.+12     	; 0x3670 <_ZNK6String6equalsEPKc+0x32>
    3664:	81 e0       	ldi	r24, 0x01	; 1
    3666:	90 81       	ld	r25, Z
    3668:	99 23       	and	r25, r25
    366a:	59 f0       	breq	.+22     	; 0x3682 <_ZNK6String6equalsEPKc+0x44>
    366c:	80 e0       	ldi	r24, 0x00	; 0
    366e:	08 95       	ret
	return strcmp(buffer, cstr) == 0;
    3670:	cf 01       	movw	r24, r30
    3672:	0e 94 57 28 	call	0x50ae	; 0x50ae <strcmp>
    3676:	9c 01       	movw	r18, r24
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	21 15       	cp	r18, r1
    367c:	31 05       	cpc	r19, r1
    367e:	09 f0       	breq	.+2      	; 0x3682 <_ZNK6String6equalsEPKc+0x44>
    3680:	80 e0       	ldi	r24, 0x00	; 0
}
    3682:	08 95       	ret

00003684 <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    3684:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZNK6String9compareToERKS_>
}
    3688:	89 2f       	mov	r24, r25
    368a:	88 1f       	adc	r24, r24
    368c:	88 27       	eor	r24, r24
    368e:	88 1f       	adc	r24, r24
    3690:	08 95       	ret

00003692 <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    3692:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZNK6String9compareToERKS_>
    3696:	21 e0       	ldi	r18, 0x01	; 1
    3698:	18 16       	cp	r1, r24
    369a:	19 06       	cpc	r1, r25
    369c:	0c f0       	brlt	.+2      	; 0x36a0 <_ZNK6StringgtERKS_+0xe>
    369e:	20 e0       	ldi	r18, 0x00	; 0
}
    36a0:	82 2f       	mov	r24, r18
    36a2:	08 95       	ret

000036a4 <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    36a4:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZNK6String9compareToERKS_>
    36a8:	21 e0       	ldi	r18, 0x01	; 1
    36aa:	18 16       	cp	r1, r24
    36ac:	19 06       	cpc	r1, r25
    36ae:	0c f4       	brge	.+2      	; 0x36b2 <_ZNK6StringleERKS_+0xe>
    36b0:	20 e0       	ldi	r18, 0x00	; 0
}
    36b2:	82 2f       	mov	r24, r18
    36b4:	08 95       	ret

000036b6 <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    36b6:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <_ZNK6String9compareToERKS_>
    36ba:	89 2f       	mov	r24, r25
    36bc:	80 95       	com	r24
}
    36be:	88 1f       	adc	r24, r24
    36c0:	88 27       	eor	r24, r24
    36c2:	88 1f       	adc	r24, r24
    36c4:	08 95       	ret

000036c6 <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    36c6:	ef 92       	push	r14
    36c8:	ff 92       	push	r15
    36ca:	0f 93       	push	r16
    36cc:	1f 93       	push	r17
    36ce:	cf 93       	push	r28
    36d0:	df 93       	push	r29
    36d2:	fc 01       	movw	r30, r24
    36d4:	db 01       	movw	r26, r22
	if (this == &s2) return 1;
    36d6:	86 17       	cp	r24, r22
    36d8:	97 07       	cpc	r25, r23
    36da:	29 f1       	breq	.+74     	; 0x3726 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
	if (len != s2.len) return 0;
    36dc:	84 81       	ldd	r24, Z+4	; 0x04
    36de:	95 81       	ldd	r25, Z+5	; 0x05
    36e0:	14 96       	adiw	r26, 0x04	; 4
    36e2:	2d 91       	ld	r18, X+
    36e4:	3c 91       	ld	r19, X
    36e6:	15 97       	sbiw	r26, 0x05	; 5
    36e8:	82 17       	cp	r24, r18
    36ea:	93 07       	cpc	r25, r19
    36ec:	f1 f4       	brne	.+60     	; 0x372a <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len == 0) return 1;
    36ee:	00 97       	sbiw	r24, 0x00	; 0
    36f0:	d1 f0       	breq	.+52     	; 0x3726 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
    36f2:	00 81       	ld	r16, Z
    36f4:	11 81       	ldd	r17, Z+1	; 0x01
    36f6:	cd 91       	ld	r28, X+
    36f8:	dc 91       	ld	r29, X
    36fa:	11 97       	sbiw	r26, 0x01	; 1
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    36fc:	0f c0       	rjmp	.+30     	; 0x371c <_ZNK6String16equalsIgnoreCaseERKS_+0x56>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    36fe:	99 27       	eor	r25, r25
    3700:	87 fd       	sbrc	r24, 7
    3702:	90 95       	com	r25
    3704:	0e 94 21 28 	call	0x5042	; 0x5042 <tolower>
    3708:	7c 01       	movw	r14, r24
    370a:	89 91       	ld	r24, Y+
    370c:	99 27       	eor	r25, r25
    370e:	87 fd       	sbrc	r24, 7
    3710:	90 95       	com	r25
    3712:	0e 94 21 28 	call	0x5042	; 0x5042 <tolower>
    3716:	e8 16       	cp	r14, r24
    3718:	f9 06       	cpc	r15, r25
    371a:	39 f4       	brne	.+14     	; 0x372a <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    371c:	f8 01       	movw	r30, r16
    371e:	81 91       	ld	r24, Z+
    3720:	8f 01       	movw	r16, r30
    3722:	88 23       	and	r24, r24
    3724:	61 f7       	brne	.-40     	; 0x36fe <_ZNK6String16equalsIgnoreCaseERKS_+0x38>

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
    3726:	81 e0       	ldi	r24, 0x01	; 1
    3728:	01 c0       	rjmp	.+2      	; 0x372c <_ZNK6String16equalsIgnoreCaseERKS_+0x66>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    372a:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return 1;
}
    372c:	df 91       	pop	r29
    372e:	cf 91       	pop	r28
    3730:	1f 91       	pop	r17
    3732:	0f 91       	pop	r16
    3734:	ff 90       	pop	r15
    3736:	ef 90       	pop	r14
    3738:	08 95       	ret

0000373a <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    373a:	fc 01       	movw	r30, r24
    373c:	db 01       	movw	r26, r22
    373e:	ca 01       	movw	r24, r20
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    3740:	14 96       	adiw	r26, 0x04	; 4
    3742:	4d 91       	ld	r20, X+
    3744:	5c 91       	ld	r21, X
    3746:	15 97       	sbiw	r26, 0x05	; 5
    3748:	24 81       	ldd	r18, Z+4	; 0x04
    374a:	35 81       	ldd	r19, Z+5	; 0x05
    374c:	24 1b       	sub	r18, r20
    374e:	35 0b       	sbc	r19, r21
    3750:	28 17       	cp	r18, r24
    3752:	39 07       	cpc	r19, r25
    3754:	a0 f0       	brcs	.+40     	; 0x377e <_ZNK6String10startsWithERKS_j+0x44>
    3756:	20 81       	ld	r18, Z
    3758:	31 81       	ldd	r19, Z+1	; 0x01
    375a:	21 15       	cp	r18, r1
    375c:	31 05       	cpc	r19, r1
    375e:	79 f0       	breq	.+30     	; 0x377e <_ZNK6String10startsWithERKS_j+0x44>
    3760:	6d 91       	ld	r22, X+
    3762:	7c 91       	ld	r23, X
    3764:	11 97       	sbiw	r26, 0x01	; 1
    3766:	61 15       	cp	r22, r1
    3768:	71 05       	cpc	r23, r1
    376a:	59 f0       	breq	.+22     	; 0x3782 <_ZNK6String10startsWithERKS_j+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    376c:	82 0f       	add	r24, r18
    376e:	93 1f       	adc	r25, r19
    3770:	0e 94 67 28 	call	0x50ce	; 0x50ce <strncmp>
    3774:	9c 01       	movw	r18, r24
    3776:	81 e0       	ldi	r24, 0x01	; 1
    3778:	21 15       	cp	r18, r1
    377a:	31 05       	cpc	r19, r1
    377c:	19 f0       	breq	.+6      	; 0x3784 <_ZNK6String10startsWithERKS_j+0x4a>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    377e:	80 e0       	ldi	r24, 0x00	; 0
    3780:	08 95       	ret
    3782:	80 e0       	ldi	r24, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    3784:	08 95       	ret

00003786 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    3786:	fc 01       	movw	r30, r24
    3788:	44 81       	ldd	r20, Z+4	; 0x04
    378a:	55 81       	ldd	r21, Z+5	; 0x05
    378c:	fb 01       	movw	r30, r22
    378e:	24 81       	ldd	r18, Z+4	; 0x04
    3790:	35 81       	ldd	r19, Z+5	; 0x05
    3792:	42 17       	cp	r20, r18
    3794:	53 07       	cpc	r21, r19
    3796:	28 f0       	brcs	.+10     	; 0x37a2 <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
    3798:	40 e0       	ldi	r20, 0x00	; 0
    379a:	50 e0       	ldi	r21, 0x00	; 0
    379c:	0e 94 9d 1b 	call	0x373a	; 0x373a <_ZNK6String10startsWithERKS_j>
    37a0:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    37a2:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
    37a4:	08 95       	ret

000037a6 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    37a6:	fc 01       	movw	r30, r24
    37a8:	db 01       	movw	r26, r22
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    37aa:	84 81       	ldd	r24, Z+4	; 0x04
    37ac:	95 81       	ldd	r25, Z+5	; 0x05
    37ae:	14 96       	adiw	r26, 0x04	; 4
    37b0:	4d 91       	ld	r20, X+
    37b2:	5c 91       	ld	r21, X
    37b4:	15 97       	sbiw	r26, 0x05	; 5
    37b6:	84 17       	cp	r24, r20
    37b8:	95 07       	cpc	r25, r21
    37ba:	b0 f0       	brcs	.+44     	; 0x37e8 <_ZNK6String8endsWithERKS_+0x42>
    37bc:	20 81       	ld	r18, Z
    37be:	31 81       	ldd	r19, Z+1	; 0x01
    37c0:	21 15       	cp	r18, r1
    37c2:	31 05       	cpc	r19, r1
    37c4:	89 f0       	breq	.+34     	; 0x37e8 <_ZNK6String8endsWithERKS_+0x42>
    37c6:	6d 91       	ld	r22, X+
    37c8:	7c 91       	ld	r23, X
    37ca:	11 97       	sbiw	r26, 0x01	; 1
    37cc:	61 15       	cp	r22, r1
    37ce:	71 05       	cpc	r23, r1
    37d0:	69 f0       	breq	.+26     	; 0x37ec <_ZNK6String8endsWithERKS_+0x46>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    37d2:	84 1b       	sub	r24, r20
    37d4:	95 0b       	sbc	r25, r21
    37d6:	82 0f       	add	r24, r18
    37d8:	93 1f       	adc	r25, r19
    37da:	0e 94 57 28 	call	0x50ae	; 0x50ae <strcmp>
    37de:	9c 01       	movw	r18, r24
    37e0:	81 e0       	ldi	r24, 0x01	; 1
    37e2:	21 15       	cp	r18, r1
    37e4:	31 05       	cpc	r19, r1
    37e6:	19 f0       	breq	.+6      	; 0x37ee <_ZNK6String8endsWithERKS_+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	08 95       	ret
    37ec:	80 e0       	ldi	r24, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    37ee:	08 95       	ret

000037f0 <_ZN6String9setCharAtEjc>:
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
    37f0:	fc 01       	movw	r30, r24
	if (loc < len) buffer[loc] = c;
    37f2:	84 81       	ldd	r24, Z+4	; 0x04
    37f4:	95 81       	ldd	r25, Z+5	; 0x05
    37f6:	68 17       	cp	r22, r24
    37f8:	79 07       	cpc	r23, r25
    37fa:	30 f4       	brcc	.+12     	; 0x3808 <_ZN6String9setCharAtEjc+0x18>
    37fc:	01 90       	ld	r0, Z+
    37fe:	f0 81       	ld	r31, Z
    3800:	e0 2d       	mov	r30, r0
    3802:	e6 0f       	add	r30, r22
    3804:	f7 1f       	adc	r31, r23
    3806:	40 83       	st	Z, r20
    3808:	08 95       	ret

0000380a <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
    380a:	fc 01       	movw	r30, r24
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    380c:	84 81       	ldd	r24, Z+4	; 0x04
    380e:	95 81       	ldd	r25, Z+5	; 0x05
    3810:	68 17       	cp	r22, r24
    3812:	79 07       	cpc	r23, r25
    3814:	20 f4       	brcc	.+8      	; 0x381e <_ZN6StringixEj+0x14>
    3816:	80 81       	ld	r24, Z
    3818:	91 81       	ldd	r25, Z+1	; 0x01
    381a:	00 97       	sbiw	r24, 0x00	; 0
    381c:	29 f4       	brne	.+10     	; 0x3828 <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    381e:	10 92 68 03 	sts	0x0368, r1
		return dummy_writable_char;
    3822:	68 e6       	ldi	r22, 0x68	; 104
    3824:	73 e0       	ldi	r23, 0x03	; 3
    3826:	02 c0       	rjmp	.+4      	; 0x382c <_ZN6StringixEj+0x22>
	}
	return buffer[index];
    3828:	68 0f       	add	r22, r24
    382a:	79 1f       	adc	r23, r25
}
    382c:	cb 01       	movw	r24, r22
    382e:	08 95       	ret

00003830 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    3830:	fc 01       	movw	r30, r24
	if (index >= len || !buffer) return 0;
    3832:	84 81       	ldd	r24, Z+4	; 0x04
    3834:	95 81       	ldd	r25, Z+5	; 0x05
    3836:	68 17       	cp	r22, r24
    3838:	79 07       	cpc	r23, r25
    383a:	48 f4       	brcc	.+18     	; 0x384e <_ZNK6StringixEj+0x1e>
    383c:	80 81       	ld	r24, Z
    383e:	91 81       	ldd	r25, Z+1	; 0x01
    3840:	00 97       	sbiw	r24, 0x00	; 0
    3842:	39 f0       	breq	.+14     	; 0x3852 <_ZNK6StringixEj+0x22>
	return buffer[index];
    3844:	68 0f       	add	r22, r24
    3846:	79 1f       	adc	r23, r25
    3848:	fb 01       	movw	r30, r22
    384a:	80 81       	ld	r24, Z
    384c:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    384e:	80 e0       	ldi	r24, 0x00	; 0
    3850:	08 95       	ret
    3852:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    3854:	08 95       	ret

00003856 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    3856:	0e 94 18 1c 	call	0x3830	; 0x3830 <_ZNK6StringixEj>
}
    385a:	08 95       	ret

0000385c <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    385c:	0f 93       	push	r16
    385e:	1f 93       	push	r17
    3860:	cf 93       	push	r28
    3862:	df 93       	push	r29
    3864:	fc 01       	movw	r30, r24
    3866:	8b 01       	movw	r16, r22
	if (!bufsize || !buf) return;
    3868:	41 15       	cp	r20, r1
    386a:	51 05       	cpc	r21, r1
    386c:	f1 f0       	breq	.+60     	; 0x38aa <_ZNK6String8getBytesEPhjj+0x4e>
    386e:	61 15       	cp	r22, r1
    3870:	71 05       	cpc	r23, r1
    3872:	d9 f0       	breq	.+54     	; 0x38aa <_ZNK6String8getBytesEPhjj+0x4e>
	if (index >= len) {
    3874:	c4 81       	ldd	r28, Z+4	; 0x04
    3876:	d5 81       	ldd	r29, Z+5	; 0x05
    3878:	2c 17       	cp	r18, r28
    387a:	3d 07       	cpc	r19, r29
    387c:	18 f0       	brcs	.+6      	; 0x3884 <_ZNK6String8getBytesEPhjj+0x28>
		buf[0] = 0;
    387e:	fb 01       	movw	r30, r22
    3880:	10 82       	st	Z, r1
		return;
    3882:	13 c0       	rjmp	.+38     	; 0x38aa <_ZNK6String8getBytesEPhjj+0x4e>
	}
	unsigned int n = bufsize - 1;
    3884:	41 50       	subi	r20, 0x01	; 1
    3886:	50 40       	sbci	r21, 0x00	; 0
	if (n > len - index) n = len - index;
    3888:	c2 1b       	sub	r28, r18
    388a:	d3 0b       	sbc	r29, r19
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    388c:	4c 17       	cp	r20, r28
    388e:	5d 07       	cpc	r21, r29
    3890:	08 f4       	brcc	.+2      	; 0x3894 <_ZNK6String8getBytesEPhjj+0x38>
    3892:	ea 01       	movw	r28, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    3894:	60 81       	ld	r22, Z
    3896:	71 81       	ldd	r23, Z+1	; 0x01
    3898:	62 0f       	add	r22, r18
    389a:	73 1f       	adc	r23, r19
    389c:	c8 01       	movw	r24, r16
    389e:	ae 01       	movw	r20, r28
    38a0:	0e 94 75 28 	call	0x50ea	; 0x50ea <strncpy>
	buf[n] = 0;
    38a4:	c0 0f       	add	r28, r16
    38a6:	d1 1f       	adc	r29, r17
    38a8:	18 82       	st	Y, r1
}
    38aa:	df 91       	pop	r29
    38ac:	cf 91       	pop	r28
    38ae:	1f 91       	pop	r17
    38b0:	0f 91       	pop	r16
    38b2:	08 95       	ret

000038b4 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    38b4:	cf 93       	push	r28
    38b6:	df 93       	push	r29
    38b8:	fc 01       	movw	r30, r24
    38ba:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    38bc:	24 81       	ldd	r18, Z+4	; 0x04
    38be:	35 81       	ldd	r19, Z+5	; 0x05
    38c0:	42 17       	cp	r20, r18
    38c2:	53 07       	cpc	r21, r19
    38c4:	78 f4       	brcc	.+30     	; 0x38e4 <_ZNK6String7indexOfEcj+0x30>
	const char* temp = strchr(buffer + fromIndex, ch);
    38c6:	c0 81       	ld	r28, Z
    38c8:	d1 81       	ldd	r29, Z+1	; 0x01
    38ca:	77 27       	eor	r23, r23
    38cc:	67 fd       	sbrc	r22, 7
    38ce:	70 95       	com	r23
    38d0:	8c 0f       	add	r24, r28
    38d2:	9d 1f       	adc	r25, r29
    38d4:	0e 94 4c 28 	call	0x5098	; 0x5098 <strchr>
	if (temp == NULL) return -1;
    38d8:	00 97       	sbiw	r24, 0x00	; 0
    38da:	21 f0       	breq	.+8      	; 0x38e4 <_ZNK6String7indexOfEcj+0x30>
	return temp - buffer;
    38dc:	9c 01       	movw	r18, r24
    38de:	2c 1b       	sub	r18, r28
    38e0:	3d 0b       	sbc	r19, r29
    38e2:	02 c0       	rjmp	.+4      	; 0x38e8 <_ZNK6String7indexOfEcj+0x34>

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
    38e4:	2f ef       	ldi	r18, 0xFF	; 255
    38e6:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    38e8:	c9 01       	movw	r24, r18
    38ea:	df 91       	pop	r29
    38ec:	cf 91       	pop	r28
    38ee:	08 95       	ret

000038f0 <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    38f0:	40 e0       	ldi	r20, 0x00	; 0
    38f2:	50 e0       	ldi	r21, 0x00	; 0
    38f4:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <_ZNK6String7indexOfEcj>
}
    38f8:	08 95       	ret

000038fa <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    38fa:	cf 93       	push	r28
    38fc:	df 93       	push	r29
    38fe:	fc 01       	movw	r30, r24
    3900:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    3902:	24 81       	ldd	r18, Z+4	; 0x04
    3904:	35 81       	ldd	r19, Z+5	; 0x05
    3906:	42 17       	cp	r20, r18
    3908:	53 07       	cpc	r21, r19
    390a:	78 f4       	brcc	.+30     	; 0x392a <_ZNK6String7indexOfERKS_j+0x30>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    390c:	c0 81       	ld	r28, Z
    390e:	d1 81       	ldd	r29, Z+1	; 0x01
    3910:	fb 01       	movw	r30, r22
    3912:	60 81       	ld	r22, Z
    3914:	71 81       	ldd	r23, Z+1	; 0x01
    3916:	8c 0f       	add	r24, r28
    3918:	9d 1f       	adc	r25, r29
    391a:	0e 94 8f 28 	call	0x511e	; 0x511e <strstr>
	if (found == NULL) return -1;
    391e:	00 97       	sbiw	r24, 0x00	; 0
    3920:	21 f0       	breq	.+8      	; 0x392a <_ZNK6String7indexOfERKS_j+0x30>
	return found - buffer;
    3922:	9c 01       	movw	r18, r24
    3924:	2c 1b       	sub	r18, r28
    3926:	3d 0b       	sbc	r19, r29
    3928:	02 c0       	rjmp	.+4      	; 0x392e <_ZNK6String7indexOfERKS_j+0x34>

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
    392a:	2f ef       	ldi	r18, 0xFF	; 255
    392c:	3f ef       	ldi	r19, 0xFF	; 255
	return found - buffer;
}
    392e:	c9 01       	movw	r24, r18
    3930:	df 91       	pop	r29
    3932:	cf 91       	pop	r28
    3934:	08 95       	ret

00003936 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    3936:	40 e0       	ldi	r20, 0x00	; 0
    3938:	50 e0       	ldi	r21, 0x00	; 0
    393a:	0e 94 7d 1c 	call	0x38fa	; 0x38fa <_ZNK6String7indexOfERKS_j>
}
    393e:	08 95       	ret

00003940 <_ZNK6String11lastIndexOfEcj>:
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    3940:	df 92       	push	r13
    3942:	ef 92       	push	r14
    3944:	ff 92       	push	r15
    3946:	0f 93       	push	r16
    3948:	1f 93       	push	r17
    394a:	cf 93       	push	r28
    394c:	df 93       	push	r29
    394e:	ec 01       	movw	r28, r24
	if (fromIndex >= len || fromIndex < 0) return -1;
    3950:	8c 81       	ldd	r24, Y+4	; 0x04
    3952:	9d 81       	ldd	r25, Y+5	; 0x05
    3954:	48 17       	cp	r20, r24
    3956:	59 07       	cpc	r21, r25
    3958:	f8 f4       	brcc	.+62     	; 0x3998 <_ZNK6String11lastIndexOfEcj+0x58>
	char tempchar = buffer[fromIndex + 1];
    395a:	7a 01       	movw	r14, r20
    395c:	08 94       	sec
    395e:	e1 1c       	adc	r14, r1
    3960:	f1 1c       	adc	r15, r1
    3962:	e8 81       	ld	r30, Y
    3964:	f9 81       	ldd	r31, Y+1	; 0x01
    3966:	ee 0d       	add	r30, r14
    3968:	ff 1d       	adc	r31, r15
    396a:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    396c:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    396e:	08 81       	ld	r16, Y
    3970:	19 81       	ldd	r17, Y+1	; 0x01
    3972:	77 27       	eor	r23, r23
    3974:	67 fd       	sbrc	r22, 7
    3976:	70 95       	com	r23
    3978:	c8 01       	movw	r24, r16
    397a:	0e 94 84 28 	call	0x5108	; 0x5108 <strrchr>
	buffer[fromIndex + 1] = tempchar;
    397e:	0e 0d       	add	r16, r14
    3980:	1f 1d       	adc	r17, r15
    3982:	f8 01       	movw	r30, r16
    3984:	d0 82       	st	Z, r13
	if (temp == NULL) return -1;
    3986:	00 97       	sbiw	r24, 0x00	; 0
    3988:	39 f0       	breq	.+14     	; 0x3998 <_ZNK6String11lastIndexOfEcj+0x58>
	return temp - buffer;
    398a:	28 81       	ld	r18, Y
    398c:	39 81       	ldd	r19, Y+1	; 0x01
    398e:	ac 01       	movw	r20, r24
    3990:	42 1b       	sub	r20, r18
    3992:	53 0b       	sbc	r21, r19
    3994:	9a 01       	movw	r18, r20
    3996:	02 c0       	rjmp	.+4      	; 0x399c <_ZNK6String11lastIndexOfEcj+0x5c>
	if (fromIndex >= len || fromIndex < 0) return -1;
	char tempchar = buffer[fromIndex + 1];
	buffer[fromIndex + 1] = '\0';
	char* temp = strrchr( buffer, ch );
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
    3998:	2f ef       	ldi	r18, 0xFF	; 255
    399a:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    399c:	c9 01       	movw	r24, r18
    399e:	df 91       	pop	r29
    39a0:	cf 91       	pop	r28
    39a2:	1f 91       	pop	r17
    39a4:	0f 91       	pop	r16
    39a6:	ff 90       	pop	r15
    39a8:	ef 90       	pop	r14
    39aa:	df 90       	pop	r13
    39ac:	08 95       	ret

000039ae <_ZNK6String11lastIndexOfEc>:
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
    39ae:	fc 01       	movw	r30, r24
    39b0:	44 81       	ldd	r20, Z+4	; 0x04
    39b2:	55 81       	ldd	r21, Z+5	; 0x05
    39b4:	41 50       	subi	r20, 0x01	; 1
    39b6:	50 40       	sbci	r21, 0x00	; 0
    39b8:	0e 94 a0 1c 	call	0x3940	; 0x3940 <_ZNK6String11lastIndexOfEcj>
}
    39bc:	08 95       	ret

000039be <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    39be:	af 92       	push	r10
    39c0:	bf 92       	push	r11
    39c2:	cf 92       	push	r12
    39c4:	df 92       	push	r13
    39c6:	ef 92       	push	r14
    39c8:	ff 92       	push	r15
    39ca:	0f 93       	push	r16
    39cc:	1f 93       	push	r17
    39ce:	cf 93       	push	r28
    39d0:	df 93       	push	r29
    39d2:	fc 01       	movw	r30, r24
    39d4:	6b 01       	movw	r12, r22
    39d6:	8a 01       	movw	r16, r20
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    39d8:	db 01       	movw	r26, r22
    39da:	14 96       	adiw	r26, 0x04	; 4
    39dc:	2d 91       	ld	r18, X+
    39de:	3c 91       	ld	r19, X
    39e0:	15 97       	sbiw	r26, 0x05	; 5
    39e2:	21 15       	cp	r18, r1
    39e4:	31 05       	cpc	r19, r1
    39e6:	51 f1       	breq	.+84     	; 0x3a3c <_ZNK6String11lastIndexOfERKS_j+0x7e>
    39e8:	84 81       	ldd	r24, Z+4	; 0x04
    39ea:	95 81       	ldd	r25, Z+5	; 0x05
    39ec:	00 97       	sbiw	r24, 0x00	; 0
    39ee:	31 f1       	breq	.+76     	; 0x3a3c <_ZNK6String11lastIndexOfERKS_j+0x7e>
    39f0:	82 17       	cp	r24, r18
    39f2:	93 07       	cpc	r25, r19
    39f4:	18 f1       	brcs	.+70     	; 0x3a3c <_ZNK6String11lastIndexOfERKS_j+0x7e>
	if (fromIndex >= len) fromIndex = len - 1;
    39f6:	48 17       	cp	r20, r24
    39f8:	59 07       	cpc	r21, r25
    39fa:	18 f0       	brcs	.+6      	; 0x3a02 <_ZNK6String11lastIndexOfERKS_j+0x44>
    39fc:	8c 01       	movw	r16, r24
    39fe:	01 50       	subi	r16, 0x01	; 1
    3a00:	10 40       	sbci	r17, 0x00	; 0
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3a02:	e0 80       	ld	r14, Z
    3a04:	f1 80       	ldd	r15, Z+1	; 0x01
    3a06:	c7 01       	movw	r24, r14

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    3a08:	cf ef       	ldi	r28, 0xFF	; 255
    3a0a:	df ef       	ldi	r29, 0xFF	; 255
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3a0c:	57 01       	movw	r10, r14
    3a0e:	a0 0e       	add	r10, r16
    3a10:	b1 1e       	adc	r11, r17
    3a12:	10 c0       	rjmp	.+32     	; 0x3a34 <_ZNK6String11lastIndexOfERKS_j+0x76>
		p = strstr(p, s2.buffer);
    3a14:	f6 01       	movw	r30, r12
    3a16:	60 81       	ld	r22, Z
    3a18:	71 81       	ldd	r23, Z+1	; 0x01
    3a1a:	0e 94 8f 28 	call	0x511e	; 0x511e <strstr>
		if (!p) break;
    3a1e:	00 97       	sbiw	r24, 0x00	; 0
    3a20:	79 f0       	breq	.+30     	; 0x3a40 <_ZNK6String11lastIndexOfERKS_j+0x82>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    3a22:	9c 01       	movw	r18, r24
    3a24:	2e 19       	sub	r18, r14
    3a26:	3f 09       	sbc	r19, r15
    3a28:	02 17       	cp	r16, r18
    3a2a:	13 07       	cpc	r17, r19
    3a2c:	08 f4       	brcc	.+2      	; 0x3a30 <_ZNK6String11lastIndexOfERKS_j+0x72>
    3a2e:	9e 01       	movw	r18, r28
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3a30:	01 96       	adiw	r24, 0x01	; 1
    3a32:	e9 01       	movw	r28, r18
    3a34:	a8 16       	cp	r10, r24
    3a36:	b9 06       	cpc	r11, r25
    3a38:	68 f7       	brcc	.-38     	; 0x3a14 <_ZNK6String11lastIndexOfERKS_j+0x56>
    3a3a:	02 c0       	rjmp	.+4      	; 0x3a40 <_ZNK6String11lastIndexOfERKS_j+0x82>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    3a3c:	cf ef       	ldi	r28, 0xFF	; 255
    3a3e:	df ef       	ldi	r29, 0xFF	; 255
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    3a40:	ce 01       	movw	r24, r28
    3a42:	df 91       	pop	r29
    3a44:	cf 91       	pop	r28
    3a46:	1f 91       	pop	r17
    3a48:	0f 91       	pop	r16
    3a4a:	ff 90       	pop	r15
    3a4c:	ef 90       	pop	r14
    3a4e:	df 90       	pop	r13
    3a50:	cf 90       	pop	r12
    3a52:	bf 90       	pop	r11
    3a54:	af 90       	pop	r10
    3a56:	08 95       	ret

00003a58 <_ZNK6String11lastIndexOfERKS_>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    3a58:	fc 01       	movw	r30, r24
    3a5a:	44 81       	ldd	r20, Z+4	; 0x04
    3a5c:	55 81       	ldd	r21, Z+5	; 0x05
    3a5e:	fb 01       	movw	r30, r22
    3a60:	24 81       	ldd	r18, Z+4	; 0x04
    3a62:	35 81       	ldd	r19, Z+5	; 0x05
    3a64:	42 1b       	sub	r20, r18
    3a66:	53 0b       	sbc	r21, r19
    3a68:	0e 94 df 1c 	call	0x39be	; 0x39be <_ZNK6String11lastIndexOfERKS_j>
}
    3a6c:	08 95       	ret

00003a6e <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    3a6e:	af 92       	push	r10
    3a70:	bf 92       	push	r11
    3a72:	cf 92       	push	r12
    3a74:	df 92       	push	r13
    3a76:	ef 92       	push	r14
    3a78:	ff 92       	push	r15
    3a7a:	0f 93       	push	r16
    3a7c:	1f 93       	push	r17
    3a7e:	cf 93       	push	r28
    3a80:	df 93       	push	r29
    3a82:	f8 2e       	mov	r15, r24
    3a84:	e9 2e       	mov	r14, r25
    3a86:	6b 01       	movw	r12, r22
    3a88:	8a 01       	movw	r16, r20
    3a8a:	e9 01       	movw	r28, r18
	if (left > right) {
    3a8c:	24 17       	cp	r18, r20
    3a8e:	35 07       	cpc	r19, r21
    3a90:	48 f4       	brcc	.+18     	; 0x3aa4 <_ZNK6String9substringEjj+0x36>
    3a92:	34 2f       	mov	r19, r20
    3a94:	21 2f       	mov	r18, r17
    3a96:	8e 01       	movw	r16, r28
    3a98:	c9 01       	movw	r24, r18
    3a9a:	a9 2e       	mov	r10, r25
    3a9c:	e5 01       	movw	r28, r10
    3a9e:	5e 01       	movw	r10, r28
    3aa0:	b2 2e       	mov	r11, r18
    3aa2:	e5 01       	movw	r28, r10
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    3aa4:	8f 2d       	mov	r24, r15
    3aa6:	9e 2d       	mov	r25, r14
    3aa8:	63 e6       	ldi	r22, 0x63	; 99
    3aaa:	71 e0       	ldi	r23, 0x01	; 1
    3aac:	0e 94 a6 17 	call	0x2f4c	; 0x2f4c <_ZN6StringC1EPKc>
	if (left > len) return out;
    3ab0:	d6 01       	movw	r26, r12
    3ab2:	14 96       	adiw	r26, 0x04	; 4
    3ab4:	8d 91       	ld	r24, X+
    3ab6:	9c 91       	ld	r25, X
    3ab8:	15 97       	sbiw	r26, 0x05	; 5
    3aba:	80 17       	cp	r24, r16
    3abc:	91 07       	cpc	r25, r17
    3abe:	d8 f0       	brcs	.+54     	; 0x3af6 <_ZNK6String9substringEjj+0x88>
    3ac0:	8c 17       	cp	r24, r28
    3ac2:	9d 07       	cpc	r25, r29
    3ac4:	08 f4       	brcc	.+2      	; 0x3ac8 <_ZNK6String9substringEjj+0x5a>
    3ac6:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    3ac8:	d6 01       	movw	r26, r12
    3aca:	ed 91       	ld	r30, X+
    3acc:	fc 91       	ld	r31, X
    3ace:	11 97       	sbiw	r26, 0x01	; 1
    3ad0:	ec 0f       	add	r30, r28
    3ad2:	fd 1f       	adc	r31, r29
    3ad4:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    3ad6:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    3ad8:	6d 91       	ld	r22, X+
    3ada:	7c 91       	ld	r23, X
    3adc:	60 0f       	add	r22, r16
    3ade:	71 1f       	adc	r23, r17
    3ae0:	8f 2d       	mov	r24, r15
    3ae2:	9e 2d       	mov	r25, r14
    3ae4:	0e 94 e7 17 	call	0x2fce	; 0x2fce <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    3ae8:	d6 01       	movw	r26, r12
    3aea:	ed 91       	ld	r30, X+
    3aec:	fc 91       	ld	r31, X
    3aee:	11 97       	sbiw	r26, 0x01	; 1
    3af0:	ec 0f       	add	r30, r28
    3af2:	fd 1f       	adc	r31, r29
    3af4:	b0 82       	st	Z, r11
	return out;
}
    3af6:	8f 2d       	mov	r24, r15
    3af8:	9e 2d       	mov	r25, r14
    3afa:	df 91       	pop	r29
    3afc:	cf 91       	pop	r28
    3afe:	1f 91       	pop	r17
    3b00:	0f 91       	pop	r16
    3b02:	ff 90       	pop	r15
    3b04:	ef 90       	pop	r14
    3b06:	df 90       	pop	r13
    3b08:	cf 90       	pop	r12
    3b0a:	bf 90       	pop	r11
    3b0c:	af 90       	pop	r10
    3b0e:	08 95       	ret

00003b10 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    3b10:	cf 93       	push	r28
    3b12:	df 93       	push	r29
    3b14:	ec 01       	movw	r28, r24
	return substring(left, len);
    3b16:	fb 01       	movw	r30, r22
    3b18:	24 81       	ldd	r18, Z+4	; 0x04
    3b1a:	35 81       	ldd	r19, Z+5	; 0x05
    3b1c:	0e 94 37 1d 	call	0x3a6e	; 0x3a6e <_ZNK6String9substringEjj>
}
    3b20:	ce 01       	movw	r24, r28
    3b22:	df 91       	pop	r29
    3b24:	cf 91       	pop	r28
    3b26:	08 95       	ret

00003b28 <_ZN6String7replaceEcc>:
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    3b28:	dc 01       	movw	r26, r24
    3b2a:	ed 91       	ld	r30, X+
    3b2c:	fc 91       	ld	r31, X
    3b2e:	11 97       	sbiw	r26, 0x01	; 1
    3b30:	30 97       	sbiw	r30, 0x00	; 0
    3b32:	29 f4       	brne	.+10     	; 0x3b3e <_ZN6String7replaceEcc+0x16>
    3b34:	08 95       	ret
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    3b36:	86 17       	cp	r24, r22
    3b38:	09 f4       	brne	.+2      	; 0x3b3c <_ZN6String7replaceEcc+0x14>
    3b3a:	40 83       	st	Z, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3b3c:	31 96       	adiw	r30, 0x01	; 1
    3b3e:	80 81       	ld	r24, Z
    3b40:	88 23       	and	r24, r24
    3b42:	c9 f7       	brne	.-14     	; 0x3b36 <_ZN6String7replaceEcc+0xe>
    3b44:	08 95       	ret

00003b46 <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    3b46:	2f 92       	push	r2
    3b48:	3f 92       	push	r3
    3b4a:	4f 92       	push	r4
    3b4c:	5f 92       	push	r5
    3b4e:	6f 92       	push	r6
    3b50:	7f 92       	push	r7
    3b52:	8f 92       	push	r8
    3b54:	9f 92       	push	r9
    3b56:	af 92       	push	r10
    3b58:	bf 92       	push	r11
    3b5a:	cf 92       	push	r12
    3b5c:	df 92       	push	r13
    3b5e:	ef 92       	push	r14
    3b60:	ff 92       	push	r15
    3b62:	0f 93       	push	r16
    3b64:	1f 93       	push	r17
    3b66:	cf 93       	push	r28
    3b68:	df 93       	push	r29
    3b6a:	7c 01       	movw	r14, r24
    3b6c:	2b 01       	movw	r4, r22
    3b6e:	6a 01       	movw	r12, r20
	if (len == 0 || find.len == 0) return;
    3b70:	dc 01       	movw	r26, r24
    3b72:	14 96       	adiw	r26, 0x04	; 4
    3b74:	6d 90       	ld	r6, X+
    3b76:	7c 90       	ld	r7, X
    3b78:	15 97       	sbiw	r26, 0x05	; 5
    3b7a:	61 14       	cp	r6, r1
    3b7c:	71 04       	cpc	r7, r1
    3b7e:	09 f4       	brne	.+2      	; 0x3b82 <_ZN6String7replaceERKS_S1_+0x3c>
    3b80:	d9 c0       	rjmp	.+434    	; 0x3d34 <_ZN6String7replaceERKS_S1_+0x1ee>
    3b82:	fb 01       	movw	r30, r22
    3b84:	84 80       	ldd	r8, Z+4	; 0x04
    3b86:	95 80       	ldd	r9, Z+5	; 0x05
    3b88:	81 14       	cp	r8, r1
    3b8a:	91 04       	cpc	r9, r1
    3b8c:	09 f4       	brne	.+2      	; 0x3b90 <_ZN6String7replaceERKS_S1_+0x4a>
    3b8e:	d2 c0       	rjmp	.+420    	; 0x3d34 <_ZN6String7replaceERKS_S1_+0x1ee>
	int diff = replace.len - find.len;
    3b90:	da 01       	movw	r26, r20
    3b92:	14 96       	adiw	r26, 0x04	; 4
    3b94:	ad 90       	ld	r10, X+
    3b96:	bc 90       	ld	r11, X
    3b98:	15 97       	sbiw	r26, 0x05	; 5
    3b9a:	a8 18       	sub	r10, r8
    3b9c:	b9 08       	sbc	r11, r9
	char *readFrom = buffer;
    3b9e:	fc 01       	movw	r30, r24
    3ba0:	00 81       	ld	r16, Z
    3ba2:	11 81       	ldd	r17, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    3ba4:	a1 14       	cp	r10, r1
    3ba6:	b1 04       	cpc	r11, r1
    3ba8:	f1 f4       	brne	.+60     	; 0x3be6 <_ZN6String7replaceERKS_S1_+0xa0>
    3baa:	13 c0       	rjmp	.+38     	; 0x3bd2 <_ZN6String7replaceERKS_S1_+0x8c>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    3bac:	d6 01       	movw	r26, r12
    3bae:	6c 91       	ld	r22, X
    3bb0:	11 96       	adiw	r26, 0x01	; 1
    3bb2:	7c 91       	ld	r23, X
    3bb4:	11 97       	sbiw	r26, 0x01	; 1
    3bb6:	14 96       	adiw	r26, 0x04	; 4
    3bb8:	4d 91       	ld	r20, X+
    3bba:	5c 91       	ld	r21, X
    3bbc:	15 97       	sbiw	r26, 0x05	; 5
    3bbe:	ce 01       	movw	r24, r28
    3bc0:	0e 94 31 28 	call	0x5062	; 0x5062 <memcpy>
			readFrom = foundAt + replace.len;
    3bc4:	d6 01       	movw	r26, r12
    3bc6:	14 96       	adiw	r26, 0x04	; 4
    3bc8:	0d 91       	ld	r16, X+
    3bca:	1c 91       	ld	r17, X
    3bcc:	15 97       	sbiw	r26, 0x05	; 5
    3bce:	0c 0f       	add	r16, r28
    3bd0:	1d 1f       	adc	r17, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3bd2:	f2 01       	movw	r30, r4
    3bd4:	60 81       	ld	r22, Z
    3bd6:	71 81       	ldd	r23, Z+1	; 0x01
    3bd8:	c8 01       	movw	r24, r16
    3bda:	0e 94 8f 28 	call	0x511e	; 0x511e <strstr>
    3bde:	ec 01       	movw	r28, r24
    3be0:	00 97       	sbiw	r24, 0x00	; 0
    3be2:	21 f7       	brne	.-56     	; 0x3bac <_ZN6String7replaceERKS_S1_+0x66>
    3be4:	a7 c0       	rjmp	.+334    	; 0x3d34 <_ZN6String7replaceERKS_S1_+0x1ee>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    3be6:	b7 fc       	sbrc	r11, 7
    3be8:	02 c0       	rjmp	.+4      	; 0x3bee <_ZN6String7replaceERKS_S1_+0xa8>
    3bea:	e3 01       	movw	r28, r6
    3bec:	42 c0       	rjmp	.+132    	; 0x3c72 <_ZN6String7replaceERKS_S1_+0x12c>
    3bee:	48 01       	movw	r8, r16
    3bf0:	2d c0       	rjmp	.+90     	; 0x3c4c <_ZN6String7replaceERKS_S1_+0x106>
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    3bf2:	e3 01       	movw	r28, r6
    3bf4:	c0 1b       	sub	r28, r16
    3bf6:	d1 0b       	sbc	r29, r17
			memcpy(writeTo, readFrom, n);
    3bf8:	c4 01       	movw	r24, r8
    3bfa:	b8 01       	movw	r22, r16
    3bfc:	ae 01       	movw	r20, r28
    3bfe:	0e 94 31 28 	call	0x5062	; 0x5062 <memcpy>
			writeTo += n;
    3c02:	c8 0d       	add	r28, r8
    3c04:	d9 1d       	adc	r29, r9
			memcpy(writeTo, replace.buffer, replace.len);
    3c06:	d6 01       	movw	r26, r12
    3c08:	6c 91       	ld	r22, X
    3c0a:	11 96       	adiw	r26, 0x01	; 1
    3c0c:	7c 91       	ld	r23, X
    3c0e:	11 97       	sbiw	r26, 0x01	; 1
    3c10:	14 96       	adiw	r26, 0x04	; 4
    3c12:	4d 91       	ld	r20, X+
    3c14:	5c 91       	ld	r21, X
    3c16:	15 97       	sbiw	r26, 0x05	; 5
    3c18:	ce 01       	movw	r24, r28
    3c1a:	0e 94 31 28 	call	0x5062	; 0x5062 <memcpy>
			writeTo += replace.len;
    3c1e:	d6 01       	movw	r26, r12
    3c20:	14 96       	adiw	r26, 0x04	; 4
    3c22:	8d 90       	ld	r8, X+
    3c24:	9c 90       	ld	r9, X
    3c26:	15 97       	sbiw	r26, 0x05	; 5
    3c28:	8c 0e       	add	r8, r28
    3c2a:	9d 1e       	adc	r9, r29
			readFrom = foundAt + find.len;
    3c2c:	f2 01       	movw	r30, r4
    3c2e:	04 81       	ldd	r16, Z+4	; 0x04
    3c30:	15 81       	ldd	r17, Z+5	; 0x05
    3c32:	06 0d       	add	r16, r6
    3c34:	17 1d       	adc	r17, r7
			len += diff;
    3c36:	d7 01       	movw	r26, r14
    3c38:	14 96       	adiw	r26, 0x04	; 4
    3c3a:	8d 91       	ld	r24, X+
    3c3c:	9c 91       	ld	r25, X
    3c3e:	15 97       	sbiw	r26, 0x05	; 5
    3c40:	8a 0d       	add	r24, r10
    3c42:	9b 1d       	adc	r25, r11
    3c44:	15 96       	adiw	r26, 0x05	; 5
    3c46:	9c 93       	st	X, r25
    3c48:	8e 93       	st	-X, r24
    3c4a:	14 97       	sbiw	r26, 0x04	; 4
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3c4c:	f2 01       	movw	r30, r4
    3c4e:	60 81       	ld	r22, Z
    3c50:	71 81       	ldd	r23, Z+1	; 0x01
    3c52:	c8 01       	movw	r24, r16
    3c54:	0e 94 8f 28 	call	0x511e	; 0x511e <strstr>
    3c58:	3c 01       	movw	r6, r24
    3c5a:	00 97       	sbiw	r24, 0x00	; 0
    3c5c:	51 f6       	brne	.-108    	; 0x3bf2 <_ZN6String7replaceERKS_S1_+0xac>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    3c5e:	c4 01       	movw	r24, r8
    3c60:	b8 01       	movw	r22, r16
    3c62:	0e 94 60 28 	call	0x50c0	; 0x50c0 <strcpy>
    3c66:	66 c0       	rjmp	.+204    	; 0x3d34 <_ZN6String7replaceERKS_S1_+0x1ee>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    3c68:	8c 01       	movw	r16, r24
    3c6a:	08 0d       	add	r16, r8
    3c6c:	19 1d       	adc	r17, r9
			size += diff;
    3c6e:	ca 0d       	add	r28, r10
    3c70:	db 1d       	adc	r29, r11
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3c72:	d2 01       	movw	r26, r4
    3c74:	6d 91       	ld	r22, X+
    3c76:	7c 91       	ld	r23, X
    3c78:	c8 01       	movw	r24, r16
    3c7a:	0e 94 8f 28 	call	0x511e	; 0x511e <strstr>
    3c7e:	00 97       	sbiw	r24, 0x00	; 0
    3c80:	99 f7       	brne	.-26     	; 0x3c68 <_ZN6String7replaceERKS_S1_+0x122>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    3c82:	c6 15       	cp	r28, r6
    3c84:	d7 05       	cpc	r29, r7
    3c86:	09 f4       	brne	.+2      	; 0x3c8a <_ZN6String7replaceERKS_S1_+0x144>
    3c88:	55 c0       	rjmp	.+170    	; 0x3d34 <_ZN6String7replaceERKS_S1_+0x1ee>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    3c8a:	f7 01       	movw	r30, r14
    3c8c:	82 81       	ldd	r24, Z+2	; 0x02
    3c8e:	93 81       	ldd	r25, Z+3	; 0x03
    3c90:	8c 17       	cp	r24, r28
    3c92:	9d 07       	cpc	r25, r29
    3c94:	08 f0       	brcs	.+2      	; 0x3c98 <_ZN6String7replaceERKS_S1_+0x152>
    3c96:	45 c0       	rjmp	.+138    	; 0x3d22 <_ZN6String7replaceERKS_S1_+0x1dc>
    3c98:	c7 01       	movw	r24, r14
    3c9a:	be 01       	movw	r22, r28
    3c9c:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <_ZN6String12changeBufferEj>
    3ca0:	88 23       	and	r24, r24
    3ca2:	09 f4       	brne	.+2      	; 0x3ca6 <_ZN6String7replaceERKS_S1_+0x160>
    3ca4:	47 c0       	rjmp	.+142    	; 0x3d34 <_ZN6String7replaceERKS_S1_+0x1ee>
    3ca6:	3d c0       	rjmp	.+122    	; 0x3d22 <_ZN6String7replaceERKS_S1_+0x1dc>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    3ca8:	c7 01       	movw	r24, r14
    3caa:	b2 01       	movw	r22, r4
    3cac:	a9 01       	movw	r20, r18
    3cae:	0e 94 df 1c 	call	0x39be	; 0x39be <_ZNK6String11lastIndexOfERKS_j>
    3cb2:	ec 01       	movw	r28, r24
    3cb4:	97 fd       	sbrc	r25, 7
    3cb6:	3e c0       	rjmp	.+124    	; 0x3d34 <_ZN6String7replaceERKS_S1_+0x1ee>
			readFrom = buffer + index + find.len;
    3cb8:	d7 01       	movw	r26, r14
    3cba:	6d 91       	ld	r22, X+
    3cbc:	7c 91       	ld	r23, X
    3cbe:	11 97       	sbiw	r26, 0x01	; 1
    3cc0:	f2 01       	movw	r30, r4
    3cc2:	84 81       	ldd	r24, Z+4	; 0x04
    3cc4:	95 81       	ldd	r25, Z+5	; 0x05
    3cc6:	8c 0f       	add	r24, r28
    3cc8:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    3cca:	68 0f       	add	r22, r24
    3ccc:	79 1f       	adc	r23, r25
    3cce:	14 96       	adiw	r26, 0x04	; 4
    3cd0:	4d 91       	ld	r20, X+
    3cd2:	5c 91       	ld	r21, X
    3cd4:	15 97       	sbiw	r26, 0x05	; 5
    3cd6:	48 1b       	sub	r20, r24
    3cd8:	59 0b       	sbc	r21, r25
    3cda:	cb 01       	movw	r24, r22
    3cdc:	8a 0d       	add	r24, r10
    3cde:	9b 1d       	adc	r25, r11
    3ce0:	0e 94 3a 28 	call	0x5074	; 0x5074 <memmove>
			len += diff;
    3ce4:	d7 01       	movw	r26, r14
    3ce6:	14 96       	adiw	r26, 0x04	; 4
    3ce8:	8d 91       	ld	r24, X+
    3cea:	9c 91       	ld	r25, X
    3cec:	15 97       	sbiw	r26, 0x05	; 5
    3cee:	8a 0d       	add	r24, r10
    3cf0:	9b 1d       	adc	r25, r11
    3cf2:	15 96       	adiw	r26, 0x05	; 5
    3cf4:	9c 93       	st	X, r25
    3cf6:	8e 93       	st	-X, r24
    3cf8:	14 97       	sbiw	r26, 0x04	; 4
			buffer[len] = 0;
    3cfa:	ed 91       	ld	r30, X+
    3cfc:	fc 91       	ld	r31, X
    3cfe:	11 97       	sbiw	r26, 0x01	; 1
    3d00:	e8 0f       	add	r30, r24
    3d02:	f9 1f       	adc	r31, r25
    3d04:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    3d06:	2d 91       	ld	r18, X+
    3d08:	3c 91       	ld	r19, X
    3d0a:	2c 0f       	add	r18, r28
    3d0c:	3d 1f       	adc	r19, r29
    3d0e:	f6 01       	movw	r30, r12
    3d10:	60 81       	ld	r22, Z
    3d12:	71 81       	ldd	r23, Z+1	; 0x01
    3d14:	44 81       	ldd	r20, Z+4	; 0x04
    3d16:	55 81       	ldd	r21, Z+5	; 0x05
    3d18:	c9 01       	movw	r24, r18
    3d1a:	0e 94 31 28 	call	0x5062	; 0x5062 <memcpy>
			index--;
    3d1e:	9e 01       	movw	r18, r28
    3d20:	05 c0       	rjmp	.+10     	; 0x3d2c <_ZN6String7replaceERKS_S1_+0x1e6>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    3d22:	d7 01       	movw	r26, r14
    3d24:	14 96       	adiw	r26, 0x04	; 4
    3d26:	2d 91       	ld	r18, X+
    3d28:	3c 91       	ld	r19, X
    3d2a:	15 97       	sbiw	r26, 0x05	; 5
    3d2c:	21 50       	subi	r18, 0x01	; 1
    3d2e:	30 40       	sbci	r19, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    3d30:	37 ff       	sbrs	r19, 7
    3d32:	ba cf       	rjmp	.-140    	; 0x3ca8 <_ZN6String7replaceERKS_S1_+0x162>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    3d34:	df 91       	pop	r29
    3d36:	cf 91       	pop	r28
    3d38:	1f 91       	pop	r17
    3d3a:	0f 91       	pop	r16
    3d3c:	ff 90       	pop	r15
    3d3e:	ef 90       	pop	r14
    3d40:	df 90       	pop	r13
    3d42:	cf 90       	pop	r12
    3d44:	bf 90       	pop	r11
    3d46:	af 90       	pop	r10
    3d48:	9f 90       	pop	r9
    3d4a:	8f 90       	pop	r8
    3d4c:	7f 90       	pop	r7
    3d4e:	6f 90       	pop	r6
    3d50:	5f 90       	pop	r5
    3d52:	4f 90       	pop	r4
    3d54:	3f 90       	pop	r3
    3d56:	2f 90       	pop	r2
    3d58:	08 95       	ret

00003d5a <_ZN6String11toLowerCaseEv>:

void String::toLowerCase(void)
{
    3d5a:	cf 93       	push	r28
    3d5c:	df 93       	push	r29
	if (!buffer) return;
    3d5e:	fc 01       	movw	r30, r24
    3d60:	c0 81       	ld	r28, Z
    3d62:	d1 81       	ldd	r29, Z+1	; 0x01
    3d64:	20 97       	sbiw	r28, 0x00	; 0
    3d66:	39 f4       	brne	.+14     	; 0x3d76 <_ZN6String11toLowerCaseEv+0x1c>
    3d68:	09 c0       	rjmp	.+18     	; 0x3d7c <_ZN6String11toLowerCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
    3d6a:	99 27       	eor	r25, r25
    3d6c:	87 fd       	sbrc	r24, 7
    3d6e:	90 95       	com	r25
    3d70:	0e 94 21 28 	call	0x5042	; 0x5042 <tolower>
    3d74:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3d76:	88 81       	ld	r24, Y
    3d78:	88 23       	and	r24, r24
    3d7a:	b9 f7       	brne	.-18     	; 0x3d6a <_ZN6String11toLowerCaseEv+0x10>
		*p = tolower(*p);
	}
}
    3d7c:	df 91       	pop	r29
    3d7e:	cf 91       	pop	r28
    3d80:	08 95       	ret

00003d82 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    3d82:	cf 93       	push	r28
    3d84:	df 93       	push	r29
	if (!buffer) return;
    3d86:	fc 01       	movw	r30, r24
    3d88:	c0 81       	ld	r28, Z
    3d8a:	d1 81       	ldd	r29, Z+1	; 0x01
    3d8c:	20 97       	sbiw	r28, 0x00	; 0
    3d8e:	39 f4       	brne	.+14     	; 0x3d9e <_ZN6String11toUpperCaseEv+0x1c>
    3d90:	09 c0       	rjmp	.+18     	; 0x3da4 <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    3d92:	99 27       	eor	r25, r25
    3d94:	87 fd       	sbrc	r24, 7
    3d96:	90 95       	com	r25
    3d98:	0e 94 29 28 	call	0x5052	; 0x5052 <toupper>
    3d9c:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3d9e:	88 81       	ld	r24, Y
    3da0:	88 23       	and	r24, r24
    3da2:	b9 f7       	brne	.-18     	; 0x3d92 <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    3da4:	df 91       	pop	r29
    3da6:	cf 91       	pop	r28
    3da8:	08 95       	ret

00003daa <_ZN6String4trimEv>:

void String::trim(void)
{
    3daa:	af 92       	push	r10
    3dac:	bf 92       	push	r11
    3dae:	cf 92       	push	r12
    3db0:	df 92       	push	r13
    3db2:	ef 92       	push	r14
    3db4:	ff 92       	push	r15
    3db6:	0f 93       	push	r16
    3db8:	1f 93       	push	r17
    3dba:	cf 93       	push	r28
    3dbc:	df 93       	push	r29
    3dbe:	6c 01       	movw	r12, r24
	if (!buffer || len == 0) return;
    3dc0:	dc 01       	movw	r26, r24
    3dc2:	ed 90       	ld	r14, X+
    3dc4:	fc 90       	ld	r15, X
    3dc6:	11 97       	sbiw	r26, 0x01	; 1
    3dc8:	e1 14       	cp	r14, r1
    3dca:	f1 04       	cpc	r15, r1
    3dcc:	09 f4       	brne	.+2      	; 0x3dd0 <_ZN6String4trimEv+0x26>
    3dce:	43 c0       	rjmp	.+134    	; 0x3e56 <_ZN6String4trimEv+0xac>
    3dd0:	14 96       	adiw	r26, 0x04	; 4
    3dd2:	ad 90       	ld	r10, X+
    3dd4:	bc 90       	ld	r11, X
    3dd6:	15 97       	sbiw	r26, 0x05	; 5
    3dd8:	a1 14       	cp	r10, r1
    3dda:	b1 04       	cpc	r11, r1
    3ddc:	e1 f1       	breq	.+120    	; 0x3e56 <_ZN6String4trimEv+0xac>
    3dde:	87 01       	movw	r16, r14
    3de0:	e8 01       	movw	r28, r16
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    3de2:	88 81       	ld	r24, Y
    3de4:	0f 5f       	subi	r16, 0xFF	; 255
    3de6:	1f 4f       	sbci	r17, 0xFF	; 255
    3de8:	99 27       	eor	r25, r25
    3dea:	87 fd       	sbrc	r24, 7
    3dec:	90 95       	com	r25
    3dee:	0e 94 19 28 	call	0x5032	; 0x5032 <isspace>
    3df2:	00 97       	sbiw	r24, 0x00	; 0
    3df4:	a9 f7       	brne	.-22     	; 0x3de0 <_ZN6String4trimEv+0x36>
	char *end = buffer + len - 1;
    3df6:	85 01       	movw	r16, r10
    3df8:	01 50       	subi	r16, 0x01	; 1
    3dfa:	10 40       	sbci	r17, 0x00	; 0
    3dfc:	0e 0d       	add	r16, r14
    3dfe:	1f 1d       	adc	r17, r15
	while (isspace(*end) && end >= begin) end--;
    3e00:	f8 01       	movw	r30, r16
    3e02:	80 81       	ld	r24, Z
    3e04:	99 27       	eor	r25, r25
    3e06:	87 fd       	sbrc	r24, 7
    3e08:	90 95       	com	r25
    3e0a:	0e 94 19 28 	call	0x5032	; 0x5032 <isspace>
    3e0e:	00 97       	sbiw	r24, 0x00	; 0
    3e10:	31 f0       	breq	.+12     	; 0x3e1e <_ZN6String4trimEv+0x74>
    3e12:	0c 17       	cp	r16, r28
    3e14:	1d 07       	cpc	r17, r29
    3e16:	18 f0       	brcs	.+6      	; 0x3e1e <_ZN6String4trimEv+0x74>
    3e18:	01 50       	subi	r16, 0x01	; 1
    3e1a:	10 40       	sbci	r17, 0x00	; 0
    3e1c:	f1 cf       	rjmp	.-30     	; 0x3e00 <_ZN6String4trimEv+0x56>
	len = end + 1 - begin;
    3e1e:	0f 5f       	subi	r16, 0xFF	; 255
    3e20:	1f 4f       	sbci	r17, 0xFF	; 255
    3e22:	0c 1b       	sub	r16, r28
    3e24:	1d 0b       	sbc	r17, r29
    3e26:	d6 01       	movw	r26, r12
    3e28:	15 96       	adiw	r26, 0x05	; 5
    3e2a:	1c 93       	st	X, r17
    3e2c:	0e 93       	st	-X, r16
    3e2e:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    3e30:	ec 16       	cp	r14, r28
    3e32:	fd 06       	cpc	r15, r29
    3e34:	28 f4       	brcc	.+10     	; 0x3e40 <_ZN6String4trimEv+0x96>
    3e36:	c7 01       	movw	r24, r14
    3e38:	be 01       	movw	r22, r28
    3e3a:	a8 01       	movw	r20, r16
    3e3c:	0e 94 31 28 	call	0x5062	; 0x5062 <memcpy>
	buffer[len] = 0;
    3e40:	d6 01       	movw	r26, r12
    3e42:	ed 91       	ld	r30, X+
    3e44:	fc 91       	ld	r31, X
    3e46:	11 97       	sbiw	r26, 0x01	; 1
    3e48:	14 96       	adiw	r26, 0x04	; 4
    3e4a:	8d 91       	ld	r24, X+
    3e4c:	9c 91       	ld	r25, X
    3e4e:	15 97       	sbiw	r26, 0x05	; 5
    3e50:	e8 0f       	add	r30, r24
    3e52:	f9 1f       	adc	r31, r25
    3e54:	10 82       	st	Z, r1
}
    3e56:	df 91       	pop	r29
    3e58:	cf 91       	pop	r28
    3e5a:	1f 91       	pop	r17
    3e5c:	0f 91       	pop	r16
    3e5e:	ff 90       	pop	r15
    3e60:	ef 90       	pop	r14
    3e62:	df 90       	pop	r13
    3e64:	cf 90       	pop	r12
    3e66:	bf 90       	pop	r11
    3e68:	af 90       	pop	r10
    3e6a:	08 95       	ret

00003e6c <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    3e6c:	fc 01       	movw	r30, r24
    3e6e:	80 81       	ld	r24, Z
    3e70:	91 81       	ldd	r25, Z+1	; 0x01
    3e72:	00 97       	sbiw	r24, 0x00	; 0
    3e74:	29 f0       	breq	.+10     	; 0x3e80 <_ZNK6String5toIntEv+0x14>
    3e76:	0e 94 f2 27 	call	0x4fe4	; 0x4fe4 <atol>
    3e7a:	9b 01       	movw	r18, r22
    3e7c:	ac 01       	movw	r20, r24
    3e7e:	03 c0       	rjmp	.+6      	; 0x3e86 <_ZNK6String5toIntEv+0x1a>
	return 0;
    3e80:	20 e0       	ldi	r18, 0x00	; 0
    3e82:	30 e0       	ldi	r19, 0x00	; 0
    3e84:	a9 01       	movw	r20, r18
}
    3e86:	b9 01       	movw	r22, r18
    3e88:	ca 01       	movw	r24, r20
    3e8a:	08 95       	ret

00003e8c <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    3e8c:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <malloc>
}
    3e90:	08 95       	ret

00003e92 <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    3e92:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <free>
} 
    3e96:	08 95       	ret

00003e98 <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    3e98:	21 e0       	ldi	r18, 0x01	; 1
    3e9a:	30 e0       	ldi	r19, 0x00	; 0
    3e9c:	fc 01       	movw	r30, r24
    3e9e:	80 81       	ld	r24, Z
    3ea0:	88 23       	and	r24, r24
    3ea2:	11 f0       	breq	.+4      	; 0x3ea8 <__cxa_guard_acquire+0x10>
    3ea4:	20 e0       	ldi	r18, 0x00	; 0
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	c9 01       	movw	r24, r18
    3eaa:	08 95       	ret

00003eac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    3eac:	21 e0       	ldi	r18, 0x01	; 1
    3eae:	fc 01       	movw	r30, r24
    3eb0:	20 83       	st	Z, r18
    3eb2:	08 95       	ret

00003eb4 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    3eb4:	08 95       	ret

00003eb6 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    3eb6:	08 95       	ret

00003eb8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    3eb8:	cf 92       	push	r12
    3eba:	df 92       	push	r13
    3ebc:	ef 92       	push	r14
    3ebe:	ff 92       	push	r15
    3ec0:	0f 93       	push	r16
    3ec2:	1f 93       	push	r17
    3ec4:	cf 93       	push	r28
    3ec6:	df 93       	push	r29
    3ec8:	6c 01       	movw	r12, r24
    3eca:	7b 01       	movw	r14, r22
    3ecc:	8a 01       	movw	r16, r20
  size_t n = 0;
    3ece:	c0 e0       	ldi	r28, 0x00	; 0
    3ed0:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    3ed2:	0f c0       	rjmp	.+30     	; 0x3ef2 <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
    3ed4:	d7 01       	movw	r26, r14
    3ed6:	6d 91       	ld	r22, X+
    3ed8:	7d 01       	movw	r14, r26
    3eda:	d6 01       	movw	r26, r12
    3edc:	ed 91       	ld	r30, X+
    3ede:	fc 91       	ld	r31, X
    3ee0:	01 90       	ld	r0, Z+
    3ee2:	f0 81       	ld	r31, Z
    3ee4:	e0 2d       	mov	r30, r0
    3ee6:	c6 01       	movw	r24, r12
    3ee8:	09 95       	icall
    3eea:	c8 0f       	add	r28, r24
    3eec:	d9 1f       	adc	r29, r25
    3eee:	01 50       	subi	r16, 0x01	; 1
    3ef0:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    3ef2:	01 15       	cp	r16, r1
    3ef4:	11 05       	cpc	r17, r1
    3ef6:	71 f7       	brne	.-36     	; 0x3ed4 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    3ef8:	ce 01       	movw	r24, r28
    3efa:	df 91       	pop	r29
    3efc:	cf 91       	pop	r28
    3efe:	1f 91       	pop	r17
    3f00:	0f 91       	pop	r16
    3f02:	ff 90       	pop	r15
    3f04:	ef 90       	pop	r14
    3f06:	df 90       	pop	r13
    3f08:	cf 90       	pop	r12
    3f0a:	08 95       	ret

00003f0c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    3f0c:	db 01       	movw	r26, r22
    3f0e:	0d 90       	ld	r0, X+
    3f10:	00 20       	and	r0, r0
    3f12:	e9 f7       	brne	.-6      	; 0x3f0e <_ZN5Print5writeEPKc+0x2>
    3f14:	ad 01       	movw	r20, r26
    3f16:	41 50       	subi	r20, 0x01	; 1
    3f18:	50 40       	sbci	r21, 0x00	; 0
    3f1a:	46 1b       	sub	r20, r22
    3f1c:	57 0b       	sbc	r21, r23
    3f1e:	dc 01       	movw	r26, r24
    3f20:	ed 91       	ld	r30, X+
    3f22:	fc 91       	ld	r31, X
    3f24:	02 80       	ldd	r0, Z+2	; 0x02
    3f26:	f3 81       	ldd	r31, Z+3	; 0x03
    3f28:	e0 2d       	mov	r30, r0
    3f2a:	09 95       	icall
    3f2c:	08 95       	ret

00003f2e <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    3f2e:	ef 92       	push	r14
    3f30:	ff 92       	push	r15
    3f32:	0f 93       	push	r16
    3f34:	1f 93       	push	r17
    3f36:	cf 93       	push	r28
    3f38:	df 93       	push	r29
    3f3a:	7c 01       	movw	r14, r24
  const prog_char *p = (const prog_char *)ifsh;
    3f3c:	06 2f       	mov	r16, r22
    3f3e:	17 2f       	mov	r17, r23
  size_t n = 0;
    3f40:	c0 e0       	ldi	r28, 0x00	; 0
    3f42:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
    3f44:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    3f46:	0f 5f       	subi	r16, 0xFF	; 255
    3f48:	1f 4f       	sbci	r17, 0xFF	; 255
    3f4a:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    3f4c:	66 23       	and	r22, r22
    3f4e:	51 f0       	breq	.+20     	; 0x3f64 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    3f50:	f7 01       	movw	r30, r14
    3f52:	a0 81       	ld	r26, Z
    3f54:	b1 81       	ldd	r27, Z+1	; 0x01
    3f56:	ed 91       	ld	r30, X+
    3f58:	fc 91       	ld	r31, X
    3f5a:	c7 01       	movw	r24, r14
    3f5c:	09 95       	icall
    3f5e:	c8 0f       	add	r28, r24
    3f60:	d9 1f       	adc	r29, r25

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
  size_t n = 0;
  while (1) {
    3f62:	f0 cf       	rjmp	.-32     	; 0x3f44 <_ZN5Print5printEPK19__FlashStringHelper+0x16>
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    3f64:	ce 01       	movw	r24, r28
    3f66:	df 91       	pop	r29
    3f68:	cf 91       	pop	r28
    3f6a:	1f 91       	pop	r17
    3f6c:	0f 91       	pop	r16
    3f6e:	ff 90       	pop	r15
    3f70:	ef 90       	pop	r14
    3f72:	08 95       	ret

00003f74 <_ZN5Print5printERK6String>:

size_t Print::print(const String &s)
{
    3f74:	af 92       	push	r10
    3f76:	bf 92       	push	r11
    3f78:	cf 92       	push	r12
    3f7a:	df 92       	push	r13
    3f7c:	ef 92       	push	r14
    3f7e:	ff 92       	push	r15
    3f80:	0f 93       	push	r16
    3f82:	1f 93       	push	r17
    3f84:	cf 93       	push	r28
    3f86:	df 93       	push	r29
    3f88:	7c 01       	movw	r14, r24
    3f8a:	6b 01       	movw	r12, r22
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    3f8c:	c0 e0       	ldi	r28, 0x00	; 0
    3f8e:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    3f90:	00 e0       	ldi	r16, 0x00	; 0
    3f92:	10 e0       	ldi	r17, 0x00	; 0
  for (uint16_t i = 0; i < s.length(); i++) {
    3f94:	10 c0       	rjmp	.+32     	; 0x3fb6 <_ZN5Print5printERK6String+0x42>
    n += write(s[i]);
    3f96:	d7 01       	movw	r26, r14
    3f98:	ed 91       	ld	r30, X+
    3f9a:	fc 91       	ld	r31, X
    3f9c:	a0 80       	ld	r10, Z
    3f9e:	b1 80       	ldd	r11, Z+1	; 0x01
    3fa0:	c6 01       	movw	r24, r12
    3fa2:	be 01       	movw	r22, r28
    3fa4:	0e 94 18 1c 	call	0x3830	; 0x3830 <_ZNK6StringixEj>
    3fa8:	68 2f       	mov	r22, r24
    3faa:	c7 01       	movw	r24, r14
    3fac:	f5 01       	movw	r30, r10
    3fae:	09 95       	icall
    3fb0:	08 0f       	add	r16, r24
    3fb2:	19 1f       	adc	r17, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    3fb4:	21 96       	adiw	r28, 0x01	; 1
    3fb6:	f6 01       	movw	r30, r12
    3fb8:	84 81       	ldd	r24, Z+4	; 0x04
    3fba:	95 81       	ldd	r25, Z+5	; 0x05
    3fbc:	c8 17       	cp	r28, r24
    3fbe:	d9 07       	cpc	r29, r25
    3fc0:	50 f3       	brcs	.-44     	; 0x3f96 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    3fc2:	c8 01       	movw	r24, r16
    3fc4:	df 91       	pop	r29
    3fc6:	cf 91       	pop	r28
    3fc8:	1f 91       	pop	r17
    3fca:	0f 91       	pop	r16
    3fcc:	ff 90       	pop	r15
    3fce:	ef 90       	pop	r14
    3fd0:	df 90       	pop	r13
    3fd2:	cf 90       	pop	r12
    3fd4:	bf 90       	pop	r11
    3fd6:	af 90       	pop	r10
    3fd8:	08 95       	ret

00003fda <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
  return write(str);
    3fda:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <_ZN5Print5writeEPKc>
}
    3fde:	08 95       	ret

00003fe0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    3fe0:	dc 01       	movw	r26, r24
    3fe2:	ed 91       	ld	r30, X+
    3fe4:	fc 91       	ld	r31, X
    3fe6:	01 90       	ld	r0, Z+
    3fe8:	f0 81       	ld	r31, Z
    3fea:	e0 2d       	mov	r30, r0
    3fec:	09 95       	icall
}
    3fee:	08 95       	ret

00003ff0 <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
{
    3ff0:	9c 01       	movw	r18, r24
    3ff2:	cb 01       	movw	r24, r22
  return x.printTo(*this);
    3ff4:	db 01       	movw	r26, r22
    3ff6:	ed 91       	ld	r30, X+
    3ff8:	fc 91       	ld	r31, X
    3ffa:	01 90       	ld	r0, Z+
    3ffc:	f0 81       	ld	r31, Z
    3ffe:	e0 2d       	mov	r30, r0
    4000:	b9 01       	movw	r22, r18
    4002:	09 95       	icall
}
    4004:	08 95       	ret

00004006 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
    4006:	0f 93       	push	r16
    4008:	1f 93       	push	r17
    400a:	cf 93       	push	r28
    400c:	df 93       	push	r29
    400e:	ec 01       	movw	r28, r24
  size_t n = print('\r');
    4010:	6d e0       	ldi	r22, 0x0D	; 13
    4012:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <_ZN5Print5printEc>
    4016:	8c 01       	movw	r16, r24
  n += print('\n');
    4018:	ce 01       	movw	r24, r28
    401a:	6a e0       	ldi	r22, 0x0A	; 10
    401c:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <_ZN5Print5printEc>
    4020:	08 0f       	add	r16, r24
    4022:	19 1f       	adc	r17, r25
  return n;
}
    4024:	c8 01       	movw	r24, r16
    4026:	df 91       	pop	r29
    4028:	cf 91       	pop	r28
    402a:	1f 91       	pop	r17
    402c:	0f 91       	pop	r16
    402e:	08 95       	ret

00004030 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    4030:	0f 93       	push	r16
    4032:	1f 93       	push	r17
    4034:	cf 93       	push	r28
    4036:	df 93       	push	r29
    4038:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
    403a:	0e 94 97 1f 	call	0x3f2e	; 0x3f2e <_ZN5Print5printEPK19__FlashStringHelper>
    403e:	8c 01       	movw	r16, r24
  n += println();
    4040:	ce 01       	movw	r24, r28
    4042:	0e 94 03 20 	call	0x4006	; 0x4006 <_ZN5Print7printlnEv>
    4046:	08 0f       	add	r16, r24
    4048:	19 1f       	adc	r17, r25
  return n;
}
    404a:	c8 01       	movw	r24, r16
    404c:	df 91       	pop	r29
    404e:	cf 91       	pop	r28
    4050:	1f 91       	pop	r17
    4052:	0f 91       	pop	r16
    4054:	08 95       	ret

00004056 <_ZN5Print7printlnERK6String>:
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
{
    4056:	0f 93       	push	r16
    4058:	1f 93       	push	r17
    405a:	cf 93       	push	r28
    405c:	df 93       	push	r29
    405e:	ec 01       	movw	r28, r24
  size_t n = print(s);
    4060:	0e 94 ba 1f 	call	0x3f74	; 0x3f74 <_ZN5Print5printERK6String>
    4064:	8c 01       	movw	r16, r24
  n += println();
    4066:	ce 01       	movw	r24, r28
    4068:	0e 94 03 20 	call	0x4006	; 0x4006 <_ZN5Print7printlnEv>
    406c:	08 0f       	add	r16, r24
    406e:	19 1f       	adc	r17, r25
  return n;
}
    4070:	c8 01       	movw	r24, r16
    4072:	df 91       	pop	r29
    4074:	cf 91       	pop	r28
    4076:	1f 91       	pop	r17
    4078:	0f 91       	pop	r16
    407a:	08 95       	ret

0000407c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    407c:	0f 93       	push	r16
    407e:	1f 93       	push	r17
    4080:	cf 93       	push	r28
    4082:	df 93       	push	r29
    4084:	ec 01       	movw	r28, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4086:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <_ZN5Print5writeEPKc>
    408a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    408c:	ce 01       	movw	r24, r28
    408e:	0e 94 03 20 	call	0x4006	; 0x4006 <_ZN5Print7printlnEv>
    4092:	08 0f       	add	r16, r24
    4094:	19 1f       	adc	r17, r25
  return n;
}
    4096:	c8 01       	movw	r24, r16
    4098:	df 91       	pop	r29
    409a:	cf 91       	pop	r28
    409c:	1f 91       	pop	r17
    409e:	0f 91       	pop	r16
    40a0:	08 95       	ret

000040a2 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    40a2:	0f 93       	push	r16
    40a4:	1f 93       	push	r17
    40a6:	cf 93       	push	r28
    40a8:	df 93       	push	r29
    40aa:	ec 01       	movw	r28, r24
  size_t n = print(c);
    40ac:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <_ZN5Print5printEc>
    40b0:	8c 01       	movw	r16, r24
  n += println();
    40b2:	ce 01       	movw	r24, r28
    40b4:	0e 94 03 20 	call	0x4006	; 0x4006 <_ZN5Print7printlnEv>
    40b8:	08 0f       	add	r16, r24
    40ba:	19 1f       	adc	r17, r25
  return n;
}
    40bc:	c8 01       	movw	r24, r16
    40be:	df 91       	pop	r29
    40c0:	cf 91       	pop	r28
    40c2:	1f 91       	pop	r17
    40c4:	0f 91       	pop	r16
    40c6:	08 95       	ret

000040c8 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
{
    40c8:	0f 93       	push	r16
    40ca:	1f 93       	push	r17
    40cc:	cf 93       	push	r28
    40ce:	df 93       	push	r29
    40d0:	ec 01       	movw	r28, r24
  size_t n = print(x);
    40d2:	0e 94 f8 1f 	call	0x3ff0	; 0x3ff0 <_ZN5Print5printERK9Printable>
    40d6:	8c 01       	movw	r16, r24
  n += println();
    40d8:	ce 01       	movw	r24, r28
    40da:	0e 94 03 20 	call	0x4006	; 0x4006 <_ZN5Print7printlnEv>
    40de:	08 0f       	add	r16, r24
    40e0:	19 1f       	adc	r17, r25
  return n;
}
    40e2:	c8 01       	movw	r24, r16
    40e4:	df 91       	pop	r29
    40e6:	cf 91       	pop	r28
    40e8:	1f 91       	pop	r17
    40ea:	0f 91       	pop	r16
    40ec:	08 95       	ret

000040ee <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    40ee:	8f 92       	push	r8
    40f0:	9f 92       	push	r9
    40f2:	af 92       	push	r10
    40f4:	bf 92       	push	r11
    40f6:	cf 92       	push	r12
    40f8:	df 92       	push	r13
    40fa:	ef 92       	push	r14
    40fc:	ff 92       	push	r15
    40fe:	0f 93       	push	r16
    4100:	1f 93       	push	r17
    4102:	df 93       	push	r29
    4104:	cf 93       	push	r28
    4106:	cd b7       	in	r28, 0x3d	; 61
    4108:	de b7       	in	r29, 0x3e	; 62
    410a:	a1 97       	sbiw	r28, 0x21	; 33
    410c:	0f b6       	in	r0, 0x3f	; 63
    410e:	f8 94       	cli
    4110:	de bf       	out	0x3e, r29	; 62
    4112:	0f be       	out	0x3f, r0	; 63
    4114:	cd bf       	out	0x3d, r28	; 61
    4116:	6c 01       	movw	r12, r24
    4118:	04 2f       	mov	r16, r20
    411a:	e5 2f       	mov	r30, r21
    411c:	cb 01       	movw	r24, r22
    411e:	12 2f       	mov	r17, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4120:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4122:	22 30       	cpi	r18, 0x02	; 2
    4124:	08 f4       	brcc	.+2      	; 0x4128 <_ZN5Print11printNumberEmh+0x3a>
    4126:	1a e0       	ldi	r17, 0x0A	; 10
    4128:	21 e2       	ldi	r18, 0x21	; 33
    412a:	e2 2e       	mov	r14, r18
    412c:	f1 2c       	mov	r15, r1
    412e:	ec 0e       	add	r14, r28
    4130:	fd 1e       	adc	r15, r29

  do {
    unsigned long m = n;
    n /= base;
    4132:	81 2e       	mov	r8, r17
    4134:	99 24       	eor	r9, r9
    4136:	aa 24       	eor	r10, r10
    4138:	bb 24       	eor	r11, r11
    413a:	03 c0       	rjmp	.+6      	; 0x4142 <_ZN5Print11printNumberEmh+0x54>
    413c:	02 2f       	mov	r16, r18
    413e:	e3 2f       	mov	r30, r19
    4140:	ca 01       	movw	r24, r20
    4142:	60 2f       	mov	r22, r16
    4144:	7e 2f       	mov	r23, r30
    4146:	a5 01       	movw	r20, r10
    4148:	94 01       	movw	r18, r8
    414a:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__udivmodsi4>
    char c = m - base * n;
    414e:	12 9f       	mul	r17, r18
    4150:	80 2d       	mov	r24, r0
    4152:	11 24       	eor	r1, r1
    4154:	08 1b       	sub	r16, r24
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4156:	08 94       	sec
    4158:	e1 08       	sbc	r14, r1
    415a:	f1 08       	sbc	r15, r1
    415c:	0a 30       	cpi	r16, 0x0A	; 10
    415e:	14 f4       	brge	.+4      	; 0x4164 <_ZN5Print11printNumberEmh+0x76>
    4160:	00 5d       	subi	r16, 0xD0	; 208
    4162:	01 c0       	rjmp	.+2      	; 0x4166 <_ZN5Print11printNumberEmh+0x78>
    4164:	09 5c       	subi	r16, 0xC9	; 201
    4166:	f7 01       	movw	r30, r14
    4168:	00 83       	st	Z, r16
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    416a:	21 15       	cp	r18, r1
    416c:	31 05       	cpc	r19, r1
    416e:	41 05       	cpc	r20, r1
    4170:	51 05       	cpc	r21, r1
    4172:	21 f7       	brne	.-56     	; 0x413c <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    4174:	c6 01       	movw	r24, r12
    4176:	b7 01       	movw	r22, r14
    4178:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <_ZN5Print5writeEPKc>
}
    417c:	a1 96       	adiw	r28, 0x21	; 33
    417e:	0f b6       	in	r0, 0x3f	; 63
    4180:	f8 94       	cli
    4182:	de bf       	out	0x3e, r29	; 62
    4184:	0f be       	out	0x3f, r0	; 63
    4186:	cd bf       	out	0x3d, r28	; 61
    4188:	cf 91       	pop	r28
    418a:	df 91       	pop	r29
    418c:	1f 91       	pop	r17
    418e:	0f 91       	pop	r16
    4190:	ff 90       	pop	r15
    4192:	ef 90       	pop	r14
    4194:	df 90       	pop	r13
    4196:	cf 90       	pop	r12
    4198:	bf 90       	pop	r11
    419a:	af 90       	pop	r10
    419c:	9f 90       	pop	r9
    419e:	8f 90       	pop	r8
    41a0:	08 95       	ret

000041a2 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    41a2:	21 15       	cp	r18, r1
    41a4:	31 05       	cpc	r19, r1
    41a6:	49 f4       	brne	.+18     	; 0x41ba <_ZN5Print5printEmi+0x18>
    41a8:	dc 01       	movw	r26, r24
    41aa:	ed 91       	ld	r30, X+
    41ac:	fc 91       	ld	r31, X
    41ae:	01 90       	ld	r0, Z+
    41b0:	f0 81       	ld	r31, Z
    41b2:	e0 2d       	mov	r30, r0
    41b4:	64 2f       	mov	r22, r20
    41b6:	09 95       	icall
    41b8:	08 95       	ret
  else return printNumber(n, base);
    41ba:	0e 94 77 20 	call	0x40ee	; 0x40ee <_ZN5Print11printNumberEmh>
}
    41be:	08 95       	ret

000041c0 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    41c0:	0f 93       	push	r16
    41c2:	1f 93       	push	r17
    41c4:	cf 93       	push	r28
    41c6:	df 93       	push	r29
    41c8:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    41ca:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print5printEmi>
    41ce:	8c 01       	movw	r16, r24
  n += println();
    41d0:	ce 01       	movw	r24, r28
    41d2:	0e 94 03 20 	call	0x4006	; 0x4006 <_ZN5Print7printlnEv>
    41d6:	08 0f       	add	r16, r24
    41d8:	19 1f       	adc	r17, r25
  return n;
}
    41da:	c8 01       	movw	r24, r16
    41dc:	df 91       	pop	r29
    41de:	cf 91       	pop	r28
    41e0:	1f 91       	pop	r17
    41e2:	0f 91       	pop	r16
    41e4:	08 95       	ret

000041e6 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    41e6:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    41e8:	ab 01       	movw	r20, r22
    41ea:	60 e0       	ldi	r22, 0x00	; 0
    41ec:	70 e0       	ldi	r23, 0x00	; 0
    41ee:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print5printEmi>
}
    41f2:	08 95       	ret

000041f4 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    41f4:	0f 93       	push	r16
    41f6:	1f 93       	push	r17
    41f8:	cf 93       	push	r28
    41fa:	df 93       	push	r29
    41fc:	ec 01       	movw	r28, r24
    41fe:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    4200:	ab 01       	movw	r20, r22
    4202:	60 e0       	ldi	r22, 0x00	; 0
    4204:	70 e0       	ldi	r23, 0x00	; 0
    4206:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print5printEmi>
    420a:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    420c:	ce 01       	movw	r24, r28
    420e:	0e 94 03 20 	call	0x4006	; 0x4006 <_ZN5Print7printlnEv>
    4212:	08 0f       	add	r16, r24
    4214:	19 1f       	adc	r17, r25
  return n;
}
    4216:	c8 01       	movw	r24, r16
    4218:	df 91       	pop	r29
    421a:	cf 91       	pop	r28
    421c:	1f 91       	pop	r17
    421e:	0f 91       	pop	r16
    4220:	08 95       	ret

00004222 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    4222:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    4224:	46 2f       	mov	r20, r22
    4226:	50 e0       	ldi	r21, 0x00	; 0
    4228:	60 e0       	ldi	r22, 0x00	; 0
    422a:	70 e0       	ldi	r23, 0x00	; 0
    422c:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print5printEmi>
}
    4230:	08 95       	ret

00004232 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    4232:	0f 93       	push	r16
    4234:	1f 93       	push	r17
    4236:	cf 93       	push	r28
    4238:	df 93       	push	r29
    423a:	ec 01       	movw	r28, r24
    423c:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    423e:	46 2f       	mov	r20, r22
    4240:	50 e0       	ldi	r21, 0x00	; 0
    4242:	60 e0       	ldi	r22, 0x00	; 0
    4244:	70 e0       	ldi	r23, 0x00	; 0
    4246:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print5printEmi>
    424a:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    424c:	ce 01       	movw	r24, r28
    424e:	0e 94 03 20 	call	0x4006	; 0x4006 <_ZN5Print7printlnEv>
    4252:	08 0f       	add	r16, r24
    4254:	19 1f       	adc	r17, r25
  return n;
}
    4256:	c8 01       	movw	r24, r16
    4258:	df 91       	pop	r29
    425a:	cf 91       	pop	r28
    425c:	1f 91       	pop	r17
    425e:	0f 91       	pop	r16
    4260:	08 95       	ret

00004262 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    4262:	cf 92       	push	r12
    4264:	df 92       	push	r13
    4266:	ef 92       	push	r14
    4268:	ff 92       	push	r15
    426a:	0f 93       	push	r16
    426c:	1f 93       	push	r17
    426e:	cf 93       	push	r28
    4270:	df 93       	push	r29
    4272:	ec 01       	movw	r28, r24
    4274:	7a 01       	movw	r14, r20
    4276:	8b 01       	movw	r16, r22
  if (base == 0) {
    4278:	21 15       	cp	r18, r1
    427a:	31 05       	cpc	r19, r1
    427c:	41 f4       	brne	.+16     	; 0x428e <_ZN5Print5printEli+0x2c>
    return write(n);
    427e:	e8 81       	ld	r30, Y
    4280:	f9 81       	ldd	r31, Y+1	; 0x01
    4282:	01 90       	ld	r0, Z+
    4284:	f0 81       	ld	r31, Z
    4286:	e0 2d       	mov	r30, r0
    4288:	64 2f       	mov	r22, r20
    428a:	09 95       	icall
    428c:	1a c0       	rjmp	.+52     	; 0x42c2 <_ZN5Print5printEli+0x60>
  } else if (base == 10) {
    428e:	2a 30       	cpi	r18, 0x0A	; 10
    4290:	31 05       	cpc	r19, r1
    4292:	a9 f4       	brne	.+42     	; 0x42be <_ZN5Print5printEli+0x5c>
    if (n < 0) {
    4294:	77 ff       	sbrs	r23, 7
    4296:	12 c0       	rjmp	.+36     	; 0x42bc <_ZN5Print5printEli+0x5a>
      int t = print('-');
    4298:	6d e2       	ldi	r22, 0x2D	; 45
    429a:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <_ZN5Print5printEc>
    429e:	6c 01       	movw	r12, r24
      n = -n;
    42a0:	44 27       	eor	r20, r20
    42a2:	55 27       	eor	r21, r21
    42a4:	ba 01       	movw	r22, r20
    42a6:	4e 19       	sub	r20, r14
    42a8:	5f 09       	sbc	r21, r15
    42aa:	60 0b       	sbc	r22, r16
    42ac:	71 0b       	sbc	r23, r17
      return printNumber(n, 10) + t;
    42ae:	ce 01       	movw	r24, r28
    42b0:	2a e0       	ldi	r18, 0x0A	; 10
    42b2:	0e 94 77 20 	call	0x40ee	; 0x40ee <_ZN5Print11printNumberEmh>
    42b6:	c8 0e       	add	r12, r24
    42b8:	d9 1e       	adc	r13, r25
    42ba:	04 c0       	rjmp	.+8      	; 0x42c4 <_ZN5Print5printEli+0x62>
    }
    return printNumber(n, 10);
    42bc:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    42be:	0e 94 77 20 	call	0x40ee	; 0x40ee <_ZN5Print11printNumberEmh>
    42c2:	6c 01       	movw	r12, r24
  }
}
    42c4:	c6 01       	movw	r24, r12
    42c6:	df 91       	pop	r29
    42c8:	cf 91       	pop	r28
    42ca:	1f 91       	pop	r17
    42cc:	0f 91       	pop	r16
    42ce:	ff 90       	pop	r15
    42d0:	ef 90       	pop	r14
    42d2:	df 90       	pop	r13
    42d4:	cf 90       	pop	r12
    42d6:	08 95       	ret

000042d8 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    42d8:	0f 93       	push	r16
    42da:	1f 93       	push	r17
    42dc:	cf 93       	push	r28
    42de:	df 93       	push	r29
    42e0:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    42e2:	0e 94 31 21 	call	0x4262	; 0x4262 <_ZN5Print5printEli>
    42e6:	8c 01       	movw	r16, r24
  n += println();
    42e8:	ce 01       	movw	r24, r28
    42ea:	0e 94 03 20 	call	0x4006	; 0x4006 <_ZN5Print7printlnEv>
    42ee:	08 0f       	add	r16, r24
    42f0:	19 1f       	adc	r17, r25
  return n;
}
    42f2:	c8 01       	movw	r24, r16
    42f4:	df 91       	pop	r29
    42f6:	cf 91       	pop	r28
    42f8:	1f 91       	pop	r17
    42fa:	0f 91       	pop	r16
    42fc:	08 95       	ret

000042fe <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    42fe:	9a 01       	movw	r18, r20
  return print((long) n, base);
    4300:	fb 01       	movw	r30, r22
    4302:	af 01       	movw	r20, r30
    4304:	66 27       	eor	r22, r22
    4306:	57 fd       	sbrc	r21, 7
    4308:	60 95       	com	r22
    430a:	76 2f       	mov	r23, r22
    430c:	0e 94 31 21 	call	0x4262	; 0x4262 <_ZN5Print5printEli>
}
    4310:	08 95       	ret

00004312 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    4312:	0f 93       	push	r16
    4314:	1f 93       	push	r17
    4316:	cf 93       	push	r28
    4318:	df 93       	push	r29
    431a:	ec 01       	movw	r28, r24
    431c:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    431e:	cb 01       	movw	r24, r22
    4320:	ac 01       	movw	r20, r24
    4322:	66 27       	eor	r22, r22
    4324:	57 fd       	sbrc	r21, 7
    4326:	60 95       	com	r22
    4328:	76 2f       	mov	r23, r22
    432a:	ce 01       	movw	r24, r28
    432c:	0e 94 31 21 	call	0x4262	; 0x4262 <_ZN5Print5printEli>
    4330:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    4332:	ce 01       	movw	r24, r28
    4334:	0e 94 03 20 	call	0x4006	; 0x4006 <_ZN5Print7printlnEv>
    4338:	08 0f       	add	r16, r24
    433a:	19 1f       	adc	r17, r25
  return n;
}
    433c:	c8 01       	movw	r24, r16
    433e:	df 91       	pop	r29
    4340:	cf 91       	pop	r28
    4342:	1f 91       	pop	r17
    4344:	0f 91       	pop	r16
    4346:	08 95       	ret

00004348 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    4348:	6f 92       	push	r6
    434a:	7f 92       	push	r7
    434c:	9f 92       	push	r9
    434e:	af 92       	push	r10
    4350:	bf 92       	push	r11
    4352:	cf 92       	push	r12
    4354:	df 92       	push	r13
    4356:	ef 92       	push	r14
    4358:	ff 92       	push	r15
    435a:	0f 93       	push	r16
    435c:	1f 93       	push	r17
    435e:	cf 93       	push	r28
    4360:	df 93       	push	r29
    4362:	3c 01       	movw	r6, r24
    4364:	7a 01       	movw	r14, r20
    4366:	8b 01       	movw	r16, r22
    4368:	c2 2e       	mov	r12, r18
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    436a:	cb 01       	movw	r24, r22
    436c:	ba 01       	movw	r22, r20
    436e:	20 e0       	ldi	r18, 0x00	; 0
    4370:	30 e0       	ldi	r19, 0x00	; 0
    4372:	a9 01       	movw	r20, r18
    4374:	0e 94 d1 11 	call	0x23a2	; 0x23a2 <__ltsf2>
    4378:	87 ff       	sbrs	r24, 7
    437a:	0a c0       	rjmp	.+20     	; 0x4390 <_ZN5Print10printFloatEdh+0x48>
  {
     n += print('-');
    437c:	c3 01       	movw	r24, r6
    437e:	6d e2       	ldi	r22, 0x2D	; 45
    4380:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <_ZN5Print5printEc>
    4384:	ec 01       	movw	r28, r24
     number = -number;
    4386:	17 fb       	bst	r17, 7
    4388:	10 95       	com	r17
    438a:	17 f9       	bld	r17, 7
    438c:	10 95       	com	r17
    438e:	02 c0       	rjmp	.+4      	; 0x4394 <_ZN5Print10printFloatEdh+0x4c>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    4390:	c0 e0       	ldi	r28, 0x00	; 0
    4392:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4394:	dd 24       	eor	r13, r13
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    4396:	50 e0       	ldi	r21, 0x00	; 0
    4398:	40 e0       	ldi	r20, 0x00	; 0
    439a:	30 e0       	ldi	r19, 0x00	; 0
    439c:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    439e:	11 c0       	rjmp	.+34     	; 0x43c2 <_ZN5Print10printFloatEdh+0x7a>
    rounding /= 10.0;
    43a0:	da 01       	movw	r26, r20
    43a2:	f9 01       	movw	r30, r18
    43a4:	6b 2f       	mov	r22, r27
    43a6:	74 2f       	mov	r23, r20
    43a8:	8f 2f       	mov	r24, r31
    43aa:	92 2f       	mov	r25, r18
    43ac:	20 e0       	ldi	r18, 0x00	; 0
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	40 e2       	ldi	r20, 0x20	; 32
    43b2:	51 e4       	ldi	r21, 0x41	; 65
    43b4:	0e 94 93 10 	call	0x2126	; 0x2126 <__divsf3>
    43b8:	56 2f       	mov	r21, r22
    43ba:	47 2f       	mov	r20, r23
    43bc:	38 2f       	mov	r19, r24
    43be:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    43c0:	d3 94       	inc	r13
    43c2:	dc 14       	cp	r13, r12
    43c4:	68 f3       	brcs	.-38     	; 0x43a0 <_ZN5Print10printFloatEdh+0x58>
    rounding /= 10.0;
  
  number += rounding;
    43c6:	c8 01       	movw	r24, r16
    43c8:	b7 01       	movw	r22, r14
    43ca:	da 01       	movw	r26, r20
    43cc:	f9 01       	movw	r30, r18
    43ce:	2b 2f       	mov	r18, r27
    43d0:	34 2f       	mov	r19, r20
    43d2:	4f 2f       	mov	r20, r31
    43d4:	5e 2f       	mov	r21, r30
    43d6:	0e 94 3b 0f 	call	0x1e76	; 0x1e76 <__addsf3>
    43da:	5b 01       	movw	r10, r22
    43dc:	f8 2e       	mov	r15, r24
    43de:	99 2e       	mov	r9, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    43e0:	7b 2d       	mov	r23, r11
    43e2:	0e 94 c5 0d 	call	0x1b8a	; 0x1b8a <__fixunssfsi>
    43e6:	16 2f       	mov	r17, r22
    43e8:	d7 2e       	mov	r13, r23
    43ea:	e8 2e       	mov	r14, r24
    43ec:	09 2f       	mov	r16, r25
  double remainder = number - (double)int_part;
    43ee:	0e 94 b3 12 	call	0x2566	; 0x2566 <__floatunsisf>
    43f2:	9b 01       	movw	r18, r22
    43f4:	ac 01       	movw	r20, r24
    43f6:	6a 2d       	mov	r22, r10
    43f8:	7b 2d       	mov	r23, r11
    43fa:	8f 2d       	mov	r24, r15
    43fc:	99 2d       	mov	r25, r9
    43fe:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__subsf3>
    4402:	96 2e       	mov	r9, r22
    4404:	a7 2e       	mov	r10, r23
    4406:	b8 2e       	mov	r11, r24
    4408:	f9 2e       	mov	r15, r25
  n += print(int_part);
    440a:	c3 01       	movw	r24, r6
    440c:	41 2f       	mov	r20, r17
    440e:	5d 2d       	mov	r21, r13
    4410:	6e 2d       	mov	r22, r14
    4412:	70 2f       	mov	r23, r16
    4414:	2a e0       	ldi	r18, 0x0A	; 10
    4416:	30 e0       	ldi	r19, 0x00	; 0
    4418:	0e 94 d1 20 	call	0x41a2	; 0x41a2 <_ZN5Print5printEmi>
    441c:	c8 0f       	add	r28, r24
    441e:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    4420:	cc 20       	and	r12, r12
    4422:	b9 f1       	breq	.+110    	; 0x4492 <_ZN5Print10printFloatEdh+0x14a>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4424:	c3 01       	movw	r24, r6
    4426:	64 e6       	ldi	r22, 0x64	; 100
    4428:	71 e0       	ldi	r23, 0x01	; 1
    442a:	0e 94 86 1f 	call	0x3f0c	; 0x3f0c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    442e:	c8 0f       	add	r28, r24
    4430:	d9 1f       	adc	r29, r25
    4432:	2f c0       	rjmp	.+94     	; 0x4492 <_ZN5Print10printFloatEdh+0x14a>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4434:	69 2d       	mov	r22, r9
    4436:	7a 2d       	mov	r23, r10
    4438:	8b 2d       	mov	r24, r11
    443a:	9f 2d       	mov	r25, r15
    443c:	20 e0       	ldi	r18, 0x00	; 0
    443e:	30 e0       	ldi	r19, 0x00	; 0
    4440:	40 e2       	ldi	r20, 0x20	; 32
    4442:	51 e4       	ldi	r21, 0x41	; 65
    4444:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <__mulsf3>
    4448:	d6 2e       	mov	r13, r22
    444a:	b7 2e       	mov	r11, r23
    444c:	a8 2e       	mov	r10, r24
    444e:	99 2e       	mov	r9, r25
    int toPrint = int(remainder);
    4450:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    4454:	7b 01       	movw	r14, r22
    4456:	00 27       	eor	r16, r16
    4458:	f7 fc       	sbrc	r15, 7
    445a:	00 95       	com	r16
    445c:	10 2f       	mov	r17, r16
    445e:	c3 01       	movw	r24, r6
    4460:	b8 01       	movw	r22, r16
    4462:	a7 01       	movw	r20, r14
    4464:	2a e0       	ldi	r18, 0x0A	; 10
    4466:	30 e0       	ldi	r19, 0x00	; 0
    4468:	0e 94 31 21 	call	0x4262	; 0x4262 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    446c:	c8 0f       	add	r28, r24
    446e:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    4470:	c8 01       	movw	r24, r16
    4472:	b7 01       	movw	r22, r14
    4474:	0e 94 01 12 	call	0x2402	; 0x2402 <__floatsisf>
    4478:	9b 01       	movw	r18, r22
    447a:	ac 01       	movw	r20, r24
    447c:	6d 2d       	mov	r22, r13
    447e:	7b 2d       	mov	r23, r11
    4480:	8a 2d       	mov	r24, r10
    4482:	99 2d       	mov	r25, r9
    4484:	0e 94 68 0f 	call	0x1ed0	; 0x1ed0 <__subsf3>
    4488:	96 2e       	mov	r9, r22
    448a:	a7 2e       	mov	r10, r23
    448c:	b8 2e       	mov	r11, r24
    448e:	f9 2e       	mov	r15, r25
    4490:	ca 94       	dec	r12
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    4492:	cc 20       	and	r12, r12
    4494:	79 f6       	brne	.-98     	; 0x4434 <_ZN5Print10printFloatEdh+0xec>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    4496:	ce 01       	movw	r24, r28
    4498:	df 91       	pop	r29
    449a:	cf 91       	pop	r28
    449c:	1f 91       	pop	r17
    449e:	0f 91       	pop	r16
    44a0:	ff 90       	pop	r15
    44a2:	ef 90       	pop	r14
    44a4:	df 90       	pop	r13
    44a6:	cf 90       	pop	r12
    44a8:	bf 90       	pop	r11
    44aa:	af 90       	pop	r10
    44ac:	9f 90       	pop	r9
    44ae:	7f 90       	pop	r7
    44b0:	6f 90       	pop	r6
    44b2:	08 95       	ret

000044b4 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    44b4:	0e 94 a4 21 	call	0x4348	; 0x4348 <_ZN5Print10printFloatEdh>
}
    44b8:	08 95       	ret

000044ba <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    44ba:	0f 93       	push	r16
    44bc:	1f 93       	push	r17
    44be:	cf 93       	push	r28
    44c0:	df 93       	push	r29
    44c2:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    44c4:	0e 94 a4 21 	call	0x4348	; 0x4348 <_ZN5Print10printFloatEdh>
    44c8:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    44ca:	ce 01       	movw	r24, r28
    44cc:	0e 94 03 20 	call	0x4006	; 0x4006 <_ZN5Print7printlnEv>
    44d0:	08 0f       	add	r16, r24
    44d2:	19 1f       	adc	r17, r25
  return n;
}
    44d4:	c8 01       	movw	r24, r16
    44d6:	df 91       	pop	r29
    44d8:	cf 91       	pop	r28
    44da:	1f 91       	pop	r17
    44dc:	0f 91       	pop	r16
    44de:	08 95       	ret

000044e0 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    44e0:	fc 01       	movw	r30, r24
    44e2:	84 85       	ldd	r24, Z+12	; 0x0c
    44e4:	95 85       	ldd	r25, Z+13	; 0x0d
    44e6:	fc 01       	movw	r30, r24
    44e8:	e0 5c       	subi	r30, 0xC0	; 192
    44ea:	ff 4f       	sbci	r31, 0xFF	; 255
    44ec:	20 81       	ld	r18, Z
    44ee:	31 81       	ldd	r19, Z+1	; 0x01
    44f0:	8e 5b       	subi	r24, 0xBE	; 190
    44f2:	9f 4f       	sbci	r25, 0xFF	; 255
    44f4:	fc 01       	movw	r30, r24
    44f6:	80 81       	ld	r24, Z
    44f8:	91 81       	ldd	r25, Z+1	; 0x01
    44fa:	28 1b       	sub	r18, r24
    44fc:	39 0b       	sbc	r19, r25
    44fe:	2f 73       	andi	r18, 0x3F	; 63
    4500:	30 70       	andi	r19, 0x00	; 0
}
    4502:	c9 01       	movw	r24, r18
    4504:	08 95       	ret

00004506 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    4506:	fc 01       	movw	r30, r24
    4508:	84 85       	ldd	r24, Z+12	; 0x0c
    450a:	95 85       	ldd	r25, Z+13	; 0x0d
    450c:	fc 01       	movw	r30, r24
    450e:	e0 5c       	subi	r30, 0xC0	; 192
    4510:	ff 4f       	sbci	r31, 0xFF	; 255
    4512:	40 81       	ld	r20, Z
    4514:	51 81       	ldd	r21, Z+1	; 0x01
    4516:	fc 01       	movw	r30, r24
    4518:	ee 5b       	subi	r30, 0xBE	; 190
    451a:	ff 4f       	sbci	r31, 0xFF	; 255
    451c:	20 81       	ld	r18, Z
    451e:	31 81       	ldd	r19, Z+1	; 0x01
    4520:	42 17       	cp	r20, r18
    4522:	53 07       	cpc	r21, r19
    4524:	41 f0       	breq	.+16     	; 0x4536 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    4526:	01 90       	ld	r0, Z+
    4528:	f0 81       	ld	r31, Z
    452a:	e0 2d       	mov	r30, r0
    452c:	e8 0f       	add	r30, r24
    452e:	f9 1f       	adc	r31, r25
    4530:	20 81       	ld	r18, Z
    4532:	30 e0       	ldi	r19, 0x00	; 0
    4534:	02 c0       	rjmp	.+4      	; 0x453a <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    4536:	2f ef       	ldi	r18, 0xFF	; 255
    4538:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    453a:	c9 01       	movw	r24, r18
    453c:	08 95       	ret

0000453e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    453e:	fc 01       	movw	r30, r24
    4540:	84 85       	ldd	r24, Z+12	; 0x0c
    4542:	95 85       	ldd	r25, Z+13	; 0x0d
    4544:	fc 01       	movw	r30, r24
    4546:	e0 5c       	subi	r30, 0xC0	; 192
    4548:	ff 4f       	sbci	r31, 0xFF	; 255
    454a:	40 81       	ld	r20, Z
    454c:	51 81       	ldd	r21, Z+1	; 0x01
    454e:	fc 01       	movw	r30, r24
    4550:	ee 5b       	subi	r30, 0xBE	; 190
    4552:	ff 4f       	sbci	r31, 0xFF	; 255
    4554:	20 81       	ld	r18, Z
    4556:	31 81       	ldd	r19, Z+1	; 0x01
    4558:	42 17       	cp	r20, r18
    455a:	53 07       	cpc	r21, r19
    455c:	71 f0       	breq	.+28     	; 0x457a <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    455e:	a0 81       	ld	r26, Z
    4560:	b1 81       	ldd	r27, Z+1	; 0x01
    4562:	a8 0f       	add	r26, r24
    4564:	b9 1f       	adc	r27, r25
    4566:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    4568:	80 81       	ld	r24, Z
    456a:	91 81       	ldd	r25, Z+1	; 0x01
    456c:	01 96       	adiw	r24, 0x01	; 1
    456e:	8f 73       	andi	r24, 0x3F	; 63
    4570:	90 70       	andi	r25, 0x00	; 0
    4572:	91 83       	std	Z+1, r25	; 0x01
    4574:	80 83       	st	Z, r24
    return c;
    4576:	30 e0       	ldi	r19, 0x00	; 0
    4578:	02 c0       	rjmp	.+4      	; 0x457e <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    457a:	2f ef       	ldi	r18, 0xFF	; 255
    457c:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    457e:	c9 01       	movw	r24, r18
    4580:	08 95       	ret

00004582 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    4582:	dc 01       	movw	r26, r24
    4584:	1e 96       	adiw	r26, 0x0e	; 14
    4586:	8d 91       	ld	r24, X+
    4588:	9c 91       	ld	r25, X
    458a:	1f 97       	sbiw	r26, 0x0f	; 15
    458c:	fc 01       	movw	r30, r24
    458e:	e0 5c       	subi	r30, 0xC0	; 192
    4590:	ff 4f       	sbci	r31, 0xFF	; 255
    4592:	8e 5b       	subi	r24, 0xBE	; 190
    4594:	9f 4f       	sbci	r25, 0xFF	; 255
    4596:	40 81       	ld	r20, Z
    4598:	51 81       	ldd	r21, Z+1	; 0x01
    459a:	dc 01       	movw	r26, r24
    459c:	2d 91       	ld	r18, X+
    459e:	3c 91       	ld	r19, X
    45a0:	11 97       	sbiw	r26, 0x01	; 1
    45a2:	42 17       	cp	r20, r18
    45a4:	53 07       	cpc	r21, r19
    45a6:	b9 f7       	brne	.-18     	; 0x4596 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    45a8:	08 95       	ret

000045aa <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    45aa:	1f 93       	push	r17
    45ac:	fc 01       	movw	r30, r24
    45ae:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    45b0:	26 85       	ldd	r18, Z+14	; 0x0e
    45b2:	37 85       	ldd	r19, Z+15	; 0x0f
    45b4:	d9 01       	movw	r26, r18
    45b6:	a0 5c       	subi	r26, 0xC0	; 192
    45b8:	bf 4f       	sbci	r27, 0xFF	; 255
    45ba:	8d 91       	ld	r24, X+
    45bc:	9c 91       	ld	r25, X
    45be:	01 96       	adiw	r24, 0x01	; 1
    45c0:	60 e4       	ldi	r22, 0x40	; 64
    45c2:	70 e0       	ldi	r23, 0x00	; 0
    45c4:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    45c8:	d9 01       	movw	r26, r18
    45ca:	ae 5b       	subi	r26, 0xBE	; 190
    45cc:	bf 4f       	sbci	r27, 0xFF	; 255
    45ce:	4d 91       	ld	r20, X+
    45d0:	5c 91       	ld	r21, X
    45d2:	11 97       	sbiw	r26, 0x01	; 1
    45d4:	84 17       	cp	r24, r20
    45d6:	95 07       	cpc	r25, r21
    45d8:	d1 f3       	breq	.-12     	; 0x45ce <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    45da:	d9 01       	movw	r26, r18
    45dc:	a0 5c       	subi	r26, 0xC0	; 192
    45de:	bf 4f       	sbci	r27, 0xFF	; 255
    45e0:	0d 90       	ld	r0, X+
    45e2:	bc 91       	ld	r27, X
    45e4:	a0 2d       	mov	r26, r0
    45e6:	a2 0f       	add	r26, r18
    45e8:	b3 1f       	adc	r27, r19
    45ea:	1c 93       	st	X, r17
  _tx_buffer->head = i;
    45ec:	a6 85       	ldd	r26, Z+14	; 0x0e
    45ee:	b7 85       	ldd	r27, Z+15	; 0x0f
    45f0:	a0 5c       	subi	r26, 0xC0	; 192
    45f2:	bf 4f       	sbci	r27, 0xFF	; 255
    45f4:	11 96       	adiw	r26, 0x01	; 1
    45f6:	9c 93       	st	X, r25
    45f8:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
    45fa:	a6 89       	ldd	r26, Z+22	; 0x16
    45fc:	b7 89       	ldd	r27, Z+23	; 0x17
    45fe:	2c 91       	ld	r18, X
    4600:	81 e0       	ldi	r24, 0x01	; 1
    4602:	90 e0       	ldi	r25, 0x00	; 0
    4604:	05 8c       	ldd	r0, Z+29	; 0x1d
    4606:	02 c0       	rjmp	.+4      	; 0x460c <_ZN14HardwareSerial5writeEh+0x62>
    4608:	88 0f       	add	r24, r24
    460a:	99 1f       	adc	r25, r25
    460c:	0a 94       	dec	r0
    460e:	e2 f7       	brpl	.-8      	; 0x4608 <_ZN14HardwareSerial5writeEh+0x5e>
    4610:	28 2b       	or	r18, r24
    4612:	2c 93       	st	X, r18
  
  return 1;
}
    4614:	81 e0       	ldi	r24, 0x01	; 1
    4616:	90 e0       	ldi	r25, 0x00	; 0
    4618:	1f 91       	pop	r17
    461a:	08 95       	ret

0000461c <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    461c:	fb 01       	movw	r30, r22
    461e:	e0 5c       	subi	r30, 0xC0	; 192
    4620:	ff 4f       	sbci	r31, 0xFF	; 255
    4622:	20 81       	ld	r18, Z
    4624:	31 81       	ldd	r19, Z+1	; 0x01
    4626:	2f 5f       	subi	r18, 0xFF	; 255
    4628:	3f 4f       	sbci	r19, 0xFF	; 255
    462a:	2f 73       	andi	r18, 0x3F	; 63
    462c:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    462e:	db 01       	movw	r26, r22
    4630:	ae 5b       	subi	r26, 0xBE	; 190
    4632:	bf 4f       	sbci	r27, 0xFF	; 255
    4634:	4d 91       	ld	r20, X+
    4636:	5c 91       	ld	r21, X
    4638:	11 97       	sbiw	r26, 0x01	; 1
    463a:	24 17       	cp	r18, r20
    463c:	35 07       	cpc	r19, r21
    463e:	39 f0       	breq	.+14     	; 0x464e <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
    4640:	a0 81       	ld	r26, Z
    4642:	b1 81       	ldd	r27, Z+1	; 0x01
    4644:	a6 0f       	add	r26, r22
    4646:	b7 1f       	adc	r27, r23
    4648:	8c 93       	st	X, r24
    buffer->head = i;
    464a:	31 83       	std	Z+1, r19	; 0x01
    464c:	20 83       	st	Z, r18
    464e:	08 95       	ret

00004650 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    4650:	08 95       	ret

00004652 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    4652:	1f 92       	push	r1
    4654:	0f 92       	push	r0
    4656:	0f b6       	in	r0, 0x3f	; 63
    4658:	0f 92       	push	r0
    465a:	11 24       	eor	r1, r1
    465c:	2f 93       	push	r18
    465e:	3f 93       	push	r19
    4660:	4f 93       	push	r20
    4662:	5f 93       	push	r21
    4664:	6f 93       	push	r22
    4666:	7f 93       	push	r23
    4668:	8f 93       	push	r24
    466a:	9f 93       	push	r25
    466c:	af 93       	push	r26
    466e:	bf 93       	push	r27
    4670:	ef 93       	push	r30
    4672:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    4674:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
    4678:	69 e6       	ldi	r22, 0x69	; 105
    467a:	73 e0       	ldi	r23, 0x03	; 3
    467c:	0e 94 0e 23 	call	0x461c	; 0x461c <_Z10store_charhP11ring_buffer>
  }
    4680:	ff 91       	pop	r31
    4682:	ef 91       	pop	r30
    4684:	bf 91       	pop	r27
    4686:	af 91       	pop	r26
    4688:	9f 91       	pop	r25
    468a:	8f 91       	pop	r24
    468c:	7f 91       	pop	r23
    468e:	6f 91       	pop	r22
    4690:	5f 91       	pop	r21
    4692:	4f 91       	pop	r20
    4694:	3f 91       	pop	r19
    4696:	2f 91       	pop	r18
    4698:	0f 90       	pop	r0
    469a:	0f be       	out	0x3f, r0	; 63
    469c:	0f 90       	pop	r0
    469e:	1f 90       	pop	r1
    46a0:	18 95       	reti

000046a2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    46a2:	81 ef       	ldi	r24, 0xF1	; 241
    46a4:	93 e0       	ldi	r25, 0x03	; 3
    46a6:	0e 94 70 22 	call	0x44e0	; 0x44e0 <_ZN14HardwareSerial9availableEv>
    46aa:	00 97       	sbiw	r24, 0x00	; 0
    46ac:	11 f0       	breq	.+4      	; 0x46b2 <_Z14serialEventRunv+0x10>
    46ae:	0e 94 28 23 	call	0x4650	; 0x4650 <_Z11serialEventv>
    46b2:	08 95       	ret

000046b4 <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    46b4:	1f 92       	push	r1
    46b6:	0f 92       	push	r0
    46b8:	0f b6       	in	r0, 0x3f	; 63
    46ba:	0f 92       	push	r0
    46bc:	11 24       	eor	r1, r1
    46be:	2f 93       	push	r18
    46c0:	3f 93       	push	r19
    46c2:	5f 93       	push	r21
    46c4:	6f 93       	push	r22
    46c6:	7f 93       	push	r23
    46c8:	8f 93       	push	r24
    46ca:	9f 93       	push	r25
    46cc:	af 93       	push	r26
    46ce:	bf 93       	push	r27
    46d0:	ef 93       	push	r30
    46d2:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    46d4:	20 91 ed 03 	lds	r18, 0x03ED
    46d8:	30 91 ee 03 	lds	r19, 0x03EE
    46dc:	80 91 ef 03 	lds	r24, 0x03EF
    46e0:	90 91 f0 03 	lds	r25, 0x03F0
    46e4:	28 17       	cp	r18, r24
    46e6:	39 07       	cpc	r19, r25
    46e8:	31 f4       	brne	.+12     	; 0x46f6 <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    46ea:	80 91 c1 00 	lds	r24, 0x00C1
    46ee:	8f 7d       	andi	r24, 0xDF	; 223
    46f0:	80 93 c1 00 	sts	0x00C1, r24
    46f4:	16 c0       	rjmp	.+44     	; 0x4722 <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    46f6:	e0 91 ef 03 	lds	r30, 0x03EF
    46fa:	f0 91 f0 03 	lds	r31, 0x03F0
    46fe:	e3 55       	subi	r30, 0x53	; 83
    4700:	fc 4f       	sbci	r31, 0xFC	; 252
    4702:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    4704:	80 91 ef 03 	lds	r24, 0x03EF
    4708:	90 91 f0 03 	lds	r25, 0x03F0
    470c:	01 96       	adiw	r24, 0x01	; 1
    470e:	60 e4       	ldi	r22, 0x40	; 64
    4710:	70 e0       	ldi	r23, 0x00	; 0
    4712:	0e 94 06 25 	call	0x4a0c	; 0x4a0c <__divmodhi4>
    4716:	90 93 f0 03 	sts	0x03F0, r25
    471a:	80 93 ef 03 	sts	0x03EF, r24
	
  #if defined(UDR0)
    UDR0 = c;
    471e:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    4722:	ff 91       	pop	r31
    4724:	ef 91       	pop	r30
    4726:	bf 91       	pop	r27
    4728:	af 91       	pop	r26
    472a:	9f 91       	pop	r25
    472c:	8f 91       	pop	r24
    472e:	7f 91       	pop	r23
    4730:	6f 91       	pop	r22
    4732:	5f 91       	pop	r21
    4734:	3f 91       	pop	r19
    4736:	2f 91       	pop	r18
    4738:	0f 90       	pop	r0
    473a:	0f be       	out	0x3f, r0	; 63
    473c:	0f 90       	pop	r0
    473e:	1f 90       	pop	r1
    4740:	18 95       	reti

00004742 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:
#endif


// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
    4742:	8f 92       	push	r8
    4744:	af 92       	push	r10
    4746:	bf 92       	push	r11
    4748:	cf 92       	push	r12
    474a:	df 92       	push	r13
    474c:	ef 92       	push	r14
    474e:	ff 92       	push	r15
    4750:	0f 93       	push	r16
    4752:	1f 93       	push	r17
    4754:	df 93       	push	r29
    4756:	cf 93       	push	r28
    4758:	cd b7       	in	r28, 0x3d	; 61
    475a:	de b7       	in	r29, 0x3e	; 62
    475c:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    475e:	13 82       	std	Z+3, r1	; 0x03
    4760:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4762:	88 ee       	ldi	r24, 0xE8	; 232
    4764:	93 e0       	ldi	r25, 0x03	; 3
    4766:	a0 e0       	ldi	r26, 0x00	; 0
    4768:	b0 e0       	ldi	r27, 0x00	; 0
    476a:	84 83       	std	Z+4, r24	; 0x04
    476c:	95 83       	std	Z+5, r25	; 0x05
    476e:	a6 83       	std	Z+6, r26	; 0x06
    4770:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    4772:	81 e8       	ldi	r24, 0x81	; 129
    4774:	92 e0       	ldi	r25, 0x02	; 2
    4776:	91 83       	std	Z+1, r25	; 0x01
    4778:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    477a:	75 87       	std	Z+13, r23	; 0x0d
    477c:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
    477e:	57 87       	std	Z+15, r21	; 0x0f
    4780:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
    4782:	31 8b       	std	Z+17, r19	; 0x11
    4784:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
    4786:	13 8b       	std	Z+19, r17	; 0x13
    4788:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
    478a:	f5 8a       	std	Z+21, r15	; 0x15
    478c:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
    478e:	d7 8a       	std	Z+23, r13	; 0x17
    4790:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
    4792:	b1 8e       	std	Z+25, r11	; 0x19
    4794:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
    4796:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
    4798:	8e 85       	ldd	r24, Y+14	; 0x0e
    479a:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    479c:	8f 85       	ldd	r24, Y+15	; 0x0f
    479e:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    47a0:	88 89       	ldd	r24, Y+16	; 0x10
    47a2:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    47a4:	89 89       	ldd	r24, Y+17	; 0x11
    47a6:	86 8f       	std	Z+30, r24	; 0x1e
}
    47a8:	cf 91       	pop	r28
    47aa:	df 91       	pop	r29
    47ac:	1f 91       	pop	r17
    47ae:	0f 91       	pop	r16
    47b0:	ff 90       	pop	r15
    47b2:	ef 90       	pop	r14
    47b4:	df 90       	pop	r13
    47b6:	cf 90       	pop	r12
    47b8:	bf 90       	pop	r11
    47ba:	af 90       	pop	r10
    47bc:	8f 90       	pop	r8
    47be:	08 95       	ret

000047c0 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    47c0:	df 92       	push	r13
    47c2:	ef 92       	push	r14
    47c4:	ff 92       	push	r15
    47c6:	0f 93       	push	r16
    47c8:	1f 93       	push	r17
    47ca:	cf 93       	push	r28
    47cc:	df 93       	push	r29
    47ce:	ec 01       	movw	r28, r24
    47d0:	7a 01       	movw	r14, r20
    47d2:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    47d4:	dd 24       	eor	r13, r13
    47d6:	d3 94       	inc	r13
    47d8:	40 30       	cpi	r20, 0x00	; 0
    47da:	81 ee       	ldi	r24, 0xE1	; 225
    47dc:	58 07       	cpc	r21, r24
    47de:	80 e0       	ldi	r24, 0x00	; 0
    47e0:	68 07       	cpc	r22, r24
    47e2:	80 e0       	ldi	r24, 0x00	; 0
    47e4:	78 07       	cpc	r23, r24
    47e6:	49 f4       	brne	.+18     	; 0x47fa <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    47e8:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    47ea:	ec 89       	ldd	r30, Y+20	; 0x14
    47ec:	fd 89       	ldd	r31, Y+21	; 0x15
    47ee:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    47f0:	60 e8       	ldi	r22, 0x80	; 128
    47f2:	74 e8       	ldi	r23, 0x84	; 132
    47f4:	8e e1       	ldi	r24, 0x1E	; 30
    47f6:	90 e0       	ldi	r25, 0x00	; 0
    47f8:	0f c0       	rjmp	.+30     	; 0x4818 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    47fa:	ec 89       	ldd	r30, Y+20	; 0x14
    47fc:	fd 89       	ldd	r31, Y+21	; 0x15
    47fe:	81 e0       	ldi	r24, 0x01	; 1
    4800:	90 e0       	ldi	r25, 0x00	; 0
    4802:	0e 8c       	ldd	r0, Y+30	; 0x1e
    4804:	02 c0       	rjmp	.+4      	; 0x480a <_ZN14HardwareSerial5beginEm+0x4a>
    4806:	88 0f       	add	r24, r24
    4808:	99 1f       	adc	r25, r25
    480a:	0a 94       	dec	r0
    480c:	e2 f7       	brpl	.-8      	; 0x4806 <_ZN14HardwareSerial5beginEm+0x46>
    480e:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4810:	60 e0       	ldi	r22, 0x00	; 0
    4812:	79 e0       	ldi	r23, 0x09	; 9
    4814:	8d e3       	ldi	r24, 0x3D	; 61
    4816:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4818:	a8 01       	movw	r20, r16
    481a:	97 01       	movw	r18, r14
    481c:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__udivmodsi4>
    4820:	21 50       	subi	r18, 0x01	; 1
    4822:	30 40       	sbci	r19, 0x00	; 0
    4824:	40 40       	sbci	r20, 0x00	; 0
    4826:	50 40       	sbci	r21, 0x00	; 0
    4828:	56 95       	lsr	r21
    482a:	47 95       	ror	r20
    482c:	37 95       	ror	r19
    482e:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    4830:	80 e1       	ldi	r24, 0x10	; 16
    4832:	20 30       	cpi	r18, 0x00	; 0
    4834:	38 07       	cpc	r19, r24
    4836:	10 f0       	brcs	.+4      	; 0x483c <_ZN14HardwareSerial5beginEm+0x7c>
    4838:	dd 20       	and	r13, r13
    483a:	b1 f6       	brne	.-84     	; 0x47e8 <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    483c:	e8 89       	ldd	r30, Y+16	; 0x10
    483e:	f9 89       	ldd	r31, Y+17	; 0x11
    4840:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    4842:	ea 89       	ldd	r30, Y+18	; 0x12
    4844:	fb 89       	ldd	r31, Y+19	; 0x13
    4846:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    4848:	ee 89       	ldd	r30, Y+22	; 0x16
    484a:	ff 89       	ldd	r31, Y+23	; 0x17
    484c:	40 81       	ld	r20, Z
    484e:	81 e0       	ldi	r24, 0x01	; 1
    4850:	90 e0       	ldi	r25, 0x00	; 0
    4852:	9c 01       	movw	r18, r24
    4854:	0a 8c       	ldd	r0, Y+26	; 0x1a
    4856:	02 c0       	rjmp	.+4      	; 0x485c <_ZN14HardwareSerial5beginEm+0x9c>
    4858:	22 0f       	add	r18, r18
    485a:	33 1f       	adc	r19, r19
    485c:	0a 94       	dec	r0
    485e:	e2 f7       	brpl	.-8      	; 0x4858 <_ZN14HardwareSerial5beginEm+0x98>
    4860:	42 2b       	or	r20, r18
    4862:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    4864:	ee 89       	ldd	r30, Y+22	; 0x16
    4866:	ff 89       	ldd	r31, Y+23	; 0x17
    4868:	40 81       	ld	r20, Z
    486a:	9c 01       	movw	r18, r24
    486c:	0b 8c       	ldd	r0, Y+27	; 0x1b
    486e:	02 c0       	rjmp	.+4      	; 0x4874 <_ZN14HardwareSerial5beginEm+0xb4>
    4870:	22 0f       	add	r18, r18
    4872:	33 1f       	adc	r19, r19
    4874:	0a 94       	dec	r0
    4876:	e2 f7       	brpl	.-8      	; 0x4870 <_ZN14HardwareSerial5beginEm+0xb0>
    4878:	42 2b       	or	r20, r18
    487a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    487c:	ee 89       	ldd	r30, Y+22	; 0x16
    487e:	ff 89       	ldd	r31, Y+23	; 0x17
    4880:	40 81       	ld	r20, Z
    4882:	9c 01       	movw	r18, r24
    4884:	0c 8c       	ldd	r0, Y+28	; 0x1c
    4886:	02 c0       	rjmp	.+4      	; 0x488c <_ZN14HardwareSerial5beginEm+0xcc>
    4888:	22 0f       	add	r18, r18
    488a:	33 1f       	adc	r19, r19
    488c:	0a 94       	dec	r0
    488e:	e2 f7       	brpl	.-8      	; 0x4888 <_ZN14HardwareSerial5beginEm+0xc8>
    4890:	42 2b       	or	r20, r18
    4892:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    4894:	ee 89       	ldd	r30, Y+22	; 0x16
    4896:	ff 89       	ldd	r31, Y+23	; 0x17
    4898:	20 81       	ld	r18, Z
    489a:	0d 8c       	ldd	r0, Y+29	; 0x1d
    489c:	02 c0       	rjmp	.+4      	; 0x48a2 <_ZN14HardwareSerial5beginEm+0xe2>
    489e:	88 0f       	add	r24, r24
    48a0:	99 1f       	adc	r25, r25
    48a2:	0a 94       	dec	r0
    48a4:	e2 f7       	brpl	.-8      	; 0x489e <_ZN14HardwareSerial5beginEm+0xde>
    48a6:	80 95       	com	r24
    48a8:	82 23       	and	r24, r18
    48aa:	80 83       	st	Z, r24
}
    48ac:	df 91       	pop	r29
    48ae:	cf 91       	pop	r28
    48b0:	1f 91       	pop	r17
    48b2:	0f 91       	pop	r16
    48b4:	ff 90       	pop	r15
    48b6:	ef 90       	pop	r14
    48b8:	df 90       	pop	r13
    48ba:	08 95       	ret

000048bc <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    48bc:	cf 93       	push	r28
    48be:	df 93       	push	r29
    48c0:	fc 01       	movw	r30, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    48c2:	86 85       	ldd	r24, Z+14	; 0x0e
    48c4:	97 85       	ldd	r25, Z+15	; 0x0f
    48c6:	dc 01       	movw	r26, r24
    48c8:	a0 5c       	subi	r26, 0xC0	; 192
    48ca:	bf 4f       	sbci	r27, 0xFF	; 255
    48cc:	8e 5b       	subi	r24, 0xBE	; 190
    48ce:	9f 4f       	sbci	r25, 0xFF	; 255
    48d0:	4d 91       	ld	r20, X+
    48d2:	5c 91       	ld	r21, X
    48d4:	11 97       	sbiw	r26, 0x01	; 1
    48d6:	ec 01       	movw	r28, r24
    48d8:	28 81       	ld	r18, Y
    48da:	39 81       	ldd	r19, Y+1	; 0x01
    48dc:	42 17       	cp	r20, r18
    48de:	53 07       	cpc	r21, r19
    48e0:	b9 f7       	brne	.-18     	; 0x48d0 <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
    48e2:	a6 89       	ldd	r26, Z+22	; 0x16
    48e4:	b7 89       	ldd	r27, Z+23	; 0x17
    48e6:	4c 91       	ld	r20, X
    48e8:	81 e0       	ldi	r24, 0x01	; 1
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	9c 01       	movw	r18, r24
    48ee:	02 8c       	ldd	r0, Z+26	; 0x1a
    48f0:	02 c0       	rjmp	.+4      	; 0x48f6 <_ZN14HardwareSerial3endEv+0x3a>
    48f2:	22 0f       	add	r18, r18
    48f4:	33 1f       	adc	r19, r19
    48f6:	0a 94       	dec	r0
    48f8:	e2 f7       	brpl	.-8      	; 0x48f2 <_ZN14HardwareSerial3endEv+0x36>
    48fa:	20 95       	com	r18
    48fc:	24 23       	and	r18, r20
    48fe:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    4900:	a6 89       	ldd	r26, Z+22	; 0x16
    4902:	b7 89       	ldd	r27, Z+23	; 0x17
    4904:	4c 91       	ld	r20, X
    4906:	9c 01       	movw	r18, r24
    4908:	03 8c       	ldd	r0, Z+27	; 0x1b
    490a:	02 c0       	rjmp	.+4      	; 0x4910 <_ZN14HardwareSerial3endEv+0x54>
    490c:	22 0f       	add	r18, r18
    490e:	33 1f       	adc	r19, r19
    4910:	0a 94       	dec	r0
    4912:	e2 f7       	brpl	.-8      	; 0x490c <_ZN14HardwareSerial3endEv+0x50>
    4914:	20 95       	com	r18
    4916:	24 23       	and	r18, r20
    4918:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    491a:	a6 89       	ldd	r26, Z+22	; 0x16
    491c:	b7 89       	ldd	r27, Z+23	; 0x17
    491e:	4c 91       	ld	r20, X
    4920:	9c 01       	movw	r18, r24
    4922:	04 8c       	ldd	r0, Z+28	; 0x1c
    4924:	02 c0       	rjmp	.+4      	; 0x492a <_ZN14HardwareSerial3endEv+0x6e>
    4926:	22 0f       	add	r18, r18
    4928:	33 1f       	adc	r19, r19
    492a:	0a 94       	dec	r0
    492c:	e2 f7       	brpl	.-8      	; 0x4926 <_ZN14HardwareSerial3endEv+0x6a>
    492e:	20 95       	com	r18
    4930:	24 23       	and	r18, r20
    4932:	2c 93       	st	X, r18
  cbi(*_ucsrb, _udrie);
    4934:	a6 89       	ldd	r26, Z+22	; 0x16
    4936:	b7 89       	ldd	r27, Z+23	; 0x17
    4938:	2c 91       	ld	r18, X
    493a:	05 8c       	ldd	r0, Z+29	; 0x1d
    493c:	02 c0       	rjmp	.+4      	; 0x4942 <_ZN14HardwareSerial3endEv+0x86>
    493e:	88 0f       	add	r24, r24
    4940:	99 1f       	adc	r25, r25
    4942:	0a 94       	dec	r0
    4944:	e2 f7       	brpl	.-8      	; 0x493e <_ZN14HardwareSerial3endEv+0x82>
    4946:	80 95       	com	r24
    4948:	82 23       	and	r24, r18
    494a:	8c 93       	st	X, r24
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    494c:	84 85       	ldd	r24, Z+12	; 0x0c
    494e:	95 85       	ldd	r25, Z+13	; 0x0d
    4950:	fc 01       	movw	r30, r24
    4952:	ee 5b       	subi	r30, 0xBE	; 190
    4954:	ff 4f       	sbci	r31, 0xFF	; 255
    4956:	20 81       	ld	r18, Z
    4958:	31 81       	ldd	r19, Z+1	; 0x01
    495a:	80 5c       	subi	r24, 0xC0	; 192
    495c:	9f 4f       	sbci	r25, 0xFF	; 255
    495e:	fc 01       	movw	r30, r24
    4960:	31 83       	std	Z+1, r19	; 0x01
    4962:	20 83       	st	Z, r18
}
    4964:	df 91       	pop	r29
    4966:	cf 91       	pop	r28
    4968:	08 95       	ret

0000496a <_GLOBAL__I_rx_buffer>:
    496a:	10 92 f4 03 	sts	0x03F4, r1
    496e:	10 92 f3 03 	sts	0x03F3, r1
    4972:	88 ee       	ldi	r24, 0xE8	; 232
    4974:	93 e0       	ldi	r25, 0x03	; 3
    4976:	a0 e0       	ldi	r26, 0x00	; 0
    4978:	b0 e0       	ldi	r27, 0x00	; 0
    497a:	80 93 f5 03 	sts	0x03F5, r24
    497e:	90 93 f6 03 	sts	0x03F6, r25
    4982:	a0 93 f7 03 	sts	0x03F7, r26
    4986:	b0 93 f8 03 	sts	0x03F8, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    498a:	e3 ef       	ldi	r30, 0xF3	; 243
    498c:	f3 e0       	ldi	r31, 0x03	; 3
    498e:	81 e8       	ldi	r24, 0x81	; 129
    4990:	92 e0       	ldi	r25, 0x02	; 2
    4992:	92 93       	st	-Z, r25
    4994:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
    4996:	89 e6       	ldi	r24, 0x69	; 105
    4998:	93 e0       	ldi	r25, 0x03	; 3
    499a:	95 87       	std	Z+13, r25	; 0x0d
    499c:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    499e:	8d ea       	ldi	r24, 0xAD	; 173
    49a0:	93 e0       	ldi	r25, 0x03	; 3
    49a2:	97 87       	std	Z+15, r25	; 0x0f
    49a4:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    49a6:	85 ec       	ldi	r24, 0xC5	; 197
    49a8:	90 e0       	ldi	r25, 0x00	; 0
    49aa:	91 8b       	std	Z+17, r25	; 0x11
    49ac:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    49ae:	84 ec       	ldi	r24, 0xC4	; 196
    49b0:	90 e0       	ldi	r25, 0x00	; 0
    49b2:	93 8b       	std	Z+19, r25	; 0x13
    49b4:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    49b6:	80 ec       	ldi	r24, 0xC0	; 192
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	95 8b       	std	Z+21, r25	; 0x15
    49bc:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    49be:	81 ec       	ldi	r24, 0xC1	; 193
    49c0:	90 e0       	ldi	r25, 0x00	; 0
    49c2:	97 8b       	std	Z+23, r25	; 0x17
    49c4:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
    49c6:	86 ec       	ldi	r24, 0xC6	; 198
    49c8:	90 e0       	ldi	r25, 0x00	; 0
    49ca:	91 8f       	std	Z+25, r25	; 0x19
    49cc:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
    49ce:	84 e0       	ldi	r24, 0x04	; 4
    49d0:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    49d2:	83 e0       	ldi	r24, 0x03	; 3
    49d4:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    49d6:	87 e0       	ldi	r24, 0x07	; 7
    49d8:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    49da:	85 e0       	ldi	r24, 0x05	; 5
    49dc:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    49de:	81 e0       	ldi	r24, 0x01	; 1
    49e0:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    49e2:	08 95       	ret

000049e4 <__udivmodhi4>:
    49e4:	aa 1b       	sub	r26, r26
    49e6:	bb 1b       	sub	r27, r27
    49e8:	51 e1       	ldi	r21, 0x11	; 17
    49ea:	07 c0       	rjmp	.+14     	; 0x49fa <__udivmodhi4_ep>

000049ec <__udivmodhi4_loop>:
    49ec:	aa 1f       	adc	r26, r26
    49ee:	bb 1f       	adc	r27, r27
    49f0:	a6 17       	cp	r26, r22
    49f2:	b7 07       	cpc	r27, r23
    49f4:	10 f0       	brcs	.+4      	; 0x49fa <__udivmodhi4_ep>
    49f6:	a6 1b       	sub	r26, r22
    49f8:	b7 0b       	sbc	r27, r23

000049fa <__udivmodhi4_ep>:
    49fa:	88 1f       	adc	r24, r24
    49fc:	99 1f       	adc	r25, r25
    49fe:	5a 95       	dec	r21
    4a00:	a9 f7       	brne	.-22     	; 0x49ec <__udivmodhi4_loop>
    4a02:	80 95       	com	r24
    4a04:	90 95       	com	r25
    4a06:	bc 01       	movw	r22, r24
    4a08:	cd 01       	movw	r24, r26
    4a0a:	08 95       	ret

00004a0c <__divmodhi4>:
    4a0c:	97 fb       	bst	r25, 7
    4a0e:	09 2e       	mov	r0, r25
    4a10:	07 26       	eor	r0, r23
    4a12:	0a d0       	rcall	.+20     	; 0x4a28 <__divmodhi4_neg1>
    4a14:	77 fd       	sbrc	r23, 7
    4a16:	04 d0       	rcall	.+8      	; 0x4a20 <__divmodhi4_neg2>
    4a18:	e5 df       	rcall	.-54     	; 0x49e4 <__udivmodhi4>
    4a1a:	06 d0       	rcall	.+12     	; 0x4a28 <__divmodhi4_neg1>
    4a1c:	00 20       	and	r0, r0
    4a1e:	1a f4       	brpl	.+6      	; 0x4a26 <__divmodhi4_exit>

00004a20 <__divmodhi4_neg2>:
    4a20:	70 95       	com	r23
    4a22:	61 95       	neg	r22
    4a24:	7f 4f       	sbci	r23, 0xFF	; 255

00004a26 <__divmodhi4_exit>:
    4a26:	08 95       	ret

00004a28 <__divmodhi4_neg1>:
    4a28:	f6 f7       	brtc	.-4      	; 0x4a26 <__divmodhi4_exit>
    4a2a:	90 95       	com	r25
    4a2c:	81 95       	neg	r24
    4a2e:	9f 4f       	sbci	r25, 0xFF	; 255
    4a30:	08 95       	ret

00004a32 <__udivmodsi4>:
    4a32:	a1 e2       	ldi	r26, 0x21	; 33
    4a34:	1a 2e       	mov	r1, r26
    4a36:	aa 1b       	sub	r26, r26
    4a38:	bb 1b       	sub	r27, r27
    4a3a:	fd 01       	movw	r30, r26
    4a3c:	0d c0       	rjmp	.+26     	; 0x4a58 <__udivmodsi4_ep>

00004a3e <__udivmodsi4_loop>:
    4a3e:	aa 1f       	adc	r26, r26
    4a40:	bb 1f       	adc	r27, r27
    4a42:	ee 1f       	adc	r30, r30
    4a44:	ff 1f       	adc	r31, r31
    4a46:	a2 17       	cp	r26, r18
    4a48:	b3 07       	cpc	r27, r19
    4a4a:	e4 07       	cpc	r30, r20
    4a4c:	f5 07       	cpc	r31, r21
    4a4e:	20 f0       	brcs	.+8      	; 0x4a58 <__udivmodsi4_ep>
    4a50:	a2 1b       	sub	r26, r18
    4a52:	b3 0b       	sbc	r27, r19
    4a54:	e4 0b       	sbc	r30, r20
    4a56:	f5 0b       	sbc	r31, r21

00004a58 <__udivmodsi4_ep>:
    4a58:	66 1f       	adc	r22, r22
    4a5a:	77 1f       	adc	r23, r23
    4a5c:	88 1f       	adc	r24, r24
    4a5e:	99 1f       	adc	r25, r25
    4a60:	1a 94       	dec	r1
    4a62:	69 f7       	brne	.-38     	; 0x4a3e <__udivmodsi4_loop>
    4a64:	60 95       	com	r22
    4a66:	70 95       	com	r23
    4a68:	80 95       	com	r24
    4a6a:	90 95       	com	r25
    4a6c:	9b 01       	movw	r18, r22
    4a6e:	ac 01       	movw	r20, r24
    4a70:	bd 01       	movw	r22, r26
    4a72:	cf 01       	movw	r24, r30
    4a74:	08 95       	ret

00004a76 <__prologue_saves__>:
    4a76:	2f 92       	push	r2
    4a78:	3f 92       	push	r3
    4a7a:	4f 92       	push	r4
    4a7c:	5f 92       	push	r5
    4a7e:	6f 92       	push	r6
    4a80:	7f 92       	push	r7
    4a82:	8f 92       	push	r8
    4a84:	9f 92       	push	r9
    4a86:	af 92       	push	r10
    4a88:	bf 92       	push	r11
    4a8a:	cf 92       	push	r12
    4a8c:	df 92       	push	r13
    4a8e:	ef 92       	push	r14
    4a90:	ff 92       	push	r15
    4a92:	0f 93       	push	r16
    4a94:	1f 93       	push	r17
    4a96:	cf 93       	push	r28
    4a98:	df 93       	push	r29
    4a9a:	cd b7       	in	r28, 0x3d	; 61
    4a9c:	de b7       	in	r29, 0x3e	; 62
    4a9e:	ca 1b       	sub	r28, r26
    4aa0:	db 0b       	sbc	r29, r27
    4aa2:	0f b6       	in	r0, 0x3f	; 63
    4aa4:	f8 94       	cli
    4aa6:	de bf       	out	0x3e, r29	; 62
    4aa8:	0f be       	out	0x3f, r0	; 63
    4aaa:	cd bf       	out	0x3d, r28	; 61
    4aac:	09 94       	ijmp

00004aae <__epilogue_restores__>:
    4aae:	2a 88       	ldd	r2, Y+18	; 0x12
    4ab0:	39 88       	ldd	r3, Y+17	; 0x11
    4ab2:	48 88       	ldd	r4, Y+16	; 0x10
    4ab4:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ab6:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ab8:	7d 84       	ldd	r7, Y+13	; 0x0d
    4aba:	8c 84       	ldd	r8, Y+12	; 0x0c
    4abc:	9b 84       	ldd	r9, Y+11	; 0x0b
    4abe:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ac0:	b9 84       	ldd	r11, Y+9	; 0x09
    4ac2:	c8 84       	ldd	r12, Y+8	; 0x08
    4ac4:	df 80       	ldd	r13, Y+7	; 0x07
    4ac6:	ee 80       	ldd	r14, Y+6	; 0x06
    4ac8:	fd 80       	ldd	r15, Y+5	; 0x05
    4aca:	0c 81       	ldd	r16, Y+4	; 0x04
    4acc:	1b 81       	ldd	r17, Y+3	; 0x03
    4ace:	aa 81       	ldd	r26, Y+2	; 0x02
    4ad0:	b9 81       	ldd	r27, Y+1	; 0x01
    4ad2:	ce 0f       	add	r28, r30
    4ad4:	d1 1d       	adc	r29, r1
    4ad6:	0f b6       	in	r0, 0x3f	; 63
    4ad8:	f8 94       	cli
    4ada:	de bf       	out	0x3e, r29	; 62
    4adc:	0f be       	out	0x3f, r0	; 63
    4ade:	cd bf       	out	0x3d, r28	; 61
    4ae0:	ed 01       	movw	r28, r26
    4ae2:	08 95       	ret

00004ae4 <__tablejump2__>:
    4ae4:	ee 0f       	add	r30, r30
    4ae6:	ff 1f       	adc	r31, r31

00004ae8 <__tablejump__>:
    4ae8:	05 90       	lpm	r0, Z+
    4aea:	f4 91       	lpm	r31, Z+
    4aec:	e0 2d       	mov	r30, r0
    4aee:	09 94       	ijmp
    4af0:	11 f4       	brne	.+4      	; 0x4af6 <__tablejump__+0xe>
    4af2:	0e f4       	brtc	.+2      	; 0x4af6 <__tablejump__+0xe>
    4af4:	4d c0       	rjmp	.+154    	; 0x4b90 <__fp_nan>
    4af6:	3e c0       	rjmp	.+124    	; 0x4b74 <__fp_mpack>

00004af8 <sqrt>:
    4af8:	5d d0       	rcall	.+186    	; 0x4bb4 <__fp_splitA>
    4afa:	d0 f3       	brcs	.-12     	; 0x4af0 <__tablejump__+0x8>
    4afc:	99 23       	and	r25, r25
    4afe:	d9 f3       	breq	.-10     	; 0x4af6 <__tablejump__+0xe>
    4b00:	ce f3       	brts	.-14     	; 0x4af4 <__tablejump__+0xc>
    4b02:	9f 57       	subi	r25, 0x7F	; 127
    4b04:	55 0b       	sbc	r21, r21
    4b06:	87 ff       	sbrs	r24, 7
    4b08:	46 d0       	rcall	.+140    	; 0x4b96 <__fp_norm2>
    4b0a:	00 24       	eor	r0, r0
    4b0c:	a0 e6       	ldi	r26, 0x60	; 96
    4b0e:	40 ea       	ldi	r20, 0xA0	; 160
    4b10:	90 01       	movw	r18, r0
    4b12:	80 58       	subi	r24, 0x80	; 128
    4b14:	56 95       	lsr	r21
    4b16:	97 95       	ror	r25
    4b18:	28 f4       	brcc	.+10     	; 0x4b24 <sqrt+0x2c>
    4b1a:	80 5c       	subi	r24, 0xC0	; 192
    4b1c:	66 0f       	add	r22, r22
    4b1e:	77 1f       	adc	r23, r23
    4b20:	88 1f       	adc	r24, r24
    4b22:	20 f0       	brcs	.+8      	; 0x4b2c <sqrt+0x34>
    4b24:	26 17       	cp	r18, r22
    4b26:	37 07       	cpc	r19, r23
    4b28:	48 07       	cpc	r20, r24
    4b2a:	30 f4       	brcc	.+12     	; 0x4b38 <sqrt+0x40>
    4b2c:	62 1b       	sub	r22, r18
    4b2e:	73 0b       	sbc	r23, r19
    4b30:	84 0b       	sbc	r24, r20
    4b32:	20 29       	or	r18, r0
    4b34:	31 29       	or	r19, r1
    4b36:	4a 2b       	or	r20, r26
    4b38:	a6 95       	lsr	r26
    4b3a:	17 94       	ror	r1
    4b3c:	07 94       	ror	r0
    4b3e:	20 25       	eor	r18, r0
    4b40:	31 25       	eor	r19, r1
    4b42:	4a 27       	eor	r20, r26
    4b44:	58 f7       	brcc	.-42     	; 0x4b1c <sqrt+0x24>
    4b46:	66 0f       	add	r22, r22
    4b48:	77 1f       	adc	r23, r23
    4b4a:	88 1f       	adc	r24, r24
    4b4c:	20 f0       	brcs	.+8      	; 0x4b56 <sqrt+0x5e>
    4b4e:	26 17       	cp	r18, r22
    4b50:	37 07       	cpc	r19, r23
    4b52:	48 07       	cpc	r20, r24
    4b54:	30 f4       	brcc	.+12     	; 0x4b62 <sqrt+0x6a>
    4b56:	62 0b       	sbc	r22, r18
    4b58:	73 0b       	sbc	r23, r19
    4b5a:	84 0b       	sbc	r24, r20
    4b5c:	20 0d       	add	r18, r0
    4b5e:	31 1d       	adc	r19, r1
    4b60:	41 1d       	adc	r20, r1
    4b62:	a0 95       	com	r26
    4b64:	81 f7       	brne	.-32     	; 0x4b46 <sqrt+0x4e>
    4b66:	b9 01       	movw	r22, r18
    4b68:	84 2f       	mov	r24, r20
    4b6a:	91 58       	subi	r25, 0x81	; 129
    4b6c:	88 0f       	add	r24, r24
    4b6e:	96 95       	lsr	r25
    4b70:	87 95       	ror	r24
    4b72:	08 95       	ret

00004b74 <__fp_mpack>:
    4b74:	9f 3f       	cpi	r25, 0xFF	; 255
    4b76:	31 f0       	breq	.+12     	; 0x4b84 <__fp_mpack_finite+0xc>

00004b78 <__fp_mpack_finite>:
    4b78:	91 50       	subi	r25, 0x01	; 1
    4b7a:	20 f4       	brcc	.+8      	; 0x4b84 <__fp_mpack_finite+0xc>
    4b7c:	87 95       	ror	r24
    4b7e:	77 95       	ror	r23
    4b80:	67 95       	ror	r22
    4b82:	b7 95       	ror	r27
    4b84:	88 0f       	add	r24, r24
    4b86:	91 1d       	adc	r25, r1
    4b88:	96 95       	lsr	r25
    4b8a:	87 95       	ror	r24
    4b8c:	97 f9       	bld	r25, 7
    4b8e:	08 95       	ret

00004b90 <__fp_nan>:
    4b90:	9f ef       	ldi	r25, 0xFF	; 255
    4b92:	80 ec       	ldi	r24, 0xC0	; 192
    4b94:	08 95       	ret

00004b96 <__fp_norm2>:
    4b96:	91 50       	subi	r25, 0x01	; 1
    4b98:	50 40       	sbci	r21, 0x00	; 0
    4b9a:	66 0f       	add	r22, r22
    4b9c:	77 1f       	adc	r23, r23
    4b9e:	88 1f       	adc	r24, r24
    4ba0:	d2 f7       	brpl	.-12     	; 0x4b96 <__fp_norm2>
    4ba2:	08 95       	ret

00004ba4 <__fp_split3>:
    4ba4:	57 fd       	sbrc	r21, 7
    4ba6:	90 58       	subi	r25, 0x80	; 128
    4ba8:	44 0f       	add	r20, r20
    4baa:	55 1f       	adc	r21, r21
    4bac:	59 f0       	breq	.+22     	; 0x4bc4 <__fp_splitA+0x10>
    4bae:	5f 3f       	cpi	r21, 0xFF	; 255
    4bb0:	71 f0       	breq	.+28     	; 0x4bce <__fp_splitA+0x1a>
    4bb2:	47 95       	ror	r20

00004bb4 <__fp_splitA>:
    4bb4:	88 0f       	add	r24, r24
    4bb6:	97 fb       	bst	r25, 7
    4bb8:	99 1f       	adc	r25, r25
    4bba:	61 f0       	breq	.+24     	; 0x4bd4 <__fp_splitA+0x20>
    4bbc:	9f 3f       	cpi	r25, 0xFF	; 255
    4bbe:	79 f0       	breq	.+30     	; 0x4bde <__fp_splitA+0x2a>
    4bc0:	87 95       	ror	r24
    4bc2:	08 95       	ret
    4bc4:	12 16       	cp	r1, r18
    4bc6:	13 06       	cpc	r1, r19
    4bc8:	14 06       	cpc	r1, r20
    4bca:	55 1f       	adc	r21, r21
    4bcc:	f2 cf       	rjmp	.-28     	; 0x4bb2 <__fp_split3+0xe>
    4bce:	46 95       	lsr	r20
    4bd0:	f1 df       	rcall	.-30     	; 0x4bb4 <__fp_splitA>
    4bd2:	08 c0       	rjmp	.+16     	; 0x4be4 <__fp_splitA+0x30>
    4bd4:	16 16       	cp	r1, r22
    4bd6:	17 06       	cpc	r1, r23
    4bd8:	18 06       	cpc	r1, r24
    4bda:	99 1f       	adc	r25, r25
    4bdc:	f1 cf       	rjmp	.-30     	; 0x4bc0 <__fp_splitA+0xc>
    4bde:	86 95       	lsr	r24
    4be0:	71 05       	cpc	r23, r1
    4be2:	61 05       	cpc	r22, r1
    4be4:	08 94       	sec
    4be6:	08 95       	ret

00004be8 <malloc>:
    4be8:	cf 93       	push	r28
    4bea:	df 93       	push	r29
    4bec:	82 30       	cpi	r24, 0x02	; 2
    4bee:	91 05       	cpc	r25, r1
    4bf0:	10 f4       	brcc	.+4      	; 0x4bf6 <malloc+0xe>
    4bf2:	82 e0       	ldi	r24, 0x02	; 2
    4bf4:	90 e0       	ldi	r25, 0x00	; 0
    4bf6:	e0 91 12 04 	lds	r30, 0x0412
    4bfa:	f0 91 13 04 	lds	r31, 0x0413
    4bfe:	40 e0       	ldi	r20, 0x00	; 0
    4c00:	50 e0       	ldi	r21, 0x00	; 0
    4c02:	20 e0       	ldi	r18, 0x00	; 0
    4c04:	30 e0       	ldi	r19, 0x00	; 0
    4c06:	26 c0       	rjmp	.+76     	; 0x4c54 <malloc+0x6c>
    4c08:	60 81       	ld	r22, Z
    4c0a:	71 81       	ldd	r23, Z+1	; 0x01
    4c0c:	68 17       	cp	r22, r24
    4c0e:	79 07       	cpc	r23, r25
    4c10:	e0 f0       	brcs	.+56     	; 0x4c4a <malloc+0x62>
    4c12:	68 17       	cp	r22, r24
    4c14:	79 07       	cpc	r23, r25
    4c16:	81 f4       	brne	.+32     	; 0x4c38 <malloc+0x50>
    4c18:	82 81       	ldd	r24, Z+2	; 0x02
    4c1a:	93 81       	ldd	r25, Z+3	; 0x03
    4c1c:	21 15       	cp	r18, r1
    4c1e:	31 05       	cpc	r19, r1
    4c20:	31 f0       	breq	.+12     	; 0x4c2e <malloc+0x46>
    4c22:	d9 01       	movw	r26, r18
    4c24:	13 96       	adiw	r26, 0x03	; 3
    4c26:	9c 93       	st	X, r25
    4c28:	8e 93       	st	-X, r24
    4c2a:	12 97       	sbiw	r26, 0x02	; 2
    4c2c:	2b c0       	rjmp	.+86     	; 0x4c84 <malloc+0x9c>
    4c2e:	90 93 13 04 	sts	0x0413, r25
    4c32:	80 93 12 04 	sts	0x0412, r24
    4c36:	26 c0       	rjmp	.+76     	; 0x4c84 <malloc+0x9c>
    4c38:	41 15       	cp	r20, r1
    4c3a:	51 05       	cpc	r21, r1
    4c3c:	19 f0       	breq	.+6      	; 0x4c44 <malloc+0x5c>
    4c3e:	64 17       	cp	r22, r20
    4c40:	75 07       	cpc	r23, r21
    4c42:	18 f4       	brcc	.+6      	; 0x4c4a <malloc+0x62>
    4c44:	ab 01       	movw	r20, r22
    4c46:	e9 01       	movw	r28, r18
    4c48:	df 01       	movw	r26, r30
    4c4a:	9f 01       	movw	r18, r30
    4c4c:	72 81       	ldd	r23, Z+2	; 0x02
    4c4e:	63 81       	ldd	r22, Z+3	; 0x03
    4c50:	e7 2f       	mov	r30, r23
    4c52:	f6 2f       	mov	r31, r22
    4c54:	30 97       	sbiw	r30, 0x00	; 0
    4c56:	c1 f6       	brne	.-80     	; 0x4c08 <malloc+0x20>
    4c58:	41 15       	cp	r20, r1
    4c5a:	51 05       	cpc	r21, r1
    4c5c:	01 f1       	breq	.+64     	; 0x4c9e <malloc+0xb6>
    4c5e:	48 1b       	sub	r20, r24
    4c60:	59 0b       	sbc	r21, r25
    4c62:	44 30       	cpi	r20, 0x04	; 4
    4c64:	51 05       	cpc	r21, r1
    4c66:	80 f4       	brcc	.+32     	; 0x4c88 <malloc+0xa0>
    4c68:	12 96       	adiw	r26, 0x02	; 2
    4c6a:	8d 91       	ld	r24, X+
    4c6c:	9c 91       	ld	r25, X
    4c6e:	13 97       	sbiw	r26, 0x03	; 3
    4c70:	20 97       	sbiw	r28, 0x00	; 0
    4c72:	19 f0       	breq	.+6      	; 0x4c7a <malloc+0x92>
    4c74:	9b 83       	std	Y+3, r25	; 0x03
    4c76:	8a 83       	std	Y+2, r24	; 0x02
    4c78:	04 c0       	rjmp	.+8      	; 0x4c82 <malloc+0x9a>
    4c7a:	90 93 13 04 	sts	0x0413, r25
    4c7e:	80 93 12 04 	sts	0x0412, r24
    4c82:	fd 01       	movw	r30, r26
    4c84:	32 96       	adiw	r30, 0x02	; 2
    4c86:	46 c0       	rjmp	.+140    	; 0x4d14 <malloc+0x12c>
    4c88:	fd 01       	movw	r30, r26
    4c8a:	e4 0f       	add	r30, r20
    4c8c:	f5 1f       	adc	r31, r21
    4c8e:	81 93       	st	Z+, r24
    4c90:	91 93       	st	Z+, r25
    4c92:	42 50       	subi	r20, 0x02	; 2
    4c94:	50 40       	sbci	r21, 0x00	; 0
    4c96:	11 96       	adiw	r26, 0x01	; 1
    4c98:	5c 93       	st	X, r21
    4c9a:	4e 93       	st	-X, r20
    4c9c:	3b c0       	rjmp	.+118    	; 0x4d14 <malloc+0x12c>
    4c9e:	20 91 10 04 	lds	r18, 0x0410
    4ca2:	30 91 11 04 	lds	r19, 0x0411
    4ca6:	21 15       	cp	r18, r1
    4ca8:	31 05       	cpc	r19, r1
    4caa:	41 f4       	brne	.+16     	; 0x4cbc <malloc+0xd4>
    4cac:	20 91 70 02 	lds	r18, 0x0270
    4cb0:	30 91 71 02 	lds	r19, 0x0271
    4cb4:	30 93 11 04 	sts	0x0411, r19
    4cb8:	20 93 10 04 	sts	0x0410, r18
    4cbc:	20 91 72 02 	lds	r18, 0x0272
    4cc0:	30 91 73 02 	lds	r19, 0x0273
    4cc4:	21 15       	cp	r18, r1
    4cc6:	31 05       	cpc	r19, r1
    4cc8:	41 f4       	brne	.+16     	; 0x4cda <malloc+0xf2>
    4cca:	2d b7       	in	r18, 0x3d	; 61
    4ccc:	3e b7       	in	r19, 0x3e	; 62
    4cce:	40 91 6e 02 	lds	r20, 0x026E
    4cd2:	50 91 6f 02 	lds	r21, 0x026F
    4cd6:	24 1b       	sub	r18, r20
    4cd8:	35 0b       	sbc	r19, r21
    4cda:	e0 91 10 04 	lds	r30, 0x0410
    4cde:	f0 91 11 04 	lds	r31, 0x0411
    4ce2:	e2 17       	cp	r30, r18
    4ce4:	f3 07       	cpc	r31, r19
    4ce6:	a0 f4       	brcc	.+40     	; 0x4d10 <malloc+0x128>
    4ce8:	2e 1b       	sub	r18, r30
    4cea:	3f 0b       	sbc	r19, r31
    4cec:	28 17       	cp	r18, r24
    4cee:	39 07       	cpc	r19, r25
    4cf0:	78 f0       	brcs	.+30     	; 0x4d10 <malloc+0x128>
    4cf2:	ac 01       	movw	r20, r24
    4cf4:	4e 5f       	subi	r20, 0xFE	; 254
    4cf6:	5f 4f       	sbci	r21, 0xFF	; 255
    4cf8:	24 17       	cp	r18, r20
    4cfa:	35 07       	cpc	r19, r21
    4cfc:	48 f0       	brcs	.+18     	; 0x4d10 <malloc+0x128>
    4cfe:	4e 0f       	add	r20, r30
    4d00:	5f 1f       	adc	r21, r31
    4d02:	50 93 11 04 	sts	0x0411, r21
    4d06:	40 93 10 04 	sts	0x0410, r20
    4d0a:	81 93       	st	Z+, r24
    4d0c:	91 93       	st	Z+, r25
    4d0e:	02 c0       	rjmp	.+4      	; 0x4d14 <malloc+0x12c>
    4d10:	e0 e0       	ldi	r30, 0x00	; 0
    4d12:	f0 e0       	ldi	r31, 0x00	; 0
    4d14:	cf 01       	movw	r24, r30
    4d16:	df 91       	pop	r29
    4d18:	cf 91       	pop	r28
    4d1a:	08 95       	ret

00004d1c <free>:
    4d1c:	cf 93       	push	r28
    4d1e:	df 93       	push	r29
    4d20:	00 97       	sbiw	r24, 0x00	; 0
    4d22:	09 f4       	brne	.+2      	; 0x4d26 <free+0xa>
    4d24:	91 c0       	rjmp	.+290    	; 0x4e48 <free+0x12c>
    4d26:	fc 01       	movw	r30, r24
    4d28:	32 97       	sbiw	r30, 0x02	; 2
    4d2a:	13 82       	std	Z+3, r1	; 0x03
    4d2c:	12 82       	std	Z+2, r1	; 0x02
    4d2e:	60 91 12 04 	lds	r22, 0x0412
    4d32:	70 91 13 04 	lds	r23, 0x0413
    4d36:	61 15       	cp	r22, r1
    4d38:	71 05       	cpc	r23, r1
    4d3a:	81 f4       	brne	.+32     	; 0x4d5c <free+0x40>
    4d3c:	20 81       	ld	r18, Z
    4d3e:	31 81       	ldd	r19, Z+1	; 0x01
    4d40:	28 0f       	add	r18, r24
    4d42:	39 1f       	adc	r19, r25
    4d44:	80 91 10 04 	lds	r24, 0x0410
    4d48:	90 91 11 04 	lds	r25, 0x0411
    4d4c:	82 17       	cp	r24, r18
    4d4e:	93 07       	cpc	r25, r19
    4d50:	99 f5       	brne	.+102    	; 0x4db8 <free+0x9c>
    4d52:	f0 93 11 04 	sts	0x0411, r31
    4d56:	e0 93 10 04 	sts	0x0410, r30
    4d5a:	76 c0       	rjmp	.+236    	; 0x4e48 <free+0x12c>
    4d5c:	db 01       	movw	r26, r22
    4d5e:	80 e0       	ldi	r24, 0x00	; 0
    4d60:	90 e0       	ldi	r25, 0x00	; 0
    4d62:	02 c0       	rjmp	.+4      	; 0x4d68 <free+0x4c>
    4d64:	cd 01       	movw	r24, r26
    4d66:	d9 01       	movw	r26, r18
    4d68:	ae 17       	cp	r26, r30
    4d6a:	bf 07       	cpc	r27, r31
    4d6c:	48 f4       	brcc	.+18     	; 0x4d80 <free+0x64>
    4d6e:	12 96       	adiw	r26, 0x02	; 2
    4d70:	2d 91       	ld	r18, X+
    4d72:	3c 91       	ld	r19, X
    4d74:	13 97       	sbiw	r26, 0x03	; 3
    4d76:	21 15       	cp	r18, r1
    4d78:	31 05       	cpc	r19, r1
    4d7a:	a1 f7       	brne	.-24     	; 0x4d64 <free+0x48>
    4d7c:	cd 01       	movw	r24, r26
    4d7e:	21 c0       	rjmp	.+66     	; 0x4dc2 <free+0xa6>
    4d80:	b3 83       	std	Z+3, r27	; 0x03
    4d82:	a2 83       	std	Z+2, r26	; 0x02
    4d84:	ef 01       	movw	r28, r30
    4d86:	49 91       	ld	r20, Y+
    4d88:	59 91       	ld	r21, Y+
    4d8a:	9e 01       	movw	r18, r28
    4d8c:	24 0f       	add	r18, r20
    4d8e:	35 1f       	adc	r19, r21
    4d90:	a2 17       	cp	r26, r18
    4d92:	b3 07       	cpc	r27, r19
    4d94:	79 f4       	brne	.+30     	; 0x4db4 <free+0x98>
    4d96:	2d 91       	ld	r18, X+
    4d98:	3c 91       	ld	r19, X
    4d9a:	11 97       	sbiw	r26, 0x01	; 1
    4d9c:	24 0f       	add	r18, r20
    4d9e:	35 1f       	adc	r19, r21
    4da0:	2e 5f       	subi	r18, 0xFE	; 254
    4da2:	3f 4f       	sbci	r19, 0xFF	; 255
    4da4:	31 83       	std	Z+1, r19	; 0x01
    4da6:	20 83       	st	Z, r18
    4da8:	12 96       	adiw	r26, 0x02	; 2
    4daa:	2d 91       	ld	r18, X+
    4dac:	3c 91       	ld	r19, X
    4dae:	13 97       	sbiw	r26, 0x03	; 3
    4db0:	33 83       	std	Z+3, r19	; 0x03
    4db2:	22 83       	std	Z+2, r18	; 0x02
    4db4:	00 97       	sbiw	r24, 0x00	; 0
    4db6:	29 f4       	brne	.+10     	; 0x4dc2 <free+0xa6>
    4db8:	f0 93 13 04 	sts	0x0413, r31
    4dbc:	e0 93 12 04 	sts	0x0412, r30
    4dc0:	43 c0       	rjmp	.+134    	; 0x4e48 <free+0x12c>
    4dc2:	dc 01       	movw	r26, r24
    4dc4:	13 96       	adiw	r26, 0x03	; 3
    4dc6:	fc 93       	st	X, r31
    4dc8:	ee 93       	st	-X, r30
    4dca:	12 97       	sbiw	r26, 0x02	; 2
    4dcc:	4d 91       	ld	r20, X+
    4dce:	5d 91       	ld	r21, X+
    4dd0:	a4 0f       	add	r26, r20
    4dd2:	b5 1f       	adc	r27, r21
    4dd4:	ea 17       	cp	r30, r26
    4dd6:	fb 07       	cpc	r31, r27
    4dd8:	69 f4       	brne	.+26     	; 0x4df4 <free+0xd8>
    4dda:	20 81       	ld	r18, Z
    4ddc:	31 81       	ldd	r19, Z+1	; 0x01
    4dde:	24 0f       	add	r18, r20
    4de0:	35 1f       	adc	r19, r21
    4de2:	2e 5f       	subi	r18, 0xFE	; 254
    4de4:	3f 4f       	sbci	r19, 0xFF	; 255
    4de6:	ec 01       	movw	r28, r24
    4de8:	39 83       	std	Y+1, r19	; 0x01
    4dea:	28 83       	st	Y, r18
    4dec:	22 81       	ldd	r18, Z+2	; 0x02
    4dee:	33 81       	ldd	r19, Z+3	; 0x03
    4df0:	3b 83       	std	Y+3, r19	; 0x03
    4df2:	2a 83       	std	Y+2, r18	; 0x02
    4df4:	e0 e0       	ldi	r30, 0x00	; 0
    4df6:	f0 e0       	ldi	r31, 0x00	; 0
    4df8:	02 c0       	rjmp	.+4      	; 0x4dfe <free+0xe2>
    4dfa:	fb 01       	movw	r30, r22
    4dfc:	bc 01       	movw	r22, r24
    4dfe:	db 01       	movw	r26, r22
    4e00:	12 96       	adiw	r26, 0x02	; 2
    4e02:	8d 91       	ld	r24, X+
    4e04:	9c 91       	ld	r25, X
    4e06:	13 97       	sbiw	r26, 0x03	; 3
    4e08:	00 97       	sbiw	r24, 0x00	; 0
    4e0a:	b9 f7       	brne	.-18     	; 0x4dfa <free+0xde>
    4e0c:	9b 01       	movw	r18, r22
    4e0e:	2e 5f       	subi	r18, 0xFE	; 254
    4e10:	3f 4f       	sbci	r19, 0xFF	; 255
    4e12:	8d 91       	ld	r24, X+
    4e14:	9c 91       	ld	r25, X
    4e16:	11 97       	sbiw	r26, 0x01	; 1
    4e18:	82 0f       	add	r24, r18
    4e1a:	93 1f       	adc	r25, r19
    4e1c:	40 91 10 04 	lds	r20, 0x0410
    4e20:	50 91 11 04 	lds	r21, 0x0411
    4e24:	48 17       	cp	r20, r24
    4e26:	59 07       	cpc	r21, r25
    4e28:	79 f4       	brne	.+30     	; 0x4e48 <free+0x12c>
    4e2a:	30 97       	sbiw	r30, 0x00	; 0
    4e2c:	29 f4       	brne	.+10     	; 0x4e38 <free+0x11c>
    4e2e:	10 92 13 04 	sts	0x0413, r1
    4e32:	10 92 12 04 	sts	0x0412, r1
    4e36:	02 c0       	rjmp	.+4      	; 0x4e3c <free+0x120>
    4e38:	13 82       	std	Z+3, r1	; 0x03
    4e3a:	12 82       	std	Z+2, r1	; 0x02
    4e3c:	22 50       	subi	r18, 0x02	; 2
    4e3e:	30 40       	sbci	r19, 0x00	; 0
    4e40:	30 93 11 04 	sts	0x0411, r19
    4e44:	20 93 10 04 	sts	0x0410, r18
    4e48:	df 91       	pop	r29
    4e4a:	cf 91       	pop	r28
    4e4c:	08 95       	ret

00004e4e <realloc>:
    4e4e:	a0 e0       	ldi	r26, 0x00	; 0
    4e50:	b0 e0       	ldi	r27, 0x00	; 0
    4e52:	ed e2       	ldi	r30, 0x2D	; 45
    4e54:	f7 e2       	ldi	r31, 0x27	; 39
    4e56:	0c 94 41 25 	jmp	0x4a82	; 0x4a82 <__prologue_saves__+0xc>
    4e5a:	8c 01       	movw	r16, r24
    4e5c:	cb 01       	movw	r24, r22
    4e5e:	01 15       	cp	r16, r1
    4e60:	11 05       	cpc	r17, r1
    4e62:	29 f4       	brne	.+10     	; 0x4e6e <realloc+0x20>
    4e64:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <malloc>
    4e68:	08 2f       	mov	r16, r24
    4e6a:	19 2f       	mov	r17, r25
    4e6c:	b5 c0       	rjmp	.+362    	; 0x4fd8 <realloc+0x18a>
    4e6e:	d8 01       	movw	r26, r16
    4e70:	12 97       	sbiw	r26, 0x02	; 2
    4e72:	98 01       	movw	r18, r16
    4e74:	26 0f       	add	r18, r22
    4e76:	37 1f       	adc	r19, r23
    4e78:	2a 17       	cp	r18, r26
    4e7a:	3b 07       	cpc	r19, r27
    4e7c:	08 f4       	brcc	.+2      	; 0x4e80 <realloc+0x32>
    4e7e:	aa c0       	rjmp	.+340    	; 0x4fd4 <realloc+0x186>
    4e80:	ed 90       	ld	r14, X+
    4e82:	fc 90       	ld	r15, X
    4e84:	11 97       	sbiw	r26, 0x01	; 1
    4e86:	e6 16       	cp	r14, r22
    4e88:	f7 06       	cpc	r15, r23
    4e8a:	d0 f0       	brcs	.+52     	; 0x4ec0 <realloc+0x72>
    4e8c:	45 e0       	ldi	r20, 0x05	; 5
    4e8e:	e4 16       	cp	r14, r20
    4e90:	f1 04       	cpc	r15, r1
    4e92:	08 f4       	brcc	.+2      	; 0x4e96 <realloc+0x48>
    4e94:	a1 c0       	rjmp	.+322    	; 0x4fd8 <realloc+0x18a>
    4e96:	a7 01       	movw	r20, r14
    4e98:	44 50       	subi	r20, 0x04	; 4
    4e9a:	50 40       	sbci	r21, 0x00	; 0
    4e9c:	46 17       	cp	r20, r22
    4e9e:	57 07       	cpc	r21, r23
    4ea0:	08 f4       	brcc	.+2      	; 0x4ea4 <realloc+0x56>
    4ea2:	9a c0       	rjmp	.+308    	; 0x4fd8 <realloc+0x18a>
    4ea4:	a7 01       	movw	r20, r14
    4ea6:	42 50       	subi	r20, 0x02	; 2
    4ea8:	50 40       	sbci	r21, 0x00	; 0
    4eaa:	46 1b       	sub	r20, r22
    4eac:	57 0b       	sbc	r21, r23
    4eae:	f9 01       	movw	r30, r18
    4eb0:	41 93       	st	Z+, r20
    4eb2:	51 93       	st	Z+, r21
    4eb4:	6d 93       	st	X+, r22
    4eb6:	7c 93       	st	X, r23
    4eb8:	cf 01       	movw	r24, r30
    4eba:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <free>
    4ebe:	8c c0       	rjmp	.+280    	; 0x4fd8 <realloc+0x18a>
    4ec0:	5b 01       	movw	r10, r22
    4ec2:	ae 18       	sub	r10, r14
    4ec4:	bf 08       	sbc	r11, r15
    4ec6:	48 01       	movw	r8, r16
    4ec8:	8e 0c       	add	r8, r14
    4eca:	9f 1c       	adc	r9, r15
    4ecc:	e0 91 12 04 	lds	r30, 0x0412
    4ed0:	f0 91 13 04 	lds	r31, 0x0413
    4ed4:	cc 24       	eor	r12, r12
    4ed6:	dd 24       	eor	r13, r13
    4ed8:	c0 e0       	ldi	r28, 0x00	; 0
    4eda:	d0 e0       	ldi	r29, 0x00	; 0
    4edc:	41 c0       	rjmp	.+130    	; 0x4f60 <realloc+0x112>
    4ede:	e8 15       	cp	r30, r8
    4ee0:	f9 05       	cpc	r31, r9
    4ee2:	99 f5       	brne	.+102    	; 0x4f4a <realloc+0xfc>
    4ee4:	60 81       	ld	r22, Z
    4ee6:	71 81       	ldd	r23, Z+1	; 0x01
    4ee8:	ab 01       	movw	r20, r22
    4eea:	4e 5f       	subi	r20, 0xFE	; 254
    4eec:	5f 4f       	sbci	r21, 0xFF	; 255
    4eee:	4a 15       	cp	r20, r10
    4ef0:	5b 05       	cpc	r21, r11
    4ef2:	58 f1       	brcs	.+86     	; 0x4f4a <realloc+0xfc>
    4ef4:	ab 01       	movw	r20, r22
    4ef6:	4a 19       	sub	r20, r10
    4ef8:	5b 09       	sbc	r21, r11
    4efa:	cc 24       	eor	r12, r12
    4efc:	dd 24       	eor	r13, r13
    4efe:	68 94       	set
    4f00:	c1 f8       	bld	r12, 1
    4f02:	c4 0e       	add	r12, r20
    4f04:	d5 1e       	adc	r13, r21
    4f06:	82 80       	ldd	r8, Z+2	; 0x02
    4f08:	a3 80       	ldd	r10, Z+3	; 0x03
    4f0a:	e5 e0       	ldi	r30, 0x05	; 5
    4f0c:	ce 16       	cp	r12, r30
    4f0e:	d1 04       	cpc	r13, r1
    4f10:	48 f0       	brcs	.+18     	; 0x4f24 <realloc+0xd6>
    4f12:	f9 01       	movw	r30, r18
    4f14:	82 82       	std	Z+2, r8	; 0x02
    4f16:	a3 82       	std	Z+3, r10	; 0x03
    4f18:	51 83       	std	Z+1, r21	; 0x01
    4f1a:	40 83       	st	Z, r20
    4f1c:	11 96       	adiw	r26, 0x01	; 1
    4f1e:	9c 93       	st	X, r25
    4f20:	8e 93       	st	-X, r24
    4f22:	09 c0       	rjmp	.+18     	; 0x4f36 <realloc+0xe8>
    4f24:	c7 01       	movw	r24, r14
    4f26:	02 96       	adiw	r24, 0x02	; 2
    4f28:	86 0f       	add	r24, r22
    4f2a:	97 1f       	adc	r25, r23
    4f2c:	11 96       	adiw	r26, 0x01	; 1
    4f2e:	9c 93       	st	X, r25
    4f30:	8e 93       	st	-X, r24
    4f32:	e8 2d       	mov	r30, r8
    4f34:	fa 2d       	mov	r31, r10
    4f36:	20 97       	sbiw	r28, 0x00	; 0
    4f38:	19 f0       	breq	.+6      	; 0x4f40 <realloc+0xf2>
    4f3a:	fb 83       	std	Y+3, r31	; 0x03
    4f3c:	ea 83       	std	Y+2, r30	; 0x02
    4f3e:	4c c0       	rjmp	.+152    	; 0x4fd8 <realloc+0x18a>
    4f40:	f0 93 13 04 	sts	0x0413, r31
    4f44:	e0 93 12 04 	sts	0x0412, r30
    4f48:	47 c0       	rjmp	.+142    	; 0x4fd8 <realloc+0x18a>
    4f4a:	40 81       	ld	r20, Z
    4f4c:	51 81       	ldd	r21, Z+1	; 0x01
    4f4e:	c4 16       	cp	r12, r20
    4f50:	d5 06       	cpc	r13, r21
    4f52:	08 f4       	brcc	.+2      	; 0x4f56 <realloc+0x108>
    4f54:	6a 01       	movw	r12, r20
    4f56:	ef 01       	movw	r28, r30
    4f58:	52 81       	ldd	r21, Z+2	; 0x02
    4f5a:	43 81       	ldd	r20, Z+3	; 0x03
    4f5c:	e5 2f       	mov	r30, r21
    4f5e:	f4 2f       	mov	r31, r20
    4f60:	30 97       	sbiw	r30, 0x00	; 0
    4f62:	09 f0       	breq	.+2      	; 0x4f66 <realloc+0x118>
    4f64:	bc cf       	rjmp	.-136    	; 0x4ede <realloc+0x90>
    4f66:	40 91 10 04 	lds	r20, 0x0410
    4f6a:	50 91 11 04 	lds	r21, 0x0411
    4f6e:	48 15       	cp	r20, r8
    4f70:	59 05       	cpc	r21, r9
    4f72:	e9 f4       	brne	.+58     	; 0x4fae <realloc+0x160>
    4f74:	c8 16       	cp	r12, r24
    4f76:	d9 06       	cpc	r13, r25
    4f78:	d0 f4       	brcc	.+52     	; 0x4fae <realloc+0x160>
    4f7a:	40 91 72 02 	lds	r20, 0x0272
    4f7e:	50 91 73 02 	lds	r21, 0x0273
    4f82:	41 15       	cp	r20, r1
    4f84:	51 05       	cpc	r21, r1
    4f86:	41 f4       	brne	.+16     	; 0x4f98 <realloc+0x14a>
    4f88:	4d b7       	in	r20, 0x3d	; 61
    4f8a:	5e b7       	in	r21, 0x3e	; 62
    4f8c:	60 91 6e 02 	lds	r22, 0x026E
    4f90:	70 91 6f 02 	lds	r23, 0x026F
    4f94:	46 1b       	sub	r20, r22
    4f96:	57 0b       	sbc	r21, r23
    4f98:	24 17       	cp	r18, r20
    4f9a:	35 07       	cpc	r19, r21
    4f9c:	d8 f4       	brcc	.+54     	; 0x4fd4 <realloc+0x186>
    4f9e:	30 93 11 04 	sts	0x0411, r19
    4fa2:	20 93 10 04 	sts	0x0410, r18
    4fa6:	11 96       	adiw	r26, 0x01	; 1
    4fa8:	9c 93       	st	X, r25
    4faa:	8e 93       	st	-X, r24
    4fac:	15 c0       	rjmp	.+42     	; 0x4fd8 <realloc+0x18a>
    4fae:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <malloc>
    4fb2:	c8 2e       	mov	r12, r24
    4fb4:	e6 01       	movw	r28, r12
    4fb6:	6e 01       	movw	r12, r28
    4fb8:	d9 2e       	mov	r13, r25
    4fba:	e6 01       	movw	r28, r12
    4fbc:	20 97       	sbiw	r28, 0x00	; 0
    4fbe:	51 f0       	breq	.+20     	; 0x4fd4 <realloc+0x186>
    4fc0:	8c 2d       	mov	r24, r12
    4fc2:	b8 01       	movw	r22, r16
    4fc4:	a7 01       	movw	r20, r14
    4fc6:	0e 94 31 28 	call	0x5062	; 0x5062 <memcpy>
    4fca:	c8 01       	movw	r24, r16
    4fcc:	0e 94 8e 26 	call	0x4d1c	; 0x4d1c <free>
    4fd0:	86 01       	movw	r16, r12
    4fd2:	02 c0       	rjmp	.+4      	; 0x4fd8 <realloc+0x18a>
    4fd4:	00 e0       	ldi	r16, 0x00	; 0
    4fd6:	10 e0       	ldi	r17, 0x00	; 0
    4fd8:	c8 01       	movw	r24, r16
    4fda:	cd b7       	in	r28, 0x3d	; 61
    4fdc:	de b7       	in	r29, 0x3e	; 62
    4fde:	ec e0       	ldi	r30, 0x0C	; 12
    4fe0:	0c 94 5d 25 	jmp	0x4aba	; 0x4aba <__epilogue_restores__+0xc>

00004fe4 <atol>:
    4fe4:	1f 93       	push	r17
    4fe6:	fc 01       	movw	r30, r24
    4fe8:	99 27       	eor	r25, r25
    4fea:	88 27       	eor	r24, r24
    4fec:	bc 01       	movw	r22, r24
    4fee:	e8 94       	clt
    4ff0:	11 91       	ld	r17, Z+
    4ff2:	10 32       	cpi	r17, 0x20	; 32
    4ff4:	e9 f3       	breq	.-6      	; 0x4ff0 <atol+0xc>
    4ff6:	19 30       	cpi	r17, 0x09	; 9
    4ff8:	10 f0       	brcs	.+4      	; 0x4ffe <atol+0x1a>
    4ffa:	1e 30       	cpi	r17, 0x0E	; 14
    4ffc:	c8 f3       	brcs	.-14     	; 0x4ff0 <atol+0xc>
    4ffe:	1b 32       	cpi	r17, 0x2B	; 43
    5000:	51 f0       	breq	.+20     	; 0x5016 <atol+0x32>
    5002:	1d 32       	cpi	r17, 0x2D	; 45
    5004:	49 f4       	brne	.+18     	; 0x5018 <atol+0x34>
    5006:	68 94       	set
    5008:	06 c0       	rjmp	.+12     	; 0x5016 <atol+0x32>
    500a:	0e 94 fe 28 	call	0x51fc	; 0x51fc <__mulsi_const_10>
    500e:	61 0f       	add	r22, r17
    5010:	71 1d       	adc	r23, r1
    5012:	81 1d       	adc	r24, r1
    5014:	91 1d       	adc	r25, r1
    5016:	11 91       	ld	r17, Z+
    5018:	10 53       	subi	r17, 0x30	; 48
    501a:	1a 30       	cpi	r17, 0x0A	; 10
    501c:	b0 f3       	brcs	.-20     	; 0x500a <atol+0x26>
    501e:	3e f4       	brtc	.+14     	; 0x502e <atol+0x4a>
    5020:	90 95       	com	r25
    5022:	80 95       	com	r24
    5024:	70 95       	com	r23
    5026:	61 95       	neg	r22
    5028:	7f 4f       	sbci	r23, 0xFF	; 255
    502a:	8f 4f       	sbci	r24, 0xFF	; 255
    502c:	9f 4f       	sbci	r25, 0xFF	; 255
    502e:	1f 91       	pop	r17
    5030:	08 95       	ret

00005032 <isspace>:
    5032:	91 11       	cpse	r25, r1
    5034:	33 c1       	rjmp	.+614    	; 0x529c <__ctype_isfalse>
    5036:	80 32       	cpi	r24, 0x20	; 32
    5038:	19 f0       	breq	.+6      	; 0x5040 <isspace+0xe>
    503a:	89 50       	subi	r24, 0x09	; 9
    503c:	85 50       	subi	r24, 0x05	; 5
    503e:	d0 f7       	brcc	.-12     	; 0x5034 <isspace+0x2>
    5040:	08 95       	ret

00005042 <tolower>:
    5042:	91 11       	cpse	r25, r1
    5044:	08 95       	ret
    5046:	81 54       	subi	r24, 0x41	; 65
    5048:	8a 51       	subi	r24, 0x1A	; 26
    504a:	08 f4       	brcc	.+2      	; 0x504e <tolower+0xc>
    504c:	80 5e       	subi	r24, 0xE0	; 224
    504e:	85 5a       	subi	r24, 0xA5	; 165
    5050:	08 95       	ret

00005052 <toupper>:
    5052:	91 11       	cpse	r25, r1
    5054:	08 95       	ret
    5056:	81 56       	subi	r24, 0x61	; 97
    5058:	8a 51       	subi	r24, 0x1A	; 26
    505a:	08 f4       	brcc	.+2      	; 0x505e <toupper+0xc>
    505c:	80 52       	subi	r24, 0x20	; 32
    505e:	85 58       	subi	r24, 0x85	; 133
    5060:	08 95       	ret

00005062 <memcpy>:
    5062:	fb 01       	movw	r30, r22
    5064:	dc 01       	movw	r26, r24
    5066:	02 c0       	rjmp	.+4      	; 0x506c <memcpy+0xa>
    5068:	01 90       	ld	r0, Z+
    506a:	0d 92       	st	X+, r0
    506c:	41 50       	subi	r20, 0x01	; 1
    506e:	50 40       	sbci	r21, 0x00	; 0
    5070:	d8 f7       	brcc	.-10     	; 0x5068 <memcpy+0x6>
    5072:	08 95       	ret

00005074 <memmove>:
    5074:	68 17       	cp	r22, r24
    5076:	79 07       	cpc	r23, r25
    5078:	68 f4       	brcc	.+26     	; 0x5094 <memmove+0x20>
    507a:	fb 01       	movw	r30, r22
    507c:	dc 01       	movw	r26, r24
    507e:	e4 0f       	add	r30, r20
    5080:	f5 1f       	adc	r31, r21
    5082:	a4 0f       	add	r26, r20
    5084:	b5 1f       	adc	r27, r21
    5086:	02 c0       	rjmp	.+4      	; 0x508c <memmove+0x18>
    5088:	02 90       	ld	r0, -Z
    508a:	0e 92       	st	-X, r0
    508c:	41 50       	subi	r20, 0x01	; 1
    508e:	50 40       	sbci	r21, 0x00	; 0
    5090:	d8 f7       	brcc	.-10     	; 0x5088 <memmove+0x14>
    5092:	08 95       	ret
    5094:	0c 94 31 28 	jmp	0x5062	; 0x5062 <memcpy>

00005098 <strchr>:
    5098:	fc 01       	movw	r30, r24
    509a:	81 91       	ld	r24, Z+
    509c:	86 17       	cp	r24, r22
    509e:	21 f0       	breq	.+8      	; 0x50a8 <strchr+0x10>
    50a0:	88 23       	and	r24, r24
    50a2:	d9 f7       	brne	.-10     	; 0x509a <strchr+0x2>
    50a4:	99 27       	eor	r25, r25
    50a6:	08 95       	ret
    50a8:	31 97       	sbiw	r30, 0x01	; 1
    50aa:	cf 01       	movw	r24, r30
    50ac:	08 95       	ret

000050ae <strcmp>:
    50ae:	fb 01       	movw	r30, r22
    50b0:	dc 01       	movw	r26, r24
    50b2:	8d 91       	ld	r24, X+
    50b4:	01 90       	ld	r0, Z+
    50b6:	80 19       	sub	r24, r0
    50b8:	01 10       	cpse	r0, r1
    50ba:	d9 f3       	breq	.-10     	; 0x50b2 <strcmp+0x4>
    50bc:	99 0b       	sbc	r25, r25
    50be:	08 95       	ret

000050c0 <strcpy>:
    50c0:	fb 01       	movw	r30, r22
    50c2:	dc 01       	movw	r26, r24
    50c4:	01 90       	ld	r0, Z+
    50c6:	0d 92       	st	X+, r0
    50c8:	00 20       	and	r0, r0
    50ca:	e1 f7       	brne	.-8      	; 0x50c4 <strcpy+0x4>
    50cc:	08 95       	ret

000050ce <strncmp>:
    50ce:	fb 01       	movw	r30, r22
    50d0:	dc 01       	movw	r26, r24
    50d2:	41 50       	subi	r20, 0x01	; 1
    50d4:	50 40       	sbci	r21, 0x00	; 0
    50d6:	30 f0       	brcs	.+12     	; 0x50e4 <strncmp+0x16>
    50d8:	8d 91       	ld	r24, X+
    50da:	01 90       	ld	r0, Z+
    50dc:	80 19       	sub	r24, r0
    50de:	19 f4       	brne	.+6      	; 0x50e6 <strncmp+0x18>
    50e0:	00 20       	and	r0, r0
    50e2:	b9 f7       	brne	.-18     	; 0x50d2 <strncmp+0x4>
    50e4:	88 1b       	sub	r24, r24
    50e6:	99 0b       	sbc	r25, r25
    50e8:	08 95       	ret

000050ea <strncpy>:
    50ea:	fb 01       	movw	r30, r22
    50ec:	dc 01       	movw	r26, r24
    50ee:	41 50       	subi	r20, 0x01	; 1
    50f0:	50 40       	sbci	r21, 0x00	; 0
    50f2:	48 f0       	brcs	.+18     	; 0x5106 <strncpy+0x1c>
    50f4:	01 90       	ld	r0, Z+
    50f6:	0d 92       	st	X+, r0
    50f8:	00 20       	and	r0, r0
    50fa:	c9 f7       	brne	.-14     	; 0x50ee <strncpy+0x4>
    50fc:	01 c0       	rjmp	.+2      	; 0x5100 <strncpy+0x16>
    50fe:	1d 92       	st	X+, r1
    5100:	41 50       	subi	r20, 0x01	; 1
    5102:	50 40       	sbci	r21, 0x00	; 0
    5104:	e0 f7       	brcc	.-8      	; 0x50fe <strncpy+0x14>
    5106:	08 95       	ret

00005108 <strrchr>:
    5108:	fc 01       	movw	r30, r24
    510a:	81 e0       	ldi	r24, 0x01	; 1
    510c:	90 e0       	ldi	r25, 0x00	; 0
    510e:	01 90       	ld	r0, Z+
    5110:	06 16       	cp	r0, r22
    5112:	09 f4       	brne	.+2      	; 0x5116 <strrchr+0xe>
    5114:	cf 01       	movw	r24, r30
    5116:	00 20       	and	r0, r0
    5118:	d1 f7       	brne	.-12     	; 0x510e <strrchr+0x6>
    511a:	01 97       	sbiw	r24, 0x01	; 1
    511c:	08 95       	ret

0000511e <strstr>:
    511e:	fb 01       	movw	r30, r22
    5120:	51 91       	ld	r21, Z+
    5122:	55 23       	and	r21, r21
    5124:	a9 f0       	breq	.+42     	; 0x5150 <strstr+0x32>
    5126:	bf 01       	movw	r22, r30
    5128:	dc 01       	movw	r26, r24
    512a:	4d 91       	ld	r20, X+
    512c:	45 17       	cp	r20, r21
    512e:	41 11       	cpse	r20, r1
    5130:	e1 f7       	brne	.-8      	; 0x512a <strstr+0xc>
    5132:	59 f4       	brne	.+22     	; 0x514a <strstr+0x2c>
    5134:	cd 01       	movw	r24, r26
    5136:	01 90       	ld	r0, Z+
    5138:	00 20       	and	r0, r0
    513a:	49 f0       	breq	.+18     	; 0x514e <strstr+0x30>
    513c:	4d 91       	ld	r20, X+
    513e:	40 15       	cp	r20, r0
    5140:	41 11       	cpse	r20, r1
    5142:	c9 f3       	breq	.-14     	; 0x5136 <strstr+0x18>
    5144:	fb 01       	movw	r30, r22
    5146:	41 11       	cpse	r20, r1
    5148:	ef cf       	rjmp	.-34     	; 0x5128 <strstr+0xa>
    514a:	81 e0       	ldi	r24, 0x01	; 1
    514c:	90 e0       	ldi	r25, 0x00	; 0
    514e:	01 97       	sbiw	r24, 0x01	; 1
    5150:	08 95       	ret

00005152 <itoa>:
    5152:	fb 01       	movw	r30, r22
    5154:	9f 01       	movw	r18, r30
    5156:	e8 94       	clt
    5158:	42 30       	cpi	r20, 0x02	; 2
    515a:	c4 f0       	brlt	.+48     	; 0x518c <itoa+0x3a>
    515c:	45 32       	cpi	r20, 0x25	; 37
    515e:	b4 f4       	brge	.+44     	; 0x518c <itoa+0x3a>
    5160:	4a 30       	cpi	r20, 0x0A	; 10
    5162:	29 f4       	brne	.+10     	; 0x516e <itoa+0x1c>
    5164:	97 fb       	bst	r25, 7
    5166:	1e f4       	brtc	.+6      	; 0x516e <itoa+0x1c>
    5168:	90 95       	com	r25
    516a:	81 95       	neg	r24
    516c:	9f 4f       	sbci	r25, 0xFF	; 255
    516e:	64 2f       	mov	r22, r20
    5170:	77 27       	eor	r23, r23
    5172:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <__udivmodhi4>
    5176:	80 5d       	subi	r24, 0xD0	; 208
    5178:	8a 33       	cpi	r24, 0x3A	; 58
    517a:	0c f0       	brlt	.+2      	; 0x517e <itoa+0x2c>
    517c:	89 5d       	subi	r24, 0xD9	; 217
    517e:	81 93       	st	Z+, r24
    5180:	cb 01       	movw	r24, r22
    5182:	00 97       	sbiw	r24, 0x00	; 0
    5184:	a1 f7       	brne	.-24     	; 0x516e <itoa+0x1c>
    5186:	16 f4       	brtc	.+4      	; 0x518c <itoa+0x3a>
    5188:	5d e2       	ldi	r21, 0x2D	; 45
    518a:	51 93       	st	Z+, r21
    518c:	10 82       	st	Z, r1
    518e:	c9 01       	movw	r24, r18
    5190:	0c 94 51 29 	jmp	0x52a2	; 0x52a2 <strrev>

00005194 <ltoa>:
    5194:	fa 01       	movw	r30, r20
    5196:	cf 93       	push	r28
    5198:	ff 93       	push	r31
    519a:	ef 93       	push	r30
    519c:	22 30       	cpi	r18, 0x02	; 2
    519e:	44 f1       	brlt	.+80     	; 0x51f0 <ltoa+0x5c>
    51a0:	25 32       	cpi	r18, 0x25	; 37
    51a2:	34 f5       	brge	.+76     	; 0x51f0 <ltoa+0x5c>
    51a4:	c2 2f       	mov	r28, r18
    51a6:	e8 94       	clt
    51a8:	ca 30       	cpi	r28, 0x0A	; 10
    51aa:	49 f4       	brne	.+18     	; 0x51be <ltoa+0x2a>
    51ac:	97 fb       	bst	r25, 7
    51ae:	3e f4       	brtc	.+14     	; 0x51be <ltoa+0x2a>
    51b0:	90 95       	com	r25
    51b2:	80 95       	com	r24
    51b4:	70 95       	com	r23
    51b6:	61 95       	neg	r22
    51b8:	7f 4f       	sbci	r23, 0xFF	; 255
    51ba:	8f 4f       	sbci	r24, 0xFF	; 255
    51bc:	9f 4f       	sbci	r25, 0xFF	; 255
    51be:	2c 2f       	mov	r18, r28
    51c0:	33 27       	eor	r19, r19
    51c2:	44 27       	eor	r20, r20
    51c4:	55 27       	eor	r21, r21
    51c6:	ff 93       	push	r31
    51c8:	ef 93       	push	r30
    51ca:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__udivmodsi4>
    51ce:	ef 91       	pop	r30
    51d0:	ff 91       	pop	r31
    51d2:	60 5d       	subi	r22, 0xD0	; 208
    51d4:	6a 33       	cpi	r22, 0x3A	; 58
    51d6:	0c f0       	brlt	.+2      	; 0x51da <ltoa+0x46>
    51d8:	69 5d       	subi	r22, 0xD9	; 217
    51da:	61 93       	st	Z+, r22
    51dc:	b9 01       	movw	r22, r18
    51de:	ca 01       	movw	r24, r20
    51e0:	60 50       	subi	r22, 0x00	; 0
    51e2:	70 40       	sbci	r23, 0x00	; 0
    51e4:	80 40       	sbci	r24, 0x00	; 0
    51e6:	90 40       	sbci	r25, 0x00	; 0
    51e8:	51 f7       	brne	.-44     	; 0x51be <ltoa+0x2a>
    51ea:	16 f4       	brtc	.+4      	; 0x51f0 <ltoa+0x5c>
    51ec:	cd e2       	ldi	r28, 0x2D	; 45
    51ee:	c1 93       	st	Z+, r28
    51f0:	10 82       	st	Z, r1
    51f2:	8f 91       	pop	r24
    51f4:	9f 91       	pop	r25
    51f6:	cf 91       	pop	r28
    51f8:	0c 94 51 29 	jmp	0x52a2	; 0x52a2 <strrev>

000051fc <__mulsi_const_10>:
    51fc:	59 2f       	mov	r21, r25
    51fe:	48 2f       	mov	r20, r24
    5200:	37 2f       	mov	r19, r23
    5202:	26 2f       	mov	r18, r22
    5204:	66 0f       	add	r22, r22
    5206:	77 1f       	adc	r23, r23
    5208:	88 1f       	adc	r24, r24
    520a:	99 1f       	adc	r25, r25
    520c:	66 0f       	add	r22, r22
    520e:	77 1f       	adc	r23, r23
    5210:	88 1f       	adc	r24, r24
    5212:	99 1f       	adc	r25, r25
    5214:	62 0f       	add	r22, r18
    5216:	73 1f       	adc	r23, r19
    5218:	84 1f       	adc	r24, r20
    521a:	95 1f       	adc	r25, r21
    521c:	66 0f       	add	r22, r22
    521e:	77 1f       	adc	r23, r23
    5220:	88 1f       	adc	r24, r24
    5222:	99 1f       	adc	r25, r25
    5224:	08 95       	ret

00005226 <ultoa>:
    5226:	fa 01       	movw	r30, r20
    5228:	cf 93       	push	r28
    522a:	ff 93       	push	r31
    522c:	ef 93       	push	r30
    522e:	22 30       	cpi	r18, 0x02	; 2
    5230:	cc f0       	brlt	.+50     	; 0x5264 <ultoa+0x3e>
    5232:	25 32       	cpi	r18, 0x25	; 37
    5234:	bc f4       	brge	.+46     	; 0x5264 <ultoa+0x3e>
    5236:	c2 2f       	mov	r28, r18
    5238:	2c 2f       	mov	r18, r28
    523a:	33 27       	eor	r19, r19
    523c:	44 27       	eor	r20, r20
    523e:	55 27       	eor	r21, r21
    5240:	ff 93       	push	r31
    5242:	ef 93       	push	r30
    5244:	0e 94 19 25 	call	0x4a32	; 0x4a32 <__udivmodsi4>
    5248:	ef 91       	pop	r30
    524a:	ff 91       	pop	r31
    524c:	60 5d       	subi	r22, 0xD0	; 208
    524e:	6a 33       	cpi	r22, 0x3A	; 58
    5250:	0c f0       	brlt	.+2      	; 0x5254 <ultoa+0x2e>
    5252:	69 5d       	subi	r22, 0xD9	; 217
    5254:	61 93       	st	Z+, r22
    5256:	b9 01       	movw	r22, r18
    5258:	ca 01       	movw	r24, r20
    525a:	60 50       	subi	r22, 0x00	; 0
    525c:	70 40       	sbci	r23, 0x00	; 0
    525e:	80 40       	sbci	r24, 0x00	; 0
    5260:	90 40       	sbci	r25, 0x00	; 0
    5262:	51 f7       	brne	.-44     	; 0x5238 <ultoa+0x12>
    5264:	10 82       	st	Z, r1
    5266:	8f 91       	pop	r24
    5268:	9f 91       	pop	r25
    526a:	cf 91       	pop	r28
    526c:	0c 94 51 29 	jmp	0x52a2	; 0x52a2 <strrev>

00005270 <utoa>:
    5270:	fb 01       	movw	r30, r22
    5272:	9f 01       	movw	r18, r30
    5274:	42 30       	cpi	r20, 0x02	; 2
    5276:	74 f0       	brlt	.+28     	; 0x5294 <utoa+0x24>
    5278:	45 32       	cpi	r20, 0x25	; 37
    527a:	64 f4       	brge	.+24     	; 0x5294 <utoa+0x24>
    527c:	64 2f       	mov	r22, r20
    527e:	77 27       	eor	r23, r23
    5280:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <__udivmodhi4>
    5284:	80 5d       	subi	r24, 0xD0	; 208
    5286:	8a 33       	cpi	r24, 0x3A	; 58
    5288:	0c f0       	brlt	.+2      	; 0x528c <utoa+0x1c>
    528a:	89 5d       	subi	r24, 0xD9	; 217
    528c:	81 93       	st	Z+, r24
    528e:	cb 01       	movw	r24, r22
    5290:	00 97       	sbiw	r24, 0x00	; 0
    5292:	a1 f7       	brne	.-24     	; 0x527c <utoa+0xc>
    5294:	10 82       	st	Z, r1
    5296:	c9 01       	movw	r24, r18
    5298:	0c 94 51 29 	jmp	0x52a2	; 0x52a2 <strrev>

0000529c <__ctype_isfalse>:
    529c:	99 27       	eor	r25, r25
    529e:	88 27       	eor	r24, r24

000052a0 <__ctype_istrue>:
    52a0:	08 95       	ret

000052a2 <strrev>:
    52a2:	dc 01       	movw	r26, r24
    52a4:	fc 01       	movw	r30, r24
    52a6:	67 2f       	mov	r22, r23
    52a8:	71 91       	ld	r23, Z+
    52aa:	77 23       	and	r23, r23
    52ac:	e1 f7       	brne	.-8      	; 0x52a6 <strrev+0x4>
    52ae:	32 97       	sbiw	r30, 0x02	; 2
    52b0:	04 c0       	rjmp	.+8      	; 0x52ba <strrev+0x18>
    52b2:	7c 91       	ld	r23, X
    52b4:	6d 93       	st	X+, r22
    52b6:	70 83       	st	Z, r23
    52b8:	62 91       	ld	r22, -Z
    52ba:	ae 17       	cp	r26, r30
    52bc:	bf 07       	cpc	r27, r31
    52be:	c8 f3       	brcs	.-14     	; 0x52b2 <strrev+0x10>
    52c0:	08 95       	ret

000052c2 <_exit>:
    52c2:	f8 94       	cli

000052c4 <__stop_program>:
    52c4:	ff cf       	rjmp	.-2      	; 0x52c4 <__stop_program>
