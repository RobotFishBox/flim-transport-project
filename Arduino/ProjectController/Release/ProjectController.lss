
ProjectController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000218  00800100  000052c0  00005354  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000052c0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000178  00800318  00800318  0000556c  2**0
                  ALLOC
  3 .stab         000097f8  00000000  00000000  0000556c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008d69  00000000  00000000  0000ed64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8d 09 	jmp	0x131a	; 0x131a <__vector_7>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 bc 0c 	jmp	0x1978	; 0x1978 <__vector_11>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 96 15 	jmp	0x2b2c	; 0x2b2c <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 26 23 	jmp	0x464c	; 0x464c <__vector_18>
      4c:	0c 94 57 23 	jmp	0x46ae	; 0x46ae <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	b2 24       	eor	r11, r2

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	13 e0       	ldi	r17, 0x03	; 3
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e0 ec       	ldi	r30, 0xC0	; 192
      d8:	f2 e5       	ldi	r31, 0x52	; 82
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a8 31       	cpi	r26, 0x18	; 24
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	14 e0       	ldi	r17, 0x04	; 4
      e8:	a8 e1       	ldi	r26, 0x18	; 24
      ea:	b3 e0       	ldi	r27, 0x03	; 3
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	a0 39       	cpi	r26, 0x90	; 144
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c4 ec       	ldi	r28, 0xC4	; 196
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	22 97       	sbiw	r28, 0x02	; 2
     100:	fe 01       	movw	r30, r28
     102:	0e 94 71 25 	call	0x4ae2	; 0x4ae2 <__tablejump__>
     106:	c2 3c       	cpi	r28, 0xC2	; 194
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <main>
     110:	0c 94 5e 29 	jmp	0x52bc	; 0x52bc <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_ZN12AccelStepper4stepEh>:
     118:	dc 01       	movw	r26, r24
     11a:	12 96       	adiw	r26, 0x02	; 2
     11c:	2c 91       	ld	r18, X
     11e:	12 97       	sbiw	r26, 0x02	; 2
     120:	21 30       	cpi	r18, 0x01	; 1
     122:	79 f0       	breq	.+30     	; 0x142 <_ZN12AccelStepper4stepEh+0x2a>
     124:	21 30       	cpi	r18, 0x01	; 1
     126:	28 f0       	brcs	.+10     	; 0x132 <_ZN12AccelStepper4stepEh+0x1a>
     128:	22 30       	cpi	r18, 0x02	; 2
     12a:	99 f0       	breq	.+38     	; 0x152 <_ZN12AccelStepper4stepEh+0x3a>
     12c:	24 30       	cpi	r18, 0x04	; 4
     12e:	01 f5       	brne	.+64     	; 0x170 <_ZN12AccelStepper4stepEh+0x58>
     130:	18 c0       	rjmp	.+48     	; 0x162 <_ZN12AccelStepper4stepEh+0x4a>
     132:	dc 01       	movw	r26, r24
     134:	ed 91       	ld	r30, X+
     136:	fc 91       	ld	r31, X
     138:	02 80       	ldd	r0, Z+2	; 0x02
     13a:	f3 81       	ldd	r31, Z+3	; 0x03
     13c:	e0 2d       	mov	r30, r0
     13e:	09 95       	icall
     140:	08 95       	ret
     142:	dc 01       	movw	r26, r24
     144:	ed 91       	ld	r30, X+
     146:	fc 91       	ld	r31, X
     148:	11 97       	sbiw	r26, 0x01	; 1
     14a:	04 80       	ldd	r0, Z+4	; 0x04
     14c:	f5 81       	ldd	r31, Z+5	; 0x05
     14e:	e0 2d       	mov	r30, r0
     150:	06 c0       	rjmp	.+12     	; 0x15e <_ZN12AccelStepper4stepEh+0x46>
     152:	dc 01       	movw	r26, r24
     154:	ed 91       	ld	r30, X+
     156:	fc 91       	ld	r31, X
     158:	06 80       	ldd	r0, Z+6	; 0x06
     15a:	f7 81       	ldd	r31, Z+7	; 0x07
     15c:	e0 2d       	mov	r30, r0
     15e:	09 95       	icall
     160:	08 95       	ret
     162:	dc 01       	movw	r26, r24
     164:	ed 91       	ld	r30, X+
     166:	fc 91       	ld	r31, X
     168:	00 84       	ldd	r0, Z+8	; 0x08
     16a:	f1 85       	ldd	r31, Z+9	; 0x09
     16c:	e0 2d       	mov	r30, r0
     16e:	09 95       	icall
     170:	08 95       	ret

00000172 <_ZN12AccelStepper5step0Ev>:
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	ec 01       	movw	r28, r24
     178:	6f 85       	ldd	r22, Y+15	; 0x0f
     17a:	78 89       	ldd	r23, Y+16	; 0x10
     17c:	89 89       	ldd	r24, Y+17	; 0x11
     17e:	9a 89       	ldd	r25, Y+18	; 0x12
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	a9 01       	movw	r20, r18
     186:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__gtsf2>
     18a:	18 16       	cp	r1, r24
     18c:	1c f4       	brge	.+6      	; 0x194 <_ZN12AccelStepper5step0Ev+0x22>
     18e:	eb a1       	ldd	r30, Y+35	; 0x23
     190:	fc a1       	ldd	r31, Y+36	; 0x24
     192:	02 c0       	rjmp	.+4      	; 0x198 <_ZN12AccelStepper5step0Ev+0x26>
     194:	ed a1       	ldd	r30, Y+37	; 0x25
     196:	fe a1       	ldd	r31, Y+38	; 0x26
     198:	09 95       	icall
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	08 95       	ret

000001a0 <_ZN12AccelStepper5step4Eh>:
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	ec 01       	movw	r28, r24
     1a6:	61 30       	cpi	r22, 0x01	; 1
     1a8:	71 f0       	breq	.+28     	; 0x1c6 <_ZN12AccelStepper5step4Eh+0x26>
     1aa:	61 30       	cpi	r22, 0x01	; 1
     1ac:	28 f0       	brcs	.+10     	; 0x1b8 <_ZN12AccelStepper5step4Eh+0x18>
     1ae:	62 30       	cpi	r22, 0x02	; 2
     1b0:	c9 f0       	breq	.+50     	; 0x1e4 <_ZN12AccelStepper5step4Eh+0x44>
     1b2:	63 30       	cpi	r22, 0x03	; 3
     1b4:	71 f5       	brne	.+92     	; 0x212 <_ZN12AccelStepper5step4Eh+0x72>
     1b6:	1d c0       	rjmp	.+58     	; 0x1f2 <_ZN12AccelStepper5step4Eh+0x52>
     1b8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ba:	61 e0       	ldi	r22, 0x01	; 1
     1bc:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     1c0:	8c 81       	ldd	r24, Y+4	; 0x04
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	06 c0       	rjmp	.+12     	; 0x1d2 <_ZN12AccelStepper5step4Eh+0x32>
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     1ce:	8c 81       	ldd	r24, Y+4	; 0x04
     1d0:	61 e0       	ldi	r22, 0x01	; 1
     1d2:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     1d6:	8d 81       	ldd	r24, Y+5	; 0x05
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     1de:	8e 81       	ldd	r24, Y+6	; 0x06
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	15 c0       	rjmp	.+42     	; 0x20e <_ZN12AccelStepper5step4Eh+0x6e>
     1e4:	8b 81       	ldd	r24, Y+3	; 0x03
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     1ec:	8c 81       	ldd	r24, Y+4	; 0x04
     1ee:	61 e0       	ldi	r22, 0x01	; 1
     1f0:	06 c0       	rjmp	.+12     	; 0x1fe <_ZN12AccelStepper5step4Eh+0x5e>
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     1fa:	8c 81       	ldd	r24, Y+4	; 0x04
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     202:	8d 81       	ldd	r24, Y+5	; 0x05
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     20a:	8e 81       	ldd	r24, Y+6	; 0x06
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <_ZN12AccelStepper5step2Eh>:
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	ec 01       	movw	r28, r24
     21e:	61 30       	cpi	r22, 0x01	; 1
     220:	51 f0       	breq	.+20     	; 0x236 <_ZN12AccelStepper5step2Eh+0x1e>
     222:	61 30       	cpi	r22, 0x01	; 1
     224:	28 f0       	brcs	.+10     	; 0x230 <_ZN12AccelStepper5step2Eh+0x18>
     226:	62 30       	cpi	r22, 0x02	; 2
     228:	69 f0       	breq	.+26     	; 0x244 <_ZN12AccelStepper5step2Eh+0x2c>
     22a:	63 30       	cpi	r22, 0x03	; 3
     22c:	b1 f4       	brne	.+44     	; 0x25a <_ZN12AccelStepper5step2Eh+0x42>
     22e:	0d c0       	rjmp	.+26     	; 0x24a <_ZN12AccelStepper5step2Eh+0x32>
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	02 c0       	rjmp	.+4      	; 0x23a <_ZN12AccelStepper5step2Eh+0x22>
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	61 e0       	ldi	r22, 0x01	; 1
     23a:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     23e:	8c 81       	ldd	r24, Y+4	; 0x04
     240:	61 e0       	ldi	r22, 0x01	; 1
     242:	09 c0       	rjmp	.+18     	; 0x256 <_ZN12AccelStepper5step2Eh+0x3e>
     244:	8b 81       	ldd	r24, Y+3	; 0x03
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	02 c0       	rjmp	.+4      	; 0x24e <_ZN12AccelStepper5step2Eh+0x36>
     24a:	8b 81       	ldd	r24, Y+3	; 0x03
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     252:	8c 81       	ldd	r24, Y+4	; 0x04
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <_ZN12AccelStepper5step1Eh>:
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	6f 85       	ldd	r22, Y+15	; 0x0f
     26c:	78 89       	ldd	r23, Y+16	; 0x10
     26e:	89 89       	ldd	r24, Y+17	; 0x11
     270:	9a 89       	ldd	r25, Y+18	; 0x12
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	a9 01       	movw	r20, r18
     278:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__gtsf2>
     27c:	18 16       	cp	r1, r24
     27e:	0c f0       	brlt	.+2      	; 0x282 <_ZN12AccelStepper5step1Eh+0x22>
     280:	10 e0       	ldi	r17, 0x00	; 0
     282:	8c 81       	ldd	r24, Y+4	; 0x04
     284:	61 2f       	mov	r22, r17
     286:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     28a:	8b 81       	ldd	r24, Y+3	; 0x03
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 39 16 	call	0x2c72	; 0x2c72 <delayMicroseconds>
     29a:	8b 81       	ldd	r24, Y+3	; 0x03
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	08 95       	ret

000002aa <_ZN12AccelStepper12desiredSpeedEv>:
     2aa:	af 92       	push	r10
     2ac:	bf 92       	push	r11
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
     2c0:	6b 85       	ldd	r22, Y+11	; 0x0b
     2c2:	7c 85       	ldd	r23, Y+12	; 0x0c
     2c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     2c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     2c8:	2f 81       	ldd	r18, Y+7	; 0x07
     2ca:	38 85       	ldd	r19, Y+8	; 0x08
     2cc:	49 85       	ldd	r20, Y+9	; 0x09
     2ce:	5a 85       	ldd	r21, Y+10	; 0x0a
     2d0:	62 1b       	sub	r22, r18
     2d2:	73 0b       	sbc	r23, r19
     2d4:	84 0b       	sbc	r24, r20
     2d6:	95 0b       	sbc	r25, r21
     2d8:	09 f4       	brne	.+2      	; 0x2dc <_ZN12AccelStepper12desiredSpeedEv+0x32>
     2da:	d9 c0       	rjmp	.+434    	; 0x48e <_ZN12AccelStepper12desiredSpeedEv+0x1e4>
     2dc:	16 16       	cp	r1, r22
     2de:	17 06       	cpc	r1, r23
     2e0:	18 06       	cpc	r1, r24
     2e2:	19 06       	cpc	r1, r25
     2e4:	8c f4       	brge	.+34     	; 0x308 <_ZN12AccelStepper12desiredSpeedEv+0x5e>
     2e6:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__floatsisf>
     2ea:	9b 01       	movw	r18, r22
     2ec:	ac 01       	movw	r20, r24
     2ee:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__addsf3>
     2f2:	2f 89       	ldd	r18, Y+23	; 0x17
     2f4:	38 8d       	ldd	r19, Y+24	; 0x18
     2f6:	49 8d       	ldd	r20, Y+25	; 0x19
     2f8:	5a 8d       	ldd	r21, Y+26	; 0x1a
     2fa:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__mulsf3>
     2fe:	0e 94 79 25 	call	0x4af2	; 0x4af2 <sqrt>
     302:	7b 01       	movw	r14, r22
     304:	8c 01       	movw	r16, r24
     306:	1b c0       	rjmp	.+54     	; 0x33e <_ZN12AccelStepper12desiredSpeedEv+0x94>
     308:	90 95       	com	r25
     30a:	80 95       	com	r24
     30c:	70 95       	com	r23
     30e:	61 95       	neg	r22
     310:	7f 4f       	sbci	r23, 0xFF	; 255
     312:	8f 4f       	sbci	r24, 0xFF	; 255
     314:	9f 4f       	sbci	r25, 0xFF	; 255
     316:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__floatsisf>
     31a:	9b 01       	movw	r18, r22
     31c:	ac 01       	movw	r20, r24
     31e:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__addsf3>
     322:	2f 89       	ldd	r18, Y+23	; 0x17
     324:	38 8d       	ldd	r19, Y+24	; 0x18
     326:	49 8d       	ldd	r20, Y+25	; 0x19
     328:	5a 8d       	ldd	r21, Y+26	; 0x1a
     32a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__mulsf3>
     32e:	0e 94 79 25 	call	0x4af2	; 0x4af2 <sqrt>
     332:	7b 01       	movw	r14, r22
     334:	8c 01       	movw	r16, r24
     336:	17 fb       	bst	r17, 7
     338:	10 95       	com	r17
     33a:	17 f9       	bld	r17, 7
     33c:	10 95       	com	r17
     33e:	af 84       	ldd	r10, Y+15	; 0x0f
     340:	b8 88       	ldd	r11, Y+16	; 0x10
     342:	c9 88       	ldd	r12, Y+17	; 0x11
     344:	da 88       	ldd	r13, Y+18	; 0x12
     346:	c8 01       	movw	r24, r16
     348:	b7 01       	movw	r22, r14
     34a:	a6 01       	movw	r20, r12
     34c:	95 01       	movw	r18, r10
     34e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__gtsf2>
     352:	18 16       	cp	r1, r24
     354:	0c f0       	brlt	.+2      	; 0x358 <_ZN12AccelStepper12desiredSpeedEv+0xae>
     356:	45 c0       	rjmp	.+138    	; 0x3e2 <_ZN12AccelStepper12desiredSpeedEv+0x138>
     358:	c6 01       	movw	r24, r12
     35a:	b5 01       	movw	r22, r10
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	a9 01       	movw	r20, r18
     362:	0e 94 3e 11 	call	0x227c	; 0x227c <__eqsf2>
     366:	88 23       	and	r24, r24
     368:	59 f4       	brne	.+22     	; 0x380 <_ZN12AccelStepper12desiredSpeedEv+0xd6>
     36a:	2f 89       	ldd	r18, Y+23	; 0x17
     36c:	38 8d       	ldd	r19, Y+24	; 0x18
     36e:	49 8d       	ldd	r20, Y+25	; 0x19
     370:	5a 8d       	ldd	r21, Y+26	; 0x1a
     372:	ca 01       	movw	r24, r20
     374:	b9 01       	movw	r22, r18
     376:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__addsf3>
     37a:	0e 94 79 25 	call	0x4af2	; 0x4af2 <sqrt>
     37e:	1d c0       	rjmp	.+58     	; 0x3ba <_ZN12AccelStepper12desiredSpeedEv+0x110>
     380:	6f 89       	ldd	r22, Y+23	; 0x17
     382:	78 8d       	ldd	r23, Y+24	; 0x18
     384:	89 8d       	ldd	r24, Y+25	; 0x19
     386:	9a 8d       	ldd	r25, Y+26	; 0x1a
     388:	a6 01       	movw	r20, r12
     38a:	95 01       	movw	r18, r10
     38c:	0e 94 90 10 	call	0x2120	; 0x2120 <__divsf3>
     390:	e6 2e       	mov	r14, r22
     392:	f7 2e       	mov	r15, r23
     394:	08 2f       	mov	r16, r24
     396:	19 2f       	mov	r17, r25
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	a9 01       	movw	r20, r18
     39e:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__gtsf2>
     3a2:	18 16       	cp	r1, r24
     3a4:	24 f0       	brlt	.+8      	; 0x3ae <_ZN12AccelStepper12desiredSpeedEv+0x104>
     3a6:	17 fb       	bst	r17, 7
     3a8:	10 95       	com	r17
     3aa:	17 f9       	bld	r17, 7
     3ac:	10 95       	com	r17
     3ae:	c6 01       	movw	r24, r12
     3b0:	b5 01       	movw	r22, r10
     3b2:	a8 01       	movw	r20, r16
     3b4:	97 01       	movw	r18, r14
     3b6:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__addsf3>
     3ba:	c6 2e       	mov	r12, r22
     3bc:	b7 2e       	mov	r11, r23
     3be:	a8 2e       	mov	r10, r24
     3c0:	d9 2e       	mov	r13, r25
     3c2:	eb 88       	ldd	r14, Y+19	; 0x13
     3c4:	fc 88       	ldd	r15, Y+20	; 0x14
     3c6:	0d 89       	ldd	r16, Y+21	; 0x15
     3c8:	1e 89       	ldd	r17, Y+22	; 0x16
     3ca:	a8 01       	movw	r20, r16
     3cc:	97 01       	movw	r18, r14
     3ce:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__gtsf2>
     3d2:	18 16       	cp	r1, r24
     3d4:	0c f4       	brge	.+2      	; 0x3d8 <_ZN12AccelStepper12desiredSpeedEv+0x12e>
     3d6:	65 c0       	rjmp	.+202    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3d8:	ec 2c       	mov	r14, r12
     3da:	fb 2c       	mov	r15, r11
     3dc:	0a 2d       	mov	r16, r10
     3de:	1d 2d       	mov	r17, r13
     3e0:	60 c0       	rjmp	.+192    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3e2:	c8 01       	movw	r24, r16
     3e4:	b7 01       	movw	r22, r14
     3e6:	a6 01       	movw	r20, r12
     3e8:	95 01       	movw	r18, r10
     3ea:	0e 94 ce 11 	call	0x239c	; 0x239c <__ltsf2>
     3ee:	87 ff       	sbrs	r24, 7
     3f0:	58 c0       	rjmp	.+176    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3f2:	c6 01       	movw	r24, r12
     3f4:	b5 01       	movw	r22, r10
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	a9 01       	movw	r20, r18
     3fc:	0e 94 3e 11 	call	0x227c	; 0x227c <__eqsf2>
     400:	88 23       	and	r24, r24
     402:	89 f4       	brne	.+34     	; 0x426 <_ZN12AccelStepper12desiredSpeedEv+0x17c>
     404:	2f 89       	ldd	r18, Y+23	; 0x17
     406:	38 8d       	ldd	r19, Y+24	; 0x18
     408:	49 8d       	ldd	r20, Y+25	; 0x19
     40a:	5a 8d       	ldd	r21, Y+26	; 0x1a
     40c:	ca 01       	movw	r24, r20
     40e:	b9 01       	movw	r22, r18
     410:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__addsf3>
     414:	0e 94 79 25 	call	0x4af2	; 0x4af2 <sqrt>
     418:	5b 01       	movw	r10, r22
     41a:	6c 01       	movw	r12, r24
     41c:	d7 fa       	bst	r13, 7
     41e:	d0 94       	com	r13
     420:	d7 f8       	bld	r13, 7
     422:	d0 94       	com	r13
     424:	21 c0       	rjmp	.+66     	; 0x468 <_ZN12AccelStepper12desiredSpeedEv+0x1be>
     426:	6f 89       	ldd	r22, Y+23	; 0x17
     428:	78 8d       	ldd	r23, Y+24	; 0x18
     42a:	89 8d       	ldd	r24, Y+25	; 0x19
     42c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     42e:	a6 01       	movw	r20, r12
     430:	95 01       	movw	r18, r10
     432:	0e 94 90 10 	call	0x2120	; 0x2120 <__divsf3>
     436:	e6 2e       	mov	r14, r22
     438:	f7 2e       	mov	r15, r23
     43a:	08 2f       	mov	r16, r24
     43c:	19 2f       	mov	r17, r25
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	a9 01       	movw	r20, r18
     444:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__gtsf2>
     448:	18 16       	cp	r1, r24
     44a:	24 f0       	brlt	.+8      	; 0x454 <_ZN12AccelStepper12desiredSpeedEv+0x1aa>
     44c:	17 fb       	bst	r17, 7
     44e:	10 95       	com	r17
     450:	17 f9       	bld	r17, 7
     452:	10 95       	com	r17
     454:	c6 01       	movw	r24, r12
     456:	b5 01       	movw	r22, r10
     458:	a8 01       	movw	r20, r16
     45a:	97 01       	movw	r18, r14
     45c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__subsf3>
     460:	a6 2e       	mov	r10, r22
     462:	b7 2e       	mov	r11, r23
     464:	c8 2e       	mov	r12, r24
     466:	d9 2e       	mov	r13, r25
     468:	eb 88       	ldd	r14, Y+19	; 0x13
     46a:	fc 88       	ldd	r15, Y+20	; 0x14
     46c:	0d 89       	ldd	r16, Y+21	; 0x15
     46e:	1e 89       	ldd	r17, Y+22	; 0x16
     470:	17 fb       	bst	r17, 7
     472:	10 95       	com	r17
     474:	17 f9       	bld	r17, 7
     476:	10 95       	com	r17
     478:	c6 01       	movw	r24, r12
     47a:	b5 01       	movw	r22, r10
     47c:	a8 01       	movw	r20, r16
     47e:	97 01       	movw	r18, r14
     480:	0e 94 ce 11 	call	0x239c	; 0x239c <__ltsf2>
     484:	87 fd       	sbrc	r24, 7
     486:	0d c0       	rjmp	.+26     	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     488:	86 01       	movw	r16, r12
     48a:	75 01       	movw	r14, r10
     48c:	0a c0       	rjmp	.+20     	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     48e:	0f 2e       	mov	r0, r31
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	ef 2e       	mov	r14, r31
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	ff 2e       	mov	r15, r31
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	0f 2f       	mov	r16, r31
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	1f 2f       	mov	r17, r31
     4a0:	f0 2d       	mov	r31, r0
     4a2:	6e 2d       	mov	r22, r14
     4a4:	7f 2d       	mov	r23, r15
     4a6:	80 2f       	mov	r24, r16
     4a8:	91 2f       	mov	r25, r17
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	df 90       	pop	r13
     4b8:	cf 90       	pop	r12
     4ba:	bf 90       	pop	r11
     4bc:	af 90       	pop	r10
     4be:	08 95       	ret

000004c0 <_ZN12AccelStepper8runSpeedEv>:
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	ec 01       	movw	r28, r24
     4d6:	0e 94 de 15 	call	0x2bbc	; 0x2bbc <millis>
     4da:	5b 01       	movw	r10, r22
     4dc:	6c 01       	movw	r12, r24
     4de:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4e2:	ad 8d       	ldd	r26, Y+29	; 0x1d
     4e4:	be 8d       	ldd	r27, Y+30	; 0x1e
     4e6:	2f 8d       	ldd	r18, Y+31	; 0x1f
     4e8:	38 a1       	ldd	r19, Y+32	; 0x20
     4ea:	49 a1       	ldd	r20, Y+33	; 0x21
     4ec:	5a a1       	ldd	r21, Y+34	; 0x22
     4ee:	82 0f       	add	r24, r18
     4f0:	93 1f       	adc	r25, r19
     4f2:	a4 1f       	adc	r26, r20
     4f4:	b5 1f       	adc	r27, r21
     4f6:	8a 15       	cp	r24, r10
     4f8:	9b 05       	cpc	r25, r11
     4fa:	ac 05       	cpc	r26, r12
     4fc:	bd 05       	cpc	r27, r13
     4fe:	c0 f5       	brcc	.+112    	; 0x570 <_ZN12AccelStepper8runSpeedEv+0xb0>
     500:	ef 84       	ldd	r14, Y+15	; 0x0f
     502:	f8 88       	ldd	r15, Y+16	; 0x10
     504:	09 89       	ldd	r16, Y+17	; 0x11
     506:	1a 89       	ldd	r17, Y+18	; 0x12
     508:	c8 01       	movw	r24, r16
     50a:	b7 01       	movw	r22, r14
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	a9 01       	movw	r20, r18
     512:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__gtsf2>
     516:	18 16       	cp	r1, r24
     518:	44 f4       	brge	.+16     	; 0x52a <_ZN12AccelStepper8runSpeedEv+0x6a>
     51a:	8f 81       	ldd	r24, Y+7	; 0x07
     51c:	98 85       	ldd	r25, Y+8	; 0x08
     51e:	a9 85       	ldd	r26, Y+9	; 0x09
     520:	ba 85       	ldd	r27, Y+10	; 0x0a
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	a1 1d       	adc	r26, r1
     526:	b1 1d       	adc	r27, r1
     528:	10 c0       	rjmp	.+32     	; 0x54a <_ZN12AccelStepper8runSpeedEv+0x8a>
     52a:	c8 01       	movw	r24, r16
     52c:	b7 01       	movw	r22, r14
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	a9 01       	movw	r20, r18
     534:	0e 94 ce 11 	call	0x239c	; 0x239c <__ltsf2>
     538:	87 ff       	sbrs	r24, 7
     53a:	0b c0       	rjmp	.+22     	; 0x552 <_ZN12AccelStepper8runSpeedEv+0x92>
     53c:	8f 81       	ldd	r24, Y+7	; 0x07
     53e:	98 85       	ldd	r25, Y+8	; 0x08
     540:	a9 85       	ldd	r26, Y+9	; 0x09
     542:	ba 85       	ldd	r27, Y+10	; 0x0a
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	a1 09       	sbc	r26, r1
     548:	b1 09       	sbc	r27, r1
     54a:	8f 83       	std	Y+7, r24	; 0x07
     54c:	98 87       	std	Y+8, r25	; 0x08
     54e:	a9 87       	std	Y+9, r26	; 0x09
     550:	ba 87       	std	Y+10, r27	; 0x0a
     552:	e8 81       	ld	r30, Y
     554:	f9 81       	ldd	r31, Y+1	; 0x01
     556:	6f 81       	ldd	r22, Y+7	; 0x07
     558:	63 70       	andi	r22, 0x03	; 3
     55a:	01 90       	ld	r0, Z+
     55c:	f0 81       	ld	r31, Z
     55e:	e0 2d       	mov	r30, r0
     560:	ce 01       	movw	r24, r28
     562:	09 95       	icall
     564:	af 8e       	std	Y+31, r10	; 0x1f
     566:	b8 a2       	std	Y+32, r11	; 0x20
     568:	c9 a2       	std	Y+33, r12	; 0x21
     56a:	da a2       	std	Y+34, r13	; 0x22
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	01 c0       	rjmp	.+2      	; 0x572 <_ZN12AccelStepper8runSpeedEv+0xb2>
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	bf 90       	pop	r11
     584:	af 90       	pop	r10
     586:	08 95       	ret

00000588 <_ZN12AccelStepper12distanceToGoEv>:
     588:	fc 01       	movw	r30, r24
     58a:	23 85       	ldd	r18, Z+11	; 0x0b
     58c:	34 85       	ldd	r19, Z+12	; 0x0c
     58e:	45 85       	ldd	r20, Z+13	; 0x0d
     590:	56 85       	ldd	r21, Z+14	; 0x0e
     592:	87 81       	ldd	r24, Z+7	; 0x07
     594:	90 85       	ldd	r25, Z+8	; 0x08
     596:	a1 85       	ldd	r26, Z+9	; 0x09
     598:	b2 85       	ldd	r27, Z+10	; 0x0a
     59a:	28 1b       	sub	r18, r24
     59c:	39 0b       	sbc	r19, r25
     59e:	4a 0b       	sbc	r20, r26
     5a0:	5b 0b       	sbc	r21, r27
     5a2:	b9 01       	movw	r22, r18
     5a4:	ca 01       	movw	r24, r20
     5a6:	08 95       	ret

000005a8 <_ZN12AccelStepper14targetPositionEv>:
     5a8:	fc 01       	movw	r30, r24
     5aa:	63 85       	ldd	r22, Z+11	; 0x0b
     5ac:	74 85       	ldd	r23, Z+12	; 0x0c
     5ae:	85 85       	ldd	r24, Z+13	; 0x0d
     5b0:	96 85       	ldd	r25, Z+14	; 0x0e
     5b2:	08 95       	ret

000005b4 <_ZN12AccelStepper15currentPositionEv>:
     5b4:	fc 01       	movw	r30, r24
     5b6:	67 81       	ldd	r22, Z+7	; 0x07
     5b8:	70 85       	ldd	r23, Z+8	; 0x08
     5ba:	81 85       	ldd	r24, Z+9	; 0x09
     5bc:	92 85       	ldd	r25, Z+10	; 0x0a
     5be:	08 95       	ret

000005c0 <_ZN12AccelStepper18setCurrentPositionEl>:
     5c0:	fc 01       	movw	r30, r24
     5c2:	47 83       	std	Z+7, r20	; 0x07
     5c4:	50 87       	std	Z+8, r21	; 0x08
     5c6:	61 87       	std	Z+9, r22	; 0x09
     5c8:	72 87       	std	Z+10, r23	; 0x0a
     5ca:	08 95       	ret

000005cc <_ZN12AccelStepperC1EPFvvES1_>:
     5cc:	fc 01       	movw	r30, r24
     5ce:	84 e0       	ldi	r24, 0x04	; 4
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	91 83       	std	Z+1, r25	; 0x01
     5d4:	80 83       	st	Z, r24
     5d6:	12 82       	std	Z+2, r1	; 0x02
     5d8:	17 82       	std	Z+7, r1	; 0x07
     5da:	10 86       	std	Z+8, r1	; 0x08
     5dc:	11 86       	std	Z+9, r1	; 0x09
     5de:	12 86       	std	Z+10, r1	; 0x0a
     5e0:	13 86       	std	Z+11, r1	; 0x0b
     5e2:	14 86       	std	Z+12, r1	; 0x0c
     5e4:	15 86       	std	Z+13, r1	; 0x0d
     5e6:	16 86       	std	Z+14, r1	; 0x0e
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	dc 01       	movw	r26, r24
     5ee:	87 87       	std	Z+15, r24	; 0x0f
     5f0:	90 8b       	std	Z+16, r25	; 0x10
     5f2:	a1 8b       	std	Z+17, r26	; 0x11
     5f4:	b2 8b       	std	Z+18, r27	; 0x12
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e8       	ldi	r26, 0x80	; 128
     5fc:	bf e3       	ldi	r27, 0x3F	; 63
     5fe:	83 8b       	std	Z+19, r24	; 0x13
     600:	94 8b       	std	Z+20, r25	; 0x14
     602:	a5 8b       	std	Z+21, r26	; 0x15
     604:	b6 8b       	std	Z+22, r27	; 0x16
     606:	87 8b       	std	Z+23, r24	; 0x17
     608:	90 8f       	std	Z+24, r25	; 0x18
     60a:	a1 8f       	std	Z+25, r26	; 0x19
     60c:	b2 8f       	std	Z+26, r27	; 0x1a
     60e:	13 8e       	std	Z+27, r1	; 0x1b
     610:	14 8e       	std	Z+28, r1	; 0x1c
     612:	15 8e       	std	Z+29, r1	; 0x1d
     614:	16 8e       	std	Z+30, r1	; 0x1e
     616:	17 8e       	std	Z+31, r1	; 0x1f
     618:	10 a2       	std	Z+32, r1	; 0x20
     61a:	11 a2       	std	Z+33, r1	; 0x21
     61c:	12 a2       	std	Z+34, r1	; 0x22
     61e:	13 82       	std	Z+3, r1	; 0x03
     620:	14 82       	std	Z+4, r1	; 0x04
     622:	15 82       	std	Z+5, r1	; 0x05
     624:	16 82       	std	Z+6, r1	; 0x06
     626:	74 a3       	std	Z+36, r23	; 0x24
     628:	63 a3       	std	Z+35, r22	; 0x23
     62a:	56 a3       	std	Z+38, r21	; 0x26
     62c:	45 a3       	std	Z+37, r20	; 0x25
     62e:	08 95       	ret

00000630 <_ZN12AccelStepper8setSpeedEf>:
     630:	af 92       	push	r10
     632:	bf 92       	push	r11
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	ec 01       	movw	r28, r24
     646:	9a 01       	movw	r18, r20
     648:	ab 01       	movw	r20, r22
     64a:	2f 87       	std	Y+15, r18	; 0x0f
     64c:	38 8b       	std	Y+16, r19	; 0x10
     64e:	49 8b       	std	Y+17, r20	; 0x11
     650:	5a 8b       	std	Y+18, r21	; 0x12
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	8a e7       	ldi	r24, 0x7A	; 122
     658:	94 e4       	ldi	r25, 0x44	; 68
     65a:	0e 94 90 10 	call	0x2120	; 0x2120 <__divsf3>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	5b 01       	movw	r10, r22
     664:	6c 01       	movw	r12, r24
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	a9 01       	movw	r20, r18
     66c:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__gtsf2>
     670:	18 16       	cp	r1, r24
     672:	1c f4       	brge	.+6      	; 0x67a <_ZN12AccelStepper8setSpeedEf+0x4a>
     674:	b7 01       	movw	r22, r14
     676:	c8 01       	movw	r24, r16
     678:	03 c0       	rjmp	.+6      	; 0x680 <_ZN12AccelStepper8setSpeedEf+0x50>
     67a:	c6 01       	movw	r24, r12
     67c:	b5 01       	movw	r22, r10
     67e:	90 58       	subi	r25, 0x80	; 128
     680:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__fixunssfsi>
     684:	6b 8f       	std	Y+27, r22	; 0x1b
     686:	7c 8f       	std	Y+28, r23	; 0x1c
     688:	8d 8f       	std	Y+29, r24	; 0x1d
     68a:	9e 8f       	std	Y+30, r25	; 0x1e
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	df 90       	pop	r13
     69a:	cf 90       	pop	r12
     69c:	bf 90       	pop	r11
     69e:	af 90       	pop	r10
     6a0:	08 95       	ret

000006a2 <_ZN12AccelStepper15computeNewSpeedEv>:
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
     6a8:	e8 81       	ld	r30, Y
     6aa:	f9 81       	ldd	r31, Y+1	; 0x01
     6ac:	02 84       	ldd	r0, Z+10	; 0x0a
     6ae:	f3 85       	ldd	r31, Z+11	; 0x0b
     6b0:	e0 2d       	mov	r30, r0
     6b2:	09 95       	icall
     6b4:	ab 01       	movw	r20, r22
     6b6:	bc 01       	movw	r22, r24
     6b8:	ce 01       	movw	r24, r28
     6ba:	0e 94 18 03 	call	0x630	; 0x630 <_ZN12AccelStepper8setSpeedEf>
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <_ZN12AccelStepper15setAccelerationEf>:
     6c4:	fc 01       	movw	r30, r24
     6c6:	47 8b       	std	Z+23, r20	; 0x17
     6c8:	50 8f       	std	Z+24, r21	; 0x18
     6ca:	61 8f       	std	Z+25, r22	; 0x19
     6cc:	72 8f       	std	Z+26, r23	; 0x1a
     6ce:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     6d2:	08 95       	ret

000006d4 <_ZN12AccelStepper11setMaxSpeedEf>:
     6d4:	fc 01       	movw	r30, r24
     6d6:	43 8b       	std	Z+19, r20	; 0x13
     6d8:	54 8b       	std	Z+20, r21	; 0x14
     6da:	65 8b       	std	Z+21, r22	; 0x15
     6dc:	76 8b       	std	Z+22, r23	; 0x16
     6de:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     6e2:	08 95       	ret

000006e4 <_ZN12AccelStepper3runEv>:
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	ec 01       	movw	r28, r24
     6ea:	2b 85       	ldd	r18, Y+11	; 0x0b
     6ec:	3c 85       	ldd	r19, Y+12	; 0x0c
     6ee:	4d 85       	ldd	r20, Y+13	; 0x0d
     6f0:	5e 85       	ldd	r21, Y+14	; 0x0e
     6f2:	8f 81       	ldd	r24, Y+7	; 0x07
     6f4:	98 85       	ldd	r25, Y+8	; 0x08
     6f6:	a9 85       	ldd	r26, Y+9	; 0x09
     6f8:	ba 85       	ldd	r27, Y+10	; 0x0a
     6fa:	28 17       	cp	r18, r24
     6fc:	39 07       	cpc	r19, r25
     6fe:	4a 07       	cpc	r20, r26
     700:	5b 07       	cpc	r21, r27
     702:	49 f0       	breq	.+18     	; 0x716 <_ZN12AccelStepper3runEv+0x32>
     704:	ce 01       	movw	r24, r28
     706:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN12AccelStepper8runSpeedEv>
     70a:	88 23       	and	r24, r24
     70c:	31 f0       	breq	.+12     	; 0x71a <_ZN12AccelStepper3runEv+0x36>
     70e:	ce 01       	movw	r24, r28
     710:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     714:	02 c0       	rjmp	.+4      	; 0x71a <_ZN12AccelStepper3runEv+0x36>
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	01 c0       	rjmp	.+2      	; 0x71c <_ZN12AccelStepper3runEv+0x38>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <_ZN12AccelStepper6moveToEl>:
     722:	fc 01       	movw	r30, r24
     724:	43 87       	std	Z+11, r20	; 0x0b
     726:	54 87       	std	Z+12, r21	; 0x0c
     728:	65 87       	std	Z+13, r22	; 0x0d
     72a:	76 87       	std	Z+14, r23	; 0x0e
     72c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     730:	08 95       	ret

00000732 <_ZN12AccelStepper4moveEl>:
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	fc 01       	movw	r30, r24
     738:	07 81       	ldd	r16, Z+7	; 0x07
     73a:	10 85       	ldd	r17, Z+8	; 0x08
     73c:	21 85       	ldd	r18, Z+9	; 0x09
     73e:	32 85       	ldd	r19, Z+10	; 0x0a
     740:	40 0f       	add	r20, r16
     742:	51 1f       	adc	r21, r17
     744:	62 1f       	adc	r22, r18
     746:	73 1f       	adc	r23, r19
     748:	43 87       	std	Z+11, r20	; 0x0b
     74a:	54 87       	std	Z+12, r21	; 0x0c
     74c:	65 87       	std	Z+13, r22	; 0x0d
     74e:	76 87       	std	Z+14, r23	; 0x0e
     750:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	08 95       	ret

0000075a <_ZN12AccelStepper5speedEv>:
     75a:	fc 01       	movw	r30, r24
     75c:	57 85       	ldd	r21, Z+15	; 0x0f
     75e:	40 89       	ldd	r20, Z+16	; 0x10
     760:	31 89       	ldd	r19, Z+17	; 0x11
     762:	22 89       	ldd	r18, Z+18	; 0x12
     764:	65 2f       	mov	r22, r21
     766:	74 2f       	mov	r23, r20
     768:	83 2f       	mov	r24, r19
     76a:	92 2f       	mov	r25, r18
     76c:	08 95       	ret

0000076e <_ZN12AccelStepper14disableOutputsEv>:
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	ec 01       	movw	r28, r24
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	88 23       	and	r24, r24
     778:	99 f0       	breq	.+38     	; 0x7a0 <_ZN12AccelStepper14disableOutputsEv+0x32>
     77a:	8b 81       	ldd	r24, Y+3	; 0x03
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     78a:	8a 81       	ldd	r24, Y+2	; 0x02
     78c:	84 30       	cpi	r24, 0x04	; 4
     78e:	41 f4       	brne	.+16     	; 0x7a0 <_ZN12AccelStepper14disableOutputsEv+0x32>
     790:	8d 81       	ldd	r24, Y+5	; 0x05
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     798:	8e 81       	ldd	r24, Y+6	; 0x06
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <_ZN12AccelStepper13enableOutputsEv>:
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	ec 01       	movw	r28, r24
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	88 23       	and	r24, r24
     7b0:	99 f0       	breq	.+38     	; 0x7d8 <_ZN12AccelStepper13enableOutputsEv+0x32>
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <pinMode>
     7ba:	8c 81       	ldd	r24, Y+4	; 0x04
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <pinMode>
     7c2:	8a 81       	ldd	r24, Y+2	; 0x02
     7c4:	84 30       	cpi	r24, 0x04	; 4
     7c6:	41 f4       	brne	.+16     	; 0x7d8 <_ZN12AccelStepper13enableOutputsEv+0x32>
     7c8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <pinMode>
     7d0:	8e 81       	ldd	r24, Y+6	; 0x06
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <pinMode>
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <_ZN12AccelStepperC1Ehhhhh>:
     7de:	ef 92       	push	r14
     7e0:	0f 93       	push	r16
     7e2:	fc 01       	movw	r30, r24
     7e4:	84 e0       	ldi	r24, 0x04	; 4
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	91 83       	std	Z+1, r25	; 0x01
     7ea:	80 83       	st	Z, r24
     7ec:	62 83       	std	Z+2, r22	; 0x02
     7ee:	17 82       	std	Z+7, r1	; 0x07
     7f0:	10 86       	std	Z+8, r1	; 0x08
     7f2:	11 86       	std	Z+9, r1	; 0x09
     7f4:	12 86       	std	Z+10, r1	; 0x0a
     7f6:	13 86       	std	Z+11, r1	; 0x0b
     7f8:	14 86       	std	Z+12, r1	; 0x0c
     7fa:	15 86       	std	Z+13, r1	; 0x0d
     7fc:	16 86       	std	Z+14, r1	; 0x0e
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	dc 01       	movw	r26, r24
     804:	87 87       	std	Z+15, r24	; 0x0f
     806:	90 8b       	std	Z+16, r25	; 0x10
     808:	a1 8b       	std	Z+17, r26	; 0x11
     80a:	b2 8b       	std	Z+18, r27	; 0x12
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	a0 e8       	ldi	r26, 0x80	; 128
     812:	bf e3       	ldi	r27, 0x3F	; 63
     814:	83 8b       	std	Z+19, r24	; 0x13
     816:	94 8b       	std	Z+20, r25	; 0x14
     818:	a5 8b       	std	Z+21, r26	; 0x15
     81a:	b6 8b       	std	Z+22, r27	; 0x16
     81c:	87 8b       	std	Z+23, r24	; 0x17
     81e:	90 8f       	std	Z+24, r25	; 0x18
     820:	a1 8f       	std	Z+25, r26	; 0x19
     822:	b2 8f       	std	Z+26, r27	; 0x1a
     824:	13 8e       	std	Z+27, r1	; 0x1b
     826:	14 8e       	std	Z+28, r1	; 0x1c
     828:	15 8e       	std	Z+29, r1	; 0x1d
     82a:	16 8e       	std	Z+30, r1	; 0x1e
     82c:	17 8e       	std	Z+31, r1	; 0x1f
     82e:	10 a2       	std	Z+32, r1	; 0x20
     830:	11 a2       	std	Z+33, r1	; 0x21
     832:	12 a2       	std	Z+34, r1	; 0x22
     834:	43 83       	std	Z+3, r20	; 0x03
     836:	24 83       	std	Z+4, r18	; 0x04
     838:	05 83       	std	Z+5, r16	; 0x05
     83a:	e6 82       	std	Z+6, r14	; 0x06
     83c:	cf 01       	movw	r24, r30
     83e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_ZN12AccelStepper13enableOutputsEv>
     842:	0f 91       	pop	r16
     844:	ef 90       	pop	r14
     846:	08 95       	ret

00000848 <_ZN12AccelStepper13runToPositionEv>:
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
     84e:	ce 01       	movw	r24, r28
     850:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN12AccelStepper3runEv>
     854:	88 23       	and	r24, r24
     856:	d9 f7       	brne	.-10     	; 0x84e <_ZN12AccelStepper13runToPositionEv+0x6>
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_ZN12AccelStepper18runSpeedToPositionEv>:
     85e:	fc 01       	movw	r30, r24
     860:	63 85       	ldd	r22, Z+11	; 0x0b
     862:	74 85       	ldd	r23, Z+12	; 0x0c
     864:	85 85       	ldd	r24, Z+13	; 0x0d
     866:	96 85       	ldd	r25, Z+14	; 0x0e
     868:	27 81       	ldd	r18, Z+7	; 0x07
     86a:	30 85       	ldd	r19, Z+8	; 0x08
     86c:	41 85       	ldd	r20, Z+9	; 0x09
     86e:	52 85       	ldd	r21, Z+10	; 0x0a
     870:	62 17       	cp	r22, r18
     872:	73 07       	cpc	r23, r19
     874:	84 07       	cpc	r24, r20
     876:	95 07       	cpc	r25, r21
     878:	21 f0       	breq	.+8      	; 0x882 <_ZN12AccelStepper18runSpeedToPositionEv+0x24>
     87a:	cf 01       	movw	r24, r30
     87c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN12AccelStepper8runSpeedEv>
     880:	08 95       	ret
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	08 95       	ret

00000886 <_ZN12AccelStepper16runToNewPositionEl>:
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	ec 01       	movw	r28, r24
     88c:	4b 87       	std	Y+11, r20	; 0x0b
     88e:	5c 87       	std	Y+12, r21	; 0x0c
     890:	6d 87       	std	Y+13, r22	; 0x0d
     892:	7e 87       	std	Y+14, r23	; 0x0e
     894:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     898:	ce 01       	movw	r24, r28
     89a:	0e 94 24 04 	call	0x848	; 0x848 <_ZN12AccelStepper13runToPositionEv>
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <_ZN7DCMotorC1Ei>:
     8a4:	fc 01       	movw	r30, r24
     8a6:	86 2f       	mov	r24, r22
     8a8:	60 83       	st	Z, r22
     8aa:	71 83       	std	Z+1, r23	; 0x01
     8ac:	61 e0       	ldi	r22, 0x01	; 1
     8ae:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <pinMode>
     8b2:	08 95       	ret

000008b4 <_ZN7DCMotor13setMotorspeedEi>:
     8b4:	fc 01       	movw	r30, r24
     8b6:	80 81       	ld	r24, Z
     8b8:	40 e0       	ldi	r20, 0x00	; 0
     8ba:	0e 94 48 0a 	call	0x1490	; 0x1490 <_Z10SoftPWMSetahh>
     8be:	08 95       	ret

000008c0 <_Z12DCMotor_intiv>:
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	0e 94 14 0a 	call	0x1428	; 0x1428 <_Z12SoftPWMBeginh>
     8c6:	08 95       	ret

000008c8 <_ZN3LCDC1Ehhhhhhhh>:
     8c8:	6f 92       	push	r6
     8ca:	7f 92       	push	r7
     8cc:	8f 92       	push	r8
     8ce:	af 92       	push	r10
     8d0:	cf 92       	push	r12
     8d2:	ef 92       	push	r14
     8d4:	ff 92       	push	r15
     8d6:	0f 93       	push	r16
     8d8:	1f 93       	push	r17
     8da:	df 93       	push	r29
     8dc:	cf 93       	push	r28
     8de:	00 d0       	rcall	.+0      	; 0x8e0 <_ZN3LCDC1Ehhhhhhhh+0x18>
     8e0:	0f 92       	push	r0
     8e2:	cd b7       	in	r28, 0x3d	; 61
     8e4:	de b7       	in	r29, 0x3e	; 62
     8e6:	3c 01       	movw	r6, r24
     8e8:	85 e1       	ldi	r24, 0x15	; 21
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	2b 83       	std	Y+3, r18	; 0x03
     8ee:	4a 83       	std	Y+2, r20	; 0x02
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <_Znwj>
     8f6:	f8 2e       	mov	r15, r24
     8f8:	19 2f       	mov	r17, r25
     8fa:	69 81       	ldd	r22, Y+1	; 0x01
     8fc:	4a 81       	ldd	r20, Y+2	; 0x02
     8fe:	2b 81       	ldd	r18, Y+3	; 0x03
     900:	0e 94 6a 07 	call	0xed4	; 0xed4 <_ZN13LiquidCrystalC1Ehhhhhh>
     904:	f3 01       	movw	r30, r6
     906:	f0 82       	st	Z, r15
     908:	11 83       	std	Z+1, r17	; 0x01
     90a:	8f 2d       	mov	r24, r15
     90c:	91 2f       	mov	r25, r17
     90e:	6a 2d       	mov	r22, r10
     910:	48 2d       	mov	r20, r8
     912:	20 e0       	ldi	r18, 0x00	; 0
     914:	0e 94 b4 06 	call	0xd68	; 0xd68 <_ZN13LiquidCrystal5beginEhhh>
     918:	f3 01       	movw	r30, r6
     91a:	80 81       	ld	r24, Z
     91c:	91 81       	ldd	r25, Z+1	; 0x01
     91e:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN13LiquidCrystal5clearEv>
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	cf 91       	pop	r28
     92a:	df 91       	pop	r29
     92c:	1f 91       	pop	r17
     92e:	0f 91       	pop	r16
     930:	ff 90       	pop	r15
     932:	ef 90       	pop	r14
     934:	cf 90       	pop	r12
     936:	af 90       	pop	r10
     938:	8f 90       	pop	r8
     93a:	7f 90       	pop	r7
     93c:	6f 90       	pop	r6
     93e:	08 95       	ret

00000940 <_ZN3LCD5traceE6String>:
     940:	0f 93       	push	r16
     942:	1f 93       	push	r17
     944:	cf 93       	push	r28
     946:	df 93       	push	r29
     948:	ec 01       	movw	r28, r24
     94a:	8b 01       	movw	r16, r22
     94c:	88 81       	ld	r24, Y
     94e:	99 81       	ldd	r25, Y+1	; 0x01
     950:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN13LiquidCrystal5clearEv>
     954:	88 81       	ld	r24, Y
     956:	99 81       	ldd	r25, Y+1	; 0x01
     958:	60 e0       	ldi	r22, 0x00	; 0
     95a:	40 e0       	ldi	r20, 0x00	; 0
     95c:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN13LiquidCrystal9setCursorEhh>
     960:	88 81       	ld	r24, Y
     962:	99 81       	ldd	r25, Y+1	; 0x01
     964:	b8 01       	movw	r22, r16
     966:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <_ZN5Print5printERK6String>
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	1f 91       	pop	r17
     970:	0f 91       	pop	r16
     972:	08 95       	ret

00000974 <_ZN3LCD9updateLCDEiiii>:
     974:	af 92       	push	r10
     976:	bf 92       	push	r11
     978:	cf 92       	push	r12
     97a:	df 92       	push	r13
     97c:	ef 92       	push	r14
     97e:	ff 92       	push	r15
     980:	0f 93       	push	r16
     982:	1f 93       	push	r17
     984:	cf 93       	push	r28
     986:	df 93       	push	r29
     988:	ec 01       	movw	r28, r24
     98a:	6b 01       	movw	r12, r22
     98c:	5a 01       	movw	r10, r20
     98e:	79 01       	movw	r14, r18
     990:	88 81       	ld	r24, Y
     992:	99 81       	ldd	r25, Y+1	; 0x01
     994:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN13LiquidCrystal5clearEv>
     998:	88 81       	ld	r24, Y
     99a:	99 81       	ldd	r25, Y+1	; 0x01
     99c:	60 e0       	ldi	r22, 0x00	; 0
     99e:	40 e0       	ldi	r20, 0x00	; 0
     9a0:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN13LiquidCrystal9setCursorEhh>
     9a4:	88 81       	ld	r24, Y
     9a6:	99 81       	ldd	r25, Y+1	; 0x01
     9a8:	60 e1       	ldi	r22, 0x10	; 16
     9aa:	71 e0       	ldi	r23, 0x01	; 1
     9ac:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN5Print5printEPKc>
     9b0:	88 81       	ld	r24, Y
     9b2:	99 81       	ldd	r25, Y+1	; 0x01
     9b4:	b6 01       	movw	r22, r12
     9b6:	4a e0       	ldi	r20, 0x0A	; 10
     9b8:	50 e0       	ldi	r21, 0x00	; 0
     9ba:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <_ZN5Print5printEii>
     9be:	88 81       	ld	r24, Y
     9c0:	99 81       	ldd	r25, Y+1	; 0x01
     9c2:	69 e0       	ldi	r22, 0x09	; 9
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN13LiquidCrystal9setCursorEhh>
     9ca:	88 81       	ld	r24, Y
     9cc:	99 81       	ldd	r25, Y+1	; 0x01
     9ce:	66 e1       	ldi	r22, 0x16	; 22
     9d0:	71 e0       	ldi	r23, 0x01	; 1
     9d2:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN5Print5printEPKc>
     9d6:	88 81       	ld	r24, Y
     9d8:	99 81       	ldd	r25, Y+1	; 0x01
     9da:	b5 01       	movw	r22, r10
     9dc:	4a e0       	ldi	r20, 0x0A	; 10
     9de:	50 e0       	ldi	r21, 0x00	; 0
     9e0:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <_ZN5Print5printEii>
     9e4:	88 81       	ld	r24, Y
     9e6:	99 81       	ldd	r25, Y+1	; 0x01
     9e8:	60 e0       	ldi	r22, 0x00	; 0
     9ea:	41 e0       	ldi	r20, 0x01	; 1
     9ec:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN13LiquidCrystal9setCursorEhh>
     9f0:	88 81       	ld	r24, Y
     9f2:	99 81       	ldd	r25, Y+1	; 0x01
     9f4:	6b e1       	ldi	r22, 0x1B	; 27
     9f6:	71 e0       	ldi	r23, 0x01	; 1
     9f8:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN5Print5printEPKc>
     9fc:	88 81       	ld	r24, Y
     9fe:	99 81       	ldd	r25, Y+1	; 0x01
     a00:	b7 01       	movw	r22, r14
     a02:	4a e0       	ldi	r20, 0x0A	; 10
     a04:	50 e0       	ldi	r21, 0x00	; 0
     a06:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <_ZN5Print5printEii>
     a0a:	88 81       	ld	r24, Y
     a0c:	99 81       	ldd	r25, Y+1	; 0x01
     a0e:	69 e0       	ldi	r22, 0x09	; 9
     a10:	41 e0       	ldi	r20, 0x01	; 1
     a12:	0e 94 76 06 	call	0xcec	; 0xcec <_ZN13LiquidCrystal9setCursorEhh>
     a16:	88 81       	ld	r24, Y
     a18:	99 81       	ldd	r25, Y+1	; 0x01
     a1a:	61 e2       	ldi	r22, 0x21	; 33
     a1c:	71 e0       	ldi	r23, 0x01	; 1
     a1e:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN5Print5printEPKc>
     a22:	88 81       	ld	r24, Y
     a24:	99 81       	ldd	r25, Y+1	; 0x01
     a26:	b8 01       	movw	r22, r16
     a28:	4a e0       	ldi	r20, 0x0A	; 10
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <_ZN5Print5printEii>
     a30:	df 91       	pop	r29
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	ff 90       	pop	r15
     a3a:	ef 90       	pop	r14
     a3c:	df 90       	pop	r13
     a3e:	cf 90       	pop	r12
     a40:	bf 90       	pop	r11
     a42:	af 90       	pop	r10
     a44:	08 95       	ret

00000a46 <_ZN13LiquidCrystal11pulseEnableEv>:
     a46:	cf 93       	push	r28
     a48:	df 93       	push	r29
     a4a:	ec 01       	movw	r28, r24
     a4c:	8e 81       	ldd	r24, Y+6	; 0x06
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     a54:	81 e0       	ldi	r24, 0x01	; 1
     a56:	90 e0       	ldi	r25, 0x00	; 0
     a58:	0e 94 39 16 	call	0x2c72	; 0x2c72 <delayMicroseconds>
     a5c:	8e 81       	ldd	r24, Y+6	; 0x06
     a5e:	61 e0       	ldi	r22, 0x01	; 1
     a60:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	0e 94 39 16 	call	0x2c72	; 0x2c72 <delayMicroseconds>
     a6c:	8e 81       	ldd	r24, Y+6	; 0x06
     a6e:	60 e0       	ldi	r22, 0x00	; 0
     a70:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     a74:	84 e6       	ldi	r24, 0x64	; 100
     a76:	90 e0       	ldi	r25, 0x00	; 0
     a78:	0e 94 39 16 	call	0x2c72	; 0x2c72 <delayMicroseconds>
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	08 95       	ret

00000a82 <_ZN13LiquidCrystal10write4bitsEh>:
     a82:	af 92       	push	r10
     a84:	bf 92       	push	r11
     a86:	cf 92       	push	r12
     a88:	df 92       	push	r13
     a8a:	ef 92       	push	r14
     a8c:	ff 92       	push	r15
     a8e:	0f 93       	push	r16
     a90:	1f 93       	push	r17
     a92:	cf 93       	push	r28
     a94:	df 93       	push	r29
     a96:	7c 01       	movw	r14, r24
     a98:	8c 01       	movw	r16, r24
     a9a:	09 5f       	subi	r16, 0xF9	; 249
     a9c:	1f 4f       	sbci	r17, 0xFF	; 255
     a9e:	c0 e0       	ldi	r28, 0x00	; 0
     aa0:	d0 e0       	ldi	r29, 0x00	; 0
     aa2:	a6 2e       	mov	r10, r22
     aa4:	bb 24       	eor	r11, r11
     aa6:	68 01       	movw	r12, r16
     aa8:	f8 01       	movw	r30, r16
     aaa:	81 91       	ld	r24, Z+
     aac:	8f 01       	movw	r16, r30
     aae:	61 e0       	ldi	r22, 0x01	; 1
     ab0:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <pinMode>
     ab4:	b5 01       	movw	r22, r10
     ab6:	0c 2e       	mov	r0, r28
     ab8:	02 c0       	rjmp	.+4      	; 0xabe <_ZN13LiquidCrystal10write4bitsEh+0x3c>
     aba:	75 95       	asr	r23
     abc:	67 95       	ror	r22
     abe:	0a 94       	dec	r0
     ac0:	e2 f7       	brpl	.-8      	; 0xaba <_ZN13LiquidCrystal10write4bitsEh+0x38>
     ac2:	61 70       	andi	r22, 0x01	; 1
     ac4:	f6 01       	movw	r30, r12
     ac6:	80 81       	ld	r24, Z
     ac8:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     acc:	21 96       	adiw	r28, 0x01	; 1
     ace:	c4 30       	cpi	r28, 0x04	; 4
     ad0:	d1 05       	cpc	r29, r1
     ad2:	49 f7       	brne	.-46     	; 0xaa6 <_ZN13LiquidCrystal10write4bitsEh+0x24>
     ad4:	c7 01       	movw	r24, r14
     ad6:	0e 94 23 05 	call	0xa46	; 0xa46 <_ZN13LiquidCrystal11pulseEnableEv>
     ada:	df 91       	pop	r29
     adc:	cf 91       	pop	r28
     ade:	1f 91       	pop	r17
     ae0:	0f 91       	pop	r16
     ae2:	ff 90       	pop	r15
     ae4:	ef 90       	pop	r14
     ae6:	df 90       	pop	r13
     ae8:	cf 90       	pop	r12
     aea:	bf 90       	pop	r11
     aec:	af 90       	pop	r10
     aee:	08 95       	ret

00000af0 <_ZN13LiquidCrystal10write8bitsEh>:
     af0:	af 92       	push	r10
     af2:	bf 92       	push	r11
     af4:	cf 92       	push	r12
     af6:	df 92       	push	r13
     af8:	ef 92       	push	r14
     afa:	ff 92       	push	r15
     afc:	0f 93       	push	r16
     afe:	1f 93       	push	r17
     b00:	cf 93       	push	r28
     b02:	df 93       	push	r29
     b04:	7c 01       	movw	r14, r24
     b06:	8c 01       	movw	r16, r24
     b08:	09 5f       	subi	r16, 0xF9	; 249
     b0a:	1f 4f       	sbci	r17, 0xFF	; 255
     b0c:	c0 e0       	ldi	r28, 0x00	; 0
     b0e:	d0 e0       	ldi	r29, 0x00	; 0
     b10:	a6 2e       	mov	r10, r22
     b12:	bb 24       	eor	r11, r11
     b14:	68 01       	movw	r12, r16
     b16:	f8 01       	movw	r30, r16
     b18:	81 91       	ld	r24, Z+
     b1a:	8f 01       	movw	r16, r30
     b1c:	61 e0       	ldi	r22, 0x01	; 1
     b1e:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <pinMode>
     b22:	b5 01       	movw	r22, r10
     b24:	0c 2e       	mov	r0, r28
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <_ZN13LiquidCrystal10write8bitsEh+0x3c>
     b28:	75 95       	asr	r23
     b2a:	67 95       	ror	r22
     b2c:	0a 94       	dec	r0
     b2e:	e2 f7       	brpl	.-8      	; 0xb28 <_ZN13LiquidCrystal10write8bitsEh+0x38>
     b30:	61 70       	andi	r22, 0x01	; 1
     b32:	f6 01       	movw	r30, r12
     b34:	80 81       	ld	r24, Z
     b36:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     b3a:	21 96       	adiw	r28, 0x01	; 1
     b3c:	c8 30       	cpi	r28, 0x08	; 8
     b3e:	d1 05       	cpc	r29, r1
     b40:	49 f7       	brne	.-46     	; 0xb14 <_ZN13LiquidCrystal10write8bitsEh+0x24>
     b42:	c7 01       	movw	r24, r14
     b44:	0e 94 23 05 	call	0xa46	; 0xa46 <_ZN13LiquidCrystal11pulseEnableEv>
     b48:	df 91       	pop	r29
     b4a:	cf 91       	pop	r28
     b4c:	1f 91       	pop	r17
     b4e:	0f 91       	pop	r16
     b50:	ff 90       	pop	r15
     b52:	ef 90       	pop	r14
     b54:	df 90       	pop	r13
     b56:	cf 90       	pop	r12
     b58:	bf 90       	pop	r11
     b5a:	af 90       	pop	r10
     b5c:	08 95       	ret

00000b5e <_ZN13LiquidCrystal4sendEhh>:
     b5e:	1f 93       	push	r17
     b60:	cf 93       	push	r28
     b62:	df 93       	push	r29
     b64:	ec 01       	movw	r28, r24
     b66:	16 2f       	mov	r17, r22
     b68:	8c 81       	ldd	r24, Y+4	; 0x04
     b6a:	64 2f       	mov	r22, r20
     b6c:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     b70:	8d 81       	ldd	r24, Y+5	; 0x05
     b72:	8f 3f       	cpi	r24, 0xFF	; 255
     b74:	19 f0       	breq	.+6      	; 0xb7c <_ZN13LiquidCrystal4sendEhh+0x1e>
     b76:	60 e0       	ldi	r22, 0x00	; 0
     b78:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     b7c:	8f 85       	ldd	r24, Y+15	; 0x0f
     b7e:	84 ff       	sbrs	r24, 4
     b80:	05 c0       	rjmp	.+10     	; 0xb8c <_ZN13LiquidCrystal4sendEhh+0x2e>
     b82:	ce 01       	movw	r24, r28
     b84:	61 2f       	mov	r22, r17
     b86:	0e 94 78 05 	call	0xaf0	; 0xaf0 <_ZN13LiquidCrystal10write8bitsEh>
     b8a:	0f c0       	rjmp	.+30     	; 0xbaa <_ZN13LiquidCrystal4sendEhh+0x4c>
     b8c:	21 2f       	mov	r18, r17
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	84 e0       	ldi	r24, 0x04	; 4
     b92:	35 95       	asr	r19
     b94:	27 95       	ror	r18
     b96:	8a 95       	dec	r24
     b98:	e1 f7       	brne	.-8      	; 0xb92 <_ZN13LiquidCrystal4sendEhh+0x34>
     b9a:	ce 01       	movw	r24, r28
     b9c:	62 2f       	mov	r22, r18
     b9e:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN13LiquidCrystal10write4bitsEh>
     ba2:	ce 01       	movw	r24, r28
     ba4:	61 2f       	mov	r22, r17
     ba6:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN13LiquidCrystal10write4bitsEh>
     baa:	df 91       	pop	r29
     bac:	cf 91       	pop	r28
     bae:	1f 91       	pop	r17
     bb0:	08 95       	ret

00000bb2 <_ZN13LiquidCrystal5writeEh>:
     bb2:	41 e0       	ldi	r20, 0x01	; 1
     bb4:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN13LiquidCrystal4sendEhh>
     bb8:	81 e0       	ldi	r24, 0x01	; 1
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	08 95       	ret

00000bbe <_ZN13LiquidCrystal7commandEh>:
     bbe:	40 e0       	ldi	r20, 0x00	; 0
     bc0:	0e 94 af 05 	call	0xb5e	; 0xb5e <_ZN13LiquidCrystal4sendEhh>
     bc4:	08 95       	ret

00000bc6 <_ZN13LiquidCrystal10createCharEhPh>:
     bc6:	cf 92       	push	r12
     bc8:	df 92       	push	r13
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	df 93       	push	r29
     bd4:	cf 93       	push	r28
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <_ZN13LiquidCrystal10createCharEhPh+0x12>
     bd8:	cd b7       	in	r28, 0x3d	; 61
     bda:	de b7       	in	r29, 0x3e	; 62
     bdc:	6c 01       	movw	r12, r24
     bde:	67 70       	andi	r22, 0x07	; 7
     be0:	66 0f       	add	r22, r22
     be2:	66 0f       	add	r22, r22
     be4:	66 0f       	add	r22, r22
     be6:	60 64       	ori	r22, 0x40	; 64
     be8:	49 83       	std	Y+1, r20	; 0x01
     bea:	5a 83       	std	Y+2, r21	; 0x02
     bec:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     bf0:	49 81       	ldd	r20, Y+1	; 0x01
     bf2:	5a 81       	ldd	r21, Y+2	; 0x02
     bf4:	e4 2e       	mov	r14, r20
     bf6:	f5 2e       	mov	r15, r21
     bf8:	00 e0       	ldi	r16, 0x00	; 0
     bfa:	10 e0       	ldi	r17, 0x00	; 0
     bfc:	d7 01       	movw	r26, r14
     bfe:	6d 91       	ld	r22, X+
     c00:	7d 01       	movw	r14, r26
     c02:	d6 01       	movw	r26, r12
     c04:	ed 91       	ld	r30, X+
     c06:	fc 91       	ld	r31, X
     c08:	01 90       	ld	r0, Z+
     c0a:	f0 81       	ld	r31, Z
     c0c:	e0 2d       	mov	r30, r0
     c0e:	c6 01       	movw	r24, r12
     c10:	09 95       	icall
     c12:	0f 5f       	subi	r16, 0xFF	; 255
     c14:	1f 4f       	sbci	r17, 0xFF	; 255
     c16:	08 30       	cpi	r16, 0x08	; 8
     c18:	11 05       	cpc	r17, r1
     c1a:	81 f7       	brne	.-32     	; 0xbfc <_ZN13LiquidCrystal10createCharEhPh+0x36>
     c1c:	0f 90       	pop	r0
     c1e:	0f 90       	pop	r0
     c20:	cf 91       	pop	r28
     c22:	df 91       	pop	r29
     c24:	1f 91       	pop	r17
     c26:	0f 91       	pop	r16
     c28:	ff 90       	pop	r15
     c2a:	ef 90       	pop	r14
     c2c:	df 90       	pop	r13
     c2e:	cf 90       	pop	r12
     c30:	08 95       	ret

00000c32 <_ZN13LiquidCrystal12noAutoscrollEv>:
     c32:	fc 01       	movw	r30, r24
     c34:	61 89       	ldd	r22, Z+17	; 0x11
     c36:	6e 7f       	andi	r22, 0xFE	; 254
     c38:	61 8b       	std	Z+17, r22	; 0x11
     c3a:	64 60       	ori	r22, 0x04	; 4
     c3c:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     c40:	08 95       	ret

00000c42 <_ZN13LiquidCrystal10autoscrollEv>:
     c42:	fc 01       	movw	r30, r24
     c44:	61 89       	ldd	r22, Z+17	; 0x11
     c46:	26 2f       	mov	r18, r22
     c48:	21 60       	ori	r18, 0x01	; 1
     c4a:	21 8b       	std	Z+17, r18	; 0x11
     c4c:	65 60       	ori	r22, 0x05	; 5
     c4e:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     c52:	08 95       	ret

00000c54 <_ZN13LiquidCrystal11rightToLeftEv>:
     c54:	fc 01       	movw	r30, r24
     c56:	61 89       	ldd	r22, Z+17	; 0x11
     c58:	6d 7f       	andi	r22, 0xFD	; 253
     c5a:	61 8b       	std	Z+17, r22	; 0x11
     c5c:	64 60       	ori	r22, 0x04	; 4
     c5e:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     c62:	08 95       	ret

00000c64 <_ZN13LiquidCrystal11leftToRightEv>:
     c64:	fc 01       	movw	r30, r24
     c66:	61 89       	ldd	r22, Z+17	; 0x11
     c68:	26 2f       	mov	r18, r22
     c6a:	22 60       	ori	r18, 0x02	; 2
     c6c:	21 8b       	std	Z+17, r18	; 0x11
     c6e:	66 60       	ori	r22, 0x06	; 6
     c70:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     c74:	08 95       	ret

00000c76 <_ZN13LiquidCrystal18scrollDisplayRightEv>:
     c76:	6c e1       	ldi	r22, 0x1C	; 28
     c78:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     c7c:	08 95       	ret

00000c7e <_ZN13LiquidCrystal17scrollDisplayLeftEv>:
     c7e:	68 e1       	ldi	r22, 0x18	; 24
     c80:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     c84:	08 95       	ret

00000c86 <_ZN13LiquidCrystal5blinkEv>:
     c86:	fc 01       	movw	r30, r24
     c88:	60 89       	ldd	r22, Z+16	; 0x10
     c8a:	26 2f       	mov	r18, r22
     c8c:	21 60       	ori	r18, 0x01	; 1
     c8e:	20 8b       	std	Z+16, r18	; 0x10
     c90:	69 60       	ori	r22, 0x09	; 9
     c92:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     c96:	08 95       	ret

00000c98 <_ZN13LiquidCrystal7noBlinkEv>:
     c98:	fc 01       	movw	r30, r24
     c9a:	60 89       	ldd	r22, Z+16	; 0x10
     c9c:	6e 7f       	andi	r22, 0xFE	; 254
     c9e:	60 8b       	std	Z+16, r22	; 0x10
     ca0:	68 60       	ori	r22, 0x08	; 8
     ca2:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     ca6:	08 95       	ret

00000ca8 <_ZN13LiquidCrystal6cursorEv>:
     ca8:	fc 01       	movw	r30, r24
     caa:	60 89       	ldd	r22, Z+16	; 0x10
     cac:	26 2f       	mov	r18, r22
     cae:	22 60       	ori	r18, 0x02	; 2
     cb0:	20 8b       	std	Z+16, r18	; 0x10
     cb2:	6a 60       	ori	r22, 0x0A	; 10
     cb4:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     cb8:	08 95       	ret

00000cba <_ZN13LiquidCrystal8noCursorEv>:
     cba:	fc 01       	movw	r30, r24
     cbc:	60 89       	ldd	r22, Z+16	; 0x10
     cbe:	6d 7f       	andi	r22, 0xFD	; 253
     cc0:	60 8b       	std	Z+16, r22	; 0x10
     cc2:	68 60       	ori	r22, 0x08	; 8
     cc4:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     cc8:	08 95       	ret

00000cca <_ZN13LiquidCrystal7displayEv>:
     cca:	fc 01       	movw	r30, r24
     ccc:	60 89       	ldd	r22, Z+16	; 0x10
     cce:	26 2f       	mov	r18, r22
     cd0:	24 60       	ori	r18, 0x04	; 4
     cd2:	20 8b       	std	Z+16, r18	; 0x10
     cd4:	6c 60       	ori	r22, 0x0C	; 12
     cd6:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     cda:	08 95       	ret

00000cdc <_ZN13LiquidCrystal9noDisplayEv>:
     cdc:	fc 01       	movw	r30, r24
     cde:	60 89       	ldd	r22, Z+16	; 0x10
     ce0:	6b 7f       	andi	r22, 0xFB	; 251
     ce2:	60 8b       	std	Z+16, r22	; 0x10
     ce4:	68 60       	ori	r22, 0x08	; 8
     ce6:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     cea:	08 95       	ret

00000cec <_ZN13LiquidCrystal9setCursorEhh>:
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	28 97       	sbiw	r28, 0x08	; 8
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	fe 01       	movw	r30, r28
     d02:	31 96       	adiw	r30, 0x01	; 1
     d04:	ad e2       	ldi	r26, 0x2D	; 45
     d06:	b1 e0       	ldi	r27, 0x01	; 1
     d08:	28 e0       	ldi	r18, 0x08	; 8
     d0a:	0d 90       	ld	r0, X+
     d0c:	01 92       	st	Z+, r0
     d0e:	21 50       	subi	r18, 0x01	; 1
     d10:	e1 f7       	brne	.-8      	; 0xd0a <_ZN13LiquidCrystal9setCursorEhh+0x1e>
     d12:	fc 01       	movw	r30, r24
     d14:	23 89       	ldd	r18, Z+19	; 0x13
     d16:	42 17       	cp	r20, r18
     d18:	10 f0       	brcs	.+4      	; 0xd1e <_ZN13LiquidCrystal9setCursorEhh+0x32>
     d1a:	42 2f       	mov	r20, r18
     d1c:	41 50       	subi	r20, 0x01	; 1
     d1e:	e4 2f       	mov	r30, r20
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	ee 0f       	add	r30, r30
     d24:	ff 1f       	adc	r31, r31
     d26:	ec 0f       	add	r30, r28
     d28:	fd 1f       	adc	r31, r29
     d2a:	21 81       	ldd	r18, Z+1	; 0x01
     d2c:	26 0f       	add	r18, r22
     d2e:	20 68       	ori	r18, 0x80	; 128
     d30:	62 2f       	mov	r22, r18
     d32:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     d36:	28 96       	adiw	r28, 0x08	; 8
     d38:	0f b6       	in	r0, 0x3f	; 63
     d3a:	f8 94       	cli
     d3c:	de bf       	out	0x3e, r29	; 62
     d3e:	0f be       	out	0x3f, r0	; 63
     d40:	cd bf       	out	0x3d, r28	; 61
     d42:	cf 91       	pop	r28
     d44:	df 91       	pop	r29
     d46:	08 95       	ret

00000d48 <_ZN13LiquidCrystal4homeEv>:
     d48:	62 e0       	ldi	r22, 0x02	; 2
     d4a:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     d4e:	80 ed       	ldi	r24, 0xD0	; 208
     d50:	97 e0       	ldi	r25, 0x07	; 7
     d52:	0e 94 39 16 	call	0x2c72	; 0x2c72 <delayMicroseconds>
     d56:	08 95       	ret

00000d58 <_ZN13LiquidCrystal5clearEv>:
     d58:	61 e0       	ldi	r22, 0x01	; 1
     d5a:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     d5e:	80 ed       	ldi	r24, 0xD0	; 208
     d60:	97 e0       	ldi	r25, 0x07	; 7
     d62:	0e 94 39 16 	call	0x2c72	; 0x2c72 <delayMicroseconds>
     d66:	08 95       	ret

00000d68 <_ZN13LiquidCrystal5beginEhhh>:
     d68:	cf 93       	push	r28
     d6a:	df 93       	push	r29
     d6c:	ec 01       	movw	r28, r24
     d6e:	42 30       	cpi	r20, 0x02	; 2
     d70:	18 f0       	brcs	.+6      	; 0xd78 <_ZN13LiquidCrystal5beginEhhh+0x10>
     d72:	8f 85       	ldd	r24, Y+15	; 0x0f
     d74:	88 60       	ori	r24, 0x08	; 8
     d76:	8f 87       	std	Y+15, r24	; 0x0f
     d78:	4b 8b       	std	Y+19, r20	; 0x13
     d7a:	1c 8a       	std	Y+20, r1	; 0x14
     d7c:	22 23       	and	r18, r18
     d7e:	29 f0       	breq	.+10     	; 0xd8a <_ZN13LiquidCrystal5beginEhhh+0x22>
     d80:	41 30       	cpi	r20, 0x01	; 1
     d82:	19 f4       	brne	.+6      	; 0xd8a <_ZN13LiquidCrystal5beginEhhh+0x22>
     d84:	8f 85       	ldd	r24, Y+15	; 0x0f
     d86:	84 60       	ori	r24, 0x04	; 4
     d88:	8f 87       	std	Y+15, r24	; 0x0f
     d8a:	80 e5       	ldi	r24, 0x50	; 80
     d8c:	93 ec       	ldi	r25, 0xC3	; 195
     d8e:	0e 94 39 16 	call	0x2c72	; 0x2c72 <delayMicroseconds>
     d92:	8c 81       	ldd	r24, Y+4	; 0x04
     d94:	60 e0       	ldi	r22, 0x00	; 0
     d96:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	60 e0       	ldi	r22, 0x00	; 0
     d9e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     da2:	8d 81       	ldd	r24, Y+5	; 0x05
     da4:	8f 3f       	cpi	r24, 0xFF	; 255
     da6:	19 f0       	breq	.+6      	; 0xdae <_ZN13LiquidCrystal5beginEhhh+0x46>
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
     dae:	6f 85       	ldd	r22, Y+15	; 0x0f
     db0:	64 fd       	sbrc	r22, 4
     db2:	1d c0       	rjmp	.+58     	; 0xdee <_ZN13LiquidCrystal5beginEhhh+0x86>
     db4:	ce 01       	movw	r24, r28
     db6:	63 e0       	ldi	r22, 0x03	; 3
     db8:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN13LiquidCrystal10write4bitsEh>
     dbc:	84 e9       	ldi	r24, 0x94	; 148
     dbe:	91 e1       	ldi	r25, 0x11	; 17
     dc0:	0e 94 39 16 	call	0x2c72	; 0x2c72 <delayMicroseconds>
     dc4:	ce 01       	movw	r24, r28
     dc6:	63 e0       	ldi	r22, 0x03	; 3
     dc8:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN13LiquidCrystal10write4bitsEh>
     dcc:	84 e9       	ldi	r24, 0x94	; 148
     dce:	91 e1       	ldi	r25, 0x11	; 17
     dd0:	0e 94 39 16 	call	0x2c72	; 0x2c72 <delayMicroseconds>
     dd4:	ce 01       	movw	r24, r28
     dd6:	63 e0       	ldi	r22, 0x03	; 3
     dd8:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN13LiquidCrystal10write4bitsEh>
     ddc:	86 e9       	ldi	r24, 0x96	; 150
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	0e 94 39 16 	call	0x2c72	; 0x2c72 <delayMicroseconds>
     de4:	ce 01       	movw	r24, r28
     de6:	62 e0       	ldi	r22, 0x02	; 2
     de8:	0e 94 41 05 	call	0xa82	; 0xa82 <_ZN13LiquidCrystal10write4bitsEh>
     dec:	16 c0       	rjmp	.+44     	; 0xe1a <_ZN13LiquidCrystal5beginEhhh+0xb2>
     dee:	60 62       	ori	r22, 0x20	; 32
     df0:	ce 01       	movw	r24, r28
     df2:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     df6:	84 e9       	ldi	r24, 0x94	; 148
     df8:	91 e1       	ldi	r25, 0x11	; 17
     dfa:	0e 94 39 16 	call	0x2c72	; 0x2c72 <delayMicroseconds>
     dfe:	6f 85       	ldd	r22, Y+15	; 0x0f
     e00:	60 62       	ori	r22, 0x20	; 32
     e02:	ce 01       	movw	r24, r28
     e04:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     e08:	86 e9       	ldi	r24, 0x96	; 150
     e0a:	90 e0       	ldi	r25, 0x00	; 0
     e0c:	0e 94 39 16 	call	0x2c72	; 0x2c72 <delayMicroseconds>
     e10:	6f 85       	ldd	r22, Y+15	; 0x0f
     e12:	60 62       	ori	r22, 0x20	; 32
     e14:	ce 01       	movw	r24, r28
     e16:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     e1a:	6f 85       	ldd	r22, Y+15	; 0x0f
     e1c:	60 62       	ori	r22, 0x20	; 32
     e1e:	ce 01       	movw	r24, r28
     e20:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     e24:	84 e0       	ldi	r24, 0x04	; 4
     e26:	88 8b       	std	Y+16, r24	; 0x10
     e28:	ce 01       	movw	r24, r28
     e2a:	0e 94 65 06 	call	0xcca	; 0xcca <_ZN13LiquidCrystal7displayEv>
     e2e:	ce 01       	movw	r24, r28
     e30:	0e 94 ac 06 	call	0xd58	; 0xd58 <_ZN13LiquidCrystal5clearEv>
     e34:	82 e0       	ldi	r24, 0x02	; 2
     e36:	89 8b       	std	Y+17, r24	; 0x11
     e38:	ce 01       	movw	r24, r28
     e3a:	66 e0       	ldi	r22, 0x06	; 6
     e3c:	0e 94 df 05 	call	0xbbe	; 0xbbe <_ZN13LiquidCrystal7commandEh>
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	08 95       	ret

00000e46 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
     e46:	6f 92       	push	r6
     e48:	7f 92       	push	r7
     e4a:	8f 92       	push	r8
     e4c:	af 92       	push	r10
     e4e:	cf 92       	push	r12
     e50:	ef 92       	push	r14
     e52:	0f 93       	push	r16
     e54:	1f 93       	push	r17
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	cd b7       	in	r28, 0x3d	; 61
     e5c:	de b7       	in	r29, 0x3e	; 62
     e5e:	3c 01       	movw	r6, r24
     e60:	16 2f       	mov	r17, r22
     e62:	84 2f       	mov	r24, r20
     e64:	f3 01       	movw	r30, r6
     e66:	44 83       	std	Z+4, r20	; 0x04
     e68:	25 83       	std	Z+5, r18	; 0x05
     e6a:	06 83       	std	Z+6, r16	; 0x06
     e6c:	e7 82       	std	Z+7, r14	; 0x07
     e6e:	c0 86       	std	Z+8, r12	; 0x08
     e70:	a1 86       	std	Z+9, r10	; 0x09
     e72:	82 86       	std	Z+10, r8	; 0x0a
     e74:	9d 85       	ldd	r25, Y+13	; 0x0d
     e76:	93 87       	std	Z+11, r25	; 0x0b
     e78:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7a:	94 87       	std	Z+12, r25	; 0x0c
     e7c:	9f 85       	ldd	r25, Y+15	; 0x0f
     e7e:	95 87       	std	Z+13, r25	; 0x0d
     e80:	98 89       	ldd	r25, Y+16	; 0x10
     e82:	96 87       	std	Z+14, r25	; 0x0e
     e84:	61 e0       	ldi	r22, 0x01	; 1
     e86:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <pinMode>
     e8a:	f3 01       	movw	r30, r6
     e8c:	85 81       	ldd	r24, Z+5	; 0x05
     e8e:	8f 3f       	cpi	r24, 0xFF	; 255
     e90:	19 f0       	breq	.+6      	; 0xe98 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x52>
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <pinMode>
     e98:	f3 01       	movw	r30, r6
     e9a:	86 81       	ldd	r24, Z+6	; 0x06
     e9c:	61 e0       	ldi	r22, 0x01	; 1
     e9e:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <pinMode>
     ea2:	11 23       	and	r17, r17
     ea4:	19 f0       	breq	.+6      	; 0xeac <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x66>
     ea6:	f3 01       	movw	r30, r6
     ea8:	17 86       	std	Z+15, r1	; 0x0f
     eaa:	03 c0       	rjmp	.+6      	; 0xeb2 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x6c>
     eac:	80 e1       	ldi	r24, 0x10	; 16
     eae:	f3 01       	movw	r30, r6
     eb0:	87 87       	std	Z+15, r24	; 0x0f
     eb2:	c3 01       	movw	r24, r6
     eb4:	60 e1       	ldi	r22, 0x10	; 16
     eb6:	41 e0       	ldi	r20, 0x01	; 1
     eb8:	20 e0       	ldi	r18, 0x00	; 0
     eba:	0e 94 b4 06 	call	0xd68	; 0xd68 <_ZN13LiquidCrystal5beginEhhh>
     ebe:	cf 91       	pop	r28
     ec0:	df 91       	pop	r29
     ec2:	1f 91       	pop	r17
     ec4:	0f 91       	pop	r16
     ec6:	ef 90       	pop	r14
     ec8:	cf 90       	pop	r12
     eca:	af 90       	pop	r10
     ecc:	8f 90       	pop	r8
     ece:	7f 90       	pop	r7
     ed0:	6f 90       	pop	r6
     ed2:	08 95       	ret

00000ed4 <_ZN13LiquidCrystalC1Ehhhhhh>:
     ed4:	8f 92       	push	r8
     ed6:	af 92       	push	r10
     ed8:	cf 92       	push	r12
     eda:	ef 92       	push	r14
     edc:	0f 93       	push	r16
     ede:	cf 93       	push	r28
     ee0:	df 93       	push	r29
     ee2:	a6 2f       	mov	r26, r22
     ee4:	74 2f       	mov	r23, r20
     ee6:	52 2f       	mov	r21, r18
     ee8:	30 2f       	mov	r19, r16
     eea:	ae 2c       	mov	r10, r14
     eec:	8c 2c       	mov	r8, r12
     eee:	ec 01       	movw	r28, r24
     ef0:	1b 82       	std	Y+3, r1	; 0x03
     ef2:	1a 82       	std	Y+2, r1	; 0x02
     ef4:	e9 e2       	ldi	r30, 0x29	; 41
     ef6:	f1 e0       	ldi	r31, 0x01	; 1
     ef8:	f9 83       	std	Y+1, r31	; 0x01
     efa:	e8 83       	st	Y, r30
     efc:	00 d0       	rcall	.+0      	; 0xefe <_ZN13LiquidCrystalC1Ehhhhhh+0x2a>
     efe:	00 d0       	rcall	.+0      	; 0xf00 <_ZN13LiquidCrystalC1Ehhhhhh+0x2c>
     f00:	ed b7       	in	r30, 0x3d	; 61
     f02:	fe b7       	in	r31, 0x3e	; 62
     f04:	31 96       	adiw	r30, 0x01	; 1
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	19 82       	std	Y+1, r1	; 0x01
     f0c:	11 82       	std	Z+1, r1	; 0x01
     f0e:	12 82       	std	Z+2, r1	; 0x02
     f10:	13 82       	std	Z+3, r1	; 0x03
     f12:	61 e0       	ldi	r22, 0x01	; 1
     f14:	4a 2f       	mov	r20, r26
     f16:	2f ef       	ldi	r18, 0xFF	; 255
     f18:	07 2f       	mov	r16, r23
     f1a:	e5 2e       	mov	r14, r21
     f1c:	c3 2e       	mov	r12, r19
     f1e:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	0f 90       	pop	r0
     f28:	0f 90       	pop	r0
     f2a:	df 91       	pop	r29
     f2c:	cf 91       	pop	r28
     f2e:	0f 91       	pop	r16
     f30:	ef 90       	pop	r14
     f32:	cf 90       	pop	r12
     f34:	af 90       	pop	r10
     f36:	8f 90       	pop	r8
     f38:	08 95       	ret

00000f3a <_ZN13LiquidCrystalC1Ehhhhhhh>:
     f3a:	8f 92       	push	r8
     f3c:	af 92       	push	r10
     f3e:	cf 92       	push	r12
     f40:	ef 92       	push	r14
     f42:	0f 93       	push	r16
     f44:	1f 93       	push	r17
     f46:	cf 93       	push	r28
     f48:	df 93       	push	r29
     f4a:	16 2f       	mov	r17, r22
     f4c:	f4 2f       	mov	r31, r20
     f4e:	e2 2f       	mov	r30, r18
     f50:	70 2f       	mov	r23, r16
     f52:	5e 2d       	mov	r21, r14
     f54:	3c 2d       	mov	r19, r12
     f56:	8a 2c       	mov	r8, r10
     f58:	dc 01       	movw	r26, r24
     f5a:	13 96       	adiw	r26, 0x03	; 3
     f5c:	1c 92       	st	X, r1
     f5e:	1e 92       	st	-X, r1
     f60:	12 97       	sbiw	r26, 0x02	; 2
     f62:	c9 e2       	ldi	r28, 0x29	; 41
     f64:	d1 e0       	ldi	r29, 0x01	; 1
     f66:	cd 93       	st	X+, r28
     f68:	dc 93       	st	X, r29
     f6a:	00 d0       	rcall	.+0      	; 0xf6c <_ZN13LiquidCrystalC1Ehhhhhhh+0x32>
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <_ZN13LiquidCrystalC1Ehhhhhhh+0x34>
     f6e:	cd b7       	in	r28, 0x3d	; 61
     f70:	de b7       	in	r29, 0x3e	; 62
     f72:	21 96       	adiw	r28, 0x01	; 1
     f74:	ad b7       	in	r26, 0x3d	; 61
     f76:	be b7       	in	r27, 0x3e	; 62
     f78:	11 96       	adiw	r26, 0x01	; 1
     f7a:	1c 92       	st	X, r1
     f7c:	19 82       	std	Y+1, r1	; 0x01
     f7e:	1a 82       	std	Y+2, r1	; 0x02
     f80:	1b 82       	std	Y+3, r1	; 0x03
     f82:	61 e0       	ldi	r22, 0x01	; 1
     f84:	41 2f       	mov	r20, r17
     f86:	2f 2f       	mov	r18, r31
     f88:	0e 2f       	mov	r16, r30
     f8a:	e7 2e       	mov	r14, r23
     f8c:	c5 2e       	mov	r12, r21
     f8e:	a3 2e       	mov	r10, r19
     f90:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     f94:	0f 90       	pop	r0
     f96:	0f 90       	pop	r0
     f98:	0f 90       	pop	r0
     f9a:	0f 90       	pop	r0
     f9c:	df 91       	pop	r29
     f9e:	cf 91       	pop	r28
     fa0:	1f 91       	pop	r17
     fa2:	0f 91       	pop	r16
     fa4:	ef 90       	pop	r14
     fa6:	cf 90       	pop	r12
     fa8:	af 90       	pop	r10
     faa:	8f 90       	pop	r8
     fac:	08 95       	ret

00000fae <_ZN13LiquidCrystalC1Ehhhhhhhhhh>:
     fae:	8f 92       	push	r8
     fb0:	af 92       	push	r10
     fb2:	cf 92       	push	r12
     fb4:	ef 92       	push	r14
     fb6:	ff 92       	push	r15
     fb8:	0f 93       	push	r16
     fba:	1f 93       	push	r17
     fbc:	df 93       	push	r29
     fbe:	cf 93       	push	r28
     fc0:	cd b7       	in	r28, 0x3d	; 61
     fc2:	de b7       	in	r29, 0x3e	; 62
     fc4:	f6 2e       	mov	r15, r22
     fc6:	f4 2f       	mov	r31, r20
     fc8:	e2 2f       	mov	r30, r18
     fca:	70 2f       	mov	r23, r16
     fcc:	5e 2d       	mov	r21, r14
     fce:	3c 2d       	mov	r19, r12
     fd0:	dc 01       	movw	r26, r24
     fd2:	13 96       	adiw	r26, 0x03	; 3
     fd4:	1c 92       	st	X, r1
     fd6:	1e 92       	st	-X, r1
     fd8:	12 97       	sbiw	r26, 0x02	; 2
     fda:	09 e2       	ldi	r16, 0x29	; 41
     fdc:	11 e0       	ldi	r17, 0x01	; 1
     fde:	0d 93       	st	X+, r16
     fe0:	1c 93       	st	X, r17
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <_ZN13LiquidCrystalC1Ehhhhhhhhhh+0x36>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <_ZN13LiquidCrystalC1Ehhhhhhhhhh+0x38>
     fe6:	0d b7       	in	r16, 0x3d	; 61
     fe8:	1e b7       	in	r17, 0x3e	; 62
     fea:	0f 5f       	subi	r16, 0xFF	; 255
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	ad b7       	in	r26, 0x3d	; 61
     ff0:	be b7       	in	r27, 0x3e	; 62
     ff2:	11 96       	adiw	r26, 0x01	; 1
     ff4:	ac 92       	st	X, r10
     ff6:	d8 01       	movw	r26, r16
     ff8:	11 96       	adiw	r26, 0x01	; 1
     ffa:	8c 92       	st	X, r8
     ffc:	11 97       	sbiw	r26, 0x01	; 1
     ffe:	2c 85       	ldd	r18, Y+12	; 0x0c
    1000:	12 96       	adiw	r26, 0x02	; 2
    1002:	2c 93       	st	X, r18
    1004:	12 97       	sbiw	r26, 0x02	; 2
    1006:	2d 85       	ldd	r18, Y+13	; 0x0d
    1008:	13 96       	adiw	r26, 0x03	; 3
    100a:	2c 93       	st	X, r18
    100c:	60 e0       	ldi	r22, 0x00	; 0
    100e:	4f 2d       	mov	r20, r15
    1010:	2f ef       	ldi	r18, 0xFF	; 255
    1012:	0f 2f       	mov	r16, r31
    1014:	ee 2e       	mov	r14, r30
    1016:	c7 2e       	mov	r12, r23
    1018:	a5 2e       	mov	r10, r21
    101a:	83 2e       	mov	r8, r19
    101c:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	1f 91       	pop	r17
    102e:	0f 91       	pop	r16
    1030:	ff 90       	pop	r15
    1032:	ef 90       	pop	r14
    1034:	cf 90       	pop	r12
    1036:	af 90       	pop	r10
    1038:	8f 90       	pop	r8
    103a:	08 95       	ret

0000103c <_ZN13LiquidCrystalC1Ehhhhhhhhhhh>:
    103c:	8f 92       	push	r8
    103e:	af 92       	push	r10
    1040:	cf 92       	push	r12
    1042:	df 92       	push	r13
    1044:	ef 92       	push	r14
    1046:	ff 92       	push	r15
    1048:	0f 93       	push	r16
    104a:	1f 93       	push	r17
    104c:	df 93       	push	r29
    104e:	cf 93       	push	r28
    1050:	cd b7       	in	r28, 0x3d	; 61
    1052:	de b7       	in	r29, 0x3e	; 62
    1054:	a6 2f       	mov	r26, r22
    1056:	f4 2e       	mov	r15, r20
    1058:	d2 2e       	mov	r13, r18
    105a:	70 2f       	mov	r23, r16
    105c:	5e 2d       	mov	r21, r14
    105e:	3c 2d       	mov	r19, r12
    1060:	ba 2d       	mov	r27, r10
    1062:	fc 01       	movw	r30, r24
    1064:	13 82       	std	Z+3, r1	; 0x03
    1066:	12 82       	std	Z+2, r1	; 0x02
    1068:	09 e2       	ldi	r16, 0x29	; 41
    106a:	11 e0       	ldi	r17, 0x01	; 1
    106c:	11 83       	std	Z+1, r17	; 0x01
    106e:	00 83       	st	Z, r16
    1070:	00 d0       	rcall	.+0      	; 0x1072 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh+0x36>
    1072:	00 d0       	rcall	.+0      	; 0x1074 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh+0x38>
    1074:	0d b7       	in	r16, 0x3d	; 61
    1076:	1e b7       	in	r17, 0x3e	; 62
    1078:	0f 5f       	subi	r16, 0xFF	; 255
    107a:	1f 4f       	sbci	r17, 0xFF	; 255
    107c:	ed b7       	in	r30, 0x3d	; 61
    107e:	fe b7       	in	r31, 0x3e	; 62
    1080:	81 82       	std	Z+1, r8	; 0x01
    1082:	2d 85       	ldd	r18, Y+13	; 0x0d
    1084:	f8 01       	movw	r30, r16
    1086:	21 83       	std	Z+1, r18	; 0x01
    1088:	2e 85       	ldd	r18, Y+14	; 0x0e
    108a:	22 83       	std	Z+2, r18	; 0x02
    108c:	2f 85       	ldd	r18, Y+15	; 0x0f
    108e:	23 83       	std	Z+3, r18	; 0x03
    1090:	60 e0       	ldi	r22, 0x00	; 0
    1092:	4a 2f       	mov	r20, r26
    1094:	2f 2d       	mov	r18, r15
    1096:	0d 2d       	mov	r16, r13
    1098:	e7 2e       	mov	r14, r23
    109a:	c5 2e       	mov	r12, r21
    109c:	a3 2e       	mov	r10, r19
    109e:	8b 2e       	mov	r8, r27
    10a0:	0e 94 23 07 	call	0xe46	; 0xe46 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    10a4:	0f 90       	pop	r0
    10a6:	0f 90       	pop	r0
    10a8:	0f 90       	pop	r0
    10aa:	0f 90       	pop	r0
    10ac:	cf 91       	pop	r28
    10ae:	df 91       	pop	r29
    10b0:	1f 91       	pop	r17
    10b2:	0f 91       	pop	r16
    10b4:	ff 90       	pop	r15
    10b6:	ef 90       	pop	r14
    10b8:	df 90       	pop	r13
    10ba:	cf 90       	pop	r12
    10bc:	af 90       	pop	r10
    10be:	8f 90       	pop	r8
    10c0:	08 95       	ret

000010c2 <_ZN12PDControllerC1Ev>:
    10c2:	2a ef       	ldi	r18, 0xFA	; 250
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	fc 01       	movw	r30, r24
    10c8:	31 8f       	std	Z+25, r19	; 0x19
    10ca:	20 8f       	std	Z+24, r18	; 0x18
    10cc:	08 95       	ret

000010ce <_ZN12PDController7computeEd>:
    10ce:	6f 92       	push	r6
    10d0:	7f 92       	push	r7
    10d2:	8f 92       	push	r8
    10d4:	9f 92       	push	r9
    10d6:	af 92       	push	r10
    10d8:	bf 92       	push	r11
    10da:	cf 92       	push	r12
    10dc:	df 92       	push	r13
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	ec 01       	movw	r28, r24
    10ec:	7a 01       	movw	r14, r20
    10ee:	8b 01       	movw	r16, r22
    10f0:	48 83       	st	Y, r20
    10f2:	59 83       	std	Y+1, r21	; 0x01
    10f4:	6a 83       	std	Y+2, r22	; 0x02
    10f6:	7b 83       	std	Y+3, r23	; 0x03
    10f8:	68 85       	ldd	r22, Y+8	; 0x08
    10fa:	79 85       	ldd	r23, Y+9	; 0x09
    10fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    10fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    1100:	a8 01       	movw	r20, r16
    1102:	97 01       	movw	r18, r14
    1104:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__subsf3>
    1108:	28 89       	ldd	r18, Y+16	; 0x10
    110a:	39 89       	ldd	r19, Y+17	; 0x11
    110c:	4a 89       	ldd	r20, Y+18	; 0x12
    110e:	5b 89       	ldd	r21, Y+19	; 0x13
    1110:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__mulsf3>
    1114:	5b 01       	movw	r10, r22
    1116:	6c 01       	movw	r12, r24
    1118:	c8 01       	movw	r24, r16
    111a:	b7 01       	movw	r22, r14
    111c:	2c 85       	ldd	r18, Y+12	; 0x0c
    111e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1120:	4e 85       	ldd	r20, Y+14	; 0x0e
    1122:	5f 85       	ldd	r21, Y+15	; 0x0f
    1124:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__subsf3>
    1128:	2c 89       	ldd	r18, Y+20	; 0x14
    112a:	3d 89       	ldd	r19, Y+21	; 0x15
    112c:	4e 89       	ldd	r20, Y+22	; 0x16
    112e:	5f 89       	ldd	r21, Y+23	; 0x17
    1130:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__mulsf3>
    1134:	9b 01       	movw	r18, r22
    1136:	ac 01       	movw	r20, r24
    1138:	c6 01       	movw	r24, r12
    113a:	b5 01       	movw	r22, r10
    113c:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__addsf3>
    1140:	d6 2e       	mov	r13, r22
    1142:	c7 2e       	mov	r12, r23
    1144:	b8 2e       	mov	r11, r24
    1146:	a9 2e       	mov	r10, r25
    1148:	a6 01       	movw	r20, r12
    114a:	95 01       	movw	r18, r10
    114c:	85 2f       	mov	r24, r21
    114e:	94 2f       	mov	r25, r20
    1150:	a3 2f       	mov	r26, r19
    1152:	b2 2f       	mov	r27, r18
    1154:	8c 83       	std	Y+4, r24	; 0x04
    1156:	9d 83       	std	Y+5, r25	; 0x05
    1158:	ae 83       	std	Y+6, r26	; 0x06
    115a:	bf 83       	std	Y+7, r27	; 0x07
    115c:	6e 8c       	ldd	r6, Y+30	; 0x1e
    115e:	7f 8c       	ldd	r7, Y+31	; 0x1f
    1160:	88 a0       	ldd	r8, Y+32	; 0x20
    1162:	99 a0       	ldd	r9, Y+33	; 0x21
    1164:	65 2f       	mov	r22, r21
    1166:	74 2f       	mov	r23, r20
    1168:	83 2f       	mov	r24, r19
    116a:	92 2f       	mov	r25, r18
    116c:	a4 01       	movw	r20, r8
    116e:	93 01       	movw	r18, r6
    1170:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__gtsf2>
    1174:	18 16       	cp	r1, r24
    1176:	84 f0       	brlt	.+32     	; 0x1198 <_ZN12PDController7computeEd+0xca>
    1178:	6a 8c       	ldd	r6, Y+26	; 0x1a
    117a:	7b 8c       	ldd	r7, Y+27	; 0x1b
    117c:	8c 8c       	ldd	r8, Y+28	; 0x1c
    117e:	9d 8c       	ldd	r9, Y+29	; 0x1d
    1180:	a6 01       	movw	r20, r12
    1182:	95 01       	movw	r18, r10
    1184:	65 2f       	mov	r22, r21
    1186:	74 2f       	mov	r23, r20
    1188:	83 2f       	mov	r24, r19
    118a:	92 2f       	mov	r25, r18
    118c:	a4 01       	movw	r20, r8
    118e:	93 01       	movw	r18, r6
    1190:	0e 94 ce 11 	call	0x239c	; 0x239c <__ltsf2>
    1194:	87 ff       	sbrs	r24, 7
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <_ZN12PDController7computeEd+0xd2>
    1198:	6c 82       	std	Y+4, r6	; 0x04
    119a:	7d 82       	std	Y+5, r7	; 0x05
    119c:	8e 82       	std	Y+6, r8	; 0x06
    119e:	9f 82       	std	Y+7, r9	; 0x07
    11a0:	ec 86       	std	Y+12, r14	; 0x0c
    11a2:	fd 86       	std	Y+13, r15	; 0x0d
    11a4:	0e 87       	std	Y+14, r16	; 0x0e
    11a6:	1f 87       	std	Y+15, r17	; 0x0f
    11a8:	df 91       	pop	r29
    11aa:	cf 91       	pop	r28
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	ff 90       	pop	r15
    11b2:	ef 90       	pop	r14
    11b4:	df 90       	pop	r13
    11b6:	cf 90       	pop	r12
    11b8:	bf 90       	pop	r11
    11ba:	af 90       	pop	r10
    11bc:	9f 90       	pop	r9
    11be:	8f 90       	pop	r8
    11c0:	7f 90       	pop	r7
    11c2:	6f 90       	pop	r6
    11c4:	08 95       	ret

000011c6 <_ZN12PDController10setTuningsEdd>:
    11c6:	af 92       	push	r10
    11c8:	bf 92       	push	r11
    11ca:	cf 92       	push	r12
    11cc:	df 92       	push	r13
    11ce:	ef 92       	push	r14
    11d0:	ff 92       	push	r15
    11d2:	0f 93       	push	r16
    11d4:	1f 93       	push	r17
    11d6:	cf 93       	push	r28
    11d8:	df 93       	push	r29
    11da:	ec 01       	movw	r28, r24
    11dc:	5a 01       	movw	r10, r20
    11de:	6b 01       	movw	r12, r22
    11e0:	78 01       	movw	r14, r16
    11e2:	89 01       	movw	r16, r18
    11e4:	68 8d       	ldd	r22, Y+24	; 0x18
    11e6:	79 8d       	ldd	r23, Y+25	; 0x19
    11e8:	88 27       	eor	r24, r24
    11ea:	77 fd       	sbrc	r23, 7
    11ec:	80 95       	com	r24
    11ee:	98 2f       	mov	r25, r24
    11f0:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__floatsisf>
    11f4:	20 e0       	ldi	r18, 0x00	; 0
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	4a e7       	ldi	r20, 0x7A	; 122
    11fa:	54 e4       	ldi	r21, 0x44	; 68
    11fc:	0e 94 90 10 	call	0x2120	; 0x2120 <__divsf3>
    1200:	56 2f       	mov	r21, r22
    1202:	47 2f       	mov	r20, r23
    1204:	38 2f       	mov	r19, r24
    1206:	29 2f       	mov	r18, r25
    1208:	a8 8a       	std	Y+16, r10	; 0x10
    120a:	b9 8a       	std	Y+17, r11	; 0x11
    120c:	ca 8a       	std	Y+18, r12	; 0x12
    120e:	db 8a       	std	Y+19, r13	; 0x13
    1210:	c8 01       	movw	r24, r16
    1212:	b7 01       	movw	r22, r14
    1214:	da 01       	movw	r26, r20
    1216:	f9 01       	movw	r30, r18
    1218:	2b 2f       	mov	r18, r27
    121a:	3a 2f       	mov	r19, r26
    121c:	4f 2f       	mov	r20, r31
    121e:	5e 2f       	mov	r21, r30
    1220:	0e 94 90 10 	call	0x2120	; 0x2120 <__divsf3>
    1224:	6c 8b       	std	Y+20, r22	; 0x14
    1226:	7d 8b       	std	Y+21, r23	; 0x15
    1228:	8e 8b       	std	Y+22, r24	; 0x16
    122a:	9f 8b       	std	Y+23, r25	; 0x17
    122c:	df 91       	pop	r29
    122e:	cf 91       	pop	r28
    1230:	1f 91       	pop	r17
    1232:	0f 91       	pop	r16
    1234:	ff 90       	pop	r15
    1236:	ef 90       	pop	r14
    1238:	df 90       	pop	r13
    123a:	cf 90       	pop	r12
    123c:	bf 90       	pop	r11
    123e:	af 90       	pop	r10
    1240:	08 95       	ret

00001242 <_ZN12PDController15setOutputLimitsEdd>:
    1242:	6f 92       	push	r6
    1244:	7f 92       	push	r7
    1246:	8f 92       	push	r8
    1248:	9f 92       	push	r9
    124a:	af 92       	push	r10
    124c:	bf 92       	push	r11
    124e:	cf 92       	push	r12
    1250:	df 92       	push	r13
    1252:	ef 92       	push	r14
    1254:	ff 92       	push	r15
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	df 93       	push	r29
    125e:	ec 01       	movw	r28, r24
    1260:	5a 01       	movw	r10, r20
    1262:	6b 01       	movw	r12, r22
    1264:	78 01       	movw	r14, r16
    1266:	89 01       	movw	r16, r18
    1268:	cb 01       	movw	r24, r22
    126a:	ba 01       	movw	r22, r20
    126c:	a8 01       	movw	r20, r16
    126e:	97 01       	movw	r18, r14
    1270:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__gtsf2>
    1274:	18 16       	cp	r1, r24
    1276:	2c f1       	brlt	.+74     	; 0x12c2 <_ZN12PDController15setOutputLimitsEdd+0x80>
    1278:	aa 8e       	std	Y+26, r10	; 0x1a
    127a:	bb 8e       	std	Y+27, r11	; 0x1b
    127c:	cc 8e       	std	Y+28, r12	; 0x1c
    127e:	dd 8e       	std	Y+29, r13	; 0x1d
    1280:	ee 8e       	std	Y+30, r14	; 0x1e
    1282:	ff 8e       	std	Y+31, r15	; 0x1f
    1284:	08 a3       	std	Y+32, r16	; 0x20
    1286:	19 a3       	std	Y+33, r17	; 0x21
    1288:	6c 80       	ldd	r6, Y+4	; 0x04
    128a:	7d 80       	ldd	r7, Y+5	; 0x05
    128c:	8e 80       	ldd	r8, Y+6	; 0x06
    128e:	9f 80       	ldd	r9, Y+7	; 0x07
    1290:	c4 01       	movw	r24, r8
    1292:	b3 01       	movw	r22, r6
    1294:	a8 01       	movw	r20, r16
    1296:	97 01       	movw	r18, r14
    1298:	0e 94 6e 11 	call	0x22dc	; 0x22dc <__gtsf2>
    129c:	18 16       	cp	r1, r24
    129e:	2c f4       	brge	.+10     	; 0x12aa <_ZN12PDController15setOutputLimitsEdd+0x68>
    12a0:	ec 82       	std	Y+4, r14	; 0x04
    12a2:	fd 82       	std	Y+5, r15	; 0x05
    12a4:	0e 83       	std	Y+6, r16	; 0x06
    12a6:	1f 83       	std	Y+7, r17	; 0x07
    12a8:	0c c0       	rjmp	.+24     	; 0x12c2 <_ZN12PDController15setOutputLimitsEdd+0x80>
    12aa:	c4 01       	movw	r24, r8
    12ac:	b3 01       	movw	r22, r6
    12ae:	a6 01       	movw	r20, r12
    12b0:	95 01       	movw	r18, r10
    12b2:	0e 94 ce 11 	call	0x239c	; 0x239c <__ltsf2>
    12b6:	87 ff       	sbrs	r24, 7
    12b8:	04 c0       	rjmp	.+8      	; 0x12c2 <_ZN12PDController15setOutputLimitsEdd+0x80>
    12ba:	ac 82       	std	Y+4, r10	; 0x04
    12bc:	bd 82       	std	Y+5, r11	; 0x05
    12be:	ce 82       	std	Y+6, r12	; 0x06
    12c0:	df 82       	std	Y+7, r13	; 0x07
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	ff 90       	pop	r15
    12cc:	ef 90       	pop	r14
    12ce:	df 90       	pop	r13
    12d0:	cf 90       	pop	r12
    12d2:	bf 90       	pop	r11
    12d4:	af 90       	pop	r10
    12d6:	9f 90       	pop	r9
    12d8:	8f 90       	pop	r8
    12da:	7f 90       	pop	r7
    12dc:	6f 90       	pop	r6
    12de:	08 95       	ret

000012e0 <_Z17PDController_initv>:
    12e0:	f8 94       	cli
    12e2:	10 92 80 00 	sts	0x0080, r1
    12e6:	e1 e8       	ldi	r30, 0x81	; 129
    12e8:	f0 e0       	ldi	r31, 0x00	; 0
    12ea:	10 82       	st	Z, r1
    12ec:	10 92 85 00 	sts	0x0085, r1
    12f0:	10 92 84 00 	sts	0x0084, r1
    12f4:	89 e0       	ldi	r24, 0x09	; 9
    12f6:	9d e3       	ldi	r25, 0x3D	; 61
    12f8:	90 93 89 00 	sts	0x0089, r25
    12fc:	80 93 88 00 	sts	0x0088, r24
    1300:	80 81       	ld	r24, Z
    1302:	88 60       	ori	r24, 0x08	; 8
    1304:	80 83       	st	Z, r24
    1306:	80 81       	ld	r24, Z
    1308:	84 60       	ori	r24, 0x04	; 4
    130a:	80 83       	st	Z, r24
    130c:	ef e6       	ldi	r30, 0x6F	; 111
    130e:	f0 e0       	ldi	r31, 0x00	; 0
    1310:	80 81       	ld	r24, Z
    1312:	82 60       	ori	r24, 0x02	; 2
    1314:	80 83       	st	Z, r24
    1316:	78 94       	sei
    1318:	08 95       	ret

0000131a <__vector_7>:
    131a:	1f 92       	push	r1
    131c:	0f 92       	push	r0
    131e:	0f b6       	in	r0, 0x3f	; 63
    1320:	0f 92       	push	r0
    1322:	11 24       	eor	r1, r1
    1324:	2f 93       	push	r18
    1326:	3f 93       	push	r19
    1328:	4f 93       	push	r20
    132a:	5f 93       	push	r21
    132c:	6f 93       	push	r22
    132e:	8f 93       	push	r24
    1330:	9f 93       	push	r25
    1332:	af 93       	push	r26
    1334:	bf 93       	push	r27
    1336:	ef 93       	push	r30
    1338:	ff 93       	push	r31
    133a:	80 91 35 01 	lds	r24, 0x0135
    133e:	8f 5f       	subi	r24, 0xFF	; 255
    1340:	80 93 35 01 	sts	0x0135, r24
    1344:	80 91 35 01 	lds	r24, 0x0135
    1348:	88 23       	and	r24, r24
    134a:	19 f0       	breq	.+6      	; 0x1352 <__vector_7+0x38>
    134c:	e9 e1       	ldi	r30, 0x19	; 25
    134e:	f3 e0       	ldi	r31, 0x03	; 3
    1350:	40 c0       	rjmp	.+128    	; 0x13d2 <__vector_7+0xb8>
    1352:	ea e1       	ldi	r30, 0x1A	; 26
    1354:	f3 e0       	ldi	r31, 0x03	; 3
    1356:	66 81       	ldd	r22, Z+6	; 0x06
    1358:	66 23       	and	r22, r22
    135a:	19 f4       	brne	.+6      	; 0x1362 <__vector_7+0x48>
    135c:	87 81       	ldd	r24, Z+7	; 0x07
    135e:	88 23       	and	r24, r24
    1360:	f9 f0       	breq	.+62     	; 0x13a0 <__vector_7+0x86>
    1362:	84 81       	ldd	r24, Z+4	; 0x04
    1364:	90 e0       	ldi	r25, 0x00	; 0
    1366:	25 81       	ldd	r18, Z+5	; 0x05
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	ac 01       	movw	r20, r24
    136c:	42 1b       	sub	r20, r18
    136e:	53 0b       	sbc	r21, r19
    1370:	14 16       	cp	r1, r20
    1372:	15 06       	cpc	r1, r21
    1374:	44 f4       	brge	.+16     	; 0x1386 <__vector_7+0x6c>
    1376:	66 23       	and	r22, r22
    1378:	a1 f0       	breq	.+40     	; 0x13a2 <__vector_7+0x88>
    137a:	26 0f       	add	r18, r22
    137c:	31 1d       	adc	r19, r1
    137e:	28 17       	cp	r18, r24
    1380:	39 07       	cpc	r19, r25
    1382:	7c f4       	brge	.+30     	; 0x13a2 <__vector_7+0x88>
    1384:	0b c0       	rjmp	.+22     	; 0x139c <__vector_7+0x82>
    1386:	41 15       	cp	r20, r1
    1388:	51 05       	cpc	r21, r1
    138a:	59 f0       	breq	.+22     	; 0x13a2 <__vector_7+0x88>
    138c:	47 81       	ldd	r20, Z+7	; 0x07
    138e:	44 23       	and	r20, r20
    1390:	41 f0       	breq	.+16     	; 0x13a2 <__vector_7+0x88>
    1392:	24 1b       	sub	r18, r20
    1394:	31 09       	sbc	r19, r1
    1396:	82 17       	cp	r24, r18
    1398:	93 07       	cpc	r25, r19
    139a:	1c f4       	brge	.+6      	; 0x13a2 <__vector_7+0x88>
    139c:	c9 01       	movw	r24, r18
    139e:	01 c0       	rjmp	.+2      	; 0x13a2 <__vector_7+0x88>
    13a0:	84 81       	ldd	r24, Z+4	; 0x04
    13a2:	85 83       	std	Z+5, r24	; 0x05
    13a4:	85 81       	ldd	r24, Z+5	; 0x05
    13a6:	88 23       	and	r24, r24
    13a8:	71 f0       	breq	.+28     	; 0x13c6 <__vector_7+0xac>
    13aa:	90 81       	ld	r25, Z
    13ac:	a1 81       	ldd	r26, Z+1	; 0x01
    13ae:	b2 81       	ldd	r27, Z+2	; 0x02
    13b0:	83 81       	ldd	r24, Z+3	; 0x03
    13b2:	99 23       	and	r25, r25
    13b4:	21 f4       	brne	.+8      	; 0x13be <__vector_7+0xa4>
    13b6:	9c 91       	ld	r25, X
    13b8:	98 2b       	or	r25, r24
    13ba:	9c 93       	st	X, r25
    13bc:	04 c0       	rjmp	.+8      	; 0x13c6 <__vector_7+0xac>
    13be:	9c 91       	ld	r25, X
    13c0:	80 95       	com	r24
    13c2:	89 23       	and	r24, r25
    13c4:	8c 93       	st	X, r24
    13c6:	39 96       	adiw	r30, 0x09	; 9
    13c8:	83 e0       	ldi	r24, 0x03	; 3
    13ca:	ee 3c       	cpi	r30, 0xCE	; 206
    13cc:	f8 07       	cpc	r31, r24
    13ce:	19 f6       	brne	.-122    	; 0x1356 <__vector_7+0x3c>
    13d0:	bd cf       	rjmp	.-134    	; 0x134c <__vector_7+0x32>
    13d2:	80 81       	ld	r24, Z
    13d4:	87 fd       	sbrc	r24, 7
    13d6:	13 c0       	rjmp	.+38     	; 0x13fe <__vector_7+0xe4>
    13d8:	80 91 35 01 	lds	r24, 0x0135
    13dc:	96 81       	ldd	r25, Z+6	; 0x06
    13de:	98 17       	cp	r25, r24
    13e0:	71 f4       	brne	.+28     	; 0x13fe <__vector_7+0xe4>
    13e2:	81 81       	ldd	r24, Z+1	; 0x01
    13e4:	a2 81       	ldd	r26, Z+2	; 0x02
    13e6:	b3 81       	ldd	r27, Z+3	; 0x03
    13e8:	94 81       	ldd	r25, Z+4	; 0x04
    13ea:	88 23       	and	r24, r24
    13ec:	29 f4       	brne	.+10     	; 0x13f8 <__vector_7+0xde>
    13ee:	2c 91       	ld	r18, X
    13f0:	89 2f       	mov	r24, r25
    13f2:	80 95       	com	r24
    13f4:	82 23       	and	r24, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <__vector_7+0xe2>
    13f8:	8c 91       	ld	r24, X
    13fa:	89 2b       	or	r24, r25
    13fc:	8c 93       	st	X, r24
    13fe:	39 96       	adiw	r30, 0x09	; 9
    1400:	83 e0       	ldi	r24, 0x03	; 3
    1402:	ed 3c       	cpi	r30, 0xCD	; 205
    1404:	f8 07       	cpc	r31, r24
    1406:	29 f7       	brne	.-54     	; 0x13d2 <__vector_7+0xb8>
    1408:	ff 91       	pop	r31
    140a:	ef 91       	pop	r30
    140c:	bf 91       	pop	r27
    140e:	af 91       	pop	r26
    1410:	9f 91       	pop	r25
    1412:	8f 91       	pop	r24
    1414:	6f 91       	pop	r22
    1416:	5f 91       	pop	r21
    1418:	4f 91       	pop	r20
    141a:	3f 91       	pop	r19
    141c:	2f 91       	pop	r18
    141e:	0f 90       	pop	r0
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	0f 90       	pop	r0
    1424:	1f 90       	pop	r1
    1426:	18 95       	reti

00001428 <_Z12SoftPWMBeginh>:
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	97 bb       	out	0x17, r25	; 23
    142c:	92 e0       	ldi	r25, 0x02	; 2
    142e:	90 93 b1 00 	sts	0x00B1, r25
    1432:	90 93 b0 00 	sts	0x00B0, r25
    1436:	22 e8       	ldi	r18, 0x82	; 130
    1438:	20 93 b3 00 	sts	0x00B3, r18
    143c:	90 93 70 00 	sts	0x0070, r25
    1440:	90 91 70 00 	lds	r25, 0x0070
    1444:	e9 e1       	ldi	r30, 0x19	; 25
    1446:	f3 e0       	ldi	r31, 0x03	; 3
    1448:	9f ef       	ldi	r25, 0xFF	; 255
    144a:	90 83       	st	Z, r25
    144c:	11 82       	std	Z+1, r1	; 0x01
    144e:	13 82       	std	Z+3, r1	; 0x03
    1450:	12 82       	std	Z+2, r1	; 0x02
    1452:	17 82       	std	Z+7, r1	; 0x07
    1454:	10 86       	std	Z+8, r1	; 0x08
    1456:	39 96       	adiw	r30, 0x09	; 9
    1458:	23 e0       	ldi	r18, 0x03	; 3
    145a:	ed 3c       	cpi	r30, 0xCD	; 205
    145c:	f2 07       	cpc	r31, r18
    145e:	a9 f7       	brne	.-22     	; 0x144a <_Z12SoftPWMBeginh+0x22>
    1460:	80 93 18 03 	sts	0x0318, r24
    1464:	08 95       	ret

00001466 <_Z18SoftPWMSetPolarityah>:
    1466:	91 e0       	ldi	r25, 0x01	; 1
    1468:	66 23       	and	r22, r22
    146a:	09 f4       	brne	.+2      	; 0x146e <_Z18SoftPWMSetPolarityah+0x8>
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	e9 e1       	ldi	r30, 0x19	; 25
    1470:	f3 e0       	ldi	r31, 0x03	; 3
    1472:	20 81       	ld	r18, Z
    1474:	87 ff       	sbrs	r24, 7
    1476:	03 c0       	rjmp	.+6      	; 0x147e <_Z18SoftPWMSetPolarityah+0x18>
    1478:	27 ff       	sbrs	r18, 7
    147a:	03 c0       	rjmp	.+6      	; 0x1482 <_Z18SoftPWMSetPolarityah+0x1c>
    147c:	03 c0       	rjmp	.+6      	; 0x1484 <_Z18SoftPWMSetPolarityah+0x1e>
    147e:	28 17       	cp	r18, r24
    1480:	09 f4       	brne	.+2      	; 0x1484 <_Z18SoftPWMSetPolarityah+0x1e>
    1482:	91 83       	std	Z+1, r25	; 0x01
    1484:	39 96       	adiw	r30, 0x09	; 9
    1486:	23 e0       	ldi	r18, 0x03	; 3
    1488:	ed 3c       	cpi	r30, 0xCD	; 205
    148a:	f2 07       	cpc	r31, r18
    148c:	91 f7       	brne	.-28     	; 0x1472 <_Z18SoftPWMSetPolarityah+0xc>
    148e:	08 95       	ret

00001490 <_Z10SoftPWMSetahh>:
    1490:	1f 93       	push	r17
    1492:	18 2f       	mov	r17, r24
    1494:	44 23       	and	r20, r20
    1496:	29 f0       	breq	.+10     	; 0x14a2 <_Z10SoftPWMSetahh+0x12>
    1498:	10 92 b2 00 	sts	0x00B2, r1
    149c:	8f ef       	ldi	r24, 0xFF	; 255
    149e:	80 93 35 01 	sts	0x0135, r24
    14a2:	e9 e1       	ldi	r30, 0x19	; 25
    14a4:	f3 e0       	ldi	r31, 0x03	; 3
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	20 81       	ld	r18, Z
    14ac:	17 ff       	sbrs	r17, 7
    14ae:	03 c0       	rjmp	.+6      	; 0x14b6 <_Z10SoftPWMSetahh+0x26>
    14b0:	27 ff       	sbrs	r18, 7
    14b2:	03 c0       	rjmp	.+6      	; 0x14ba <_Z10SoftPWMSetahh+0x2a>
    14b4:	05 c0       	rjmp	.+10     	; 0x14c0 <_Z10SoftPWMSetahh+0x30>
    14b6:	21 17       	cp	r18, r17
    14b8:	19 f4       	brne	.+6      	; 0x14c0 <_Z10SoftPWMSetahh+0x30>
    14ba:	65 83       	std	Z+5, r22	; 0x05
    14bc:	17 ff       	sbrs	r17, 7
    14be:	4d c0       	rjmp	.+154    	; 0x155a <_Z10SoftPWMSetahh+0xca>
    14c0:	8f 3f       	cpi	r24, 0xFF	; 255
    14c2:	19 f4       	brne	.+6      	; 0x14ca <_Z10SoftPWMSetahh+0x3a>
    14c4:	20 81       	ld	r18, Z
    14c6:	27 fd       	sbrc	r18, 7
    14c8:	89 2f       	mov	r24, r25
    14ca:	9f 5f       	subi	r25, 0xFF	; 255
    14cc:	39 96       	adiw	r30, 0x09	; 9
    14ce:	94 31       	cpi	r25, 0x14	; 20
    14d0:	61 f7       	brne	.-40     	; 0x14aa <_Z10SoftPWMSetahh+0x1a>
    14d2:	17 fd       	sbrc	r17, 7
    14d4:	42 c0       	rjmp	.+132    	; 0x155a <_Z10SoftPWMSetahh+0xca>
    14d6:	8f 3f       	cpi	r24, 0xFF	; 255
    14d8:	09 f4       	brne	.+2      	; 0x14dc <_Z10SoftPWMSetahh+0x4c>
    14da:	3f c0       	rjmp	.+126    	; 0x155a <_Z10SoftPWMSetahh+0xca>
    14dc:	99 27       	eor	r25, r25
    14de:	87 fd       	sbrc	r24, 7
    14e0:	90 95       	com	r25
    14e2:	dc 01       	movw	r26, r24
    14e4:	23 e0       	ldi	r18, 0x03	; 3
    14e6:	aa 0f       	add	r26, r26
    14e8:	bb 1f       	adc	r27, r27
    14ea:	2a 95       	dec	r18
    14ec:	e1 f7       	brne	.-8      	; 0x14e6 <_Z10SoftPWMSetahh+0x56>
    14ee:	a8 0f       	add	r26, r24
    14f0:	b9 1f       	adc	r27, r25
    14f2:	a7 5e       	subi	r26, 0xE7	; 231
    14f4:	bc 4f       	sbci	r27, 0xFC	; 252
    14f6:	1c 93       	st	X, r17
    14f8:	80 91 18 03 	lds	r24, 0x0318
    14fc:	11 96       	adiw	r26, 0x01	; 1
    14fe:	8c 93       	st	X, r24
    1500:	11 97       	sbiw	r26, 0x01	; 1
    1502:	21 2f       	mov	r18, r17
    1504:	33 27       	eor	r19, r19
    1506:	27 fd       	sbrc	r18, 7
    1508:	30 95       	com	r19
    150a:	f9 01       	movw	r30, r18
    150c:	ea 57       	subi	r30, 0x7A	; 122
    150e:	ff 4f       	sbci	r31, 0xFF	; 255
    1510:	e4 91       	lpm	r30, Z+
    1512:	f0 e0       	ldi	r31, 0x00	; 0
    1514:	ee 0f       	add	r30, r30
    1516:	ff 1f       	adc	r31, r31
    1518:	ee 58       	subi	r30, 0x8E	; 142
    151a:	ff 4f       	sbci	r31, 0xFF	; 255
    151c:	45 91       	lpm	r20, Z+
    151e:	54 91       	lpm	r21, Z+
    1520:	12 96       	adiw	r26, 0x02	; 2
    1522:	4c 93       	st	X, r20
    1524:	12 97       	sbiw	r26, 0x02	; 2
    1526:	13 96       	adiw	r26, 0x03	; 3
    1528:	5c 93       	st	X, r21
    152a:	13 97       	sbiw	r26, 0x03	; 3
    152c:	26 56       	subi	r18, 0x66	; 102
    152e:	3f 4f       	sbci	r19, 0xFF	; 255
    1530:	f9 01       	movw	r30, r18
    1532:	24 91       	lpm	r18, Z+
    1534:	14 96       	adiw	r26, 0x04	; 4
    1536:	2c 93       	st	X, r18
    1538:	14 97       	sbiw	r26, 0x04	; 4
    153a:	15 96       	adiw	r26, 0x05	; 5
    153c:	6c 93       	st	X, r22
    153e:	15 97       	sbiw	r26, 0x05	; 5
    1540:	88 23       	and	r24, r24
    1542:	19 f4       	brne	.+6      	; 0x154a <_Z10SoftPWMSetahh+0xba>
    1544:	81 2f       	mov	r24, r17
    1546:	60 e0       	ldi	r22, 0x00	; 0
    1548:	02 c0       	rjmp	.+4      	; 0x154e <_Z10SoftPWMSetahh+0xbe>
    154a:	81 2f       	mov	r24, r17
    154c:	61 e0       	ldi	r22, 0x01	; 1
    154e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
    1552:	81 2f       	mov	r24, r17
    1554:	61 e0       	ldi	r22, 0x01	; 1
    1556:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <pinMode>
    155a:	1f 91       	pop	r17
    155c:	08 95       	ret

0000155e <_Z17SoftPWMSetPercentahh>:
    155e:	e8 2f       	mov	r30, r24
    1560:	8f ef       	ldi	r24, 0xFF	; 255
    1562:	68 9f       	mul	r22, r24
    1564:	b0 01       	movw	r22, r0
    1566:	11 24       	eor	r1, r1
    1568:	cb 01       	movw	r24, r22
    156a:	64 e6       	ldi	r22, 0x64	; 100
    156c:	70 e0       	ldi	r23, 0x00	; 0
    156e:	0e 94 ef 24 	call	0x49de	; 0x49de <__udivmodhi4>
    1572:	8e 2f       	mov	r24, r30
    1574:	0e 94 48 0a 	call	0x1490	; 0x1490 <_Z10SoftPWMSetahh>
    1578:	08 95       	ret

0000157a <_Z10SoftPWMEnda>:
    157a:	0f 93       	push	r16
    157c:	1f 93       	push	r17
    157e:	cf 93       	push	r28
    1580:	df 93       	push	r29
    1582:	18 2f       	mov	r17, r24
    1584:	c9 e1       	ldi	r28, 0x19	; 25
    1586:	d3 e0       	ldi	r29, 0x03	; 3
    1588:	0f ef       	ldi	r16, 0xFF	; 255
    158a:	88 81       	ld	r24, Y
    158c:	17 ff       	sbrs	r17, 7
    158e:	03 c0       	rjmp	.+6      	; 0x1596 <_Z10SoftPWMEnda+0x1c>
    1590:	87 ff       	sbrs	r24, 7
    1592:	03 c0       	rjmp	.+6      	; 0x159a <_Z10SoftPWMEnda+0x20>
    1594:	0b c0       	rjmp	.+22     	; 0x15ac <_Z10SoftPWMEnda+0x32>
    1596:	81 17       	cp	r24, r17
    1598:	49 f4       	brne	.+18     	; 0x15ac <_Z10SoftPWMEnda+0x32>
    159a:	88 81       	ld	r24, Y
    159c:	61 e0       	ldi	r22, 0x01	; 1
    159e:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
    15a2:	88 81       	ld	r24, Y
    15a4:	60 e0       	ldi	r22, 0x00	; 0
    15a6:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <pinMode>
    15aa:	08 83       	st	Y, r16
    15ac:	29 96       	adiw	r28, 0x09	; 9
    15ae:	83 e0       	ldi	r24, 0x03	; 3
    15b0:	cd 3c       	cpi	r28, 0xCD	; 205
    15b2:	d8 07       	cpc	r29, r24
    15b4:	51 f7       	brne	.-44     	; 0x158a <_Z10SoftPWMEnda+0x10>
    15b6:	df 91       	pop	r29
    15b8:	cf 91       	pop	r28
    15ba:	1f 91       	pop	r17
    15bc:	0f 91       	pop	r16
    15be:	08 95       	ret

000015c0 <_Z18SoftPWMSetFadeTimeajj>:
    15c0:	2f 92       	push	r2
    15c2:	3f 92       	push	r3
    15c4:	4f 92       	push	r4
    15c6:	5f 92       	push	r5
    15c8:	6f 92       	push	r6
    15ca:	7f 92       	push	r7
    15cc:	8f 92       	push	r8
    15ce:	9f 92       	push	r9
    15d0:	af 92       	push	r10
    15d2:	bf 92       	push	r11
    15d4:	cf 92       	push	r12
    15d6:	df 92       	push	r13
    15d8:	ef 92       	push	r14
    15da:	ff 92       	push	r15
    15dc:	1f 93       	push	r17
    15de:	df 93       	push	r29
    15e0:	cf 93       	push	r28
    15e2:	00 d0       	rcall	.+0      	; 0x15e4 <_Z18SoftPWMSetFadeTimeajj+0x24>
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <_Z18SoftPWMSetFadeTimeajj+0x26>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	18 2f       	mov	r17, r24
    15ec:	4b 01       	movw	r8, r22
    15ee:	5a 01       	movw	r10, r20
    15f0:	29 e1       	ldi	r18, 0x19	; 25
    15f2:	33 e0       	ldi	r19, 0x03	; 3
    15f4:	2a 01       	movw	r4, r20
    15f6:	66 24       	eor	r6, r6
    15f8:	77 24       	eor	r7, r7
    15fa:	40 ef       	ldi	r20, 0xF0	; 240
    15fc:	c4 2e       	mov	r12, r20
    15fe:	4f e0       	ldi	r20, 0x0F	; 15
    1600:	d4 2e       	mov	r13, r20
    1602:	e1 2c       	mov	r14, r1
    1604:	f1 2c       	mov	r15, r1
    1606:	cb 01       	movw	r24, r22
    1608:	a0 e0       	ldi	r26, 0x00	; 0
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	ab 83       	std	Y+3, r26	; 0x03
    1612:	bc 83       	std	Y+4, r27	; 0x04
    1614:	19 01       	movw	r2, r18
    1616:	d1 01       	movw	r26, r2
    1618:	8c 91       	ld	r24, X
    161a:	17 ff       	sbrs	r17, 7
    161c:	03 c0       	rjmp	.+6      	; 0x1624 <_Z18SoftPWMSetFadeTimeajj+0x64>
    161e:	87 ff       	sbrs	r24, 7
    1620:	03 c0       	rjmp	.+6      	; 0x1628 <_Z18SoftPWMSetFadeTimeajj+0x68>
    1622:	26 c0       	rjmp	.+76     	; 0x1670 <_Z18SoftPWMSetFadeTimeajj+0xb0>
    1624:	81 17       	cp	r24, r17
    1626:	21 f5       	brne	.+72     	; 0x1670 <_Z18SoftPWMSetFadeTimeajj+0xb0>
    1628:	81 14       	cp	r8, r1
    162a:	91 04       	cpc	r9, r1
    162c:	51 f0       	breq	.+20     	; 0x1642 <_Z18SoftPWMSetFadeTimeajj+0x82>
    162e:	c7 01       	movw	r24, r14
    1630:	b6 01       	movw	r22, r12
    1632:	29 81       	ldd	r18, Y+1	; 0x01
    1634:	3a 81       	ldd	r19, Y+2	; 0x02
    1636:	4b 81       	ldd	r20, Y+3	; 0x03
    1638:	5c 81       	ldd	r21, Y+4	; 0x04
    163a:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__udivmodsi4>
    163e:	c9 01       	movw	r24, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <_Z18SoftPWMSetFadeTimeajj+0x86>
    1642:	80 e0       	ldi	r24, 0x00	; 0
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	f1 01       	movw	r30, r2
    1648:	87 83       	std	Z+7, r24	; 0x07
    164a:	a1 14       	cp	r10, r1
    164c:	b1 04       	cpc	r11, r1
    164e:	41 f0       	breq	.+16     	; 0x1660 <_Z18SoftPWMSetFadeTimeajj+0xa0>
    1650:	c7 01       	movw	r24, r14
    1652:	b6 01       	movw	r22, r12
    1654:	a3 01       	movw	r20, r6
    1656:	92 01       	movw	r18, r4
    1658:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__udivmodsi4>
    165c:	c9 01       	movw	r24, r18
    165e:	02 c0       	rjmp	.+4      	; 0x1664 <_Z18SoftPWMSetFadeTimeajj+0xa4>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	d1 01       	movw	r26, r2
    1666:	18 96       	adiw	r26, 0x08	; 8
    1668:	8c 93       	st	X, r24
    166a:	18 97       	sbiw	r26, 0x08	; 8
    166c:	17 ff       	sbrs	r17, 7
    166e:	09 c0       	rjmp	.+18     	; 0x1682 <_Z18SoftPWMSetFadeTimeajj+0xc2>
    1670:	e9 e0       	ldi	r30, 0x09	; 9
    1672:	f0 e0       	ldi	r31, 0x00	; 0
    1674:	2e 0e       	add	r2, r30
    1676:	3f 1e       	adc	r3, r31
    1678:	fd ec       	ldi	r31, 0xCD	; 205
    167a:	2f 16       	cp	r2, r31
    167c:	f3 e0       	ldi	r31, 0x03	; 3
    167e:	3f 06       	cpc	r3, r31
    1680:	51 f6       	brne	.-108    	; 0x1616 <_Z18SoftPWMSetFadeTimeajj+0x56>
    1682:	0f 90       	pop	r0
    1684:	0f 90       	pop	r0
    1686:	0f 90       	pop	r0
    1688:	0f 90       	pop	r0
    168a:	cf 91       	pop	r28
    168c:	df 91       	pop	r29
    168e:	1f 91       	pop	r17
    1690:	ff 90       	pop	r15
    1692:	ef 90       	pop	r14
    1694:	df 90       	pop	r13
    1696:	cf 90       	pop	r12
    1698:	bf 90       	pop	r11
    169a:	af 90       	pop	r10
    169c:	9f 90       	pop	r9
    169e:	8f 90       	pop	r8
    16a0:	7f 90       	pop	r7
    16a2:	6f 90       	pop	r6
    16a4:	5f 90       	pop	r5
    16a6:	4f 90       	pop	r4
    16a8:	3f 90       	pop	r3
    16aa:	2f 90       	pop	r2
    16ac:	08 95       	ret

000016ae <_ZN12StepperMotorC1Ehhhhh>:
    16ae:	ef 92       	push	r14
    16b0:	0f 93       	push	r16
    16b2:	cf 93       	push	r28
    16b4:	df 93       	push	r29
    16b6:	ec 01       	movw	r28, r24
    16b8:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN12AccelStepperC1Ehhhhh>
    16bc:	8a e3       	ldi	r24, 0x3A	; 58
    16be:	91 e0       	ldi	r25, 0x01	; 1
    16c0:	99 83       	std	Y+1, r25	; 0x01
    16c2:	88 83       	st	Y, r24
    16c4:	df 91       	pop	r29
    16c6:	cf 91       	pop	r28
    16c8:	0f 91       	pop	r16
    16ca:	ef 90       	pop	r14
    16cc:	08 95       	ret

000016ce <_ZN12StepperMotor12advanceFrameEi>:
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	cf 93       	push	r28
    16d8:	df 93       	push	r29
    16da:	7c 01       	movw	r14, r24
    16dc:	eb 01       	movw	r28, r22
    16de:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN12AccelStepper15currentPositionEv>
    16e2:	ab 01       	movw	r20, r22
    16e4:	bc 01       	movw	r22, r24
    16e6:	8e 01       	movw	r16, r28
    16e8:	22 27       	eor	r18, r18
    16ea:	17 fd       	sbrc	r17, 7
    16ec:	20 95       	com	r18
    16ee:	32 2f       	mov	r19, r18
    16f0:	40 0f       	add	r20, r16
    16f2:	51 1f       	adc	r21, r17
    16f4:	62 1f       	adc	r22, r18
    16f6:	73 1f       	adc	r23, r19
    16f8:	c7 01       	movw	r24, r14
    16fa:	0e 94 91 03 	call	0x722	; 0x722 <_ZN12AccelStepper6moveToEl>
    16fe:	df 91       	pop	r29
    1700:	cf 91       	pop	r28
    1702:	1f 91       	pop	r17
    1704:	0f 91       	pop	r16
    1706:	ff 90       	pop	r15
    1708:	ef 90       	pop	r14
    170a:	08 95       	ret

0000170c <_ZN12StepperMotor12reverseFrameEi>:
    170c:	cf 93       	push	r28
    170e:	df 93       	push	r29
    1710:	ec 01       	movw	r28, r24
    1712:	88 27       	eor	r24, r24
    1714:	77 fd       	sbrc	r23, 7
    1716:	80 95       	com	r24
    1718:	98 2f       	mov	r25, r24
    171a:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__floatsisf>
    171e:	ab 01       	movw	r20, r22
    1720:	bc 01       	movw	r22, r24
    1722:	ce 01       	movw	r24, r28
    1724:	0e 94 18 03 	call	0x630	; 0x630 <_ZN12AccelStepper8setSpeedEf>
    1728:	df 91       	pop	r29
    172a:	cf 91       	pop	r28
    172c:	08 95       	ret

0000172e <setup>:
    172e:	8f 92       	push	r8
    1730:	af 92       	push	r10
    1732:	cf 92       	push	r12
    1734:	df 92       	push	r13
    1736:	ef 92       	push	r14
    1738:	ff 92       	push	r15
    173a:	0f 93       	push	r16
    173c:	1f 93       	push	r17
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	cd e6       	ldi	r28, 0x6D	; 109
    1744:	d4 e0       	ldi	r29, 0x04	; 4
    1746:	ce 01       	movw	r24, r28
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	55 e2       	ldi	r21, 0x25	; 37
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	70 e0       	ldi	r23, 0x00	; 0
    1750:	0e 94 dd 23 	call	0x47ba	; 0x47ba <_ZN14HardwareSerial5beginEm>
    1754:	64 e6       	ldi	r22, 0x64	; 100
    1756:	70 e0       	ldi	r23, 0x00	; 0
    1758:	80 e0       	ldi	r24, 0x00	; 0
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	0e 94 12 16 	call	0x2c24	; 0x2c24 <delay>
    1760:	ce 01       	movw	r24, r28
    1762:	66 e4       	ldi	r22, 0x46	; 70
    1764:	71 e0       	ldi	r23, 0x01	; 1
    1766:	0e 94 3b 20 	call	0x4076	; 0x4076 <_ZN5Print7printlnEPKc>
    176a:	82 e0       	ldi	r24, 0x02	; 2
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <_Znwj>
    1772:	18 2f       	mov	r17, r24
    1774:	f9 2e       	mov	r15, r25
    1776:	6c e0       	ldi	r22, 0x0C	; 12
    1778:	4b e0       	ldi	r20, 0x0B	; 11
    177a:	25 e0       	ldi	r18, 0x05	; 5
    177c:	04 e0       	ldi	r16, 0x04	; 4
    177e:	f3 e0       	ldi	r31, 0x03	; 3
    1780:	ef 2e       	mov	r14, r31
    1782:	e2 e0       	ldi	r30, 0x02	; 2
    1784:	ce 2e       	mov	r12, r30
    1786:	70 e1       	ldi	r23, 0x10	; 16
    1788:	a7 2e       	mov	r10, r23
    178a:	52 e0       	ldi	r21, 0x02	; 2
    178c:	85 2e       	mov	r8, r21
    178e:	0e 94 64 04 	call	0x8c8	; 0x8c8 <_ZN3LCDC1Ehhhhhhhh>
    1792:	10 93 d1 03 	sts	0x03D1, r17
    1796:	f0 92 d2 03 	sts	0x03D2, r15
    179a:	64 e6       	ldi	r22, 0x64	; 100
    179c:	70 e0       	ldi	r23, 0x00	; 0
    179e:	80 e0       	ldi	r24, 0x00	; 0
    17a0:	90 e0       	ldi	r25, 0x00	; 0
    17a2:	0e 94 12 16 	call	0x2c24	; 0x2c24 <delay>
    17a6:	ce 01       	movw	r24, r28
    17a8:	65 e5       	ldi	r22, 0x55	; 85
    17aa:	71 e0       	ldi	r23, 0x01	; 1
    17ac:	0e 94 3b 20 	call	0x4076	; 0x4076 <_ZN5Print7printlnEPKc>
    17b0:	0e 94 60 04 	call	0x8c0	; 0x8c0 <_Z12DCMotor_intiv>
    17b4:	64 e6       	ldi	r22, 0x64	; 100
    17b6:	70 e0       	ldi	r23, 0x00	; 0
    17b8:	80 e0       	ldi	r24, 0x00	; 0
    17ba:	90 e0       	ldi	r25, 0x00	; 0
    17bc:	0e 94 12 16 	call	0x2c24	; 0x2c24 <delay>
    17c0:	ce 01       	movw	r24, r28
    17c2:	64 e6       	ldi	r22, 0x64	; 100
    17c4:	71 e0       	ldi	r23, 0x01	; 1
    17c6:	0e 94 3b 20 	call	0x4076	; 0x4076 <_ZN5Print7printlnEPKc>
    17ca:	82 e0       	ldi	r24, 0x02	; 2
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <_Znwj>
    17d2:	8c 01       	movw	r16, r24
    17d4:	61 e1       	ldi	r22, 0x11	; 17
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN7DCMotorC1Ei>
    17dc:	00 93 d3 03 	sts	0x03D3, r16
    17e0:	10 93 d4 03 	sts	0x03D4, r17
    17e4:	82 e0       	ldi	r24, 0x02	; 2
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <_Znwj>
    17ec:	8c 01       	movw	r16, r24
    17ee:	62 e1       	ldi	r22, 0x12	; 18
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN7DCMotorC1Ei>
    17f6:	00 93 d5 03 	sts	0x03D5, r16
    17fa:	10 93 d6 03 	sts	0x03D6, r17
    17fe:	64 e6       	ldi	r22, 0x64	; 100
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	80 e0       	ldi	r24, 0x00	; 0
    1804:	90 e0       	ldi	r25, 0x00	; 0
    1806:	0e 94 12 16 	call	0x2c24	; 0x2c24 <delay>
    180a:	ce 01       	movw	r24, r28
    180c:	68 e7       	ldi	r22, 0x78	; 120
    180e:	71 e0       	ldi	r23, 0x01	; 1
    1810:	0e 94 3b 20 	call	0x4076	; 0x4076 <_ZN5Print7printlnEPKc>
    1814:	87 e2       	ldi	r24, 0x27	; 39
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <_Znwj>
    181c:	f8 2e       	mov	r15, r24
    181e:	19 2f       	mov	r17, r25
    1820:	64 e0       	ldi	r22, 0x04	; 4
    1822:	48 e0       	ldi	r20, 0x08	; 8
    1824:	29 e0       	ldi	r18, 0x09	; 9
    1826:	06 e0       	ldi	r16, 0x06	; 6
    1828:	37 e0       	ldi	r19, 0x07	; 7
    182a:	e3 2e       	mov	r14, r19
    182c:	0e 94 57 0b 	call	0x16ae	; 0x16ae <_ZN12StepperMotorC1Ehhhhh>
    1830:	f0 92 d7 03 	sts	0x03D7, r15
    1834:	10 93 d8 03 	sts	0x03D8, r17
    1838:	8f 2d       	mov	r24, r15
    183a:	91 2f       	mov	r25, r17
    183c:	40 e0       	ldi	r20, 0x00	; 0
    183e:	50 e0       	ldi	r21, 0x00	; 0
    1840:	6a ef       	ldi	r22, 0xFA	; 250
    1842:	73 e4       	ldi	r23, 0x43	; 67
    1844:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN12AccelStepper11setMaxSpeedEf>
    1848:	80 91 d7 03 	lds	r24, 0x03D7
    184c:	90 91 d8 03 	lds	r25, 0x03D8
    1850:	40 e0       	ldi	r20, 0x00	; 0
    1852:	50 e0       	ldi	r21, 0x00	; 0
    1854:	68 e4       	ldi	r22, 0x48	; 72
    1856:	73 e4       	ldi	r23, 0x43	; 67
    1858:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN12AccelStepper15setAccelerationEf>
    185c:	64 e6       	ldi	r22, 0x64	; 100
    185e:	70 e0       	ldi	r23, 0x00	; 0
    1860:	80 e0       	ldi	r24, 0x00	; 0
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	0e 94 12 16 	call	0x2c24	; 0x2c24 <delay>
    1868:	ce 01       	movw	r24, r28
    186a:	61 e9       	ldi	r22, 0x91	; 145
    186c:	71 e0       	ldi	r23, 0x01	; 1
    186e:	0e 94 3b 20 	call	0x4076	; 0x4076 <_ZN5Print7printlnEPKc>
    1872:	82 e2       	ldi	r24, 0x22	; 34
    1874:	90 e0       	ldi	r25, 0x00	; 0
    1876:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <_Znwj>
    187a:	8c 01       	movw	r16, r24
    187c:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN12PDControllerC1Ev>
    1880:	10 93 ce 03 	sts	0x03CE, r17
    1884:	00 93 cd 03 	sts	0x03CD, r16
    1888:	0f 2e       	mov	r0, r31
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	cf 2e       	mov	r12, r31
    188e:	f0 e0       	ldi	r31, 0x00	; 0
    1890:	df 2e       	mov	r13, r31
    1892:	f8 e4       	ldi	r31, 0x48	; 72
    1894:	ef 2e       	mov	r14, r31
    1896:	f3 e4       	ldi	r31, 0x43	; 67
    1898:	ff 2e       	mov	r15, r31
    189a:	f0 2d       	mov	r31, r0
    189c:	f8 01       	movw	r30, r16
    189e:	c0 86       	std	Z+8, r12	; 0x08
    18a0:	d1 86       	std	Z+9, r13	; 0x09
    18a2:	e2 86       	std	Z+10, r14	; 0x0a
    18a4:	f3 86       	std	Z+11, r15	; 0x0b
    18a6:	c8 01       	movw	r24, r16
    18a8:	4d ec       	ldi	r20, 0xCD	; 205
    18aa:	5c ec       	ldi	r21, 0xCC	; 204
    18ac:	6c ec       	ldi	r22, 0xCC	; 204
    18ae:	7e e3       	ldi	r23, 0x3E	; 62
    18b0:	0d ec       	ldi	r16, 0xCD	; 205
    18b2:	1c ec       	ldi	r17, 0xCC	; 204
    18b4:	2c e4       	ldi	r18, 0x4C	; 76
    18b6:	3d e3       	ldi	r19, 0x3D	; 61
    18b8:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN12PDController10setTuningsEdd>
    18bc:	80 91 cd 03 	lds	r24, 0x03CD
    18c0:	90 91 ce 03 	lds	r25, 0x03CE
    18c4:	40 e0       	ldi	r20, 0x00	; 0
    18c6:	50 e0       	ldi	r21, 0x00	; 0
    18c8:	6f e7       	ldi	r22, 0x7F	; 127
    18ca:	73 ec       	ldi	r23, 0xC3	; 195
    18cc:	00 e0       	ldi	r16, 0x00	; 0
    18ce:	10 e0       	ldi	r17, 0x00	; 0
    18d0:	98 01       	movw	r18, r16
    18d2:	0e 94 21 09 	call	0x1242	; 0x1242 <_ZN12PDController15setOutputLimitsEdd>
    18d6:	64 e6       	ldi	r22, 0x64	; 100
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	80 e0       	ldi	r24, 0x00	; 0
    18dc:	90 e0       	ldi	r25, 0x00	; 0
    18de:	0e 94 12 16 	call	0x2c24	; 0x2c24 <delay>
    18e2:	ce 01       	movw	r24, r28
    18e4:	65 ea       	ldi	r22, 0xA5	; 165
    18e6:	71 e0       	ldi	r23, 0x01	; 1
    18e8:	0e 94 3b 20 	call	0x4076	; 0x4076 <_ZN5Print7printlnEPKc>
    18ec:	82 e2       	ldi	r24, 0x22	; 34
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	0e 94 43 1f 	call	0x3e86	; 0x3e86 <_Znwj>
    18f4:	8c 01       	movw	r16, r24
    18f6:	0e 94 61 08 	call	0x10c2	; 0x10c2 <_ZN12PDControllerC1Ev>
    18fa:	10 93 d0 03 	sts	0x03D0, r17
    18fe:	00 93 cf 03 	sts	0x03CF, r16
    1902:	f8 01       	movw	r30, r16
    1904:	c0 86       	std	Z+8, r12	; 0x08
    1906:	d1 86       	std	Z+9, r13	; 0x09
    1908:	e2 86       	std	Z+10, r14	; 0x0a
    190a:	f3 86       	std	Z+11, r15	; 0x0b
    190c:	c8 01       	movw	r24, r16
    190e:	4d ec       	ldi	r20, 0xCD	; 205
    1910:	5c ec       	ldi	r21, 0xCC	; 204
    1912:	6c ec       	ldi	r22, 0xCC	; 204
    1914:	7e e3       	ldi	r23, 0x3E	; 62
    1916:	0d ec       	ldi	r16, 0xCD	; 205
    1918:	1c ec       	ldi	r17, 0xCC	; 204
    191a:	2c e4       	ldi	r18, 0x4C	; 76
    191c:	3d e3       	ldi	r19, 0x3D	; 61
    191e:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <_ZN12PDController10setTuningsEdd>
    1922:	80 91 cf 03 	lds	r24, 0x03CF
    1926:	90 91 d0 03 	lds	r25, 0x03D0
    192a:	40 e0       	ldi	r20, 0x00	; 0
    192c:	50 e0       	ldi	r21, 0x00	; 0
    192e:	6f e7       	ldi	r22, 0x7F	; 127
    1930:	73 ec       	ldi	r23, 0xC3	; 195
    1932:	00 e0       	ldi	r16, 0x00	; 0
    1934:	10 e0       	ldi	r17, 0x00	; 0
    1936:	98 01       	movw	r18, r16
    1938:	0e 94 21 09 	call	0x1242	; 0x1242 <_ZN12PDController15setOutputLimitsEdd>
    193c:	64 e6       	ldi	r22, 0x64	; 100
    193e:	70 e0       	ldi	r23, 0x00	; 0
    1940:	80 e0       	ldi	r24, 0x00	; 0
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	0e 94 12 16 	call	0x2c24	; 0x2c24 <delay>
    1948:	ce 01       	movw	r24, r28
    194a:	6a eb       	ldi	r22, 0xBA	; 186
    194c:	71 e0       	ldi	r23, 0x01	; 1
    194e:	0e 94 3b 20 	call	0x4076	; 0x4076 <_ZN5Print7printlnEPKc>
    1952:	0e 94 70 09 	call	0x12e0	; 0x12e0 <_Z17PDController_initv>
    1956:	64 e6       	ldi	r22, 0x64	; 100
    1958:	70 e0       	ldi	r23, 0x00	; 0
    195a:	80 e0       	ldi	r24, 0x00	; 0
    195c:	90 e0       	ldi	r25, 0x00	; 0
    195e:	0e 94 12 16 	call	0x2c24	; 0x2c24 <delay>
    1962:	df 91       	pop	r29
    1964:	cf 91       	pop	r28
    1966:	1f 91       	pop	r17
    1968:	0f 91       	pop	r16
    196a:	ff 90       	pop	r15
    196c:	ef 90       	pop	r14
    196e:	df 90       	pop	r13
    1970:	cf 90       	pop	r12
    1972:	af 90       	pop	r10
    1974:	8f 90       	pop	r8
    1976:	08 95       	ret

00001978 <__vector_11>:
    1978:	1f 92       	push	r1
    197a:	0f 92       	push	r0
    197c:	0f b6       	in	r0, 0x3f	; 63
    197e:	0f 92       	push	r0
    1980:	11 24       	eor	r1, r1
    1982:	2f 93       	push	r18
    1984:	3f 93       	push	r19
    1986:	4f 93       	push	r20
    1988:	5f 93       	push	r21
    198a:	6f 93       	push	r22
    198c:	7f 93       	push	r23
    198e:	8f 93       	push	r24
    1990:	9f 93       	push	r25
    1992:	af 93       	push	r26
    1994:	bf 93       	push	r27
    1996:	cf 93       	push	r28
    1998:	df 93       	push	r29
    199a:	ef 93       	push	r30
    199c:	ff 93       	push	r31
    199e:	c0 91 cd 03 	lds	r28, 0x03CD
    19a2:	d0 91 ce 03 	lds	r29, 0x03CE
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <analogRead>
    19ac:	9c 01       	movw	r18, r24
    19ae:	b9 01       	movw	r22, r18
    19b0:	88 27       	eor	r24, r24
    19b2:	77 fd       	sbrc	r23, 7
    19b4:	80 95       	com	r24
    19b6:	98 2f       	mov	r25, r24
    19b8:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__floatsisf>
    19bc:	ab 01       	movw	r20, r22
    19be:	bc 01       	movw	r22, r24
    19c0:	ce 01       	movw	r24, r28
    19c2:	0e 94 67 08 	call	0x10ce	; 0x10ce <_ZN12PDController7computeEd>
    19c6:	c0 91 cf 03 	lds	r28, 0x03CF
    19ca:	d0 91 d0 03 	lds	r29, 0x03D0
    19ce:	82 e0       	ldi	r24, 0x02	; 2
    19d0:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <analogRead>
    19d4:	9c 01       	movw	r18, r24
    19d6:	b9 01       	movw	r22, r18
    19d8:	88 27       	eor	r24, r24
    19da:	77 fd       	sbrc	r23, 7
    19dc:	80 95       	com	r24
    19de:	98 2f       	mov	r25, r24
    19e0:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__floatsisf>
    19e4:	ab 01       	movw	r20, r22
    19e6:	bc 01       	movw	r22, r24
    19e8:	ce 01       	movw	r24, r28
    19ea:	0e 94 67 08 	call	0x10ce	; 0x10ce <_ZN12PDController7computeEd>
    19ee:	c0 91 d3 03 	lds	r28, 0x03D3
    19f2:	d0 91 d4 03 	lds	r29, 0x03D4
    19f6:	e0 91 cd 03 	lds	r30, 0x03CD
    19fa:	f0 91 ce 03 	lds	r31, 0x03CE
    19fe:	64 81       	ldd	r22, Z+4	; 0x04
    1a00:	75 81       	ldd	r23, Z+5	; 0x05
    1a02:	86 81       	ldd	r24, Z+6	; 0x06
    1a04:	97 81       	ldd	r25, Z+7	; 0x07
    1a06:	9f 77       	andi	r25, 0x7F	; 127
    1a08:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__fixsfsi>
    1a0c:	9b 01       	movw	r18, r22
    1a0e:	ac 01       	movw	r20, r24
    1a10:	ce 01       	movw	r24, r28
    1a12:	b9 01       	movw	r22, r18
    1a14:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN7DCMotor13setMotorspeedEi>
    1a18:	c0 91 d5 03 	lds	r28, 0x03D5
    1a1c:	d0 91 d6 03 	lds	r29, 0x03D6
    1a20:	e0 91 cf 03 	lds	r30, 0x03CF
    1a24:	f0 91 d0 03 	lds	r31, 0x03D0
    1a28:	64 81       	ldd	r22, Z+4	; 0x04
    1a2a:	75 81       	ldd	r23, Z+5	; 0x05
    1a2c:	86 81       	ldd	r24, Z+6	; 0x06
    1a2e:	97 81       	ldd	r25, Z+7	; 0x07
    1a30:	9f 77       	andi	r25, 0x7F	; 127
    1a32:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__fixsfsi>
    1a36:	9b 01       	movw	r18, r22
    1a38:	ac 01       	movw	r20, r24
    1a3a:	ce 01       	movw	r24, r28
    1a3c:	b9 01       	movw	r22, r18
    1a3e:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <_ZN7DCMotor13setMotorspeedEi>
    1a42:	cd e6       	ldi	r28, 0x6D	; 109
    1a44:	d4 e0       	ldi	r29, 0x04	; 4
    1a46:	e0 91 cd 03 	lds	r30, 0x03CD
    1a4a:	f0 91 ce 03 	lds	r31, 0x03CE
    1a4e:	40 81       	ld	r20, Z
    1a50:	51 81       	ldd	r21, Z+1	; 0x01
    1a52:	62 81       	ldd	r22, Z+2	; 0x02
    1a54:	73 81       	ldd	r23, Z+3	; 0x03
    1a56:	ce 01       	movw	r24, r28
    1a58:	22 e0       	ldi	r18, 0x02	; 2
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	0e 94 57 22 	call	0x44ae	; 0x44ae <_ZN5Print5printEdi>
    1a60:	ce 01       	movw	r24, r28
    1a62:	6e ec       	ldi	r22, 0xCE	; 206
    1a64:	71 e0       	ldi	r23, 0x01	; 1
    1a66:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <_ZN5Print5printEPKc>
    1a6a:	e0 91 cf 03 	lds	r30, 0x03CF
    1a6e:	f0 91 d0 03 	lds	r31, 0x03D0
    1a72:	40 81       	ld	r20, Z
    1a74:	51 81       	ldd	r21, Z+1	; 0x01
    1a76:	62 81       	ldd	r22, Z+2	; 0x02
    1a78:	73 81       	ldd	r23, Z+3	; 0x03
    1a7a:	ce 01       	movw	r24, r28
    1a7c:	22 e0       	ldi	r18, 0x02	; 2
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	0e 94 5a 22 	call	0x44b4	; 0x44b4 <_ZN5Print7printlnEdi>
    1a84:	ff 91       	pop	r31
    1a86:	ef 91       	pop	r30
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	bf 91       	pop	r27
    1a8e:	af 91       	pop	r26
    1a90:	9f 91       	pop	r25
    1a92:	8f 91       	pop	r24
    1a94:	7f 91       	pop	r23
    1a96:	6f 91       	pop	r22
    1a98:	5f 91       	pop	r21
    1a9a:	4f 91       	pop	r20
    1a9c:	3f 91       	pop	r19
    1a9e:	2f 91       	pop	r18
    1aa0:	0f 90       	pop	r0
    1aa2:	0f be       	out	0x3f, r0	; 63
    1aa4:	0f 90       	pop	r0
    1aa6:	1f 90       	pop	r1
    1aa8:	18 95       	reti

00001aaa <_Z10setFilmPosv>:
    1aaa:	ef 92       	push	r14
    1aac:	ff 92       	push	r15
    1aae:	0f 93       	push	r16
    1ab0:	1f 93       	push	r17
    1ab2:	df 93       	push	r29
    1ab4:	cf 93       	push	r28
    1ab6:	cd b7       	in	r28, 0x3d	; 61
    1ab8:	de b7       	in	r29, 0x3e	; 62
    1aba:	27 97       	sbiw	r28, 0x07	; 7
    1abc:	0f b6       	in	r0, 0x3f	; 63
    1abe:	f8 94       	cli
    1ac0:	de bf       	out	0x3e, r29	; 62
    1ac2:	0f be       	out	0x3f, r0	; 63
    1ac4:	cd bf       	out	0x3d, r28	; 61
    1ac6:	e0 90 d1 03 	lds	r14, 0x03D1
    1aca:	f0 90 d2 03 	lds	r15, 0x03D2
    1ace:	8e 01       	movw	r16, r28
    1ad0:	0f 5f       	subi	r16, 0xFF	; 255
    1ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    1ad4:	c8 01       	movw	r24, r16
    1ad6:	60 ed       	ldi	r22, 0xD0	; 208
    1ad8:	71 e0       	ldi	r23, 0x01	; 1
    1ada:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN6StringC1EPKc>
    1ade:	c7 01       	movw	r24, r14
    1ae0:	b8 01       	movw	r22, r16
    1ae2:	0e 94 a0 04 	call	0x940	; 0x940 <_ZN3LCD5traceE6String>
    1ae6:	c8 01       	movw	r24, r16
    1ae8:	0e 94 31 17 	call	0x2e62	; 0x2e62 <_ZN6StringD1Ev>
    1aec:	80 91 d7 03 	lds	r24, 0x03D7
    1af0:	90 91 d8 03 	lds	r25, 0x03D8
    1af4:	6c e0       	ldi	r22, 0x0C	; 12
    1af6:	7e ef       	ldi	r23, 0xFE	; 254
    1af8:	0e 94 86 0b 	call	0x170c	; 0x170c <_ZN12StepperMotor12reverseFrameEi>
    1afc:	80 91 d7 03 	lds	r24, 0x03D7
    1b00:	90 91 d8 03 	lds	r25, 0x03D8
    1b04:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN12AccelStepper8runSpeedEv>
    1b08:	f9 cf       	rjmp	.-14     	; 0x1afc <_Z10setFilmPosv+0x52>

00001b0a <_Z13emergencyStopv>:
    1b0a:	08 95       	ret

00001b0c <main>:
    1b0c:	0f 93       	push	r16
    1b0e:	1f 93       	push	r17
    1b10:	0e 94 43 16 	call	0x2c86	; 0x2c86 <init>
    1b14:	0e 94 97 0b 	call	0x172e	; 0x172e <setup>
    1b18:	80 91 d1 03 	lds	r24, 0x03D1
    1b1c:	90 91 d2 03 	lds	r25, 0x03D2
    1b20:	60 e0       	ldi	r22, 0x00	; 0
    1b22:	70 e0       	ldi	r23, 0x00	; 0
    1b24:	40 e0       	ldi	r20, 0x00	; 0
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	00 e0       	ldi	r16, 0x00	; 0
    1b2e:	10 e0       	ldi	r17, 0x00	; 0
    1b30:	0e 94 ba 04 	call	0x974	; 0x974 <_ZN3LCD9updateLCDEiiii>
    1b34:	80 91 d7 03 	lds	r24, 0x03D7
    1b38:	90 91 d8 03 	lds	r25, 0x03D8
    1b3c:	60 e9       	ldi	r22, 0x90	; 144
    1b3e:	71 e0       	ldi	r23, 0x01	; 1
    1b40:	0e 94 67 0b 	call	0x16ce	; 0x16ce <_ZN12StepperMotor12advanceFrameEi>
    1b44:	80 91 d7 03 	lds	r24, 0x03D7
    1b48:	90 91 d8 03 	lds	r25, 0x03D8
    1b4c:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN12AccelStepper3runEv>
    1b50:	88 23       	and	r24, r24
    1b52:	c1 f7       	brne	.-16     	; 0x1b44 <main+0x38>
    1b54:	80 91 d9 03 	lds	r24, 0x03D9
    1b58:	90 91 da 03 	lds	r25, 0x03DA
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	90 93 da 03 	sts	0x03DA, r25
    1b62:	80 93 d9 03 	sts	0x03D9, r24
    1b66:	68 ee       	ldi	r22, 0xE8	; 232
    1b68:	73 e0       	ldi	r23, 0x03	; 3
    1b6a:	80 e0       	ldi	r24, 0x00	; 0
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	0e 94 12 16 	call	0x2c24	; 0x2c24 <delay>
    1b72:	60 91 d9 03 	lds	r22, 0x03D9
    1b76:	70 91 da 03 	lds	r23, 0x03DA
    1b7a:	80 91 d1 03 	lds	r24, 0x03D1
    1b7e:	90 91 d2 03 	lds	r25, 0x03D2
    1b82:	d0 cf       	rjmp	.-96     	; 0x1b24 <main+0x18>

00001b84 <__fixunssfsi>:
    1b84:	ef 92       	push	r14
    1b86:	ff 92       	push	r15
    1b88:	0f 93       	push	r16
    1b8a:	1f 93       	push	r17
    1b8c:	7b 01       	movw	r14, r22
    1b8e:	8c 01       	movw	r16, r24
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e0       	ldi	r20, 0x00	; 0
    1b96:	5f e4       	ldi	r21, 0x4F	; 79
    1b98:	0e 94 9e 11 	call	0x233c	; 0x233c <__gesf2>
    1b9c:	87 fd       	sbrc	r24, 7
    1b9e:	11 c0       	rjmp	.+34     	; 0x1bc2 <__fixunssfsi+0x3e>
    1ba0:	c8 01       	movw	r24, r16
    1ba2:	b7 01       	movw	r22, r14
    1ba4:	20 e0       	ldi	r18, 0x00	; 0
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	5f e4       	ldi	r21, 0x4F	; 79
    1bac:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__subsf3>
    1bb0:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__fixsfsi>
    1bb4:	9b 01       	movw	r18, r22
    1bb6:	ac 01       	movw	r20, r24
    1bb8:	20 50       	subi	r18, 0x00	; 0
    1bba:	30 40       	sbci	r19, 0x00	; 0
    1bbc:	40 40       	sbci	r20, 0x00	; 0
    1bbe:	50 48       	sbci	r21, 0x80	; 128
    1bc0:	06 c0       	rjmp	.+12     	; 0x1bce <__fixunssfsi+0x4a>
    1bc2:	c8 01       	movw	r24, r16
    1bc4:	b7 01       	movw	r22, r14
    1bc6:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__fixsfsi>
    1bca:	9b 01       	movw	r18, r22
    1bcc:	ac 01       	movw	r20, r24
    1bce:	b9 01       	movw	r22, r18
    1bd0:	ca 01       	movw	r24, r20
    1bd2:	1f 91       	pop	r17
    1bd4:	0f 91       	pop	r16
    1bd6:	ff 90       	pop	r15
    1bd8:	ef 90       	pop	r14
    1bda:	08 95       	ret

00001bdc <_fpadd_parts>:
    1bdc:	a0 e0       	ldi	r26, 0x00	; 0
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e4 ef       	ldi	r30, 0xF4	; 244
    1be2:	fd e0       	ldi	r31, 0x0D	; 13
    1be4:	0c 94 3c 25 	jmp	0x4a78	; 0x4a78 <__prologue_saves__+0x8>
    1be8:	fc 01       	movw	r30, r24
    1bea:	ea 01       	movw	r28, r20
    1bec:	80 81       	ld	r24, Z
    1bee:	82 30       	cpi	r24, 0x02	; 2
    1bf0:	08 f4       	brcc	.+2      	; 0x1bf4 <_fpadd_parts+0x18>
    1bf2:	38 c1       	rjmp	.+624    	; 0x1e64 <_fpadd_parts+0x288>
    1bf4:	db 01       	movw	r26, r22
    1bf6:	9c 91       	ld	r25, X
    1bf8:	92 30       	cpi	r25, 0x02	; 2
    1bfa:	08 f4       	brcc	.+2      	; 0x1bfe <_fpadd_parts+0x22>
    1bfc:	30 c1       	rjmp	.+608    	; 0x1e5e <_fpadd_parts+0x282>
    1bfe:	84 30       	cpi	r24, 0x04	; 4
    1c00:	59 f4       	brne	.+22     	; 0x1c18 <_fpadd_parts+0x3c>
    1c02:	94 30       	cpi	r25, 0x04	; 4
    1c04:	09 f0       	breq	.+2      	; 0x1c08 <_fpadd_parts+0x2c>
    1c06:	2e c1       	rjmp	.+604    	; 0x1e64 <_fpadd_parts+0x288>
    1c08:	91 81       	ldd	r25, Z+1	; 0x01
    1c0a:	11 96       	adiw	r26, 0x01	; 1
    1c0c:	8c 91       	ld	r24, X
    1c0e:	11 97       	sbiw	r26, 0x01	; 1
    1c10:	98 17       	cp	r25, r24
    1c12:	09 f0       	breq	.+2      	; 0x1c16 <_fpadd_parts+0x3a>
    1c14:	21 c1       	rjmp	.+578    	; 0x1e58 <_fpadd_parts+0x27c>
    1c16:	26 c1       	rjmp	.+588    	; 0x1e64 <_fpadd_parts+0x288>
    1c18:	94 30       	cpi	r25, 0x04	; 4
    1c1a:	09 f4       	brne	.+2      	; 0x1c1e <_fpadd_parts+0x42>
    1c1c:	20 c1       	rjmp	.+576    	; 0x1e5e <_fpadd_parts+0x282>
    1c1e:	92 30       	cpi	r25, 0x02	; 2
    1c20:	b1 f4       	brne	.+44     	; 0x1c4e <_fpadd_parts+0x72>
    1c22:	82 30       	cpi	r24, 0x02	; 2
    1c24:	09 f0       	breq	.+2      	; 0x1c28 <_fpadd_parts+0x4c>
    1c26:	1e c1       	rjmp	.+572    	; 0x1e64 <_fpadd_parts+0x288>
    1c28:	ca 01       	movw	r24, r20
    1c2a:	af 01       	movw	r20, r30
    1c2c:	28 e0       	ldi	r18, 0x08	; 8
    1c2e:	da 01       	movw	r26, r20
    1c30:	0d 90       	ld	r0, X+
    1c32:	ad 01       	movw	r20, r26
    1c34:	dc 01       	movw	r26, r24
    1c36:	0d 92       	st	X+, r0
    1c38:	cd 01       	movw	r24, r26
    1c3a:	21 50       	subi	r18, 0x01	; 1
    1c3c:	c1 f7       	brne	.-16     	; 0x1c2e <_fpadd_parts+0x52>
    1c3e:	db 01       	movw	r26, r22
    1c40:	11 96       	adiw	r26, 0x01	; 1
    1c42:	8c 91       	ld	r24, X
    1c44:	11 97       	sbiw	r26, 0x01	; 1
    1c46:	91 81       	ldd	r25, Z+1	; 0x01
    1c48:	89 23       	and	r24, r25
    1c4a:	89 83       	std	Y+1, r24	; 0x01
    1c4c:	0a c1       	rjmp	.+532    	; 0x1e62 <_fpadd_parts+0x286>
    1c4e:	82 30       	cpi	r24, 0x02	; 2
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <_fpadd_parts+0x78>
    1c52:	05 c1       	rjmp	.+522    	; 0x1e5e <_fpadd_parts+0x282>
    1c54:	c2 80       	ldd	r12, Z+2	; 0x02
    1c56:	d3 80       	ldd	r13, Z+3	; 0x03
    1c58:	db 01       	movw	r26, r22
    1c5a:	12 96       	adiw	r26, 0x02	; 2
    1c5c:	6d 90       	ld	r6, X+
    1c5e:	7c 90       	ld	r7, X
    1c60:	13 97       	sbiw	r26, 0x03	; 3
    1c62:	24 81       	ldd	r18, Z+4	; 0x04
    1c64:	35 81       	ldd	r19, Z+5	; 0x05
    1c66:	46 81       	ldd	r20, Z+6	; 0x06
    1c68:	57 81       	ldd	r21, Z+7	; 0x07
    1c6a:	14 96       	adiw	r26, 0x04	; 4
    1c6c:	ed 90       	ld	r14, X+
    1c6e:	fd 90       	ld	r15, X+
    1c70:	0d 91       	ld	r16, X+
    1c72:	1c 91       	ld	r17, X
    1c74:	17 97       	sbiw	r26, 0x07	; 7
    1c76:	c6 01       	movw	r24, r12
    1c78:	86 19       	sub	r24, r6
    1c7a:	97 09       	sbc	r25, r7
    1c7c:	5c 01       	movw	r10, r24
    1c7e:	97 ff       	sbrs	r25, 7
    1c80:	04 c0       	rjmp	.+8      	; 0x1c8a <_fpadd_parts+0xae>
    1c82:	aa 24       	eor	r10, r10
    1c84:	bb 24       	eor	r11, r11
    1c86:	a8 1a       	sub	r10, r24
    1c88:	b9 0a       	sbc	r11, r25
    1c8a:	b0 e2       	ldi	r27, 0x20	; 32
    1c8c:	ab 16       	cp	r10, r27
    1c8e:	b1 04       	cpc	r11, r1
    1c90:	0c f0       	brlt	.+2      	; 0x1c94 <_fpadd_parts+0xb8>
    1c92:	61 c0       	rjmp	.+194    	; 0x1d56 <_fpadd_parts+0x17a>
    1c94:	18 16       	cp	r1, r24
    1c96:	19 06       	cpc	r1, r25
    1c98:	6c f5       	brge	.+90     	; 0x1cf4 <_fpadd_parts+0x118>
    1c9a:	37 01       	movw	r6, r14
    1c9c:	48 01       	movw	r8, r16
    1c9e:	0a 2c       	mov	r0, r10
    1ca0:	04 c0       	rjmp	.+8      	; 0x1caa <_fpadd_parts+0xce>
    1ca2:	96 94       	lsr	r9
    1ca4:	87 94       	ror	r8
    1ca6:	77 94       	ror	r7
    1ca8:	67 94       	ror	r6
    1caa:	0a 94       	dec	r0
    1cac:	d2 f7       	brpl	.-12     	; 0x1ca2 <_fpadd_parts+0xc6>
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a0 e0       	ldi	r26, 0x00	; 0
    1cb4:	b0 e0       	ldi	r27, 0x00	; 0
    1cb6:	0a 2c       	mov	r0, r10
    1cb8:	04 c0       	rjmp	.+8      	; 0x1cc2 <_fpadd_parts+0xe6>
    1cba:	88 0f       	add	r24, r24
    1cbc:	99 1f       	adc	r25, r25
    1cbe:	aa 1f       	adc	r26, r26
    1cc0:	bb 1f       	adc	r27, r27
    1cc2:	0a 94       	dec	r0
    1cc4:	d2 f7       	brpl	.-12     	; 0x1cba <_fpadd_parts+0xde>
    1cc6:	01 97       	sbiw	r24, 0x01	; 1
    1cc8:	a1 09       	sbc	r26, r1
    1cca:	b1 09       	sbc	r27, r1
    1ccc:	8e 21       	and	r24, r14
    1cce:	9f 21       	and	r25, r15
    1cd0:	a0 23       	and	r26, r16
    1cd2:	b1 23       	and	r27, r17
    1cd4:	ee 24       	eor	r14, r14
    1cd6:	ff 24       	eor	r15, r15
    1cd8:	87 01       	movw	r16, r14
    1cda:	e3 94       	inc	r14
    1cdc:	00 97       	sbiw	r24, 0x00	; 0
    1cde:	a1 05       	cpc	r26, r1
    1ce0:	b1 05       	cpc	r27, r1
    1ce2:	19 f4       	brne	.+6      	; 0x1cea <_fpadd_parts+0x10e>
    1ce4:	ee 24       	eor	r14, r14
    1ce6:	ff 24       	eor	r15, r15
    1ce8:	87 01       	movw	r16, r14
    1cea:	e6 28       	or	r14, r6
    1cec:	f7 28       	or	r15, r7
    1cee:	08 29       	or	r16, r8
    1cf0:	19 29       	or	r17, r9
    1cf2:	3c c0       	rjmp	.+120    	; 0x1d6c <_fpadd_parts+0x190>
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	d1 f1       	breq	.+116    	; 0x1d6c <_fpadd_parts+0x190>
    1cf8:	ca 0c       	add	r12, r10
    1cfa:	db 1c       	adc	r13, r11
    1cfc:	39 01       	movw	r6, r18
    1cfe:	4a 01       	movw	r8, r20
    1d00:	0a 2c       	mov	r0, r10
    1d02:	04 c0       	rjmp	.+8      	; 0x1d0c <_fpadd_parts+0x130>
    1d04:	96 94       	lsr	r9
    1d06:	87 94       	ror	r8
    1d08:	77 94       	ror	r7
    1d0a:	67 94       	ror	r6
    1d0c:	0a 94       	dec	r0
    1d0e:	d2 f7       	brpl	.-12     	; 0x1d04 <_fpadd_parts+0x128>
    1d10:	81 e0       	ldi	r24, 0x01	; 1
    1d12:	90 e0       	ldi	r25, 0x00	; 0
    1d14:	a0 e0       	ldi	r26, 0x00	; 0
    1d16:	b0 e0       	ldi	r27, 0x00	; 0
    1d18:	0a 2c       	mov	r0, r10
    1d1a:	04 c0       	rjmp	.+8      	; 0x1d24 <_fpadd_parts+0x148>
    1d1c:	88 0f       	add	r24, r24
    1d1e:	99 1f       	adc	r25, r25
    1d20:	aa 1f       	adc	r26, r26
    1d22:	bb 1f       	adc	r27, r27
    1d24:	0a 94       	dec	r0
    1d26:	d2 f7       	brpl	.-12     	; 0x1d1c <_fpadd_parts+0x140>
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	a1 09       	sbc	r26, r1
    1d2c:	b1 09       	sbc	r27, r1
    1d2e:	82 23       	and	r24, r18
    1d30:	93 23       	and	r25, r19
    1d32:	a4 23       	and	r26, r20
    1d34:	b5 23       	and	r27, r21
    1d36:	21 e0       	ldi	r18, 0x01	; 1
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e0       	ldi	r20, 0x00	; 0
    1d3c:	50 e0       	ldi	r21, 0x00	; 0
    1d3e:	00 97       	sbiw	r24, 0x00	; 0
    1d40:	a1 05       	cpc	r26, r1
    1d42:	b1 05       	cpc	r27, r1
    1d44:	19 f4       	brne	.+6      	; 0x1d4c <_fpadd_parts+0x170>
    1d46:	20 e0       	ldi	r18, 0x00	; 0
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	a9 01       	movw	r20, r18
    1d4c:	26 29       	or	r18, r6
    1d4e:	37 29       	or	r19, r7
    1d50:	48 29       	or	r20, r8
    1d52:	59 29       	or	r21, r9
    1d54:	0b c0       	rjmp	.+22     	; 0x1d6c <_fpadd_parts+0x190>
    1d56:	6c 14       	cp	r6, r12
    1d58:	7d 04       	cpc	r7, r13
    1d5a:	24 f4       	brge	.+8      	; 0x1d64 <_fpadd_parts+0x188>
    1d5c:	ee 24       	eor	r14, r14
    1d5e:	ff 24       	eor	r15, r15
    1d60:	87 01       	movw	r16, r14
    1d62:	04 c0       	rjmp	.+8      	; 0x1d6c <_fpadd_parts+0x190>
    1d64:	63 01       	movw	r12, r6
    1d66:	20 e0       	ldi	r18, 0x00	; 0
    1d68:	30 e0       	ldi	r19, 0x00	; 0
    1d6a:	a9 01       	movw	r20, r18
    1d6c:	81 81       	ldd	r24, Z+1	; 0x01
    1d6e:	fb 01       	movw	r30, r22
    1d70:	91 81       	ldd	r25, Z+1	; 0x01
    1d72:	89 17       	cp	r24, r25
    1d74:	09 f4       	brne	.+2      	; 0x1d78 <_fpadd_parts+0x19c>
    1d76:	45 c0       	rjmp	.+138    	; 0x1e02 <_fpadd_parts+0x226>
    1d78:	88 23       	and	r24, r24
    1d7a:	49 f0       	breq	.+18     	; 0x1d8e <_fpadd_parts+0x1b2>
    1d7c:	d8 01       	movw	r26, r16
    1d7e:	c7 01       	movw	r24, r14
    1d80:	82 1b       	sub	r24, r18
    1d82:	93 0b       	sbc	r25, r19
    1d84:	a4 0b       	sbc	r26, r20
    1d86:	b5 0b       	sbc	r27, r21
    1d88:	9c 01       	movw	r18, r24
    1d8a:	ad 01       	movw	r20, r26
    1d8c:	04 c0       	rjmp	.+8      	; 0x1d96 <_fpadd_parts+0x1ba>
    1d8e:	2e 19       	sub	r18, r14
    1d90:	3f 09       	sbc	r19, r15
    1d92:	40 0b       	sbc	r20, r16
    1d94:	51 0b       	sbc	r21, r17
    1d96:	57 fd       	sbrc	r21, 7
    1d98:	04 c0       	rjmp	.+8      	; 0x1da2 <_fpadd_parts+0x1c6>
    1d9a:	19 82       	std	Y+1, r1	; 0x01
    1d9c:	db 82       	std	Y+3, r13	; 0x03
    1d9e:	ca 82       	std	Y+2, r12	; 0x02
    1da0:	0b c0       	rjmp	.+22     	; 0x1db8 <_fpadd_parts+0x1dc>
    1da2:	81 e0       	ldi	r24, 0x01	; 1
    1da4:	89 83       	std	Y+1, r24	; 0x01
    1da6:	db 82       	std	Y+3, r13	; 0x03
    1da8:	ca 82       	std	Y+2, r12	; 0x02
    1daa:	50 95       	com	r21
    1dac:	40 95       	com	r20
    1dae:	30 95       	com	r19
    1db0:	21 95       	neg	r18
    1db2:	3f 4f       	sbci	r19, 0xFF	; 255
    1db4:	4f 4f       	sbci	r20, 0xFF	; 255
    1db6:	5f 4f       	sbci	r21, 0xFF	; 255
    1db8:	2c 83       	std	Y+4, r18	; 0x04
    1dba:	3d 83       	std	Y+5, r19	; 0x05
    1dbc:	4e 83       	std	Y+6, r20	; 0x06
    1dbe:	5f 83       	std	Y+7, r21	; 0x07
    1dc0:	0d c0       	rjmp	.+26     	; 0x1ddc <_fpadd_parts+0x200>
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	aa 1f       	adc	r26, r26
    1dc8:	bb 1f       	adc	r27, r27
    1dca:	8c 83       	std	Y+4, r24	; 0x04
    1dcc:	9d 83       	std	Y+5, r25	; 0x05
    1dce:	ae 83       	std	Y+6, r26	; 0x06
    1dd0:	bf 83       	std	Y+7, r27	; 0x07
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	9b 81       	ldd	r25, Y+3	; 0x03
    1dd6:	01 97       	sbiw	r24, 0x01	; 1
    1dd8:	9b 83       	std	Y+3, r25	; 0x03
    1dda:	8a 83       	std	Y+2, r24	; 0x02
    1ddc:	8c 81       	ldd	r24, Y+4	; 0x04
    1dde:	9d 81       	ldd	r25, Y+5	; 0x05
    1de0:	ae 81       	ldd	r26, Y+6	; 0x06
    1de2:	bf 81       	ldd	r27, Y+7	; 0x07
    1de4:	9c 01       	movw	r18, r24
    1de6:	ad 01       	movw	r20, r26
    1de8:	21 50       	subi	r18, 0x01	; 1
    1dea:	30 40       	sbci	r19, 0x00	; 0
    1dec:	40 40       	sbci	r20, 0x00	; 0
    1dee:	50 40       	sbci	r21, 0x00	; 0
    1df0:	2f 3f       	cpi	r18, 0xFF	; 255
    1df2:	ef ef       	ldi	r30, 0xFF	; 255
    1df4:	3e 07       	cpc	r19, r30
    1df6:	ef ef       	ldi	r30, 0xFF	; 255
    1df8:	4e 07       	cpc	r20, r30
    1dfa:	ef e3       	ldi	r30, 0x3F	; 63
    1dfc:	5e 07       	cpc	r21, r30
    1dfe:	08 f3       	brcs	.-62     	; 0x1dc2 <_fpadd_parts+0x1e6>
    1e00:	0b c0       	rjmp	.+22     	; 0x1e18 <_fpadd_parts+0x23c>
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	db 82       	std	Y+3, r13	; 0x03
    1e06:	ca 82       	std	Y+2, r12	; 0x02
    1e08:	2e 0d       	add	r18, r14
    1e0a:	3f 1d       	adc	r19, r15
    1e0c:	40 1f       	adc	r20, r16
    1e0e:	51 1f       	adc	r21, r17
    1e10:	2c 83       	std	Y+4, r18	; 0x04
    1e12:	3d 83       	std	Y+5, r19	; 0x05
    1e14:	4e 83       	std	Y+6, r20	; 0x06
    1e16:	5f 83       	std	Y+7, r21	; 0x07
    1e18:	83 e0       	ldi	r24, 0x03	; 3
    1e1a:	88 83       	st	Y, r24
    1e1c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e1e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e20:	4e 81       	ldd	r20, Y+6	; 0x06
    1e22:	5f 81       	ldd	r21, Y+7	; 0x07
    1e24:	57 ff       	sbrs	r21, 7
    1e26:	1d c0       	rjmp	.+58     	; 0x1e62 <_fpadd_parts+0x286>
    1e28:	da 01       	movw	r26, r20
    1e2a:	c9 01       	movw	r24, r18
    1e2c:	81 70       	andi	r24, 0x01	; 1
    1e2e:	90 70       	andi	r25, 0x00	; 0
    1e30:	a0 70       	andi	r26, 0x00	; 0
    1e32:	b0 70       	andi	r27, 0x00	; 0
    1e34:	56 95       	lsr	r21
    1e36:	47 95       	ror	r20
    1e38:	37 95       	ror	r19
    1e3a:	27 95       	ror	r18
    1e3c:	82 2b       	or	r24, r18
    1e3e:	93 2b       	or	r25, r19
    1e40:	a4 2b       	or	r26, r20
    1e42:	b5 2b       	or	r27, r21
    1e44:	8c 83       	std	Y+4, r24	; 0x04
    1e46:	9d 83       	std	Y+5, r25	; 0x05
    1e48:	ae 83       	std	Y+6, r26	; 0x06
    1e4a:	bf 83       	std	Y+7, r27	; 0x07
    1e4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e4e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	9b 83       	std	Y+3, r25	; 0x03
    1e54:	8a 83       	std	Y+2, r24	; 0x02
    1e56:	05 c0       	rjmp	.+10     	; 0x1e62 <_fpadd_parts+0x286>
    1e58:	e0 ee       	ldi	r30, 0xE0	; 224
    1e5a:	f1 e0       	ldi	r31, 0x01	; 1
    1e5c:	03 c0       	rjmp	.+6      	; 0x1e64 <_fpadd_parts+0x288>
    1e5e:	fb 01       	movw	r30, r22
    1e60:	01 c0       	rjmp	.+2      	; 0x1e64 <_fpadd_parts+0x288>
    1e62:	fe 01       	movw	r30, r28
    1e64:	cf 01       	movw	r24, r30
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	ee e0       	ldi	r30, 0x0E	; 14
    1e6c:	0c 94 58 25 	jmp	0x4ab0	; 0x4ab0 <__epilogue_restores__+0x8>

00001e70 <__addsf3>:
    1e70:	a0 e2       	ldi	r26, 0x20	; 32
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	ee e3       	ldi	r30, 0x3E	; 62
    1e76:	ff e0       	ldi	r31, 0x0F	; 15
    1e78:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <__prologue_saves__+0x18>
    1e7c:	69 83       	std	Y+1, r22	; 0x01
    1e7e:	7a 83       	std	Y+2, r23	; 0x02
    1e80:	8b 83       	std	Y+3, r24	; 0x03
    1e82:	9c 83       	std	Y+4, r25	; 0x04
    1e84:	2d 83       	std	Y+5, r18	; 0x05
    1e86:	3e 83       	std	Y+6, r19	; 0x06
    1e88:	4f 83       	std	Y+7, r20	; 0x07
    1e8a:	58 87       	std	Y+8, r21	; 0x08
    1e8c:	89 e0       	ldi	r24, 0x09	; 9
    1e8e:	e8 2e       	mov	r14, r24
    1e90:	f1 2c       	mov	r15, r1
    1e92:	ec 0e       	add	r14, r28
    1e94:	fd 1e       	adc	r15, r29
    1e96:	ce 01       	movw	r24, r28
    1e98:	01 96       	adiw	r24, 0x01	; 1
    1e9a:	b7 01       	movw	r22, r14
    1e9c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    1ea0:	8e 01       	movw	r16, r28
    1ea2:	0f 5e       	subi	r16, 0xEF	; 239
    1ea4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea6:	ce 01       	movw	r24, r28
    1ea8:	05 96       	adiw	r24, 0x05	; 5
    1eaa:	b8 01       	movw	r22, r16
    1eac:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    1eb0:	c7 01       	movw	r24, r14
    1eb2:	b8 01       	movw	r22, r16
    1eb4:	ae 01       	movw	r20, r28
    1eb6:	47 5e       	subi	r20, 0xE7	; 231
    1eb8:	5f 4f       	sbci	r21, 0xFF	; 255
    1eba:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_fpadd_parts>
    1ebe:	0e 94 82 13 	call	0x2704	; 0x2704 <__pack_f>
    1ec2:	a0 96       	adiw	r28, 0x20	; 32
    1ec4:	e6 e0       	ldi	r30, 0x06	; 6
    1ec6:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__epilogue_restores__+0x18>

00001eca <__subsf3>:
    1eca:	a0 e2       	ldi	r26, 0x20	; 32
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	eb e6       	ldi	r30, 0x6B	; 107
    1ed0:	ff e0       	ldi	r31, 0x0F	; 15
    1ed2:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <__prologue_saves__+0x18>
    1ed6:	69 83       	std	Y+1, r22	; 0x01
    1ed8:	7a 83       	std	Y+2, r23	; 0x02
    1eda:	8b 83       	std	Y+3, r24	; 0x03
    1edc:	9c 83       	std	Y+4, r25	; 0x04
    1ede:	2d 83       	std	Y+5, r18	; 0x05
    1ee0:	3e 83       	std	Y+6, r19	; 0x06
    1ee2:	4f 83       	std	Y+7, r20	; 0x07
    1ee4:	58 87       	std	Y+8, r21	; 0x08
    1ee6:	8e 01       	movw	r16, r28
    1ee8:	07 5f       	subi	r16, 0xF7	; 247
    1eea:	1f 4f       	sbci	r17, 0xFF	; 255
    1eec:	ce 01       	movw	r24, r28
    1eee:	01 96       	adiw	r24, 0x01	; 1
    1ef0:	b8 01       	movw	r22, r16
    1ef2:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    1ef6:	91 e1       	ldi	r25, 0x11	; 17
    1ef8:	e9 2e       	mov	r14, r25
    1efa:	f1 2c       	mov	r15, r1
    1efc:	ec 0e       	add	r14, r28
    1efe:	fd 1e       	adc	r15, r29
    1f00:	ce 01       	movw	r24, r28
    1f02:	05 96       	adiw	r24, 0x05	; 5
    1f04:	b7 01       	movw	r22, r14
    1f06:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    1f0a:	8a 89       	ldd	r24, Y+18	; 0x12
    1f0c:	91 e0       	ldi	r25, 0x01	; 1
    1f0e:	89 27       	eor	r24, r25
    1f10:	8a 8b       	std	Y+18, r24	; 0x12
    1f12:	c8 01       	movw	r24, r16
    1f14:	b7 01       	movw	r22, r14
    1f16:	ae 01       	movw	r20, r28
    1f18:	47 5e       	subi	r20, 0xE7	; 231
    1f1a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f1c:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <_fpadd_parts>
    1f20:	0e 94 82 13 	call	0x2704	; 0x2704 <__pack_f>
    1f24:	a0 96       	adiw	r28, 0x20	; 32
    1f26:	e6 e0       	ldi	r30, 0x06	; 6
    1f28:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__epilogue_restores__+0x18>

00001f2c <__mulsf3>:
    1f2c:	a0 e2       	ldi	r26, 0x20	; 32
    1f2e:	b0 e0       	ldi	r27, 0x00	; 0
    1f30:	ec e9       	ldi	r30, 0x9C	; 156
    1f32:	ff e0       	ldi	r31, 0x0F	; 15
    1f34:	0c 94 38 25 	jmp	0x4a70	; 0x4a70 <__prologue_saves__>
    1f38:	69 83       	std	Y+1, r22	; 0x01
    1f3a:	7a 83       	std	Y+2, r23	; 0x02
    1f3c:	8b 83       	std	Y+3, r24	; 0x03
    1f3e:	9c 83       	std	Y+4, r25	; 0x04
    1f40:	2d 83       	std	Y+5, r18	; 0x05
    1f42:	3e 83       	std	Y+6, r19	; 0x06
    1f44:	4f 83       	std	Y+7, r20	; 0x07
    1f46:	58 87       	std	Y+8, r21	; 0x08
    1f48:	ce 01       	movw	r24, r28
    1f4a:	01 96       	adiw	r24, 0x01	; 1
    1f4c:	be 01       	movw	r22, r28
    1f4e:	67 5f       	subi	r22, 0xF7	; 247
    1f50:	7f 4f       	sbci	r23, 0xFF	; 255
    1f52:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    1f56:	ce 01       	movw	r24, r28
    1f58:	05 96       	adiw	r24, 0x05	; 5
    1f5a:	be 01       	movw	r22, r28
    1f5c:	6f 5e       	subi	r22, 0xEF	; 239
    1f5e:	7f 4f       	sbci	r23, 0xFF	; 255
    1f60:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    1f64:	99 85       	ldd	r25, Y+9	; 0x09
    1f66:	92 30       	cpi	r25, 0x02	; 2
    1f68:	78 f0       	brcs	.+30     	; 0x1f88 <__mulsf3+0x5c>
    1f6a:	89 89       	ldd	r24, Y+17	; 0x11
    1f6c:	82 30       	cpi	r24, 0x02	; 2
    1f6e:	c0 f0       	brcs	.+48     	; 0x1fa0 <__mulsf3+0x74>
    1f70:	94 30       	cpi	r25, 0x04	; 4
    1f72:	19 f4       	brne	.+6      	; 0x1f7a <__mulsf3+0x4e>
    1f74:	82 30       	cpi	r24, 0x02	; 2
    1f76:	41 f4       	brne	.+16     	; 0x1f88 <__mulsf3+0x5c>
    1f78:	cb c0       	rjmp	.+406    	; 0x2110 <__mulsf3+0x1e4>
    1f7a:	84 30       	cpi	r24, 0x04	; 4
    1f7c:	19 f4       	brne	.+6      	; 0x1f84 <__mulsf3+0x58>
    1f7e:	92 30       	cpi	r25, 0x02	; 2
    1f80:	79 f4       	brne	.+30     	; 0x1fa0 <__mulsf3+0x74>
    1f82:	c6 c0       	rjmp	.+396    	; 0x2110 <__mulsf3+0x1e4>
    1f84:	92 30       	cpi	r25, 0x02	; 2
    1f86:	51 f4       	brne	.+20     	; 0x1f9c <__mulsf3+0x70>
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	2a 85       	ldd	r18, Y+10	; 0x0a
    1f8c:	9a 89       	ldd	r25, Y+18	; 0x12
    1f8e:	29 17       	cp	r18, r25
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <__mulsf3+0x68>
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	8a 87       	std	Y+10, r24	; 0x0a
    1f96:	ce 01       	movw	r24, r28
    1f98:	09 96       	adiw	r24, 0x09	; 9
    1f9a:	bc c0       	rjmp	.+376    	; 0x2114 <__mulsf3+0x1e8>
    1f9c:	82 30       	cpi	r24, 0x02	; 2
    1f9e:	51 f4       	brne	.+20     	; 0x1fb4 <__mulsf3+0x88>
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	2a 85       	ldd	r18, Y+10	; 0x0a
    1fa4:	9a 89       	ldd	r25, Y+18	; 0x12
    1fa6:	29 17       	cp	r18, r25
    1fa8:	09 f4       	brne	.+2      	; 0x1fac <__mulsf3+0x80>
    1faa:	80 e0       	ldi	r24, 0x00	; 0
    1fac:	8a 8b       	std	Y+18, r24	; 0x12
    1fae:	ce 01       	movw	r24, r28
    1fb0:	41 96       	adiw	r24, 0x11	; 17
    1fb2:	b0 c0       	rjmp	.+352    	; 0x2114 <__mulsf3+0x1e8>
    1fb4:	6d 84       	ldd	r6, Y+13	; 0x0d
    1fb6:	7e 84       	ldd	r7, Y+14	; 0x0e
    1fb8:	8f 84       	ldd	r8, Y+15	; 0x0f
    1fba:	98 88       	ldd	r9, Y+16	; 0x10
    1fbc:	ed 88       	ldd	r14, Y+21	; 0x15
    1fbe:	fe 88       	ldd	r15, Y+22	; 0x16
    1fc0:	0f 89       	ldd	r16, Y+23	; 0x17
    1fc2:	18 8d       	ldd	r17, Y+24	; 0x18
    1fc4:	e0 e2       	ldi	r30, 0x20	; 32
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	80 e0       	ldi	r24, 0x00	; 0
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	dc 01       	movw	r26, r24
    1fce:	aa 24       	eor	r10, r10
    1fd0:	bb 24       	eor	r11, r11
    1fd2:	65 01       	movw	r12, r10
    1fd4:	20 e0       	ldi	r18, 0x00	; 0
    1fd6:	30 e0       	ldi	r19, 0x00	; 0
    1fd8:	a9 01       	movw	r20, r18
    1fda:	b3 01       	movw	r22, r6
    1fdc:	61 70       	andi	r22, 0x01	; 1
    1fde:	70 70       	andi	r23, 0x00	; 0
    1fe0:	61 15       	cp	r22, r1
    1fe2:	71 05       	cpc	r23, r1
    1fe4:	d1 f0       	breq	.+52     	; 0x201a <__mulsf3+0xee>
    1fe6:	2e 0d       	add	r18, r14
    1fe8:	3f 1d       	adc	r19, r15
    1fea:	40 1f       	adc	r20, r16
    1fec:	51 1f       	adc	r21, r17
    1fee:	15 01       	movw	r2, r10
    1ff0:	26 01       	movw	r4, r12
    1ff2:	28 0e       	add	r2, r24
    1ff4:	39 1e       	adc	r3, r25
    1ff6:	4a 1e       	adc	r4, r26
    1ff8:	5b 1e       	adc	r5, r27
    1ffa:	81 e0       	ldi	r24, 0x01	; 1
    1ffc:	90 e0       	ldi	r25, 0x00	; 0
    1ffe:	a0 e0       	ldi	r26, 0x00	; 0
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	2e 15       	cp	r18, r14
    2004:	3f 05       	cpc	r19, r15
    2006:	40 07       	cpc	r20, r16
    2008:	51 07       	cpc	r21, r17
    200a:	18 f0       	brcs	.+6      	; 0x2012 <__mulsf3+0xe6>
    200c:	80 e0       	ldi	r24, 0x00	; 0
    200e:	90 e0       	ldi	r25, 0x00	; 0
    2010:	dc 01       	movw	r26, r24
    2012:	82 0d       	add	r24, r2
    2014:	93 1d       	adc	r25, r3
    2016:	a4 1d       	adc	r26, r4
    2018:	b5 1d       	adc	r27, r5
    201a:	aa 0c       	add	r10, r10
    201c:	bb 1c       	adc	r11, r11
    201e:	cc 1c       	adc	r12, r12
    2020:	dd 1c       	adc	r13, r13
    2022:	17 ff       	sbrs	r17, 7
    2024:	09 c0       	rjmp	.+18     	; 0x2038 <__mulsf3+0x10c>
    2026:	61 e0       	ldi	r22, 0x01	; 1
    2028:	26 2e       	mov	r2, r22
    202a:	31 2c       	mov	r3, r1
    202c:	41 2c       	mov	r4, r1
    202e:	51 2c       	mov	r5, r1
    2030:	a2 28       	or	r10, r2
    2032:	b3 28       	or	r11, r3
    2034:	c4 28       	or	r12, r4
    2036:	d5 28       	or	r13, r5
    2038:	31 97       	sbiw	r30, 0x01	; 1
    203a:	49 f0       	breq	.+18     	; 0x204e <__mulsf3+0x122>
    203c:	ee 0c       	add	r14, r14
    203e:	ff 1c       	adc	r15, r15
    2040:	00 1f       	adc	r16, r16
    2042:	11 1f       	adc	r17, r17
    2044:	96 94       	lsr	r9
    2046:	87 94       	ror	r8
    2048:	77 94       	ror	r7
    204a:	67 94       	ror	r6
    204c:	c6 cf       	rjmp	.-116    	; 0x1fda <__mulsf3+0xae>
    204e:	6b 89       	ldd	r22, Y+19	; 0x13
    2050:	7c 89       	ldd	r23, Y+20	; 0x14
    2052:	eb 85       	ldd	r30, Y+11	; 0x0b
    2054:	fc 85       	ldd	r31, Y+12	; 0x0c
    2056:	6e 0f       	add	r22, r30
    2058:	7f 1f       	adc	r23, r31
    205a:	6e 5f       	subi	r22, 0xFE	; 254
    205c:	7f 4f       	sbci	r23, 0xFF	; 255
    205e:	7c 8f       	std	Y+28, r23	; 0x1c
    2060:	6b 8f       	std	Y+27, r22	; 0x1b
    2062:	61 e0       	ldi	r22, 0x01	; 1
    2064:	ea 85       	ldd	r30, Y+10	; 0x0a
    2066:	7a 89       	ldd	r23, Y+18	; 0x12
    2068:	e7 17       	cp	r30, r23
    206a:	09 f4       	brne	.+2      	; 0x206e <__mulsf3+0x142>
    206c:	60 e0       	ldi	r22, 0x00	; 0
    206e:	6a 8f       	std	Y+26, r22	; 0x1a
    2070:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2072:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2074:	10 c0       	rjmp	.+32     	; 0x2096 <__mulsf3+0x16a>
    2076:	fc 01       	movw	r30, r24
    2078:	e1 70       	andi	r30, 0x01	; 1
    207a:	f0 70       	andi	r31, 0x00	; 0
    207c:	30 97       	sbiw	r30, 0x00	; 0
    207e:	29 f0       	breq	.+10     	; 0x208a <__mulsf3+0x15e>
    2080:	56 95       	lsr	r21
    2082:	47 95       	ror	r20
    2084:	37 95       	ror	r19
    2086:	27 95       	ror	r18
    2088:	50 68       	ori	r21, 0x80	; 128
    208a:	b6 95       	lsr	r27
    208c:	a7 95       	ror	r26
    208e:	97 95       	ror	r25
    2090:	87 95       	ror	r24
    2092:	6f 5f       	subi	r22, 0xFF	; 255
    2094:	7f 4f       	sbci	r23, 0xFF	; 255
    2096:	b7 fd       	sbrc	r27, 7
    2098:	ee cf       	rjmp	.-36     	; 0x2076 <__mulsf3+0x14a>
    209a:	0c c0       	rjmp	.+24     	; 0x20b4 <__mulsf3+0x188>
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	aa 1f       	adc	r26, r26
    20a2:	bb 1f       	adc	r27, r27
    20a4:	57 fd       	sbrc	r21, 7
    20a6:	81 60       	ori	r24, 0x01	; 1
    20a8:	22 0f       	add	r18, r18
    20aa:	33 1f       	adc	r19, r19
    20ac:	44 1f       	adc	r20, r20
    20ae:	55 1f       	adc	r21, r21
    20b0:	61 50       	subi	r22, 0x01	; 1
    20b2:	70 40       	sbci	r23, 0x00	; 0
    20b4:	80 30       	cpi	r24, 0x00	; 0
    20b6:	e0 e0       	ldi	r30, 0x00	; 0
    20b8:	9e 07       	cpc	r25, r30
    20ba:	e0 e0       	ldi	r30, 0x00	; 0
    20bc:	ae 07       	cpc	r26, r30
    20be:	e0 e4       	ldi	r30, 0x40	; 64
    20c0:	be 07       	cpc	r27, r30
    20c2:	60 f3       	brcs	.-40     	; 0x209c <__mulsf3+0x170>
    20c4:	6b 8f       	std	Y+27, r22	; 0x1b
    20c6:	7c 8f       	std	Y+28, r23	; 0x1c
    20c8:	6f e7       	ldi	r22, 0x7F	; 127
    20ca:	e6 2e       	mov	r14, r22
    20cc:	f1 2c       	mov	r15, r1
    20ce:	01 2d       	mov	r16, r1
    20d0:	11 2d       	mov	r17, r1
    20d2:	e8 22       	and	r14, r24
    20d4:	f9 22       	and	r15, r25
    20d6:	0a 23       	and	r16, r26
    20d8:	1b 23       	and	r17, r27
    20da:	60 e4       	ldi	r22, 0x40	; 64
    20dc:	e6 16       	cp	r14, r22
    20de:	f1 04       	cpc	r15, r1
    20e0:	01 05       	cpc	r16, r1
    20e2:	11 05       	cpc	r17, r1
    20e4:	61 f4       	brne	.+24     	; 0x20fe <__mulsf3+0x1d2>
    20e6:	87 fd       	sbrc	r24, 7
    20e8:	0a c0       	rjmp	.+20     	; 0x20fe <__mulsf3+0x1d2>
    20ea:	21 15       	cp	r18, r1
    20ec:	31 05       	cpc	r19, r1
    20ee:	41 05       	cpc	r20, r1
    20f0:	51 05       	cpc	r21, r1
    20f2:	29 f0       	breq	.+10     	; 0x20fe <__mulsf3+0x1d2>
    20f4:	80 5c       	subi	r24, 0xC0	; 192
    20f6:	9f 4f       	sbci	r25, 0xFF	; 255
    20f8:	af 4f       	sbci	r26, 0xFF	; 255
    20fa:	bf 4f       	sbci	r27, 0xFF	; 255
    20fc:	80 78       	andi	r24, 0x80	; 128
    20fe:	8d 8f       	std	Y+29, r24	; 0x1d
    2100:	9e 8f       	std	Y+30, r25	; 0x1e
    2102:	af 8f       	std	Y+31, r26	; 0x1f
    2104:	b8 a3       	std	Y+32, r27	; 0x20
    2106:	83 e0       	ldi	r24, 0x03	; 3
    2108:	89 8f       	std	Y+25, r24	; 0x19
    210a:	ce 01       	movw	r24, r28
    210c:	49 96       	adiw	r24, 0x19	; 25
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <__mulsf3+0x1e8>
    2110:	80 ee       	ldi	r24, 0xE0	; 224
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	0e 94 82 13 	call	0x2704	; 0x2704 <__pack_f>
    2118:	a0 96       	adiw	r28, 0x20	; 32
    211a:	e2 e1       	ldi	r30, 0x12	; 18
    211c:	0c 94 54 25 	jmp	0x4aa8	; 0x4aa8 <__epilogue_restores__>

00002120 <__divsf3>:
    2120:	a8 e1       	ldi	r26, 0x18	; 24
    2122:	b0 e0       	ldi	r27, 0x00	; 0
    2124:	e6 e9       	ldi	r30, 0x96	; 150
    2126:	f0 e1       	ldi	r31, 0x10	; 16
    2128:	0c 94 40 25 	jmp	0x4a80	; 0x4a80 <__prologue_saves__+0x10>
    212c:	69 83       	std	Y+1, r22	; 0x01
    212e:	7a 83       	std	Y+2, r23	; 0x02
    2130:	8b 83       	std	Y+3, r24	; 0x03
    2132:	9c 83       	std	Y+4, r25	; 0x04
    2134:	2d 83       	std	Y+5, r18	; 0x05
    2136:	3e 83       	std	Y+6, r19	; 0x06
    2138:	4f 83       	std	Y+7, r20	; 0x07
    213a:	58 87       	std	Y+8, r21	; 0x08
    213c:	8e 01       	movw	r16, r28
    213e:	07 5f       	subi	r16, 0xF7	; 247
    2140:	1f 4f       	sbci	r17, 0xFF	; 255
    2142:	ce 01       	movw	r24, r28
    2144:	01 96       	adiw	r24, 0x01	; 1
    2146:	b8 01       	movw	r22, r16
    2148:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    214c:	81 e1       	ldi	r24, 0x11	; 17
    214e:	e8 2e       	mov	r14, r24
    2150:	f1 2c       	mov	r15, r1
    2152:	ec 0e       	add	r14, r28
    2154:	fd 1e       	adc	r15, r29
    2156:	ce 01       	movw	r24, r28
    2158:	05 96       	adiw	r24, 0x05	; 5
    215a:	b7 01       	movw	r22, r14
    215c:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    2160:	99 85       	ldd	r25, Y+9	; 0x09
    2162:	92 30       	cpi	r25, 0x02	; 2
    2164:	08 f4       	brcc	.+2      	; 0x2168 <__divsf3+0x48>
    2166:	83 c0       	rjmp	.+262    	; 0x226e <__divsf3+0x14e>
    2168:	89 89       	ldd	r24, Y+17	; 0x11
    216a:	82 30       	cpi	r24, 0x02	; 2
    216c:	08 f4       	brcc	.+2      	; 0x2170 <__divsf3+0x50>
    216e:	7b c0       	rjmp	.+246    	; 0x2266 <__divsf3+0x146>
    2170:	2a 85       	ldd	r18, Y+10	; 0x0a
    2172:	3a 89       	ldd	r19, Y+18	; 0x12
    2174:	23 27       	eor	r18, r19
    2176:	2a 87       	std	Y+10, r18	; 0x0a
    2178:	94 30       	cpi	r25, 0x04	; 4
    217a:	11 f0       	breq	.+4      	; 0x2180 <__divsf3+0x60>
    217c:	92 30       	cpi	r25, 0x02	; 2
    217e:	21 f4       	brne	.+8      	; 0x2188 <__divsf3+0x68>
    2180:	98 17       	cp	r25, r24
    2182:	09 f0       	breq	.+2      	; 0x2186 <__divsf3+0x66>
    2184:	6c c0       	rjmp	.+216    	; 0x225e <__divsf3+0x13e>
    2186:	71 c0       	rjmp	.+226    	; 0x226a <__divsf3+0x14a>
    2188:	84 30       	cpi	r24, 0x04	; 4
    218a:	39 f4       	brne	.+14     	; 0x219a <__divsf3+0x7a>
    218c:	1d 86       	std	Y+13, r1	; 0x0d
    218e:	1e 86       	std	Y+14, r1	; 0x0e
    2190:	1f 86       	std	Y+15, r1	; 0x0f
    2192:	18 8a       	std	Y+16, r1	; 0x10
    2194:	1c 86       	std	Y+12, r1	; 0x0c
    2196:	1b 86       	std	Y+11, r1	; 0x0b
    2198:	6a c0       	rjmp	.+212    	; 0x226e <__divsf3+0x14e>
    219a:	82 30       	cpi	r24, 0x02	; 2
    219c:	19 f4       	brne	.+6      	; 0x21a4 <__divsf3+0x84>
    219e:	84 e0       	ldi	r24, 0x04	; 4
    21a0:	89 87       	std	Y+9, r24	; 0x09
    21a2:	65 c0       	rjmp	.+202    	; 0x226e <__divsf3+0x14e>
    21a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    21a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    21a8:	2b 89       	ldd	r18, Y+19	; 0x13
    21aa:	3c 89       	ldd	r19, Y+20	; 0x14
    21ac:	82 1b       	sub	r24, r18
    21ae:	93 0b       	sbc	r25, r19
    21b0:	9c 87       	std	Y+12, r25	; 0x0c
    21b2:	8b 87       	std	Y+11, r24	; 0x0b
    21b4:	2d 85       	ldd	r18, Y+13	; 0x0d
    21b6:	3e 85       	ldd	r19, Y+14	; 0x0e
    21b8:	4f 85       	ldd	r20, Y+15	; 0x0f
    21ba:	58 89       	ldd	r21, Y+16	; 0x10
    21bc:	ed 88       	ldd	r14, Y+21	; 0x15
    21be:	fe 88       	ldd	r15, Y+22	; 0x16
    21c0:	0f 89       	ldd	r16, Y+23	; 0x17
    21c2:	18 8d       	ldd	r17, Y+24	; 0x18
    21c4:	2e 15       	cp	r18, r14
    21c6:	3f 05       	cpc	r19, r15
    21c8:	40 07       	cpc	r20, r16
    21ca:	51 07       	cpc	r21, r17
    21cc:	38 f4       	brcc	.+14     	; 0x21dc <__divsf3+0xbc>
    21ce:	22 0f       	add	r18, r18
    21d0:	33 1f       	adc	r19, r19
    21d2:	44 1f       	adc	r20, r20
    21d4:	55 1f       	adc	r21, r21
    21d6:	01 97       	sbiw	r24, 0x01	; 1
    21d8:	9c 87       	std	Y+12, r25	; 0x0c
    21da:	8b 87       	std	Y+11, r24	; 0x0b
    21dc:	6f e1       	ldi	r22, 0x1F	; 31
    21de:	70 e0       	ldi	r23, 0x00	; 0
    21e0:	a1 2c       	mov	r10, r1
    21e2:	b1 2c       	mov	r11, r1
    21e4:	c1 2c       	mov	r12, r1
    21e6:	a0 e4       	ldi	r26, 0x40	; 64
    21e8:	da 2e       	mov	r13, r26
    21ea:	80 e0       	ldi	r24, 0x00	; 0
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	dc 01       	movw	r26, r24
    21f0:	2e 15       	cp	r18, r14
    21f2:	3f 05       	cpc	r19, r15
    21f4:	40 07       	cpc	r20, r16
    21f6:	51 07       	cpc	r21, r17
    21f8:	40 f0       	brcs	.+16     	; 0x220a <__divsf3+0xea>
    21fa:	8a 29       	or	r24, r10
    21fc:	9b 29       	or	r25, r11
    21fe:	ac 29       	or	r26, r12
    2200:	bd 29       	or	r27, r13
    2202:	2e 19       	sub	r18, r14
    2204:	3f 09       	sbc	r19, r15
    2206:	40 0b       	sbc	r20, r16
    2208:	51 0b       	sbc	r21, r17
    220a:	d6 94       	lsr	r13
    220c:	c7 94       	ror	r12
    220e:	b7 94       	ror	r11
    2210:	a7 94       	ror	r10
    2212:	22 0f       	add	r18, r18
    2214:	33 1f       	adc	r19, r19
    2216:	44 1f       	adc	r20, r20
    2218:	55 1f       	adc	r21, r21
    221a:	61 50       	subi	r22, 0x01	; 1
    221c:	70 40       	sbci	r23, 0x00	; 0
    221e:	41 f7       	brne	.-48     	; 0x21f0 <__divsf3+0xd0>
    2220:	6f e7       	ldi	r22, 0x7F	; 127
    2222:	e6 2e       	mov	r14, r22
    2224:	f1 2c       	mov	r15, r1
    2226:	01 2d       	mov	r16, r1
    2228:	11 2d       	mov	r17, r1
    222a:	e8 22       	and	r14, r24
    222c:	f9 22       	and	r15, r25
    222e:	0a 23       	and	r16, r26
    2230:	1b 23       	and	r17, r27
    2232:	60 e4       	ldi	r22, 0x40	; 64
    2234:	e6 16       	cp	r14, r22
    2236:	f1 04       	cpc	r15, r1
    2238:	01 05       	cpc	r16, r1
    223a:	11 05       	cpc	r17, r1
    223c:	61 f4       	brne	.+24     	; 0x2256 <__divsf3+0x136>
    223e:	87 fd       	sbrc	r24, 7
    2240:	0a c0       	rjmp	.+20     	; 0x2256 <__divsf3+0x136>
    2242:	21 15       	cp	r18, r1
    2244:	31 05       	cpc	r19, r1
    2246:	41 05       	cpc	r20, r1
    2248:	51 05       	cpc	r21, r1
    224a:	29 f0       	breq	.+10     	; 0x2256 <__divsf3+0x136>
    224c:	80 5c       	subi	r24, 0xC0	; 192
    224e:	9f 4f       	sbci	r25, 0xFF	; 255
    2250:	af 4f       	sbci	r26, 0xFF	; 255
    2252:	bf 4f       	sbci	r27, 0xFF	; 255
    2254:	80 78       	andi	r24, 0x80	; 128
    2256:	8d 87       	std	Y+13, r24	; 0x0d
    2258:	9e 87       	std	Y+14, r25	; 0x0e
    225a:	af 87       	std	Y+15, r26	; 0x0f
    225c:	b8 8b       	std	Y+16, r27	; 0x10
    225e:	8e 01       	movw	r16, r28
    2260:	07 5f       	subi	r16, 0xF7	; 247
    2262:	1f 4f       	sbci	r17, 0xFF	; 255
    2264:	04 c0       	rjmp	.+8      	; 0x226e <__divsf3+0x14e>
    2266:	87 01       	movw	r16, r14
    2268:	02 c0       	rjmp	.+4      	; 0x226e <__divsf3+0x14e>
    226a:	00 ee       	ldi	r16, 0xE0	; 224
    226c:	11 e0       	ldi	r17, 0x01	; 1
    226e:	c8 01       	movw	r24, r16
    2270:	0e 94 82 13 	call	0x2704	; 0x2704 <__pack_f>
    2274:	68 96       	adiw	r28, 0x18	; 24
    2276:	ea e0       	ldi	r30, 0x0A	; 10
    2278:	0c 94 5c 25 	jmp	0x4ab8	; 0x4ab8 <__epilogue_restores__+0x10>

0000227c <__eqsf2>:
    227c:	a8 e1       	ldi	r26, 0x18	; 24
    227e:	b0 e0       	ldi	r27, 0x00	; 0
    2280:	e4 e4       	ldi	r30, 0x44	; 68
    2282:	f1 e1       	ldi	r31, 0x11	; 17
    2284:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <__prologue_saves__+0x18>
    2288:	69 83       	std	Y+1, r22	; 0x01
    228a:	7a 83       	std	Y+2, r23	; 0x02
    228c:	8b 83       	std	Y+3, r24	; 0x03
    228e:	9c 83       	std	Y+4, r25	; 0x04
    2290:	2d 83       	std	Y+5, r18	; 0x05
    2292:	3e 83       	std	Y+6, r19	; 0x06
    2294:	4f 83       	std	Y+7, r20	; 0x07
    2296:	58 87       	std	Y+8, r21	; 0x08
    2298:	8e 01       	movw	r16, r28
    229a:	07 5f       	subi	r16, 0xF7	; 247
    229c:	1f 4f       	sbci	r17, 0xFF	; 255
    229e:	ce 01       	movw	r24, r28
    22a0:	01 96       	adiw	r24, 0x01	; 1
    22a2:	b8 01       	movw	r22, r16
    22a4:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    22a8:	81 e1       	ldi	r24, 0x11	; 17
    22aa:	e8 2e       	mov	r14, r24
    22ac:	f1 2c       	mov	r15, r1
    22ae:	ec 0e       	add	r14, r28
    22b0:	fd 1e       	adc	r15, r29
    22b2:	ce 01       	movw	r24, r28
    22b4:	05 96       	adiw	r24, 0x05	; 5
    22b6:	b7 01       	movw	r22, r14
    22b8:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	82 30       	cpi	r24, 0x02	; 2
    22c0:	40 f0       	brcs	.+16     	; 0x22d2 <__eqsf2+0x56>
    22c2:	89 89       	ldd	r24, Y+17	; 0x11
    22c4:	82 30       	cpi	r24, 0x02	; 2
    22c6:	28 f0       	brcs	.+10     	; 0x22d2 <__eqsf2+0x56>
    22c8:	c8 01       	movw	r24, r16
    22ca:	b7 01       	movw	r22, r14
    22cc:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fpcmp_parts_f>
    22d0:	01 c0       	rjmp	.+2      	; 0x22d4 <__eqsf2+0x58>
    22d2:	81 e0       	ldi	r24, 0x01	; 1
    22d4:	68 96       	adiw	r28, 0x18	; 24
    22d6:	e6 e0       	ldi	r30, 0x06	; 6
    22d8:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__epilogue_restores__+0x18>

000022dc <__gtsf2>:
    22dc:	a8 e1       	ldi	r26, 0x18	; 24
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	e4 e7       	ldi	r30, 0x74	; 116
    22e2:	f1 e1       	ldi	r31, 0x11	; 17
    22e4:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <__prologue_saves__+0x18>
    22e8:	69 83       	std	Y+1, r22	; 0x01
    22ea:	7a 83       	std	Y+2, r23	; 0x02
    22ec:	8b 83       	std	Y+3, r24	; 0x03
    22ee:	9c 83       	std	Y+4, r25	; 0x04
    22f0:	2d 83       	std	Y+5, r18	; 0x05
    22f2:	3e 83       	std	Y+6, r19	; 0x06
    22f4:	4f 83       	std	Y+7, r20	; 0x07
    22f6:	58 87       	std	Y+8, r21	; 0x08
    22f8:	8e 01       	movw	r16, r28
    22fa:	07 5f       	subi	r16, 0xF7	; 247
    22fc:	1f 4f       	sbci	r17, 0xFF	; 255
    22fe:	ce 01       	movw	r24, r28
    2300:	01 96       	adiw	r24, 0x01	; 1
    2302:	b8 01       	movw	r22, r16
    2304:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    2308:	81 e1       	ldi	r24, 0x11	; 17
    230a:	e8 2e       	mov	r14, r24
    230c:	f1 2c       	mov	r15, r1
    230e:	ec 0e       	add	r14, r28
    2310:	fd 1e       	adc	r15, r29
    2312:	ce 01       	movw	r24, r28
    2314:	05 96       	adiw	r24, 0x05	; 5
    2316:	b7 01       	movw	r22, r14
    2318:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    231c:	89 85       	ldd	r24, Y+9	; 0x09
    231e:	82 30       	cpi	r24, 0x02	; 2
    2320:	40 f0       	brcs	.+16     	; 0x2332 <__gtsf2+0x56>
    2322:	89 89       	ldd	r24, Y+17	; 0x11
    2324:	82 30       	cpi	r24, 0x02	; 2
    2326:	28 f0       	brcs	.+10     	; 0x2332 <__gtsf2+0x56>
    2328:	c8 01       	movw	r24, r16
    232a:	b7 01       	movw	r22, r14
    232c:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fpcmp_parts_f>
    2330:	01 c0       	rjmp	.+2      	; 0x2334 <__gtsf2+0x58>
    2332:	8f ef       	ldi	r24, 0xFF	; 255
    2334:	68 96       	adiw	r28, 0x18	; 24
    2336:	e6 e0       	ldi	r30, 0x06	; 6
    2338:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__epilogue_restores__+0x18>

0000233c <__gesf2>:
    233c:	a8 e1       	ldi	r26, 0x18	; 24
    233e:	b0 e0       	ldi	r27, 0x00	; 0
    2340:	e4 ea       	ldi	r30, 0xA4	; 164
    2342:	f1 e1       	ldi	r31, 0x11	; 17
    2344:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <__prologue_saves__+0x18>
    2348:	69 83       	std	Y+1, r22	; 0x01
    234a:	7a 83       	std	Y+2, r23	; 0x02
    234c:	8b 83       	std	Y+3, r24	; 0x03
    234e:	9c 83       	std	Y+4, r25	; 0x04
    2350:	2d 83       	std	Y+5, r18	; 0x05
    2352:	3e 83       	std	Y+6, r19	; 0x06
    2354:	4f 83       	std	Y+7, r20	; 0x07
    2356:	58 87       	std	Y+8, r21	; 0x08
    2358:	8e 01       	movw	r16, r28
    235a:	07 5f       	subi	r16, 0xF7	; 247
    235c:	1f 4f       	sbci	r17, 0xFF	; 255
    235e:	ce 01       	movw	r24, r28
    2360:	01 96       	adiw	r24, 0x01	; 1
    2362:	b8 01       	movw	r22, r16
    2364:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    2368:	81 e1       	ldi	r24, 0x11	; 17
    236a:	e8 2e       	mov	r14, r24
    236c:	f1 2c       	mov	r15, r1
    236e:	ec 0e       	add	r14, r28
    2370:	fd 1e       	adc	r15, r29
    2372:	ce 01       	movw	r24, r28
    2374:	05 96       	adiw	r24, 0x05	; 5
    2376:	b7 01       	movw	r22, r14
    2378:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    237c:	89 85       	ldd	r24, Y+9	; 0x09
    237e:	82 30       	cpi	r24, 0x02	; 2
    2380:	40 f0       	brcs	.+16     	; 0x2392 <__gesf2+0x56>
    2382:	89 89       	ldd	r24, Y+17	; 0x11
    2384:	82 30       	cpi	r24, 0x02	; 2
    2386:	28 f0       	brcs	.+10     	; 0x2392 <__gesf2+0x56>
    2388:	c8 01       	movw	r24, r16
    238a:	b7 01       	movw	r22, r14
    238c:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fpcmp_parts_f>
    2390:	01 c0       	rjmp	.+2      	; 0x2394 <__gesf2+0x58>
    2392:	8f ef       	ldi	r24, 0xFF	; 255
    2394:	68 96       	adiw	r28, 0x18	; 24
    2396:	e6 e0       	ldi	r30, 0x06	; 6
    2398:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__epilogue_restores__+0x18>

0000239c <__ltsf2>:
    239c:	a8 e1       	ldi	r26, 0x18	; 24
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e4 ed       	ldi	r30, 0xD4	; 212
    23a2:	f1 e1       	ldi	r31, 0x11	; 17
    23a4:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <__prologue_saves__+0x18>
    23a8:	69 83       	std	Y+1, r22	; 0x01
    23aa:	7a 83       	std	Y+2, r23	; 0x02
    23ac:	8b 83       	std	Y+3, r24	; 0x03
    23ae:	9c 83       	std	Y+4, r25	; 0x04
    23b0:	2d 83       	std	Y+5, r18	; 0x05
    23b2:	3e 83       	std	Y+6, r19	; 0x06
    23b4:	4f 83       	std	Y+7, r20	; 0x07
    23b6:	58 87       	std	Y+8, r21	; 0x08
    23b8:	8e 01       	movw	r16, r28
    23ba:	07 5f       	subi	r16, 0xF7	; 247
    23bc:	1f 4f       	sbci	r17, 0xFF	; 255
    23be:	ce 01       	movw	r24, r28
    23c0:	01 96       	adiw	r24, 0x01	; 1
    23c2:	b8 01       	movw	r22, r16
    23c4:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    23c8:	81 e1       	ldi	r24, 0x11	; 17
    23ca:	e8 2e       	mov	r14, r24
    23cc:	f1 2c       	mov	r15, r1
    23ce:	ec 0e       	add	r14, r28
    23d0:	fd 1e       	adc	r15, r29
    23d2:	ce 01       	movw	r24, r28
    23d4:	05 96       	adiw	r24, 0x05	; 5
    23d6:	b7 01       	movw	r22, r14
    23d8:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    23dc:	89 85       	ldd	r24, Y+9	; 0x09
    23de:	82 30       	cpi	r24, 0x02	; 2
    23e0:	40 f0       	brcs	.+16     	; 0x23f2 <__ltsf2+0x56>
    23e2:	89 89       	ldd	r24, Y+17	; 0x11
    23e4:	82 30       	cpi	r24, 0x02	; 2
    23e6:	28 f0       	brcs	.+10     	; 0x23f2 <__ltsf2+0x56>
    23e8:	c8 01       	movw	r24, r16
    23ea:	b7 01       	movw	r22, r14
    23ec:	0e 94 b9 14 	call	0x2972	; 0x2972 <__fpcmp_parts_f>
    23f0:	01 c0       	rjmp	.+2      	; 0x23f4 <__ltsf2+0x58>
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	68 96       	adiw	r28, 0x18	; 24
    23f6:	e6 e0       	ldi	r30, 0x06	; 6
    23f8:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__epilogue_restores__+0x18>

000023fc <__floatsisf>:
    23fc:	a8 e0       	ldi	r26, 0x08	; 8
    23fe:	b0 e0       	ldi	r27, 0x00	; 0
    2400:	e4 e0       	ldi	r30, 0x04	; 4
    2402:	f2 e1       	ldi	r31, 0x12	; 18
    2404:	0c 94 44 25 	jmp	0x4a88	; 0x4a88 <__prologue_saves__+0x18>
    2408:	7b 01       	movw	r14, r22
    240a:	8c 01       	movw	r16, r24
    240c:	83 e0       	ldi	r24, 0x03	; 3
    240e:	89 83       	std	Y+1, r24	; 0x01
    2410:	d8 01       	movw	r26, r16
    2412:	c7 01       	movw	r24, r14
    2414:	88 27       	eor	r24, r24
    2416:	b7 fd       	sbrc	r27, 7
    2418:	83 95       	inc	r24
    241a:	99 27       	eor	r25, r25
    241c:	aa 27       	eor	r26, r26
    241e:	bb 27       	eor	r27, r27
    2420:	28 2f       	mov	r18, r24
    2422:	8a 83       	std	Y+2, r24	; 0x02
    2424:	e1 14       	cp	r14, r1
    2426:	f1 04       	cpc	r15, r1
    2428:	01 05       	cpc	r16, r1
    242a:	11 05       	cpc	r17, r1
    242c:	19 f4       	brne	.+6      	; 0x2434 <__floatsisf+0x38>
    242e:	82 e0       	ldi	r24, 0x02	; 2
    2430:	89 83       	std	Y+1, r24	; 0x01
    2432:	37 c0       	rjmp	.+110    	; 0x24a2 <__floatsisf+0xa6>
    2434:	8e e1       	ldi	r24, 0x1E	; 30
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	9c 83       	std	Y+4, r25	; 0x04
    243a:	8b 83       	std	Y+3, r24	; 0x03
    243c:	22 23       	and	r18, r18
    243e:	89 f0       	breq	.+34     	; 0x2462 <__floatsisf+0x66>
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	e8 16       	cp	r14, r24
    2444:	80 e0       	ldi	r24, 0x00	; 0
    2446:	f8 06       	cpc	r15, r24
    2448:	80 e0       	ldi	r24, 0x00	; 0
    244a:	08 07       	cpc	r16, r24
    244c:	80 e8       	ldi	r24, 0x80	; 128
    244e:	18 07       	cpc	r17, r24
    2450:	69 f1       	breq	.+90     	; 0x24ac <__floatsisf+0xb0>
    2452:	10 95       	com	r17
    2454:	00 95       	com	r16
    2456:	f0 94       	com	r15
    2458:	e0 94       	com	r14
    245a:	e1 1c       	adc	r14, r1
    245c:	f1 1c       	adc	r15, r1
    245e:	01 1d       	adc	r16, r1
    2460:	11 1d       	adc	r17, r1
    2462:	ed 82       	std	Y+5, r14	; 0x05
    2464:	fe 82       	std	Y+6, r15	; 0x06
    2466:	0f 83       	std	Y+7, r16	; 0x07
    2468:	18 87       	std	Y+8, r17	; 0x08
    246a:	c8 01       	movw	r24, r16
    246c:	b7 01       	movw	r22, r14
    246e:	0e 94 28 13 	call	0x2650	; 0x2650 <__clzsi2>
    2472:	9c 01       	movw	r18, r24
    2474:	21 50       	subi	r18, 0x01	; 1
    2476:	30 40       	sbci	r19, 0x00	; 0
    2478:	12 16       	cp	r1, r18
    247a:	13 06       	cpc	r1, r19
    247c:	94 f4       	brge	.+36     	; 0x24a2 <__floatsisf+0xa6>
    247e:	02 2e       	mov	r0, r18
    2480:	04 c0       	rjmp	.+8      	; 0x248a <__floatsisf+0x8e>
    2482:	ee 0c       	add	r14, r14
    2484:	ff 1c       	adc	r15, r15
    2486:	00 1f       	adc	r16, r16
    2488:	11 1f       	adc	r17, r17
    248a:	0a 94       	dec	r0
    248c:	d2 f7       	brpl	.-12     	; 0x2482 <__floatsisf+0x86>
    248e:	ed 82       	std	Y+5, r14	; 0x05
    2490:	fe 82       	std	Y+6, r15	; 0x06
    2492:	0f 83       	std	Y+7, r16	; 0x07
    2494:	18 87       	std	Y+8, r17	; 0x08
    2496:	8e e1       	ldi	r24, 0x1E	; 30
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	82 1b       	sub	r24, r18
    249c:	93 0b       	sbc	r25, r19
    249e:	9c 83       	std	Y+4, r25	; 0x04
    24a0:	8b 83       	std	Y+3, r24	; 0x03
    24a2:	ce 01       	movw	r24, r28
    24a4:	01 96       	adiw	r24, 0x01	; 1
    24a6:	0e 94 82 13 	call	0x2704	; 0x2704 <__pack_f>
    24aa:	04 c0       	rjmp	.+8      	; 0x24b4 <__floatsisf+0xb8>
    24ac:	60 e0       	ldi	r22, 0x00	; 0
    24ae:	70 e0       	ldi	r23, 0x00	; 0
    24b0:	80 e0       	ldi	r24, 0x00	; 0
    24b2:	9f ec       	ldi	r25, 0xCF	; 207
    24b4:	28 96       	adiw	r28, 0x08	; 8
    24b6:	e6 e0       	ldi	r30, 0x06	; 6
    24b8:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__epilogue_restores__+0x18>

000024bc <__fixsfsi>:
    24bc:	ac e0       	ldi	r26, 0x0C	; 12
    24be:	b0 e0       	ldi	r27, 0x00	; 0
    24c0:	e4 e6       	ldi	r30, 0x64	; 100
    24c2:	f2 e1       	ldi	r31, 0x12	; 18
    24c4:	0c 94 48 25 	jmp	0x4a90	; 0x4a90 <__prologue_saves__+0x20>
    24c8:	69 83       	std	Y+1, r22	; 0x01
    24ca:	7a 83       	std	Y+2, r23	; 0x02
    24cc:	8b 83       	std	Y+3, r24	; 0x03
    24ce:	9c 83       	std	Y+4, r25	; 0x04
    24d0:	ce 01       	movw	r24, r28
    24d2:	01 96       	adiw	r24, 0x01	; 1
    24d4:	be 01       	movw	r22, r28
    24d6:	6b 5f       	subi	r22, 0xFB	; 251
    24d8:	7f 4f       	sbci	r23, 0xFF	; 255
    24da:	0e 94 50 14 	call	0x28a0	; 0x28a0 <__unpack_f>
    24de:	8d 81       	ldd	r24, Y+5	; 0x05
    24e0:	82 30       	cpi	r24, 0x02	; 2
    24e2:	81 f1       	breq	.+96     	; 0x2544 <__fixsfsi+0x88>
    24e4:	82 30       	cpi	r24, 0x02	; 2
    24e6:	70 f1       	brcs	.+92     	; 0x2544 <__fixsfsi+0x88>
    24e8:	84 30       	cpi	r24, 0x04	; 4
    24ea:	21 f4       	brne	.+8      	; 0x24f4 <__fixsfsi+0x38>
    24ec:	8e 81       	ldd	r24, Y+6	; 0x06
    24ee:	88 23       	and	r24, r24
    24f0:	69 f1       	breq	.+90     	; 0x254c <__fixsfsi+0x90>
    24f2:	0a c0       	rjmp	.+20     	; 0x2508 <__fixsfsi+0x4c>
    24f4:	2f 81       	ldd	r18, Y+7	; 0x07
    24f6:	38 85       	ldd	r19, Y+8	; 0x08
    24f8:	37 fd       	sbrc	r19, 7
    24fa:	24 c0       	rjmp	.+72     	; 0x2544 <__fixsfsi+0x88>
    24fc:	6e 81       	ldd	r22, Y+6	; 0x06
    24fe:	2f 31       	cpi	r18, 0x1F	; 31
    2500:	31 05       	cpc	r19, r1
    2502:	3c f0       	brlt	.+14     	; 0x2512 <__fixsfsi+0x56>
    2504:	66 23       	and	r22, r22
    2506:	11 f1       	breq	.+68     	; 0x254c <__fixsfsi+0x90>
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	50 e8       	ldi	r21, 0x80	; 128
    2510:	21 c0       	rjmp	.+66     	; 0x2554 <__fixsfsi+0x98>
    2512:	8e e1       	ldi	r24, 0x1E	; 30
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	82 1b       	sub	r24, r18
    2518:	93 0b       	sbc	r25, r19
    251a:	29 85       	ldd	r18, Y+9	; 0x09
    251c:	3a 85       	ldd	r19, Y+10	; 0x0a
    251e:	4b 85       	ldd	r20, Y+11	; 0x0b
    2520:	5c 85       	ldd	r21, Y+12	; 0x0c
    2522:	04 c0       	rjmp	.+8      	; 0x252c <__fixsfsi+0x70>
    2524:	56 95       	lsr	r21
    2526:	47 95       	ror	r20
    2528:	37 95       	ror	r19
    252a:	27 95       	ror	r18
    252c:	8a 95       	dec	r24
    252e:	d2 f7       	brpl	.-12     	; 0x2524 <__fixsfsi+0x68>
    2530:	66 23       	and	r22, r22
    2532:	81 f0       	breq	.+32     	; 0x2554 <__fixsfsi+0x98>
    2534:	50 95       	com	r21
    2536:	40 95       	com	r20
    2538:	30 95       	com	r19
    253a:	21 95       	neg	r18
    253c:	3f 4f       	sbci	r19, 0xFF	; 255
    253e:	4f 4f       	sbci	r20, 0xFF	; 255
    2540:	5f 4f       	sbci	r21, 0xFF	; 255
    2542:	08 c0       	rjmp	.+16     	; 0x2554 <__fixsfsi+0x98>
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	a9 01       	movw	r20, r18
    254a:	04 c0       	rjmp	.+8      	; 0x2554 <__fixsfsi+0x98>
    254c:	2f ef       	ldi	r18, 0xFF	; 255
    254e:	3f ef       	ldi	r19, 0xFF	; 255
    2550:	4f ef       	ldi	r20, 0xFF	; 255
    2552:	5f e7       	ldi	r21, 0x7F	; 127
    2554:	b9 01       	movw	r22, r18
    2556:	ca 01       	movw	r24, r20
    2558:	2c 96       	adiw	r28, 0x0c	; 12
    255a:	e2 e0       	ldi	r30, 0x02	; 2
    255c:	0c 94 64 25 	jmp	0x4ac8	; 0x4ac8 <__epilogue_restores__+0x20>

00002560 <__floatunsisf>:
    2560:	a8 e0       	ldi	r26, 0x08	; 8
    2562:	b0 e0       	ldi	r27, 0x00	; 0
    2564:	e6 eb       	ldi	r30, 0xB6	; 182
    2566:	f2 e1       	ldi	r31, 0x12	; 18
    2568:	0c 94 42 25 	jmp	0x4a84	; 0x4a84 <__prologue_saves__+0x14>
    256c:	7b 01       	movw	r14, r22
    256e:	8c 01       	movw	r16, r24
    2570:	1a 82       	std	Y+2, r1	; 0x02
    2572:	61 15       	cp	r22, r1
    2574:	71 05       	cpc	r23, r1
    2576:	81 05       	cpc	r24, r1
    2578:	91 05       	cpc	r25, r1
    257a:	19 f4       	brne	.+6      	; 0x2582 <__floatunsisf+0x22>
    257c:	82 e0       	ldi	r24, 0x02	; 2
    257e:	89 83       	std	Y+1, r24	; 0x01
    2580:	5f c0       	rjmp	.+190    	; 0x2640 <__floatunsisf+0xe0>
    2582:	83 e0       	ldi	r24, 0x03	; 3
    2584:	89 83       	std	Y+1, r24	; 0x01
    2586:	8e e1       	ldi	r24, 0x1E	; 30
    2588:	c8 2e       	mov	r12, r24
    258a:	d1 2c       	mov	r13, r1
    258c:	dc 82       	std	Y+4, r13	; 0x04
    258e:	cb 82       	std	Y+3, r12	; 0x03
    2590:	ed 82       	std	Y+5, r14	; 0x05
    2592:	fe 82       	std	Y+6, r15	; 0x06
    2594:	0f 83       	std	Y+7, r16	; 0x07
    2596:	18 87       	std	Y+8, r17	; 0x08
    2598:	c8 01       	movw	r24, r16
    259a:	b7 01       	movw	r22, r14
    259c:	0e 94 28 13 	call	0x2650	; 0x2650 <__clzsi2>
    25a0:	fc 01       	movw	r30, r24
    25a2:	31 97       	sbiw	r30, 0x01	; 1
    25a4:	f7 ff       	sbrs	r31, 7
    25a6:	3a c0       	rjmp	.+116    	; 0x261c <__floatunsisf+0xbc>
    25a8:	aa 27       	eor	r26, r26
    25aa:	bb 27       	eor	r27, r27
    25ac:	ae 1b       	sub	r26, r30
    25ae:	bf 0b       	sbc	r27, r31
    25b0:	21 e0       	ldi	r18, 0x01	; 1
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	50 e0       	ldi	r21, 0x00	; 0
    25b8:	0a 2e       	mov	r0, r26
    25ba:	04 c0       	rjmp	.+8      	; 0x25c4 <__floatunsisf+0x64>
    25bc:	22 0f       	add	r18, r18
    25be:	33 1f       	adc	r19, r19
    25c0:	44 1f       	adc	r20, r20
    25c2:	55 1f       	adc	r21, r21
    25c4:	0a 94       	dec	r0
    25c6:	d2 f7       	brpl	.-12     	; 0x25bc <__floatunsisf+0x5c>
    25c8:	21 50       	subi	r18, 0x01	; 1
    25ca:	30 40       	sbci	r19, 0x00	; 0
    25cc:	40 40       	sbci	r20, 0x00	; 0
    25ce:	50 40       	sbci	r21, 0x00	; 0
    25d0:	2e 21       	and	r18, r14
    25d2:	3f 21       	and	r19, r15
    25d4:	40 23       	and	r20, r16
    25d6:	51 23       	and	r21, r17
    25d8:	61 e0       	ldi	r22, 0x01	; 1
    25da:	70 e0       	ldi	r23, 0x00	; 0
    25dc:	80 e0       	ldi	r24, 0x00	; 0
    25de:	90 e0       	ldi	r25, 0x00	; 0
    25e0:	21 15       	cp	r18, r1
    25e2:	31 05       	cpc	r19, r1
    25e4:	41 05       	cpc	r20, r1
    25e6:	51 05       	cpc	r21, r1
    25e8:	19 f4       	brne	.+6      	; 0x25f0 <__floatunsisf+0x90>
    25ea:	60 e0       	ldi	r22, 0x00	; 0
    25ec:	70 e0       	ldi	r23, 0x00	; 0
    25ee:	cb 01       	movw	r24, r22
    25f0:	04 c0       	rjmp	.+8      	; 0x25fa <__floatunsisf+0x9a>
    25f2:	16 95       	lsr	r17
    25f4:	07 95       	ror	r16
    25f6:	f7 94       	ror	r15
    25f8:	e7 94       	ror	r14
    25fa:	aa 95       	dec	r26
    25fc:	d2 f7       	brpl	.-12     	; 0x25f2 <__floatunsisf+0x92>
    25fe:	e6 2a       	or	r14, r22
    2600:	f7 2a       	or	r15, r23
    2602:	08 2b       	or	r16, r24
    2604:	19 2b       	or	r17, r25
    2606:	ed 82       	std	Y+5, r14	; 0x05
    2608:	fe 82       	std	Y+6, r15	; 0x06
    260a:	0f 83       	std	Y+7, r16	; 0x07
    260c:	18 87       	std	Y+8, r17	; 0x08
    260e:	8e e1       	ldi	r24, 0x1E	; 30
    2610:	90 e0       	ldi	r25, 0x00	; 0
    2612:	8e 1b       	sub	r24, r30
    2614:	9f 0b       	sbc	r25, r31
    2616:	9c 83       	std	Y+4, r25	; 0x04
    2618:	8b 83       	std	Y+3, r24	; 0x03
    261a:	12 c0       	rjmp	.+36     	; 0x2640 <__floatunsisf+0xe0>
    261c:	30 97       	sbiw	r30, 0x00	; 0
    261e:	81 f0       	breq	.+32     	; 0x2640 <__floatunsisf+0xe0>
    2620:	0e 2e       	mov	r0, r30
    2622:	04 c0       	rjmp	.+8      	; 0x262c <__floatunsisf+0xcc>
    2624:	ee 0c       	add	r14, r14
    2626:	ff 1c       	adc	r15, r15
    2628:	00 1f       	adc	r16, r16
    262a:	11 1f       	adc	r17, r17
    262c:	0a 94       	dec	r0
    262e:	d2 f7       	brpl	.-12     	; 0x2624 <__floatunsisf+0xc4>
    2630:	ed 82       	std	Y+5, r14	; 0x05
    2632:	fe 82       	std	Y+6, r15	; 0x06
    2634:	0f 83       	std	Y+7, r16	; 0x07
    2636:	18 87       	std	Y+8, r17	; 0x08
    2638:	ce 1a       	sub	r12, r30
    263a:	df 0a       	sbc	r13, r31
    263c:	dc 82       	std	Y+4, r13	; 0x04
    263e:	cb 82       	std	Y+3, r12	; 0x03
    2640:	ce 01       	movw	r24, r28
    2642:	01 96       	adiw	r24, 0x01	; 1
    2644:	0e 94 82 13 	call	0x2704	; 0x2704 <__pack_f>
    2648:	28 96       	adiw	r28, 0x08	; 8
    264a:	e8 e0       	ldi	r30, 0x08	; 8
    264c:	0c 94 5e 25 	jmp	0x4abc	; 0x4abc <__epilogue_restores__+0x14>

00002650 <__clzsi2>:
    2650:	af 92       	push	r10
    2652:	bf 92       	push	r11
    2654:	cf 92       	push	r12
    2656:	df 92       	push	r13
    2658:	ef 92       	push	r14
    265a:	ff 92       	push	r15
    265c:	0f 93       	push	r16
    265e:	1f 93       	push	r17
    2660:	7b 01       	movw	r14, r22
    2662:	8c 01       	movw	r16, r24
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	e8 16       	cp	r14, r24
    2668:	80 e0       	ldi	r24, 0x00	; 0
    266a:	f8 06       	cpc	r15, r24
    266c:	81 e0       	ldi	r24, 0x01	; 1
    266e:	08 07       	cpc	r16, r24
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	18 07       	cpc	r17, r24
    2674:	58 f4       	brcc	.+22     	; 0x268c <__clzsi2+0x3c>
    2676:	ef ef       	ldi	r30, 0xFF	; 255
    2678:	ee 16       	cp	r14, r30
    267a:	f1 04       	cpc	r15, r1
    267c:	01 05       	cpc	r16, r1
    267e:	11 05       	cpc	r17, r1
    2680:	09 f0       	breq	.+2      	; 0x2684 <__clzsi2+0x34>
    2682:	90 f4       	brcc	.+36     	; 0x26a8 <__clzsi2+0x58>
    2684:	80 e0       	ldi	r24, 0x00	; 0
    2686:	90 e0       	ldi	r25, 0x00	; 0
    2688:	dc 01       	movw	r26, r24
    268a:	17 c0       	rjmp	.+46     	; 0x26ba <__clzsi2+0x6a>
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	ef 16       	cp	r14, r31
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	ff 06       	cpc	r15, r31
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	0f 07       	cpc	r16, r31
    2698:	f1 e0       	ldi	r31, 0x01	; 1
    269a:	1f 07       	cpc	r17, r31
    269c:	50 f4       	brcc	.+20     	; 0x26b2 <__clzsi2+0x62>
    269e:	80 e1       	ldi	r24, 0x10	; 16
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	a0 e0       	ldi	r26, 0x00	; 0
    26a4:	b0 e0       	ldi	r27, 0x00	; 0
    26a6:	09 c0       	rjmp	.+18     	; 0x26ba <__clzsi2+0x6a>
    26a8:	88 e0       	ldi	r24, 0x08	; 8
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	a0 e0       	ldi	r26, 0x00	; 0
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	04 c0       	rjmp	.+8      	; 0x26ba <__clzsi2+0x6a>
    26b2:	88 e1       	ldi	r24, 0x18	; 24
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	a0 e0       	ldi	r26, 0x00	; 0
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	20 e2       	ldi	r18, 0x20	; 32
    26bc:	30 e0       	ldi	r19, 0x00	; 0
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	50 e0       	ldi	r21, 0x00	; 0
    26c2:	28 1b       	sub	r18, r24
    26c4:	39 0b       	sbc	r19, r25
    26c6:	4a 0b       	sbc	r20, r26
    26c8:	5b 0b       	sbc	r21, r27
    26ca:	57 01       	movw	r10, r14
    26cc:	68 01       	movw	r12, r16
    26ce:	04 c0       	rjmp	.+8      	; 0x26d8 <__clzsi2+0x88>
    26d0:	d6 94       	lsr	r13
    26d2:	c7 94       	ror	r12
    26d4:	b7 94       	ror	r11
    26d6:	a7 94       	ror	r10
    26d8:	8a 95       	dec	r24
    26da:	d2 f7       	brpl	.-12     	; 0x26d0 <__clzsi2+0x80>
    26dc:	d6 01       	movw	r26, r12
    26de:	c5 01       	movw	r24, r10
    26e0:	88 51       	subi	r24, 0x18	; 24
    26e2:	9e 4f       	sbci	r25, 0xFE	; 254
    26e4:	fc 01       	movw	r30, r24
    26e6:	80 81       	ld	r24, Z
    26e8:	28 1b       	sub	r18, r24
    26ea:	31 09       	sbc	r19, r1
    26ec:	41 09       	sbc	r20, r1
    26ee:	51 09       	sbc	r21, r1
    26f0:	c9 01       	movw	r24, r18
    26f2:	1f 91       	pop	r17
    26f4:	0f 91       	pop	r16
    26f6:	ff 90       	pop	r15
    26f8:	ef 90       	pop	r14
    26fa:	df 90       	pop	r13
    26fc:	cf 90       	pop	r12
    26fe:	bf 90       	pop	r11
    2700:	af 90       	pop	r10
    2702:	08 95       	ret

00002704 <__pack_f>:
    2704:	ef 92       	push	r14
    2706:	ff 92       	push	r15
    2708:	0f 93       	push	r16
    270a:	1f 93       	push	r17
    270c:	cf 93       	push	r28
    270e:	df 93       	push	r29
    2710:	fc 01       	movw	r30, r24
    2712:	24 81       	ldd	r18, Z+4	; 0x04
    2714:	35 81       	ldd	r19, Z+5	; 0x05
    2716:	46 81       	ldd	r20, Z+6	; 0x06
    2718:	57 81       	ldd	r21, Z+7	; 0x07
    271a:	61 81       	ldd	r22, Z+1	; 0x01
    271c:	80 81       	ld	r24, Z
    271e:	82 30       	cpi	r24, 0x02	; 2
    2720:	20 f4       	brcc	.+8      	; 0x272a <__pack_f+0x26>
    2722:	40 61       	ori	r20, 0x10	; 16
    2724:	ef ef       	ldi	r30, 0xFF	; 255
    2726:	f0 e0       	ldi	r31, 0x00	; 0
    2728:	a3 c0       	rjmp	.+326    	; 0x2870 <__pack_f+0x16c>
    272a:	84 30       	cpi	r24, 0x04	; 4
    272c:	09 f4       	brne	.+2      	; 0x2730 <__pack_f+0x2c>
    272e:	9b c0       	rjmp	.+310    	; 0x2866 <__pack_f+0x162>
    2730:	82 30       	cpi	r24, 0x02	; 2
    2732:	09 f4       	brne	.+2      	; 0x2736 <__pack_f+0x32>
    2734:	92 c0       	rjmp	.+292    	; 0x285a <__pack_f+0x156>
    2736:	21 15       	cp	r18, r1
    2738:	31 05       	cpc	r19, r1
    273a:	41 05       	cpc	r20, r1
    273c:	51 05       	cpc	r21, r1
    273e:	09 f4       	brne	.+2      	; 0x2742 <__pack_f+0x3e>
    2740:	8f c0       	rjmp	.+286    	; 0x2860 <__pack_f+0x15c>
    2742:	02 80       	ldd	r0, Z+2	; 0x02
    2744:	f3 81       	ldd	r31, Z+3	; 0x03
    2746:	e0 2d       	mov	r30, r0
    2748:	8f ef       	ldi	r24, 0xFF	; 255
    274a:	e2 38       	cpi	r30, 0x82	; 130
    274c:	f8 07       	cpc	r31, r24
    274e:	0c f0       	brlt	.+2      	; 0x2752 <__pack_f+0x4e>
    2750:	5a c0       	rjmp	.+180    	; 0x2806 <__pack_f+0x102>
    2752:	c2 e8       	ldi	r28, 0x82	; 130
    2754:	df ef       	ldi	r29, 0xFF	; 255
    2756:	ce 1b       	sub	r28, r30
    2758:	df 0b       	sbc	r29, r31
    275a:	ca 31       	cpi	r28, 0x1A	; 26
    275c:	d1 05       	cpc	r29, r1
    275e:	6c f5       	brge	.+90     	; 0x27ba <__pack_f+0xb6>
    2760:	79 01       	movw	r14, r18
    2762:	8a 01       	movw	r16, r20
    2764:	0c 2e       	mov	r0, r28
    2766:	04 c0       	rjmp	.+8      	; 0x2770 <__pack_f+0x6c>
    2768:	16 95       	lsr	r17
    276a:	07 95       	ror	r16
    276c:	f7 94       	ror	r15
    276e:	e7 94       	ror	r14
    2770:	0a 94       	dec	r0
    2772:	d2 f7       	brpl	.-12     	; 0x2768 <__pack_f+0x64>
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	a0 e0       	ldi	r26, 0x00	; 0
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	0c 2e       	mov	r0, r28
    277e:	04 c0       	rjmp	.+8      	; 0x2788 <__pack_f+0x84>
    2780:	88 0f       	add	r24, r24
    2782:	99 1f       	adc	r25, r25
    2784:	aa 1f       	adc	r26, r26
    2786:	bb 1f       	adc	r27, r27
    2788:	0a 94       	dec	r0
    278a:	d2 f7       	brpl	.-12     	; 0x2780 <__pack_f+0x7c>
    278c:	01 97       	sbiw	r24, 0x01	; 1
    278e:	a1 09       	sbc	r26, r1
    2790:	b1 09       	sbc	r27, r1
    2792:	82 23       	and	r24, r18
    2794:	93 23       	and	r25, r19
    2796:	a4 23       	and	r26, r20
    2798:	b5 23       	and	r27, r21
    279a:	21 e0       	ldi	r18, 0x01	; 1
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e0       	ldi	r20, 0x00	; 0
    27a0:	50 e0       	ldi	r21, 0x00	; 0
    27a2:	00 97       	sbiw	r24, 0x00	; 0
    27a4:	a1 05       	cpc	r26, r1
    27a6:	b1 05       	cpc	r27, r1
    27a8:	19 f4       	brne	.+6      	; 0x27b0 <__pack_f+0xac>
    27aa:	20 e0       	ldi	r18, 0x00	; 0
    27ac:	30 e0       	ldi	r19, 0x00	; 0
    27ae:	a9 01       	movw	r20, r18
    27b0:	2e 29       	or	r18, r14
    27b2:	3f 29       	or	r19, r15
    27b4:	40 2b       	or	r20, r16
    27b6:	51 2b       	or	r21, r17
    27b8:	03 c0       	rjmp	.+6      	; 0x27c0 <__pack_f+0xbc>
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	a9 01       	movw	r20, r18
    27c0:	da 01       	movw	r26, r20
    27c2:	c9 01       	movw	r24, r18
    27c4:	8f 77       	andi	r24, 0x7F	; 127
    27c6:	90 70       	andi	r25, 0x00	; 0
    27c8:	a0 70       	andi	r26, 0x00	; 0
    27ca:	b0 70       	andi	r27, 0x00	; 0
    27cc:	80 34       	cpi	r24, 0x40	; 64
    27ce:	91 05       	cpc	r25, r1
    27d0:	a1 05       	cpc	r26, r1
    27d2:	b1 05       	cpc	r27, r1
    27d4:	39 f4       	brne	.+14     	; 0x27e4 <__pack_f+0xe0>
    27d6:	27 ff       	sbrs	r18, 7
    27d8:	09 c0       	rjmp	.+18     	; 0x27ec <__pack_f+0xe8>
    27da:	20 5c       	subi	r18, 0xC0	; 192
    27dc:	3f 4f       	sbci	r19, 0xFF	; 255
    27de:	4f 4f       	sbci	r20, 0xFF	; 255
    27e0:	5f 4f       	sbci	r21, 0xFF	; 255
    27e2:	04 c0       	rjmp	.+8      	; 0x27ec <__pack_f+0xe8>
    27e4:	21 5c       	subi	r18, 0xC1	; 193
    27e6:	3f 4f       	sbci	r19, 0xFF	; 255
    27e8:	4f 4f       	sbci	r20, 0xFF	; 255
    27ea:	5f 4f       	sbci	r21, 0xFF	; 255
    27ec:	e1 e0       	ldi	r30, 0x01	; 1
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	20 30       	cpi	r18, 0x00	; 0
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	38 07       	cpc	r19, r24
    27f6:	80 e0       	ldi	r24, 0x00	; 0
    27f8:	48 07       	cpc	r20, r24
    27fa:	80 e4       	ldi	r24, 0x40	; 64
    27fc:	58 07       	cpc	r21, r24
    27fe:	28 f5       	brcc	.+74     	; 0x284a <__pack_f+0x146>
    2800:	e0 e0       	ldi	r30, 0x00	; 0
    2802:	f0 e0       	ldi	r31, 0x00	; 0
    2804:	22 c0       	rjmp	.+68     	; 0x284a <__pack_f+0x146>
    2806:	e0 38       	cpi	r30, 0x80	; 128
    2808:	f1 05       	cpc	r31, r1
    280a:	6c f5       	brge	.+90     	; 0x2866 <__pack_f+0x162>
    280c:	e1 58       	subi	r30, 0x81	; 129
    280e:	ff 4f       	sbci	r31, 0xFF	; 255
    2810:	da 01       	movw	r26, r20
    2812:	c9 01       	movw	r24, r18
    2814:	8f 77       	andi	r24, 0x7F	; 127
    2816:	90 70       	andi	r25, 0x00	; 0
    2818:	a0 70       	andi	r26, 0x00	; 0
    281a:	b0 70       	andi	r27, 0x00	; 0
    281c:	80 34       	cpi	r24, 0x40	; 64
    281e:	91 05       	cpc	r25, r1
    2820:	a1 05       	cpc	r26, r1
    2822:	b1 05       	cpc	r27, r1
    2824:	39 f4       	brne	.+14     	; 0x2834 <__pack_f+0x130>
    2826:	27 ff       	sbrs	r18, 7
    2828:	09 c0       	rjmp	.+18     	; 0x283c <__pack_f+0x138>
    282a:	20 5c       	subi	r18, 0xC0	; 192
    282c:	3f 4f       	sbci	r19, 0xFF	; 255
    282e:	4f 4f       	sbci	r20, 0xFF	; 255
    2830:	5f 4f       	sbci	r21, 0xFF	; 255
    2832:	04 c0       	rjmp	.+8      	; 0x283c <__pack_f+0x138>
    2834:	21 5c       	subi	r18, 0xC1	; 193
    2836:	3f 4f       	sbci	r19, 0xFF	; 255
    2838:	4f 4f       	sbci	r20, 0xFF	; 255
    283a:	5f 4f       	sbci	r21, 0xFF	; 255
    283c:	57 ff       	sbrs	r21, 7
    283e:	05 c0       	rjmp	.+10     	; 0x284a <__pack_f+0x146>
    2840:	56 95       	lsr	r21
    2842:	47 95       	ror	r20
    2844:	37 95       	ror	r19
    2846:	27 95       	ror	r18
    2848:	31 96       	adiw	r30, 0x01	; 1
    284a:	87 e0       	ldi	r24, 0x07	; 7
    284c:	56 95       	lsr	r21
    284e:	47 95       	ror	r20
    2850:	37 95       	ror	r19
    2852:	27 95       	ror	r18
    2854:	8a 95       	dec	r24
    2856:	d1 f7       	brne	.-12     	; 0x284c <__pack_f+0x148>
    2858:	0b c0       	rjmp	.+22     	; 0x2870 <__pack_f+0x16c>
    285a:	e0 e0       	ldi	r30, 0x00	; 0
    285c:	f0 e0       	ldi	r31, 0x00	; 0
    285e:	05 c0       	rjmp	.+10     	; 0x286a <__pack_f+0x166>
    2860:	e0 e0       	ldi	r30, 0x00	; 0
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	05 c0       	rjmp	.+10     	; 0x2870 <__pack_f+0x16c>
    2866:	ef ef       	ldi	r30, 0xFF	; 255
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	30 e0       	ldi	r19, 0x00	; 0
    286e:	a9 01       	movw	r20, r18
    2870:	8e 2f       	mov	r24, r30
    2872:	87 95       	ror	r24
    2874:	88 27       	eor	r24, r24
    2876:	87 95       	ror	r24
    2878:	94 2f       	mov	r25, r20
    287a:	9f 77       	andi	r25, 0x7F	; 127
    287c:	67 95       	ror	r22
    287e:	66 27       	eor	r22, r22
    2880:	67 95       	ror	r22
    2882:	e6 95       	lsr	r30
    2884:	e2 2e       	mov	r14, r18
    2886:	a9 2f       	mov	r26, r25
    2888:	a8 2b       	or	r26, r24
    288a:	fe 2f       	mov	r31, r30
    288c:	f6 2b       	or	r31, r22
    288e:	62 2f       	mov	r22, r18
    2890:	73 2f       	mov	r23, r19
    2892:	8a 2f       	mov	r24, r26
    2894:	9f 2f       	mov	r25, r31
    2896:	cd b7       	in	r28, 0x3d	; 61
    2898:	de b7       	in	r29, 0x3e	; 62
    289a:	e6 e0       	ldi	r30, 0x06	; 6
    289c:	0c 94 60 25 	jmp	0x4ac0	; 0x4ac0 <__epilogue_restores__+0x18>

000028a0 <__unpack_f>:
    28a0:	dc 01       	movw	r26, r24
    28a2:	fb 01       	movw	r30, r22
    28a4:	2c 91       	ld	r18, X
    28a6:	11 96       	adiw	r26, 0x01	; 1
    28a8:	3c 91       	ld	r19, X
    28aa:	11 97       	sbiw	r26, 0x01	; 1
    28ac:	12 96       	adiw	r26, 0x02	; 2
    28ae:	8c 91       	ld	r24, X
    28b0:	12 97       	sbiw	r26, 0x02	; 2
    28b2:	48 2f       	mov	r20, r24
    28b4:	4f 77       	andi	r20, 0x7F	; 127
    28b6:	50 e0       	ldi	r21, 0x00	; 0
    28b8:	98 2f       	mov	r25, r24
    28ba:	99 1f       	adc	r25, r25
    28bc:	99 27       	eor	r25, r25
    28be:	99 1f       	adc	r25, r25
    28c0:	13 96       	adiw	r26, 0x03	; 3
    28c2:	6c 91       	ld	r22, X
    28c4:	13 97       	sbiw	r26, 0x03	; 3
    28c6:	86 2f       	mov	r24, r22
    28c8:	88 0f       	add	r24, r24
    28ca:	89 2b       	or	r24, r25
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	66 1f       	adc	r22, r22
    28d0:	66 27       	eor	r22, r22
    28d2:	66 1f       	adc	r22, r22
    28d4:	61 83       	std	Z+1, r22	; 0x01
    28d6:	00 97       	sbiw	r24, 0x00	; 0
    28d8:	39 f5       	brne	.+78     	; 0x2928 <__unpack_f+0x88>
    28da:	21 15       	cp	r18, r1
    28dc:	31 05       	cpc	r19, r1
    28de:	41 05       	cpc	r20, r1
    28e0:	51 05       	cpc	r21, r1
    28e2:	11 f4       	brne	.+4      	; 0x28e8 <__unpack_f+0x48>
    28e4:	82 e0       	ldi	r24, 0x02	; 2
    28e6:	29 c0       	rjmp	.+82     	; 0x293a <__unpack_f+0x9a>
    28e8:	82 e8       	ldi	r24, 0x82	; 130
    28ea:	9f ef       	ldi	r25, 0xFF	; 255
    28ec:	93 83       	std	Z+3, r25	; 0x03
    28ee:	82 83       	std	Z+2, r24	; 0x02
    28f0:	67 e0       	ldi	r22, 0x07	; 7
    28f2:	22 0f       	add	r18, r18
    28f4:	33 1f       	adc	r19, r19
    28f6:	44 1f       	adc	r20, r20
    28f8:	55 1f       	adc	r21, r21
    28fa:	6a 95       	dec	r22
    28fc:	d1 f7       	brne	.-12     	; 0x28f2 <__unpack_f+0x52>
    28fe:	83 e0       	ldi	r24, 0x03	; 3
    2900:	80 83       	st	Z, r24
    2902:	09 c0       	rjmp	.+18     	; 0x2916 <__unpack_f+0x76>
    2904:	22 0f       	add	r18, r18
    2906:	33 1f       	adc	r19, r19
    2908:	44 1f       	adc	r20, r20
    290a:	55 1f       	adc	r21, r21
    290c:	82 81       	ldd	r24, Z+2	; 0x02
    290e:	93 81       	ldd	r25, Z+3	; 0x03
    2910:	01 97       	sbiw	r24, 0x01	; 1
    2912:	93 83       	std	Z+3, r25	; 0x03
    2914:	82 83       	std	Z+2, r24	; 0x02
    2916:	20 30       	cpi	r18, 0x00	; 0
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	38 07       	cpc	r19, r24
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	48 07       	cpc	r20, r24
    2920:	80 e4       	ldi	r24, 0x40	; 64
    2922:	58 07       	cpc	r21, r24
    2924:	78 f3       	brcs	.-34     	; 0x2904 <__unpack_f+0x64>
    2926:	20 c0       	rjmp	.+64     	; 0x2968 <__unpack_f+0xc8>
    2928:	8f 3f       	cpi	r24, 0xFF	; 255
    292a:	91 05       	cpc	r25, r1
    292c:	79 f4       	brne	.+30     	; 0x294c <__unpack_f+0xac>
    292e:	21 15       	cp	r18, r1
    2930:	31 05       	cpc	r19, r1
    2932:	41 05       	cpc	r20, r1
    2934:	51 05       	cpc	r21, r1
    2936:	19 f4       	brne	.+6      	; 0x293e <__unpack_f+0x9e>
    2938:	84 e0       	ldi	r24, 0x04	; 4
    293a:	80 83       	st	Z, r24
    293c:	08 95       	ret
    293e:	44 ff       	sbrs	r20, 4
    2940:	03 c0       	rjmp	.+6      	; 0x2948 <__unpack_f+0xa8>
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	80 83       	st	Z, r24
    2946:	10 c0       	rjmp	.+32     	; 0x2968 <__unpack_f+0xc8>
    2948:	10 82       	st	Z, r1
    294a:	0e c0       	rjmp	.+28     	; 0x2968 <__unpack_f+0xc8>
    294c:	8f 57       	subi	r24, 0x7F	; 127
    294e:	90 40       	sbci	r25, 0x00	; 0
    2950:	93 83       	std	Z+3, r25	; 0x03
    2952:	82 83       	std	Z+2, r24	; 0x02
    2954:	83 e0       	ldi	r24, 0x03	; 3
    2956:	80 83       	st	Z, r24
    2958:	87 e0       	ldi	r24, 0x07	; 7
    295a:	22 0f       	add	r18, r18
    295c:	33 1f       	adc	r19, r19
    295e:	44 1f       	adc	r20, r20
    2960:	55 1f       	adc	r21, r21
    2962:	8a 95       	dec	r24
    2964:	d1 f7       	brne	.-12     	; 0x295a <__unpack_f+0xba>
    2966:	50 64       	ori	r21, 0x40	; 64
    2968:	24 83       	std	Z+4, r18	; 0x04
    296a:	35 83       	std	Z+5, r19	; 0x05
    296c:	46 83       	std	Z+6, r20	; 0x06
    296e:	57 83       	std	Z+7, r21	; 0x07
    2970:	08 95       	ret

00002972 <__fpcmp_parts_f>:
    2972:	fc 01       	movw	r30, r24
    2974:	db 01       	movw	r26, r22
    2976:	90 81       	ld	r25, Z
    2978:	92 30       	cpi	r25, 0x02	; 2
    297a:	08 f4       	brcc	.+2      	; 0x297e <__fpcmp_parts_f+0xc>
    297c:	49 c0       	rjmp	.+146    	; 0x2a10 <__fpcmp_parts_f+0x9e>
    297e:	8c 91       	ld	r24, X
    2980:	82 30       	cpi	r24, 0x02	; 2
    2982:	08 f4       	brcc	.+2      	; 0x2986 <__fpcmp_parts_f+0x14>
    2984:	45 c0       	rjmp	.+138    	; 0x2a10 <__fpcmp_parts_f+0x9e>
    2986:	94 30       	cpi	r25, 0x04	; 4
    2988:	51 f4       	brne	.+20     	; 0x299e <__fpcmp_parts_f+0x2c>
    298a:	61 81       	ldd	r22, Z+1	; 0x01
    298c:	84 30       	cpi	r24, 0x04	; 4
    298e:	b1 f5       	brne	.+108    	; 0x29fc <__fpcmp_parts_f+0x8a>
    2990:	11 96       	adiw	r26, 0x01	; 1
    2992:	2c 91       	ld	r18, X
    2994:	11 97       	sbiw	r26, 0x01	; 1
    2996:	30 e0       	ldi	r19, 0x00	; 0
    2998:	26 1b       	sub	r18, r22
    299a:	31 09       	sbc	r19, r1
    299c:	41 c0       	rjmp	.+130    	; 0x2a20 <__fpcmp_parts_f+0xae>
    299e:	84 30       	cpi	r24, 0x04	; 4
    29a0:	21 f0       	breq	.+8      	; 0x29aa <__fpcmp_parts_f+0x38>
    29a2:	92 30       	cpi	r25, 0x02	; 2
    29a4:	41 f4       	brne	.+16     	; 0x29b6 <__fpcmp_parts_f+0x44>
    29a6:	82 30       	cpi	r24, 0x02	; 2
    29a8:	b1 f1       	breq	.+108    	; 0x2a16 <__fpcmp_parts_f+0xa4>
    29aa:	11 96       	adiw	r26, 0x01	; 1
    29ac:	8c 91       	ld	r24, X
    29ae:	11 97       	sbiw	r26, 0x01	; 1
    29b0:	88 23       	and	r24, r24
    29b2:	a1 f1       	breq	.+104    	; 0x2a1c <__fpcmp_parts_f+0xaa>
    29b4:	2d c0       	rjmp	.+90     	; 0x2a10 <__fpcmp_parts_f+0x9e>
    29b6:	61 81       	ldd	r22, Z+1	; 0x01
    29b8:	82 30       	cpi	r24, 0x02	; 2
    29ba:	01 f1       	breq	.+64     	; 0x29fc <__fpcmp_parts_f+0x8a>
    29bc:	11 96       	adiw	r26, 0x01	; 1
    29be:	8c 91       	ld	r24, X
    29c0:	11 97       	sbiw	r26, 0x01	; 1
    29c2:	68 17       	cp	r22, r24
    29c4:	d9 f4       	brne	.+54     	; 0x29fc <__fpcmp_parts_f+0x8a>
    29c6:	22 81       	ldd	r18, Z+2	; 0x02
    29c8:	33 81       	ldd	r19, Z+3	; 0x03
    29ca:	12 96       	adiw	r26, 0x02	; 2
    29cc:	8d 91       	ld	r24, X+
    29ce:	9c 91       	ld	r25, X
    29d0:	13 97       	sbiw	r26, 0x03	; 3
    29d2:	82 17       	cp	r24, r18
    29d4:	93 07       	cpc	r25, r19
    29d6:	94 f0       	brlt	.+36     	; 0x29fc <__fpcmp_parts_f+0x8a>
    29d8:	28 17       	cp	r18, r24
    29da:	39 07       	cpc	r19, r25
    29dc:	bc f0       	brlt	.+46     	; 0x2a0c <__fpcmp_parts_f+0x9a>
    29de:	24 81       	ldd	r18, Z+4	; 0x04
    29e0:	35 81       	ldd	r19, Z+5	; 0x05
    29e2:	46 81       	ldd	r20, Z+6	; 0x06
    29e4:	57 81       	ldd	r21, Z+7	; 0x07
    29e6:	14 96       	adiw	r26, 0x04	; 4
    29e8:	8d 91       	ld	r24, X+
    29ea:	9d 91       	ld	r25, X+
    29ec:	0d 90       	ld	r0, X+
    29ee:	bc 91       	ld	r27, X
    29f0:	a0 2d       	mov	r26, r0
    29f2:	82 17       	cp	r24, r18
    29f4:	93 07       	cpc	r25, r19
    29f6:	a4 07       	cpc	r26, r20
    29f8:	b5 07       	cpc	r27, r21
    29fa:	18 f4       	brcc	.+6      	; 0x2a02 <__fpcmp_parts_f+0x90>
    29fc:	66 23       	and	r22, r22
    29fe:	41 f0       	breq	.+16     	; 0x2a10 <__fpcmp_parts_f+0x9e>
    2a00:	0d c0       	rjmp	.+26     	; 0x2a1c <__fpcmp_parts_f+0xaa>
    2a02:	28 17       	cp	r18, r24
    2a04:	39 07       	cpc	r19, r25
    2a06:	4a 07       	cpc	r20, r26
    2a08:	5b 07       	cpc	r21, r27
    2a0a:	28 f4       	brcc	.+10     	; 0x2a16 <__fpcmp_parts_f+0xa4>
    2a0c:	66 23       	and	r22, r22
    2a0e:	31 f0       	breq	.+12     	; 0x2a1c <__fpcmp_parts_f+0xaa>
    2a10:	21 e0       	ldi	r18, 0x01	; 1
    2a12:	30 e0       	ldi	r19, 0x00	; 0
    2a14:	05 c0       	rjmp	.+10     	; 0x2a20 <__fpcmp_parts_f+0xae>
    2a16:	20 e0       	ldi	r18, 0x00	; 0
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	02 c0       	rjmp	.+4      	; 0x2a20 <__fpcmp_parts_f+0xae>
    2a1c:	2f ef       	ldi	r18, 0xFF	; 255
    2a1e:	3f ef       	ldi	r19, 0xFF	; 255
    2a20:	c9 01       	movw	r24, r18
    2a22:	08 95       	ret

00002a24 <analogReference>:
    2a24:	80 93 ee 02 	sts	0x02EE, r24
    2a28:	08 95       	ret

00002a2a <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2a2a:	8e 30       	cpi	r24, 0x0E	; 14
    2a2c:	08 f0       	brcs	.+2      	; 0x2a30 <analogRead+0x6>
    2a2e:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2a30:	87 70       	andi	r24, 0x07	; 7
    2a32:	90 91 ee 02 	lds	r25, 0x02EE
    2a36:	92 95       	swap	r25
    2a38:	99 0f       	add	r25, r25
    2a3a:	99 0f       	add	r25, r25
    2a3c:	90 7c       	andi	r25, 0xC0	; 192
    2a3e:	98 2b       	or	r25, r24
    2a40:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2a44:	80 91 7a 00 	lds	r24, 0x007A
    2a48:	80 64       	ori	r24, 0x40	; 64
    2a4a:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2a4e:	80 91 7a 00 	lds	r24, 0x007A
    2a52:	86 fd       	sbrc	r24, 6
    2a54:	fc cf       	rjmp	.-8      	; 0x2a4e <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2a56:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    2a5a:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2a5e:	93 2f       	mov	r25, r19
    2a60:	80 e0       	ldi	r24, 0x00	; 0
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	28 2b       	or	r18, r24
    2a66:	39 2b       	or	r19, r25
}
    2a68:	c9 01       	movw	r24, r18
    2a6a:	08 95       	ret

00002a6c <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2a6c:	1f 93       	push	r17
    2a6e:	cf 93       	push	r28
    2a70:	df 93       	push	r29
    2a72:	18 2f       	mov	r17, r24
    2a74:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2a76:	61 e0       	ldi	r22, 0x01	; 1
    2a78:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <pinMode>
	if (val == 0)
    2a7c:	20 97       	sbiw	r28, 0x00	; 0
    2a7e:	09 f4       	brne	.+2      	; 0x2a82 <analogWrite+0x16>
    2a80:	4a c0       	rjmp	.+148    	; 0x2b16 <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    2a82:	cf 3f       	cpi	r28, 0xFF	; 255
    2a84:	d1 05       	cpc	r29, r1
    2a86:	09 f4       	brne	.+2      	; 0x2a8a <analogWrite+0x1e>
    2a88:	49 c0       	rjmp	.+146    	; 0x2b1c <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2a8a:	e1 2f       	mov	r30, r17
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	e2 55       	subi	r30, 0x52	; 82
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	e4 91       	lpm	r30, Z+
    2a94:	e3 30       	cpi	r30, 0x03	; 3
    2a96:	c1 f0       	breq	.+48     	; 0x2ac8 <analogWrite+0x5c>
    2a98:	e4 30       	cpi	r30, 0x04	; 4
    2a9a:	28 f4       	brcc	.+10     	; 0x2aa6 <analogWrite+0x3a>
    2a9c:	e1 30       	cpi	r30, 0x01	; 1
    2a9e:	51 f0       	breq	.+20     	; 0x2ab4 <analogWrite+0x48>
    2aa0:	e2 30       	cpi	r30, 0x02	; 2
    2aa2:	b1 f5       	brne	.+108    	; 0x2b10 <analogWrite+0xa4>
    2aa4:	0c c0       	rjmp	.+24     	; 0x2abe <analogWrite+0x52>
    2aa6:	e6 30       	cpi	r30, 0x06	; 6
    2aa8:	19 f1       	breq	.+70     	; 0x2af0 <analogWrite+0x84>
    2aaa:	e7 30       	cpi	r30, 0x07	; 7
    2aac:	49 f1       	breq	.+82     	; 0x2b00 <analogWrite+0x94>
    2aae:	e4 30       	cpi	r30, 0x04	; 4
    2ab0:	79 f5       	brne	.+94     	; 0x2b10 <analogWrite+0xa4>
    2ab2:	14 c0       	rjmp	.+40     	; 0x2adc <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2ab4:	84 b5       	in	r24, 0x24	; 36
    2ab6:	80 68       	ori	r24, 0x80	; 128
    2ab8:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2aba:	c7 bd       	out	0x27, r28	; 39
				break;
    2abc:	33 c0       	rjmp	.+102    	; 0x2b24 <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2abe:	84 b5       	in	r24, 0x24	; 36
    2ac0:	80 62       	ori	r24, 0x20	; 32
    2ac2:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2ac4:	c8 bd       	out	0x28, r28	; 40
				break;
    2ac6:	2e c0       	rjmp	.+92     	; 0x2b24 <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2ac8:	80 91 80 00 	lds	r24, 0x0080
    2acc:	80 68       	ori	r24, 0x80	; 128
    2ace:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    2ad2:	d0 93 89 00 	sts	0x0089, r29
    2ad6:	c0 93 88 00 	sts	0x0088, r28
				break;
    2ada:	24 c0       	rjmp	.+72     	; 0x2b24 <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2adc:	80 91 80 00 	lds	r24, 0x0080
    2ae0:	80 62       	ori	r24, 0x20	; 32
    2ae2:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    2ae6:	d0 93 8b 00 	sts	0x008B, r29
    2aea:	c0 93 8a 00 	sts	0x008A, r28
				break;
    2aee:	1a c0       	rjmp	.+52     	; 0x2b24 <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2af0:	80 91 b0 00 	lds	r24, 0x00B0
    2af4:	80 68       	ori	r24, 0x80	; 128
    2af6:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    2afa:	c0 93 b3 00 	sts	0x00B3, r28
				break;
    2afe:	12 c0       	rjmp	.+36     	; 0x2b24 <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2b00:	80 91 b0 00 	lds	r24, 0x00B0
    2b04:	80 62       	ori	r24, 0x20	; 32
    2b06:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    2b0a:	c0 93 b4 00 	sts	0x00B4, r28
				break;
    2b0e:	0a c0       	rjmp	.+20     	; 0x2b24 <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2b10:	c0 38       	cpi	r28, 0x80	; 128
    2b12:	d1 05       	cpc	r29, r1
    2b14:	1c f4       	brge	.+6      	; 0x2b1c <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    2b16:	81 2f       	mov	r24, r17
    2b18:	60 e0       	ldi	r22, 0x00	; 0
    2b1a:	02 c0       	rjmp	.+4      	; 0x2b20 <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    2b1c:	81 2f       	mov	r24, r17
    2b1e:	61 e0       	ldi	r22, 0x01	; 1
    2b20:	0e 94 cf 16 	call	0x2d9e	; 0x2d9e <digitalWrite>
				}
		}
	}
}
    2b24:	df 91       	pop	r29
    2b26:	cf 91       	pop	r28
    2b28:	1f 91       	pop	r17
    2b2a:	08 95       	ret

00002b2c <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    2b2c:	1f 92       	push	r1
    2b2e:	0f 92       	push	r0
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	0f 92       	push	r0
    2b34:	11 24       	eor	r1, r1
    2b36:	2f 93       	push	r18
    2b38:	3f 93       	push	r19
    2b3a:	8f 93       	push	r24
    2b3c:	9f 93       	push	r25
    2b3e:	af 93       	push	r26
    2b40:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2b42:	80 91 df 03 	lds	r24, 0x03DF
    2b46:	90 91 e0 03 	lds	r25, 0x03E0
    2b4a:	a0 91 e1 03 	lds	r26, 0x03E1
    2b4e:	b0 91 e2 03 	lds	r27, 0x03E2
	unsigned char f = timer0_fract;
    2b52:	30 91 e3 03 	lds	r19, 0x03E3

	m += MILLIS_INC;
    2b56:	01 96       	adiw	r24, 0x01	; 1
    2b58:	a1 1d       	adc	r26, r1
    2b5a:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    2b5c:	23 2f       	mov	r18, r19
    2b5e:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2b60:	2d 37       	cpi	r18, 0x7D	; 125
    2b62:	20 f0       	brcs	.+8      	; 0x2b6c <__vector_16+0x40>
		f -= FRACT_MAX;
    2b64:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    2b66:	01 96       	adiw	r24, 0x01	; 1
    2b68:	a1 1d       	adc	r26, r1
    2b6a:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2b6c:	20 93 e3 03 	sts	0x03E3, r18
	timer0_millis = m;
    2b70:	80 93 df 03 	sts	0x03DF, r24
    2b74:	90 93 e0 03 	sts	0x03E0, r25
    2b78:	a0 93 e1 03 	sts	0x03E1, r26
    2b7c:	b0 93 e2 03 	sts	0x03E2, r27
	timer0_overflow_count++;
    2b80:	80 91 db 03 	lds	r24, 0x03DB
    2b84:	90 91 dc 03 	lds	r25, 0x03DC
    2b88:	a0 91 dd 03 	lds	r26, 0x03DD
    2b8c:	b0 91 de 03 	lds	r27, 0x03DE
    2b90:	01 96       	adiw	r24, 0x01	; 1
    2b92:	a1 1d       	adc	r26, r1
    2b94:	b1 1d       	adc	r27, r1
    2b96:	80 93 db 03 	sts	0x03DB, r24
    2b9a:	90 93 dc 03 	sts	0x03DC, r25
    2b9e:	a0 93 dd 03 	sts	0x03DD, r26
    2ba2:	b0 93 de 03 	sts	0x03DE, r27
}
    2ba6:	bf 91       	pop	r27
    2ba8:	af 91       	pop	r26
    2baa:	9f 91       	pop	r25
    2bac:	8f 91       	pop	r24
    2bae:	3f 91       	pop	r19
    2bb0:	2f 91       	pop	r18
    2bb2:	0f 90       	pop	r0
    2bb4:	0f be       	out	0x3f, r0	; 63
    2bb6:	0f 90       	pop	r0
    2bb8:	1f 90       	pop	r1
    2bba:	18 95       	reti

00002bbc <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2bbc:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2bbe:	f8 94       	cli
	m = timer0_millis;
    2bc0:	20 91 df 03 	lds	r18, 0x03DF
    2bc4:	30 91 e0 03 	lds	r19, 0x03E0
    2bc8:	40 91 e1 03 	lds	r20, 0x03E1
    2bcc:	50 91 e2 03 	lds	r21, 0x03E2
	SREG = oldSREG;
    2bd0:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    2bd2:	b9 01       	movw	r22, r18
    2bd4:	ca 01       	movw	r24, r20
    2bd6:	08 95       	ret

00002bd8 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2bd8:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    2bda:	f8 94       	cli
	m = timer0_overflow_count;
    2bdc:	20 91 db 03 	lds	r18, 0x03DB
    2be0:	30 91 dc 03 	lds	r19, 0x03DC
    2be4:	40 91 dd 03 	lds	r20, 0x03DD
    2be8:	50 91 de 03 	lds	r21, 0x03DE
#if defined(TCNT0)
	t = TCNT0;
    2bec:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2bee:	a8 9b       	sbis	0x15, 0	; 21
    2bf0:	06 c0       	rjmp	.+12     	; 0x2bfe <micros+0x26>
    2bf2:	8f 3f       	cpi	r24, 0xFF	; 255
    2bf4:	21 f0       	breq	.+8      	; 0x2bfe <micros+0x26>
		m++;
    2bf6:	2f 5f       	subi	r18, 0xFF	; 255
    2bf8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bfa:	4f 4f       	sbci	r20, 0xFF	; 255
    2bfc:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2bfe:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2c00:	54 2f       	mov	r21, r20
    2c02:	43 2f       	mov	r20, r19
    2c04:	32 2f       	mov	r19, r18
    2c06:	22 27       	eor	r18, r18
    2c08:	28 0f       	add	r18, r24
    2c0a:	31 1d       	adc	r19, r1
    2c0c:	41 1d       	adc	r20, r1
    2c0e:	51 1d       	adc	r21, r1
    2c10:	82 e0       	ldi	r24, 0x02	; 2
    2c12:	22 0f       	add	r18, r18
    2c14:	33 1f       	adc	r19, r19
    2c16:	44 1f       	adc	r20, r20
    2c18:	55 1f       	adc	r21, r21
    2c1a:	8a 95       	dec	r24
    2c1c:	d1 f7       	brne	.-12     	; 0x2c12 <micros+0x3a>
}
    2c1e:	b9 01       	movw	r22, r18
    2c20:	ca 01       	movw	r24, r20
    2c22:	08 95       	ret

00002c24 <delay>:

void delay(unsigned long ms)
{
    2c24:	ef 92       	push	r14
    2c26:	ff 92       	push	r15
    2c28:	0f 93       	push	r16
    2c2a:	1f 93       	push	r17
    2c2c:	cf 93       	push	r28
    2c2e:	df 93       	push	r29
    2c30:	7b 01       	movw	r14, r22
    2c32:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    2c34:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <micros>
    2c38:	eb 01       	movw	r28, r22

	while (ms > 0) {
    2c3a:	0f c0       	rjmp	.+30     	; 0x2c5a <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
    2c3c:	0e 94 ec 15 	call	0x2bd8	; 0x2bd8 <micros>
    2c40:	6c 1b       	sub	r22, r28
    2c42:	7d 0b       	sbc	r23, r29
    2c44:	83 e0       	ldi	r24, 0x03	; 3
    2c46:	68 3e       	cpi	r22, 0xE8	; 232
    2c48:	78 07       	cpc	r23, r24
    2c4a:	38 f0       	brcs	.+14     	; 0x2c5a <delay+0x36>
			ms--;
    2c4c:	08 94       	sec
    2c4e:	e1 08       	sbc	r14, r1
    2c50:	f1 08       	sbc	r15, r1
    2c52:	01 09       	sbc	r16, r1
    2c54:	11 09       	sbc	r17, r1
			start += 1000;
    2c56:	c8 51       	subi	r28, 0x18	; 24
    2c58:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    2c5a:	e1 14       	cp	r14, r1
    2c5c:	f1 04       	cpc	r15, r1
    2c5e:	01 05       	cpc	r16, r1
    2c60:	11 05       	cpc	r17, r1
    2c62:	61 f7       	brne	.-40     	; 0x2c3c <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	1f 91       	pop	r17
    2c6a:	0f 91       	pop	r16
    2c6c:	ff 90       	pop	r15
    2c6e:	ef 90       	pop	r14
    2c70:	08 95       	ret

00002c72 <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    2c72:	01 97       	sbiw	r24, 0x01	; 1
    2c74:	39 f0       	breq	.+14     	; 0x2c84 <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    2c76:	88 0f       	add	r24, r24
    2c78:	99 1f       	adc	r25, r25
    2c7a:	88 0f       	add	r24, r24
    2c7c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    2c7e:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    2c80:	01 97       	sbiw	r24, 0x01	; 1
    2c82:	f1 f7       	brne	.-4      	; 0x2c80 <delayMicroseconds+0xe>
    2c84:	08 95       	ret

00002c86 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2c86:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2c88:	84 b5       	in	r24, 0x24	; 36
    2c8a:	82 60       	ori	r24, 0x02	; 2
    2c8c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2c8e:	84 b5       	in	r24, 0x24	; 36
    2c90:	81 60       	ori	r24, 0x01	; 1
    2c92:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2c94:	85 b5       	in	r24, 0x25	; 37
    2c96:	82 60       	ori	r24, 0x02	; 2
    2c98:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2c9a:	85 b5       	in	r24, 0x25	; 37
    2c9c:	81 60       	ori	r24, 0x01	; 1
    2c9e:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2ca0:	ee e6       	ldi	r30, 0x6E	; 110
    2ca2:	f0 e0       	ldi	r31, 0x00	; 0
    2ca4:	80 81       	ld	r24, Z
    2ca6:	81 60       	ori	r24, 0x01	; 1
    2ca8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2caa:	e1 e8       	ldi	r30, 0x81	; 129
    2cac:	f0 e0       	ldi	r31, 0x00	; 0
    2cae:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2cb0:	80 81       	ld	r24, Z
    2cb2:	82 60       	ori	r24, 0x02	; 2
    2cb4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2cb6:	80 81       	ld	r24, Z
    2cb8:	81 60       	ori	r24, 0x01	; 1
    2cba:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2cbc:	e0 e8       	ldi	r30, 0x80	; 128
    2cbe:	f0 e0       	ldi	r31, 0x00	; 0
    2cc0:	80 81       	ld	r24, Z
    2cc2:	81 60       	ori	r24, 0x01	; 1
    2cc4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2cc6:	e1 eb       	ldi	r30, 0xB1	; 177
    2cc8:	f0 e0       	ldi	r31, 0x00	; 0
    2cca:	80 81       	ld	r24, Z
    2ccc:	84 60       	ori	r24, 0x04	; 4
    2cce:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2cd0:	e0 eb       	ldi	r30, 0xB0	; 176
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	80 81       	ld	r24, Z
    2cd6:	81 60       	ori	r24, 0x01	; 1
    2cd8:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2cda:	ea e7       	ldi	r30, 0x7A	; 122
    2cdc:	f0 e0       	ldi	r31, 0x00	; 0
    2cde:	80 81       	ld	r24, Z
    2ce0:	84 60       	ori	r24, 0x04	; 4
    2ce2:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2ce4:	80 81       	ld	r24, Z
    2ce6:	82 60       	ori	r24, 0x02	; 2
    2ce8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2cea:	80 81       	ld	r24, Z
    2cec:	81 60       	ori	r24, 0x01	; 1
    2cee:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2cf0:	80 81       	ld	r24, Z
    2cf2:	80 68       	ori	r24, 0x80	; 128
    2cf4:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2cf6:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    2cfa:	08 95       	ret

00002cfc <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2cfc:	83 30       	cpi	r24, 0x03	; 3
    2cfe:	71 f0       	breq	.+28     	; 0x2d1c <turnOffPWM+0x20>
    2d00:	84 30       	cpi	r24, 0x04	; 4
    2d02:	28 f4       	brcc	.+10     	; 0x2d0e <turnOffPWM+0x12>
    2d04:	81 30       	cpi	r24, 0x01	; 1
    2d06:	a1 f0       	breq	.+40     	; 0x2d30 <turnOffPWM+0x34>
    2d08:	82 30       	cpi	r24, 0x02	; 2
    2d0a:	21 f5       	brne	.+72     	; 0x2d54 <turnOffPWM+0x58>
    2d0c:	14 c0       	rjmp	.+40     	; 0x2d36 <turnOffPWM+0x3a>
    2d0e:	86 30       	cpi	r24, 0x06	; 6
    2d10:	b1 f0       	breq	.+44     	; 0x2d3e <turnOffPWM+0x42>
    2d12:	87 30       	cpi	r24, 0x07	; 7
    2d14:	d1 f0       	breq	.+52     	; 0x2d4a <turnOffPWM+0x4e>
    2d16:	84 30       	cpi	r24, 0x04	; 4
    2d18:	e9 f4       	brne	.+58     	; 0x2d54 <turnOffPWM+0x58>
    2d1a:	04 c0       	rjmp	.+8      	; 0x2d24 <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2d1c:	80 91 80 00 	lds	r24, 0x0080
    2d20:	8f 77       	andi	r24, 0x7F	; 127
    2d22:	03 c0       	rjmp	.+6      	; 0x2d2a <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2d24:	80 91 80 00 	lds	r24, 0x0080
    2d28:	8f 7d       	andi	r24, 0xDF	; 223
    2d2a:	80 93 80 00 	sts	0x0080, r24
    2d2e:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2d30:	84 b5       	in	r24, 0x24	; 36
    2d32:	8f 77       	andi	r24, 0x7F	; 127
    2d34:	02 c0       	rjmp	.+4      	; 0x2d3a <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2d36:	84 b5       	in	r24, 0x24	; 36
    2d38:	8f 7d       	andi	r24, 0xDF	; 223
    2d3a:	84 bd       	out	0x24, r24	; 36
    2d3c:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2d3e:	80 91 b0 00 	lds	r24, 0x00B0
    2d42:	8f 77       	andi	r24, 0x7F	; 127
    2d44:	80 93 b0 00 	sts	0x00B0, r24
    2d48:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2d4a:	80 91 b0 00 	lds	r24, 0x00B0
    2d4e:	8f 7d       	andi	r24, 0xDF	; 223
    2d50:	80 93 b0 00 	sts	0x00B0, r24
    2d54:	08 95       	ret

00002d56 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	fc 01       	movw	r30, r24
    2d5a:	e6 56       	subi	r30, 0x66	; 102
    2d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5e:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    2d60:	fc 01       	movw	r30, r24
    2d62:	ea 57       	subi	r30, 0x7A	; 122
    2d64:	ff 4f       	sbci	r31, 0xFF	; 255
    2d66:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    2d68:	ee 23       	and	r30, r30
    2d6a:	c1 f0       	breq	.+48     	; 0x2d9c <pinMode+0x46>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2d6c:	f0 e0       	ldi	r31, 0x00	; 0
    2d6e:	ee 0f       	add	r30, r30
    2d70:	ff 1f       	adc	r31, r31
    2d72:	e8 59       	subi	r30, 0x98	; 152
    2d74:	ff 4f       	sbci	r31, 0xFF	; 255
    2d76:	85 91       	lpm	r24, Z+
    2d78:	94 91       	lpm	r25, Z+
    2d7a:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
    2d7c:	66 23       	and	r22, r22
    2d7e:	41 f4       	brne	.+16     	; 0x2d90 <pinMode+0x3a>
		uint8_t oldSREG = SREG;
    2d80:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2d82:	f8 94       	cli
		*reg &= ~bit;
    2d84:	8c 91       	ld	r24, X
    2d86:	20 95       	com	r18
    2d88:	82 23       	and	r24, r18
    2d8a:	8c 93       	st	X, r24
		SREG = oldSREG;
    2d8c:	9f bf       	out	0x3f, r25	; 63
    2d8e:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    2d90:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2d92:	f8 94       	cli
		*reg |= bit;
    2d94:	8c 91       	ld	r24, X
    2d96:	82 2b       	or	r24, r18
    2d98:	8c 93       	st	X, r24
		SREG = oldSREG;
    2d9a:	9f bf       	out	0x3f, r25	; 63
    2d9c:	08 95       	ret

00002d9e <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2d9e:	0f 93       	push	r16
    2da0:	1f 93       	push	r17
    2da2:	df 93       	push	r29
    2da4:	cf 93       	push	r28
    2da6:	0f 92       	push	r0
    2da8:	cd b7       	in	r28, 0x3d	; 61
    2daa:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    2dac:	28 2f       	mov	r18, r24
    2dae:	30 e0       	ldi	r19, 0x00	; 0
    2db0:	f9 01       	movw	r30, r18
    2db2:	e2 55       	subi	r30, 0x52	; 82
    2db4:	ff 4f       	sbci	r31, 0xFF	; 255
    2db6:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2db8:	f9 01       	movw	r30, r18
    2dba:	e6 56       	subi	r30, 0x66	; 102
    2dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2dbe:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    2dc0:	2a 57       	subi	r18, 0x7A	; 122
    2dc2:	3f 4f       	sbci	r19, 0xFF	; 255
    2dc4:	f9 01       	movw	r30, r18
    2dc6:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2dc8:	00 23       	and	r16, r16
    2dca:	d9 f0       	breq	.+54     	; 0x2e02 <digitalWrite+0x64>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2dcc:	88 23       	and	r24, r24
    2dce:	21 f0       	breq	.+8      	; 0x2dd8 <digitalWrite+0x3a>
    2dd0:	69 83       	std	Y+1, r22	; 0x01
    2dd2:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <turnOffPWM>
    2dd6:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    2dd8:	e0 2f       	mov	r30, r16
    2dda:	f0 e0       	ldi	r31, 0x00	; 0
    2ddc:	ee 0f       	add	r30, r30
    2dde:	ff 1f       	adc	r31, r31
    2de0:	ee 58       	subi	r30, 0x8E	; 142
    2de2:	ff 4f       	sbci	r31, 0xFF	; 255
    2de4:	85 91       	lpm	r24, Z+
    2de6:	94 91       	lpm	r25, Z+
    2de8:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    2dea:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2dec:	f8 94       	cli

	if (val == LOW) {
    2dee:	66 23       	and	r22, r22
    2df0:	21 f4       	brne	.+8      	; 0x2dfa <digitalWrite+0x5c>
		*out &= ~bit;
    2df2:	8c 91       	ld	r24, X
    2df4:	10 95       	com	r17
    2df6:	81 23       	and	r24, r17
    2df8:	02 c0       	rjmp	.+4      	; 0x2dfe <digitalWrite+0x60>
	} else {
		*out |= bit;
    2dfa:	8c 91       	ld	r24, X
    2dfc:	81 2b       	or	r24, r17
    2dfe:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    2e00:	9f bf       	out	0x3f, r25	; 63
}
    2e02:	0f 90       	pop	r0
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	1f 91       	pop	r17
    2e0a:	0f 91       	pop	r16
    2e0c:	08 95       	ret

00002e0e <digitalRead>:

int digitalRead(uint8_t pin)
{
    2e0e:	0f 93       	push	r16
    2e10:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    2e12:	28 2f       	mov	r18, r24
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	f9 01       	movw	r30, r18
    2e18:	e2 55       	subi	r30, 0x52	; 82
    2e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e1c:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2e1e:	f9 01       	movw	r30, r18
    2e20:	e6 56       	subi	r30, 0x66	; 102
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    2e26:	2a 57       	subi	r18, 0x7A	; 122
    2e28:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2a:	f9 01       	movw	r30, r18
    2e2c:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    2e2e:	11 23       	and	r17, r17
    2e30:	91 f0       	breq	.+36     	; 0x2e56 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2e32:	88 23       	and	r24, r24
    2e34:	11 f0       	breq	.+4      	; 0x2e3a <digitalRead+0x2c>
    2e36:	0e 94 7e 16 	call	0x2cfc	; 0x2cfc <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2e3a:	e1 2f       	mov	r30, r17
    2e3c:	f0 e0       	ldi	r31, 0x00	; 0
    2e3e:	ee 0f       	add	r30, r30
    2e40:	ff 1f       	adc	r31, r31
    2e42:	e4 58       	subi	r30, 0x84	; 132
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	85 91       	lpm	r24, Z+
    2e48:	94 91       	lpm	r25, Z+
    2e4a:	dc 01       	movw	r26, r24
    2e4c:	8c 91       	ld	r24, X
    2e4e:	80 23       	and	r24, r16
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2e50:	21 e0       	ldi	r18, 0x01	; 1
    2e52:	30 e0       	ldi	r19, 0x00	; 0
    2e54:	11 f4       	brne	.+4      	; 0x2e5a <digitalRead+0x4c>
    2e56:	20 e0       	ldi	r18, 0x00	; 0
    2e58:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2e5a:	c9 01       	movw	r24, r18
    2e5c:	1f 91       	pop	r17
    2e5e:	0f 91       	pop	r16
    2e60:	08 95       	ret

00002e62 <_ZN6StringD1Ev>:
	*this = buf;
}

String::~String()
{
	free(buffer);
    2e62:	fc 01       	movw	r30, r24
    2e64:	80 81       	ld	r24, Z
    2e66:	91 81       	ldd	r25, Z+1	; 0x01
    2e68:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <free>
}
    2e6c:	08 95       	ret

00002e6e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
    2e6e:	cf 93       	push	r28
    2e70:	df 93       	push	r29
    2e72:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    2e74:	88 81       	ld	r24, Y
    2e76:	99 81       	ldd	r25, Y+1	; 0x01
    2e78:	00 97       	sbiw	r24, 0x00	; 0
    2e7a:	11 f0       	breq	.+4      	; 0x2e80 <_ZN6String10invalidateEv+0x12>
    2e7c:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <free>
	buffer = NULL;
    2e80:	19 82       	std	Y+1, r1	; 0x01
    2e82:	18 82       	st	Y, r1
	capacity = len = 0;
    2e84:	1d 82       	std	Y+5, r1	; 0x05
    2e86:	1c 82       	std	Y+4, r1	; 0x04
    2e88:	1b 82       	std	Y+3, r1	; 0x03
    2e8a:	1a 82       	std	Y+2, r1	; 0x02
}
    2e8c:	df 91       	pop	r29
    2e8e:	cf 91       	pop	r28
    2e90:	08 95       	ret

00002e92 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    2e92:	0f 93       	push	r16
    2e94:	1f 93       	push	r17
    2e96:	cf 93       	push	r28
    2e98:	df 93       	push	r29
    2e9a:	ec 01       	movw	r28, r24
    2e9c:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2e9e:	6f 5f       	subi	r22, 0xFF	; 255
    2ea0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea2:	88 81       	ld	r24, Y
    2ea4:	99 81       	ldd	r25, Y+1	; 0x01
    2ea6:	0e 94 24 27 	call	0x4e48	; 0x4e48 <realloc>
	if (newbuffer) {
    2eaa:	00 97       	sbiw	r24, 0x00	; 0
    2eac:	31 f0       	breq	.+12     	; 0x2eba <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    2eae:	99 83       	std	Y+1, r25	; 0x01
    2eb0:	88 83       	st	Y, r24
		capacity = maxStrLen;
    2eb2:	1b 83       	std	Y+3, r17	; 0x03
    2eb4:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    2eb6:	81 e0       	ldi	r24, 0x01	; 1
    2eb8:	01 c0       	rjmp	.+2      	; 0x2ebc <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    2eba:	80 e0       	ldi	r24, 0x00	; 0
}
    2ebc:	df 91       	pop	r29
    2ebe:	cf 91       	pop	r28
    2ec0:	1f 91       	pop	r17
    2ec2:	0f 91       	pop	r16
    2ec4:	08 95       	ret

00002ec6 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    2ec6:	cf 93       	push	r28
    2ec8:	df 93       	push	r29
    2eca:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    2ecc:	88 81       	ld	r24, Y
    2ece:	99 81       	ldd	r25, Y+1	; 0x01
    2ed0:	00 97       	sbiw	r24, 0x00	; 0
    2ed2:	29 f0       	breq	.+10     	; 0x2ede <_ZN6String7reserveEj+0x18>
    2ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ed6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ed8:	86 17       	cp	r24, r22
    2eda:	97 07       	cpc	r25, r23
    2edc:	78 f4       	brcc	.+30     	; 0x2efc <_ZN6String7reserveEj+0x36>
	if (changeBuffer(size)) {
    2ede:	ce 01       	movw	r24, r28
    2ee0:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN6String12changeBufferEj>
    2ee4:	88 23       	and	r24, r24
    2ee6:	41 f0       	breq	.+16     	; 0x2ef8 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    2ee8:	8c 81       	ldd	r24, Y+4	; 0x04
    2eea:	9d 81       	ldd	r25, Y+5	; 0x05
    2eec:	00 97       	sbiw	r24, 0x00	; 0
    2eee:	31 f4       	brne	.+12     	; 0x2efc <_ZN6String7reserveEj+0x36>
    2ef0:	e8 81       	ld	r30, Y
    2ef2:	f9 81       	ldd	r31, Y+1	; 0x01
    2ef4:	10 82       	st	Z, r1
    2ef6:	02 c0       	rjmp	.+4      	; 0x2efc <_ZN6String7reserveEj+0x36>
		return 1;
	}
	return 0;
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	01 c0       	rjmp	.+2      	; 0x2efe <_ZN6String7reserveEj+0x38>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    2efc:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    2efe:	df 91       	pop	r29
    2f00:	cf 91       	pop	r28
    2f02:	08 95       	ret

00002f04 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    2f04:	ef 92       	push	r14
    2f06:	ff 92       	push	r15
    2f08:	0f 93       	push	r16
    2f0a:	1f 93       	push	r17
    2f0c:	cf 93       	push	r28
    2f0e:	df 93       	push	r29
    2f10:	ec 01       	movw	r28, r24
    2f12:	7b 01       	movw	r14, r22
    2f14:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    2f16:	ba 01       	movw	r22, r20
    2f18:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <_ZN6String7reserveEj>
    2f1c:	88 23       	and	r24, r24
    2f1e:	21 f4       	brne	.+8      	; 0x2f28 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    2f20:	ce 01       	movw	r24, r28
    2f22:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_ZN6String10invalidateEv>
		return *this;
    2f26:	07 c0       	rjmp	.+14     	; 0x2f36 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    2f28:	1d 83       	std	Y+5, r17	; 0x05
    2f2a:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    2f2c:	88 81       	ld	r24, Y
    2f2e:	99 81       	ldd	r25, Y+1	; 0x01
    2f30:	b7 01       	movw	r22, r14
    2f32:	0e 94 5d 28 	call	0x50ba	; 0x50ba <strcpy>
	return *this;
}
    2f36:	ce 01       	movw	r24, r28
    2f38:	df 91       	pop	r29
    2f3a:	cf 91       	pop	r28
    2f3c:	1f 91       	pop	r17
    2f3e:	0f 91       	pop	r16
    2f40:	ff 90       	pop	r15
    2f42:	ef 90       	pop	r14
    2f44:	08 95       	ret

00002f46 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    2f46:	cf 93       	push	r28
    2f48:	df 93       	push	r29
    2f4a:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2f4c:	11 82       	std	Z+1, r1	; 0x01
    2f4e:	10 82       	st	Z, r1
	capacity = 0;
    2f50:	13 82       	std	Z+3, r1	; 0x03
    2f52:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2f54:	15 82       	std	Z+5, r1	; 0x05
    2f56:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2f58:	16 82       	std	Z+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    2f5a:	61 15       	cp	r22, r1
    2f5c:	71 05       	cpc	r23, r1
    2f5e:	59 f0       	breq	.+22     	; 0x2f76 <_ZN6StringC1EPKc+0x30>
    2f60:	eb 01       	movw	r28, r22
    2f62:	09 90       	ld	r0, Y+
    2f64:	00 20       	and	r0, r0
    2f66:	e9 f7       	brne	.-6      	; 0x2f62 <_ZN6StringC1EPKc+0x1c>
    2f68:	ae 01       	movw	r20, r28
    2f6a:	41 50       	subi	r20, 0x01	; 1
    2f6c:	50 40       	sbci	r21, 0x00	; 0
    2f6e:	46 1b       	sub	r20, r22
    2f70:	57 0b       	sbc	r21, r23
    2f72:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN6String4copyEPKcj>
}
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	08 95       	ret

00002f7c <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    2f7c:	ef 92       	push	r14
    2f7e:	ff 92       	push	r15
    2f80:	cf 93       	push	r28
    2f82:	df 93       	push	r29
    2f84:	ec 01       	movw	r28, r24
    2f86:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    2f88:	86 17       	cp	r24, r22
    2f8a:	97 07       	cpc	r25, r23
    2f8c:	61 f0       	breq	.+24     	; 0x2fa6 <_ZN6StringaSERKS_+0x2a>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    2f8e:	60 81       	ld	r22, Z
    2f90:	71 81       	ldd	r23, Z+1	; 0x01
    2f92:	61 15       	cp	r22, r1
    2f94:	71 05       	cpc	r23, r1
    2f96:	29 f0       	breq	.+10     	; 0x2fa2 <_ZN6StringaSERKS_+0x26>
    2f98:	44 81       	ldd	r20, Z+4	; 0x04
    2f9a:	55 81       	ldd	r21, Z+5	; 0x05
    2f9c:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN6String4copyEPKcj>
    2fa0:	02 c0       	rjmp	.+4      	; 0x2fa6 <_ZN6StringaSERKS_+0x2a>
	else invalidate();
    2fa2:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_ZN6String10invalidateEv>
	
	return *this;
}
    2fa6:	ce 01       	movw	r24, r28
    2fa8:	df 91       	pop	r29
    2faa:	cf 91       	pop	r28
    2fac:	ff 90       	pop	r15
    2fae:	ef 90       	pop	r14
    2fb0:	08 95       	ret

00002fb2 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    2fb2:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2fb4:	11 82       	std	Z+1, r1	; 0x01
    2fb6:	10 82       	st	Z, r1
	capacity = 0;
    2fb8:	13 82       	std	Z+3, r1	; 0x03
    2fba:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2fbc:	15 82       	std	Z+5, r1	; 0x05
    2fbe:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2fc0:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    2fc2:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <_ZN6StringaSERKS_>
}
    2fc6:	08 95       	ret

00002fc8 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    2fc8:	0f 93       	push	r16
    2fca:	1f 93       	push	r17
    2fcc:	8c 01       	movw	r16, r24
	if (cstr) copy(cstr, strlen(cstr));
    2fce:	61 15       	cp	r22, r1
    2fd0:	71 05       	cpc	r23, r1
    2fd2:	61 f0       	breq	.+24     	; 0x2fec <_ZN6StringaSEPKc+0x24>
    2fd4:	db 01       	movw	r26, r22
    2fd6:	0d 90       	ld	r0, X+
    2fd8:	00 20       	and	r0, r0
    2fda:	e9 f7       	brne	.-6      	; 0x2fd6 <_ZN6StringaSEPKc+0xe>
    2fdc:	ad 01       	movw	r20, r26
    2fde:	41 50       	subi	r20, 0x01	; 1
    2fe0:	50 40       	sbci	r21, 0x00	; 0
    2fe2:	46 1b       	sub	r20, r22
    2fe4:	57 0b       	sbc	r21, r23
    2fe6:	0e 94 82 17 	call	0x2f04	; 0x2f04 <_ZN6String4copyEPKcj>
    2fea:	02 c0       	rjmp	.+4      	; 0x2ff0 <_ZN6StringaSEPKc+0x28>
	else invalidate();
    2fec:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_ZN6String10invalidateEv>
	
	return *this;
}
    2ff0:	c8 01       	movw	r24, r16
    2ff2:	1f 91       	pop	r17
    2ff4:	0f 91       	pop	r16
    2ff6:	08 95       	ret

00002ff8 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	df 93       	push	r29
    3002:	cf 93       	push	r28
    3004:	cd b7       	in	r28, 0x3d	; 61
    3006:	de b7       	in	r29, 0x3e	; 62
    3008:	a1 97       	sbiw	r28, 0x21	; 33
    300a:	0f b6       	in	r0, 0x3f	; 63
    300c:	f8 94       	cli
    300e:	de bf       	out	0x3e, r29	; 62
    3010:	0f be       	out	0x3f, r0	; 63
    3012:	cd bf       	out	0x3d, r28	; 61
    3014:	7c 01       	movw	r14, r24
    3016:	cb 01       	movw	r24, r22
    3018:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    301a:	f7 01       	movw	r30, r14
    301c:	11 82       	std	Z+1, r1	; 0x01
    301e:	10 82       	st	Z, r1
	capacity = 0;
    3020:	13 82       	std	Z+3, r1	; 0x03
    3022:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3024:	15 82       	std	Z+5, r1	; 0x05
    3026:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3028:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    302a:	8e 01       	movw	r16, r28
    302c:	0f 5f       	subi	r16, 0xFF	; 255
    302e:	1f 4f       	sbci	r17, 0xFF	; 255
    3030:	a8 01       	movw	r20, r16
    3032:	30 e0       	ldi	r19, 0x00	; 0
    3034:	0e 94 10 29 	call	0x5220	; 0x5220 <ultoa>
	*this = buf;
    3038:	c7 01       	movw	r24, r14
    303a:	b8 01       	movw	r22, r16
    303c:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_ZN6StringaSEPKc>
}
    3040:	a1 96       	adiw	r28, 0x21	; 33
    3042:	0f b6       	in	r0, 0x3f	; 63
    3044:	f8 94       	cli
    3046:	de bf       	out	0x3e, r29	; 62
    3048:	0f be       	out	0x3f, r0	; 63
    304a:	cd bf       	out	0x3d, r28	; 61
    304c:	cf 91       	pop	r28
    304e:	df 91       	pop	r29
    3050:	1f 91       	pop	r17
    3052:	0f 91       	pop	r16
    3054:	ff 90       	pop	r15
    3056:	ef 90       	pop	r14
    3058:	08 95       	ret

0000305a <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    305a:	ef 92       	push	r14
    305c:	ff 92       	push	r15
    305e:	0f 93       	push	r16
    3060:	1f 93       	push	r17
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	cd b7       	in	r28, 0x3d	; 61
    3068:	de b7       	in	r29, 0x3e	; 62
    306a:	a2 97       	sbiw	r28, 0x22	; 34
    306c:	0f b6       	in	r0, 0x3f	; 63
    306e:	f8 94       	cli
    3070:	de bf       	out	0x3e, r29	; 62
    3072:	0f be       	out	0x3f, r0	; 63
    3074:	cd bf       	out	0x3d, r28	; 61
    3076:	7c 01       	movw	r14, r24
    3078:	cb 01       	movw	r24, r22
    307a:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    307c:	f7 01       	movw	r30, r14
    307e:	11 82       	std	Z+1, r1	; 0x01
    3080:	10 82       	st	Z, r1
	capacity = 0;
    3082:	13 82       	std	Z+3, r1	; 0x03
    3084:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3086:	15 82       	std	Z+5, r1	; 0x05
    3088:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    308a:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    308c:	8e 01       	movw	r16, r28
    308e:	0f 5f       	subi	r16, 0xFF	; 255
    3090:	1f 4f       	sbci	r17, 0xFF	; 255
    3092:	a8 01       	movw	r20, r16
    3094:	30 e0       	ldi	r19, 0x00	; 0
    3096:	0e 94 c7 28 	call	0x518e	; 0x518e <ltoa>
	*this = buf;
    309a:	c7 01       	movw	r24, r14
    309c:	b8 01       	movw	r22, r16
    309e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_ZN6StringaSEPKc>
}
    30a2:	a2 96       	adiw	r28, 0x22	; 34
    30a4:	0f b6       	in	r0, 0x3f	; 63
    30a6:	f8 94       	cli
    30a8:	de bf       	out	0x3e, r29	; 62
    30aa:	0f be       	out	0x3f, r0	; 63
    30ac:	cd bf       	out	0x3d, r28	; 61
    30ae:	cf 91       	pop	r28
    30b0:	df 91       	pop	r29
    30b2:	1f 91       	pop	r17
    30b4:	0f 91       	pop	r16
    30b6:	ff 90       	pop	r15
    30b8:	ef 90       	pop	r14
    30ba:	08 95       	ret

000030bc <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    30bc:	ef 92       	push	r14
    30be:	ff 92       	push	r15
    30c0:	0f 93       	push	r16
    30c2:	1f 93       	push	r17
    30c4:	df 93       	push	r29
    30c6:	cf 93       	push	r28
    30c8:	cd b7       	in	r28, 0x3d	; 61
    30ca:	de b7       	in	r29, 0x3e	; 62
    30cc:	61 97       	sbiw	r28, 0x11	; 17
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	f8 94       	cli
    30d2:	de bf       	out	0x3e, r29	; 62
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	cd bf       	out	0x3d, r28	; 61
    30d8:	7c 01       	movw	r14, r24
    30da:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    30dc:	f7 01       	movw	r30, r14
    30de:	11 82       	std	Z+1, r1	; 0x01
    30e0:	10 82       	st	Z, r1
	capacity = 0;
    30e2:	13 82       	std	Z+3, r1	; 0x03
    30e4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    30e6:	15 82       	std	Z+5, r1	; 0x05
    30e8:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    30ea:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    30ec:	8e 01       	movw	r16, r28
    30ee:	0f 5f       	subi	r16, 0xFF	; 255
    30f0:	1f 4f       	sbci	r17, 0xFF	; 255
    30f2:	b8 01       	movw	r22, r16
    30f4:	50 e0       	ldi	r21, 0x00	; 0
    30f6:	0e 94 35 29 	call	0x526a	; 0x526a <utoa>
	*this = buf;
    30fa:	c7 01       	movw	r24, r14
    30fc:	b8 01       	movw	r22, r16
    30fe:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_ZN6StringaSEPKc>
}
    3102:	61 96       	adiw	r28, 0x11	; 17
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	f8 94       	cli
    3108:	de bf       	out	0x3e, r29	; 62
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	cd bf       	out	0x3d, r28	; 61
    310e:	cf 91       	pop	r28
    3110:	df 91       	pop	r29
    3112:	1f 91       	pop	r17
    3114:	0f 91       	pop	r16
    3116:	ff 90       	pop	r15
    3118:	ef 90       	pop	r14
    311a:	08 95       	ret

0000311c <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    311c:	ef 92       	push	r14
    311e:	ff 92       	push	r15
    3120:	0f 93       	push	r16
    3122:	1f 93       	push	r17
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	62 97       	sbiw	r28, 0x12	; 18
    312e:	0f b6       	in	r0, 0x3f	; 63
    3130:	f8 94       	cli
    3132:	de bf       	out	0x3e, r29	; 62
    3134:	0f be       	out	0x3f, r0	; 63
    3136:	cd bf       	out	0x3d, r28	; 61
    3138:	7c 01       	movw	r14, r24
    313a:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    313c:	f7 01       	movw	r30, r14
    313e:	11 82       	std	Z+1, r1	; 0x01
    3140:	10 82       	st	Z, r1
	capacity = 0;
    3142:	13 82       	std	Z+3, r1	; 0x03
    3144:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3146:	15 82       	std	Z+5, r1	; 0x05
    3148:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    314a:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    314c:	8e 01       	movw	r16, r28
    314e:	0f 5f       	subi	r16, 0xFF	; 255
    3150:	1f 4f       	sbci	r17, 0xFF	; 255
    3152:	b8 01       	movw	r22, r16
    3154:	50 e0       	ldi	r21, 0x00	; 0
    3156:	0e 94 a6 28 	call	0x514c	; 0x514c <itoa>
	*this = buf;
    315a:	c7 01       	movw	r24, r14
    315c:	b8 01       	movw	r22, r16
    315e:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_ZN6StringaSEPKc>
}
    3162:	62 96       	adiw	r28, 0x12	; 18
    3164:	0f b6       	in	r0, 0x3f	; 63
    3166:	f8 94       	cli
    3168:	de bf       	out	0x3e, r29	; 62
    316a:	0f be       	out	0x3f, r0	; 63
    316c:	cd bf       	out	0x3d, r28	; 61
    316e:	cf 91       	pop	r28
    3170:	df 91       	pop	r29
    3172:	1f 91       	pop	r17
    3174:	0f 91       	pop	r16
    3176:	ff 90       	pop	r15
    3178:	ef 90       	pop	r14
    317a:	08 95       	ret

0000317c <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    317c:	ef 92       	push	r14
    317e:	ff 92       	push	r15
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	df 93       	push	r29
    3186:	cf 93       	push	r28
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	29 97       	sbiw	r28, 0x09	; 9
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	7c 01       	movw	r14, r24
    319a:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    319c:	f7 01       	movw	r30, r14
    319e:	11 82       	std	Z+1, r1	; 0x01
    31a0:	10 82       	st	Z, r1
	capacity = 0;
    31a2:	13 82       	std	Z+3, r1	; 0x03
    31a4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    31a6:	15 82       	std	Z+5, r1	; 0x05
    31a8:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    31aa:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    31ac:	90 e0       	ldi	r25, 0x00	; 0
    31ae:	8e 01       	movw	r16, r28
    31b0:	0f 5f       	subi	r16, 0xFF	; 255
    31b2:	1f 4f       	sbci	r17, 0xFF	; 255
    31b4:	b8 01       	movw	r22, r16
    31b6:	50 e0       	ldi	r21, 0x00	; 0
    31b8:	0e 94 35 29 	call	0x526a	; 0x526a <utoa>
	*this = buf;
    31bc:	c7 01       	movw	r24, r14
    31be:	b8 01       	movw	r22, r16
    31c0:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_ZN6StringaSEPKc>
}
    31c4:	29 96       	adiw	r28, 0x09	; 9
    31c6:	0f b6       	in	r0, 0x3f	; 63
    31c8:	f8 94       	cli
    31ca:	de bf       	out	0x3e, r29	; 62
    31cc:	0f be       	out	0x3f, r0	; 63
    31ce:	cd bf       	out	0x3d, r28	; 61
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	1f 91       	pop	r17
    31d6:	0f 91       	pop	r16
    31d8:	ff 90       	pop	r15
    31da:	ef 90       	pop	r14
    31dc:	08 95       	ret

000031de <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    31de:	df 93       	push	r29
    31e0:	cf 93       	push	r28
    31e2:	00 d0       	rcall	.+0      	; 0x31e4 <_ZN6StringC1Ec+0x6>
    31e4:	cd b7       	in	r28, 0x3d	; 61
    31e6:	de b7       	in	r29, 0x3e	; 62
    31e8:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    31ea:	11 82       	std	Z+1, r1	; 0x01
    31ec:	10 82       	st	Z, r1
	capacity = 0;
    31ee:	13 82       	std	Z+3, r1	; 0x03
    31f0:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    31f2:	15 82       	std	Z+5, r1	; 0x05
    31f4:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    31f6:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    31f8:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    31fa:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    31fc:	be 01       	movw	r22, r28
    31fe:	6f 5f       	subi	r22, 0xFF	; 255
    3200:	7f 4f       	sbci	r23, 0xFF	; 255
    3202:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_ZN6StringaSEPKc>
}
    3206:	0f 90       	pop	r0
    3208:	0f 90       	pop	r0
    320a:	cf 91       	pop	r28
    320c:	df 91       	pop	r29
    320e:	08 95       	ret

00003210 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    3210:	ef 92       	push	r14
    3212:	ff 92       	push	r15
    3214:	0f 93       	push	r16
    3216:	1f 93       	push	r17
    3218:	cf 93       	push	r28
    321a:	df 93       	push	r29
    321c:	ec 01       	movw	r28, r24
    321e:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
    3220:	0c 81       	ldd	r16, Y+4	; 0x04
    3222:	1d 81       	ldd	r17, Y+5	; 0x05
	if (!cstr) return 0;
    3224:	61 15       	cp	r22, r1
    3226:	71 05       	cpc	r23, r1
    3228:	b9 f0       	breq	.+46     	; 0x3258 <_ZN6String6concatEPKcj+0x48>
	if (length == 0) return 1;
    322a:	41 15       	cp	r20, r1
    322c:	51 05       	cpc	r21, r1
    322e:	91 f0       	breq	.+36     	; 0x3254 <_ZN6String6concatEPKcj+0x44>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    3230:	04 0f       	add	r16, r20
    3232:	15 1f       	adc	r17, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    3234:	b8 01       	movw	r22, r16
    3236:	0e 94 63 17 	call	0x2ec6	; 0x2ec6 <_ZN6String7reserveEj>
    323a:	88 23       	and	r24, r24
    323c:	69 f0       	breq	.+26     	; 0x3258 <_ZN6String6concatEPKcj+0x48>
	strcpy(buffer + len, cstr);
    323e:	28 81       	ld	r18, Y
    3240:	39 81       	ldd	r19, Y+1	; 0x01
    3242:	8c 81       	ldd	r24, Y+4	; 0x04
    3244:	9d 81       	ldd	r25, Y+5	; 0x05
    3246:	82 0f       	add	r24, r18
    3248:	93 1f       	adc	r25, r19
    324a:	b7 01       	movw	r22, r14
    324c:	0e 94 5d 28 	call	0x50ba	; 0x50ba <strcpy>
	len = newlen;
    3250:	1d 83       	std	Y+5, r17	; 0x05
    3252:	0c 83       	std	Y+4, r16	; 0x04

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
    3254:	81 e0       	ldi	r24, 0x01	; 1
    3256:	01 c0       	rjmp	.+2      	; 0x325a <_ZN6String6concatEPKcj+0x4a>
	if (!reserve(newlen)) return 0;
    3258:	80 e0       	ldi	r24, 0x00	; 0
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    325a:	df 91       	pop	r29
    325c:	cf 91       	pop	r28
    325e:	1f 91       	pop	r17
    3260:	0f 91       	pop	r16
    3262:	ff 90       	pop	r15
    3264:	ef 90       	pop	r14
    3266:	08 95       	ret

00003268 <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    3268:	fb 01       	movw	r30, r22
	return concat(s.buffer, s.len);
    326a:	60 81       	ld	r22, Z
    326c:	71 81       	ldd	r23, Z+1	; 0x01
    326e:	44 81       	ldd	r20, Z+4	; 0x04
    3270:	55 81       	ldd	r21, Z+5	; 0x05
    3272:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN6String6concatEPKcj>
}
    3276:	08 95       	ret

00003278 <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    3278:	61 15       	cp	r22, r1
    327a:	71 05       	cpc	r23, r1
    327c:	61 f0       	breq	.+24     	; 0x3296 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
    327e:	db 01       	movw	r26, r22
    3280:	0d 90       	ld	r0, X+
    3282:	00 20       	and	r0, r0
    3284:	e9 f7       	brne	.-6      	; 0x3280 <_ZN6String6concatEPKc+0x8>
    3286:	ad 01       	movw	r20, r26
    3288:	41 50       	subi	r20, 0x01	; 1
    328a:	50 40       	sbci	r21, 0x00	; 0
    328c:	46 1b       	sub	r20, r22
    328e:	57 0b       	sbc	r21, r23
    3290:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN6String6concatEPKcj>
    3294:	08 95       	ret
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    3296:	80 e0       	ldi	r24, 0x00	; 0
	return concat(cstr, strlen(cstr));
}
    3298:	08 95       	ret

0000329a <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    329a:	df 93       	push	r29
    329c:	cf 93       	push	r28
    329e:	00 d0       	rcall	.+0      	; 0x32a0 <_ZN6String6concatEc+0x6>
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    32a4:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    32a6:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    32a8:	be 01       	movw	r22, r28
    32aa:	6f 5f       	subi	r22, 0xFF	; 255
    32ac:	7f 4f       	sbci	r23, 0xFF	; 255
    32ae:	41 e0       	ldi	r20, 0x01	; 1
    32b0:	50 e0       	ldi	r21, 0x00	; 0
    32b2:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN6String6concatEPKcj>
}
    32b6:	0f 90       	pop	r0
    32b8:	0f 90       	pop	r0
    32ba:	cf 91       	pop	r28
    32bc:	df 91       	pop	r29
    32be:	08 95       	ret

000032c0 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    32c0:	ef 92       	push	r14
    32c2:	ff 92       	push	r15
    32c4:	0f 93       	push	r16
    32c6:	1f 93       	push	r17
    32c8:	df 93       	push	r29
    32ca:	cf 93       	push	r28
    32cc:	00 d0       	rcall	.+0      	; 0x32ce <_ZN6String6concatEh+0xe>
    32ce:	00 d0       	rcall	.+0      	; 0x32d0 <_ZN6String6concatEh+0x10>
    32d0:	cd b7       	in	r28, 0x3d	; 61
    32d2:	de b7       	in	r29, 0x3e	; 62
    32d4:	7c 01       	movw	r14, r24
    32d6:	86 2f       	mov	r24, r22
	char buf[4];
	itoa(num, buf, 10);
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	8e 01       	movw	r16, r28
    32dc:	0f 5f       	subi	r16, 0xFF	; 255
    32de:	1f 4f       	sbci	r17, 0xFF	; 255
    32e0:	b8 01       	movw	r22, r16
    32e2:	4a e0       	ldi	r20, 0x0A	; 10
    32e4:	50 e0       	ldi	r21, 0x00	; 0
    32e6:	0e 94 a6 28 	call	0x514c	; 0x514c <itoa>
	return concat(buf, strlen(buf));
    32ea:	f8 01       	movw	r30, r16
    32ec:	01 90       	ld	r0, Z+
    32ee:	00 20       	and	r0, r0
    32f0:	e9 f7       	brne	.-6      	; 0x32ec <_ZN6String6concatEh+0x2c>
    32f2:	af 01       	movw	r20, r30
    32f4:	41 50       	subi	r20, 0x01	; 1
    32f6:	50 40       	sbci	r21, 0x00	; 0
    32f8:	40 1b       	sub	r20, r16
    32fa:	51 0b       	sbc	r21, r17
    32fc:	c7 01       	movw	r24, r14
    32fe:	b8 01       	movw	r22, r16
    3300:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN6String6concatEPKcj>
}
    3304:	0f 90       	pop	r0
    3306:	0f 90       	pop	r0
    3308:	0f 90       	pop	r0
    330a:	0f 90       	pop	r0
    330c:	cf 91       	pop	r28
    330e:	df 91       	pop	r29
    3310:	1f 91       	pop	r17
    3312:	0f 91       	pop	r16
    3314:	ff 90       	pop	r15
    3316:	ef 90       	pop	r14
    3318:	08 95       	ret

0000331a <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    331a:	ef 92       	push	r14
    331c:	ff 92       	push	r15
    331e:	0f 93       	push	r16
    3320:	1f 93       	push	r17
    3322:	df 93       	push	r29
    3324:	cf 93       	push	r28
    3326:	cd b7       	in	r28, 0x3d	; 61
    3328:	de b7       	in	r29, 0x3e	; 62
    332a:	27 97       	sbiw	r28, 0x07	; 7
    332c:	0f b6       	in	r0, 0x3f	; 63
    332e:	f8 94       	cli
    3330:	de bf       	out	0x3e, r29	; 62
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	cd bf       	out	0x3d, r28	; 61
    3336:	7c 01       	movw	r14, r24
    3338:	cb 01       	movw	r24, r22
	char buf[7];
	itoa(num, buf, 10);
    333a:	8e 01       	movw	r16, r28
    333c:	0f 5f       	subi	r16, 0xFF	; 255
    333e:	1f 4f       	sbci	r17, 0xFF	; 255
    3340:	b8 01       	movw	r22, r16
    3342:	4a e0       	ldi	r20, 0x0A	; 10
    3344:	50 e0       	ldi	r21, 0x00	; 0
    3346:	0e 94 a6 28 	call	0x514c	; 0x514c <itoa>
	return concat(buf, strlen(buf));
    334a:	f8 01       	movw	r30, r16
    334c:	01 90       	ld	r0, Z+
    334e:	00 20       	and	r0, r0
    3350:	e9 f7       	brne	.-6      	; 0x334c <_ZN6String6concatEi+0x32>
    3352:	af 01       	movw	r20, r30
    3354:	41 50       	subi	r20, 0x01	; 1
    3356:	50 40       	sbci	r21, 0x00	; 0
    3358:	40 1b       	sub	r20, r16
    335a:	51 0b       	sbc	r21, r17
    335c:	c7 01       	movw	r24, r14
    335e:	b8 01       	movw	r22, r16
    3360:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN6String6concatEPKcj>
}
    3364:	27 96       	adiw	r28, 0x07	; 7
    3366:	0f b6       	in	r0, 0x3f	; 63
    3368:	f8 94       	cli
    336a:	de bf       	out	0x3e, r29	; 62
    336c:	0f be       	out	0x3f, r0	; 63
    336e:	cd bf       	out	0x3d, r28	; 61
    3370:	cf 91       	pop	r28
    3372:	df 91       	pop	r29
    3374:	1f 91       	pop	r17
    3376:	0f 91       	pop	r16
    3378:	ff 90       	pop	r15
    337a:	ef 90       	pop	r14
    337c:	08 95       	ret

0000337e <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
    337e:	ef 92       	push	r14
    3380:	ff 92       	push	r15
    3382:	0f 93       	push	r16
    3384:	1f 93       	push	r17
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	00 d0       	rcall	.+0      	; 0x338c <_ZN6String6concatEj+0xe>
    338c:	00 d0       	rcall	.+0      	; 0x338e <_ZN6String6concatEj+0x10>
    338e:	00 d0       	rcall	.+0      	; 0x3390 <_ZN6String6concatEj+0x12>
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	7c 01       	movw	r14, r24
    3396:	cb 01       	movw	r24, r22
	char buf[6];
	utoa(num, buf, 10);
    3398:	8e 01       	movw	r16, r28
    339a:	0f 5f       	subi	r16, 0xFF	; 255
    339c:	1f 4f       	sbci	r17, 0xFF	; 255
    339e:	b8 01       	movw	r22, r16
    33a0:	4a e0       	ldi	r20, 0x0A	; 10
    33a2:	50 e0       	ldi	r21, 0x00	; 0
    33a4:	0e 94 35 29 	call	0x526a	; 0x526a <utoa>
	return concat(buf, strlen(buf));
    33a8:	f8 01       	movw	r30, r16
    33aa:	01 90       	ld	r0, Z+
    33ac:	00 20       	and	r0, r0
    33ae:	e9 f7       	brne	.-6      	; 0x33aa <_ZN6String6concatEj+0x2c>
    33b0:	af 01       	movw	r20, r30
    33b2:	41 50       	subi	r20, 0x01	; 1
    33b4:	50 40       	sbci	r21, 0x00	; 0
    33b6:	40 1b       	sub	r20, r16
    33b8:	51 0b       	sbc	r21, r17
    33ba:	c7 01       	movw	r24, r14
    33bc:	b8 01       	movw	r22, r16
    33be:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN6String6concatEPKcj>
}
    33c2:	26 96       	adiw	r28, 0x06	; 6
    33c4:	0f b6       	in	r0, 0x3f	; 63
    33c6:	f8 94       	cli
    33c8:	de bf       	out	0x3e, r29	; 62
    33ca:	0f be       	out	0x3f, r0	; 63
    33cc:	cd bf       	out	0x3d, r28	; 61
    33ce:	cf 91       	pop	r28
    33d0:	df 91       	pop	r29
    33d2:	1f 91       	pop	r17
    33d4:	0f 91       	pop	r16
    33d6:	ff 90       	pop	r15
    33d8:	ef 90       	pop	r14
    33da:	08 95       	ret

000033dc <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
    33dc:	ef 92       	push	r14
    33de:	ff 92       	push	r15
    33e0:	0f 93       	push	r16
    33e2:	1f 93       	push	r17
    33e4:	df 93       	push	r29
    33e6:	cf 93       	push	r28
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	2c 97       	sbiw	r28, 0x0c	; 12
    33ee:	0f b6       	in	r0, 0x3f	; 63
    33f0:	f8 94       	cli
    33f2:	de bf       	out	0x3e, r29	; 62
    33f4:	0f be       	out	0x3f, r0	; 63
    33f6:	cd bf       	out	0x3d, r28	; 61
    33f8:	7c 01       	movw	r14, r24
    33fa:	cb 01       	movw	r24, r22
    33fc:	ba 01       	movw	r22, r20
	char buf[12];
	ltoa(num, buf, 10);
    33fe:	8e 01       	movw	r16, r28
    3400:	0f 5f       	subi	r16, 0xFF	; 255
    3402:	1f 4f       	sbci	r17, 0xFF	; 255
    3404:	a8 01       	movw	r20, r16
    3406:	2a e0       	ldi	r18, 0x0A	; 10
    3408:	30 e0       	ldi	r19, 0x00	; 0
    340a:	0e 94 c7 28 	call	0x518e	; 0x518e <ltoa>
	return concat(buf, strlen(buf));
    340e:	f8 01       	movw	r30, r16
    3410:	01 90       	ld	r0, Z+
    3412:	00 20       	and	r0, r0
    3414:	e9 f7       	brne	.-6      	; 0x3410 <_ZN6String6concatEl+0x34>
    3416:	af 01       	movw	r20, r30
    3418:	41 50       	subi	r20, 0x01	; 1
    341a:	50 40       	sbci	r21, 0x00	; 0
    341c:	40 1b       	sub	r20, r16
    341e:	51 0b       	sbc	r21, r17
    3420:	c7 01       	movw	r24, r14
    3422:	b8 01       	movw	r22, r16
    3424:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN6String6concatEPKcj>
}
    3428:	2c 96       	adiw	r28, 0x0c	; 12
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	de bf       	out	0x3e, r29	; 62
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	cd bf       	out	0x3d, r28	; 61
    3434:	cf 91       	pop	r28
    3436:	df 91       	pop	r29
    3438:	1f 91       	pop	r17
    343a:	0f 91       	pop	r16
    343c:	ff 90       	pop	r15
    343e:	ef 90       	pop	r14
    3440:	08 95       	ret

00003442 <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    3442:	ef 92       	push	r14
    3444:	ff 92       	push	r15
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	2b 97       	sbiw	r28, 0x0b	; 11
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
    345e:	7c 01       	movw	r14, r24
    3460:	cb 01       	movw	r24, r22
    3462:	ba 01       	movw	r22, r20
	char buf[11];
	ultoa(num, buf, 10);
    3464:	8e 01       	movw	r16, r28
    3466:	0f 5f       	subi	r16, 0xFF	; 255
    3468:	1f 4f       	sbci	r17, 0xFF	; 255
    346a:	a8 01       	movw	r20, r16
    346c:	2a e0       	ldi	r18, 0x0A	; 10
    346e:	30 e0       	ldi	r19, 0x00	; 0
    3470:	0e 94 10 29 	call	0x5220	; 0x5220 <ultoa>
	return concat(buf, strlen(buf));
    3474:	f8 01       	movw	r30, r16
    3476:	01 90       	ld	r0, Z+
    3478:	00 20       	and	r0, r0
    347a:	e9 f7       	brne	.-6      	; 0x3476 <_ZN6String6concatEm+0x34>
    347c:	af 01       	movw	r20, r30
    347e:	41 50       	subi	r20, 0x01	; 1
    3480:	50 40       	sbci	r21, 0x00	; 0
    3482:	40 1b       	sub	r20, r16
    3484:	51 0b       	sbc	r21, r17
    3486:	c7 01       	movw	r24, r14
    3488:	b8 01       	movw	r22, r16
    348a:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN6String6concatEPKcj>
}
    348e:	2b 96       	adiw	r28, 0x0b	; 11
    3490:	0f b6       	in	r0, 0x3f	; 63
    3492:	f8 94       	cli
    3494:	de bf       	out	0x3e, r29	; 62
    3496:	0f be       	out	0x3f, r0	; 63
    3498:	cd bf       	out	0x3d, r28	; 61
    349a:	cf 91       	pop	r28
    349c:	df 91       	pop	r29
    349e:	1f 91       	pop	r17
    34a0:	0f 91       	pop	r16
    34a2:	ff 90       	pop	r15
    34a4:	ef 90       	pop	r14
    34a6:	08 95       	ret

000034a8 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    34a8:	0f 93       	push	r16
    34aa:	1f 93       	push	r17
    34ac:	8c 01       	movw	r16, r24
    34ae:	fb 01       	movw	r30, r22
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    34b0:	60 81       	ld	r22, Z
    34b2:	71 81       	ldd	r23, Z+1	; 0x01
    34b4:	44 81       	ldd	r20, Z+4	; 0x04
    34b6:	55 81       	ldd	r21, Z+5	; 0x05
    34b8:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN6String6concatEPKcj>
    34bc:	88 23       	and	r24, r24
    34be:	19 f4       	brne	.+6      	; 0x34c6 <_ZplRK15StringSumHelperRK6String+0x1e>
    34c0:	c8 01       	movw	r24, r16
    34c2:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_ZN6String10invalidateEv>
	return a;
}
    34c6:	c8 01       	movw	r24, r16
    34c8:	1f 91       	pop	r17
    34ca:	0f 91       	pop	r16
    34cc:	08 95       	ret

000034ce <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    34ce:	0f 93       	push	r16
    34d0:	1f 93       	push	r17
    34d2:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    34d4:	61 15       	cp	r22, r1
    34d6:	71 05       	cpc	r23, r1
    34d8:	69 f0       	breq	.+26     	; 0x34f4 <_ZplRK15StringSumHelperPKc+0x26>
    34da:	db 01       	movw	r26, r22
    34dc:	0d 90       	ld	r0, X+
    34de:	00 20       	and	r0, r0
    34e0:	e9 f7       	brne	.-6      	; 0x34dc <_ZplRK15StringSumHelperPKc+0xe>
    34e2:	ad 01       	movw	r20, r26
    34e4:	41 50       	subi	r20, 0x01	; 1
    34e6:	50 40       	sbci	r21, 0x00	; 0
    34e8:	46 1b       	sub	r20, r22
    34ea:	57 0b       	sbc	r21, r23
    34ec:	0e 94 08 19 	call	0x3210	; 0x3210 <_ZN6String6concatEPKcj>
    34f0:	88 23       	and	r24, r24
    34f2:	19 f4       	brne	.+6      	; 0x34fa <_ZplRK15StringSumHelperPKc+0x2c>
    34f4:	c8 01       	movw	r24, r16
    34f6:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_ZN6String10invalidateEv>
	return a;
}
    34fa:	c8 01       	movw	r24, r16
    34fc:	1f 91       	pop	r17
    34fe:	0f 91       	pop	r16
    3500:	08 95       	ret

00003502 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    3502:	0f 93       	push	r16
    3504:	1f 93       	push	r17
    3506:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    3508:	0e 94 4d 19 	call	0x329a	; 0x329a <_ZN6String6concatEc>
    350c:	88 23       	and	r24, r24
    350e:	19 f4       	brne	.+6      	; 0x3516 <_ZplRK15StringSumHelperc+0x14>
    3510:	c8 01       	movw	r24, r16
    3512:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_ZN6String10invalidateEv>
	return a;
}
    3516:	c8 01       	movw	r24, r16
    3518:	1f 91       	pop	r17
    351a:	0f 91       	pop	r16
    351c:	08 95       	ret

0000351e <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
    351e:	0f 93       	push	r16
    3520:	1f 93       	push	r17
    3522:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3524:	0e 94 60 19 	call	0x32c0	; 0x32c0 <_ZN6String6concatEh>
    3528:	88 23       	and	r24, r24
    352a:	19 f4       	brne	.+6      	; 0x3532 <_ZplRK15StringSumHelperh+0x14>
    352c:	c8 01       	movw	r24, r16
    352e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_ZN6String10invalidateEv>
	return a;
}
    3532:	c8 01       	movw	r24, r16
    3534:	1f 91       	pop	r17
    3536:	0f 91       	pop	r16
    3538:	08 95       	ret

0000353a <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    353a:	0f 93       	push	r16
    353c:	1f 93       	push	r17
    353e:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3540:	0e 94 8d 19 	call	0x331a	; 0x331a <_ZN6String6concatEi>
    3544:	88 23       	and	r24, r24
    3546:	19 f4       	brne	.+6      	; 0x354e <_ZplRK15StringSumHelperi+0x14>
    3548:	c8 01       	movw	r24, r16
    354a:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_ZN6String10invalidateEv>
	return a;
}
    354e:	c8 01       	movw	r24, r16
    3550:	1f 91       	pop	r17
    3552:	0f 91       	pop	r16
    3554:	08 95       	ret

00003556 <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    3556:	0f 93       	push	r16
    3558:	1f 93       	push	r17
    355a:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    355c:	0e 94 bf 19 	call	0x337e	; 0x337e <_ZN6String6concatEj>
    3560:	88 23       	and	r24, r24
    3562:	19 f4       	brne	.+6      	; 0x356a <_ZplRK15StringSumHelperj+0x14>
    3564:	c8 01       	movw	r24, r16
    3566:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_ZN6String10invalidateEv>
	return a;
}
    356a:	c8 01       	movw	r24, r16
    356c:	1f 91       	pop	r17
    356e:	0f 91       	pop	r16
    3570:	08 95       	ret

00003572 <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    3572:	0f 93       	push	r16
    3574:	1f 93       	push	r17
    3576:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3578:	0e 94 ee 19 	call	0x33dc	; 0x33dc <_ZN6String6concatEl>
    357c:	88 23       	and	r24, r24
    357e:	19 f4       	brne	.+6      	; 0x3586 <_ZplRK15StringSumHelperl+0x14>
    3580:	c8 01       	movw	r24, r16
    3582:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_ZN6String10invalidateEv>
	return a;
}
    3586:	c8 01       	movw	r24, r16
    3588:	1f 91       	pop	r17
    358a:	0f 91       	pop	r16
    358c:	08 95       	ret

0000358e <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    358e:	0f 93       	push	r16
    3590:	1f 93       	push	r17
    3592:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    3594:	0e 94 21 1a 	call	0x3442	; 0x3442 <_ZN6String6concatEm>
    3598:	88 23       	and	r24, r24
    359a:	19 f4       	brne	.+6      	; 0x35a2 <_ZplRK15StringSumHelperm+0x14>
    359c:	c8 01       	movw	r24, r16
    359e:	0e 94 37 17 	call	0x2e6e	; 0x2e6e <_ZN6String10invalidateEv>
	return a;
}
    35a2:	c8 01       	movw	r24, r16
    35a4:	1f 91       	pop	r17
    35a6:	0f 91       	pop	r16
    35a8:	08 95       	ret

000035aa <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    35aa:	cf 93       	push	r28
    35ac:	df 93       	push	r29
    35ae:	fc 01       	movw	r30, r24
    35b0:	db 01       	movw	r26, r22
	if (!buffer || !s.buffer) {
    35b2:	80 81       	ld	r24, Z
    35b4:	91 81       	ldd	r25, Z+1	; 0x01
    35b6:	00 97       	sbiw	r24, 0x00	; 0
    35b8:	31 f0       	breq	.+12     	; 0x35c6 <_ZNK6String9compareToERKS_+0x1c>
    35ba:	6d 91       	ld	r22, X+
    35bc:	7c 91       	ld	r23, X
    35be:	11 97       	sbiw	r26, 0x01	; 1
    35c0:	61 15       	cp	r22, r1
    35c2:	71 05       	cpc	r23, r1
    35c4:	e9 f4       	brne	.+58     	; 0x3600 <_ZNK6String9compareToERKS_+0x56>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    35c6:	cd 91       	ld	r28, X+
    35c8:	dc 91       	ld	r29, X
    35ca:	11 97       	sbiw	r26, 0x01	; 1
    35cc:	20 97       	sbiw	r28, 0x00	; 0
    35ce:	69 f0       	breq	.+26     	; 0x35ea <_ZNK6String9compareToERKS_+0x40>
    35d0:	14 96       	adiw	r26, 0x04	; 4
    35d2:	2d 91       	ld	r18, X+
    35d4:	3c 91       	ld	r19, X
    35d6:	15 97       	sbiw	r26, 0x05	; 5
    35d8:	21 15       	cp	r18, r1
    35da:	31 05       	cpc	r19, r1
    35dc:	31 f0       	breq	.+12     	; 0x35ea <_ZNK6String9compareToERKS_+0x40>
    35de:	28 81       	ld	r18, Y
    35e0:	30 e0       	ldi	r19, 0x00	; 0
    35e2:	30 95       	com	r19
    35e4:	21 95       	neg	r18
    35e6:	3f 4f       	sbci	r19, 0xFF	; 255
    35e8:	12 c0       	rjmp	.+36     	; 0x360e <_ZNK6String9compareToERKS_+0x64>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    35ea:	00 97       	sbiw	r24, 0x00	; 0
    35ec:	71 f0       	breq	.+28     	; 0x360a <_ZNK6String9compareToERKS_+0x60>
    35ee:	24 81       	ldd	r18, Z+4	; 0x04
    35f0:	35 81       	ldd	r19, Z+5	; 0x05
    35f2:	21 15       	cp	r18, r1
    35f4:	31 05       	cpc	r19, r1
    35f6:	49 f0       	breq	.+18     	; 0x360a <_ZNK6String9compareToERKS_+0x60>
    35f8:	fc 01       	movw	r30, r24
    35fa:	20 81       	ld	r18, Z
    35fc:	30 e0       	ldi	r19, 0x00	; 0
    35fe:	07 c0       	rjmp	.+14     	; 0x360e <_ZNK6String9compareToERKS_+0x64>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    3600:	0e 94 54 28 	call	0x50a8	; 0x50a8 <strcmp>
    3604:	28 2f       	mov	r18, r24
    3606:	39 2f       	mov	r19, r25
    3608:	02 c0       	rjmp	.+4      	; 0x360e <_ZNK6String9compareToERKS_+0x64>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    360a:	20 e0       	ldi	r18, 0x00	; 0
    360c:	30 e0       	ldi	r19, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    360e:	c9 01       	movw	r24, r18
    3610:	df 91       	pop	r29
    3612:	cf 91       	pop	r28
    3614:	08 95       	ret

00003616 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    3616:	fc 01       	movw	r30, r24
    3618:	44 81       	ldd	r20, Z+4	; 0x04
    361a:	55 81       	ldd	r21, Z+5	; 0x05
    361c:	fb 01       	movw	r30, r22
    361e:	24 81       	ldd	r18, Z+4	; 0x04
    3620:	35 81       	ldd	r19, Z+5	; 0x05
    3622:	42 17       	cp	r20, r18
    3624:	53 07       	cpc	r21, r19
    3626:	29 f4       	brne	.+10     	; 0x3632 <_ZNK6String6equalsERKS_+0x1c>
    3628:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZNK6String9compareToERKS_>
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    362c:	21 e0       	ldi	r18, 0x01	; 1
    362e:	00 97       	sbiw	r24, 0x00	; 0
    3630:	09 f0       	breq	.+2      	; 0x3634 <_ZNK6String6equalsERKS_+0x1e>
{
	return (len == s2.len && compareTo(s2) == 0);
    3632:	20 e0       	ldi	r18, 0x00	; 0
}
    3634:	82 2f       	mov	r24, r18
    3636:	08 95       	ret

00003638 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
    3638:	fc 01       	movw	r30, r24
	if (len == 0) return (cstr == NULL || *cstr == 0);
    363a:	84 81       	ldd	r24, Z+4	; 0x04
    363c:	95 81       	ldd	r25, Z+5	; 0x05
    363e:	00 97       	sbiw	r24, 0x00	; 0
    3640:	41 f4       	brne	.+16     	; 0x3652 <_ZNK6String6equalsEPKc+0x1a>
    3642:	61 15       	cp	r22, r1
    3644:	71 05       	cpc	r23, r1
    3646:	19 f0       	breq	.+6      	; 0x364e <_ZNK6String6equalsEPKc+0x16>
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    3648:	81 e0       	ldi	r24, 0x01	; 1
    364a:	fb 01       	movw	r30, r22
    364c:	09 c0       	rjmp	.+18     	; 0x3660 <_ZNK6String6equalsEPKc+0x28>
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    364e:	81 e0       	ldi	r24, 0x01	; 1
    3650:	08 95       	ret
    3652:	01 90       	ld	r0, Z+
    3654:	f0 81       	ld	r31, Z
    3656:	e0 2d       	mov	r30, r0
	if (cstr == NULL) return buffer[0] == 0;
    3658:	61 15       	cp	r22, r1
    365a:	71 05       	cpc	r23, r1
    365c:	31 f4       	brne	.+12     	; 0x366a <_ZNK6String6equalsEPKc+0x32>
    365e:	81 e0       	ldi	r24, 0x01	; 1
    3660:	90 81       	ld	r25, Z
    3662:	99 23       	and	r25, r25
    3664:	59 f0       	breq	.+22     	; 0x367c <_ZNK6String6equalsEPKc+0x44>
    3666:	80 e0       	ldi	r24, 0x00	; 0
    3668:	08 95       	ret
	return strcmp(buffer, cstr) == 0;
    366a:	cf 01       	movw	r24, r30
    366c:	0e 94 54 28 	call	0x50a8	; 0x50a8 <strcmp>
    3670:	9c 01       	movw	r18, r24
    3672:	81 e0       	ldi	r24, 0x01	; 1
    3674:	21 15       	cp	r18, r1
    3676:	31 05       	cpc	r19, r1
    3678:	09 f0       	breq	.+2      	; 0x367c <_ZNK6String6equalsEPKc+0x44>
    367a:	80 e0       	ldi	r24, 0x00	; 0
}
    367c:	08 95       	ret

0000367e <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    367e:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZNK6String9compareToERKS_>
}
    3682:	89 2f       	mov	r24, r25
    3684:	88 1f       	adc	r24, r24
    3686:	88 27       	eor	r24, r24
    3688:	88 1f       	adc	r24, r24
    368a:	08 95       	ret

0000368c <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    368c:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZNK6String9compareToERKS_>
    3690:	21 e0       	ldi	r18, 0x01	; 1
    3692:	18 16       	cp	r1, r24
    3694:	19 06       	cpc	r1, r25
    3696:	0c f0       	brlt	.+2      	; 0x369a <_ZNK6StringgtERKS_+0xe>
    3698:	20 e0       	ldi	r18, 0x00	; 0
}
    369a:	82 2f       	mov	r24, r18
    369c:	08 95       	ret

0000369e <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    369e:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZNK6String9compareToERKS_>
    36a2:	21 e0       	ldi	r18, 0x01	; 1
    36a4:	18 16       	cp	r1, r24
    36a6:	19 06       	cpc	r1, r25
    36a8:	0c f4       	brge	.+2      	; 0x36ac <_ZNK6StringleERKS_+0xe>
    36aa:	20 e0       	ldi	r18, 0x00	; 0
}
    36ac:	82 2f       	mov	r24, r18
    36ae:	08 95       	ret

000036b0 <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    36b0:	0e 94 d5 1a 	call	0x35aa	; 0x35aa <_ZNK6String9compareToERKS_>
    36b4:	89 2f       	mov	r24, r25
    36b6:	80 95       	com	r24
}
    36b8:	88 1f       	adc	r24, r24
    36ba:	88 27       	eor	r24, r24
    36bc:	88 1f       	adc	r24, r24
    36be:	08 95       	ret

000036c0 <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    36c0:	ef 92       	push	r14
    36c2:	ff 92       	push	r15
    36c4:	0f 93       	push	r16
    36c6:	1f 93       	push	r17
    36c8:	cf 93       	push	r28
    36ca:	df 93       	push	r29
    36cc:	fc 01       	movw	r30, r24
    36ce:	db 01       	movw	r26, r22
	if (this == &s2) return 1;
    36d0:	86 17       	cp	r24, r22
    36d2:	97 07       	cpc	r25, r23
    36d4:	29 f1       	breq	.+74     	; 0x3720 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
	if (len != s2.len) return 0;
    36d6:	84 81       	ldd	r24, Z+4	; 0x04
    36d8:	95 81       	ldd	r25, Z+5	; 0x05
    36da:	14 96       	adiw	r26, 0x04	; 4
    36dc:	2d 91       	ld	r18, X+
    36de:	3c 91       	ld	r19, X
    36e0:	15 97       	sbiw	r26, 0x05	; 5
    36e2:	82 17       	cp	r24, r18
    36e4:	93 07       	cpc	r25, r19
    36e6:	f1 f4       	brne	.+60     	; 0x3724 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len == 0) return 1;
    36e8:	00 97       	sbiw	r24, 0x00	; 0
    36ea:	d1 f0       	breq	.+52     	; 0x3720 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
    36ec:	00 81       	ld	r16, Z
    36ee:	11 81       	ldd	r17, Z+1	; 0x01
    36f0:	cd 91       	ld	r28, X+
    36f2:	dc 91       	ld	r29, X
    36f4:	11 97       	sbiw	r26, 0x01	; 1
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    36f6:	0f c0       	rjmp	.+30     	; 0x3716 <_ZNK6String16equalsIgnoreCaseERKS_+0x56>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    36f8:	99 27       	eor	r25, r25
    36fa:	87 fd       	sbrc	r24, 7
    36fc:	90 95       	com	r25
    36fe:	0e 94 1e 28 	call	0x503c	; 0x503c <tolower>
    3702:	7c 01       	movw	r14, r24
    3704:	89 91       	ld	r24, Y+
    3706:	99 27       	eor	r25, r25
    3708:	87 fd       	sbrc	r24, 7
    370a:	90 95       	com	r25
    370c:	0e 94 1e 28 	call	0x503c	; 0x503c <tolower>
    3710:	e8 16       	cp	r14, r24
    3712:	f9 06       	cpc	r15, r25
    3714:	39 f4       	brne	.+14     	; 0x3724 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    3716:	f8 01       	movw	r30, r16
    3718:	81 91       	ld	r24, Z+
    371a:	8f 01       	movw	r16, r30
    371c:	88 23       	and	r24, r24
    371e:	61 f7       	brne	.-40     	; 0x36f8 <_ZNK6String16equalsIgnoreCaseERKS_+0x38>

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	01 c0       	rjmp	.+2      	; 0x3726 <_ZNK6String16equalsIgnoreCaseERKS_+0x66>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    3724:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return 1;
}
    3726:	df 91       	pop	r29
    3728:	cf 91       	pop	r28
    372a:	1f 91       	pop	r17
    372c:	0f 91       	pop	r16
    372e:	ff 90       	pop	r15
    3730:	ef 90       	pop	r14
    3732:	08 95       	ret

00003734 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    3734:	fc 01       	movw	r30, r24
    3736:	db 01       	movw	r26, r22
    3738:	ca 01       	movw	r24, r20
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    373a:	14 96       	adiw	r26, 0x04	; 4
    373c:	4d 91       	ld	r20, X+
    373e:	5c 91       	ld	r21, X
    3740:	15 97       	sbiw	r26, 0x05	; 5
    3742:	24 81       	ldd	r18, Z+4	; 0x04
    3744:	35 81       	ldd	r19, Z+5	; 0x05
    3746:	24 1b       	sub	r18, r20
    3748:	35 0b       	sbc	r19, r21
    374a:	28 17       	cp	r18, r24
    374c:	39 07       	cpc	r19, r25
    374e:	a0 f0       	brcs	.+40     	; 0x3778 <_ZNK6String10startsWithERKS_j+0x44>
    3750:	20 81       	ld	r18, Z
    3752:	31 81       	ldd	r19, Z+1	; 0x01
    3754:	21 15       	cp	r18, r1
    3756:	31 05       	cpc	r19, r1
    3758:	79 f0       	breq	.+30     	; 0x3778 <_ZNK6String10startsWithERKS_j+0x44>
    375a:	6d 91       	ld	r22, X+
    375c:	7c 91       	ld	r23, X
    375e:	11 97       	sbiw	r26, 0x01	; 1
    3760:	61 15       	cp	r22, r1
    3762:	71 05       	cpc	r23, r1
    3764:	59 f0       	breq	.+22     	; 0x377c <_ZNK6String10startsWithERKS_j+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    3766:	82 0f       	add	r24, r18
    3768:	93 1f       	adc	r25, r19
    376a:	0e 94 64 28 	call	0x50c8	; 0x50c8 <strncmp>
    376e:	9c 01       	movw	r18, r24
    3770:	81 e0       	ldi	r24, 0x01	; 1
    3772:	21 15       	cp	r18, r1
    3774:	31 05       	cpc	r19, r1
    3776:	19 f0       	breq	.+6      	; 0x377e <_ZNK6String10startsWithERKS_j+0x4a>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	08 95       	ret
    377c:	80 e0       	ldi	r24, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    377e:	08 95       	ret

00003780 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    3780:	fc 01       	movw	r30, r24
    3782:	44 81       	ldd	r20, Z+4	; 0x04
    3784:	55 81       	ldd	r21, Z+5	; 0x05
    3786:	fb 01       	movw	r30, r22
    3788:	24 81       	ldd	r18, Z+4	; 0x04
    378a:	35 81       	ldd	r19, Z+5	; 0x05
    378c:	42 17       	cp	r20, r18
    378e:	53 07       	cpc	r21, r19
    3790:	28 f0       	brcs	.+10     	; 0x379c <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
    3792:	40 e0       	ldi	r20, 0x00	; 0
    3794:	50 e0       	ldi	r21, 0x00	; 0
    3796:	0e 94 9a 1b 	call	0x3734	; 0x3734 <_ZNK6String10startsWithERKS_j>
    379a:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    379c:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
    379e:	08 95       	ret

000037a0 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    37a0:	fc 01       	movw	r30, r24
    37a2:	db 01       	movw	r26, r22
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    37a4:	84 81       	ldd	r24, Z+4	; 0x04
    37a6:	95 81       	ldd	r25, Z+5	; 0x05
    37a8:	14 96       	adiw	r26, 0x04	; 4
    37aa:	4d 91       	ld	r20, X+
    37ac:	5c 91       	ld	r21, X
    37ae:	15 97       	sbiw	r26, 0x05	; 5
    37b0:	84 17       	cp	r24, r20
    37b2:	95 07       	cpc	r25, r21
    37b4:	b0 f0       	brcs	.+44     	; 0x37e2 <_ZNK6String8endsWithERKS_+0x42>
    37b6:	20 81       	ld	r18, Z
    37b8:	31 81       	ldd	r19, Z+1	; 0x01
    37ba:	21 15       	cp	r18, r1
    37bc:	31 05       	cpc	r19, r1
    37be:	89 f0       	breq	.+34     	; 0x37e2 <_ZNK6String8endsWithERKS_+0x42>
    37c0:	6d 91       	ld	r22, X+
    37c2:	7c 91       	ld	r23, X
    37c4:	11 97       	sbiw	r26, 0x01	; 1
    37c6:	61 15       	cp	r22, r1
    37c8:	71 05       	cpc	r23, r1
    37ca:	69 f0       	breq	.+26     	; 0x37e6 <_ZNK6String8endsWithERKS_+0x46>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    37cc:	84 1b       	sub	r24, r20
    37ce:	95 0b       	sbc	r25, r21
    37d0:	82 0f       	add	r24, r18
    37d2:	93 1f       	adc	r25, r19
    37d4:	0e 94 54 28 	call	0x50a8	; 0x50a8 <strcmp>
    37d8:	9c 01       	movw	r18, r24
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	21 15       	cp	r18, r1
    37de:	31 05       	cpc	r19, r1
    37e0:	19 f0       	breq	.+6      	; 0x37e8 <_ZNK6String8endsWithERKS_+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	08 95       	ret
    37e6:	80 e0       	ldi	r24, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    37e8:	08 95       	ret

000037ea <_ZN6String9setCharAtEjc>:
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
    37ea:	fc 01       	movw	r30, r24
	if (loc < len) buffer[loc] = c;
    37ec:	84 81       	ldd	r24, Z+4	; 0x04
    37ee:	95 81       	ldd	r25, Z+5	; 0x05
    37f0:	68 17       	cp	r22, r24
    37f2:	79 07       	cpc	r23, r25
    37f4:	30 f4       	brcc	.+12     	; 0x3802 <_ZN6String9setCharAtEjc+0x18>
    37f6:	01 90       	ld	r0, Z+
    37f8:	f0 81       	ld	r31, Z
    37fa:	e0 2d       	mov	r30, r0
    37fc:	e6 0f       	add	r30, r22
    37fe:	f7 1f       	adc	r31, r23
    3800:	40 83       	st	Z, r20
    3802:	08 95       	ret

00003804 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
    3804:	fc 01       	movw	r30, r24
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    3806:	84 81       	ldd	r24, Z+4	; 0x04
    3808:	95 81       	ldd	r25, Z+5	; 0x05
    380a:	68 17       	cp	r22, r24
    380c:	79 07       	cpc	r23, r25
    380e:	20 f4       	brcc	.+8      	; 0x3818 <_ZN6StringixEj+0x14>
    3810:	80 81       	ld	r24, Z
    3812:	91 81       	ldd	r25, Z+1	; 0x01
    3814:	00 97       	sbiw	r24, 0x00	; 0
    3816:	29 f4       	brne	.+10     	; 0x3822 <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    3818:	10 92 e4 03 	sts	0x03E4, r1
		return dummy_writable_char;
    381c:	64 ee       	ldi	r22, 0xE4	; 228
    381e:	73 e0       	ldi	r23, 0x03	; 3
    3820:	02 c0       	rjmp	.+4      	; 0x3826 <_ZN6StringixEj+0x22>
	}
	return buffer[index];
    3822:	68 0f       	add	r22, r24
    3824:	79 1f       	adc	r23, r25
}
    3826:	cb 01       	movw	r24, r22
    3828:	08 95       	ret

0000382a <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    382a:	fc 01       	movw	r30, r24
	if (index >= len || !buffer) return 0;
    382c:	84 81       	ldd	r24, Z+4	; 0x04
    382e:	95 81       	ldd	r25, Z+5	; 0x05
    3830:	68 17       	cp	r22, r24
    3832:	79 07       	cpc	r23, r25
    3834:	48 f4       	brcc	.+18     	; 0x3848 <_ZNK6StringixEj+0x1e>
    3836:	80 81       	ld	r24, Z
    3838:	91 81       	ldd	r25, Z+1	; 0x01
    383a:	00 97       	sbiw	r24, 0x00	; 0
    383c:	39 f0       	breq	.+14     	; 0x384c <_ZNK6StringixEj+0x22>
	return buffer[index];
    383e:	68 0f       	add	r22, r24
    3840:	79 1f       	adc	r23, r25
    3842:	fb 01       	movw	r30, r22
    3844:	80 81       	ld	r24, Z
    3846:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    3848:	80 e0       	ldi	r24, 0x00	; 0
    384a:	08 95       	ret
    384c:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    384e:	08 95       	ret

00003850 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    3850:	0e 94 15 1c 	call	0x382a	; 0x382a <_ZNK6StringixEj>
}
    3854:	08 95       	ret

00003856 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    3856:	0f 93       	push	r16
    3858:	1f 93       	push	r17
    385a:	cf 93       	push	r28
    385c:	df 93       	push	r29
    385e:	fc 01       	movw	r30, r24
    3860:	8b 01       	movw	r16, r22
	if (!bufsize || !buf) return;
    3862:	41 15       	cp	r20, r1
    3864:	51 05       	cpc	r21, r1
    3866:	f1 f0       	breq	.+60     	; 0x38a4 <_ZNK6String8getBytesEPhjj+0x4e>
    3868:	61 15       	cp	r22, r1
    386a:	71 05       	cpc	r23, r1
    386c:	d9 f0       	breq	.+54     	; 0x38a4 <_ZNK6String8getBytesEPhjj+0x4e>
	if (index >= len) {
    386e:	c4 81       	ldd	r28, Z+4	; 0x04
    3870:	d5 81       	ldd	r29, Z+5	; 0x05
    3872:	2c 17       	cp	r18, r28
    3874:	3d 07       	cpc	r19, r29
    3876:	18 f0       	brcs	.+6      	; 0x387e <_ZNK6String8getBytesEPhjj+0x28>
		buf[0] = 0;
    3878:	fb 01       	movw	r30, r22
    387a:	10 82       	st	Z, r1
		return;
    387c:	13 c0       	rjmp	.+38     	; 0x38a4 <_ZNK6String8getBytesEPhjj+0x4e>
	}
	unsigned int n = bufsize - 1;
    387e:	41 50       	subi	r20, 0x01	; 1
    3880:	50 40       	sbci	r21, 0x00	; 0
	if (n > len - index) n = len - index;
    3882:	c2 1b       	sub	r28, r18
    3884:	d3 0b       	sbc	r29, r19
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    3886:	4c 17       	cp	r20, r28
    3888:	5d 07       	cpc	r21, r29
    388a:	08 f4       	brcc	.+2      	; 0x388e <_ZNK6String8getBytesEPhjj+0x38>
    388c:	ea 01       	movw	r28, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    388e:	60 81       	ld	r22, Z
    3890:	71 81       	ldd	r23, Z+1	; 0x01
    3892:	62 0f       	add	r22, r18
    3894:	73 1f       	adc	r23, r19
    3896:	c8 01       	movw	r24, r16
    3898:	ae 01       	movw	r20, r28
    389a:	0e 94 72 28 	call	0x50e4	; 0x50e4 <strncpy>
	buf[n] = 0;
    389e:	c0 0f       	add	r28, r16
    38a0:	d1 1f       	adc	r29, r17
    38a2:	18 82       	st	Y, r1
}
    38a4:	df 91       	pop	r29
    38a6:	cf 91       	pop	r28
    38a8:	1f 91       	pop	r17
    38aa:	0f 91       	pop	r16
    38ac:	08 95       	ret

000038ae <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    38ae:	cf 93       	push	r28
    38b0:	df 93       	push	r29
    38b2:	fc 01       	movw	r30, r24
    38b4:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    38b6:	24 81       	ldd	r18, Z+4	; 0x04
    38b8:	35 81       	ldd	r19, Z+5	; 0x05
    38ba:	42 17       	cp	r20, r18
    38bc:	53 07       	cpc	r21, r19
    38be:	78 f4       	brcc	.+30     	; 0x38de <_ZNK6String7indexOfEcj+0x30>
	const char* temp = strchr(buffer + fromIndex, ch);
    38c0:	c0 81       	ld	r28, Z
    38c2:	d1 81       	ldd	r29, Z+1	; 0x01
    38c4:	77 27       	eor	r23, r23
    38c6:	67 fd       	sbrc	r22, 7
    38c8:	70 95       	com	r23
    38ca:	8c 0f       	add	r24, r28
    38cc:	9d 1f       	adc	r25, r29
    38ce:	0e 94 49 28 	call	0x5092	; 0x5092 <strchr>
	if (temp == NULL) return -1;
    38d2:	00 97       	sbiw	r24, 0x00	; 0
    38d4:	21 f0       	breq	.+8      	; 0x38de <_ZNK6String7indexOfEcj+0x30>
	return temp - buffer;
    38d6:	9c 01       	movw	r18, r24
    38d8:	2c 1b       	sub	r18, r28
    38da:	3d 0b       	sbc	r19, r29
    38dc:	02 c0       	rjmp	.+4      	; 0x38e2 <_ZNK6String7indexOfEcj+0x34>

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
    38de:	2f ef       	ldi	r18, 0xFF	; 255
    38e0:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    38e2:	c9 01       	movw	r24, r18
    38e4:	df 91       	pop	r29
    38e6:	cf 91       	pop	r28
    38e8:	08 95       	ret

000038ea <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    38ea:	40 e0       	ldi	r20, 0x00	; 0
    38ec:	50 e0       	ldi	r21, 0x00	; 0
    38ee:	0e 94 57 1c 	call	0x38ae	; 0x38ae <_ZNK6String7indexOfEcj>
}
    38f2:	08 95       	ret

000038f4 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    38f4:	cf 93       	push	r28
    38f6:	df 93       	push	r29
    38f8:	fc 01       	movw	r30, r24
    38fa:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    38fc:	24 81       	ldd	r18, Z+4	; 0x04
    38fe:	35 81       	ldd	r19, Z+5	; 0x05
    3900:	42 17       	cp	r20, r18
    3902:	53 07       	cpc	r21, r19
    3904:	78 f4       	brcc	.+30     	; 0x3924 <_ZNK6String7indexOfERKS_j+0x30>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    3906:	c0 81       	ld	r28, Z
    3908:	d1 81       	ldd	r29, Z+1	; 0x01
    390a:	fb 01       	movw	r30, r22
    390c:	60 81       	ld	r22, Z
    390e:	71 81       	ldd	r23, Z+1	; 0x01
    3910:	8c 0f       	add	r24, r28
    3912:	9d 1f       	adc	r25, r29
    3914:	0e 94 8c 28 	call	0x5118	; 0x5118 <strstr>
	if (found == NULL) return -1;
    3918:	00 97       	sbiw	r24, 0x00	; 0
    391a:	21 f0       	breq	.+8      	; 0x3924 <_ZNK6String7indexOfERKS_j+0x30>
	return found - buffer;
    391c:	9c 01       	movw	r18, r24
    391e:	2c 1b       	sub	r18, r28
    3920:	3d 0b       	sbc	r19, r29
    3922:	02 c0       	rjmp	.+4      	; 0x3928 <_ZNK6String7indexOfERKS_j+0x34>

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
    3924:	2f ef       	ldi	r18, 0xFF	; 255
    3926:	3f ef       	ldi	r19, 0xFF	; 255
	return found - buffer;
}
    3928:	c9 01       	movw	r24, r18
    392a:	df 91       	pop	r29
    392c:	cf 91       	pop	r28
    392e:	08 95       	ret

00003930 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    3930:	40 e0       	ldi	r20, 0x00	; 0
    3932:	50 e0       	ldi	r21, 0x00	; 0
    3934:	0e 94 7a 1c 	call	0x38f4	; 0x38f4 <_ZNK6String7indexOfERKS_j>
}
    3938:	08 95       	ret

0000393a <_ZNK6String11lastIndexOfEcj>:
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    393a:	df 92       	push	r13
    393c:	ef 92       	push	r14
    393e:	ff 92       	push	r15
    3940:	0f 93       	push	r16
    3942:	1f 93       	push	r17
    3944:	cf 93       	push	r28
    3946:	df 93       	push	r29
    3948:	ec 01       	movw	r28, r24
	if (fromIndex >= len || fromIndex < 0) return -1;
    394a:	8c 81       	ldd	r24, Y+4	; 0x04
    394c:	9d 81       	ldd	r25, Y+5	; 0x05
    394e:	48 17       	cp	r20, r24
    3950:	59 07       	cpc	r21, r25
    3952:	f8 f4       	brcc	.+62     	; 0x3992 <_ZNK6String11lastIndexOfEcj+0x58>
	char tempchar = buffer[fromIndex + 1];
    3954:	7a 01       	movw	r14, r20
    3956:	08 94       	sec
    3958:	e1 1c       	adc	r14, r1
    395a:	f1 1c       	adc	r15, r1
    395c:	e8 81       	ld	r30, Y
    395e:	f9 81       	ldd	r31, Y+1	; 0x01
    3960:	ee 0d       	add	r30, r14
    3962:	ff 1d       	adc	r31, r15
    3964:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    3966:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    3968:	08 81       	ld	r16, Y
    396a:	19 81       	ldd	r17, Y+1	; 0x01
    396c:	77 27       	eor	r23, r23
    396e:	67 fd       	sbrc	r22, 7
    3970:	70 95       	com	r23
    3972:	c8 01       	movw	r24, r16
    3974:	0e 94 81 28 	call	0x5102	; 0x5102 <strrchr>
	buffer[fromIndex + 1] = tempchar;
    3978:	0e 0d       	add	r16, r14
    397a:	1f 1d       	adc	r17, r15
    397c:	f8 01       	movw	r30, r16
    397e:	d0 82       	st	Z, r13
	if (temp == NULL) return -1;
    3980:	00 97       	sbiw	r24, 0x00	; 0
    3982:	39 f0       	breq	.+14     	; 0x3992 <_ZNK6String11lastIndexOfEcj+0x58>
	return temp - buffer;
    3984:	28 81       	ld	r18, Y
    3986:	39 81       	ldd	r19, Y+1	; 0x01
    3988:	ac 01       	movw	r20, r24
    398a:	42 1b       	sub	r20, r18
    398c:	53 0b       	sbc	r21, r19
    398e:	9a 01       	movw	r18, r20
    3990:	02 c0       	rjmp	.+4      	; 0x3996 <_ZNK6String11lastIndexOfEcj+0x5c>
	if (fromIndex >= len || fromIndex < 0) return -1;
	char tempchar = buffer[fromIndex + 1];
	buffer[fromIndex + 1] = '\0';
	char* temp = strrchr( buffer, ch );
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
    3992:	2f ef       	ldi	r18, 0xFF	; 255
    3994:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    3996:	c9 01       	movw	r24, r18
    3998:	df 91       	pop	r29
    399a:	cf 91       	pop	r28
    399c:	1f 91       	pop	r17
    399e:	0f 91       	pop	r16
    39a0:	ff 90       	pop	r15
    39a2:	ef 90       	pop	r14
    39a4:	df 90       	pop	r13
    39a6:	08 95       	ret

000039a8 <_ZNK6String11lastIndexOfEc>:
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
    39a8:	fc 01       	movw	r30, r24
    39aa:	44 81       	ldd	r20, Z+4	; 0x04
    39ac:	55 81       	ldd	r21, Z+5	; 0x05
    39ae:	41 50       	subi	r20, 0x01	; 1
    39b0:	50 40       	sbci	r21, 0x00	; 0
    39b2:	0e 94 9d 1c 	call	0x393a	; 0x393a <_ZNK6String11lastIndexOfEcj>
}
    39b6:	08 95       	ret

000039b8 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    39b8:	af 92       	push	r10
    39ba:	bf 92       	push	r11
    39bc:	cf 92       	push	r12
    39be:	df 92       	push	r13
    39c0:	ef 92       	push	r14
    39c2:	ff 92       	push	r15
    39c4:	0f 93       	push	r16
    39c6:	1f 93       	push	r17
    39c8:	cf 93       	push	r28
    39ca:	df 93       	push	r29
    39cc:	fc 01       	movw	r30, r24
    39ce:	6b 01       	movw	r12, r22
    39d0:	8a 01       	movw	r16, r20
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    39d2:	db 01       	movw	r26, r22
    39d4:	14 96       	adiw	r26, 0x04	; 4
    39d6:	2d 91       	ld	r18, X+
    39d8:	3c 91       	ld	r19, X
    39da:	15 97       	sbiw	r26, 0x05	; 5
    39dc:	21 15       	cp	r18, r1
    39de:	31 05       	cpc	r19, r1
    39e0:	51 f1       	breq	.+84     	; 0x3a36 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    39e2:	84 81       	ldd	r24, Z+4	; 0x04
    39e4:	95 81       	ldd	r25, Z+5	; 0x05
    39e6:	00 97       	sbiw	r24, 0x00	; 0
    39e8:	31 f1       	breq	.+76     	; 0x3a36 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    39ea:	82 17       	cp	r24, r18
    39ec:	93 07       	cpc	r25, r19
    39ee:	18 f1       	brcs	.+70     	; 0x3a36 <_ZNK6String11lastIndexOfERKS_j+0x7e>
	if (fromIndex >= len) fromIndex = len - 1;
    39f0:	48 17       	cp	r20, r24
    39f2:	59 07       	cpc	r21, r25
    39f4:	18 f0       	brcs	.+6      	; 0x39fc <_ZNK6String11lastIndexOfERKS_j+0x44>
    39f6:	8c 01       	movw	r16, r24
    39f8:	01 50       	subi	r16, 0x01	; 1
    39fa:	10 40       	sbci	r17, 0x00	; 0
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    39fc:	e0 80       	ld	r14, Z
    39fe:	f1 80       	ldd	r15, Z+1	; 0x01
    3a00:	c7 01       	movw	r24, r14

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    3a02:	cf ef       	ldi	r28, 0xFF	; 255
    3a04:	df ef       	ldi	r29, 0xFF	; 255
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3a06:	57 01       	movw	r10, r14
    3a08:	a0 0e       	add	r10, r16
    3a0a:	b1 1e       	adc	r11, r17
    3a0c:	10 c0       	rjmp	.+32     	; 0x3a2e <_ZNK6String11lastIndexOfERKS_j+0x76>
		p = strstr(p, s2.buffer);
    3a0e:	f6 01       	movw	r30, r12
    3a10:	60 81       	ld	r22, Z
    3a12:	71 81       	ldd	r23, Z+1	; 0x01
    3a14:	0e 94 8c 28 	call	0x5118	; 0x5118 <strstr>
		if (!p) break;
    3a18:	00 97       	sbiw	r24, 0x00	; 0
    3a1a:	79 f0       	breq	.+30     	; 0x3a3a <_ZNK6String11lastIndexOfERKS_j+0x82>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    3a1c:	9c 01       	movw	r18, r24
    3a1e:	2e 19       	sub	r18, r14
    3a20:	3f 09       	sbc	r19, r15
    3a22:	02 17       	cp	r16, r18
    3a24:	13 07       	cpc	r17, r19
    3a26:	08 f4       	brcc	.+2      	; 0x3a2a <_ZNK6String11lastIndexOfERKS_j+0x72>
    3a28:	9e 01       	movw	r18, r28
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3a2a:	01 96       	adiw	r24, 0x01	; 1
    3a2c:	e9 01       	movw	r28, r18
    3a2e:	a8 16       	cp	r10, r24
    3a30:	b9 06       	cpc	r11, r25
    3a32:	68 f7       	brcc	.-38     	; 0x3a0e <_ZNK6String11lastIndexOfERKS_j+0x56>
    3a34:	02 c0       	rjmp	.+4      	; 0x3a3a <_ZNK6String11lastIndexOfERKS_j+0x82>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    3a36:	cf ef       	ldi	r28, 0xFF	; 255
    3a38:	df ef       	ldi	r29, 0xFF	; 255
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    3a3a:	ce 01       	movw	r24, r28
    3a3c:	df 91       	pop	r29
    3a3e:	cf 91       	pop	r28
    3a40:	1f 91       	pop	r17
    3a42:	0f 91       	pop	r16
    3a44:	ff 90       	pop	r15
    3a46:	ef 90       	pop	r14
    3a48:	df 90       	pop	r13
    3a4a:	cf 90       	pop	r12
    3a4c:	bf 90       	pop	r11
    3a4e:	af 90       	pop	r10
    3a50:	08 95       	ret

00003a52 <_ZNK6String11lastIndexOfERKS_>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    3a52:	fc 01       	movw	r30, r24
    3a54:	44 81       	ldd	r20, Z+4	; 0x04
    3a56:	55 81       	ldd	r21, Z+5	; 0x05
    3a58:	fb 01       	movw	r30, r22
    3a5a:	24 81       	ldd	r18, Z+4	; 0x04
    3a5c:	35 81       	ldd	r19, Z+5	; 0x05
    3a5e:	42 1b       	sub	r20, r18
    3a60:	53 0b       	sbc	r21, r19
    3a62:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <_ZNK6String11lastIndexOfERKS_j>
}
    3a66:	08 95       	ret

00003a68 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    3a68:	af 92       	push	r10
    3a6a:	bf 92       	push	r11
    3a6c:	cf 92       	push	r12
    3a6e:	df 92       	push	r13
    3a70:	ef 92       	push	r14
    3a72:	ff 92       	push	r15
    3a74:	0f 93       	push	r16
    3a76:	1f 93       	push	r17
    3a78:	cf 93       	push	r28
    3a7a:	df 93       	push	r29
    3a7c:	f8 2e       	mov	r15, r24
    3a7e:	e9 2e       	mov	r14, r25
    3a80:	6b 01       	movw	r12, r22
    3a82:	8a 01       	movw	r16, r20
    3a84:	e9 01       	movw	r28, r18
	if (left > right) {
    3a86:	24 17       	cp	r18, r20
    3a88:	35 07       	cpc	r19, r21
    3a8a:	48 f4       	brcc	.+18     	; 0x3a9e <_ZNK6String9substringEjj+0x36>
    3a8c:	34 2f       	mov	r19, r20
    3a8e:	21 2f       	mov	r18, r17
    3a90:	8e 01       	movw	r16, r28
    3a92:	c9 01       	movw	r24, r18
    3a94:	a9 2e       	mov	r10, r25
    3a96:	e5 01       	movw	r28, r10
    3a98:	5e 01       	movw	r10, r28
    3a9a:	b2 2e       	mov	r11, r18
    3a9c:	e5 01       	movw	r28, r10
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    3a9e:	8f 2d       	mov	r24, r15
    3aa0:	9e 2d       	mov	r25, r14
    3aa2:	6d ed       	ldi	r22, 0xDD	; 221
    3aa4:	71 e0       	ldi	r23, 0x01	; 1
    3aa6:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <_ZN6StringC1EPKc>
	if (left > len) return out;
    3aaa:	d6 01       	movw	r26, r12
    3aac:	14 96       	adiw	r26, 0x04	; 4
    3aae:	8d 91       	ld	r24, X+
    3ab0:	9c 91       	ld	r25, X
    3ab2:	15 97       	sbiw	r26, 0x05	; 5
    3ab4:	80 17       	cp	r24, r16
    3ab6:	91 07       	cpc	r25, r17
    3ab8:	d8 f0       	brcs	.+54     	; 0x3af0 <_ZNK6String9substringEjj+0x88>
    3aba:	8c 17       	cp	r24, r28
    3abc:	9d 07       	cpc	r25, r29
    3abe:	08 f4       	brcc	.+2      	; 0x3ac2 <_ZNK6String9substringEjj+0x5a>
    3ac0:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    3ac2:	d6 01       	movw	r26, r12
    3ac4:	ed 91       	ld	r30, X+
    3ac6:	fc 91       	ld	r31, X
    3ac8:	11 97       	sbiw	r26, 0x01	; 1
    3aca:	ec 0f       	add	r30, r28
    3acc:	fd 1f       	adc	r31, r29
    3ace:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    3ad0:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    3ad2:	6d 91       	ld	r22, X+
    3ad4:	7c 91       	ld	r23, X
    3ad6:	60 0f       	add	r22, r16
    3ad8:	71 1f       	adc	r23, r17
    3ada:	8f 2d       	mov	r24, r15
    3adc:	9e 2d       	mov	r25, r14
    3ade:	0e 94 e4 17 	call	0x2fc8	; 0x2fc8 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    3ae2:	d6 01       	movw	r26, r12
    3ae4:	ed 91       	ld	r30, X+
    3ae6:	fc 91       	ld	r31, X
    3ae8:	11 97       	sbiw	r26, 0x01	; 1
    3aea:	ec 0f       	add	r30, r28
    3aec:	fd 1f       	adc	r31, r29
    3aee:	b0 82       	st	Z, r11
	return out;
}
    3af0:	8f 2d       	mov	r24, r15
    3af2:	9e 2d       	mov	r25, r14
    3af4:	df 91       	pop	r29
    3af6:	cf 91       	pop	r28
    3af8:	1f 91       	pop	r17
    3afa:	0f 91       	pop	r16
    3afc:	ff 90       	pop	r15
    3afe:	ef 90       	pop	r14
    3b00:	df 90       	pop	r13
    3b02:	cf 90       	pop	r12
    3b04:	bf 90       	pop	r11
    3b06:	af 90       	pop	r10
    3b08:	08 95       	ret

00003b0a <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    3b0a:	cf 93       	push	r28
    3b0c:	df 93       	push	r29
    3b0e:	ec 01       	movw	r28, r24
	return substring(left, len);
    3b10:	fb 01       	movw	r30, r22
    3b12:	24 81       	ldd	r18, Z+4	; 0x04
    3b14:	35 81       	ldd	r19, Z+5	; 0x05
    3b16:	0e 94 34 1d 	call	0x3a68	; 0x3a68 <_ZNK6String9substringEjj>
}
    3b1a:	ce 01       	movw	r24, r28
    3b1c:	df 91       	pop	r29
    3b1e:	cf 91       	pop	r28
    3b20:	08 95       	ret

00003b22 <_ZN6String7replaceEcc>:
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    3b22:	dc 01       	movw	r26, r24
    3b24:	ed 91       	ld	r30, X+
    3b26:	fc 91       	ld	r31, X
    3b28:	11 97       	sbiw	r26, 0x01	; 1
    3b2a:	30 97       	sbiw	r30, 0x00	; 0
    3b2c:	29 f4       	brne	.+10     	; 0x3b38 <_ZN6String7replaceEcc+0x16>
    3b2e:	08 95       	ret
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    3b30:	86 17       	cp	r24, r22
    3b32:	09 f4       	brne	.+2      	; 0x3b36 <_ZN6String7replaceEcc+0x14>
    3b34:	40 83       	st	Z, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3b36:	31 96       	adiw	r30, 0x01	; 1
    3b38:	80 81       	ld	r24, Z
    3b3a:	88 23       	and	r24, r24
    3b3c:	c9 f7       	brne	.-14     	; 0x3b30 <_ZN6String7replaceEcc+0xe>
    3b3e:	08 95       	ret

00003b40 <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    3b40:	2f 92       	push	r2
    3b42:	3f 92       	push	r3
    3b44:	4f 92       	push	r4
    3b46:	5f 92       	push	r5
    3b48:	6f 92       	push	r6
    3b4a:	7f 92       	push	r7
    3b4c:	8f 92       	push	r8
    3b4e:	9f 92       	push	r9
    3b50:	af 92       	push	r10
    3b52:	bf 92       	push	r11
    3b54:	cf 92       	push	r12
    3b56:	df 92       	push	r13
    3b58:	ef 92       	push	r14
    3b5a:	ff 92       	push	r15
    3b5c:	0f 93       	push	r16
    3b5e:	1f 93       	push	r17
    3b60:	cf 93       	push	r28
    3b62:	df 93       	push	r29
    3b64:	7c 01       	movw	r14, r24
    3b66:	2b 01       	movw	r4, r22
    3b68:	6a 01       	movw	r12, r20
	if (len == 0 || find.len == 0) return;
    3b6a:	dc 01       	movw	r26, r24
    3b6c:	14 96       	adiw	r26, 0x04	; 4
    3b6e:	6d 90       	ld	r6, X+
    3b70:	7c 90       	ld	r7, X
    3b72:	15 97       	sbiw	r26, 0x05	; 5
    3b74:	61 14       	cp	r6, r1
    3b76:	71 04       	cpc	r7, r1
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <_ZN6String7replaceERKS_S1_+0x3c>
    3b7a:	d9 c0       	rjmp	.+434    	; 0x3d2e <_ZN6String7replaceERKS_S1_+0x1ee>
    3b7c:	fb 01       	movw	r30, r22
    3b7e:	84 80       	ldd	r8, Z+4	; 0x04
    3b80:	95 80       	ldd	r9, Z+5	; 0x05
    3b82:	81 14       	cp	r8, r1
    3b84:	91 04       	cpc	r9, r1
    3b86:	09 f4       	brne	.+2      	; 0x3b8a <_ZN6String7replaceERKS_S1_+0x4a>
    3b88:	d2 c0       	rjmp	.+420    	; 0x3d2e <_ZN6String7replaceERKS_S1_+0x1ee>
	int diff = replace.len - find.len;
    3b8a:	da 01       	movw	r26, r20
    3b8c:	14 96       	adiw	r26, 0x04	; 4
    3b8e:	ad 90       	ld	r10, X+
    3b90:	bc 90       	ld	r11, X
    3b92:	15 97       	sbiw	r26, 0x05	; 5
    3b94:	a8 18       	sub	r10, r8
    3b96:	b9 08       	sbc	r11, r9
	char *readFrom = buffer;
    3b98:	fc 01       	movw	r30, r24
    3b9a:	00 81       	ld	r16, Z
    3b9c:	11 81       	ldd	r17, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    3b9e:	a1 14       	cp	r10, r1
    3ba0:	b1 04       	cpc	r11, r1
    3ba2:	f1 f4       	brne	.+60     	; 0x3be0 <_ZN6String7replaceERKS_S1_+0xa0>
    3ba4:	13 c0       	rjmp	.+38     	; 0x3bcc <_ZN6String7replaceERKS_S1_+0x8c>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    3ba6:	d6 01       	movw	r26, r12
    3ba8:	6c 91       	ld	r22, X
    3baa:	11 96       	adiw	r26, 0x01	; 1
    3bac:	7c 91       	ld	r23, X
    3bae:	11 97       	sbiw	r26, 0x01	; 1
    3bb0:	14 96       	adiw	r26, 0x04	; 4
    3bb2:	4d 91       	ld	r20, X+
    3bb4:	5c 91       	ld	r21, X
    3bb6:	15 97       	sbiw	r26, 0x05	; 5
    3bb8:	ce 01       	movw	r24, r28
    3bba:	0e 94 2e 28 	call	0x505c	; 0x505c <memcpy>
			readFrom = foundAt + replace.len;
    3bbe:	d6 01       	movw	r26, r12
    3bc0:	14 96       	adiw	r26, 0x04	; 4
    3bc2:	0d 91       	ld	r16, X+
    3bc4:	1c 91       	ld	r17, X
    3bc6:	15 97       	sbiw	r26, 0x05	; 5
    3bc8:	0c 0f       	add	r16, r28
    3bca:	1d 1f       	adc	r17, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3bcc:	f2 01       	movw	r30, r4
    3bce:	60 81       	ld	r22, Z
    3bd0:	71 81       	ldd	r23, Z+1	; 0x01
    3bd2:	c8 01       	movw	r24, r16
    3bd4:	0e 94 8c 28 	call	0x5118	; 0x5118 <strstr>
    3bd8:	ec 01       	movw	r28, r24
    3bda:	00 97       	sbiw	r24, 0x00	; 0
    3bdc:	21 f7       	brne	.-56     	; 0x3ba6 <_ZN6String7replaceERKS_S1_+0x66>
    3bde:	a7 c0       	rjmp	.+334    	; 0x3d2e <_ZN6String7replaceERKS_S1_+0x1ee>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    3be0:	b7 fc       	sbrc	r11, 7
    3be2:	02 c0       	rjmp	.+4      	; 0x3be8 <_ZN6String7replaceERKS_S1_+0xa8>
    3be4:	e3 01       	movw	r28, r6
    3be6:	42 c0       	rjmp	.+132    	; 0x3c6c <_ZN6String7replaceERKS_S1_+0x12c>
    3be8:	48 01       	movw	r8, r16
    3bea:	2d c0       	rjmp	.+90     	; 0x3c46 <_ZN6String7replaceERKS_S1_+0x106>
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    3bec:	e3 01       	movw	r28, r6
    3bee:	c0 1b       	sub	r28, r16
    3bf0:	d1 0b       	sbc	r29, r17
			memcpy(writeTo, readFrom, n);
    3bf2:	c4 01       	movw	r24, r8
    3bf4:	b8 01       	movw	r22, r16
    3bf6:	ae 01       	movw	r20, r28
    3bf8:	0e 94 2e 28 	call	0x505c	; 0x505c <memcpy>
			writeTo += n;
    3bfc:	c8 0d       	add	r28, r8
    3bfe:	d9 1d       	adc	r29, r9
			memcpy(writeTo, replace.buffer, replace.len);
    3c00:	d6 01       	movw	r26, r12
    3c02:	6c 91       	ld	r22, X
    3c04:	11 96       	adiw	r26, 0x01	; 1
    3c06:	7c 91       	ld	r23, X
    3c08:	11 97       	sbiw	r26, 0x01	; 1
    3c0a:	14 96       	adiw	r26, 0x04	; 4
    3c0c:	4d 91       	ld	r20, X+
    3c0e:	5c 91       	ld	r21, X
    3c10:	15 97       	sbiw	r26, 0x05	; 5
    3c12:	ce 01       	movw	r24, r28
    3c14:	0e 94 2e 28 	call	0x505c	; 0x505c <memcpy>
			writeTo += replace.len;
    3c18:	d6 01       	movw	r26, r12
    3c1a:	14 96       	adiw	r26, 0x04	; 4
    3c1c:	8d 90       	ld	r8, X+
    3c1e:	9c 90       	ld	r9, X
    3c20:	15 97       	sbiw	r26, 0x05	; 5
    3c22:	8c 0e       	add	r8, r28
    3c24:	9d 1e       	adc	r9, r29
			readFrom = foundAt + find.len;
    3c26:	f2 01       	movw	r30, r4
    3c28:	04 81       	ldd	r16, Z+4	; 0x04
    3c2a:	15 81       	ldd	r17, Z+5	; 0x05
    3c2c:	06 0d       	add	r16, r6
    3c2e:	17 1d       	adc	r17, r7
			len += diff;
    3c30:	d7 01       	movw	r26, r14
    3c32:	14 96       	adiw	r26, 0x04	; 4
    3c34:	8d 91       	ld	r24, X+
    3c36:	9c 91       	ld	r25, X
    3c38:	15 97       	sbiw	r26, 0x05	; 5
    3c3a:	8a 0d       	add	r24, r10
    3c3c:	9b 1d       	adc	r25, r11
    3c3e:	15 96       	adiw	r26, 0x05	; 5
    3c40:	9c 93       	st	X, r25
    3c42:	8e 93       	st	-X, r24
    3c44:	14 97       	sbiw	r26, 0x04	; 4
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3c46:	f2 01       	movw	r30, r4
    3c48:	60 81       	ld	r22, Z
    3c4a:	71 81       	ldd	r23, Z+1	; 0x01
    3c4c:	c8 01       	movw	r24, r16
    3c4e:	0e 94 8c 28 	call	0x5118	; 0x5118 <strstr>
    3c52:	3c 01       	movw	r6, r24
    3c54:	00 97       	sbiw	r24, 0x00	; 0
    3c56:	51 f6       	brne	.-108    	; 0x3bec <_ZN6String7replaceERKS_S1_+0xac>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    3c58:	c4 01       	movw	r24, r8
    3c5a:	b8 01       	movw	r22, r16
    3c5c:	0e 94 5d 28 	call	0x50ba	; 0x50ba <strcpy>
    3c60:	66 c0       	rjmp	.+204    	; 0x3d2e <_ZN6String7replaceERKS_S1_+0x1ee>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    3c62:	8c 01       	movw	r16, r24
    3c64:	08 0d       	add	r16, r8
    3c66:	19 1d       	adc	r17, r9
			size += diff;
    3c68:	ca 0d       	add	r28, r10
    3c6a:	db 1d       	adc	r29, r11
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3c6c:	d2 01       	movw	r26, r4
    3c6e:	6d 91       	ld	r22, X+
    3c70:	7c 91       	ld	r23, X
    3c72:	c8 01       	movw	r24, r16
    3c74:	0e 94 8c 28 	call	0x5118	; 0x5118 <strstr>
    3c78:	00 97       	sbiw	r24, 0x00	; 0
    3c7a:	99 f7       	brne	.-26     	; 0x3c62 <_ZN6String7replaceERKS_S1_+0x122>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    3c7c:	c6 15       	cp	r28, r6
    3c7e:	d7 05       	cpc	r29, r7
    3c80:	09 f4       	brne	.+2      	; 0x3c84 <_ZN6String7replaceERKS_S1_+0x144>
    3c82:	55 c0       	rjmp	.+170    	; 0x3d2e <_ZN6String7replaceERKS_S1_+0x1ee>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    3c84:	f7 01       	movw	r30, r14
    3c86:	82 81       	ldd	r24, Z+2	; 0x02
    3c88:	93 81       	ldd	r25, Z+3	; 0x03
    3c8a:	8c 17       	cp	r24, r28
    3c8c:	9d 07       	cpc	r25, r29
    3c8e:	08 f0       	brcs	.+2      	; 0x3c92 <_ZN6String7replaceERKS_S1_+0x152>
    3c90:	45 c0       	rjmp	.+138    	; 0x3d1c <_ZN6String7replaceERKS_S1_+0x1dc>
    3c92:	c7 01       	movw	r24, r14
    3c94:	be 01       	movw	r22, r28
    3c96:	0e 94 49 17 	call	0x2e92	; 0x2e92 <_ZN6String12changeBufferEj>
    3c9a:	88 23       	and	r24, r24
    3c9c:	09 f4       	brne	.+2      	; 0x3ca0 <_ZN6String7replaceERKS_S1_+0x160>
    3c9e:	47 c0       	rjmp	.+142    	; 0x3d2e <_ZN6String7replaceERKS_S1_+0x1ee>
    3ca0:	3d c0       	rjmp	.+122    	; 0x3d1c <_ZN6String7replaceERKS_S1_+0x1dc>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    3ca2:	c7 01       	movw	r24, r14
    3ca4:	b2 01       	movw	r22, r4
    3ca6:	a9 01       	movw	r20, r18
    3ca8:	0e 94 dc 1c 	call	0x39b8	; 0x39b8 <_ZNK6String11lastIndexOfERKS_j>
    3cac:	ec 01       	movw	r28, r24
    3cae:	97 fd       	sbrc	r25, 7
    3cb0:	3e c0       	rjmp	.+124    	; 0x3d2e <_ZN6String7replaceERKS_S1_+0x1ee>
			readFrom = buffer + index + find.len;
    3cb2:	d7 01       	movw	r26, r14
    3cb4:	6d 91       	ld	r22, X+
    3cb6:	7c 91       	ld	r23, X
    3cb8:	11 97       	sbiw	r26, 0x01	; 1
    3cba:	f2 01       	movw	r30, r4
    3cbc:	84 81       	ldd	r24, Z+4	; 0x04
    3cbe:	95 81       	ldd	r25, Z+5	; 0x05
    3cc0:	8c 0f       	add	r24, r28
    3cc2:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    3cc4:	68 0f       	add	r22, r24
    3cc6:	79 1f       	adc	r23, r25
    3cc8:	14 96       	adiw	r26, 0x04	; 4
    3cca:	4d 91       	ld	r20, X+
    3ccc:	5c 91       	ld	r21, X
    3cce:	15 97       	sbiw	r26, 0x05	; 5
    3cd0:	48 1b       	sub	r20, r24
    3cd2:	59 0b       	sbc	r21, r25
    3cd4:	cb 01       	movw	r24, r22
    3cd6:	8a 0d       	add	r24, r10
    3cd8:	9b 1d       	adc	r25, r11
    3cda:	0e 94 37 28 	call	0x506e	; 0x506e <memmove>
			len += diff;
    3cde:	d7 01       	movw	r26, r14
    3ce0:	14 96       	adiw	r26, 0x04	; 4
    3ce2:	8d 91       	ld	r24, X+
    3ce4:	9c 91       	ld	r25, X
    3ce6:	15 97       	sbiw	r26, 0x05	; 5
    3ce8:	8a 0d       	add	r24, r10
    3cea:	9b 1d       	adc	r25, r11
    3cec:	15 96       	adiw	r26, 0x05	; 5
    3cee:	9c 93       	st	X, r25
    3cf0:	8e 93       	st	-X, r24
    3cf2:	14 97       	sbiw	r26, 0x04	; 4
			buffer[len] = 0;
    3cf4:	ed 91       	ld	r30, X+
    3cf6:	fc 91       	ld	r31, X
    3cf8:	11 97       	sbiw	r26, 0x01	; 1
    3cfa:	e8 0f       	add	r30, r24
    3cfc:	f9 1f       	adc	r31, r25
    3cfe:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    3d00:	2d 91       	ld	r18, X+
    3d02:	3c 91       	ld	r19, X
    3d04:	2c 0f       	add	r18, r28
    3d06:	3d 1f       	adc	r19, r29
    3d08:	f6 01       	movw	r30, r12
    3d0a:	60 81       	ld	r22, Z
    3d0c:	71 81       	ldd	r23, Z+1	; 0x01
    3d0e:	44 81       	ldd	r20, Z+4	; 0x04
    3d10:	55 81       	ldd	r21, Z+5	; 0x05
    3d12:	c9 01       	movw	r24, r18
    3d14:	0e 94 2e 28 	call	0x505c	; 0x505c <memcpy>
			index--;
    3d18:	9e 01       	movw	r18, r28
    3d1a:	05 c0       	rjmp	.+10     	; 0x3d26 <_ZN6String7replaceERKS_S1_+0x1e6>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    3d1c:	d7 01       	movw	r26, r14
    3d1e:	14 96       	adiw	r26, 0x04	; 4
    3d20:	2d 91       	ld	r18, X+
    3d22:	3c 91       	ld	r19, X
    3d24:	15 97       	sbiw	r26, 0x05	; 5
    3d26:	21 50       	subi	r18, 0x01	; 1
    3d28:	30 40       	sbci	r19, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    3d2a:	37 ff       	sbrs	r19, 7
    3d2c:	ba cf       	rjmp	.-140    	; 0x3ca2 <_ZN6String7replaceERKS_S1_+0x162>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    3d2e:	df 91       	pop	r29
    3d30:	cf 91       	pop	r28
    3d32:	1f 91       	pop	r17
    3d34:	0f 91       	pop	r16
    3d36:	ff 90       	pop	r15
    3d38:	ef 90       	pop	r14
    3d3a:	df 90       	pop	r13
    3d3c:	cf 90       	pop	r12
    3d3e:	bf 90       	pop	r11
    3d40:	af 90       	pop	r10
    3d42:	9f 90       	pop	r9
    3d44:	8f 90       	pop	r8
    3d46:	7f 90       	pop	r7
    3d48:	6f 90       	pop	r6
    3d4a:	5f 90       	pop	r5
    3d4c:	4f 90       	pop	r4
    3d4e:	3f 90       	pop	r3
    3d50:	2f 90       	pop	r2
    3d52:	08 95       	ret

00003d54 <_ZN6String11toLowerCaseEv>:

void String::toLowerCase(void)
{
    3d54:	cf 93       	push	r28
    3d56:	df 93       	push	r29
	if (!buffer) return;
    3d58:	fc 01       	movw	r30, r24
    3d5a:	c0 81       	ld	r28, Z
    3d5c:	d1 81       	ldd	r29, Z+1	; 0x01
    3d5e:	20 97       	sbiw	r28, 0x00	; 0
    3d60:	39 f4       	brne	.+14     	; 0x3d70 <_ZN6String11toLowerCaseEv+0x1c>
    3d62:	09 c0       	rjmp	.+18     	; 0x3d76 <_ZN6String11toLowerCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
    3d64:	99 27       	eor	r25, r25
    3d66:	87 fd       	sbrc	r24, 7
    3d68:	90 95       	com	r25
    3d6a:	0e 94 1e 28 	call	0x503c	; 0x503c <tolower>
    3d6e:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3d70:	88 81       	ld	r24, Y
    3d72:	88 23       	and	r24, r24
    3d74:	b9 f7       	brne	.-18     	; 0x3d64 <_ZN6String11toLowerCaseEv+0x10>
		*p = tolower(*p);
	}
}
    3d76:	df 91       	pop	r29
    3d78:	cf 91       	pop	r28
    3d7a:	08 95       	ret

00003d7c <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    3d7c:	cf 93       	push	r28
    3d7e:	df 93       	push	r29
	if (!buffer) return;
    3d80:	fc 01       	movw	r30, r24
    3d82:	c0 81       	ld	r28, Z
    3d84:	d1 81       	ldd	r29, Z+1	; 0x01
    3d86:	20 97       	sbiw	r28, 0x00	; 0
    3d88:	39 f4       	brne	.+14     	; 0x3d98 <_ZN6String11toUpperCaseEv+0x1c>
    3d8a:	09 c0       	rjmp	.+18     	; 0x3d9e <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    3d8c:	99 27       	eor	r25, r25
    3d8e:	87 fd       	sbrc	r24, 7
    3d90:	90 95       	com	r25
    3d92:	0e 94 26 28 	call	0x504c	; 0x504c <toupper>
    3d96:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3d98:	88 81       	ld	r24, Y
    3d9a:	88 23       	and	r24, r24
    3d9c:	b9 f7       	brne	.-18     	; 0x3d8c <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    3d9e:	df 91       	pop	r29
    3da0:	cf 91       	pop	r28
    3da2:	08 95       	ret

00003da4 <_ZN6String4trimEv>:

void String::trim(void)
{
    3da4:	af 92       	push	r10
    3da6:	bf 92       	push	r11
    3da8:	cf 92       	push	r12
    3daa:	df 92       	push	r13
    3dac:	ef 92       	push	r14
    3dae:	ff 92       	push	r15
    3db0:	0f 93       	push	r16
    3db2:	1f 93       	push	r17
    3db4:	cf 93       	push	r28
    3db6:	df 93       	push	r29
    3db8:	6c 01       	movw	r12, r24
	if (!buffer || len == 0) return;
    3dba:	dc 01       	movw	r26, r24
    3dbc:	ed 90       	ld	r14, X+
    3dbe:	fc 90       	ld	r15, X
    3dc0:	11 97       	sbiw	r26, 0x01	; 1
    3dc2:	e1 14       	cp	r14, r1
    3dc4:	f1 04       	cpc	r15, r1
    3dc6:	09 f4       	brne	.+2      	; 0x3dca <_ZN6String4trimEv+0x26>
    3dc8:	43 c0       	rjmp	.+134    	; 0x3e50 <_ZN6String4trimEv+0xac>
    3dca:	14 96       	adiw	r26, 0x04	; 4
    3dcc:	ad 90       	ld	r10, X+
    3dce:	bc 90       	ld	r11, X
    3dd0:	15 97       	sbiw	r26, 0x05	; 5
    3dd2:	a1 14       	cp	r10, r1
    3dd4:	b1 04       	cpc	r11, r1
    3dd6:	e1 f1       	breq	.+120    	; 0x3e50 <_ZN6String4trimEv+0xac>
    3dd8:	87 01       	movw	r16, r14
    3dda:	e8 01       	movw	r28, r16
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    3ddc:	88 81       	ld	r24, Y
    3dde:	0f 5f       	subi	r16, 0xFF	; 255
    3de0:	1f 4f       	sbci	r17, 0xFF	; 255
    3de2:	99 27       	eor	r25, r25
    3de4:	87 fd       	sbrc	r24, 7
    3de6:	90 95       	com	r25
    3de8:	0e 94 16 28 	call	0x502c	; 0x502c <isspace>
    3dec:	00 97       	sbiw	r24, 0x00	; 0
    3dee:	a9 f7       	brne	.-22     	; 0x3dda <_ZN6String4trimEv+0x36>
	char *end = buffer + len - 1;
    3df0:	85 01       	movw	r16, r10
    3df2:	01 50       	subi	r16, 0x01	; 1
    3df4:	10 40       	sbci	r17, 0x00	; 0
    3df6:	0e 0d       	add	r16, r14
    3df8:	1f 1d       	adc	r17, r15
	while (isspace(*end) && end >= begin) end--;
    3dfa:	f8 01       	movw	r30, r16
    3dfc:	80 81       	ld	r24, Z
    3dfe:	99 27       	eor	r25, r25
    3e00:	87 fd       	sbrc	r24, 7
    3e02:	90 95       	com	r25
    3e04:	0e 94 16 28 	call	0x502c	; 0x502c <isspace>
    3e08:	00 97       	sbiw	r24, 0x00	; 0
    3e0a:	31 f0       	breq	.+12     	; 0x3e18 <_ZN6String4trimEv+0x74>
    3e0c:	0c 17       	cp	r16, r28
    3e0e:	1d 07       	cpc	r17, r29
    3e10:	18 f0       	brcs	.+6      	; 0x3e18 <_ZN6String4trimEv+0x74>
    3e12:	01 50       	subi	r16, 0x01	; 1
    3e14:	10 40       	sbci	r17, 0x00	; 0
    3e16:	f1 cf       	rjmp	.-30     	; 0x3dfa <_ZN6String4trimEv+0x56>
	len = end + 1 - begin;
    3e18:	0f 5f       	subi	r16, 0xFF	; 255
    3e1a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e1c:	0c 1b       	sub	r16, r28
    3e1e:	1d 0b       	sbc	r17, r29
    3e20:	d6 01       	movw	r26, r12
    3e22:	15 96       	adiw	r26, 0x05	; 5
    3e24:	1c 93       	st	X, r17
    3e26:	0e 93       	st	-X, r16
    3e28:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    3e2a:	ec 16       	cp	r14, r28
    3e2c:	fd 06       	cpc	r15, r29
    3e2e:	28 f4       	brcc	.+10     	; 0x3e3a <_ZN6String4trimEv+0x96>
    3e30:	c7 01       	movw	r24, r14
    3e32:	be 01       	movw	r22, r28
    3e34:	a8 01       	movw	r20, r16
    3e36:	0e 94 2e 28 	call	0x505c	; 0x505c <memcpy>
	buffer[len] = 0;
    3e3a:	d6 01       	movw	r26, r12
    3e3c:	ed 91       	ld	r30, X+
    3e3e:	fc 91       	ld	r31, X
    3e40:	11 97       	sbiw	r26, 0x01	; 1
    3e42:	14 96       	adiw	r26, 0x04	; 4
    3e44:	8d 91       	ld	r24, X+
    3e46:	9c 91       	ld	r25, X
    3e48:	15 97       	sbiw	r26, 0x05	; 5
    3e4a:	e8 0f       	add	r30, r24
    3e4c:	f9 1f       	adc	r31, r25
    3e4e:	10 82       	st	Z, r1
}
    3e50:	df 91       	pop	r29
    3e52:	cf 91       	pop	r28
    3e54:	1f 91       	pop	r17
    3e56:	0f 91       	pop	r16
    3e58:	ff 90       	pop	r15
    3e5a:	ef 90       	pop	r14
    3e5c:	df 90       	pop	r13
    3e5e:	cf 90       	pop	r12
    3e60:	bf 90       	pop	r11
    3e62:	af 90       	pop	r10
    3e64:	08 95       	ret

00003e66 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    3e66:	fc 01       	movw	r30, r24
    3e68:	80 81       	ld	r24, Z
    3e6a:	91 81       	ldd	r25, Z+1	; 0x01
    3e6c:	00 97       	sbiw	r24, 0x00	; 0
    3e6e:	29 f0       	breq	.+10     	; 0x3e7a <_ZNK6String5toIntEv+0x14>
    3e70:	0e 94 ef 27 	call	0x4fde	; 0x4fde <atol>
    3e74:	9b 01       	movw	r18, r22
    3e76:	ac 01       	movw	r20, r24
    3e78:	03 c0       	rjmp	.+6      	; 0x3e80 <_ZNK6String5toIntEv+0x1a>
	return 0;
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	a9 01       	movw	r20, r18
}
    3e80:	b9 01       	movw	r22, r18
    3e82:	ca 01       	movw	r24, r20
    3e84:	08 95       	ret

00003e86 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    3e86:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <malloc>
}
    3e8a:	08 95       	ret

00003e8c <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    3e8c:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <free>
} 
    3e90:	08 95       	ret

00003e92 <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    3e92:	21 e0       	ldi	r18, 0x01	; 1
    3e94:	30 e0       	ldi	r19, 0x00	; 0
    3e96:	fc 01       	movw	r30, r24
    3e98:	80 81       	ld	r24, Z
    3e9a:	88 23       	and	r24, r24
    3e9c:	11 f0       	breq	.+4      	; 0x3ea2 <__cxa_guard_acquire+0x10>
    3e9e:	20 e0       	ldi	r18, 0x00	; 0
    3ea0:	30 e0       	ldi	r19, 0x00	; 0
    3ea2:	c9 01       	movw	r24, r18
    3ea4:	08 95       	ret

00003ea6 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    3ea6:	21 e0       	ldi	r18, 0x01	; 1
    3ea8:	fc 01       	movw	r30, r24
    3eaa:	20 83       	st	Z, r18
    3eac:	08 95       	ret

00003eae <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    3eae:	08 95       	ret

00003eb0 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    3eb0:	08 95       	ret

00003eb2 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    3eb2:	cf 92       	push	r12
    3eb4:	df 92       	push	r13
    3eb6:	ef 92       	push	r14
    3eb8:	ff 92       	push	r15
    3eba:	0f 93       	push	r16
    3ebc:	1f 93       	push	r17
    3ebe:	cf 93       	push	r28
    3ec0:	df 93       	push	r29
    3ec2:	6c 01       	movw	r12, r24
    3ec4:	7b 01       	movw	r14, r22
    3ec6:	8a 01       	movw	r16, r20
  size_t n = 0;
    3ec8:	c0 e0       	ldi	r28, 0x00	; 0
    3eca:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    3ecc:	0f c0       	rjmp	.+30     	; 0x3eec <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
    3ece:	d7 01       	movw	r26, r14
    3ed0:	6d 91       	ld	r22, X+
    3ed2:	7d 01       	movw	r14, r26
    3ed4:	d6 01       	movw	r26, r12
    3ed6:	ed 91       	ld	r30, X+
    3ed8:	fc 91       	ld	r31, X
    3eda:	01 90       	ld	r0, Z+
    3edc:	f0 81       	ld	r31, Z
    3ede:	e0 2d       	mov	r30, r0
    3ee0:	c6 01       	movw	r24, r12
    3ee2:	09 95       	icall
    3ee4:	c8 0f       	add	r28, r24
    3ee6:	d9 1f       	adc	r29, r25
    3ee8:	01 50       	subi	r16, 0x01	; 1
    3eea:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    3eec:	01 15       	cp	r16, r1
    3eee:	11 05       	cpc	r17, r1
    3ef0:	71 f7       	brne	.-36     	; 0x3ece <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    3ef2:	ce 01       	movw	r24, r28
    3ef4:	df 91       	pop	r29
    3ef6:	cf 91       	pop	r28
    3ef8:	1f 91       	pop	r17
    3efa:	0f 91       	pop	r16
    3efc:	ff 90       	pop	r15
    3efe:	ef 90       	pop	r14
    3f00:	df 90       	pop	r13
    3f02:	cf 90       	pop	r12
    3f04:	08 95       	ret

00003f06 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    3f06:	db 01       	movw	r26, r22
    3f08:	0d 90       	ld	r0, X+
    3f0a:	00 20       	and	r0, r0
    3f0c:	e9 f7       	brne	.-6      	; 0x3f08 <_ZN5Print5writeEPKc+0x2>
    3f0e:	ad 01       	movw	r20, r26
    3f10:	41 50       	subi	r20, 0x01	; 1
    3f12:	50 40       	sbci	r21, 0x00	; 0
    3f14:	46 1b       	sub	r20, r22
    3f16:	57 0b       	sbc	r21, r23
    3f18:	dc 01       	movw	r26, r24
    3f1a:	ed 91       	ld	r30, X+
    3f1c:	fc 91       	ld	r31, X
    3f1e:	02 80       	ldd	r0, Z+2	; 0x02
    3f20:	f3 81       	ldd	r31, Z+3	; 0x03
    3f22:	e0 2d       	mov	r30, r0
    3f24:	09 95       	icall
    3f26:	08 95       	ret

00003f28 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    3f28:	ef 92       	push	r14
    3f2a:	ff 92       	push	r15
    3f2c:	0f 93       	push	r16
    3f2e:	1f 93       	push	r17
    3f30:	cf 93       	push	r28
    3f32:	df 93       	push	r29
    3f34:	7c 01       	movw	r14, r24
  const prog_char *p = (const prog_char *)ifsh;
    3f36:	06 2f       	mov	r16, r22
    3f38:	17 2f       	mov	r17, r23
  size_t n = 0;
    3f3a:	c0 e0       	ldi	r28, 0x00	; 0
    3f3c:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
    3f3e:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    3f40:	0f 5f       	subi	r16, 0xFF	; 255
    3f42:	1f 4f       	sbci	r17, 0xFF	; 255
    3f44:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    3f46:	66 23       	and	r22, r22
    3f48:	51 f0       	breq	.+20     	; 0x3f5e <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    3f4a:	f7 01       	movw	r30, r14
    3f4c:	a0 81       	ld	r26, Z
    3f4e:	b1 81       	ldd	r27, Z+1	; 0x01
    3f50:	ed 91       	ld	r30, X+
    3f52:	fc 91       	ld	r31, X
    3f54:	c7 01       	movw	r24, r14
    3f56:	09 95       	icall
    3f58:	c8 0f       	add	r28, r24
    3f5a:	d9 1f       	adc	r29, r25

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
  size_t n = 0;
  while (1) {
    3f5c:	f0 cf       	rjmp	.-32     	; 0x3f3e <_ZN5Print5printEPK19__FlashStringHelper+0x16>
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    3f5e:	ce 01       	movw	r24, r28
    3f60:	df 91       	pop	r29
    3f62:	cf 91       	pop	r28
    3f64:	1f 91       	pop	r17
    3f66:	0f 91       	pop	r16
    3f68:	ff 90       	pop	r15
    3f6a:	ef 90       	pop	r14
    3f6c:	08 95       	ret

00003f6e <_ZN5Print5printERK6String>:

size_t Print::print(const String &s)
{
    3f6e:	af 92       	push	r10
    3f70:	bf 92       	push	r11
    3f72:	cf 92       	push	r12
    3f74:	df 92       	push	r13
    3f76:	ef 92       	push	r14
    3f78:	ff 92       	push	r15
    3f7a:	0f 93       	push	r16
    3f7c:	1f 93       	push	r17
    3f7e:	cf 93       	push	r28
    3f80:	df 93       	push	r29
    3f82:	7c 01       	movw	r14, r24
    3f84:	6b 01       	movw	r12, r22
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    3f86:	c0 e0       	ldi	r28, 0x00	; 0
    3f88:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    3f8a:	00 e0       	ldi	r16, 0x00	; 0
    3f8c:	10 e0       	ldi	r17, 0x00	; 0
  for (uint16_t i = 0; i < s.length(); i++) {
    3f8e:	10 c0       	rjmp	.+32     	; 0x3fb0 <_ZN5Print5printERK6String+0x42>
    n += write(s[i]);
    3f90:	d7 01       	movw	r26, r14
    3f92:	ed 91       	ld	r30, X+
    3f94:	fc 91       	ld	r31, X
    3f96:	a0 80       	ld	r10, Z
    3f98:	b1 80       	ldd	r11, Z+1	; 0x01
    3f9a:	c6 01       	movw	r24, r12
    3f9c:	be 01       	movw	r22, r28
    3f9e:	0e 94 15 1c 	call	0x382a	; 0x382a <_ZNK6StringixEj>
    3fa2:	68 2f       	mov	r22, r24
    3fa4:	c7 01       	movw	r24, r14
    3fa6:	f5 01       	movw	r30, r10
    3fa8:	09 95       	icall
    3faa:	08 0f       	add	r16, r24
    3fac:	19 1f       	adc	r17, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    3fae:	21 96       	adiw	r28, 0x01	; 1
    3fb0:	f6 01       	movw	r30, r12
    3fb2:	84 81       	ldd	r24, Z+4	; 0x04
    3fb4:	95 81       	ldd	r25, Z+5	; 0x05
    3fb6:	c8 17       	cp	r28, r24
    3fb8:	d9 07       	cpc	r29, r25
    3fba:	50 f3       	brcs	.-44     	; 0x3f90 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    3fbc:	c8 01       	movw	r24, r16
    3fbe:	df 91       	pop	r29
    3fc0:	cf 91       	pop	r28
    3fc2:	1f 91       	pop	r17
    3fc4:	0f 91       	pop	r16
    3fc6:	ff 90       	pop	r15
    3fc8:	ef 90       	pop	r14
    3fca:	df 90       	pop	r13
    3fcc:	cf 90       	pop	r12
    3fce:	bf 90       	pop	r11
    3fd0:	af 90       	pop	r10
    3fd2:	08 95       	ret

00003fd4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
  return write(str);
    3fd4:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <_ZN5Print5writeEPKc>
}
    3fd8:	08 95       	ret

00003fda <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    3fda:	dc 01       	movw	r26, r24
    3fdc:	ed 91       	ld	r30, X+
    3fde:	fc 91       	ld	r31, X
    3fe0:	01 90       	ld	r0, Z+
    3fe2:	f0 81       	ld	r31, Z
    3fe4:	e0 2d       	mov	r30, r0
    3fe6:	09 95       	icall
}
    3fe8:	08 95       	ret

00003fea <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
{
    3fea:	9c 01       	movw	r18, r24
    3fec:	cb 01       	movw	r24, r22
  return x.printTo(*this);
    3fee:	db 01       	movw	r26, r22
    3ff0:	ed 91       	ld	r30, X+
    3ff2:	fc 91       	ld	r31, X
    3ff4:	01 90       	ld	r0, Z+
    3ff6:	f0 81       	ld	r31, Z
    3ff8:	e0 2d       	mov	r30, r0
    3ffa:	b9 01       	movw	r22, r18
    3ffc:	09 95       	icall
}
    3ffe:	08 95       	ret

00004000 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
    4000:	0f 93       	push	r16
    4002:	1f 93       	push	r17
    4004:	cf 93       	push	r28
    4006:	df 93       	push	r29
    4008:	ec 01       	movw	r28, r24
  size_t n = print('\r');
    400a:	6d e0       	ldi	r22, 0x0D	; 13
    400c:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_ZN5Print5printEc>
    4010:	8c 01       	movw	r16, r24
  n += print('\n');
    4012:	ce 01       	movw	r24, r28
    4014:	6a e0       	ldi	r22, 0x0A	; 10
    4016:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_ZN5Print5printEc>
    401a:	08 0f       	add	r16, r24
    401c:	19 1f       	adc	r17, r25
  return n;
}
    401e:	c8 01       	movw	r24, r16
    4020:	df 91       	pop	r29
    4022:	cf 91       	pop	r28
    4024:	1f 91       	pop	r17
    4026:	0f 91       	pop	r16
    4028:	08 95       	ret

0000402a <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    402a:	0f 93       	push	r16
    402c:	1f 93       	push	r17
    402e:	cf 93       	push	r28
    4030:	df 93       	push	r29
    4032:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
    4034:	0e 94 94 1f 	call	0x3f28	; 0x3f28 <_ZN5Print5printEPK19__FlashStringHelper>
    4038:	8c 01       	movw	r16, r24
  n += println();
    403a:	ce 01       	movw	r24, r28
    403c:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN5Print7printlnEv>
    4040:	08 0f       	add	r16, r24
    4042:	19 1f       	adc	r17, r25
  return n;
}
    4044:	c8 01       	movw	r24, r16
    4046:	df 91       	pop	r29
    4048:	cf 91       	pop	r28
    404a:	1f 91       	pop	r17
    404c:	0f 91       	pop	r16
    404e:	08 95       	ret

00004050 <_ZN5Print7printlnERK6String>:
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
{
    4050:	0f 93       	push	r16
    4052:	1f 93       	push	r17
    4054:	cf 93       	push	r28
    4056:	df 93       	push	r29
    4058:	ec 01       	movw	r28, r24
  size_t n = print(s);
    405a:	0e 94 b7 1f 	call	0x3f6e	; 0x3f6e <_ZN5Print5printERK6String>
    405e:	8c 01       	movw	r16, r24
  n += println();
    4060:	ce 01       	movw	r24, r28
    4062:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN5Print7printlnEv>
    4066:	08 0f       	add	r16, r24
    4068:	19 1f       	adc	r17, r25
  return n;
}
    406a:	c8 01       	movw	r24, r16
    406c:	df 91       	pop	r29
    406e:	cf 91       	pop	r28
    4070:	1f 91       	pop	r17
    4072:	0f 91       	pop	r16
    4074:	08 95       	ret

00004076 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    4076:	0f 93       	push	r16
    4078:	1f 93       	push	r17
    407a:	cf 93       	push	r28
    407c:	df 93       	push	r29
    407e:	ec 01       	movw	r28, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4080:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <_ZN5Print5writeEPKc>
    4084:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    4086:	ce 01       	movw	r24, r28
    4088:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN5Print7printlnEv>
    408c:	08 0f       	add	r16, r24
    408e:	19 1f       	adc	r17, r25
  return n;
}
    4090:	c8 01       	movw	r24, r16
    4092:	df 91       	pop	r29
    4094:	cf 91       	pop	r28
    4096:	1f 91       	pop	r17
    4098:	0f 91       	pop	r16
    409a:	08 95       	ret

0000409c <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    409c:	0f 93       	push	r16
    409e:	1f 93       	push	r17
    40a0:	cf 93       	push	r28
    40a2:	df 93       	push	r29
    40a4:	ec 01       	movw	r28, r24
  size_t n = print(c);
    40a6:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_ZN5Print5printEc>
    40aa:	8c 01       	movw	r16, r24
  n += println();
    40ac:	ce 01       	movw	r24, r28
    40ae:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN5Print7printlnEv>
    40b2:	08 0f       	add	r16, r24
    40b4:	19 1f       	adc	r17, r25
  return n;
}
    40b6:	c8 01       	movw	r24, r16
    40b8:	df 91       	pop	r29
    40ba:	cf 91       	pop	r28
    40bc:	1f 91       	pop	r17
    40be:	0f 91       	pop	r16
    40c0:	08 95       	ret

000040c2 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
{
    40c2:	0f 93       	push	r16
    40c4:	1f 93       	push	r17
    40c6:	cf 93       	push	r28
    40c8:	df 93       	push	r29
    40ca:	ec 01       	movw	r28, r24
  size_t n = print(x);
    40cc:	0e 94 f5 1f 	call	0x3fea	; 0x3fea <_ZN5Print5printERK9Printable>
    40d0:	8c 01       	movw	r16, r24
  n += println();
    40d2:	ce 01       	movw	r24, r28
    40d4:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN5Print7printlnEv>
    40d8:	08 0f       	add	r16, r24
    40da:	19 1f       	adc	r17, r25
  return n;
}
    40dc:	c8 01       	movw	r24, r16
    40de:	df 91       	pop	r29
    40e0:	cf 91       	pop	r28
    40e2:	1f 91       	pop	r17
    40e4:	0f 91       	pop	r16
    40e6:	08 95       	ret

000040e8 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    40e8:	8f 92       	push	r8
    40ea:	9f 92       	push	r9
    40ec:	af 92       	push	r10
    40ee:	bf 92       	push	r11
    40f0:	cf 92       	push	r12
    40f2:	df 92       	push	r13
    40f4:	ef 92       	push	r14
    40f6:	ff 92       	push	r15
    40f8:	0f 93       	push	r16
    40fa:	1f 93       	push	r17
    40fc:	df 93       	push	r29
    40fe:	cf 93       	push	r28
    4100:	cd b7       	in	r28, 0x3d	; 61
    4102:	de b7       	in	r29, 0x3e	; 62
    4104:	a1 97       	sbiw	r28, 0x21	; 33
    4106:	0f b6       	in	r0, 0x3f	; 63
    4108:	f8 94       	cli
    410a:	de bf       	out	0x3e, r29	; 62
    410c:	0f be       	out	0x3f, r0	; 63
    410e:	cd bf       	out	0x3d, r28	; 61
    4110:	6c 01       	movw	r12, r24
    4112:	04 2f       	mov	r16, r20
    4114:	e5 2f       	mov	r30, r21
    4116:	cb 01       	movw	r24, r22
    4118:	12 2f       	mov	r17, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    411a:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    411c:	22 30       	cpi	r18, 0x02	; 2
    411e:	08 f4       	brcc	.+2      	; 0x4122 <_ZN5Print11printNumberEmh+0x3a>
    4120:	1a e0       	ldi	r17, 0x0A	; 10
    4122:	21 e2       	ldi	r18, 0x21	; 33
    4124:	e2 2e       	mov	r14, r18
    4126:	f1 2c       	mov	r15, r1
    4128:	ec 0e       	add	r14, r28
    412a:	fd 1e       	adc	r15, r29

  do {
    unsigned long m = n;
    n /= base;
    412c:	81 2e       	mov	r8, r17
    412e:	99 24       	eor	r9, r9
    4130:	aa 24       	eor	r10, r10
    4132:	bb 24       	eor	r11, r11
    4134:	03 c0       	rjmp	.+6      	; 0x413c <_ZN5Print11printNumberEmh+0x54>
    4136:	02 2f       	mov	r16, r18
    4138:	e3 2f       	mov	r30, r19
    413a:	ca 01       	movw	r24, r20
    413c:	60 2f       	mov	r22, r16
    413e:	7e 2f       	mov	r23, r30
    4140:	a5 01       	movw	r20, r10
    4142:	94 01       	movw	r18, r8
    4144:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__udivmodsi4>
    char c = m - base * n;
    4148:	12 9f       	mul	r17, r18
    414a:	80 2d       	mov	r24, r0
    414c:	11 24       	eor	r1, r1
    414e:	08 1b       	sub	r16, r24
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    4150:	08 94       	sec
    4152:	e1 08       	sbc	r14, r1
    4154:	f1 08       	sbc	r15, r1
    4156:	0a 30       	cpi	r16, 0x0A	; 10
    4158:	14 f4       	brge	.+4      	; 0x415e <_ZN5Print11printNumberEmh+0x76>
    415a:	00 5d       	subi	r16, 0xD0	; 208
    415c:	01 c0       	rjmp	.+2      	; 0x4160 <_ZN5Print11printNumberEmh+0x78>
    415e:	09 5c       	subi	r16, 0xC9	; 201
    4160:	f7 01       	movw	r30, r14
    4162:	00 83       	st	Z, r16
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    4164:	21 15       	cp	r18, r1
    4166:	31 05       	cpc	r19, r1
    4168:	41 05       	cpc	r20, r1
    416a:	51 05       	cpc	r21, r1
    416c:	21 f7       	brne	.-56     	; 0x4136 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    416e:	c6 01       	movw	r24, r12
    4170:	b7 01       	movw	r22, r14
    4172:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <_ZN5Print5writeEPKc>
}
    4176:	a1 96       	adiw	r28, 0x21	; 33
    4178:	0f b6       	in	r0, 0x3f	; 63
    417a:	f8 94       	cli
    417c:	de bf       	out	0x3e, r29	; 62
    417e:	0f be       	out	0x3f, r0	; 63
    4180:	cd bf       	out	0x3d, r28	; 61
    4182:	cf 91       	pop	r28
    4184:	df 91       	pop	r29
    4186:	1f 91       	pop	r17
    4188:	0f 91       	pop	r16
    418a:	ff 90       	pop	r15
    418c:	ef 90       	pop	r14
    418e:	df 90       	pop	r13
    4190:	cf 90       	pop	r12
    4192:	bf 90       	pop	r11
    4194:	af 90       	pop	r10
    4196:	9f 90       	pop	r9
    4198:	8f 90       	pop	r8
    419a:	08 95       	ret

0000419c <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    419c:	21 15       	cp	r18, r1
    419e:	31 05       	cpc	r19, r1
    41a0:	49 f4       	brne	.+18     	; 0x41b4 <_ZN5Print5printEmi+0x18>
    41a2:	dc 01       	movw	r26, r24
    41a4:	ed 91       	ld	r30, X+
    41a6:	fc 91       	ld	r31, X
    41a8:	01 90       	ld	r0, Z+
    41aa:	f0 81       	ld	r31, Z
    41ac:	e0 2d       	mov	r30, r0
    41ae:	64 2f       	mov	r22, r20
    41b0:	09 95       	icall
    41b2:	08 95       	ret
  else return printNumber(n, base);
    41b4:	0e 94 74 20 	call	0x40e8	; 0x40e8 <_ZN5Print11printNumberEmh>
}
    41b8:	08 95       	ret

000041ba <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    41ba:	0f 93       	push	r16
    41bc:	1f 93       	push	r17
    41be:	cf 93       	push	r28
    41c0:	df 93       	push	r29
    41c2:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    41c4:	0e 94 ce 20 	call	0x419c	; 0x419c <_ZN5Print5printEmi>
    41c8:	8c 01       	movw	r16, r24
  n += println();
    41ca:	ce 01       	movw	r24, r28
    41cc:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN5Print7printlnEv>
    41d0:	08 0f       	add	r16, r24
    41d2:	19 1f       	adc	r17, r25
  return n;
}
    41d4:	c8 01       	movw	r24, r16
    41d6:	df 91       	pop	r29
    41d8:	cf 91       	pop	r28
    41da:	1f 91       	pop	r17
    41dc:	0f 91       	pop	r16
    41de:	08 95       	ret

000041e0 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    41e0:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    41e2:	ab 01       	movw	r20, r22
    41e4:	60 e0       	ldi	r22, 0x00	; 0
    41e6:	70 e0       	ldi	r23, 0x00	; 0
    41e8:	0e 94 ce 20 	call	0x419c	; 0x419c <_ZN5Print5printEmi>
}
    41ec:	08 95       	ret

000041ee <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    41ee:	0f 93       	push	r16
    41f0:	1f 93       	push	r17
    41f2:	cf 93       	push	r28
    41f4:	df 93       	push	r29
    41f6:	ec 01       	movw	r28, r24
    41f8:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    41fa:	ab 01       	movw	r20, r22
    41fc:	60 e0       	ldi	r22, 0x00	; 0
    41fe:	70 e0       	ldi	r23, 0x00	; 0
    4200:	0e 94 ce 20 	call	0x419c	; 0x419c <_ZN5Print5printEmi>
    4204:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    4206:	ce 01       	movw	r24, r28
    4208:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN5Print7printlnEv>
    420c:	08 0f       	add	r16, r24
    420e:	19 1f       	adc	r17, r25
  return n;
}
    4210:	c8 01       	movw	r24, r16
    4212:	df 91       	pop	r29
    4214:	cf 91       	pop	r28
    4216:	1f 91       	pop	r17
    4218:	0f 91       	pop	r16
    421a:	08 95       	ret

0000421c <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    421c:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    421e:	46 2f       	mov	r20, r22
    4220:	50 e0       	ldi	r21, 0x00	; 0
    4222:	60 e0       	ldi	r22, 0x00	; 0
    4224:	70 e0       	ldi	r23, 0x00	; 0
    4226:	0e 94 ce 20 	call	0x419c	; 0x419c <_ZN5Print5printEmi>
}
    422a:	08 95       	ret

0000422c <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    422c:	0f 93       	push	r16
    422e:	1f 93       	push	r17
    4230:	cf 93       	push	r28
    4232:	df 93       	push	r29
    4234:	ec 01       	movw	r28, r24
    4236:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    4238:	46 2f       	mov	r20, r22
    423a:	50 e0       	ldi	r21, 0x00	; 0
    423c:	60 e0       	ldi	r22, 0x00	; 0
    423e:	70 e0       	ldi	r23, 0x00	; 0
    4240:	0e 94 ce 20 	call	0x419c	; 0x419c <_ZN5Print5printEmi>
    4244:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    4246:	ce 01       	movw	r24, r28
    4248:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN5Print7printlnEv>
    424c:	08 0f       	add	r16, r24
    424e:	19 1f       	adc	r17, r25
  return n;
}
    4250:	c8 01       	movw	r24, r16
    4252:	df 91       	pop	r29
    4254:	cf 91       	pop	r28
    4256:	1f 91       	pop	r17
    4258:	0f 91       	pop	r16
    425a:	08 95       	ret

0000425c <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    425c:	cf 92       	push	r12
    425e:	df 92       	push	r13
    4260:	ef 92       	push	r14
    4262:	ff 92       	push	r15
    4264:	0f 93       	push	r16
    4266:	1f 93       	push	r17
    4268:	cf 93       	push	r28
    426a:	df 93       	push	r29
    426c:	ec 01       	movw	r28, r24
    426e:	7a 01       	movw	r14, r20
    4270:	8b 01       	movw	r16, r22
  if (base == 0) {
    4272:	21 15       	cp	r18, r1
    4274:	31 05       	cpc	r19, r1
    4276:	41 f4       	brne	.+16     	; 0x4288 <_ZN5Print5printEli+0x2c>
    return write(n);
    4278:	e8 81       	ld	r30, Y
    427a:	f9 81       	ldd	r31, Y+1	; 0x01
    427c:	01 90       	ld	r0, Z+
    427e:	f0 81       	ld	r31, Z
    4280:	e0 2d       	mov	r30, r0
    4282:	64 2f       	mov	r22, r20
    4284:	09 95       	icall
    4286:	1a c0       	rjmp	.+52     	; 0x42bc <_ZN5Print5printEli+0x60>
  } else if (base == 10) {
    4288:	2a 30       	cpi	r18, 0x0A	; 10
    428a:	31 05       	cpc	r19, r1
    428c:	a9 f4       	brne	.+42     	; 0x42b8 <_ZN5Print5printEli+0x5c>
    if (n < 0) {
    428e:	77 ff       	sbrs	r23, 7
    4290:	12 c0       	rjmp	.+36     	; 0x42b6 <_ZN5Print5printEli+0x5a>
      int t = print('-');
    4292:	6d e2       	ldi	r22, 0x2D	; 45
    4294:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_ZN5Print5printEc>
    4298:	6c 01       	movw	r12, r24
      n = -n;
    429a:	44 27       	eor	r20, r20
    429c:	55 27       	eor	r21, r21
    429e:	ba 01       	movw	r22, r20
    42a0:	4e 19       	sub	r20, r14
    42a2:	5f 09       	sbc	r21, r15
    42a4:	60 0b       	sbc	r22, r16
    42a6:	71 0b       	sbc	r23, r17
      return printNumber(n, 10) + t;
    42a8:	ce 01       	movw	r24, r28
    42aa:	2a e0       	ldi	r18, 0x0A	; 10
    42ac:	0e 94 74 20 	call	0x40e8	; 0x40e8 <_ZN5Print11printNumberEmh>
    42b0:	c8 0e       	add	r12, r24
    42b2:	d9 1e       	adc	r13, r25
    42b4:	04 c0       	rjmp	.+8      	; 0x42be <_ZN5Print5printEli+0x62>
    }
    return printNumber(n, 10);
    42b6:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    42b8:	0e 94 74 20 	call	0x40e8	; 0x40e8 <_ZN5Print11printNumberEmh>
    42bc:	6c 01       	movw	r12, r24
  }
}
    42be:	c6 01       	movw	r24, r12
    42c0:	df 91       	pop	r29
    42c2:	cf 91       	pop	r28
    42c4:	1f 91       	pop	r17
    42c6:	0f 91       	pop	r16
    42c8:	ff 90       	pop	r15
    42ca:	ef 90       	pop	r14
    42cc:	df 90       	pop	r13
    42ce:	cf 90       	pop	r12
    42d0:	08 95       	ret

000042d2 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    42d2:	0f 93       	push	r16
    42d4:	1f 93       	push	r17
    42d6:	cf 93       	push	r28
    42d8:	df 93       	push	r29
    42da:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    42dc:	0e 94 2e 21 	call	0x425c	; 0x425c <_ZN5Print5printEli>
    42e0:	8c 01       	movw	r16, r24
  n += println();
    42e2:	ce 01       	movw	r24, r28
    42e4:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN5Print7printlnEv>
    42e8:	08 0f       	add	r16, r24
    42ea:	19 1f       	adc	r17, r25
  return n;
}
    42ec:	c8 01       	movw	r24, r16
    42ee:	df 91       	pop	r29
    42f0:	cf 91       	pop	r28
    42f2:	1f 91       	pop	r17
    42f4:	0f 91       	pop	r16
    42f6:	08 95       	ret

000042f8 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    42f8:	9a 01       	movw	r18, r20
  return print((long) n, base);
    42fa:	fb 01       	movw	r30, r22
    42fc:	af 01       	movw	r20, r30
    42fe:	66 27       	eor	r22, r22
    4300:	57 fd       	sbrc	r21, 7
    4302:	60 95       	com	r22
    4304:	76 2f       	mov	r23, r22
    4306:	0e 94 2e 21 	call	0x425c	; 0x425c <_ZN5Print5printEli>
}
    430a:	08 95       	ret

0000430c <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    430c:	0f 93       	push	r16
    430e:	1f 93       	push	r17
    4310:	cf 93       	push	r28
    4312:	df 93       	push	r29
    4314:	ec 01       	movw	r28, r24
    4316:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    4318:	cb 01       	movw	r24, r22
    431a:	ac 01       	movw	r20, r24
    431c:	66 27       	eor	r22, r22
    431e:	57 fd       	sbrc	r21, 7
    4320:	60 95       	com	r22
    4322:	76 2f       	mov	r23, r22
    4324:	ce 01       	movw	r24, r28
    4326:	0e 94 2e 21 	call	0x425c	; 0x425c <_ZN5Print5printEli>
    432a:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    432c:	ce 01       	movw	r24, r28
    432e:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN5Print7printlnEv>
    4332:	08 0f       	add	r16, r24
    4334:	19 1f       	adc	r17, r25
  return n;
}
    4336:	c8 01       	movw	r24, r16
    4338:	df 91       	pop	r29
    433a:	cf 91       	pop	r28
    433c:	1f 91       	pop	r17
    433e:	0f 91       	pop	r16
    4340:	08 95       	ret

00004342 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    4342:	6f 92       	push	r6
    4344:	7f 92       	push	r7
    4346:	9f 92       	push	r9
    4348:	af 92       	push	r10
    434a:	bf 92       	push	r11
    434c:	cf 92       	push	r12
    434e:	df 92       	push	r13
    4350:	ef 92       	push	r14
    4352:	ff 92       	push	r15
    4354:	0f 93       	push	r16
    4356:	1f 93       	push	r17
    4358:	cf 93       	push	r28
    435a:	df 93       	push	r29
    435c:	3c 01       	movw	r6, r24
    435e:	7a 01       	movw	r14, r20
    4360:	8b 01       	movw	r16, r22
    4362:	c2 2e       	mov	r12, r18
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    4364:	cb 01       	movw	r24, r22
    4366:	ba 01       	movw	r22, r20
    4368:	20 e0       	ldi	r18, 0x00	; 0
    436a:	30 e0       	ldi	r19, 0x00	; 0
    436c:	a9 01       	movw	r20, r18
    436e:	0e 94 ce 11 	call	0x239c	; 0x239c <__ltsf2>
    4372:	87 ff       	sbrs	r24, 7
    4374:	0a c0       	rjmp	.+20     	; 0x438a <_ZN5Print10printFloatEdh+0x48>
  {
     n += print('-');
    4376:	c3 01       	movw	r24, r6
    4378:	6d e2       	ldi	r22, 0x2D	; 45
    437a:	0e 94 ed 1f 	call	0x3fda	; 0x3fda <_ZN5Print5printEc>
    437e:	ec 01       	movw	r28, r24
     number = -number;
    4380:	17 fb       	bst	r17, 7
    4382:	10 95       	com	r17
    4384:	17 f9       	bld	r17, 7
    4386:	10 95       	com	r17
    4388:	02 c0       	rjmp	.+4      	; 0x438e <_ZN5Print10printFloatEdh+0x4c>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    438a:	c0 e0       	ldi	r28, 0x00	; 0
    438c:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    438e:	dd 24       	eor	r13, r13
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    4390:	50 e0       	ldi	r21, 0x00	; 0
    4392:	40 e0       	ldi	r20, 0x00	; 0
    4394:	30 e0       	ldi	r19, 0x00	; 0
    4396:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    4398:	11 c0       	rjmp	.+34     	; 0x43bc <_ZN5Print10printFloatEdh+0x7a>
    rounding /= 10.0;
    439a:	da 01       	movw	r26, r20
    439c:	f9 01       	movw	r30, r18
    439e:	6b 2f       	mov	r22, r27
    43a0:	74 2f       	mov	r23, r20
    43a2:	8f 2f       	mov	r24, r31
    43a4:	92 2f       	mov	r25, r18
    43a6:	20 e0       	ldi	r18, 0x00	; 0
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	40 e2       	ldi	r20, 0x20	; 32
    43ac:	51 e4       	ldi	r21, 0x41	; 65
    43ae:	0e 94 90 10 	call	0x2120	; 0x2120 <__divsf3>
    43b2:	56 2f       	mov	r21, r22
    43b4:	47 2f       	mov	r20, r23
    43b6:	38 2f       	mov	r19, r24
    43b8:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    43ba:	d3 94       	inc	r13
    43bc:	dc 14       	cp	r13, r12
    43be:	68 f3       	brcs	.-38     	; 0x439a <_ZN5Print10printFloatEdh+0x58>
    rounding /= 10.0;
  
  number += rounding;
    43c0:	c8 01       	movw	r24, r16
    43c2:	b7 01       	movw	r22, r14
    43c4:	da 01       	movw	r26, r20
    43c6:	f9 01       	movw	r30, r18
    43c8:	2b 2f       	mov	r18, r27
    43ca:	34 2f       	mov	r19, r20
    43cc:	4f 2f       	mov	r20, r31
    43ce:	5e 2f       	mov	r21, r30
    43d0:	0e 94 38 0f 	call	0x1e70	; 0x1e70 <__addsf3>
    43d4:	5b 01       	movw	r10, r22
    43d6:	f8 2e       	mov	r15, r24
    43d8:	99 2e       	mov	r9, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    43da:	7b 2d       	mov	r23, r11
    43dc:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <__fixunssfsi>
    43e0:	16 2f       	mov	r17, r22
    43e2:	d7 2e       	mov	r13, r23
    43e4:	e8 2e       	mov	r14, r24
    43e6:	09 2f       	mov	r16, r25
  double remainder = number - (double)int_part;
    43e8:	0e 94 b0 12 	call	0x2560	; 0x2560 <__floatunsisf>
    43ec:	9b 01       	movw	r18, r22
    43ee:	ac 01       	movw	r20, r24
    43f0:	6a 2d       	mov	r22, r10
    43f2:	7b 2d       	mov	r23, r11
    43f4:	8f 2d       	mov	r24, r15
    43f6:	99 2d       	mov	r25, r9
    43f8:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__subsf3>
    43fc:	96 2e       	mov	r9, r22
    43fe:	a7 2e       	mov	r10, r23
    4400:	b8 2e       	mov	r11, r24
    4402:	f9 2e       	mov	r15, r25
  n += print(int_part);
    4404:	c3 01       	movw	r24, r6
    4406:	41 2f       	mov	r20, r17
    4408:	5d 2d       	mov	r21, r13
    440a:	6e 2d       	mov	r22, r14
    440c:	70 2f       	mov	r23, r16
    440e:	2a e0       	ldi	r18, 0x0A	; 10
    4410:	30 e0       	ldi	r19, 0x00	; 0
    4412:	0e 94 ce 20 	call	0x419c	; 0x419c <_ZN5Print5printEmi>
    4416:	c8 0f       	add	r28, r24
    4418:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    441a:	cc 20       	and	r12, r12
    441c:	b9 f1       	breq	.+110    	; 0x448c <_ZN5Print10printFloatEdh+0x14a>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    441e:	c3 01       	movw	r24, r6
    4420:	6e ed       	ldi	r22, 0xDE	; 222
    4422:	71 e0       	ldi	r23, 0x01	; 1
    4424:	0e 94 83 1f 	call	0x3f06	; 0x3f06 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    4428:	c8 0f       	add	r28, r24
    442a:	d9 1f       	adc	r29, r25
    442c:	2f c0       	rjmp	.+94     	; 0x448c <_ZN5Print10printFloatEdh+0x14a>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    442e:	69 2d       	mov	r22, r9
    4430:	7a 2d       	mov	r23, r10
    4432:	8b 2d       	mov	r24, r11
    4434:	9f 2d       	mov	r25, r15
    4436:	20 e0       	ldi	r18, 0x00	; 0
    4438:	30 e0       	ldi	r19, 0x00	; 0
    443a:	40 e2       	ldi	r20, 0x20	; 32
    443c:	51 e4       	ldi	r21, 0x41	; 65
    443e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <__mulsf3>
    4442:	d6 2e       	mov	r13, r22
    4444:	b7 2e       	mov	r11, r23
    4446:	a8 2e       	mov	r10, r24
    4448:	99 2e       	mov	r9, r25
    int toPrint = int(remainder);
    444a:	0e 94 5e 12 	call	0x24bc	; 0x24bc <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    444e:	7b 01       	movw	r14, r22
    4450:	00 27       	eor	r16, r16
    4452:	f7 fc       	sbrc	r15, 7
    4454:	00 95       	com	r16
    4456:	10 2f       	mov	r17, r16
    4458:	c3 01       	movw	r24, r6
    445a:	b8 01       	movw	r22, r16
    445c:	a7 01       	movw	r20, r14
    445e:	2a e0       	ldi	r18, 0x0A	; 10
    4460:	30 e0       	ldi	r19, 0x00	; 0
    4462:	0e 94 2e 21 	call	0x425c	; 0x425c <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    4466:	c8 0f       	add	r28, r24
    4468:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    446a:	c8 01       	movw	r24, r16
    446c:	b7 01       	movw	r22, r14
    446e:	0e 94 fe 11 	call	0x23fc	; 0x23fc <__floatsisf>
    4472:	9b 01       	movw	r18, r22
    4474:	ac 01       	movw	r20, r24
    4476:	6d 2d       	mov	r22, r13
    4478:	7b 2d       	mov	r23, r11
    447a:	8a 2d       	mov	r24, r10
    447c:	99 2d       	mov	r25, r9
    447e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <__subsf3>
    4482:	96 2e       	mov	r9, r22
    4484:	a7 2e       	mov	r10, r23
    4486:	b8 2e       	mov	r11, r24
    4488:	f9 2e       	mov	r15, r25
    448a:	ca 94       	dec	r12
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    448c:	cc 20       	and	r12, r12
    448e:	79 f6       	brne	.-98     	; 0x442e <_ZN5Print10printFloatEdh+0xec>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    4490:	ce 01       	movw	r24, r28
    4492:	df 91       	pop	r29
    4494:	cf 91       	pop	r28
    4496:	1f 91       	pop	r17
    4498:	0f 91       	pop	r16
    449a:	ff 90       	pop	r15
    449c:	ef 90       	pop	r14
    449e:	df 90       	pop	r13
    44a0:	cf 90       	pop	r12
    44a2:	bf 90       	pop	r11
    44a4:	af 90       	pop	r10
    44a6:	9f 90       	pop	r9
    44a8:	7f 90       	pop	r7
    44aa:	6f 90       	pop	r6
    44ac:	08 95       	ret

000044ae <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    44ae:	0e 94 a1 21 	call	0x4342	; 0x4342 <_ZN5Print10printFloatEdh>
}
    44b2:	08 95       	ret

000044b4 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    44b4:	0f 93       	push	r16
    44b6:	1f 93       	push	r17
    44b8:	cf 93       	push	r28
    44ba:	df 93       	push	r29
    44bc:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    44be:	0e 94 a1 21 	call	0x4342	; 0x4342 <_ZN5Print10printFloatEdh>
    44c2:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    44c4:	ce 01       	movw	r24, r28
    44c6:	0e 94 00 20 	call	0x4000	; 0x4000 <_ZN5Print7printlnEv>
    44ca:	08 0f       	add	r16, r24
    44cc:	19 1f       	adc	r17, r25
  return n;
}
    44ce:	c8 01       	movw	r24, r16
    44d0:	df 91       	pop	r29
    44d2:	cf 91       	pop	r28
    44d4:	1f 91       	pop	r17
    44d6:	0f 91       	pop	r16
    44d8:	08 95       	ret

000044da <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    44da:	fc 01       	movw	r30, r24
    44dc:	84 85       	ldd	r24, Z+12	; 0x0c
    44de:	95 85       	ldd	r25, Z+13	; 0x0d
    44e0:	fc 01       	movw	r30, r24
    44e2:	e0 5c       	subi	r30, 0xC0	; 192
    44e4:	ff 4f       	sbci	r31, 0xFF	; 255
    44e6:	20 81       	ld	r18, Z
    44e8:	31 81       	ldd	r19, Z+1	; 0x01
    44ea:	8e 5b       	subi	r24, 0xBE	; 190
    44ec:	9f 4f       	sbci	r25, 0xFF	; 255
    44ee:	fc 01       	movw	r30, r24
    44f0:	80 81       	ld	r24, Z
    44f2:	91 81       	ldd	r25, Z+1	; 0x01
    44f4:	28 1b       	sub	r18, r24
    44f6:	39 0b       	sbc	r19, r25
    44f8:	2f 73       	andi	r18, 0x3F	; 63
    44fa:	30 70       	andi	r19, 0x00	; 0
}
    44fc:	c9 01       	movw	r24, r18
    44fe:	08 95       	ret

00004500 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    4500:	fc 01       	movw	r30, r24
    4502:	84 85       	ldd	r24, Z+12	; 0x0c
    4504:	95 85       	ldd	r25, Z+13	; 0x0d
    4506:	fc 01       	movw	r30, r24
    4508:	e0 5c       	subi	r30, 0xC0	; 192
    450a:	ff 4f       	sbci	r31, 0xFF	; 255
    450c:	40 81       	ld	r20, Z
    450e:	51 81       	ldd	r21, Z+1	; 0x01
    4510:	fc 01       	movw	r30, r24
    4512:	ee 5b       	subi	r30, 0xBE	; 190
    4514:	ff 4f       	sbci	r31, 0xFF	; 255
    4516:	20 81       	ld	r18, Z
    4518:	31 81       	ldd	r19, Z+1	; 0x01
    451a:	42 17       	cp	r20, r18
    451c:	53 07       	cpc	r21, r19
    451e:	41 f0       	breq	.+16     	; 0x4530 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    4520:	01 90       	ld	r0, Z+
    4522:	f0 81       	ld	r31, Z
    4524:	e0 2d       	mov	r30, r0
    4526:	e8 0f       	add	r30, r24
    4528:	f9 1f       	adc	r31, r25
    452a:	20 81       	ld	r18, Z
    452c:	30 e0       	ldi	r19, 0x00	; 0
    452e:	02 c0       	rjmp	.+4      	; 0x4534 <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    4530:	2f ef       	ldi	r18, 0xFF	; 255
    4532:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    4534:	c9 01       	movw	r24, r18
    4536:	08 95       	ret

00004538 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    4538:	fc 01       	movw	r30, r24
    453a:	84 85       	ldd	r24, Z+12	; 0x0c
    453c:	95 85       	ldd	r25, Z+13	; 0x0d
    453e:	fc 01       	movw	r30, r24
    4540:	e0 5c       	subi	r30, 0xC0	; 192
    4542:	ff 4f       	sbci	r31, 0xFF	; 255
    4544:	40 81       	ld	r20, Z
    4546:	51 81       	ldd	r21, Z+1	; 0x01
    4548:	fc 01       	movw	r30, r24
    454a:	ee 5b       	subi	r30, 0xBE	; 190
    454c:	ff 4f       	sbci	r31, 0xFF	; 255
    454e:	20 81       	ld	r18, Z
    4550:	31 81       	ldd	r19, Z+1	; 0x01
    4552:	42 17       	cp	r20, r18
    4554:	53 07       	cpc	r21, r19
    4556:	71 f0       	breq	.+28     	; 0x4574 <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    4558:	a0 81       	ld	r26, Z
    455a:	b1 81       	ldd	r27, Z+1	; 0x01
    455c:	a8 0f       	add	r26, r24
    455e:	b9 1f       	adc	r27, r25
    4560:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    4562:	80 81       	ld	r24, Z
    4564:	91 81       	ldd	r25, Z+1	; 0x01
    4566:	01 96       	adiw	r24, 0x01	; 1
    4568:	8f 73       	andi	r24, 0x3F	; 63
    456a:	90 70       	andi	r25, 0x00	; 0
    456c:	91 83       	std	Z+1, r25	; 0x01
    456e:	80 83       	st	Z, r24
    return c;
    4570:	30 e0       	ldi	r19, 0x00	; 0
    4572:	02 c0       	rjmp	.+4      	; 0x4578 <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    4574:	2f ef       	ldi	r18, 0xFF	; 255
    4576:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    4578:	c9 01       	movw	r24, r18
    457a:	08 95       	ret

0000457c <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    457c:	dc 01       	movw	r26, r24
    457e:	1e 96       	adiw	r26, 0x0e	; 14
    4580:	8d 91       	ld	r24, X+
    4582:	9c 91       	ld	r25, X
    4584:	1f 97       	sbiw	r26, 0x0f	; 15
    4586:	fc 01       	movw	r30, r24
    4588:	e0 5c       	subi	r30, 0xC0	; 192
    458a:	ff 4f       	sbci	r31, 0xFF	; 255
    458c:	8e 5b       	subi	r24, 0xBE	; 190
    458e:	9f 4f       	sbci	r25, 0xFF	; 255
    4590:	40 81       	ld	r20, Z
    4592:	51 81       	ldd	r21, Z+1	; 0x01
    4594:	dc 01       	movw	r26, r24
    4596:	2d 91       	ld	r18, X+
    4598:	3c 91       	ld	r19, X
    459a:	11 97       	sbiw	r26, 0x01	; 1
    459c:	42 17       	cp	r20, r18
    459e:	53 07       	cpc	r21, r19
    45a0:	b9 f7       	brne	.-18     	; 0x4590 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    45a2:	08 95       	ret

000045a4 <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    45a4:	1f 93       	push	r17
    45a6:	fc 01       	movw	r30, r24
    45a8:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    45aa:	26 85       	ldd	r18, Z+14	; 0x0e
    45ac:	37 85       	ldd	r19, Z+15	; 0x0f
    45ae:	d9 01       	movw	r26, r18
    45b0:	a0 5c       	subi	r26, 0xC0	; 192
    45b2:	bf 4f       	sbci	r27, 0xFF	; 255
    45b4:	8d 91       	ld	r24, X+
    45b6:	9c 91       	ld	r25, X
    45b8:	01 96       	adiw	r24, 0x01	; 1
    45ba:	60 e4       	ldi	r22, 0x40	; 64
    45bc:	70 e0       	ldi	r23, 0x00	; 0
    45be:	0e 94 03 25 	call	0x4a06	; 0x4a06 <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    45c2:	d9 01       	movw	r26, r18
    45c4:	ae 5b       	subi	r26, 0xBE	; 190
    45c6:	bf 4f       	sbci	r27, 0xFF	; 255
    45c8:	4d 91       	ld	r20, X+
    45ca:	5c 91       	ld	r21, X
    45cc:	11 97       	sbiw	r26, 0x01	; 1
    45ce:	84 17       	cp	r24, r20
    45d0:	95 07       	cpc	r25, r21
    45d2:	d1 f3       	breq	.-12     	; 0x45c8 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    45d4:	d9 01       	movw	r26, r18
    45d6:	a0 5c       	subi	r26, 0xC0	; 192
    45d8:	bf 4f       	sbci	r27, 0xFF	; 255
    45da:	0d 90       	ld	r0, X+
    45dc:	bc 91       	ld	r27, X
    45de:	a0 2d       	mov	r26, r0
    45e0:	a2 0f       	add	r26, r18
    45e2:	b3 1f       	adc	r27, r19
    45e4:	1c 93       	st	X, r17
  _tx_buffer->head = i;
    45e6:	a6 85       	ldd	r26, Z+14	; 0x0e
    45e8:	b7 85       	ldd	r27, Z+15	; 0x0f
    45ea:	a0 5c       	subi	r26, 0xC0	; 192
    45ec:	bf 4f       	sbci	r27, 0xFF	; 255
    45ee:	11 96       	adiw	r26, 0x01	; 1
    45f0:	9c 93       	st	X, r25
    45f2:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
    45f4:	a6 89       	ldd	r26, Z+22	; 0x16
    45f6:	b7 89       	ldd	r27, Z+23	; 0x17
    45f8:	2c 91       	ld	r18, X
    45fa:	81 e0       	ldi	r24, 0x01	; 1
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	05 8c       	ldd	r0, Z+29	; 0x1d
    4600:	02 c0       	rjmp	.+4      	; 0x4606 <_ZN14HardwareSerial5writeEh+0x62>
    4602:	88 0f       	add	r24, r24
    4604:	99 1f       	adc	r25, r25
    4606:	0a 94       	dec	r0
    4608:	e2 f7       	brpl	.-8      	; 0x4602 <_ZN14HardwareSerial5writeEh+0x5e>
    460a:	28 2b       	or	r18, r24
    460c:	2c 93       	st	X, r18
  
  return 1;
}
    460e:	81 e0       	ldi	r24, 0x01	; 1
    4610:	90 e0       	ldi	r25, 0x00	; 0
    4612:	1f 91       	pop	r17
    4614:	08 95       	ret

00004616 <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4616:	fb 01       	movw	r30, r22
    4618:	e0 5c       	subi	r30, 0xC0	; 192
    461a:	ff 4f       	sbci	r31, 0xFF	; 255
    461c:	20 81       	ld	r18, Z
    461e:	31 81       	ldd	r19, Z+1	; 0x01
    4620:	2f 5f       	subi	r18, 0xFF	; 255
    4622:	3f 4f       	sbci	r19, 0xFF	; 255
    4624:	2f 73       	andi	r18, 0x3F	; 63
    4626:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    4628:	db 01       	movw	r26, r22
    462a:	ae 5b       	subi	r26, 0xBE	; 190
    462c:	bf 4f       	sbci	r27, 0xFF	; 255
    462e:	4d 91       	ld	r20, X+
    4630:	5c 91       	ld	r21, X
    4632:	11 97       	sbiw	r26, 0x01	; 1
    4634:	24 17       	cp	r18, r20
    4636:	35 07       	cpc	r19, r21
    4638:	39 f0       	breq	.+14     	; 0x4648 <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
    463a:	a0 81       	ld	r26, Z
    463c:	b1 81       	ldd	r27, Z+1	; 0x01
    463e:	a6 0f       	add	r26, r22
    4640:	b7 1f       	adc	r27, r23
    4642:	8c 93       	st	X, r24
    buffer->head = i;
    4644:	31 83       	std	Z+1, r19	; 0x01
    4646:	20 83       	st	Z, r18
    4648:	08 95       	ret

0000464a <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    464a:	08 95       	ret

0000464c <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    464c:	1f 92       	push	r1
    464e:	0f 92       	push	r0
    4650:	0f b6       	in	r0, 0x3f	; 63
    4652:	0f 92       	push	r0
    4654:	11 24       	eor	r1, r1
    4656:	2f 93       	push	r18
    4658:	3f 93       	push	r19
    465a:	4f 93       	push	r20
    465c:	5f 93       	push	r21
    465e:	6f 93       	push	r22
    4660:	7f 93       	push	r23
    4662:	8f 93       	push	r24
    4664:	9f 93       	push	r25
    4666:	af 93       	push	r26
    4668:	bf 93       	push	r27
    466a:	ef 93       	push	r30
    466c:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    466e:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
    4672:	65 ee       	ldi	r22, 0xE5	; 229
    4674:	73 e0       	ldi	r23, 0x03	; 3
    4676:	0e 94 0b 23 	call	0x4616	; 0x4616 <_Z10store_charhP11ring_buffer>
  }
    467a:	ff 91       	pop	r31
    467c:	ef 91       	pop	r30
    467e:	bf 91       	pop	r27
    4680:	af 91       	pop	r26
    4682:	9f 91       	pop	r25
    4684:	8f 91       	pop	r24
    4686:	7f 91       	pop	r23
    4688:	6f 91       	pop	r22
    468a:	5f 91       	pop	r21
    468c:	4f 91       	pop	r20
    468e:	3f 91       	pop	r19
    4690:	2f 91       	pop	r18
    4692:	0f 90       	pop	r0
    4694:	0f be       	out	0x3f, r0	; 63
    4696:	0f 90       	pop	r0
    4698:	1f 90       	pop	r1
    469a:	18 95       	reti

0000469c <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    469c:	8d e6       	ldi	r24, 0x6D	; 109
    469e:	94 e0       	ldi	r25, 0x04	; 4
    46a0:	0e 94 6d 22 	call	0x44da	; 0x44da <_ZN14HardwareSerial9availableEv>
    46a4:	00 97       	sbiw	r24, 0x00	; 0
    46a6:	11 f0       	breq	.+4      	; 0x46ac <_Z14serialEventRunv+0x10>
    46a8:	0e 94 25 23 	call	0x464a	; 0x464a <_Z11serialEventv>
    46ac:	08 95       	ret

000046ae <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    46ae:	1f 92       	push	r1
    46b0:	0f 92       	push	r0
    46b2:	0f b6       	in	r0, 0x3f	; 63
    46b4:	0f 92       	push	r0
    46b6:	11 24       	eor	r1, r1
    46b8:	2f 93       	push	r18
    46ba:	3f 93       	push	r19
    46bc:	5f 93       	push	r21
    46be:	6f 93       	push	r22
    46c0:	7f 93       	push	r23
    46c2:	8f 93       	push	r24
    46c4:	9f 93       	push	r25
    46c6:	af 93       	push	r26
    46c8:	bf 93       	push	r27
    46ca:	ef 93       	push	r30
    46cc:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    46ce:	20 91 69 04 	lds	r18, 0x0469
    46d2:	30 91 6a 04 	lds	r19, 0x046A
    46d6:	80 91 6b 04 	lds	r24, 0x046B
    46da:	90 91 6c 04 	lds	r25, 0x046C
    46de:	28 17       	cp	r18, r24
    46e0:	39 07       	cpc	r19, r25
    46e2:	31 f4       	brne	.+12     	; 0x46f0 <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    46e4:	80 91 c1 00 	lds	r24, 0x00C1
    46e8:	8f 7d       	andi	r24, 0xDF	; 223
    46ea:	80 93 c1 00 	sts	0x00C1, r24
    46ee:	16 c0       	rjmp	.+44     	; 0x471c <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    46f0:	e0 91 6b 04 	lds	r30, 0x046B
    46f4:	f0 91 6c 04 	lds	r31, 0x046C
    46f8:	e7 5d       	subi	r30, 0xD7	; 215
    46fa:	fb 4f       	sbci	r31, 0xFB	; 251
    46fc:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    46fe:	80 91 6b 04 	lds	r24, 0x046B
    4702:	90 91 6c 04 	lds	r25, 0x046C
    4706:	01 96       	adiw	r24, 0x01	; 1
    4708:	60 e4       	ldi	r22, 0x40	; 64
    470a:	70 e0       	ldi	r23, 0x00	; 0
    470c:	0e 94 03 25 	call	0x4a06	; 0x4a06 <__divmodhi4>
    4710:	90 93 6c 04 	sts	0x046C, r25
    4714:	80 93 6b 04 	sts	0x046B, r24
	
  #if defined(UDR0)
    UDR0 = c;
    4718:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    471c:	ff 91       	pop	r31
    471e:	ef 91       	pop	r30
    4720:	bf 91       	pop	r27
    4722:	af 91       	pop	r26
    4724:	9f 91       	pop	r25
    4726:	8f 91       	pop	r24
    4728:	7f 91       	pop	r23
    472a:	6f 91       	pop	r22
    472c:	5f 91       	pop	r21
    472e:	3f 91       	pop	r19
    4730:	2f 91       	pop	r18
    4732:	0f 90       	pop	r0
    4734:	0f be       	out	0x3f, r0	; 63
    4736:	0f 90       	pop	r0
    4738:	1f 90       	pop	r1
    473a:	18 95       	reti

0000473c <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:
#endif


// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
    473c:	8f 92       	push	r8
    473e:	af 92       	push	r10
    4740:	bf 92       	push	r11
    4742:	cf 92       	push	r12
    4744:	df 92       	push	r13
    4746:	ef 92       	push	r14
    4748:	ff 92       	push	r15
    474a:	0f 93       	push	r16
    474c:	1f 93       	push	r17
    474e:	df 93       	push	r29
    4750:	cf 93       	push	r28
    4752:	cd b7       	in	r28, 0x3d	; 61
    4754:	de b7       	in	r29, 0x3e	; 62
    4756:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4758:	13 82       	std	Z+3, r1	; 0x03
    475a:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    475c:	88 ee       	ldi	r24, 0xE8	; 232
    475e:	93 e0       	ldi	r25, 0x03	; 3
    4760:	a0 e0       	ldi	r26, 0x00	; 0
    4762:	b0 e0       	ldi	r27, 0x00	; 0
    4764:	84 83       	std	Z+4, r24	; 0x04
    4766:	95 83       	std	Z+5, r25	; 0x05
    4768:	a6 83       	std	Z+6, r26	; 0x06
    476a:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    476c:	8b ef       	ldi	r24, 0xFB	; 251
    476e:	92 e0       	ldi	r25, 0x02	; 2
    4770:	91 83       	std	Z+1, r25	; 0x01
    4772:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    4774:	75 87       	std	Z+13, r23	; 0x0d
    4776:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
    4778:	57 87       	std	Z+15, r21	; 0x0f
    477a:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
    477c:	31 8b       	std	Z+17, r19	; 0x11
    477e:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
    4780:	13 8b       	std	Z+19, r17	; 0x13
    4782:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
    4784:	f5 8a       	std	Z+21, r15	; 0x15
    4786:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
    4788:	d7 8a       	std	Z+23, r13	; 0x17
    478a:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
    478c:	b1 8e       	std	Z+25, r11	; 0x19
    478e:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
    4790:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
    4792:	8e 85       	ldd	r24, Y+14	; 0x0e
    4794:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    4796:	8f 85       	ldd	r24, Y+15	; 0x0f
    4798:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    479a:	88 89       	ldd	r24, Y+16	; 0x10
    479c:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    479e:	89 89       	ldd	r24, Y+17	; 0x11
    47a0:	86 8f       	std	Z+30, r24	; 0x1e
}
    47a2:	cf 91       	pop	r28
    47a4:	df 91       	pop	r29
    47a6:	1f 91       	pop	r17
    47a8:	0f 91       	pop	r16
    47aa:	ff 90       	pop	r15
    47ac:	ef 90       	pop	r14
    47ae:	df 90       	pop	r13
    47b0:	cf 90       	pop	r12
    47b2:	bf 90       	pop	r11
    47b4:	af 90       	pop	r10
    47b6:	8f 90       	pop	r8
    47b8:	08 95       	ret

000047ba <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    47ba:	df 92       	push	r13
    47bc:	ef 92       	push	r14
    47be:	ff 92       	push	r15
    47c0:	0f 93       	push	r16
    47c2:	1f 93       	push	r17
    47c4:	cf 93       	push	r28
    47c6:	df 93       	push	r29
    47c8:	ec 01       	movw	r28, r24
    47ca:	7a 01       	movw	r14, r20
    47cc:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    47ce:	dd 24       	eor	r13, r13
    47d0:	d3 94       	inc	r13
    47d2:	40 30       	cpi	r20, 0x00	; 0
    47d4:	81 ee       	ldi	r24, 0xE1	; 225
    47d6:	58 07       	cpc	r21, r24
    47d8:	80 e0       	ldi	r24, 0x00	; 0
    47da:	68 07       	cpc	r22, r24
    47dc:	80 e0       	ldi	r24, 0x00	; 0
    47de:	78 07       	cpc	r23, r24
    47e0:	49 f4       	brne	.+18     	; 0x47f4 <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    47e2:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    47e4:	ec 89       	ldd	r30, Y+20	; 0x14
    47e6:	fd 89       	ldd	r31, Y+21	; 0x15
    47e8:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    47ea:	60 e8       	ldi	r22, 0x80	; 128
    47ec:	74 e8       	ldi	r23, 0x84	; 132
    47ee:	8e e1       	ldi	r24, 0x1E	; 30
    47f0:	90 e0       	ldi	r25, 0x00	; 0
    47f2:	0f c0       	rjmp	.+30     	; 0x4812 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    47f4:	ec 89       	ldd	r30, Y+20	; 0x14
    47f6:	fd 89       	ldd	r31, Y+21	; 0x15
    47f8:	81 e0       	ldi	r24, 0x01	; 1
    47fa:	90 e0       	ldi	r25, 0x00	; 0
    47fc:	0e 8c       	ldd	r0, Y+30	; 0x1e
    47fe:	02 c0       	rjmp	.+4      	; 0x4804 <_ZN14HardwareSerial5beginEm+0x4a>
    4800:	88 0f       	add	r24, r24
    4802:	99 1f       	adc	r25, r25
    4804:	0a 94       	dec	r0
    4806:	e2 f7       	brpl	.-8      	; 0x4800 <_ZN14HardwareSerial5beginEm+0x46>
    4808:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    480a:	60 e0       	ldi	r22, 0x00	; 0
    480c:	79 e0       	ldi	r23, 0x09	; 9
    480e:	8d e3       	ldi	r24, 0x3D	; 61
    4810:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4812:	a8 01       	movw	r20, r16
    4814:	97 01       	movw	r18, r14
    4816:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__udivmodsi4>
    481a:	21 50       	subi	r18, 0x01	; 1
    481c:	30 40       	sbci	r19, 0x00	; 0
    481e:	40 40       	sbci	r20, 0x00	; 0
    4820:	50 40       	sbci	r21, 0x00	; 0
    4822:	56 95       	lsr	r21
    4824:	47 95       	ror	r20
    4826:	37 95       	ror	r19
    4828:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    482a:	80 e1       	ldi	r24, 0x10	; 16
    482c:	20 30       	cpi	r18, 0x00	; 0
    482e:	38 07       	cpc	r19, r24
    4830:	10 f0       	brcs	.+4      	; 0x4836 <_ZN14HardwareSerial5beginEm+0x7c>
    4832:	dd 20       	and	r13, r13
    4834:	b1 f6       	brne	.-84     	; 0x47e2 <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4836:	e8 89       	ldd	r30, Y+16	; 0x10
    4838:	f9 89       	ldd	r31, Y+17	; 0x11
    483a:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    483c:	ea 89       	ldd	r30, Y+18	; 0x12
    483e:	fb 89       	ldd	r31, Y+19	; 0x13
    4840:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    4842:	ee 89       	ldd	r30, Y+22	; 0x16
    4844:	ff 89       	ldd	r31, Y+23	; 0x17
    4846:	40 81       	ld	r20, Z
    4848:	81 e0       	ldi	r24, 0x01	; 1
    484a:	90 e0       	ldi	r25, 0x00	; 0
    484c:	9c 01       	movw	r18, r24
    484e:	0a 8c       	ldd	r0, Y+26	; 0x1a
    4850:	02 c0       	rjmp	.+4      	; 0x4856 <_ZN14HardwareSerial5beginEm+0x9c>
    4852:	22 0f       	add	r18, r18
    4854:	33 1f       	adc	r19, r19
    4856:	0a 94       	dec	r0
    4858:	e2 f7       	brpl	.-8      	; 0x4852 <_ZN14HardwareSerial5beginEm+0x98>
    485a:	42 2b       	or	r20, r18
    485c:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    485e:	ee 89       	ldd	r30, Y+22	; 0x16
    4860:	ff 89       	ldd	r31, Y+23	; 0x17
    4862:	40 81       	ld	r20, Z
    4864:	9c 01       	movw	r18, r24
    4866:	0b 8c       	ldd	r0, Y+27	; 0x1b
    4868:	02 c0       	rjmp	.+4      	; 0x486e <_ZN14HardwareSerial5beginEm+0xb4>
    486a:	22 0f       	add	r18, r18
    486c:	33 1f       	adc	r19, r19
    486e:	0a 94       	dec	r0
    4870:	e2 f7       	brpl	.-8      	; 0x486a <_ZN14HardwareSerial5beginEm+0xb0>
    4872:	42 2b       	or	r20, r18
    4874:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    4876:	ee 89       	ldd	r30, Y+22	; 0x16
    4878:	ff 89       	ldd	r31, Y+23	; 0x17
    487a:	40 81       	ld	r20, Z
    487c:	9c 01       	movw	r18, r24
    487e:	0c 8c       	ldd	r0, Y+28	; 0x1c
    4880:	02 c0       	rjmp	.+4      	; 0x4886 <_ZN14HardwareSerial5beginEm+0xcc>
    4882:	22 0f       	add	r18, r18
    4884:	33 1f       	adc	r19, r19
    4886:	0a 94       	dec	r0
    4888:	e2 f7       	brpl	.-8      	; 0x4882 <_ZN14HardwareSerial5beginEm+0xc8>
    488a:	42 2b       	or	r20, r18
    488c:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    488e:	ee 89       	ldd	r30, Y+22	; 0x16
    4890:	ff 89       	ldd	r31, Y+23	; 0x17
    4892:	20 81       	ld	r18, Z
    4894:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4896:	02 c0       	rjmp	.+4      	; 0x489c <_ZN14HardwareSerial5beginEm+0xe2>
    4898:	88 0f       	add	r24, r24
    489a:	99 1f       	adc	r25, r25
    489c:	0a 94       	dec	r0
    489e:	e2 f7       	brpl	.-8      	; 0x4898 <_ZN14HardwareSerial5beginEm+0xde>
    48a0:	80 95       	com	r24
    48a2:	82 23       	and	r24, r18
    48a4:	80 83       	st	Z, r24
}
    48a6:	df 91       	pop	r29
    48a8:	cf 91       	pop	r28
    48aa:	1f 91       	pop	r17
    48ac:	0f 91       	pop	r16
    48ae:	ff 90       	pop	r15
    48b0:	ef 90       	pop	r14
    48b2:	df 90       	pop	r13
    48b4:	08 95       	ret

000048b6 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    48b6:	cf 93       	push	r28
    48b8:	df 93       	push	r29
    48ba:	fc 01       	movw	r30, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    48bc:	86 85       	ldd	r24, Z+14	; 0x0e
    48be:	97 85       	ldd	r25, Z+15	; 0x0f
    48c0:	dc 01       	movw	r26, r24
    48c2:	a0 5c       	subi	r26, 0xC0	; 192
    48c4:	bf 4f       	sbci	r27, 0xFF	; 255
    48c6:	8e 5b       	subi	r24, 0xBE	; 190
    48c8:	9f 4f       	sbci	r25, 0xFF	; 255
    48ca:	4d 91       	ld	r20, X+
    48cc:	5c 91       	ld	r21, X
    48ce:	11 97       	sbiw	r26, 0x01	; 1
    48d0:	ec 01       	movw	r28, r24
    48d2:	28 81       	ld	r18, Y
    48d4:	39 81       	ldd	r19, Y+1	; 0x01
    48d6:	42 17       	cp	r20, r18
    48d8:	53 07       	cpc	r21, r19
    48da:	b9 f7       	brne	.-18     	; 0x48ca <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
    48dc:	a6 89       	ldd	r26, Z+22	; 0x16
    48de:	b7 89       	ldd	r27, Z+23	; 0x17
    48e0:	4c 91       	ld	r20, X
    48e2:	81 e0       	ldi	r24, 0x01	; 1
    48e4:	90 e0       	ldi	r25, 0x00	; 0
    48e6:	9c 01       	movw	r18, r24
    48e8:	02 8c       	ldd	r0, Z+26	; 0x1a
    48ea:	02 c0       	rjmp	.+4      	; 0x48f0 <_ZN14HardwareSerial3endEv+0x3a>
    48ec:	22 0f       	add	r18, r18
    48ee:	33 1f       	adc	r19, r19
    48f0:	0a 94       	dec	r0
    48f2:	e2 f7       	brpl	.-8      	; 0x48ec <_ZN14HardwareSerial3endEv+0x36>
    48f4:	20 95       	com	r18
    48f6:	24 23       	and	r18, r20
    48f8:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    48fa:	a6 89       	ldd	r26, Z+22	; 0x16
    48fc:	b7 89       	ldd	r27, Z+23	; 0x17
    48fe:	4c 91       	ld	r20, X
    4900:	9c 01       	movw	r18, r24
    4902:	03 8c       	ldd	r0, Z+27	; 0x1b
    4904:	02 c0       	rjmp	.+4      	; 0x490a <_ZN14HardwareSerial3endEv+0x54>
    4906:	22 0f       	add	r18, r18
    4908:	33 1f       	adc	r19, r19
    490a:	0a 94       	dec	r0
    490c:	e2 f7       	brpl	.-8      	; 0x4906 <_ZN14HardwareSerial3endEv+0x50>
    490e:	20 95       	com	r18
    4910:	24 23       	and	r18, r20
    4912:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    4914:	a6 89       	ldd	r26, Z+22	; 0x16
    4916:	b7 89       	ldd	r27, Z+23	; 0x17
    4918:	4c 91       	ld	r20, X
    491a:	9c 01       	movw	r18, r24
    491c:	04 8c       	ldd	r0, Z+28	; 0x1c
    491e:	02 c0       	rjmp	.+4      	; 0x4924 <_ZN14HardwareSerial3endEv+0x6e>
    4920:	22 0f       	add	r18, r18
    4922:	33 1f       	adc	r19, r19
    4924:	0a 94       	dec	r0
    4926:	e2 f7       	brpl	.-8      	; 0x4920 <_ZN14HardwareSerial3endEv+0x6a>
    4928:	20 95       	com	r18
    492a:	24 23       	and	r18, r20
    492c:	2c 93       	st	X, r18
  cbi(*_ucsrb, _udrie);
    492e:	a6 89       	ldd	r26, Z+22	; 0x16
    4930:	b7 89       	ldd	r27, Z+23	; 0x17
    4932:	2c 91       	ld	r18, X
    4934:	05 8c       	ldd	r0, Z+29	; 0x1d
    4936:	02 c0       	rjmp	.+4      	; 0x493c <_ZN14HardwareSerial3endEv+0x86>
    4938:	88 0f       	add	r24, r24
    493a:	99 1f       	adc	r25, r25
    493c:	0a 94       	dec	r0
    493e:	e2 f7       	brpl	.-8      	; 0x4938 <_ZN14HardwareSerial3endEv+0x82>
    4940:	80 95       	com	r24
    4942:	82 23       	and	r24, r18
    4944:	8c 93       	st	X, r24
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    4946:	84 85       	ldd	r24, Z+12	; 0x0c
    4948:	95 85       	ldd	r25, Z+13	; 0x0d
    494a:	fc 01       	movw	r30, r24
    494c:	ee 5b       	subi	r30, 0xBE	; 190
    494e:	ff 4f       	sbci	r31, 0xFF	; 255
    4950:	20 81       	ld	r18, Z
    4952:	31 81       	ldd	r19, Z+1	; 0x01
    4954:	80 5c       	subi	r24, 0xC0	; 192
    4956:	9f 4f       	sbci	r25, 0xFF	; 255
    4958:	fc 01       	movw	r30, r24
    495a:	31 83       	std	Z+1, r19	; 0x01
    495c:	20 83       	st	Z, r18
}
    495e:	df 91       	pop	r29
    4960:	cf 91       	pop	r28
    4962:	08 95       	ret

00004964 <_GLOBAL__I_rx_buffer>:
    4964:	10 92 70 04 	sts	0x0470, r1
    4968:	10 92 6f 04 	sts	0x046F, r1
    496c:	88 ee       	ldi	r24, 0xE8	; 232
    496e:	93 e0       	ldi	r25, 0x03	; 3
    4970:	a0 e0       	ldi	r26, 0x00	; 0
    4972:	b0 e0       	ldi	r27, 0x00	; 0
    4974:	80 93 71 04 	sts	0x0471, r24
    4978:	90 93 72 04 	sts	0x0472, r25
    497c:	a0 93 73 04 	sts	0x0473, r26
    4980:	b0 93 74 04 	sts	0x0474, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    4984:	ef e6       	ldi	r30, 0x6F	; 111
    4986:	f4 e0       	ldi	r31, 0x04	; 4
    4988:	8b ef       	ldi	r24, 0xFB	; 251
    498a:	92 e0       	ldi	r25, 0x02	; 2
    498c:	92 93       	st	-Z, r25
    498e:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
    4990:	85 ee       	ldi	r24, 0xE5	; 229
    4992:	93 e0       	ldi	r25, 0x03	; 3
    4994:	95 87       	std	Z+13, r25	; 0x0d
    4996:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    4998:	89 e2       	ldi	r24, 0x29	; 41
    499a:	94 e0       	ldi	r25, 0x04	; 4
    499c:	97 87       	std	Z+15, r25	; 0x0f
    499e:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    49a0:	85 ec       	ldi	r24, 0xC5	; 197
    49a2:	90 e0       	ldi	r25, 0x00	; 0
    49a4:	91 8b       	std	Z+17, r25	; 0x11
    49a6:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    49a8:	84 ec       	ldi	r24, 0xC4	; 196
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	93 8b       	std	Z+19, r25	; 0x13
    49ae:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    49b0:	80 ec       	ldi	r24, 0xC0	; 192
    49b2:	90 e0       	ldi	r25, 0x00	; 0
    49b4:	95 8b       	std	Z+21, r25	; 0x15
    49b6:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    49b8:	81 ec       	ldi	r24, 0xC1	; 193
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	97 8b       	std	Z+23, r25	; 0x17
    49be:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
    49c0:	86 ec       	ldi	r24, 0xC6	; 198
    49c2:	90 e0       	ldi	r25, 0x00	; 0
    49c4:	91 8f       	std	Z+25, r25	; 0x19
    49c6:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
    49c8:	84 e0       	ldi	r24, 0x04	; 4
    49ca:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    49cc:	83 e0       	ldi	r24, 0x03	; 3
    49ce:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    49d0:	87 e0       	ldi	r24, 0x07	; 7
    49d2:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    49d4:	85 e0       	ldi	r24, 0x05	; 5
    49d6:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    49d8:	81 e0       	ldi	r24, 0x01	; 1
    49da:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    49dc:	08 95       	ret

000049de <__udivmodhi4>:
    49de:	aa 1b       	sub	r26, r26
    49e0:	bb 1b       	sub	r27, r27
    49e2:	51 e1       	ldi	r21, 0x11	; 17
    49e4:	07 c0       	rjmp	.+14     	; 0x49f4 <__udivmodhi4_ep>

000049e6 <__udivmodhi4_loop>:
    49e6:	aa 1f       	adc	r26, r26
    49e8:	bb 1f       	adc	r27, r27
    49ea:	a6 17       	cp	r26, r22
    49ec:	b7 07       	cpc	r27, r23
    49ee:	10 f0       	brcs	.+4      	; 0x49f4 <__udivmodhi4_ep>
    49f0:	a6 1b       	sub	r26, r22
    49f2:	b7 0b       	sbc	r27, r23

000049f4 <__udivmodhi4_ep>:
    49f4:	88 1f       	adc	r24, r24
    49f6:	99 1f       	adc	r25, r25
    49f8:	5a 95       	dec	r21
    49fa:	a9 f7       	brne	.-22     	; 0x49e6 <__udivmodhi4_loop>
    49fc:	80 95       	com	r24
    49fe:	90 95       	com	r25
    4a00:	bc 01       	movw	r22, r24
    4a02:	cd 01       	movw	r24, r26
    4a04:	08 95       	ret

00004a06 <__divmodhi4>:
    4a06:	97 fb       	bst	r25, 7
    4a08:	09 2e       	mov	r0, r25
    4a0a:	07 26       	eor	r0, r23
    4a0c:	0a d0       	rcall	.+20     	; 0x4a22 <__divmodhi4_neg1>
    4a0e:	77 fd       	sbrc	r23, 7
    4a10:	04 d0       	rcall	.+8      	; 0x4a1a <__divmodhi4_neg2>
    4a12:	e5 df       	rcall	.-54     	; 0x49de <__udivmodhi4>
    4a14:	06 d0       	rcall	.+12     	; 0x4a22 <__divmodhi4_neg1>
    4a16:	00 20       	and	r0, r0
    4a18:	1a f4       	brpl	.+6      	; 0x4a20 <__divmodhi4_exit>

00004a1a <__divmodhi4_neg2>:
    4a1a:	70 95       	com	r23
    4a1c:	61 95       	neg	r22
    4a1e:	7f 4f       	sbci	r23, 0xFF	; 255

00004a20 <__divmodhi4_exit>:
    4a20:	08 95       	ret

00004a22 <__divmodhi4_neg1>:
    4a22:	f6 f7       	brtc	.-4      	; 0x4a20 <__divmodhi4_exit>
    4a24:	90 95       	com	r25
    4a26:	81 95       	neg	r24
    4a28:	9f 4f       	sbci	r25, 0xFF	; 255
    4a2a:	08 95       	ret

00004a2c <__udivmodsi4>:
    4a2c:	a1 e2       	ldi	r26, 0x21	; 33
    4a2e:	1a 2e       	mov	r1, r26
    4a30:	aa 1b       	sub	r26, r26
    4a32:	bb 1b       	sub	r27, r27
    4a34:	fd 01       	movw	r30, r26
    4a36:	0d c0       	rjmp	.+26     	; 0x4a52 <__udivmodsi4_ep>

00004a38 <__udivmodsi4_loop>:
    4a38:	aa 1f       	adc	r26, r26
    4a3a:	bb 1f       	adc	r27, r27
    4a3c:	ee 1f       	adc	r30, r30
    4a3e:	ff 1f       	adc	r31, r31
    4a40:	a2 17       	cp	r26, r18
    4a42:	b3 07       	cpc	r27, r19
    4a44:	e4 07       	cpc	r30, r20
    4a46:	f5 07       	cpc	r31, r21
    4a48:	20 f0       	brcs	.+8      	; 0x4a52 <__udivmodsi4_ep>
    4a4a:	a2 1b       	sub	r26, r18
    4a4c:	b3 0b       	sbc	r27, r19
    4a4e:	e4 0b       	sbc	r30, r20
    4a50:	f5 0b       	sbc	r31, r21

00004a52 <__udivmodsi4_ep>:
    4a52:	66 1f       	adc	r22, r22
    4a54:	77 1f       	adc	r23, r23
    4a56:	88 1f       	adc	r24, r24
    4a58:	99 1f       	adc	r25, r25
    4a5a:	1a 94       	dec	r1
    4a5c:	69 f7       	brne	.-38     	; 0x4a38 <__udivmodsi4_loop>
    4a5e:	60 95       	com	r22
    4a60:	70 95       	com	r23
    4a62:	80 95       	com	r24
    4a64:	90 95       	com	r25
    4a66:	9b 01       	movw	r18, r22
    4a68:	ac 01       	movw	r20, r24
    4a6a:	bd 01       	movw	r22, r26
    4a6c:	cf 01       	movw	r24, r30
    4a6e:	08 95       	ret

00004a70 <__prologue_saves__>:
    4a70:	2f 92       	push	r2
    4a72:	3f 92       	push	r3
    4a74:	4f 92       	push	r4
    4a76:	5f 92       	push	r5
    4a78:	6f 92       	push	r6
    4a7a:	7f 92       	push	r7
    4a7c:	8f 92       	push	r8
    4a7e:	9f 92       	push	r9
    4a80:	af 92       	push	r10
    4a82:	bf 92       	push	r11
    4a84:	cf 92       	push	r12
    4a86:	df 92       	push	r13
    4a88:	ef 92       	push	r14
    4a8a:	ff 92       	push	r15
    4a8c:	0f 93       	push	r16
    4a8e:	1f 93       	push	r17
    4a90:	cf 93       	push	r28
    4a92:	df 93       	push	r29
    4a94:	cd b7       	in	r28, 0x3d	; 61
    4a96:	de b7       	in	r29, 0x3e	; 62
    4a98:	ca 1b       	sub	r28, r26
    4a9a:	db 0b       	sbc	r29, r27
    4a9c:	0f b6       	in	r0, 0x3f	; 63
    4a9e:	f8 94       	cli
    4aa0:	de bf       	out	0x3e, r29	; 62
    4aa2:	0f be       	out	0x3f, r0	; 63
    4aa4:	cd bf       	out	0x3d, r28	; 61
    4aa6:	09 94       	ijmp

00004aa8 <__epilogue_restores__>:
    4aa8:	2a 88       	ldd	r2, Y+18	; 0x12
    4aaa:	39 88       	ldd	r3, Y+17	; 0x11
    4aac:	48 88       	ldd	r4, Y+16	; 0x10
    4aae:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ab0:	6e 84       	ldd	r6, Y+14	; 0x0e
    4ab2:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ab4:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ab6:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ab8:	aa 84       	ldd	r10, Y+10	; 0x0a
    4aba:	b9 84       	ldd	r11, Y+9	; 0x09
    4abc:	c8 84       	ldd	r12, Y+8	; 0x08
    4abe:	df 80       	ldd	r13, Y+7	; 0x07
    4ac0:	ee 80       	ldd	r14, Y+6	; 0x06
    4ac2:	fd 80       	ldd	r15, Y+5	; 0x05
    4ac4:	0c 81       	ldd	r16, Y+4	; 0x04
    4ac6:	1b 81       	ldd	r17, Y+3	; 0x03
    4ac8:	aa 81       	ldd	r26, Y+2	; 0x02
    4aca:	b9 81       	ldd	r27, Y+1	; 0x01
    4acc:	ce 0f       	add	r28, r30
    4ace:	d1 1d       	adc	r29, r1
    4ad0:	0f b6       	in	r0, 0x3f	; 63
    4ad2:	f8 94       	cli
    4ad4:	de bf       	out	0x3e, r29	; 62
    4ad6:	0f be       	out	0x3f, r0	; 63
    4ad8:	cd bf       	out	0x3d, r28	; 61
    4ada:	ed 01       	movw	r28, r26
    4adc:	08 95       	ret

00004ade <__tablejump2__>:
    4ade:	ee 0f       	add	r30, r30
    4ae0:	ff 1f       	adc	r31, r31

00004ae2 <__tablejump__>:
    4ae2:	05 90       	lpm	r0, Z+
    4ae4:	f4 91       	lpm	r31, Z+
    4ae6:	e0 2d       	mov	r30, r0
    4ae8:	09 94       	ijmp
    4aea:	11 f4       	brne	.+4      	; 0x4af0 <__tablejump__+0xe>
    4aec:	0e f4       	brtc	.+2      	; 0x4af0 <__tablejump__+0xe>
    4aee:	4d c0       	rjmp	.+154    	; 0x4b8a <__fp_nan>
    4af0:	3e c0       	rjmp	.+124    	; 0x4b6e <__fp_mpack>

00004af2 <sqrt>:
    4af2:	5d d0       	rcall	.+186    	; 0x4bae <__fp_splitA>
    4af4:	d0 f3       	brcs	.-12     	; 0x4aea <__tablejump__+0x8>
    4af6:	99 23       	and	r25, r25
    4af8:	d9 f3       	breq	.-10     	; 0x4af0 <__tablejump__+0xe>
    4afa:	ce f3       	brts	.-14     	; 0x4aee <__tablejump__+0xc>
    4afc:	9f 57       	subi	r25, 0x7F	; 127
    4afe:	55 0b       	sbc	r21, r21
    4b00:	87 ff       	sbrs	r24, 7
    4b02:	46 d0       	rcall	.+140    	; 0x4b90 <__fp_norm2>
    4b04:	00 24       	eor	r0, r0
    4b06:	a0 e6       	ldi	r26, 0x60	; 96
    4b08:	40 ea       	ldi	r20, 0xA0	; 160
    4b0a:	90 01       	movw	r18, r0
    4b0c:	80 58       	subi	r24, 0x80	; 128
    4b0e:	56 95       	lsr	r21
    4b10:	97 95       	ror	r25
    4b12:	28 f4       	brcc	.+10     	; 0x4b1e <sqrt+0x2c>
    4b14:	80 5c       	subi	r24, 0xC0	; 192
    4b16:	66 0f       	add	r22, r22
    4b18:	77 1f       	adc	r23, r23
    4b1a:	88 1f       	adc	r24, r24
    4b1c:	20 f0       	brcs	.+8      	; 0x4b26 <sqrt+0x34>
    4b1e:	26 17       	cp	r18, r22
    4b20:	37 07       	cpc	r19, r23
    4b22:	48 07       	cpc	r20, r24
    4b24:	30 f4       	brcc	.+12     	; 0x4b32 <sqrt+0x40>
    4b26:	62 1b       	sub	r22, r18
    4b28:	73 0b       	sbc	r23, r19
    4b2a:	84 0b       	sbc	r24, r20
    4b2c:	20 29       	or	r18, r0
    4b2e:	31 29       	or	r19, r1
    4b30:	4a 2b       	or	r20, r26
    4b32:	a6 95       	lsr	r26
    4b34:	17 94       	ror	r1
    4b36:	07 94       	ror	r0
    4b38:	20 25       	eor	r18, r0
    4b3a:	31 25       	eor	r19, r1
    4b3c:	4a 27       	eor	r20, r26
    4b3e:	58 f7       	brcc	.-42     	; 0x4b16 <sqrt+0x24>
    4b40:	66 0f       	add	r22, r22
    4b42:	77 1f       	adc	r23, r23
    4b44:	88 1f       	adc	r24, r24
    4b46:	20 f0       	brcs	.+8      	; 0x4b50 <sqrt+0x5e>
    4b48:	26 17       	cp	r18, r22
    4b4a:	37 07       	cpc	r19, r23
    4b4c:	48 07       	cpc	r20, r24
    4b4e:	30 f4       	brcc	.+12     	; 0x4b5c <sqrt+0x6a>
    4b50:	62 0b       	sbc	r22, r18
    4b52:	73 0b       	sbc	r23, r19
    4b54:	84 0b       	sbc	r24, r20
    4b56:	20 0d       	add	r18, r0
    4b58:	31 1d       	adc	r19, r1
    4b5a:	41 1d       	adc	r20, r1
    4b5c:	a0 95       	com	r26
    4b5e:	81 f7       	brne	.-32     	; 0x4b40 <sqrt+0x4e>
    4b60:	b9 01       	movw	r22, r18
    4b62:	84 2f       	mov	r24, r20
    4b64:	91 58       	subi	r25, 0x81	; 129
    4b66:	88 0f       	add	r24, r24
    4b68:	96 95       	lsr	r25
    4b6a:	87 95       	ror	r24
    4b6c:	08 95       	ret

00004b6e <__fp_mpack>:
    4b6e:	9f 3f       	cpi	r25, 0xFF	; 255
    4b70:	31 f0       	breq	.+12     	; 0x4b7e <__fp_mpack_finite+0xc>

00004b72 <__fp_mpack_finite>:
    4b72:	91 50       	subi	r25, 0x01	; 1
    4b74:	20 f4       	brcc	.+8      	; 0x4b7e <__fp_mpack_finite+0xc>
    4b76:	87 95       	ror	r24
    4b78:	77 95       	ror	r23
    4b7a:	67 95       	ror	r22
    4b7c:	b7 95       	ror	r27
    4b7e:	88 0f       	add	r24, r24
    4b80:	91 1d       	adc	r25, r1
    4b82:	96 95       	lsr	r25
    4b84:	87 95       	ror	r24
    4b86:	97 f9       	bld	r25, 7
    4b88:	08 95       	ret

00004b8a <__fp_nan>:
    4b8a:	9f ef       	ldi	r25, 0xFF	; 255
    4b8c:	80 ec       	ldi	r24, 0xC0	; 192
    4b8e:	08 95       	ret

00004b90 <__fp_norm2>:
    4b90:	91 50       	subi	r25, 0x01	; 1
    4b92:	50 40       	sbci	r21, 0x00	; 0
    4b94:	66 0f       	add	r22, r22
    4b96:	77 1f       	adc	r23, r23
    4b98:	88 1f       	adc	r24, r24
    4b9a:	d2 f7       	brpl	.-12     	; 0x4b90 <__fp_norm2>
    4b9c:	08 95       	ret

00004b9e <__fp_split3>:
    4b9e:	57 fd       	sbrc	r21, 7
    4ba0:	90 58       	subi	r25, 0x80	; 128
    4ba2:	44 0f       	add	r20, r20
    4ba4:	55 1f       	adc	r21, r21
    4ba6:	59 f0       	breq	.+22     	; 0x4bbe <__fp_splitA+0x10>
    4ba8:	5f 3f       	cpi	r21, 0xFF	; 255
    4baa:	71 f0       	breq	.+28     	; 0x4bc8 <__fp_splitA+0x1a>
    4bac:	47 95       	ror	r20

00004bae <__fp_splitA>:
    4bae:	88 0f       	add	r24, r24
    4bb0:	97 fb       	bst	r25, 7
    4bb2:	99 1f       	adc	r25, r25
    4bb4:	61 f0       	breq	.+24     	; 0x4bce <__fp_splitA+0x20>
    4bb6:	9f 3f       	cpi	r25, 0xFF	; 255
    4bb8:	79 f0       	breq	.+30     	; 0x4bd8 <__fp_splitA+0x2a>
    4bba:	87 95       	ror	r24
    4bbc:	08 95       	ret
    4bbe:	12 16       	cp	r1, r18
    4bc0:	13 06       	cpc	r1, r19
    4bc2:	14 06       	cpc	r1, r20
    4bc4:	55 1f       	adc	r21, r21
    4bc6:	f2 cf       	rjmp	.-28     	; 0x4bac <__fp_split3+0xe>
    4bc8:	46 95       	lsr	r20
    4bca:	f1 df       	rcall	.-30     	; 0x4bae <__fp_splitA>
    4bcc:	08 c0       	rjmp	.+16     	; 0x4bde <__fp_splitA+0x30>
    4bce:	16 16       	cp	r1, r22
    4bd0:	17 06       	cpc	r1, r23
    4bd2:	18 06       	cpc	r1, r24
    4bd4:	99 1f       	adc	r25, r25
    4bd6:	f1 cf       	rjmp	.-30     	; 0x4bba <__fp_splitA+0xc>
    4bd8:	86 95       	lsr	r24
    4bda:	71 05       	cpc	r23, r1
    4bdc:	61 05       	cpc	r22, r1
    4bde:	08 94       	sec
    4be0:	08 95       	ret

00004be2 <malloc>:
    4be2:	cf 93       	push	r28
    4be4:	df 93       	push	r29
    4be6:	82 30       	cpi	r24, 0x02	; 2
    4be8:	91 05       	cpc	r25, r1
    4bea:	10 f4       	brcc	.+4      	; 0x4bf0 <malloc+0xe>
    4bec:	82 e0       	ldi	r24, 0x02	; 2
    4bee:	90 e0       	ldi	r25, 0x00	; 0
    4bf0:	e0 91 8e 04 	lds	r30, 0x048E
    4bf4:	f0 91 8f 04 	lds	r31, 0x048F
    4bf8:	40 e0       	ldi	r20, 0x00	; 0
    4bfa:	50 e0       	ldi	r21, 0x00	; 0
    4bfc:	20 e0       	ldi	r18, 0x00	; 0
    4bfe:	30 e0       	ldi	r19, 0x00	; 0
    4c00:	26 c0       	rjmp	.+76     	; 0x4c4e <malloc+0x6c>
    4c02:	60 81       	ld	r22, Z
    4c04:	71 81       	ldd	r23, Z+1	; 0x01
    4c06:	68 17       	cp	r22, r24
    4c08:	79 07       	cpc	r23, r25
    4c0a:	e0 f0       	brcs	.+56     	; 0x4c44 <malloc+0x62>
    4c0c:	68 17       	cp	r22, r24
    4c0e:	79 07       	cpc	r23, r25
    4c10:	81 f4       	brne	.+32     	; 0x4c32 <malloc+0x50>
    4c12:	82 81       	ldd	r24, Z+2	; 0x02
    4c14:	93 81       	ldd	r25, Z+3	; 0x03
    4c16:	21 15       	cp	r18, r1
    4c18:	31 05       	cpc	r19, r1
    4c1a:	31 f0       	breq	.+12     	; 0x4c28 <malloc+0x46>
    4c1c:	d9 01       	movw	r26, r18
    4c1e:	13 96       	adiw	r26, 0x03	; 3
    4c20:	9c 93       	st	X, r25
    4c22:	8e 93       	st	-X, r24
    4c24:	12 97       	sbiw	r26, 0x02	; 2
    4c26:	2b c0       	rjmp	.+86     	; 0x4c7e <malloc+0x9c>
    4c28:	90 93 8f 04 	sts	0x048F, r25
    4c2c:	80 93 8e 04 	sts	0x048E, r24
    4c30:	26 c0       	rjmp	.+76     	; 0x4c7e <malloc+0x9c>
    4c32:	41 15       	cp	r20, r1
    4c34:	51 05       	cpc	r21, r1
    4c36:	19 f0       	breq	.+6      	; 0x4c3e <malloc+0x5c>
    4c38:	64 17       	cp	r22, r20
    4c3a:	75 07       	cpc	r23, r21
    4c3c:	18 f4       	brcc	.+6      	; 0x4c44 <malloc+0x62>
    4c3e:	ab 01       	movw	r20, r22
    4c40:	e9 01       	movw	r28, r18
    4c42:	df 01       	movw	r26, r30
    4c44:	9f 01       	movw	r18, r30
    4c46:	72 81       	ldd	r23, Z+2	; 0x02
    4c48:	63 81       	ldd	r22, Z+3	; 0x03
    4c4a:	e7 2f       	mov	r30, r23
    4c4c:	f6 2f       	mov	r31, r22
    4c4e:	30 97       	sbiw	r30, 0x00	; 0
    4c50:	c1 f6       	brne	.-80     	; 0x4c02 <malloc+0x20>
    4c52:	41 15       	cp	r20, r1
    4c54:	51 05       	cpc	r21, r1
    4c56:	01 f1       	breq	.+64     	; 0x4c98 <malloc+0xb6>
    4c58:	48 1b       	sub	r20, r24
    4c5a:	59 0b       	sbc	r21, r25
    4c5c:	44 30       	cpi	r20, 0x04	; 4
    4c5e:	51 05       	cpc	r21, r1
    4c60:	80 f4       	brcc	.+32     	; 0x4c82 <malloc+0xa0>
    4c62:	12 96       	adiw	r26, 0x02	; 2
    4c64:	8d 91       	ld	r24, X+
    4c66:	9c 91       	ld	r25, X
    4c68:	13 97       	sbiw	r26, 0x03	; 3
    4c6a:	20 97       	sbiw	r28, 0x00	; 0
    4c6c:	19 f0       	breq	.+6      	; 0x4c74 <malloc+0x92>
    4c6e:	9b 83       	std	Y+3, r25	; 0x03
    4c70:	8a 83       	std	Y+2, r24	; 0x02
    4c72:	04 c0       	rjmp	.+8      	; 0x4c7c <malloc+0x9a>
    4c74:	90 93 8f 04 	sts	0x048F, r25
    4c78:	80 93 8e 04 	sts	0x048E, r24
    4c7c:	fd 01       	movw	r30, r26
    4c7e:	32 96       	adiw	r30, 0x02	; 2
    4c80:	46 c0       	rjmp	.+140    	; 0x4d0e <malloc+0x12c>
    4c82:	fd 01       	movw	r30, r26
    4c84:	e4 0f       	add	r30, r20
    4c86:	f5 1f       	adc	r31, r21
    4c88:	81 93       	st	Z+, r24
    4c8a:	91 93       	st	Z+, r25
    4c8c:	42 50       	subi	r20, 0x02	; 2
    4c8e:	50 40       	sbci	r21, 0x00	; 0
    4c90:	11 96       	adiw	r26, 0x01	; 1
    4c92:	5c 93       	st	X, r21
    4c94:	4e 93       	st	-X, r20
    4c96:	3b c0       	rjmp	.+118    	; 0x4d0e <malloc+0x12c>
    4c98:	20 91 8c 04 	lds	r18, 0x048C
    4c9c:	30 91 8d 04 	lds	r19, 0x048D
    4ca0:	21 15       	cp	r18, r1
    4ca2:	31 05       	cpc	r19, r1
    4ca4:	41 f4       	brne	.+16     	; 0x4cb6 <malloc+0xd4>
    4ca6:	20 91 ea 02 	lds	r18, 0x02EA
    4caa:	30 91 eb 02 	lds	r19, 0x02EB
    4cae:	30 93 8d 04 	sts	0x048D, r19
    4cb2:	20 93 8c 04 	sts	0x048C, r18
    4cb6:	20 91 ec 02 	lds	r18, 0x02EC
    4cba:	30 91 ed 02 	lds	r19, 0x02ED
    4cbe:	21 15       	cp	r18, r1
    4cc0:	31 05       	cpc	r19, r1
    4cc2:	41 f4       	brne	.+16     	; 0x4cd4 <malloc+0xf2>
    4cc4:	2d b7       	in	r18, 0x3d	; 61
    4cc6:	3e b7       	in	r19, 0x3e	; 62
    4cc8:	40 91 e8 02 	lds	r20, 0x02E8
    4ccc:	50 91 e9 02 	lds	r21, 0x02E9
    4cd0:	24 1b       	sub	r18, r20
    4cd2:	35 0b       	sbc	r19, r21
    4cd4:	e0 91 8c 04 	lds	r30, 0x048C
    4cd8:	f0 91 8d 04 	lds	r31, 0x048D
    4cdc:	e2 17       	cp	r30, r18
    4cde:	f3 07       	cpc	r31, r19
    4ce0:	a0 f4       	brcc	.+40     	; 0x4d0a <malloc+0x128>
    4ce2:	2e 1b       	sub	r18, r30
    4ce4:	3f 0b       	sbc	r19, r31
    4ce6:	28 17       	cp	r18, r24
    4ce8:	39 07       	cpc	r19, r25
    4cea:	78 f0       	brcs	.+30     	; 0x4d0a <malloc+0x128>
    4cec:	ac 01       	movw	r20, r24
    4cee:	4e 5f       	subi	r20, 0xFE	; 254
    4cf0:	5f 4f       	sbci	r21, 0xFF	; 255
    4cf2:	24 17       	cp	r18, r20
    4cf4:	35 07       	cpc	r19, r21
    4cf6:	48 f0       	brcs	.+18     	; 0x4d0a <malloc+0x128>
    4cf8:	4e 0f       	add	r20, r30
    4cfa:	5f 1f       	adc	r21, r31
    4cfc:	50 93 8d 04 	sts	0x048D, r21
    4d00:	40 93 8c 04 	sts	0x048C, r20
    4d04:	81 93       	st	Z+, r24
    4d06:	91 93       	st	Z+, r25
    4d08:	02 c0       	rjmp	.+4      	; 0x4d0e <malloc+0x12c>
    4d0a:	e0 e0       	ldi	r30, 0x00	; 0
    4d0c:	f0 e0       	ldi	r31, 0x00	; 0
    4d0e:	cf 01       	movw	r24, r30
    4d10:	df 91       	pop	r29
    4d12:	cf 91       	pop	r28
    4d14:	08 95       	ret

00004d16 <free>:
    4d16:	cf 93       	push	r28
    4d18:	df 93       	push	r29
    4d1a:	00 97       	sbiw	r24, 0x00	; 0
    4d1c:	09 f4       	brne	.+2      	; 0x4d20 <free+0xa>
    4d1e:	91 c0       	rjmp	.+290    	; 0x4e42 <free+0x12c>
    4d20:	fc 01       	movw	r30, r24
    4d22:	32 97       	sbiw	r30, 0x02	; 2
    4d24:	13 82       	std	Z+3, r1	; 0x03
    4d26:	12 82       	std	Z+2, r1	; 0x02
    4d28:	60 91 8e 04 	lds	r22, 0x048E
    4d2c:	70 91 8f 04 	lds	r23, 0x048F
    4d30:	61 15       	cp	r22, r1
    4d32:	71 05       	cpc	r23, r1
    4d34:	81 f4       	brne	.+32     	; 0x4d56 <free+0x40>
    4d36:	20 81       	ld	r18, Z
    4d38:	31 81       	ldd	r19, Z+1	; 0x01
    4d3a:	28 0f       	add	r18, r24
    4d3c:	39 1f       	adc	r19, r25
    4d3e:	80 91 8c 04 	lds	r24, 0x048C
    4d42:	90 91 8d 04 	lds	r25, 0x048D
    4d46:	82 17       	cp	r24, r18
    4d48:	93 07       	cpc	r25, r19
    4d4a:	99 f5       	brne	.+102    	; 0x4db2 <free+0x9c>
    4d4c:	f0 93 8d 04 	sts	0x048D, r31
    4d50:	e0 93 8c 04 	sts	0x048C, r30
    4d54:	76 c0       	rjmp	.+236    	; 0x4e42 <free+0x12c>
    4d56:	db 01       	movw	r26, r22
    4d58:	80 e0       	ldi	r24, 0x00	; 0
    4d5a:	90 e0       	ldi	r25, 0x00	; 0
    4d5c:	02 c0       	rjmp	.+4      	; 0x4d62 <free+0x4c>
    4d5e:	cd 01       	movw	r24, r26
    4d60:	d9 01       	movw	r26, r18
    4d62:	ae 17       	cp	r26, r30
    4d64:	bf 07       	cpc	r27, r31
    4d66:	48 f4       	brcc	.+18     	; 0x4d7a <free+0x64>
    4d68:	12 96       	adiw	r26, 0x02	; 2
    4d6a:	2d 91       	ld	r18, X+
    4d6c:	3c 91       	ld	r19, X
    4d6e:	13 97       	sbiw	r26, 0x03	; 3
    4d70:	21 15       	cp	r18, r1
    4d72:	31 05       	cpc	r19, r1
    4d74:	a1 f7       	brne	.-24     	; 0x4d5e <free+0x48>
    4d76:	cd 01       	movw	r24, r26
    4d78:	21 c0       	rjmp	.+66     	; 0x4dbc <free+0xa6>
    4d7a:	b3 83       	std	Z+3, r27	; 0x03
    4d7c:	a2 83       	std	Z+2, r26	; 0x02
    4d7e:	ef 01       	movw	r28, r30
    4d80:	49 91       	ld	r20, Y+
    4d82:	59 91       	ld	r21, Y+
    4d84:	9e 01       	movw	r18, r28
    4d86:	24 0f       	add	r18, r20
    4d88:	35 1f       	adc	r19, r21
    4d8a:	a2 17       	cp	r26, r18
    4d8c:	b3 07       	cpc	r27, r19
    4d8e:	79 f4       	brne	.+30     	; 0x4dae <free+0x98>
    4d90:	2d 91       	ld	r18, X+
    4d92:	3c 91       	ld	r19, X
    4d94:	11 97       	sbiw	r26, 0x01	; 1
    4d96:	24 0f       	add	r18, r20
    4d98:	35 1f       	adc	r19, r21
    4d9a:	2e 5f       	subi	r18, 0xFE	; 254
    4d9c:	3f 4f       	sbci	r19, 0xFF	; 255
    4d9e:	31 83       	std	Z+1, r19	; 0x01
    4da0:	20 83       	st	Z, r18
    4da2:	12 96       	adiw	r26, 0x02	; 2
    4da4:	2d 91       	ld	r18, X+
    4da6:	3c 91       	ld	r19, X
    4da8:	13 97       	sbiw	r26, 0x03	; 3
    4daa:	33 83       	std	Z+3, r19	; 0x03
    4dac:	22 83       	std	Z+2, r18	; 0x02
    4dae:	00 97       	sbiw	r24, 0x00	; 0
    4db0:	29 f4       	brne	.+10     	; 0x4dbc <free+0xa6>
    4db2:	f0 93 8f 04 	sts	0x048F, r31
    4db6:	e0 93 8e 04 	sts	0x048E, r30
    4dba:	43 c0       	rjmp	.+134    	; 0x4e42 <free+0x12c>
    4dbc:	dc 01       	movw	r26, r24
    4dbe:	13 96       	adiw	r26, 0x03	; 3
    4dc0:	fc 93       	st	X, r31
    4dc2:	ee 93       	st	-X, r30
    4dc4:	12 97       	sbiw	r26, 0x02	; 2
    4dc6:	4d 91       	ld	r20, X+
    4dc8:	5d 91       	ld	r21, X+
    4dca:	a4 0f       	add	r26, r20
    4dcc:	b5 1f       	adc	r27, r21
    4dce:	ea 17       	cp	r30, r26
    4dd0:	fb 07       	cpc	r31, r27
    4dd2:	69 f4       	brne	.+26     	; 0x4dee <free+0xd8>
    4dd4:	20 81       	ld	r18, Z
    4dd6:	31 81       	ldd	r19, Z+1	; 0x01
    4dd8:	24 0f       	add	r18, r20
    4dda:	35 1f       	adc	r19, r21
    4ddc:	2e 5f       	subi	r18, 0xFE	; 254
    4dde:	3f 4f       	sbci	r19, 0xFF	; 255
    4de0:	ec 01       	movw	r28, r24
    4de2:	39 83       	std	Y+1, r19	; 0x01
    4de4:	28 83       	st	Y, r18
    4de6:	22 81       	ldd	r18, Z+2	; 0x02
    4de8:	33 81       	ldd	r19, Z+3	; 0x03
    4dea:	3b 83       	std	Y+3, r19	; 0x03
    4dec:	2a 83       	std	Y+2, r18	; 0x02
    4dee:	e0 e0       	ldi	r30, 0x00	; 0
    4df0:	f0 e0       	ldi	r31, 0x00	; 0
    4df2:	02 c0       	rjmp	.+4      	; 0x4df8 <free+0xe2>
    4df4:	fb 01       	movw	r30, r22
    4df6:	bc 01       	movw	r22, r24
    4df8:	db 01       	movw	r26, r22
    4dfa:	12 96       	adiw	r26, 0x02	; 2
    4dfc:	8d 91       	ld	r24, X+
    4dfe:	9c 91       	ld	r25, X
    4e00:	13 97       	sbiw	r26, 0x03	; 3
    4e02:	00 97       	sbiw	r24, 0x00	; 0
    4e04:	b9 f7       	brne	.-18     	; 0x4df4 <free+0xde>
    4e06:	9b 01       	movw	r18, r22
    4e08:	2e 5f       	subi	r18, 0xFE	; 254
    4e0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4e0c:	8d 91       	ld	r24, X+
    4e0e:	9c 91       	ld	r25, X
    4e10:	11 97       	sbiw	r26, 0x01	; 1
    4e12:	82 0f       	add	r24, r18
    4e14:	93 1f       	adc	r25, r19
    4e16:	40 91 8c 04 	lds	r20, 0x048C
    4e1a:	50 91 8d 04 	lds	r21, 0x048D
    4e1e:	48 17       	cp	r20, r24
    4e20:	59 07       	cpc	r21, r25
    4e22:	79 f4       	brne	.+30     	; 0x4e42 <free+0x12c>
    4e24:	30 97       	sbiw	r30, 0x00	; 0
    4e26:	29 f4       	brne	.+10     	; 0x4e32 <free+0x11c>
    4e28:	10 92 8f 04 	sts	0x048F, r1
    4e2c:	10 92 8e 04 	sts	0x048E, r1
    4e30:	02 c0       	rjmp	.+4      	; 0x4e36 <free+0x120>
    4e32:	13 82       	std	Z+3, r1	; 0x03
    4e34:	12 82       	std	Z+2, r1	; 0x02
    4e36:	22 50       	subi	r18, 0x02	; 2
    4e38:	30 40       	sbci	r19, 0x00	; 0
    4e3a:	30 93 8d 04 	sts	0x048D, r19
    4e3e:	20 93 8c 04 	sts	0x048C, r18
    4e42:	df 91       	pop	r29
    4e44:	cf 91       	pop	r28
    4e46:	08 95       	ret

00004e48 <realloc>:
    4e48:	a0 e0       	ldi	r26, 0x00	; 0
    4e4a:	b0 e0       	ldi	r27, 0x00	; 0
    4e4c:	ea e2       	ldi	r30, 0x2A	; 42
    4e4e:	f7 e2       	ldi	r31, 0x27	; 39
    4e50:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <__prologue_saves__+0xc>
    4e54:	8c 01       	movw	r16, r24
    4e56:	cb 01       	movw	r24, r22
    4e58:	01 15       	cp	r16, r1
    4e5a:	11 05       	cpc	r17, r1
    4e5c:	29 f4       	brne	.+10     	; 0x4e68 <realloc+0x20>
    4e5e:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <malloc>
    4e62:	08 2f       	mov	r16, r24
    4e64:	19 2f       	mov	r17, r25
    4e66:	b5 c0       	rjmp	.+362    	; 0x4fd2 <realloc+0x18a>
    4e68:	d8 01       	movw	r26, r16
    4e6a:	12 97       	sbiw	r26, 0x02	; 2
    4e6c:	98 01       	movw	r18, r16
    4e6e:	26 0f       	add	r18, r22
    4e70:	37 1f       	adc	r19, r23
    4e72:	2a 17       	cp	r18, r26
    4e74:	3b 07       	cpc	r19, r27
    4e76:	08 f4       	brcc	.+2      	; 0x4e7a <realloc+0x32>
    4e78:	aa c0       	rjmp	.+340    	; 0x4fce <realloc+0x186>
    4e7a:	ed 90       	ld	r14, X+
    4e7c:	fc 90       	ld	r15, X
    4e7e:	11 97       	sbiw	r26, 0x01	; 1
    4e80:	e6 16       	cp	r14, r22
    4e82:	f7 06       	cpc	r15, r23
    4e84:	d0 f0       	brcs	.+52     	; 0x4eba <realloc+0x72>
    4e86:	45 e0       	ldi	r20, 0x05	; 5
    4e88:	e4 16       	cp	r14, r20
    4e8a:	f1 04       	cpc	r15, r1
    4e8c:	08 f4       	brcc	.+2      	; 0x4e90 <realloc+0x48>
    4e8e:	a1 c0       	rjmp	.+322    	; 0x4fd2 <realloc+0x18a>
    4e90:	a7 01       	movw	r20, r14
    4e92:	44 50       	subi	r20, 0x04	; 4
    4e94:	50 40       	sbci	r21, 0x00	; 0
    4e96:	46 17       	cp	r20, r22
    4e98:	57 07       	cpc	r21, r23
    4e9a:	08 f4       	brcc	.+2      	; 0x4e9e <realloc+0x56>
    4e9c:	9a c0       	rjmp	.+308    	; 0x4fd2 <realloc+0x18a>
    4e9e:	a7 01       	movw	r20, r14
    4ea0:	42 50       	subi	r20, 0x02	; 2
    4ea2:	50 40       	sbci	r21, 0x00	; 0
    4ea4:	46 1b       	sub	r20, r22
    4ea6:	57 0b       	sbc	r21, r23
    4ea8:	f9 01       	movw	r30, r18
    4eaa:	41 93       	st	Z+, r20
    4eac:	51 93       	st	Z+, r21
    4eae:	6d 93       	st	X+, r22
    4eb0:	7c 93       	st	X, r23
    4eb2:	cf 01       	movw	r24, r30
    4eb4:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <free>
    4eb8:	8c c0       	rjmp	.+280    	; 0x4fd2 <realloc+0x18a>
    4eba:	5b 01       	movw	r10, r22
    4ebc:	ae 18       	sub	r10, r14
    4ebe:	bf 08       	sbc	r11, r15
    4ec0:	48 01       	movw	r8, r16
    4ec2:	8e 0c       	add	r8, r14
    4ec4:	9f 1c       	adc	r9, r15
    4ec6:	e0 91 8e 04 	lds	r30, 0x048E
    4eca:	f0 91 8f 04 	lds	r31, 0x048F
    4ece:	cc 24       	eor	r12, r12
    4ed0:	dd 24       	eor	r13, r13
    4ed2:	c0 e0       	ldi	r28, 0x00	; 0
    4ed4:	d0 e0       	ldi	r29, 0x00	; 0
    4ed6:	41 c0       	rjmp	.+130    	; 0x4f5a <realloc+0x112>
    4ed8:	e8 15       	cp	r30, r8
    4eda:	f9 05       	cpc	r31, r9
    4edc:	99 f5       	brne	.+102    	; 0x4f44 <realloc+0xfc>
    4ede:	60 81       	ld	r22, Z
    4ee0:	71 81       	ldd	r23, Z+1	; 0x01
    4ee2:	ab 01       	movw	r20, r22
    4ee4:	4e 5f       	subi	r20, 0xFE	; 254
    4ee6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ee8:	4a 15       	cp	r20, r10
    4eea:	5b 05       	cpc	r21, r11
    4eec:	58 f1       	brcs	.+86     	; 0x4f44 <realloc+0xfc>
    4eee:	ab 01       	movw	r20, r22
    4ef0:	4a 19       	sub	r20, r10
    4ef2:	5b 09       	sbc	r21, r11
    4ef4:	cc 24       	eor	r12, r12
    4ef6:	dd 24       	eor	r13, r13
    4ef8:	68 94       	set
    4efa:	c1 f8       	bld	r12, 1
    4efc:	c4 0e       	add	r12, r20
    4efe:	d5 1e       	adc	r13, r21
    4f00:	82 80       	ldd	r8, Z+2	; 0x02
    4f02:	a3 80       	ldd	r10, Z+3	; 0x03
    4f04:	e5 e0       	ldi	r30, 0x05	; 5
    4f06:	ce 16       	cp	r12, r30
    4f08:	d1 04       	cpc	r13, r1
    4f0a:	48 f0       	brcs	.+18     	; 0x4f1e <realloc+0xd6>
    4f0c:	f9 01       	movw	r30, r18
    4f0e:	82 82       	std	Z+2, r8	; 0x02
    4f10:	a3 82       	std	Z+3, r10	; 0x03
    4f12:	51 83       	std	Z+1, r21	; 0x01
    4f14:	40 83       	st	Z, r20
    4f16:	11 96       	adiw	r26, 0x01	; 1
    4f18:	9c 93       	st	X, r25
    4f1a:	8e 93       	st	-X, r24
    4f1c:	09 c0       	rjmp	.+18     	; 0x4f30 <realloc+0xe8>
    4f1e:	c7 01       	movw	r24, r14
    4f20:	02 96       	adiw	r24, 0x02	; 2
    4f22:	86 0f       	add	r24, r22
    4f24:	97 1f       	adc	r25, r23
    4f26:	11 96       	adiw	r26, 0x01	; 1
    4f28:	9c 93       	st	X, r25
    4f2a:	8e 93       	st	-X, r24
    4f2c:	e8 2d       	mov	r30, r8
    4f2e:	fa 2d       	mov	r31, r10
    4f30:	20 97       	sbiw	r28, 0x00	; 0
    4f32:	19 f0       	breq	.+6      	; 0x4f3a <realloc+0xf2>
    4f34:	fb 83       	std	Y+3, r31	; 0x03
    4f36:	ea 83       	std	Y+2, r30	; 0x02
    4f38:	4c c0       	rjmp	.+152    	; 0x4fd2 <realloc+0x18a>
    4f3a:	f0 93 8f 04 	sts	0x048F, r31
    4f3e:	e0 93 8e 04 	sts	0x048E, r30
    4f42:	47 c0       	rjmp	.+142    	; 0x4fd2 <realloc+0x18a>
    4f44:	40 81       	ld	r20, Z
    4f46:	51 81       	ldd	r21, Z+1	; 0x01
    4f48:	c4 16       	cp	r12, r20
    4f4a:	d5 06       	cpc	r13, r21
    4f4c:	08 f4       	brcc	.+2      	; 0x4f50 <realloc+0x108>
    4f4e:	6a 01       	movw	r12, r20
    4f50:	ef 01       	movw	r28, r30
    4f52:	52 81       	ldd	r21, Z+2	; 0x02
    4f54:	43 81       	ldd	r20, Z+3	; 0x03
    4f56:	e5 2f       	mov	r30, r21
    4f58:	f4 2f       	mov	r31, r20
    4f5a:	30 97       	sbiw	r30, 0x00	; 0
    4f5c:	09 f0       	breq	.+2      	; 0x4f60 <realloc+0x118>
    4f5e:	bc cf       	rjmp	.-136    	; 0x4ed8 <realloc+0x90>
    4f60:	40 91 8c 04 	lds	r20, 0x048C
    4f64:	50 91 8d 04 	lds	r21, 0x048D
    4f68:	48 15       	cp	r20, r8
    4f6a:	59 05       	cpc	r21, r9
    4f6c:	e9 f4       	brne	.+58     	; 0x4fa8 <realloc+0x160>
    4f6e:	c8 16       	cp	r12, r24
    4f70:	d9 06       	cpc	r13, r25
    4f72:	d0 f4       	brcc	.+52     	; 0x4fa8 <realloc+0x160>
    4f74:	40 91 ec 02 	lds	r20, 0x02EC
    4f78:	50 91 ed 02 	lds	r21, 0x02ED
    4f7c:	41 15       	cp	r20, r1
    4f7e:	51 05       	cpc	r21, r1
    4f80:	41 f4       	brne	.+16     	; 0x4f92 <realloc+0x14a>
    4f82:	4d b7       	in	r20, 0x3d	; 61
    4f84:	5e b7       	in	r21, 0x3e	; 62
    4f86:	60 91 e8 02 	lds	r22, 0x02E8
    4f8a:	70 91 e9 02 	lds	r23, 0x02E9
    4f8e:	46 1b       	sub	r20, r22
    4f90:	57 0b       	sbc	r21, r23
    4f92:	24 17       	cp	r18, r20
    4f94:	35 07       	cpc	r19, r21
    4f96:	d8 f4       	brcc	.+54     	; 0x4fce <realloc+0x186>
    4f98:	30 93 8d 04 	sts	0x048D, r19
    4f9c:	20 93 8c 04 	sts	0x048C, r18
    4fa0:	11 96       	adiw	r26, 0x01	; 1
    4fa2:	9c 93       	st	X, r25
    4fa4:	8e 93       	st	-X, r24
    4fa6:	15 c0       	rjmp	.+42     	; 0x4fd2 <realloc+0x18a>
    4fa8:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <malloc>
    4fac:	c8 2e       	mov	r12, r24
    4fae:	e6 01       	movw	r28, r12
    4fb0:	6e 01       	movw	r12, r28
    4fb2:	d9 2e       	mov	r13, r25
    4fb4:	e6 01       	movw	r28, r12
    4fb6:	20 97       	sbiw	r28, 0x00	; 0
    4fb8:	51 f0       	breq	.+20     	; 0x4fce <realloc+0x186>
    4fba:	8c 2d       	mov	r24, r12
    4fbc:	b8 01       	movw	r22, r16
    4fbe:	a7 01       	movw	r20, r14
    4fc0:	0e 94 2e 28 	call	0x505c	; 0x505c <memcpy>
    4fc4:	c8 01       	movw	r24, r16
    4fc6:	0e 94 8b 26 	call	0x4d16	; 0x4d16 <free>
    4fca:	86 01       	movw	r16, r12
    4fcc:	02 c0       	rjmp	.+4      	; 0x4fd2 <realloc+0x18a>
    4fce:	00 e0       	ldi	r16, 0x00	; 0
    4fd0:	10 e0       	ldi	r17, 0x00	; 0
    4fd2:	c8 01       	movw	r24, r16
    4fd4:	cd b7       	in	r28, 0x3d	; 61
    4fd6:	de b7       	in	r29, 0x3e	; 62
    4fd8:	ec e0       	ldi	r30, 0x0C	; 12
    4fda:	0c 94 5a 25 	jmp	0x4ab4	; 0x4ab4 <__epilogue_restores__+0xc>

00004fde <atol>:
    4fde:	1f 93       	push	r17
    4fe0:	fc 01       	movw	r30, r24
    4fe2:	99 27       	eor	r25, r25
    4fe4:	88 27       	eor	r24, r24
    4fe6:	bc 01       	movw	r22, r24
    4fe8:	e8 94       	clt
    4fea:	11 91       	ld	r17, Z+
    4fec:	10 32       	cpi	r17, 0x20	; 32
    4fee:	e9 f3       	breq	.-6      	; 0x4fea <atol+0xc>
    4ff0:	19 30       	cpi	r17, 0x09	; 9
    4ff2:	10 f0       	brcs	.+4      	; 0x4ff8 <atol+0x1a>
    4ff4:	1e 30       	cpi	r17, 0x0E	; 14
    4ff6:	c8 f3       	brcs	.-14     	; 0x4fea <atol+0xc>
    4ff8:	1b 32       	cpi	r17, 0x2B	; 43
    4ffa:	51 f0       	breq	.+20     	; 0x5010 <atol+0x32>
    4ffc:	1d 32       	cpi	r17, 0x2D	; 45
    4ffe:	49 f4       	brne	.+18     	; 0x5012 <atol+0x34>
    5000:	68 94       	set
    5002:	06 c0       	rjmp	.+12     	; 0x5010 <atol+0x32>
    5004:	0e 94 fb 28 	call	0x51f6	; 0x51f6 <__mulsi_const_10>
    5008:	61 0f       	add	r22, r17
    500a:	71 1d       	adc	r23, r1
    500c:	81 1d       	adc	r24, r1
    500e:	91 1d       	adc	r25, r1
    5010:	11 91       	ld	r17, Z+
    5012:	10 53       	subi	r17, 0x30	; 48
    5014:	1a 30       	cpi	r17, 0x0A	; 10
    5016:	b0 f3       	brcs	.-20     	; 0x5004 <atol+0x26>
    5018:	3e f4       	brtc	.+14     	; 0x5028 <atol+0x4a>
    501a:	90 95       	com	r25
    501c:	80 95       	com	r24
    501e:	70 95       	com	r23
    5020:	61 95       	neg	r22
    5022:	7f 4f       	sbci	r23, 0xFF	; 255
    5024:	8f 4f       	sbci	r24, 0xFF	; 255
    5026:	9f 4f       	sbci	r25, 0xFF	; 255
    5028:	1f 91       	pop	r17
    502a:	08 95       	ret

0000502c <isspace>:
    502c:	91 11       	cpse	r25, r1
    502e:	33 c1       	rjmp	.+614    	; 0x5296 <__ctype_isfalse>
    5030:	80 32       	cpi	r24, 0x20	; 32
    5032:	19 f0       	breq	.+6      	; 0x503a <isspace+0xe>
    5034:	89 50       	subi	r24, 0x09	; 9
    5036:	85 50       	subi	r24, 0x05	; 5
    5038:	d0 f7       	brcc	.-12     	; 0x502e <isspace+0x2>
    503a:	08 95       	ret

0000503c <tolower>:
    503c:	91 11       	cpse	r25, r1
    503e:	08 95       	ret
    5040:	81 54       	subi	r24, 0x41	; 65
    5042:	8a 51       	subi	r24, 0x1A	; 26
    5044:	08 f4       	brcc	.+2      	; 0x5048 <tolower+0xc>
    5046:	80 5e       	subi	r24, 0xE0	; 224
    5048:	85 5a       	subi	r24, 0xA5	; 165
    504a:	08 95       	ret

0000504c <toupper>:
    504c:	91 11       	cpse	r25, r1
    504e:	08 95       	ret
    5050:	81 56       	subi	r24, 0x61	; 97
    5052:	8a 51       	subi	r24, 0x1A	; 26
    5054:	08 f4       	brcc	.+2      	; 0x5058 <toupper+0xc>
    5056:	80 52       	subi	r24, 0x20	; 32
    5058:	85 58       	subi	r24, 0x85	; 133
    505a:	08 95       	ret

0000505c <memcpy>:
    505c:	fb 01       	movw	r30, r22
    505e:	dc 01       	movw	r26, r24
    5060:	02 c0       	rjmp	.+4      	; 0x5066 <memcpy+0xa>
    5062:	01 90       	ld	r0, Z+
    5064:	0d 92       	st	X+, r0
    5066:	41 50       	subi	r20, 0x01	; 1
    5068:	50 40       	sbci	r21, 0x00	; 0
    506a:	d8 f7       	brcc	.-10     	; 0x5062 <memcpy+0x6>
    506c:	08 95       	ret

0000506e <memmove>:
    506e:	68 17       	cp	r22, r24
    5070:	79 07       	cpc	r23, r25
    5072:	68 f4       	brcc	.+26     	; 0x508e <memmove+0x20>
    5074:	fb 01       	movw	r30, r22
    5076:	dc 01       	movw	r26, r24
    5078:	e4 0f       	add	r30, r20
    507a:	f5 1f       	adc	r31, r21
    507c:	a4 0f       	add	r26, r20
    507e:	b5 1f       	adc	r27, r21
    5080:	02 c0       	rjmp	.+4      	; 0x5086 <memmove+0x18>
    5082:	02 90       	ld	r0, -Z
    5084:	0e 92       	st	-X, r0
    5086:	41 50       	subi	r20, 0x01	; 1
    5088:	50 40       	sbci	r21, 0x00	; 0
    508a:	d8 f7       	brcc	.-10     	; 0x5082 <memmove+0x14>
    508c:	08 95       	ret
    508e:	0c 94 2e 28 	jmp	0x505c	; 0x505c <memcpy>

00005092 <strchr>:
    5092:	fc 01       	movw	r30, r24
    5094:	81 91       	ld	r24, Z+
    5096:	86 17       	cp	r24, r22
    5098:	21 f0       	breq	.+8      	; 0x50a2 <strchr+0x10>
    509a:	88 23       	and	r24, r24
    509c:	d9 f7       	brne	.-10     	; 0x5094 <strchr+0x2>
    509e:	99 27       	eor	r25, r25
    50a0:	08 95       	ret
    50a2:	31 97       	sbiw	r30, 0x01	; 1
    50a4:	cf 01       	movw	r24, r30
    50a6:	08 95       	ret

000050a8 <strcmp>:
    50a8:	fb 01       	movw	r30, r22
    50aa:	dc 01       	movw	r26, r24
    50ac:	8d 91       	ld	r24, X+
    50ae:	01 90       	ld	r0, Z+
    50b0:	80 19       	sub	r24, r0
    50b2:	01 10       	cpse	r0, r1
    50b4:	d9 f3       	breq	.-10     	; 0x50ac <strcmp+0x4>
    50b6:	99 0b       	sbc	r25, r25
    50b8:	08 95       	ret

000050ba <strcpy>:
    50ba:	fb 01       	movw	r30, r22
    50bc:	dc 01       	movw	r26, r24
    50be:	01 90       	ld	r0, Z+
    50c0:	0d 92       	st	X+, r0
    50c2:	00 20       	and	r0, r0
    50c4:	e1 f7       	brne	.-8      	; 0x50be <strcpy+0x4>
    50c6:	08 95       	ret

000050c8 <strncmp>:
    50c8:	fb 01       	movw	r30, r22
    50ca:	dc 01       	movw	r26, r24
    50cc:	41 50       	subi	r20, 0x01	; 1
    50ce:	50 40       	sbci	r21, 0x00	; 0
    50d0:	30 f0       	brcs	.+12     	; 0x50de <strncmp+0x16>
    50d2:	8d 91       	ld	r24, X+
    50d4:	01 90       	ld	r0, Z+
    50d6:	80 19       	sub	r24, r0
    50d8:	19 f4       	brne	.+6      	; 0x50e0 <strncmp+0x18>
    50da:	00 20       	and	r0, r0
    50dc:	b9 f7       	brne	.-18     	; 0x50cc <strncmp+0x4>
    50de:	88 1b       	sub	r24, r24
    50e0:	99 0b       	sbc	r25, r25
    50e2:	08 95       	ret

000050e4 <strncpy>:
    50e4:	fb 01       	movw	r30, r22
    50e6:	dc 01       	movw	r26, r24
    50e8:	41 50       	subi	r20, 0x01	; 1
    50ea:	50 40       	sbci	r21, 0x00	; 0
    50ec:	48 f0       	brcs	.+18     	; 0x5100 <strncpy+0x1c>
    50ee:	01 90       	ld	r0, Z+
    50f0:	0d 92       	st	X+, r0
    50f2:	00 20       	and	r0, r0
    50f4:	c9 f7       	brne	.-14     	; 0x50e8 <strncpy+0x4>
    50f6:	01 c0       	rjmp	.+2      	; 0x50fa <strncpy+0x16>
    50f8:	1d 92       	st	X+, r1
    50fa:	41 50       	subi	r20, 0x01	; 1
    50fc:	50 40       	sbci	r21, 0x00	; 0
    50fe:	e0 f7       	brcc	.-8      	; 0x50f8 <strncpy+0x14>
    5100:	08 95       	ret

00005102 <strrchr>:
    5102:	fc 01       	movw	r30, r24
    5104:	81 e0       	ldi	r24, 0x01	; 1
    5106:	90 e0       	ldi	r25, 0x00	; 0
    5108:	01 90       	ld	r0, Z+
    510a:	06 16       	cp	r0, r22
    510c:	09 f4       	brne	.+2      	; 0x5110 <strrchr+0xe>
    510e:	cf 01       	movw	r24, r30
    5110:	00 20       	and	r0, r0
    5112:	d1 f7       	brne	.-12     	; 0x5108 <strrchr+0x6>
    5114:	01 97       	sbiw	r24, 0x01	; 1
    5116:	08 95       	ret

00005118 <strstr>:
    5118:	fb 01       	movw	r30, r22
    511a:	51 91       	ld	r21, Z+
    511c:	55 23       	and	r21, r21
    511e:	a9 f0       	breq	.+42     	; 0x514a <strstr+0x32>
    5120:	bf 01       	movw	r22, r30
    5122:	dc 01       	movw	r26, r24
    5124:	4d 91       	ld	r20, X+
    5126:	45 17       	cp	r20, r21
    5128:	41 11       	cpse	r20, r1
    512a:	e1 f7       	brne	.-8      	; 0x5124 <strstr+0xc>
    512c:	59 f4       	brne	.+22     	; 0x5144 <strstr+0x2c>
    512e:	cd 01       	movw	r24, r26
    5130:	01 90       	ld	r0, Z+
    5132:	00 20       	and	r0, r0
    5134:	49 f0       	breq	.+18     	; 0x5148 <strstr+0x30>
    5136:	4d 91       	ld	r20, X+
    5138:	40 15       	cp	r20, r0
    513a:	41 11       	cpse	r20, r1
    513c:	c9 f3       	breq	.-14     	; 0x5130 <strstr+0x18>
    513e:	fb 01       	movw	r30, r22
    5140:	41 11       	cpse	r20, r1
    5142:	ef cf       	rjmp	.-34     	; 0x5122 <strstr+0xa>
    5144:	81 e0       	ldi	r24, 0x01	; 1
    5146:	90 e0       	ldi	r25, 0x00	; 0
    5148:	01 97       	sbiw	r24, 0x01	; 1
    514a:	08 95       	ret

0000514c <itoa>:
    514c:	fb 01       	movw	r30, r22
    514e:	9f 01       	movw	r18, r30
    5150:	e8 94       	clt
    5152:	42 30       	cpi	r20, 0x02	; 2
    5154:	c4 f0       	brlt	.+48     	; 0x5186 <itoa+0x3a>
    5156:	45 32       	cpi	r20, 0x25	; 37
    5158:	b4 f4       	brge	.+44     	; 0x5186 <itoa+0x3a>
    515a:	4a 30       	cpi	r20, 0x0A	; 10
    515c:	29 f4       	brne	.+10     	; 0x5168 <itoa+0x1c>
    515e:	97 fb       	bst	r25, 7
    5160:	1e f4       	brtc	.+6      	; 0x5168 <itoa+0x1c>
    5162:	90 95       	com	r25
    5164:	81 95       	neg	r24
    5166:	9f 4f       	sbci	r25, 0xFF	; 255
    5168:	64 2f       	mov	r22, r20
    516a:	77 27       	eor	r23, r23
    516c:	0e 94 ef 24 	call	0x49de	; 0x49de <__udivmodhi4>
    5170:	80 5d       	subi	r24, 0xD0	; 208
    5172:	8a 33       	cpi	r24, 0x3A	; 58
    5174:	0c f0       	brlt	.+2      	; 0x5178 <itoa+0x2c>
    5176:	89 5d       	subi	r24, 0xD9	; 217
    5178:	81 93       	st	Z+, r24
    517a:	cb 01       	movw	r24, r22
    517c:	00 97       	sbiw	r24, 0x00	; 0
    517e:	a1 f7       	brne	.-24     	; 0x5168 <itoa+0x1c>
    5180:	16 f4       	brtc	.+4      	; 0x5186 <itoa+0x3a>
    5182:	5d e2       	ldi	r21, 0x2D	; 45
    5184:	51 93       	st	Z+, r21
    5186:	10 82       	st	Z, r1
    5188:	c9 01       	movw	r24, r18
    518a:	0c 94 4e 29 	jmp	0x529c	; 0x529c <strrev>

0000518e <ltoa>:
    518e:	fa 01       	movw	r30, r20
    5190:	cf 93       	push	r28
    5192:	ff 93       	push	r31
    5194:	ef 93       	push	r30
    5196:	22 30       	cpi	r18, 0x02	; 2
    5198:	44 f1       	brlt	.+80     	; 0x51ea <ltoa+0x5c>
    519a:	25 32       	cpi	r18, 0x25	; 37
    519c:	34 f5       	brge	.+76     	; 0x51ea <ltoa+0x5c>
    519e:	c2 2f       	mov	r28, r18
    51a0:	e8 94       	clt
    51a2:	ca 30       	cpi	r28, 0x0A	; 10
    51a4:	49 f4       	brne	.+18     	; 0x51b8 <ltoa+0x2a>
    51a6:	97 fb       	bst	r25, 7
    51a8:	3e f4       	brtc	.+14     	; 0x51b8 <ltoa+0x2a>
    51aa:	90 95       	com	r25
    51ac:	80 95       	com	r24
    51ae:	70 95       	com	r23
    51b0:	61 95       	neg	r22
    51b2:	7f 4f       	sbci	r23, 0xFF	; 255
    51b4:	8f 4f       	sbci	r24, 0xFF	; 255
    51b6:	9f 4f       	sbci	r25, 0xFF	; 255
    51b8:	2c 2f       	mov	r18, r28
    51ba:	33 27       	eor	r19, r19
    51bc:	44 27       	eor	r20, r20
    51be:	55 27       	eor	r21, r21
    51c0:	ff 93       	push	r31
    51c2:	ef 93       	push	r30
    51c4:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__udivmodsi4>
    51c8:	ef 91       	pop	r30
    51ca:	ff 91       	pop	r31
    51cc:	60 5d       	subi	r22, 0xD0	; 208
    51ce:	6a 33       	cpi	r22, 0x3A	; 58
    51d0:	0c f0       	brlt	.+2      	; 0x51d4 <ltoa+0x46>
    51d2:	69 5d       	subi	r22, 0xD9	; 217
    51d4:	61 93       	st	Z+, r22
    51d6:	b9 01       	movw	r22, r18
    51d8:	ca 01       	movw	r24, r20
    51da:	60 50       	subi	r22, 0x00	; 0
    51dc:	70 40       	sbci	r23, 0x00	; 0
    51de:	80 40       	sbci	r24, 0x00	; 0
    51e0:	90 40       	sbci	r25, 0x00	; 0
    51e2:	51 f7       	brne	.-44     	; 0x51b8 <ltoa+0x2a>
    51e4:	16 f4       	brtc	.+4      	; 0x51ea <ltoa+0x5c>
    51e6:	cd e2       	ldi	r28, 0x2D	; 45
    51e8:	c1 93       	st	Z+, r28
    51ea:	10 82       	st	Z, r1
    51ec:	8f 91       	pop	r24
    51ee:	9f 91       	pop	r25
    51f0:	cf 91       	pop	r28
    51f2:	0c 94 4e 29 	jmp	0x529c	; 0x529c <strrev>

000051f6 <__mulsi_const_10>:
    51f6:	59 2f       	mov	r21, r25
    51f8:	48 2f       	mov	r20, r24
    51fa:	37 2f       	mov	r19, r23
    51fc:	26 2f       	mov	r18, r22
    51fe:	66 0f       	add	r22, r22
    5200:	77 1f       	adc	r23, r23
    5202:	88 1f       	adc	r24, r24
    5204:	99 1f       	adc	r25, r25
    5206:	66 0f       	add	r22, r22
    5208:	77 1f       	adc	r23, r23
    520a:	88 1f       	adc	r24, r24
    520c:	99 1f       	adc	r25, r25
    520e:	62 0f       	add	r22, r18
    5210:	73 1f       	adc	r23, r19
    5212:	84 1f       	adc	r24, r20
    5214:	95 1f       	adc	r25, r21
    5216:	66 0f       	add	r22, r22
    5218:	77 1f       	adc	r23, r23
    521a:	88 1f       	adc	r24, r24
    521c:	99 1f       	adc	r25, r25
    521e:	08 95       	ret

00005220 <ultoa>:
    5220:	fa 01       	movw	r30, r20
    5222:	cf 93       	push	r28
    5224:	ff 93       	push	r31
    5226:	ef 93       	push	r30
    5228:	22 30       	cpi	r18, 0x02	; 2
    522a:	cc f0       	brlt	.+50     	; 0x525e <ultoa+0x3e>
    522c:	25 32       	cpi	r18, 0x25	; 37
    522e:	bc f4       	brge	.+46     	; 0x525e <ultoa+0x3e>
    5230:	c2 2f       	mov	r28, r18
    5232:	2c 2f       	mov	r18, r28
    5234:	33 27       	eor	r19, r19
    5236:	44 27       	eor	r20, r20
    5238:	55 27       	eor	r21, r21
    523a:	ff 93       	push	r31
    523c:	ef 93       	push	r30
    523e:	0e 94 16 25 	call	0x4a2c	; 0x4a2c <__udivmodsi4>
    5242:	ef 91       	pop	r30
    5244:	ff 91       	pop	r31
    5246:	60 5d       	subi	r22, 0xD0	; 208
    5248:	6a 33       	cpi	r22, 0x3A	; 58
    524a:	0c f0       	brlt	.+2      	; 0x524e <ultoa+0x2e>
    524c:	69 5d       	subi	r22, 0xD9	; 217
    524e:	61 93       	st	Z+, r22
    5250:	b9 01       	movw	r22, r18
    5252:	ca 01       	movw	r24, r20
    5254:	60 50       	subi	r22, 0x00	; 0
    5256:	70 40       	sbci	r23, 0x00	; 0
    5258:	80 40       	sbci	r24, 0x00	; 0
    525a:	90 40       	sbci	r25, 0x00	; 0
    525c:	51 f7       	brne	.-44     	; 0x5232 <ultoa+0x12>
    525e:	10 82       	st	Z, r1
    5260:	8f 91       	pop	r24
    5262:	9f 91       	pop	r25
    5264:	cf 91       	pop	r28
    5266:	0c 94 4e 29 	jmp	0x529c	; 0x529c <strrev>

0000526a <utoa>:
    526a:	fb 01       	movw	r30, r22
    526c:	9f 01       	movw	r18, r30
    526e:	42 30       	cpi	r20, 0x02	; 2
    5270:	74 f0       	brlt	.+28     	; 0x528e <utoa+0x24>
    5272:	45 32       	cpi	r20, 0x25	; 37
    5274:	64 f4       	brge	.+24     	; 0x528e <utoa+0x24>
    5276:	64 2f       	mov	r22, r20
    5278:	77 27       	eor	r23, r23
    527a:	0e 94 ef 24 	call	0x49de	; 0x49de <__udivmodhi4>
    527e:	80 5d       	subi	r24, 0xD0	; 208
    5280:	8a 33       	cpi	r24, 0x3A	; 58
    5282:	0c f0       	brlt	.+2      	; 0x5286 <utoa+0x1c>
    5284:	89 5d       	subi	r24, 0xD9	; 217
    5286:	81 93       	st	Z+, r24
    5288:	cb 01       	movw	r24, r22
    528a:	00 97       	sbiw	r24, 0x00	; 0
    528c:	a1 f7       	brne	.-24     	; 0x5276 <utoa+0xc>
    528e:	10 82       	st	Z, r1
    5290:	c9 01       	movw	r24, r18
    5292:	0c 94 4e 29 	jmp	0x529c	; 0x529c <strrev>

00005296 <__ctype_isfalse>:
    5296:	99 27       	eor	r25, r25
    5298:	88 27       	eor	r24, r24

0000529a <__ctype_istrue>:
    529a:	08 95       	ret

0000529c <strrev>:
    529c:	dc 01       	movw	r26, r24
    529e:	fc 01       	movw	r30, r24
    52a0:	67 2f       	mov	r22, r23
    52a2:	71 91       	ld	r23, Z+
    52a4:	77 23       	and	r23, r23
    52a6:	e1 f7       	brne	.-8      	; 0x52a0 <strrev+0x4>
    52a8:	32 97       	sbiw	r30, 0x02	; 2
    52aa:	04 c0       	rjmp	.+8      	; 0x52b4 <strrev+0x18>
    52ac:	7c 91       	ld	r23, X
    52ae:	6d 93       	st	X+, r22
    52b0:	70 83       	st	Z, r23
    52b2:	62 91       	ld	r22, -Z
    52b4:	ae 17       	cp	r26, r30
    52b6:	bf 07       	cpc	r27, r31
    52b8:	c8 f3       	brcs	.-14     	; 0x52ac <strrev+0x10>
    52ba:	08 95       	ret

000052bc <_exit>:
    52bc:	f8 94       	cli

000052be <__stop_program>:
    52be:	ff cf       	rjmp	.-2      	; 0x52be <__stop_program>
