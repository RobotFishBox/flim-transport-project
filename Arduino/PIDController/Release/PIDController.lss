
PIDController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000014a  00800100  00003b1e  00003bb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003b1e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d7  0080024a  0080024a  00003cfc  2**0
                  ALLOC
  3 .stab         00009114  00000000  00000000  00003cfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008c83  00000000  00000000  0000ce10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__ctors_end>
       4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
       c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      2c:	0c 94 2c 02 	jmp	0x458	; 0x458 <__vector_11>
      30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      40:	0c 94 41 0a 	jmp	0x1482	; 0x1482 <__vector_16>
      44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      48:	0c 94 a9 0f 	jmp	0x1f52	; 0x1f52 <__vector_18>
      4c:	0c 94 da 0f 	jmp	0x1fb4	; 0x1fb4 <__vector_19>
      50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
      64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	94 02       	muls	r25, r20
      c4:	35 11       	cpse	r19, r5

000000c6 <__ctors_end>:
      c6:	11 24       	eor	r1, r1
      c8:	1f be       	out	0x3f, r1	; 63
      ca:	cf ef       	ldi	r28, 0xFF	; 255
      cc:	d8 e0       	ldi	r29, 0x08	; 8
      ce:	de bf       	out	0x3e, r29	; 62
      d0:	cd bf       	out	0x3d, r28	; 61

000000d2 <__do_copy_data>:
      d2:	12 e0       	ldi	r17, 0x02	; 2
      d4:	a0 e0       	ldi	r26, 0x00	; 0
      d6:	b1 e0       	ldi	r27, 0x01	; 1
      d8:	ee e1       	ldi	r30, 0x1E	; 30
      da:	fb e3       	ldi	r31, 0x3B	; 59
      dc:	02 c0       	rjmp	.+4      	; 0xe2 <__do_copy_data+0x10>
      de:	05 90       	lpm	r0, Z+
      e0:	0d 92       	st	X+, r0
      e2:	aa 34       	cpi	r26, 0x4A	; 74
      e4:	b1 07       	cpc	r27, r17
      e6:	d9 f7       	brne	.-10     	; 0xde <__do_copy_data+0xc>

000000e8 <__do_clear_bss>:
      e8:	13 e0       	ldi	r17, 0x03	; 3
      ea:	aa e4       	ldi	r26, 0x4A	; 74
      ec:	b2 e0       	ldi	r27, 0x02	; 2
      ee:	01 c0       	rjmp	.+2      	; 0xf2 <.do_clear_bss_start>

000000f0 <.do_clear_bss_loop>:
      f0:	1d 92       	st	X+, r1

000000f2 <.do_clear_bss_start>:
      f2:	a1 32       	cpi	r26, 0x21	; 33
      f4:	b1 07       	cpc	r27, r17
      f6:	e1 f7       	brne	.-8      	; 0xf0 <.do_clear_bss_loop>

000000f8 <__do_global_ctors>:
      f8:	10 e0       	ldi	r17, 0x00	; 0
      fa:	c6 ec       	ldi	r28, 0xC6	; 198
      fc:	d0 e0       	ldi	r29, 0x00	; 0
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__do_global_ctors+0x10>
     100:	22 97       	sbiw	r28, 0x02	; 2
     102:	fe 01       	movw	r30, r28
     104:	0e 94 1c 1a 	call	0x3438	; 0x3438 <__tablejump__>
     108:	c2 3c       	cpi	r28, 0xC2	; 194
     10a:	d1 07       	cpc	r29, r17
     10c:	c9 f7       	brne	.-14     	; 0x100 <__do_global_ctors+0x8>
     10e:	0e 94 8f 02 	call	0x51e	; 0x51e <main>
     112:	0c 94 8d 1d 	jmp	0x3b1a	; 0x3b1a <_exit>

00000116 <__bad_interrupt>:
     116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <_ZN12PDControllerC1Ed>:
     11a:	cf 93       	push	r28
     11c:	df 93       	push	r29
     11e:	ec 01       	movw	r28, r24
     120:	cb 01       	movw	r24, r22
     122:	ba 01       	movw	r22, r20
     124:	0e 94 09 07 	call	0xe12	; 0xe12 <__fixsfsi>
     128:	79 8f       	std	Y+25, r23	; 0x19
     12a:	68 8f       	std	Y+24, r22	; 0x18
     12c:	df 91       	pop	r29
     12e:	cf 91       	pop	r28
     130:	08 95       	ret

00000132 <_ZN12PDController7computeEv>:
     132:	6f 92       	push	r6
     134:	7f 92       	push	r7
     136:	8f 92       	push	r8
     138:	9f 92       	push	r9
     13a:	af 92       	push	r10
     13c:	bf 92       	push	r11
     13e:	cf 92       	push	r12
     140:	df 92       	push	r13
     142:	ef 92       	push	r14
     144:	ff 92       	push	r15
     146:	0f 93       	push	r16
     148:	1f 93       	push	r17
     14a:	cf 93       	push	r28
     14c:	df 93       	push	r29
     14e:	ec 01       	movw	r28, r24
     150:	68 80       	ld	r6, Y
     152:	79 80       	ldd	r7, Y+1	; 0x01
     154:	8a 80       	ldd	r8, Y+2	; 0x02
     156:	9b 80       	ldd	r9, Y+3	; 0x03
     158:	68 85       	ldd	r22, Y+8	; 0x08
     15a:	79 85       	ldd	r23, Y+9	; 0x09
     15c:	8a 85       	ldd	r24, Y+10	; 0x0a
     15e:	9b 85       	ldd	r25, Y+11	; 0x0b
     160:	a4 01       	movw	r20, r8
     162:	93 01       	movw	r18, r6
     164:	0e 94 40 04 	call	0x880	; 0x880 <__subsf3>
     168:	28 89       	ldd	r18, Y+16	; 0x10
     16a:	39 89       	ldd	r19, Y+17	; 0x11
     16c:	4a 89       	ldd	r20, Y+18	; 0x12
     16e:	5b 89       	ldd	r21, Y+19	; 0x13
     170:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__mulsf3>
     174:	7b 01       	movw	r14, r22
     176:	8c 01       	movw	r16, r24
     178:	c4 01       	movw	r24, r8
     17a:	b3 01       	movw	r22, r6
     17c:	2c 85       	ldd	r18, Y+12	; 0x0c
     17e:	3d 85       	ldd	r19, Y+13	; 0x0d
     180:	4e 85       	ldd	r20, Y+14	; 0x0e
     182:	5f 85       	ldd	r21, Y+15	; 0x0f
     184:	0e 94 40 04 	call	0x880	; 0x880 <__subsf3>
     188:	2c 89       	ldd	r18, Y+20	; 0x14
     18a:	3d 89       	ldd	r19, Y+21	; 0x15
     18c:	4e 89       	ldd	r20, Y+22	; 0x16
     18e:	5f 89       	ldd	r21, Y+23	; 0x17
     190:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__mulsf3>
     194:	9b 01       	movw	r18, r22
     196:	ac 01       	movw	r20, r24
     198:	c8 01       	movw	r24, r16
     19a:	b7 01       	movw	r22, r14
     19c:	0e 94 13 04 	call	0x826	; 0x826 <__addsf3>
     1a0:	d6 2e       	mov	r13, r22
     1a2:	c7 2e       	mov	r12, r23
     1a4:	b8 2e       	mov	r11, r24
     1a6:	a9 2e       	mov	r10, r25
     1a8:	a6 01       	movw	r20, r12
     1aa:	95 01       	movw	r18, r10
     1ac:	85 2f       	mov	r24, r21
     1ae:	94 2f       	mov	r25, r20
     1b0:	a3 2f       	mov	r26, r19
     1b2:	b2 2f       	mov	r27, r18
     1b4:	8c 83       	std	Y+4, r24	; 0x04
     1b6:	9d 83       	std	Y+5, r25	; 0x05
     1b8:	ae 83       	std	Y+6, r26	; 0x06
     1ba:	bf 83       	std	Y+7, r27	; 0x07
     1bc:	ee 8c       	ldd	r14, Y+30	; 0x1e
     1be:	ff 8c       	ldd	r15, Y+31	; 0x1f
     1c0:	08 a1       	ldd	r16, Y+32	; 0x20
     1c2:	19 a1       	ldd	r17, Y+33	; 0x21
     1c4:	65 2f       	mov	r22, r21
     1c6:	74 2f       	mov	r23, r20
     1c8:	83 2f       	mov	r24, r19
     1ca:	92 2f       	mov	r25, r18
     1cc:	a8 01       	movw	r20, r16
     1ce:	97 01       	movw	r18, r14
     1d0:	0e 94 19 06 	call	0xc32	; 0xc32 <__gtsf2>
     1d4:	18 16       	cp	r1, r24
     1d6:	84 f0       	brlt	.+32     	; 0x1f8 <_ZN12PDController7computeEv+0xc6>
     1d8:	ea 8c       	ldd	r14, Y+26	; 0x1a
     1da:	fb 8c       	ldd	r15, Y+27	; 0x1b
     1dc:	0c 8d       	ldd	r16, Y+28	; 0x1c
     1de:	1d 8d       	ldd	r17, Y+29	; 0x1d
     1e0:	a6 01       	movw	r20, r12
     1e2:	95 01       	movw	r18, r10
     1e4:	65 2f       	mov	r22, r21
     1e6:	74 2f       	mov	r23, r20
     1e8:	83 2f       	mov	r24, r19
     1ea:	92 2f       	mov	r25, r18
     1ec:	a8 01       	movw	r20, r16
     1ee:	97 01       	movw	r18, r14
     1f0:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__ltsf2>
     1f4:	87 ff       	sbrs	r24, 7
     1f6:	04 c0       	rjmp	.+8      	; 0x200 <_ZN12PDController7computeEv+0xce>
     1f8:	ec 82       	std	Y+4, r14	; 0x04
     1fa:	fd 82       	std	Y+5, r15	; 0x05
     1fc:	0e 83       	std	Y+6, r16	; 0x06
     1fe:	1f 83       	std	Y+7, r17	; 0x07
     200:	6c 86       	std	Y+12, r6	; 0x0c
     202:	7d 86       	std	Y+13, r7	; 0x0d
     204:	8e 86       	std	Y+14, r8	; 0x0e
     206:	9f 86       	std	Y+15, r9	; 0x0f
     208:	df 91       	pop	r29
     20a:	cf 91       	pop	r28
     20c:	1f 91       	pop	r17
     20e:	0f 91       	pop	r16
     210:	ff 90       	pop	r15
     212:	ef 90       	pop	r14
     214:	df 90       	pop	r13
     216:	cf 90       	pop	r12
     218:	bf 90       	pop	r11
     21a:	af 90       	pop	r10
     21c:	9f 90       	pop	r9
     21e:	8f 90       	pop	r8
     220:	7f 90       	pop	r7
     222:	6f 90       	pop	r6
     224:	08 95       	ret

00000226 <_ZN12PDController10setTuningsEdd>:
     226:	af 92       	push	r10
     228:	bf 92       	push	r11
     22a:	cf 92       	push	r12
     22c:	df 92       	push	r13
     22e:	ef 92       	push	r14
     230:	ff 92       	push	r15
     232:	0f 93       	push	r16
     234:	1f 93       	push	r17
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	ec 01       	movw	r28, r24
     23c:	5a 01       	movw	r10, r20
     23e:	6b 01       	movw	r12, r22
     240:	78 01       	movw	r14, r16
     242:	89 01       	movw	r16, r18
     244:	68 8d       	ldd	r22, Y+24	; 0x18
     246:	79 8d       	ldd	r23, Y+25	; 0x19
     248:	88 27       	eor	r24, r24
     24a:	77 fd       	sbrc	r23, 7
     24c:	80 95       	com	r24
     24e:	98 2f       	mov	r25, r24
     250:	0e 94 a9 06 	call	0xd52	; 0xd52 <__floatsisf>
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	30 e0       	ldi	r19, 0x00	; 0
     258:	4a e7       	ldi	r20, 0x7A	; 122
     25a:	54 e4       	ldi	r21, 0x44	; 68
     25c:	0e 94 6b 05 	call	0xad6	; 0xad6 <__divsf3>
     260:	56 2f       	mov	r21, r22
     262:	47 2f       	mov	r20, r23
     264:	38 2f       	mov	r19, r24
     266:	29 2f       	mov	r18, r25
     268:	a8 8a       	std	Y+16, r10	; 0x10
     26a:	b9 8a       	std	Y+17, r11	; 0x11
     26c:	ca 8a       	std	Y+18, r12	; 0x12
     26e:	db 8a       	std	Y+19, r13	; 0x13
     270:	c8 01       	movw	r24, r16
     272:	b7 01       	movw	r22, r14
     274:	da 01       	movw	r26, r20
     276:	f9 01       	movw	r30, r18
     278:	2b 2f       	mov	r18, r27
     27a:	3a 2f       	mov	r19, r26
     27c:	4f 2f       	mov	r20, r31
     27e:	5e 2f       	mov	r21, r30
     280:	0e 94 6b 05 	call	0xad6	; 0xad6 <__divsf3>
     284:	6c 8b       	std	Y+20, r22	; 0x14
     286:	7d 8b       	std	Y+21, r23	; 0x15
     288:	8e 8b       	std	Y+22, r24	; 0x16
     28a:	9f 8b       	std	Y+23, r25	; 0x17
     28c:	df 91       	pop	r29
     28e:	cf 91       	pop	r28
     290:	1f 91       	pop	r17
     292:	0f 91       	pop	r16
     294:	ff 90       	pop	r15
     296:	ef 90       	pop	r14
     298:	df 90       	pop	r13
     29a:	cf 90       	pop	r12
     29c:	bf 90       	pop	r11
     29e:	af 90       	pop	r10
     2a0:	08 95       	ret

000002a2 <_ZN12PDController13setSampleTimeEi>:
     2a2:	cf 92       	push	r12
     2a4:	df 92       	push	r13
     2a6:	ef 92       	push	r14
     2a8:	ff 92       	push	r15
     2aa:	0f 93       	push	r16
     2ac:	1f 93       	push	r17
     2ae:	cf 93       	push	r28
     2b0:	df 93       	push	r29
     2b2:	ec 01       	movw	r28, r24
     2b4:	8b 01       	movw	r16, r22
     2b6:	16 16       	cp	r1, r22
     2b8:	17 06       	cpc	r1, r23
     2ba:	2c f5       	brge	.+74     	; 0x306 <_ZN12PDController13setSampleTimeEi+0x64>
     2bc:	b8 01       	movw	r22, r16
     2be:	88 27       	eor	r24, r24
     2c0:	77 fd       	sbrc	r23, 7
     2c2:	80 95       	com	r24
     2c4:	98 2f       	mov	r25, r24
     2c6:	0e 94 a9 06 	call	0xd52	; 0xd52 <__floatsisf>
     2ca:	6b 01       	movw	r12, r22
     2cc:	7c 01       	movw	r14, r24
     2ce:	68 8d       	ldd	r22, Y+24	; 0x18
     2d0:	79 8d       	ldd	r23, Y+25	; 0x19
     2d2:	88 27       	eor	r24, r24
     2d4:	77 fd       	sbrc	r23, 7
     2d6:	80 95       	com	r24
     2d8:	98 2f       	mov	r25, r24
     2da:	0e 94 a9 06 	call	0xd52	; 0xd52 <__floatsisf>
     2de:	9b 01       	movw	r18, r22
     2e0:	ac 01       	movw	r20, r24
     2e2:	c7 01       	movw	r24, r14
     2e4:	b6 01       	movw	r22, r12
     2e6:	0e 94 6b 05 	call	0xad6	; 0xad6 <__divsf3>
     2ea:	9b 01       	movw	r18, r22
     2ec:	ac 01       	movw	r20, r24
     2ee:	6c 89       	ldd	r22, Y+20	; 0x14
     2f0:	7d 89       	ldd	r23, Y+21	; 0x15
     2f2:	8e 89       	ldd	r24, Y+22	; 0x16
     2f4:	9f 89       	ldd	r25, Y+23	; 0x17
     2f6:	0e 94 6b 05 	call	0xad6	; 0xad6 <__divsf3>
     2fa:	6c 8b       	std	Y+20, r22	; 0x14
     2fc:	7d 8b       	std	Y+21, r23	; 0x15
     2fe:	8e 8b       	std	Y+22, r24	; 0x16
     300:	9f 8b       	std	Y+23, r25	; 0x17
     302:	19 8f       	std	Y+25, r17	; 0x19
     304:	08 8f       	std	Y+24, r16	; 0x18
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	1f 91       	pop	r17
     30c:	0f 91       	pop	r16
     30e:	ff 90       	pop	r15
     310:	ef 90       	pop	r14
     312:	df 90       	pop	r13
     314:	cf 90       	pop	r12
     316:	08 95       	ret

00000318 <_ZN12PDController15setOutputLimitsEdd>:
     318:	6f 92       	push	r6
     31a:	7f 92       	push	r7
     31c:	8f 92       	push	r8
     31e:	9f 92       	push	r9
     320:	af 92       	push	r10
     322:	bf 92       	push	r11
     324:	cf 92       	push	r12
     326:	df 92       	push	r13
     328:	ef 92       	push	r14
     32a:	ff 92       	push	r15
     32c:	0f 93       	push	r16
     32e:	1f 93       	push	r17
     330:	cf 93       	push	r28
     332:	df 93       	push	r29
     334:	ec 01       	movw	r28, r24
     336:	5a 01       	movw	r10, r20
     338:	6b 01       	movw	r12, r22
     33a:	78 01       	movw	r14, r16
     33c:	89 01       	movw	r16, r18
     33e:	cb 01       	movw	r24, r22
     340:	ba 01       	movw	r22, r20
     342:	a8 01       	movw	r20, r16
     344:	97 01       	movw	r18, r14
     346:	0e 94 19 06 	call	0xc32	; 0xc32 <__gtsf2>
     34a:	18 16       	cp	r1, r24
     34c:	2c f1       	brlt	.+74     	; 0x398 <_ZN12PDController15setOutputLimitsEdd+0x80>
     34e:	aa 8e       	std	Y+26, r10	; 0x1a
     350:	bb 8e       	std	Y+27, r11	; 0x1b
     352:	cc 8e       	std	Y+28, r12	; 0x1c
     354:	dd 8e       	std	Y+29, r13	; 0x1d
     356:	ee 8e       	std	Y+30, r14	; 0x1e
     358:	ff 8e       	std	Y+31, r15	; 0x1f
     35a:	08 a3       	std	Y+32, r16	; 0x20
     35c:	19 a3       	std	Y+33, r17	; 0x21
     35e:	6c 80       	ldd	r6, Y+4	; 0x04
     360:	7d 80       	ldd	r7, Y+5	; 0x05
     362:	8e 80       	ldd	r8, Y+6	; 0x06
     364:	9f 80       	ldd	r9, Y+7	; 0x07
     366:	c4 01       	movw	r24, r8
     368:	b3 01       	movw	r22, r6
     36a:	a8 01       	movw	r20, r16
     36c:	97 01       	movw	r18, r14
     36e:	0e 94 19 06 	call	0xc32	; 0xc32 <__gtsf2>
     372:	18 16       	cp	r1, r24
     374:	2c f4       	brge	.+10     	; 0x380 <_ZN12PDController15setOutputLimitsEdd+0x68>
     376:	ec 82       	std	Y+4, r14	; 0x04
     378:	fd 82       	std	Y+5, r15	; 0x05
     37a:	0e 83       	std	Y+6, r16	; 0x06
     37c:	1f 83       	std	Y+7, r17	; 0x07
     37e:	0c c0       	rjmp	.+24     	; 0x398 <_ZN12PDController15setOutputLimitsEdd+0x80>
     380:	c4 01       	movw	r24, r8
     382:	b3 01       	movw	r22, r6
     384:	a6 01       	movw	r20, r12
     386:	95 01       	movw	r18, r10
     388:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__ltsf2>
     38c:	87 ff       	sbrs	r24, 7
     38e:	04 c0       	rjmp	.+8      	; 0x398 <_ZN12PDController15setOutputLimitsEdd+0x80>
     390:	ac 82       	std	Y+4, r10	; 0x04
     392:	bd 82       	std	Y+5, r11	; 0x05
     394:	ce 82       	std	Y+6, r12	; 0x06
     396:	df 82       	std	Y+7, r13	; 0x07
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	ff 90       	pop	r15
     3a2:	ef 90       	pop	r14
     3a4:	df 90       	pop	r13
     3a6:	cf 90       	pop	r12
     3a8:	bf 90       	pop	r11
     3aa:	af 90       	pop	r10
     3ac:	9f 90       	pop	r9
     3ae:	8f 90       	pop	r8
     3b0:	7f 90       	pop	r7
     3b2:	6f 90       	pop	r6
     3b4:	08 95       	ret

000003b6 <setup>:
     3b6:	0f 93       	push	r16
     3b8:	1f 93       	push	r17
     3ba:	cf 93       	push	r28
     3bc:	df 93       	push	r29
     3be:	8d ef       	ldi	r24, 0xFD	; 253
     3c0:	92 e0       	ldi	r25, 0x02	; 2
     3c2:	40 e8       	ldi	r20, 0x80	; 128
     3c4:	55 e2       	ldi	r21, 0x25	; 37
     3c6:	60 e0       	ldi	r22, 0x00	; 0
     3c8:	70 e0       	ldi	r23, 0x00	; 0
     3ca:	0e 94 60 10 	call	0x20c0	; 0x20c0 <_ZN14HardwareSerial5beginEm>
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	90 e0       	ldi	r25, 0x00	; 0
     3d2:	a8 e4       	ldi	r26, 0x48	; 72
     3d4:	b3 e4       	ldi	r27, 0x43	; 67
     3d6:	80 93 52 02 	sts	0x0252, r24
     3da:	90 93 53 02 	sts	0x0253, r25
     3de:	a0 93 54 02 	sts	0x0254, r26
     3e2:	b0 93 55 02 	sts	0x0255, r27
     3e6:	ca e4       	ldi	r28, 0x4A	; 74
     3e8:	d2 e0       	ldi	r29, 0x02	; 2
     3ea:	ce 01       	movw	r24, r28
     3ec:	4d ec       	ldi	r20, 0xCD	; 205
     3ee:	5c ec       	ldi	r21, 0xCC	; 204
     3f0:	6c ec       	ldi	r22, 0xCC	; 204
     3f2:	7d e3       	ldi	r23, 0x3D	; 61
     3f4:	0a e0       	ldi	r16, 0x0A	; 10
     3f6:	17 ed       	ldi	r17, 0xD7	; 215
     3f8:	23 ea       	ldi	r18, 0xA3	; 163
     3fa:	3b e3       	ldi	r19, 0x3B	; 59
     3fc:	0e 94 13 01 	call	0x226	; 0x226 <_ZN12PDController10setTuningsEdd>
     400:	ce 01       	movw	r24, r28
     402:	40 e0       	ldi	r20, 0x00	; 0
     404:	50 e0       	ldi	r21, 0x00	; 0
     406:	6f e7       	ldi	r22, 0x7F	; 127
     408:	73 ec       	ldi	r23, 0xC3	; 195
     40a:	00 e0       	ldi	r16, 0x00	; 0
     40c:	10 e0       	ldi	r17, 0x00	; 0
     40e:	98 01       	movw	r18, r16
     410:	0e 94 8c 01 	call	0x318	; 0x318 <_ZN12PDController15setOutputLimitsEdd>
     414:	f8 94       	cli
     416:	10 92 80 00 	sts	0x0080, r1
     41a:	e1 e8       	ldi	r30, 0x81	; 129
     41c:	f0 e0       	ldi	r31, 0x00	; 0
     41e:	10 82       	st	Z, r1
     420:	10 92 85 00 	sts	0x0085, r1
     424:	10 92 84 00 	sts	0x0084, r1
     428:	89 e0       	ldi	r24, 0x09	; 9
     42a:	9d e3       	ldi	r25, 0x3D	; 61
     42c:	90 93 89 00 	sts	0x0089, r25
     430:	80 93 88 00 	sts	0x0088, r24
     434:	80 81       	ld	r24, Z
     436:	88 60       	ori	r24, 0x08	; 8
     438:	80 83       	st	Z, r24
     43a:	80 81       	ld	r24, Z
     43c:	84 60       	ori	r24, 0x04	; 4
     43e:	80 83       	st	Z, r24
     440:	ef e6       	ldi	r30, 0x6F	; 111
     442:	f0 e0       	ldi	r31, 0x00	; 0
     444:	80 81       	ld	r24, Z
     446:	82 60       	ori	r24, 0x02	; 2
     448:	80 83       	st	Z, r24
     44a:	78 94       	sei
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	08 95       	ret

00000456 <loop>:
     456:	08 95       	ret

00000458 <__vector_11>:
     458:	1f 92       	push	r1
     45a:	0f 92       	push	r0
     45c:	0f b6       	in	r0, 0x3f	; 63
     45e:	0f 92       	push	r0
     460:	11 24       	eor	r1, r1
     462:	2f 93       	push	r18
     464:	3f 93       	push	r19
     466:	4f 93       	push	r20
     468:	5f 93       	push	r21
     46a:	6f 93       	push	r22
     46c:	7f 93       	push	r23
     46e:	8f 93       	push	r24
     470:	9f 93       	push	r25
     472:	af 93       	push	r26
     474:	bf 93       	push	r27
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	ef 93       	push	r30
     47c:	ff 93       	push	r31
     47e:	82 e0       	ldi	r24, 0x02	; 2
     480:	0e 94 c0 09 	call	0x1380	; 0x1380 <analogRead>
     484:	9c 01       	movw	r18, r24
     486:	b9 01       	movw	r22, r18
     488:	88 27       	eor	r24, r24
     48a:	77 fd       	sbrc	r23, 7
     48c:	80 95       	com	r24
     48e:	98 2f       	mov	r25, r24
     490:	0e 94 a9 06 	call	0xd52	; 0xd52 <__floatsisf>
     494:	60 93 4a 02 	sts	0x024A, r22
     498:	70 93 4b 02 	sts	0x024B, r23
     49c:	80 93 4c 02 	sts	0x024C, r24
     4a0:	90 93 4d 02 	sts	0x024D, r25
     4a4:	8a e4       	ldi	r24, 0x4A	; 74
     4a6:	92 e0       	ldi	r25, 0x02	; 2
     4a8:	0e 94 99 00 	call	0x132	; 0x132 <_ZN12PDController7computeEv>
     4ac:	cd ef       	ldi	r28, 0xFD	; 253
     4ae:	d2 e0       	ldi	r29, 0x02	; 2
     4b0:	ce 01       	movw	r24, r28
     4b2:	60 e0       	ldi	r22, 0x00	; 0
     4b4:	71 e0       	ldi	r23, 0x01	; 1
     4b6:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN5Print5printEPKc>
     4ba:	40 91 4a 02 	lds	r20, 0x024A
     4be:	50 91 4b 02 	lds	r21, 0x024B
     4c2:	60 91 4c 02 	lds	r22, 0x024C
     4c6:	70 91 4d 02 	lds	r23, 0x024D
     4ca:	ce 01       	movw	r24, r28
     4cc:	22 e0       	ldi	r18, 0x02	; 2
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <_ZN5Print5printEdi>
     4d4:	ce 01       	movw	r24, r28
     4d6:	66 e0       	ldi	r22, 0x06	; 6
     4d8:	71 e0       	ldi	r23, 0x01	; 1
     4da:	0e 94 6d 0c 	call	0x18da	; 0x18da <_ZN5Print5printEPKc>
     4de:	40 91 4e 02 	lds	r20, 0x024E
     4e2:	50 91 4f 02 	lds	r21, 0x024F
     4e6:	60 91 50 02 	lds	r22, 0x0250
     4ea:	70 91 51 02 	lds	r23, 0x0251
     4ee:	ce 01       	movw	r24, r28
     4f0:	22 e0       	ldi	r18, 0x02	; 2
     4f2:	30 e0       	ldi	r19, 0x00	; 0
     4f4:	0e 94 dd 0e 	call	0x1dba	; 0x1dba <_ZN5Print7printlnEdi>
     4f8:	ff 91       	pop	r31
     4fa:	ef 91       	pop	r30
     4fc:	df 91       	pop	r29
     4fe:	cf 91       	pop	r28
     500:	bf 91       	pop	r27
     502:	af 91       	pop	r26
     504:	9f 91       	pop	r25
     506:	8f 91       	pop	r24
     508:	7f 91       	pop	r23
     50a:	6f 91       	pop	r22
     50c:	5f 91       	pop	r21
     50e:	4f 91       	pop	r20
     510:	3f 91       	pop	r19
     512:	2f 91       	pop	r18
     514:	0f 90       	pop	r0
     516:	0f be       	out	0x3f, r0	; 63
     518:	0f 90       	pop	r0
     51a:	1f 90       	pop	r1
     51c:	18 95       	reti

0000051e <main>:
     51e:	0e 94 ee 0a 	call	0x15dc	; 0x15dc <init>
     522:	0e 94 db 01 	call	0x3b6	; 0x3b6 <setup>
     526:	ff cf       	rjmp	.-2      	; 0x526 <main+0x8>

00000528 <_GLOBAL__I_testController>:
     528:	8a e4       	ldi	r24, 0x4A	; 74
     52a:	92 e0       	ldi	r25, 0x02	; 2
     52c:	40 e0       	ldi	r20, 0x00	; 0
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	6a e7       	ldi	r22, 0x7A	; 122
     532:	73 e4       	ldi	r23, 0x43	; 67
     534:	0e 94 8d 00 	call	0x11a	; 0x11a <_ZN12PDControllerC1Ed>
     538:	08 95       	ret

0000053a <__fixunssfsi>:
     53a:	ef 92       	push	r14
     53c:	ff 92       	push	r15
     53e:	0f 93       	push	r16
     540:	1f 93       	push	r17
     542:	7b 01       	movw	r14, r22
     544:	8c 01       	movw	r16, r24
     546:	20 e0       	ldi	r18, 0x00	; 0
     548:	30 e0       	ldi	r19, 0x00	; 0
     54a:	40 e0       	ldi	r20, 0x00	; 0
     54c:	5f e4       	ldi	r21, 0x4F	; 79
     54e:	0e 94 49 06 	call	0xc92	; 0xc92 <__gesf2>
     552:	87 fd       	sbrc	r24, 7
     554:	11 c0       	rjmp	.+34     	; 0x578 <__fixunssfsi+0x3e>
     556:	c8 01       	movw	r24, r16
     558:	b7 01       	movw	r22, r14
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	30 e0       	ldi	r19, 0x00	; 0
     55e:	40 e0       	ldi	r20, 0x00	; 0
     560:	5f e4       	ldi	r21, 0x4F	; 79
     562:	0e 94 40 04 	call	0x880	; 0x880 <__subsf3>
     566:	0e 94 09 07 	call	0xe12	; 0xe12 <__fixsfsi>
     56a:	9b 01       	movw	r18, r22
     56c:	ac 01       	movw	r20, r24
     56e:	20 50       	subi	r18, 0x00	; 0
     570:	30 40       	sbci	r19, 0x00	; 0
     572:	40 40       	sbci	r20, 0x00	; 0
     574:	50 48       	sbci	r21, 0x80	; 128
     576:	06 c0       	rjmp	.+12     	; 0x584 <__fixunssfsi+0x4a>
     578:	c8 01       	movw	r24, r16
     57a:	b7 01       	movw	r22, r14
     57c:	0e 94 09 07 	call	0xe12	; 0xe12 <__fixsfsi>
     580:	9b 01       	movw	r18, r22
     582:	ac 01       	movw	r20, r24
     584:	b9 01       	movw	r22, r18
     586:	ca 01       	movw	r24, r20
     588:	1f 91       	pop	r17
     58a:	0f 91       	pop	r16
     58c:	ff 90       	pop	r15
     58e:	ef 90       	pop	r14
     590:	08 95       	ret

00000592 <_fpadd_parts>:
     592:	a0 e0       	ldi	r26, 0x00	; 0
     594:	b0 e0       	ldi	r27, 0x00	; 0
     596:	ef ec       	ldi	r30, 0xCF	; 207
     598:	f2 e0       	ldi	r31, 0x02	; 2
     59a:	0c 94 e7 19 	jmp	0x33ce	; 0x33ce <__prologue_saves__+0x8>
     59e:	fc 01       	movw	r30, r24
     5a0:	ea 01       	movw	r28, r20
     5a2:	80 81       	ld	r24, Z
     5a4:	82 30       	cpi	r24, 0x02	; 2
     5a6:	08 f4       	brcc	.+2      	; 0x5aa <_fpadd_parts+0x18>
     5a8:	38 c1       	rjmp	.+624    	; 0x81a <_fpadd_parts+0x288>
     5aa:	db 01       	movw	r26, r22
     5ac:	9c 91       	ld	r25, X
     5ae:	92 30       	cpi	r25, 0x02	; 2
     5b0:	08 f4       	brcc	.+2      	; 0x5b4 <_fpadd_parts+0x22>
     5b2:	30 c1       	rjmp	.+608    	; 0x814 <_fpadd_parts+0x282>
     5b4:	84 30       	cpi	r24, 0x04	; 4
     5b6:	59 f4       	brne	.+22     	; 0x5ce <_fpadd_parts+0x3c>
     5b8:	94 30       	cpi	r25, 0x04	; 4
     5ba:	09 f0       	breq	.+2      	; 0x5be <_fpadd_parts+0x2c>
     5bc:	2e c1       	rjmp	.+604    	; 0x81a <_fpadd_parts+0x288>
     5be:	91 81       	ldd	r25, Z+1	; 0x01
     5c0:	11 96       	adiw	r26, 0x01	; 1
     5c2:	8c 91       	ld	r24, X
     5c4:	11 97       	sbiw	r26, 0x01	; 1
     5c6:	98 17       	cp	r25, r24
     5c8:	09 f0       	breq	.+2      	; 0x5cc <_fpadd_parts+0x3a>
     5ca:	21 c1       	rjmp	.+578    	; 0x80e <_fpadd_parts+0x27c>
     5cc:	26 c1       	rjmp	.+588    	; 0x81a <_fpadd_parts+0x288>
     5ce:	94 30       	cpi	r25, 0x04	; 4
     5d0:	09 f4       	brne	.+2      	; 0x5d4 <_fpadd_parts+0x42>
     5d2:	20 c1       	rjmp	.+576    	; 0x814 <_fpadd_parts+0x282>
     5d4:	92 30       	cpi	r25, 0x02	; 2
     5d6:	b1 f4       	brne	.+44     	; 0x604 <_fpadd_parts+0x72>
     5d8:	82 30       	cpi	r24, 0x02	; 2
     5da:	09 f0       	breq	.+2      	; 0x5de <_fpadd_parts+0x4c>
     5dc:	1e c1       	rjmp	.+572    	; 0x81a <_fpadd_parts+0x288>
     5de:	ca 01       	movw	r24, r20
     5e0:	af 01       	movw	r20, r30
     5e2:	28 e0       	ldi	r18, 0x08	; 8
     5e4:	da 01       	movw	r26, r20
     5e6:	0d 90       	ld	r0, X+
     5e8:	ad 01       	movw	r20, r26
     5ea:	dc 01       	movw	r26, r24
     5ec:	0d 92       	st	X+, r0
     5ee:	cd 01       	movw	r24, r26
     5f0:	21 50       	subi	r18, 0x01	; 1
     5f2:	c1 f7       	brne	.-16     	; 0x5e4 <_fpadd_parts+0x52>
     5f4:	db 01       	movw	r26, r22
     5f6:	11 96       	adiw	r26, 0x01	; 1
     5f8:	8c 91       	ld	r24, X
     5fa:	11 97       	sbiw	r26, 0x01	; 1
     5fc:	91 81       	ldd	r25, Z+1	; 0x01
     5fe:	89 23       	and	r24, r25
     600:	89 83       	std	Y+1, r24	; 0x01
     602:	0a c1       	rjmp	.+532    	; 0x818 <_fpadd_parts+0x286>
     604:	82 30       	cpi	r24, 0x02	; 2
     606:	09 f4       	brne	.+2      	; 0x60a <_fpadd_parts+0x78>
     608:	05 c1       	rjmp	.+522    	; 0x814 <_fpadd_parts+0x282>
     60a:	c2 80       	ldd	r12, Z+2	; 0x02
     60c:	d3 80       	ldd	r13, Z+3	; 0x03
     60e:	db 01       	movw	r26, r22
     610:	12 96       	adiw	r26, 0x02	; 2
     612:	6d 90       	ld	r6, X+
     614:	7c 90       	ld	r7, X
     616:	13 97       	sbiw	r26, 0x03	; 3
     618:	24 81       	ldd	r18, Z+4	; 0x04
     61a:	35 81       	ldd	r19, Z+5	; 0x05
     61c:	46 81       	ldd	r20, Z+6	; 0x06
     61e:	57 81       	ldd	r21, Z+7	; 0x07
     620:	14 96       	adiw	r26, 0x04	; 4
     622:	ed 90       	ld	r14, X+
     624:	fd 90       	ld	r15, X+
     626:	0d 91       	ld	r16, X+
     628:	1c 91       	ld	r17, X
     62a:	17 97       	sbiw	r26, 0x07	; 7
     62c:	c6 01       	movw	r24, r12
     62e:	86 19       	sub	r24, r6
     630:	97 09       	sbc	r25, r7
     632:	5c 01       	movw	r10, r24
     634:	97 ff       	sbrs	r25, 7
     636:	04 c0       	rjmp	.+8      	; 0x640 <_fpadd_parts+0xae>
     638:	aa 24       	eor	r10, r10
     63a:	bb 24       	eor	r11, r11
     63c:	a8 1a       	sub	r10, r24
     63e:	b9 0a       	sbc	r11, r25
     640:	b0 e2       	ldi	r27, 0x20	; 32
     642:	ab 16       	cp	r10, r27
     644:	b1 04       	cpc	r11, r1
     646:	0c f0       	brlt	.+2      	; 0x64a <_fpadd_parts+0xb8>
     648:	61 c0       	rjmp	.+194    	; 0x70c <_fpadd_parts+0x17a>
     64a:	18 16       	cp	r1, r24
     64c:	19 06       	cpc	r1, r25
     64e:	6c f5       	brge	.+90     	; 0x6aa <_fpadd_parts+0x118>
     650:	37 01       	movw	r6, r14
     652:	48 01       	movw	r8, r16
     654:	0a 2c       	mov	r0, r10
     656:	04 c0       	rjmp	.+8      	; 0x660 <_fpadd_parts+0xce>
     658:	96 94       	lsr	r9
     65a:	87 94       	ror	r8
     65c:	77 94       	ror	r7
     65e:	67 94       	ror	r6
     660:	0a 94       	dec	r0
     662:	d2 f7       	brpl	.-12     	; 0x658 <_fpadd_parts+0xc6>
     664:	81 e0       	ldi	r24, 0x01	; 1
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	a0 e0       	ldi	r26, 0x00	; 0
     66a:	b0 e0       	ldi	r27, 0x00	; 0
     66c:	0a 2c       	mov	r0, r10
     66e:	04 c0       	rjmp	.+8      	; 0x678 <_fpadd_parts+0xe6>
     670:	88 0f       	add	r24, r24
     672:	99 1f       	adc	r25, r25
     674:	aa 1f       	adc	r26, r26
     676:	bb 1f       	adc	r27, r27
     678:	0a 94       	dec	r0
     67a:	d2 f7       	brpl	.-12     	; 0x670 <_fpadd_parts+0xde>
     67c:	01 97       	sbiw	r24, 0x01	; 1
     67e:	a1 09       	sbc	r26, r1
     680:	b1 09       	sbc	r27, r1
     682:	8e 21       	and	r24, r14
     684:	9f 21       	and	r25, r15
     686:	a0 23       	and	r26, r16
     688:	b1 23       	and	r27, r17
     68a:	ee 24       	eor	r14, r14
     68c:	ff 24       	eor	r15, r15
     68e:	87 01       	movw	r16, r14
     690:	e3 94       	inc	r14
     692:	00 97       	sbiw	r24, 0x00	; 0
     694:	a1 05       	cpc	r26, r1
     696:	b1 05       	cpc	r27, r1
     698:	19 f4       	brne	.+6      	; 0x6a0 <_fpadd_parts+0x10e>
     69a:	ee 24       	eor	r14, r14
     69c:	ff 24       	eor	r15, r15
     69e:	87 01       	movw	r16, r14
     6a0:	e6 28       	or	r14, r6
     6a2:	f7 28       	or	r15, r7
     6a4:	08 29       	or	r16, r8
     6a6:	19 29       	or	r17, r9
     6a8:	3c c0       	rjmp	.+120    	; 0x722 <_fpadd_parts+0x190>
     6aa:	00 97       	sbiw	r24, 0x00	; 0
     6ac:	d1 f1       	breq	.+116    	; 0x722 <_fpadd_parts+0x190>
     6ae:	ca 0c       	add	r12, r10
     6b0:	db 1c       	adc	r13, r11
     6b2:	39 01       	movw	r6, r18
     6b4:	4a 01       	movw	r8, r20
     6b6:	0a 2c       	mov	r0, r10
     6b8:	04 c0       	rjmp	.+8      	; 0x6c2 <_fpadd_parts+0x130>
     6ba:	96 94       	lsr	r9
     6bc:	87 94       	ror	r8
     6be:	77 94       	ror	r7
     6c0:	67 94       	ror	r6
     6c2:	0a 94       	dec	r0
     6c4:	d2 f7       	brpl	.-12     	; 0x6ba <_fpadd_parts+0x128>
     6c6:	81 e0       	ldi	r24, 0x01	; 1
     6c8:	90 e0       	ldi	r25, 0x00	; 0
     6ca:	a0 e0       	ldi	r26, 0x00	; 0
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	0a 2c       	mov	r0, r10
     6d0:	04 c0       	rjmp	.+8      	; 0x6da <_fpadd_parts+0x148>
     6d2:	88 0f       	add	r24, r24
     6d4:	99 1f       	adc	r25, r25
     6d6:	aa 1f       	adc	r26, r26
     6d8:	bb 1f       	adc	r27, r27
     6da:	0a 94       	dec	r0
     6dc:	d2 f7       	brpl	.-12     	; 0x6d2 <_fpadd_parts+0x140>
     6de:	01 97       	sbiw	r24, 0x01	; 1
     6e0:	a1 09       	sbc	r26, r1
     6e2:	b1 09       	sbc	r27, r1
     6e4:	82 23       	and	r24, r18
     6e6:	93 23       	and	r25, r19
     6e8:	a4 23       	and	r26, r20
     6ea:	b5 23       	and	r27, r21
     6ec:	21 e0       	ldi	r18, 0x01	; 1
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	40 e0       	ldi	r20, 0x00	; 0
     6f2:	50 e0       	ldi	r21, 0x00	; 0
     6f4:	00 97       	sbiw	r24, 0x00	; 0
     6f6:	a1 05       	cpc	r26, r1
     6f8:	b1 05       	cpc	r27, r1
     6fa:	19 f4       	brne	.+6      	; 0x702 <_fpadd_parts+0x170>
     6fc:	20 e0       	ldi	r18, 0x00	; 0
     6fe:	30 e0       	ldi	r19, 0x00	; 0
     700:	a9 01       	movw	r20, r18
     702:	26 29       	or	r18, r6
     704:	37 29       	or	r19, r7
     706:	48 29       	or	r20, r8
     708:	59 29       	or	r21, r9
     70a:	0b c0       	rjmp	.+22     	; 0x722 <_fpadd_parts+0x190>
     70c:	6c 14       	cp	r6, r12
     70e:	7d 04       	cpc	r7, r13
     710:	24 f4       	brge	.+8      	; 0x71a <_fpadd_parts+0x188>
     712:	ee 24       	eor	r14, r14
     714:	ff 24       	eor	r15, r15
     716:	87 01       	movw	r16, r14
     718:	04 c0       	rjmp	.+8      	; 0x722 <_fpadd_parts+0x190>
     71a:	63 01       	movw	r12, r6
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	a9 01       	movw	r20, r18
     722:	81 81       	ldd	r24, Z+1	; 0x01
     724:	fb 01       	movw	r30, r22
     726:	91 81       	ldd	r25, Z+1	; 0x01
     728:	89 17       	cp	r24, r25
     72a:	09 f4       	brne	.+2      	; 0x72e <_fpadd_parts+0x19c>
     72c:	45 c0       	rjmp	.+138    	; 0x7b8 <_fpadd_parts+0x226>
     72e:	88 23       	and	r24, r24
     730:	49 f0       	breq	.+18     	; 0x744 <_fpadd_parts+0x1b2>
     732:	d8 01       	movw	r26, r16
     734:	c7 01       	movw	r24, r14
     736:	82 1b       	sub	r24, r18
     738:	93 0b       	sbc	r25, r19
     73a:	a4 0b       	sbc	r26, r20
     73c:	b5 0b       	sbc	r27, r21
     73e:	9c 01       	movw	r18, r24
     740:	ad 01       	movw	r20, r26
     742:	04 c0       	rjmp	.+8      	; 0x74c <_fpadd_parts+0x1ba>
     744:	2e 19       	sub	r18, r14
     746:	3f 09       	sbc	r19, r15
     748:	40 0b       	sbc	r20, r16
     74a:	51 0b       	sbc	r21, r17
     74c:	57 fd       	sbrc	r21, 7
     74e:	04 c0       	rjmp	.+8      	; 0x758 <_fpadd_parts+0x1c6>
     750:	19 82       	std	Y+1, r1	; 0x01
     752:	db 82       	std	Y+3, r13	; 0x03
     754:	ca 82       	std	Y+2, r12	; 0x02
     756:	0b c0       	rjmp	.+22     	; 0x76e <_fpadd_parts+0x1dc>
     758:	81 e0       	ldi	r24, 0x01	; 1
     75a:	89 83       	std	Y+1, r24	; 0x01
     75c:	db 82       	std	Y+3, r13	; 0x03
     75e:	ca 82       	std	Y+2, r12	; 0x02
     760:	50 95       	com	r21
     762:	40 95       	com	r20
     764:	30 95       	com	r19
     766:	21 95       	neg	r18
     768:	3f 4f       	sbci	r19, 0xFF	; 255
     76a:	4f 4f       	sbci	r20, 0xFF	; 255
     76c:	5f 4f       	sbci	r21, 0xFF	; 255
     76e:	2c 83       	std	Y+4, r18	; 0x04
     770:	3d 83       	std	Y+5, r19	; 0x05
     772:	4e 83       	std	Y+6, r20	; 0x06
     774:	5f 83       	std	Y+7, r21	; 0x07
     776:	0d c0       	rjmp	.+26     	; 0x792 <_fpadd_parts+0x200>
     778:	88 0f       	add	r24, r24
     77a:	99 1f       	adc	r25, r25
     77c:	aa 1f       	adc	r26, r26
     77e:	bb 1f       	adc	r27, r27
     780:	8c 83       	std	Y+4, r24	; 0x04
     782:	9d 83       	std	Y+5, r25	; 0x05
     784:	ae 83       	std	Y+6, r26	; 0x06
     786:	bf 83       	std	Y+7, r27	; 0x07
     788:	8a 81       	ldd	r24, Y+2	; 0x02
     78a:	9b 81       	ldd	r25, Y+3	; 0x03
     78c:	01 97       	sbiw	r24, 0x01	; 1
     78e:	9b 83       	std	Y+3, r25	; 0x03
     790:	8a 83       	std	Y+2, r24	; 0x02
     792:	8c 81       	ldd	r24, Y+4	; 0x04
     794:	9d 81       	ldd	r25, Y+5	; 0x05
     796:	ae 81       	ldd	r26, Y+6	; 0x06
     798:	bf 81       	ldd	r27, Y+7	; 0x07
     79a:	9c 01       	movw	r18, r24
     79c:	ad 01       	movw	r20, r26
     79e:	21 50       	subi	r18, 0x01	; 1
     7a0:	30 40       	sbci	r19, 0x00	; 0
     7a2:	40 40       	sbci	r20, 0x00	; 0
     7a4:	50 40       	sbci	r21, 0x00	; 0
     7a6:	2f 3f       	cpi	r18, 0xFF	; 255
     7a8:	ef ef       	ldi	r30, 0xFF	; 255
     7aa:	3e 07       	cpc	r19, r30
     7ac:	ef ef       	ldi	r30, 0xFF	; 255
     7ae:	4e 07       	cpc	r20, r30
     7b0:	ef e3       	ldi	r30, 0x3F	; 63
     7b2:	5e 07       	cpc	r21, r30
     7b4:	08 f3       	brcs	.-62     	; 0x778 <_fpadd_parts+0x1e6>
     7b6:	0b c0       	rjmp	.+22     	; 0x7ce <_fpadd_parts+0x23c>
     7b8:	89 83       	std	Y+1, r24	; 0x01
     7ba:	db 82       	std	Y+3, r13	; 0x03
     7bc:	ca 82       	std	Y+2, r12	; 0x02
     7be:	2e 0d       	add	r18, r14
     7c0:	3f 1d       	adc	r19, r15
     7c2:	40 1f       	adc	r20, r16
     7c4:	51 1f       	adc	r21, r17
     7c6:	2c 83       	std	Y+4, r18	; 0x04
     7c8:	3d 83       	std	Y+5, r19	; 0x05
     7ca:	4e 83       	std	Y+6, r20	; 0x06
     7cc:	5f 83       	std	Y+7, r21	; 0x07
     7ce:	83 e0       	ldi	r24, 0x03	; 3
     7d0:	88 83       	st	Y, r24
     7d2:	2c 81       	ldd	r18, Y+4	; 0x04
     7d4:	3d 81       	ldd	r19, Y+5	; 0x05
     7d6:	4e 81       	ldd	r20, Y+6	; 0x06
     7d8:	5f 81       	ldd	r21, Y+7	; 0x07
     7da:	57 ff       	sbrs	r21, 7
     7dc:	1d c0       	rjmp	.+58     	; 0x818 <_fpadd_parts+0x286>
     7de:	da 01       	movw	r26, r20
     7e0:	c9 01       	movw	r24, r18
     7e2:	81 70       	andi	r24, 0x01	; 1
     7e4:	90 70       	andi	r25, 0x00	; 0
     7e6:	a0 70       	andi	r26, 0x00	; 0
     7e8:	b0 70       	andi	r27, 0x00	; 0
     7ea:	56 95       	lsr	r21
     7ec:	47 95       	ror	r20
     7ee:	37 95       	ror	r19
     7f0:	27 95       	ror	r18
     7f2:	82 2b       	or	r24, r18
     7f4:	93 2b       	or	r25, r19
     7f6:	a4 2b       	or	r26, r20
     7f8:	b5 2b       	or	r27, r21
     7fa:	8c 83       	std	Y+4, r24	; 0x04
     7fc:	9d 83       	std	Y+5, r25	; 0x05
     7fe:	ae 83       	std	Y+6, r26	; 0x06
     800:	bf 83       	std	Y+7, r27	; 0x07
     802:	8a 81       	ldd	r24, Y+2	; 0x02
     804:	9b 81       	ldd	r25, Y+3	; 0x03
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	9b 83       	std	Y+3, r25	; 0x03
     80a:	8a 83       	std	Y+2, r24	; 0x02
     80c:	05 c0       	rjmp	.+10     	; 0x818 <_fpadd_parts+0x286>
     80e:	e2 e1       	ldi	r30, 0x12	; 18
     810:	f1 e0       	ldi	r31, 0x01	; 1
     812:	03 c0       	rjmp	.+6      	; 0x81a <_fpadd_parts+0x288>
     814:	fb 01       	movw	r30, r22
     816:	01 c0       	rjmp	.+2      	; 0x81a <_fpadd_parts+0x288>
     818:	fe 01       	movw	r30, r28
     81a:	cf 01       	movw	r24, r30
     81c:	cd b7       	in	r28, 0x3d	; 61
     81e:	de b7       	in	r29, 0x3e	; 62
     820:	ee e0       	ldi	r30, 0x0E	; 14
     822:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <__epilogue_restores__+0x8>

00000826 <__addsf3>:
     826:	a0 e2       	ldi	r26, 0x20	; 32
     828:	b0 e0       	ldi	r27, 0x00	; 0
     82a:	e9 e1       	ldi	r30, 0x19	; 25
     82c:	f4 e0       	ldi	r31, 0x04	; 4
     82e:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__prologue_saves__+0x18>
     832:	69 83       	std	Y+1, r22	; 0x01
     834:	7a 83       	std	Y+2, r23	; 0x02
     836:	8b 83       	std	Y+3, r24	; 0x03
     838:	9c 83       	std	Y+4, r25	; 0x04
     83a:	2d 83       	std	Y+5, r18	; 0x05
     83c:	3e 83       	std	Y+6, r19	; 0x06
     83e:	4f 83       	std	Y+7, r20	; 0x07
     840:	58 87       	std	Y+8, r21	; 0x08
     842:	89 e0       	ldi	r24, 0x09	; 9
     844:	e8 2e       	mov	r14, r24
     846:	f1 2c       	mov	r15, r1
     848:	ec 0e       	add	r14, r28
     84a:	fd 1e       	adc	r15, r29
     84c:	ce 01       	movw	r24, r28
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	b7 01       	movw	r22, r14
     852:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     856:	8e 01       	movw	r16, r28
     858:	0f 5e       	subi	r16, 0xEF	; 239
     85a:	1f 4f       	sbci	r17, 0xFF	; 255
     85c:	ce 01       	movw	r24, r28
     85e:	05 96       	adiw	r24, 0x05	; 5
     860:	b8 01       	movw	r22, r16
     862:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     866:	c7 01       	movw	r24, r14
     868:	b8 01       	movw	r22, r16
     86a:	ae 01       	movw	r20, r28
     86c:	47 5e       	subi	r20, 0xE7	; 231
     86e:	5f 4f       	sbci	r21, 0xFF	; 255
     870:	0e 94 c9 02 	call	0x592	; 0x592 <_fpadd_parts>
     874:	0e 94 2d 08 	call	0x105a	; 0x105a <__pack_f>
     878:	a0 96       	adiw	r28, 0x20	; 32
     87a:	e6 e0       	ldi	r30, 0x06	; 6
     87c:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__epilogue_restores__+0x18>

00000880 <__subsf3>:
     880:	a0 e2       	ldi	r26, 0x20	; 32
     882:	b0 e0       	ldi	r27, 0x00	; 0
     884:	e6 e4       	ldi	r30, 0x46	; 70
     886:	f4 e0       	ldi	r31, 0x04	; 4
     888:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__prologue_saves__+0x18>
     88c:	69 83       	std	Y+1, r22	; 0x01
     88e:	7a 83       	std	Y+2, r23	; 0x02
     890:	8b 83       	std	Y+3, r24	; 0x03
     892:	9c 83       	std	Y+4, r25	; 0x04
     894:	2d 83       	std	Y+5, r18	; 0x05
     896:	3e 83       	std	Y+6, r19	; 0x06
     898:	4f 83       	std	Y+7, r20	; 0x07
     89a:	58 87       	std	Y+8, r21	; 0x08
     89c:	8e 01       	movw	r16, r28
     89e:	07 5f       	subi	r16, 0xF7	; 247
     8a0:	1f 4f       	sbci	r17, 0xFF	; 255
     8a2:	ce 01       	movw	r24, r28
     8a4:	01 96       	adiw	r24, 0x01	; 1
     8a6:	b8 01       	movw	r22, r16
     8a8:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     8ac:	91 e1       	ldi	r25, 0x11	; 17
     8ae:	e9 2e       	mov	r14, r25
     8b0:	f1 2c       	mov	r15, r1
     8b2:	ec 0e       	add	r14, r28
     8b4:	fd 1e       	adc	r15, r29
     8b6:	ce 01       	movw	r24, r28
     8b8:	05 96       	adiw	r24, 0x05	; 5
     8ba:	b7 01       	movw	r22, r14
     8bc:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     8c0:	8a 89       	ldd	r24, Y+18	; 0x12
     8c2:	91 e0       	ldi	r25, 0x01	; 1
     8c4:	89 27       	eor	r24, r25
     8c6:	8a 8b       	std	Y+18, r24	; 0x12
     8c8:	c8 01       	movw	r24, r16
     8ca:	b7 01       	movw	r22, r14
     8cc:	ae 01       	movw	r20, r28
     8ce:	47 5e       	subi	r20, 0xE7	; 231
     8d0:	5f 4f       	sbci	r21, 0xFF	; 255
     8d2:	0e 94 c9 02 	call	0x592	; 0x592 <_fpadd_parts>
     8d6:	0e 94 2d 08 	call	0x105a	; 0x105a <__pack_f>
     8da:	a0 96       	adiw	r28, 0x20	; 32
     8dc:	e6 e0       	ldi	r30, 0x06	; 6
     8de:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__epilogue_restores__+0x18>

000008e2 <__mulsf3>:
     8e2:	a0 e2       	ldi	r26, 0x20	; 32
     8e4:	b0 e0       	ldi	r27, 0x00	; 0
     8e6:	e7 e7       	ldi	r30, 0x77	; 119
     8e8:	f4 e0       	ldi	r31, 0x04	; 4
     8ea:	0c 94 e3 19 	jmp	0x33c6	; 0x33c6 <__prologue_saves__>
     8ee:	69 83       	std	Y+1, r22	; 0x01
     8f0:	7a 83       	std	Y+2, r23	; 0x02
     8f2:	8b 83       	std	Y+3, r24	; 0x03
     8f4:	9c 83       	std	Y+4, r25	; 0x04
     8f6:	2d 83       	std	Y+5, r18	; 0x05
     8f8:	3e 83       	std	Y+6, r19	; 0x06
     8fa:	4f 83       	std	Y+7, r20	; 0x07
     8fc:	58 87       	std	Y+8, r21	; 0x08
     8fe:	ce 01       	movw	r24, r28
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	be 01       	movw	r22, r28
     904:	67 5f       	subi	r22, 0xF7	; 247
     906:	7f 4f       	sbci	r23, 0xFF	; 255
     908:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     90c:	ce 01       	movw	r24, r28
     90e:	05 96       	adiw	r24, 0x05	; 5
     910:	be 01       	movw	r22, r28
     912:	6f 5e       	subi	r22, 0xEF	; 239
     914:	7f 4f       	sbci	r23, 0xFF	; 255
     916:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     91a:	99 85       	ldd	r25, Y+9	; 0x09
     91c:	92 30       	cpi	r25, 0x02	; 2
     91e:	78 f0       	brcs	.+30     	; 0x93e <__stack+0x3f>
     920:	89 89       	ldd	r24, Y+17	; 0x11
     922:	82 30       	cpi	r24, 0x02	; 2
     924:	c0 f0       	brcs	.+48     	; 0x956 <__stack+0x57>
     926:	94 30       	cpi	r25, 0x04	; 4
     928:	19 f4       	brne	.+6      	; 0x930 <__stack+0x31>
     92a:	82 30       	cpi	r24, 0x02	; 2
     92c:	41 f4       	brne	.+16     	; 0x93e <__stack+0x3f>
     92e:	cb c0       	rjmp	.+406    	; 0xac6 <__stack+0x1c7>
     930:	84 30       	cpi	r24, 0x04	; 4
     932:	19 f4       	brne	.+6      	; 0x93a <__stack+0x3b>
     934:	92 30       	cpi	r25, 0x02	; 2
     936:	79 f4       	brne	.+30     	; 0x956 <__stack+0x57>
     938:	c6 c0       	rjmp	.+396    	; 0xac6 <__stack+0x1c7>
     93a:	92 30       	cpi	r25, 0x02	; 2
     93c:	51 f4       	brne	.+20     	; 0x952 <__stack+0x53>
     93e:	81 e0       	ldi	r24, 0x01	; 1
     940:	2a 85       	ldd	r18, Y+10	; 0x0a
     942:	9a 89       	ldd	r25, Y+18	; 0x12
     944:	29 17       	cp	r18, r25
     946:	09 f4       	brne	.+2      	; 0x94a <__stack+0x4b>
     948:	80 e0       	ldi	r24, 0x00	; 0
     94a:	8a 87       	std	Y+10, r24	; 0x0a
     94c:	ce 01       	movw	r24, r28
     94e:	09 96       	adiw	r24, 0x09	; 9
     950:	bc c0       	rjmp	.+376    	; 0xaca <__stack+0x1cb>
     952:	82 30       	cpi	r24, 0x02	; 2
     954:	51 f4       	brne	.+20     	; 0x96a <__stack+0x6b>
     956:	81 e0       	ldi	r24, 0x01	; 1
     958:	2a 85       	ldd	r18, Y+10	; 0x0a
     95a:	9a 89       	ldd	r25, Y+18	; 0x12
     95c:	29 17       	cp	r18, r25
     95e:	09 f4       	brne	.+2      	; 0x962 <__stack+0x63>
     960:	80 e0       	ldi	r24, 0x00	; 0
     962:	8a 8b       	std	Y+18, r24	; 0x12
     964:	ce 01       	movw	r24, r28
     966:	41 96       	adiw	r24, 0x11	; 17
     968:	b0 c0       	rjmp	.+352    	; 0xaca <__stack+0x1cb>
     96a:	6d 84       	ldd	r6, Y+13	; 0x0d
     96c:	7e 84       	ldd	r7, Y+14	; 0x0e
     96e:	8f 84       	ldd	r8, Y+15	; 0x0f
     970:	98 88       	ldd	r9, Y+16	; 0x10
     972:	ed 88       	ldd	r14, Y+21	; 0x15
     974:	fe 88       	ldd	r15, Y+22	; 0x16
     976:	0f 89       	ldd	r16, Y+23	; 0x17
     978:	18 8d       	ldd	r17, Y+24	; 0x18
     97a:	e0 e2       	ldi	r30, 0x20	; 32
     97c:	f0 e0       	ldi	r31, 0x00	; 0
     97e:	80 e0       	ldi	r24, 0x00	; 0
     980:	90 e0       	ldi	r25, 0x00	; 0
     982:	dc 01       	movw	r26, r24
     984:	aa 24       	eor	r10, r10
     986:	bb 24       	eor	r11, r11
     988:	65 01       	movw	r12, r10
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	30 e0       	ldi	r19, 0x00	; 0
     98e:	a9 01       	movw	r20, r18
     990:	b3 01       	movw	r22, r6
     992:	61 70       	andi	r22, 0x01	; 1
     994:	70 70       	andi	r23, 0x00	; 0
     996:	61 15       	cp	r22, r1
     998:	71 05       	cpc	r23, r1
     99a:	d1 f0       	breq	.+52     	; 0x9d0 <__stack+0xd1>
     99c:	2e 0d       	add	r18, r14
     99e:	3f 1d       	adc	r19, r15
     9a0:	40 1f       	adc	r20, r16
     9a2:	51 1f       	adc	r21, r17
     9a4:	15 01       	movw	r2, r10
     9a6:	26 01       	movw	r4, r12
     9a8:	28 0e       	add	r2, r24
     9aa:	39 1e       	adc	r3, r25
     9ac:	4a 1e       	adc	r4, r26
     9ae:	5b 1e       	adc	r5, r27
     9b0:	81 e0       	ldi	r24, 0x01	; 1
     9b2:	90 e0       	ldi	r25, 0x00	; 0
     9b4:	a0 e0       	ldi	r26, 0x00	; 0
     9b6:	b0 e0       	ldi	r27, 0x00	; 0
     9b8:	2e 15       	cp	r18, r14
     9ba:	3f 05       	cpc	r19, r15
     9bc:	40 07       	cpc	r20, r16
     9be:	51 07       	cpc	r21, r17
     9c0:	18 f0       	brcs	.+6      	; 0x9c8 <__stack+0xc9>
     9c2:	80 e0       	ldi	r24, 0x00	; 0
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	dc 01       	movw	r26, r24
     9c8:	82 0d       	add	r24, r2
     9ca:	93 1d       	adc	r25, r3
     9cc:	a4 1d       	adc	r26, r4
     9ce:	b5 1d       	adc	r27, r5
     9d0:	aa 0c       	add	r10, r10
     9d2:	bb 1c       	adc	r11, r11
     9d4:	cc 1c       	adc	r12, r12
     9d6:	dd 1c       	adc	r13, r13
     9d8:	17 ff       	sbrs	r17, 7
     9da:	09 c0       	rjmp	.+18     	; 0x9ee <__stack+0xef>
     9dc:	61 e0       	ldi	r22, 0x01	; 1
     9de:	26 2e       	mov	r2, r22
     9e0:	31 2c       	mov	r3, r1
     9e2:	41 2c       	mov	r4, r1
     9e4:	51 2c       	mov	r5, r1
     9e6:	a2 28       	or	r10, r2
     9e8:	b3 28       	or	r11, r3
     9ea:	c4 28       	or	r12, r4
     9ec:	d5 28       	or	r13, r5
     9ee:	31 97       	sbiw	r30, 0x01	; 1
     9f0:	49 f0       	breq	.+18     	; 0xa04 <__stack+0x105>
     9f2:	ee 0c       	add	r14, r14
     9f4:	ff 1c       	adc	r15, r15
     9f6:	00 1f       	adc	r16, r16
     9f8:	11 1f       	adc	r17, r17
     9fa:	96 94       	lsr	r9
     9fc:	87 94       	ror	r8
     9fe:	77 94       	ror	r7
     a00:	67 94       	ror	r6
     a02:	c6 cf       	rjmp	.-116    	; 0x990 <__stack+0x91>
     a04:	6b 89       	ldd	r22, Y+19	; 0x13
     a06:	7c 89       	ldd	r23, Y+20	; 0x14
     a08:	eb 85       	ldd	r30, Y+11	; 0x0b
     a0a:	fc 85       	ldd	r31, Y+12	; 0x0c
     a0c:	6e 0f       	add	r22, r30
     a0e:	7f 1f       	adc	r23, r31
     a10:	6e 5f       	subi	r22, 0xFE	; 254
     a12:	7f 4f       	sbci	r23, 0xFF	; 255
     a14:	7c 8f       	std	Y+28, r23	; 0x1c
     a16:	6b 8f       	std	Y+27, r22	; 0x1b
     a18:	61 e0       	ldi	r22, 0x01	; 1
     a1a:	ea 85       	ldd	r30, Y+10	; 0x0a
     a1c:	7a 89       	ldd	r23, Y+18	; 0x12
     a1e:	e7 17       	cp	r30, r23
     a20:	09 f4       	brne	.+2      	; 0xa24 <__stack+0x125>
     a22:	60 e0       	ldi	r22, 0x00	; 0
     a24:	6a 8f       	std	Y+26, r22	; 0x1a
     a26:	6b 8d       	ldd	r22, Y+27	; 0x1b
     a28:	7c 8d       	ldd	r23, Y+28	; 0x1c
     a2a:	10 c0       	rjmp	.+32     	; 0xa4c <__stack+0x14d>
     a2c:	fc 01       	movw	r30, r24
     a2e:	e1 70       	andi	r30, 0x01	; 1
     a30:	f0 70       	andi	r31, 0x00	; 0
     a32:	30 97       	sbiw	r30, 0x00	; 0
     a34:	29 f0       	breq	.+10     	; 0xa40 <__stack+0x141>
     a36:	56 95       	lsr	r21
     a38:	47 95       	ror	r20
     a3a:	37 95       	ror	r19
     a3c:	27 95       	ror	r18
     a3e:	50 68       	ori	r21, 0x80	; 128
     a40:	b6 95       	lsr	r27
     a42:	a7 95       	ror	r26
     a44:	97 95       	ror	r25
     a46:	87 95       	ror	r24
     a48:	6f 5f       	subi	r22, 0xFF	; 255
     a4a:	7f 4f       	sbci	r23, 0xFF	; 255
     a4c:	b7 fd       	sbrc	r27, 7
     a4e:	ee cf       	rjmp	.-36     	; 0xa2c <__stack+0x12d>
     a50:	0c c0       	rjmp	.+24     	; 0xa6a <__stack+0x16b>
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	aa 1f       	adc	r26, r26
     a58:	bb 1f       	adc	r27, r27
     a5a:	57 fd       	sbrc	r21, 7
     a5c:	81 60       	ori	r24, 0x01	; 1
     a5e:	22 0f       	add	r18, r18
     a60:	33 1f       	adc	r19, r19
     a62:	44 1f       	adc	r20, r20
     a64:	55 1f       	adc	r21, r21
     a66:	61 50       	subi	r22, 0x01	; 1
     a68:	70 40       	sbci	r23, 0x00	; 0
     a6a:	80 30       	cpi	r24, 0x00	; 0
     a6c:	e0 e0       	ldi	r30, 0x00	; 0
     a6e:	9e 07       	cpc	r25, r30
     a70:	e0 e0       	ldi	r30, 0x00	; 0
     a72:	ae 07       	cpc	r26, r30
     a74:	e0 e4       	ldi	r30, 0x40	; 64
     a76:	be 07       	cpc	r27, r30
     a78:	60 f3       	brcs	.-40     	; 0xa52 <__stack+0x153>
     a7a:	6b 8f       	std	Y+27, r22	; 0x1b
     a7c:	7c 8f       	std	Y+28, r23	; 0x1c
     a7e:	6f e7       	ldi	r22, 0x7F	; 127
     a80:	e6 2e       	mov	r14, r22
     a82:	f1 2c       	mov	r15, r1
     a84:	01 2d       	mov	r16, r1
     a86:	11 2d       	mov	r17, r1
     a88:	e8 22       	and	r14, r24
     a8a:	f9 22       	and	r15, r25
     a8c:	0a 23       	and	r16, r26
     a8e:	1b 23       	and	r17, r27
     a90:	60 e4       	ldi	r22, 0x40	; 64
     a92:	e6 16       	cp	r14, r22
     a94:	f1 04       	cpc	r15, r1
     a96:	01 05       	cpc	r16, r1
     a98:	11 05       	cpc	r17, r1
     a9a:	61 f4       	brne	.+24     	; 0xab4 <__stack+0x1b5>
     a9c:	87 fd       	sbrc	r24, 7
     a9e:	0a c0       	rjmp	.+20     	; 0xab4 <__stack+0x1b5>
     aa0:	21 15       	cp	r18, r1
     aa2:	31 05       	cpc	r19, r1
     aa4:	41 05       	cpc	r20, r1
     aa6:	51 05       	cpc	r21, r1
     aa8:	29 f0       	breq	.+10     	; 0xab4 <__stack+0x1b5>
     aaa:	80 5c       	subi	r24, 0xC0	; 192
     aac:	9f 4f       	sbci	r25, 0xFF	; 255
     aae:	af 4f       	sbci	r26, 0xFF	; 255
     ab0:	bf 4f       	sbci	r27, 0xFF	; 255
     ab2:	80 78       	andi	r24, 0x80	; 128
     ab4:	8d 8f       	std	Y+29, r24	; 0x1d
     ab6:	9e 8f       	std	Y+30, r25	; 0x1e
     ab8:	af 8f       	std	Y+31, r26	; 0x1f
     aba:	b8 a3       	std	Y+32, r27	; 0x20
     abc:	83 e0       	ldi	r24, 0x03	; 3
     abe:	89 8f       	std	Y+25, r24	; 0x19
     ac0:	ce 01       	movw	r24, r28
     ac2:	49 96       	adiw	r24, 0x19	; 25
     ac4:	02 c0       	rjmp	.+4      	; 0xaca <__stack+0x1cb>
     ac6:	82 e1       	ldi	r24, 0x12	; 18
     ac8:	91 e0       	ldi	r25, 0x01	; 1
     aca:	0e 94 2d 08 	call	0x105a	; 0x105a <__pack_f>
     ace:	a0 96       	adiw	r28, 0x20	; 32
     ad0:	e2 e1       	ldi	r30, 0x12	; 18
     ad2:	0c 94 ff 19 	jmp	0x33fe	; 0x33fe <__epilogue_restores__>

00000ad6 <__divsf3>:
     ad6:	a8 e1       	ldi	r26, 0x18	; 24
     ad8:	b0 e0       	ldi	r27, 0x00	; 0
     ada:	e1 e7       	ldi	r30, 0x71	; 113
     adc:	f5 e0       	ldi	r31, 0x05	; 5
     ade:	0c 94 eb 19 	jmp	0x33d6	; 0x33d6 <__prologue_saves__+0x10>
     ae2:	69 83       	std	Y+1, r22	; 0x01
     ae4:	7a 83       	std	Y+2, r23	; 0x02
     ae6:	8b 83       	std	Y+3, r24	; 0x03
     ae8:	9c 83       	std	Y+4, r25	; 0x04
     aea:	2d 83       	std	Y+5, r18	; 0x05
     aec:	3e 83       	std	Y+6, r19	; 0x06
     aee:	4f 83       	std	Y+7, r20	; 0x07
     af0:	58 87       	std	Y+8, r21	; 0x08
     af2:	8e 01       	movw	r16, r28
     af4:	07 5f       	subi	r16, 0xF7	; 247
     af6:	1f 4f       	sbci	r17, 0xFF	; 255
     af8:	ce 01       	movw	r24, r28
     afa:	01 96       	adiw	r24, 0x01	; 1
     afc:	b8 01       	movw	r22, r16
     afe:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     b02:	81 e1       	ldi	r24, 0x11	; 17
     b04:	e8 2e       	mov	r14, r24
     b06:	f1 2c       	mov	r15, r1
     b08:	ec 0e       	add	r14, r28
     b0a:	fd 1e       	adc	r15, r29
     b0c:	ce 01       	movw	r24, r28
     b0e:	05 96       	adiw	r24, 0x05	; 5
     b10:	b7 01       	movw	r22, r14
     b12:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     b16:	99 85       	ldd	r25, Y+9	; 0x09
     b18:	92 30       	cpi	r25, 0x02	; 2
     b1a:	08 f4       	brcc	.+2      	; 0xb1e <__divsf3+0x48>
     b1c:	83 c0       	rjmp	.+262    	; 0xc24 <__divsf3+0x14e>
     b1e:	89 89       	ldd	r24, Y+17	; 0x11
     b20:	82 30       	cpi	r24, 0x02	; 2
     b22:	08 f4       	brcc	.+2      	; 0xb26 <__divsf3+0x50>
     b24:	7b c0       	rjmp	.+246    	; 0xc1c <__divsf3+0x146>
     b26:	2a 85       	ldd	r18, Y+10	; 0x0a
     b28:	3a 89       	ldd	r19, Y+18	; 0x12
     b2a:	23 27       	eor	r18, r19
     b2c:	2a 87       	std	Y+10, r18	; 0x0a
     b2e:	94 30       	cpi	r25, 0x04	; 4
     b30:	11 f0       	breq	.+4      	; 0xb36 <__divsf3+0x60>
     b32:	92 30       	cpi	r25, 0x02	; 2
     b34:	21 f4       	brne	.+8      	; 0xb3e <__divsf3+0x68>
     b36:	98 17       	cp	r25, r24
     b38:	09 f0       	breq	.+2      	; 0xb3c <__divsf3+0x66>
     b3a:	6c c0       	rjmp	.+216    	; 0xc14 <__divsf3+0x13e>
     b3c:	71 c0       	rjmp	.+226    	; 0xc20 <__divsf3+0x14a>
     b3e:	84 30       	cpi	r24, 0x04	; 4
     b40:	39 f4       	brne	.+14     	; 0xb50 <__divsf3+0x7a>
     b42:	1d 86       	std	Y+13, r1	; 0x0d
     b44:	1e 86       	std	Y+14, r1	; 0x0e
     b46:	1f 86       	std	Y+15, r1	; 0x0f
     b48:	18 8a       	std	Y+16, r1	; 0x10
     b4a:	1c 86       	std	Y+12, r1	; 0x0c
     b4c:	1b 86       	std	Y+11, r1	; 0x0b
     b4e:	6a c0       	rjmp	.+212    	; 0xc24 <__divsf3+0x14e>
     b50:	82 30       	cpi	r24, 0x02	; 2
     b52:	19 f4       	brne	.+6      	; 0xb5a <__divsf3+0x84>
     b54:	84 e0       	ldi	r24, 0x04	; 4
     b56:	89 87       	std	Y+9, r24	; 0x09
     b58:	65 c0       	rjmp	.+202    	; 0xc24 <__divsf3+0x14e>
     b5a:	8b 85       	ldd	r24, Y+11	; 0x0b
     b5c:	9c 85       	ldd	r25, Y+12	; 0x0c
     b5e:	2b 89       	ldd	r18, Y+19	; 0x13
     b60:	3c 89       	ldd	r19, Y+20	; 0x14
     b62:	82 1b       	sub	r24, r18
     b64:	93 0b       	sbc	r25, r19
     b66:	9c 87       	std	Y+12, r25	; 0x0c
     b68:	8b 87       	std	Y+11, r24	; 0x0b
     b6a:	2d 85       	ldd	r18, Y+13	; 0x0d
     b6c:	3e 85       	ldd	r19, Y+14	; 0x0e
     b6e:	4f 85       	ldd	r20, Y+15	; 0x0f
     b70:	58 89       	ldd	r21, Y+16	; 0x10
     b72:	ed 88       	ldd	r14, Y+21	; 0x15
     b74:	fe 88       	ldd	r15, Y+22	; 0x16
     b76:	0f 89       	ldd	r16, Y+23	; 0x17
     b78:	18 8d       	ldd	r17, Y+24	; 0x18
     b7a:	2e 15       	cp	r18, r14
     b7c:	3f 05       	cpc	r19, r15
     b7e:	40 07       	cpc	r20, r16
     b80:	51 07       	cpc	r21, r17
     b82:	38 f4       	brcc	.+14     	; 0xb92 <__divsf3+0xbc>
     b84:	22 0f       	add	r18, r18
     b86:	33 1f       	adc	r19, r19
     b88:	44 1f       	adc	r20, r20
     b8a:	55 1f       	adc	r21, r21
     b8c:	01 97       	sbiw	r24, 0x01	; 1
     b8e:	9c 87       	std	Y+12, r25	; 0x0c
     b90:	8b 87       	std	Y+11, r24	; 0x0b
     b92:	6f e1       	ldi	r22, 0x1F	; 31
     b94:	70 e0       	ldi	r23, 0x00	; 0
     b96:	a1 2c       	mov	r10, r1
     b98:	b1 2c       	mov	r11, r1
     b9a:	c1 2c       	mov	r12, r1
     b9c:	a0 e4       	ldi	r26, 0x40	; 64
     b9e:	da 2e       	mov	r13, r26
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	dc 01       	movw	r26, r24
     ba6:	2e 15       	cp	r18, r14
     ba8:	3f 05       	cpc	r19, r15
     baa:	40 07       	cpc	r20, r16
     bac:	51 07       	cpc	r21, r17
     bae:	40 f0       	brcs	.+16     	; 0xbc0 <__divsf3+0xea>
     bb0:	8a 29       	or	r24, r10
     bb2:	9b 29       	or	r25, r11
     bb4:	ac 29       	or	r26, r12
     bb6:	bd 29       	or	r27, r13
     bb8:	2e 19       	sub	r18, r14
     bba:	3f 09       	sbc	r19, r15
     bbc:	40 0b       	sbc	r20, r16
     bbe:	51 0b       	sbc	r21, r17
     bc0:	d6 94       	lsr	r13
     bc2:	c7 94       	ror	r12
     bc4:	b7 94       	ror	r11
     bc6:	a7 94       	ror	r10
     bc8:	22 0f       	add	r18, r18
     bca:	33 1f       	adc	r19, r19
     bcc:	44 1f       	adc	r20, r20
     bce:	55 1f       	adc	r21, r21
     bd0:	61 50       	subi	r22, 0x01	; 1
     bd2:	70 40       	sbci	r23, 0x00	; 0
     bd4:	41 f7       	brne	.-48     	; 0xba6 <__divsf3+0xd0>
     bd6:	6f e7       	ldi	r22, 0x7F	; 127
     bd8:	e6 2e       	mov	r14, r22
     bda:	f1 2c       	mov	r15, r1
     bdc:	01 2d       	mov	r16, r1
     bde:	11 2d       	mov	r17, r1
     be0:	e8 22       	and	r14, r24
     be2:	f9 22       	and	r15, r25
     be4:	0a 23       	and	r16, r26
     be6:	1b 23       	and	r17, r27
     be8:	60 e4       	ldi	r22, 0x40	; 64
     bea:	e6 16       	cp	r14, r22
     bec:	f1 04       	cpc	r15, r1
     bee:	01 05       	cpc	r16, r1
     bf0:	11 05       	cpc	r17, r1
     bf2:	61 f4       	brne	.+24     	; 0xc0c <__divsf3+0x136>
     bf4:	87 fd       	sbrc	r24, 7
     bf6:	0a c0       	rjmp	.+20     	; 0xc0c <__divsf3+0x136>
     bf8:	21 15       	cp	r18, r1
     bfa:	31 05       	cpc	r19, r1
     bfc:	41 05       	cpc	r20, r1
     bfe:	51 05       	cpc	r21, r1
     c00:	29 f0       	breq	.+10     	; 0xc0c <__divsf3+0x136>
     c02:	80 5c       	subi	r24, 0xC0	; 192
     c04:	9f 4f       	sbci	r25, 0xFF	; 255
     c06:	af 4f       	sbci	r26, 0xFF	; 255
     c08:	bf 4f       	sbci	r27, 0xFF	; 255
     c0a:	80 78       	andi	r24, 0x80	; 128
     c0c:	8d 87       	std	Y+13, r24	; 0x0d
     c0e:	9e 87       	std	Y+14, r25	; 0x0e
     c10:	af 87       	std	Y+15, r26	; 0x0f
     c12:	b8 8b       	std	Y+16, r27	; 0x10
     c14:	8e 01       	movw	r16, r28
     c16:	07 5f       	subi	r16, 0xF7	; 247
     c18:	1f 4f       	sbci	r17, 0xFF	; 255
     c1a:	04 c0       	rjmp	.+8      	; 0xc24 <__divsf3+0x14e>
     c1c:	87 01       	movw	r16, r14
     c1e:	02 c0       	rjmp	.+4      	; 0xc24 <__divsf3+0x14e>
     c20:	02 e1       	ldi	r16, 0x12	; 18
     c22:	11 e0       	ldi	r17, 0x01	; 1
     c24:	c8 01       	movw	r24, r16
     c26:	0e 94 2d 08 	call	0x105a	; 0x105a <__pack_f>
     c2a:	68 96       	adiw	r28, 0x18	; 24
     c2c:	ea e0       	ldi	r30, 0x0A	; 10
     c2e:	0c 94 07 1a 	jmp	0x340e	; 0x340e <__epilogue_restores__+0x10>

00000c32 <__gtsf2>:
     c32:	a8 e1       	ldi	r26, 0x18	; 24
     c34:	b0 e0       	ldi	r27, 0x00	; 0
     c36:	ef e1       	ldi	r30, 0x1F	; 31
     c38:	f6 e0       	ldi	r31, 0x06	; 6
     c3a:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__prologue_saves__+0x18>
     c3e:	69 83       	std	Y+1, r22	; 0x01
     c40:	7a 83       	std	Y+2, r23	; 0x02
     c42:	8b 83       	std	Y+3, r24	; 0x03
     c44:	9c 83       	std	Y+4, r25	; 0x04
     c46:	2d 83       	std	Y+5, r18	; 0x05
     c48:	3e 83       	std	Y+6, r19	; 0x06
     c4a:	4f 83       	std	Y+7, r20	; 0x07
     c4c:	58 87       	std	Y+8, r21	; 0x08
     c4e:	8e 01       	movw	r16, r28
     c50:	07 5f       	subi	r16, 0xF7	; 247
     c52:	1f 4f       	sbci	r17, 0xFF	; 255
     c54:	ce 01       	movw	r24, r28
     c56:	01 96       	adiw	r24, 0x01	; 1
     c58:	b8 01       	movw	r22, r16
     c5a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     c5e:	81 e1       	ldi	r24, 0x11	; 17
     c60:	e8 2e       	mov	r14, r24
     c62:	f1 2c       	mov	r15, r1
     c64:	ec 0e       	add	r14, r28
     c66:	fd 1e       	adc	r15, r29
     c68:	ce 01       	movw	r24, r28
     c6a:	05 96       	adiw	r24, 0x05	; 5
     c6c:	b7 01       	movw	r22, r14
     c6e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     c72:	89 85       	ldd	r24, Y+9	; 0x09
     c74:	82 30       	cpi	r24, 0x02	; 2
     c76:	40 f0       	brcs	.+16     	; 0xc88 <__gtsf2+0x56>
     c78:	89 89       	ldd	r24, Y+17	; 0x11
     c7a:	82 30       	cpi	r24, 0x02	; 2
     c7c:	28 f0       	brcs	.+10     	; 0xc88 <__gtsf2+0x56>
     c7e:	c8 01       	movw	r24, r16
     c80:	b7 01       	movw	r22, r14
     c82:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__fpcmp_parts_f>
     c86:	01 c0       	rjmp	.+2      	; 0xc8a <__gtsf2+0x58>
     c88:	8f ef       	ldi	r24, 0xFF	; 255
     c8a:	68 96       	adiw	r28, 0x18	; 24
     c8c:	e6 e0       	ldi	r30, 0x06	; 6
     c8e:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__epilogue_restores__+0x18>

00000c92 <__gesf2>:
     c92:	a8 e1       	ldi	r26, 0x18	; 24
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	ef e4       	ldi	r30, 0x4F	; 79
     c98:	f6 e0       	ldi	r31, 0x06	; 6
     c9a:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__prologue_saves__+0x18>
     c9e:	69 83       	std	Y+1, r22	; 0x01
     ca0:	7a 83       	std	Y+2, r23	; 0x02
     ca2:	8b 83       	std	Y+3, r24	; 0x03
     ca4:	9c 83       	std	Y+4, r25	; 0x04
     ca6:	2d 83       	std	Y+5, r18	; 0x05
     ca8:	3e 83       	std	Y+6, r19	; 0x06
     caa:	4f 83       	std	Y+7, r20	; 0x07
     cac:	58 87       	std	Y+8, r21	; 0x08
     cae:	8e 01       	movw	r16, r28
     cb0:	07 5f       	subi	r16, 0xF7	; 247
     cb2:	1f 4f       	sbci	r17, 0xFF	; 255
     cb4:	ce 01       	movw	r24, r28
     cb6:	01 96       	adiw	r24, 0x01	; 1
     cb8:	b8 01       	movw	r22, r16
     cba:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     cbe:	81 e1       	ldi	r24, 0x11	; 17
     cc0:	e8 2e       	mov	r14, r24
     cc2:	f1 2c       	mov	r15, r1
     cc4:	ec 0e       	add	r14, r28
     cc6:	fd 1e       	adc	r15, r29
     cc8:	ce 01       	movw	r24, r28
     cca:	05 96       	adiw	r24, 0x05	; 5
     ccc:	b7 01       	movw	r22, r14
     cce:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     cd2:	89 85       	ldd	r24, Y+9	; 0x09
     cd4:	82 30       	cpi	r24, 0x02	; 2
     cd6:	40 f0       	brcs	.+16     	; 0xce8 <__gesf2+0x56>
     cd8:	89 89       	ldd	r24, Y+17	; 0x11
     cda:	82 30       	cpi	r24, 0x02	; 2
     cdc:	28 f0       	brcs	.+10     	; 0xce8 <__gesf2+0x56>
     cde:	c8 01       	movw	r24, r16
     ce0:	b7 01       	movw	r22, r14
     ce2:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__fpcmp_parts_f>
     ce6:	01 c0       	rjmp	.+2      	; 0xcea <__gesf2+0x58>
     ce8:	8f ef       	ldi	r24, 0xFF	; 255
     cea:	68 96       	adiw	r28, 0x18	; 24
     cec:	e6 e0       	ldi	r30, 0x06	; 6
     cee:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__epilogue_restores__+0x18>

00000cf2 <__ltsf2>:
     cf2:	a8 e1       	ldi	r26, 0x18	; 24
     cf4:	b0 e0       	ldi	r27, 0x00	; 0
     cf6:	ef e7       	ldi	r30, 0x7F	; 127
     cf8:	f6 e0       	ldi	r31, 0x06	; 6
     cfa:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__prologue_saves__+0x18>
     cfe:	69 83       	std	Y+1, r22	; 0x01
     d00:	7a 83       	std	Y+2, r23	; 0x02
     d02:	8b 83       	std	Y+3, r24	; 0x03
     d04:	9c 83       	std	Y+4, r25	; 0x04
     d06:	2d 83       	std	Y+5, r18	; 0x05
     d08:	3e 83       	std	Y+6, r19	; 0x06
     d0a:	4f 83       	std	Y+7, r20	; 0x07
     d0c:	58 87       	std	Y+8, r21	; 0x08
     d0e:	8e 01       	movw	r16, r28
     d10:	07 5f       	subi	r16, 0xF7	; 247
     d12:	1f 4f       	sbci	r17, 0xFF	; 255
     d14:	ce 01       	movw	r24, r28
     d16:	01 96       	adiw	r24, 0x01	; 1
     d18:	b8 01       	movw	r22, r16
     d1a:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     d1e:	81 e1       	ldi	r24, 0x11	; 17
     d20:	e8 2e       	mov	r14, r24
     d22:	f1 2c       	mov	r15, r1
     d24:	ec 0e       	add	r14, r28
     d26:	fd 1e       	adc	r15, r29
     d28:	ce 01       	movw	r24, r28
     d2a:	05 96       	adiw	r24, 0x05	; 5
     d2c:	b7 01       	movw	r22, r14
     d2e:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     d32:	89 85       	ldd	r24, Y+9	; 0x09
     d34:	82 30       	cpi	r24, 0x02	; 2
     d36:	40 f0       	brcs	.+16     	; 0xd48 <__ltsf2+0x56>
     d38:	89 89       	ldd	r24, Y+17	; 0x11
     d3a:	82 30       	cpi	r24, 0x02	; 2
     d3c:	28 f0       	brcs	.+10     	; 0xd48 <__ltsf2+0x56>
     d3e:	c8 01       	movw	r24, r16
     d40:	b7 01       	movw	r22, r14
     d42:	0e 94 64 09 	call	0x12c8	; 0x12c8 <__fpcmp_parts_f>
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <__ltsf2+0x58>
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	68 96       	adiw	r28, 0x18	; 24
     d4c:	e6 e0       	ldi	r30, 0x06	; 6
     d4e:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__epilogue_restores__+0x18>

00000d52 <__floatsisf>:
     d52:	a8 e0       	ldi	r26, 0x08	; 8
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	ef ea       	ldi	r30, 0xAF	; 175
     d58:	f6 e0       	ldi	r31, 0x06	; 6
     d5a:	0c 94 ef 19 	jmp	0x33de	; 0x33de <__prologue_saves__+0x18>
     d5e:	7b 01       	movw	r14, r22
     d60:	8c 01       	movw	r16, r24
     d62:	83 e0       	ldi	r24, 0x03	; 3
     d64:	89 83       	std	Y+1, r24	; 0x01
     d66:	d8 01       	movw	r26, r16
     d68:	c7 01       	movw	r24, r14
     d6a:	88 27       	eor	r24, r24
     d6c:	b7 fd       	sbrc	r27, 7
     d6e:	83 95       	inc	r24
     d70:	99 27       	eor	r25, r25
     d72:	aa 27       	eor	r26, r26
     d74:	bb 27       	eor	r27, r27
     d76:	28 2f       	mov	r18, r24
     d78:	8a 83       	std	Y+2, r24	; 0x02
     d7a:	e1 14       	cp	r14, r1
     d7c:	f1 04       	cpc	r15, r1
     d7e:	01 05       	cpc	r16, r1
     d80:	11 05       	cpc	r17, r1
     d82:	19 f4       	brne	.+6      	; 0xd8a <__floatsisf+0x38>
     d84:	82 e0       	ldi	r24, 0x02	; 2
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	37 c0       	rjmp	.+110    	; 0xdf8 <__floatsisf+0xa6>
     d8a:	8e e1       	ldi	r24, 0x1E	; 30
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	9c 83       	std	Y+4, r25	; 0x04
     d90:	8b 83       	std	Y+3, r24	; 0x03
     d92:	22 23       	and	r18, r18
     d94:	89 f0       	breq	.+34     	; 0xdb8 <__floatsisf+0x66>
     d96:	80 e0       	ldi	r24, 0x00	; 0
     d98:	e8 16       	cp	r14, r24
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	f8 06       	cpc	r15, r24
     d9e:	80 e0       	ldi	r24, 0x00	; 0
     da0:	08 07       	cpc	r16, r24
     da2:	80 e8       	ldi	r24, 0x80	; 128
     da4:	18 07       	cpc	r17, r24
     da6:	69 f1       	breq	.+90     	; 0xe02 <__floatsisf+0xb0>
     da8:	10 95       	com	r17
     daa:	00 95       	com	r16
     dac:	f0 94       	com	r15
     dae:	e0 94       	com	r14
     db0:	e1 1c       	adc	r14, r1
     db2:	f1 1c       	adc	r15, r1
     db4:	01 1d       	adc	r16, r1
     db6:	11 1d       	adc	r17, r1
     db8:	ed 82       	std	Y+5, r14	; 0x05
     dba:	fe 82       	std	Y+6, r15	; 0x06
     dbc:	0f 83       	std	Y+7, r16	; 0x07
     dbe:	18 87       	std	Y+8, r17	; 0x08
     dc0:	c8 01       	movw	r24, r16
     dc2:	b7 01       	movw	r22, r14
     dc4:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__clzsi2>
     dc8:	9c 01       	movw	r18, r24
     dca:	21 50       	subi	r18, 0x01	; 1
     dcc:	30 40       	sbci	r19, 0x00	; 0
     dce:	12 16       	cp	r1, r18
     dd0:	13 06       	cpc	r1, r19
     dd2:	94 f4       	brge	.+36     	; 0xdf8 <__floatsisf+0xa6>
     dd4:	02 2e       	mov	r0, r18
     dd6:	04 c0       	rjmp	.+8      	; 0xde0 <__floatsisf+0x8e>
     dd8:	ee 0c       	add	r14, r14
     dda:	ff 1c       	adc	r15, r15
     ddc:	00 1f       	adc	r16, r16
     dde:	11 1f       	adc	r17, r17
     de0:	0a 94       	dec	r0
     de2:	d2 f7       	brpl	.-12     	; 0xdd8 <__floatsisf+0x86>
     de4:	ed 82       	std	Y+5, r14	; 0x05
     de6:	fe 82       	std	Y+6, r15	; 0x06
     de8:	0f 83       	std	Y+7, r16	; 0x07
     dea:	18 87       	std	Y+8, r17	; 0x08
     dec:	8e e1       	ldi	r24, 0x1E	; 30
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	82 1b       	sub	r24, r18
     df2:	93 0b       	sbc	r25, r19
     df4:	9c 83       	std	Y+4, r25	; 0x04
     df6:	8b 83       	std	Y+3, r24	; 0x03
     df8:	ce 01       	movw	r24, r28
     dfa:	01 96       	adiw	r24, 0x01	; 1
     dfc:	0e 94 2d 08 	call	0x105a	; 0x105a <__pack_f>
     e00:	04 c0       	rjmp	.+8      	; 0xe0a <__floatsisf+0xb8>
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	9f ec       	ldi	r25, 0xCF	; 207
     e0a:	28 96       	adiw	r28, 0x08	; 8
     e0c:	e6 e0       	ldi	r30, 0x06	; 6
     e0e:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__epilogue_restores__+0x18>

00000e12 <__fixsfsi>:
     e12:	ac e0       	ldi	r26, 0x0C	; 12
     e14:	b0 e0       	ldi	r27, 0x00	; 0
     e16:	ef e0       	ldi	r30, 0x0F	; 15
     e18:	f7 e0       	ldi	r31, 0x07	; 7
     e1a:	0c 94 f3 19 	jmp	0x33e6	; 0x33e6 <__prologue_saves__+0x20>
     e1e:	69 83       	std	Y+1, r22	; 0x01
     e20:	7a 83       	std	Y+2, r23	; 0x02
     e22:	8b 83       	std	Y+3, r24	; 0x03
     e24:	9c 83       	std	Y+4, r25	; 0x04
     e26:	ce 01       	movw	r24, r28
     e28:	01 96       	adiw	r24, 0x01	; 1
     e2a:	be 01       	movw	r22, r28
     e2c:	6b 5f       	subi	r22, 0xFB	; 251
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <__unpack_f>
     e34:	8d 81       	ldd	r24, Y+5	; 0x05
     e36:	82 30       	cpi	r24, 0x02	; 2
     e38:	81 f1       	breq	.+96     	; 0xe9a <__fixsfsi+0x88>
     e3a:	82 30       	cpi	r24, 0x02	; 2
     e3c:	70 f1       	brcs	.+92     	; 0xe9a <__fixsfsi+0x88>
     e3e:	84 30       	cpi	r24, 0x04	; 4
     e40:	21 f4       	brne	.+8      	; 0xe4a <__fixsfsi+0x38>
     e42:	8e 81       	ldd	r24, Y+6	; 0x06
     e44:	88 23       	and	r24, r24
     e46:	69 f1       	breq	.+90     	; 0xea2 <__fixsfsi+0x90>
     e48:	0a c0       	rjmp	.+20     	; 0xe5e <__fixsfsi+0x4c>
     e4a:	2f 81       	ldd	r18, Y+7	; 0x07
     e4c:	38 85       	ldd	r19, Y+8	; 0x08
     e4e:	37 fd       	sbrc	r19, 7
     e50:	24 c0       	rjmp	.+72     	; 0xe9a <__fixsfsi+0x88>
     e52:	6e 81       	ldd	r22, Y+6	; 0x06
     e54:	2f 31       	cpi	r18, 0x1F	; 31
     e56:	31 05       	cpc	r19, r1
     e58:	3c f0       	brlt	.+14     	; 0xe68 <__fixsfsi+0x56>
     e5a:	66 23       	and	r22, r22
     e5c:	11 f1       	breq	.+68     	; 0xea2 <__fixsfsi+0x90>
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e0       	ldi	r20, 0x00	; 0
     e64:	50 e8       	ldi	r21, 0x80	; 128
     e66:	21 c0       	rjmp	.+66     	; 0xeaa <__fixsfsi+0x98>
     e68:	8e e1       	ldi	r24, 0x1E	; 30
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	82 1b       	sub	r24, r18
     e6e:	93 0b       	sbc	r25, r19
     e70:	29 85       	ldd	r18, Y+9	; 0x09
     e72:	3a 85       	ldd	r19, Y+10	; 0x0a
     e74:	4b 85       	ldd	r20, Y+11	; 0x0b
     e76:	5c 85       	ldd	r21, Y+12	; 0x0c
     e78:	04 c0       	rjmp	.+8      	; 0xe82 <__fixsfsi+0x70>
     e7a:	56 95       	lsr	r21
     e7c:	47 95       	ror	r20
     e7e:	37 95       	ror	r19
     e80:	27 95       	ror	r18
     e82:	8a 95       	dec	r24
     e84:	d2 f7       	brpl	.-12     	; 0xe7a <__fixsfsi+0x68>
     e86:	66 23       	and	r22, r22
     e88:	81 f0       	breq	.+32     	; 0xeaa <__fixsfsi+0x98>
     e8a:	50 95       	com	r21
     e8c:	40 95       	com	r20
     e8e:	30 95       	com	r19
     e90:	21 95       	neg	r18
     e92:	3f 4f       	sbci	r19, 0xFF	; 255
     e94:	4f 4f       	sbci	r20, 0xFF	; 255
     e96:	5f 4f       	sbci	r21, 0xFF	; 255
     e98:	08 c0       	rjmp	.+16     	; 0xeaa <__fixsfsi+0x98>
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	30 e0       	ldi	r19, 0x00	; 0
     e9e:	a9 01       	movw	r20, r18
     ea0:	04 c0       	rjmp	.+8      	; 0xeaa <__fixsfsi+0x98>
     ea2:	2f ef       	ldi	r18, 0xFF	; 255
     ea4:	3f ef       	ldi	r19, 0xFF	; 255
     ea6:	4f ef       	ldi	r20, 0xFF	; 255
     ea8:	5f e7       	ldi	r21, 0x7F	; 127
     eaa:	b9 01       	movw	r22, r18
     eac:	ca 01       	movw	r24, r20
     eae:	2c 96       	adiw	r28, 0x0c	; 12
     eb0:	e2 e0       	ldi	r30, 0x02	; 2
     eb2:	0c 94 0f 1a 	jmp	0x341e	; 0x341e <__epilogue_restores__+0x20>

00000eb6 <__floatunsisf>:
     eb6:	a8 e0       	ldi	r26, 0x08	; 8
     eb8:	b0 e0       	ldi	r27, 0x00	; 0
     eba:	e1 e6       	ldi	r30, 0x61	; 97
     ebc:	f7 e0       	ldi	r31, 0x07	; 7
     ebe:	0c 94 ed 19 	jmp	0x33da	; 0x33da <__prologue_saves__+0x14>
     ec2:	7b 01       	movw	r14, r22
     ec4:	8c 01       	movw	r16, r24
     ec6:	1a 82       	std	Y+2, r1	; 0x02
     ec8:	61 15       	cp	r22, r1
     eca:	71 05       	cpc	r23, r1
     ecc:	81 05       	cpc	r24, r1
     ece:	91 05       	cpc	r25, r1
     ed0:	19 f4       	brne	.+6      	; 0xed8 <__floatunsisf+0x22>
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	5f c0       	rjmp	.+190    	; 0xf96 <__floatunsisf+0xe0>
     ed8:	83 e0       	ldi	r24, 0x03	; 3
     eda:	89 83       	std	Y+1, r24	; 0x01
     edc:	8e e1       	ldi	r24, 0x1E	; 30
     ede:	c8 2e       	mov	r12, r24
     ee0:	d1 2c       	mov	r13, r1
     ee2:	dc 82       	std	Y+4, r13	; 0x04
     ee4:	cb 82       	std	Y+3, r12	; 0x03
     ee6:	ed 82       	std	Y+5, r14	; 0x05
     ee8:	fe 82       	std	Y+6, r15	; 0x06
     eea:	0f 83       	std	Y+7, r16	; 0x07
     eec:	18 87       	std	Y+8, r17	; 0x08
     eee:	c8 01       	movw	r24, r16
     ef0:	b7 01       	movw	r22, r14
     ef2:	0e 94 d3 07 	call	0xfa6	; 0xfa6 <__clzsi2>
     ef6:	fc 01       	movw	r30, r24
     ef8:	31 97       	sbiw	r30, 0x01	; 1
     efa:	f7 ff       	sbrs	r31, 7
     efc:	3a c0       	rjmp	.+116    	; 0xf72 <__floatunsisf+0xbc>
     efe:	aa 27       	eor	r26, r26
     f00:	bb 27       	eor	r27, r27
     f02:	ae 1b       	sub	r26, r30
     f04:	bf 0b       	sbc	r27, r31
     f06:	21 e0       	ldi	r18, 0x01	; 1
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e0       	ldi	r20, 0x00	; 0
     f0c:	50 e0       	ldi	r21, 0x00	; 0
     f0e:	0a 2e       	mov	r0, r26
     f10:	04 c0       	rjmp	.+8      	; 0xf1a <__floatunsisf+0x64>
     f12:	22 0f       	add	r18, r18
     f14:	33 1f       	adc	r19, r19
     f16:	44 1f       	adc	r20, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	0a 94       	dec	r0
     f1c:	d2 f7       	brpl	.-12     	; 0xf12 <__floatunsisf+0x5c>
     f1e:	21 50       	subi	r18, 0x01	; 1
     f20:	30 40       	sbci	r19, 0x00	; 0
     f22:	40 40       	sbci	r20, 0x00	; 0
     f24:	50 40       	sbci	r21, 0x00	; 0
     f26:	2e 21       	and	r18, r14
     f28:	3f 21       	and	r19, r15
     f2a:	40 23       	and	r20, r16
     f2c:	51 23       	and	r21, r17
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	80 e0       	ldi	r24, 0x00	; 0
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	21 15       	cp	r18, r1
     f38:	31 05       	cpc	r19, r1
     f3a:	41 05       	cpc	r20, r1
     f3c:	51 05       	cpc	r21, r1
     f3e:	19 f4       	brne	.+6      	; 0xf46 <__floatunsisf+0x90>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	04 c0       	rjmp	.+8      	; 0xf50 <__floatunsisf+0x9a>
     f48:	16 95       	lsr	r17
     f4a:	07 95       	ror	r16
     f4c:	f7 94       	ror	r15
     f4e:	e7 94       	ror	r14
     f50:	aa 95       	dec	r26
     f52:	d2 f7       	brpl	.-12     	; 0xf48 <__floatunsisf+0x92>
     f54:	e6 2a       	or	r14, r22
     f56:	f7 2a       	or	r15, r23
     f58:	08 2b       	or	r16, r24
     f5a:	19 2b       	or	r17, r25
     f5c:	ed 82       	std	Y+5, r14	; 0x05
     f5e:	fe 82       	std	Y+6, r15	; 0x06
     f60:	0f 83       	std	Y+7, r16	; 0x07
     f62:	18 87       	std	Y+8, r17	; 0x08
     f64:	8e e1       	ldi	r24, 0x1E	; 30
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	8e 1b       	sub	r24, r30
     f6a:	9f 0b       	sbc	r25, r31
     f6c:	9c 83       	std	Y+4, r25	; 0x04
     f6e:	8b 83       	std	Y+3, r24	; 0x03
     f70:	12 c0       	rjmp	.+36     	; 0xf96 <__floatunsisf+0xe0>
     f72:	30 97       	sbiw	r30, 0x00	; 0
     f74:	81 f0       	breq	.+32     	; 0xf96 <__floatunsisf+0xe0>
     f76:	0e 2e       	mov	r0, r30
     f78:	04 c0       	rjmp	.+8      	; 0xf82 <__floatunsisf+0xcc>
     f7a:	ee 0c       	add	r14, r14
     f7c:	ff 1c       	adc	r15, r15
     f7e:	00 1f       	adc	r16, r16
     f80:	11 1f       	adc	r17, r17
     f82:	0a 94       	dec	r0
     f84:	d2 f7       	brpl	.-12     	; 0xf7a <__floatunsisf+0xc4>
     f86:	ed 82       	std	Y+5, r14	; 0x05
     f88:	fe 82       	std	Y+6, r15	; 0x06
     f8a:	0f 83       	std	Y+7, r16	; 0x07
     f8c:	18 87       	std	Y+8, r17	; 0x08
     f8e:	ce 1a       	sub	r12, r30
     f90:	df 0a       	sbc	r13, r31
     f92:	dc 82       	std	Y+4, r13	; 0x04
     f94:	cb 82       	std	Y+3, r12	; 0x03
     f96:	ce 01       	movw	r24, r28
     f98:	01 96       	adiw	r24, 0x01	; 1
     f9a:	0e 94 2d 08 	call	0x105a	; 0x105a <__pack_f>
     f9e:	28 96       	adiw	r28, 0x08	; 8
     fa0:	e8 e0       	ldi	r30, 0x08	; 8
     fa2:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__epilogue_restores__+0x14>

00000fa6 <__clzsi2>:
     fa6:	af 92       	push	r10
     fa8:	bf 92       	push	r11
     faa:	cf 92       	push	r12
     fac:	df 92       	push	r13
     fae:	ef 92       	push	r14
     fb0:	ff 92       	push	r15
     fb2:	0f 93       	push	r16
     fb4:	1f 93       	push	r17
     fb6:	7b 01       	movw	r14, r22
     fb8:	8c 01       	movw	r16, r24
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	e8 16       	cp	r14, r24
     fbe:	80 e0       	ldi	r24, 0x00	; 0
     fc0:	f8 06       	cpc	r15, r24
     fc2:	81 e0       	ldi	r24, 0x01	; 1
     fc4:	08 07       	cpc	r16, r24
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	18 07       	cpc	r17, r24
     fca:	58 f4       	brcc	.+22     	; 0xfe2 <__clzsi2+0x3c>
     fcc:	ef ef       	ldi	r30, 0xFF	; 255
     fce:	ee 16       	cp	r14, r30
     fd0:	f1 04       	cpc	r15, r1
     fd2:	01 05       	cpc	r16, r1
     fd4:	11 05       	cpc	r17, r1
     fd6:	09 f0       	breq	.+2      	; 0xfda <__clzsi2+0x34>
     fd8:	90 f4       	brcc	.+36     	; 0xffe <__clzsi2+0x58>
     fda:	80 e0       	ldi	r24, 0x00	; 0
     fdc:	90 e0       	ldi	r25, 0x00	; 0
     fde:	dc 01       	movw	r26, r24
     fe0:	17 c0       	rjmp	.+46     	; 0x1010 <__clzsi2+0x6a>
     fe2:	f0 e0       	ldi	r31, 0x00	; 0
     fe4:	ef 16       	cp	r14, r31
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	ff 06       	cpc	r15, r31
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	0f 07       	cpc	r16, r31
     fee:	f1 e0       	ldi	r31, 0x01	; 1
     ff0:	1f 07       	cpc	r17, r31
     ff2:	50 f4       	brcc	.+20     	; 0x1008 <__clzsi2+0x62>
     ff4:	80 e1       	ldi	r24, 0x10	; 16
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	a0 e0       	ldi	r26, 0x00	; 0
     ffa:	b0 e0       	ldi	r27, 0x00	; 0
     ffc:	09 c0       	rjmp	.+18     	; 0x1010 <__clzsi2+0x6a>
     ffe:	88 e0       	ldi	r24, 0x08	; 8
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	a0 e0       	ldi	r26, 0x00	; 0
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	04 c0       	rjmp	.+8      	; 0x1010 <__clzsi2+0x6a>
    1008:	88 e1       	ldi	r24, 0x18	; 24
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	a0 e0       	ldi	r26, 0x00	; 0
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	20 e2       	ldi	r18, 0x20	; 32
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e0       	ldi	r20, 0x00	; 0
    1016:	50 e0       	ldi	r21, 0x00	; 0
    1018:	28 1b       	sub	r18, r24
    101a:	39 0b       	sbc	r19, r25
    101c:	4a 0b       	sbc	r20, r26
    101e:	5b 0b       	sbc	r21, r27
    1020:	57 01       	movw	r10, r14
    1022:	68 01       	movw	r12, r16
    1024:	04 c0       	rjmp	.+8      	; 0x102e <__clzsi2+0x88>
    1026:	d6 94       	lsr	r13
    1028:	c7 94       	ror	r12
    102a:	b7 94       	ror	r11
    102c:	a7 94       	ror	r10
    102e:	8a 95       	dec	r24
    1030:	d2 f7       	brpl	.-12     	; 0x1026 <__clzsi2+0x80>
    1032:	d6 01       	movw	r26, r12
    1034:	c5 01       	movw	r24, r10
    1036:	86 5e       	subi	r24, 0xE6	; 230
    1038:	9e 4f       	sbci	r25, 0xFE	; 254
    103a:	fc 01       	movw	r30, r24
    103c:	80 81       	ld	r24, Z
    103e:	28 1b       	sub	r18, r24
    1040:	31 09       	sbc	r19, r1
    1042:	41 09       	sbc	r20, r1
    1044:	51 09       	sbc	r21, r1
    1046:	c9 01       	movw	r24, r18
    1048:	1f 91       	pop	r17
    104a:	0f 91       	pop	r16
    104c:	ff 90       	pop	r15
    104e:	ef 90       	pop	r14
    1050:	df 90       	pop	r13
    1052:	cf 90       	pop	r12
    1054:	bf 90       	pop	r11
    1056:	af 90       	pop	r10
    1058:	08 95       	ret

0000105a <__pack_f>:
    105a:	ef 92       	push	r14
    105c:	ff 92       	push	r15
    105e:	0f 93       	push	r16
    1060:	1f 93       	push	r17
    1062:	cf 93       	push	r28
    1064:	df 93       	push	r29
    1066:	fc 01       	movw	r30, r24
    1068:	24 81       	ldd	r18, Z+4	; 0x04
    106a:	35 81       	ldd	r19, Z+5	; 0x05
    106c:	46 81       	ldd	r20, Z+6	; 0x06
    106e:	57 81       	ldd	r21, Z+7	; 0x07
    1070:	61 81       	ldd	r22, Z+1	; 0x01
    1072:	80 81       	ld	r24, Z
    1074:	82 30       	cpi	r24, 0x02	; 2
    1076:	20 f4       	brcc	.+8      	; 0x1080 <__pack_f+0x26>
    1078:	40 61       	ori	r20, 0x10	; 16
    107a:	ef ef       	ldi	r30, 0xFF	; 255
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	a3 c0       	rjmp	.+326    	; 0x11c6 <__pack_f+0x16c>
    1080:	84 30       	cpi	r24, 0x04	; 4
    1082:	09 f4       	brne	.+2      	; 0x1086 <__pack_f+0x2c>
    1084:	9b c0       	rjmp	.+310    	; 0x11bc <__pack_f+0x162>
    1086:	82 30       	cpi	r24, 0x02	; 2
    1088:	09 f4       	brne	.+2      	; 0x108c <__pack_f+0x32>
    108a:	92 c0       	rjmp	.+292    	; 0x11b0 <__pack_f+0x156>
    108c:	21 15       	cp	r18, r1
    108e:	31 05       	cpc	r19, r1
    1090:	41 05       	cpc	r20, r1
    1092:	51 05       	cpc	r21, r1
    1094:	09 f4       	brne	.+2      	; 0x1098 <__pack_f+0x3e>
    1096:	8f c0       	rjmp	.+286    	; 0x11b6 <__pack_f+0x15c>
    1098:	02 80       	ldd	r0, Z+2	; 0x02
    109a:	f3 81       	ldd	r31, Z+3	; 0x03
    109c:	e0 2d       	mov	r30, r0
    109e:	8f ef       	ldi	r24, 0xFF	; 255
    10a0:	e2 38       	cpi	r30, 0x82	; 130
    10a2:	f8 07       	cpc	r31, r24
    10a4:	0c f0       	brlt	.+2      	; 0x10a8 <__pack_f+0x4e>
    10a6:	5a c0       	rjmp	.+180    	; 0x115c <__pack_f+0x102>
    10a8:	c2 e8       	ldi	r28, 0x82	; 130
    10aa:	df ef       	ldi	r29, 0xFF	; 255
    10ac:	ce 1b       	sub	r28, r30
    10ae:	df 0b       	sbc	r29, r31
    10b0:	ca 31       	cpi	r28, 0x1A	; 26
    10b2:	d1 05       	cpc	r29, r1
    10b4:	6c f5       	brge	.+90     	; 0x1110 <__pack_f+0xb6>
    10b6:	79 01       	movw	r14, r18
    10b8:	8a 01       	movw	r16, r20
    10ba:	0c 2e       	mov	r0, r28
    10bc:	04 c0       	rjmp	.+8      	; 0x10c6 <__pack_f+0x6c>
    10be:	16 95       	lsr	r17
    10c0:	07 95       	ror	r16
    10c2:	f7 94       	ror	r15
    10c4:	e7 94       	ror	r14
    10c6:	0a 94       	dec	r0
    10c8:	d2 f7       	brpl	.-12     	; 0x10be <__pack_f+0x64>
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	a0 e0       	ldi	r26, 0x00	; 0
    10d0:	b0 e0       	ldi	r27, 0x00	; 0
    10d2:	0c 2e       	mov	r0, r28
    10d4:	04 c0       	rjmp	.+8      	; 0x10de <__pack_f+0x84>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	aa 1f       	adc	r26, r26
    10dc:	bb 1f       	adc	r27, r27
    10de:	0a 94       	dec	r0
    10e0:	d2 f7       	brpl	.-12     	; 0x10d6 <__pack_f+0x7c>
    10e2:	01 97       	sbiw	r24, 0x01	; 1
    10e4:	a1 09       	sbc	r26, r1
    10e6:	b1 09       	sbc	r27, r1
    10e8:	82 23       	and	r24, r18
    10ea:	93 23       	and	r25, r19
    10ec:	a4 23       	and	r26, r20
    10ee:	b5 23       	and	r27, r21
    10f0:	21 e0       	ldi	r18, 0x01	; 1
    10f2:	30 e0       	ldi	r19, 0x00	; 0
    10f4:	40 e0       	ldi	r20, 0x00	; 0
    10f6:	50 e0       	ldi	r21, 0x00	; 0
    10f8:	00 97       	sbiw	r24, 0x00	; 0
    10fa:	a1 05       	cpc	r26, r1
    10fc:	b1 05       	cpc	r27, r1
    10fe:	19 f4       	brne	.+6      	; 0x1106 <__pack_f+0xac>
    1100:	20 e0       	ldi	r18, 0x00	; 0
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	a9 01       	movw	r20, r18
    1106:	2e 29       	or	r18, r14
    1108:	3f 29       	or	r19, r15
    110a:	40 2b       	or	r20, r16
    110c:	51 2b       	or	r21, r17
    110e:	03 c0       	rjmp	.+6      	; 0x1116 <__pack_f+0xbc>
    1110:	20 e0       	ldi	r18, 0x00	; 0
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	a9 01       	movw	r20, r18
    1116:	da 01       	movw	r26, r20
    1118:	c9 01       	movw	r24, r18
    111a:	8f 77       	andi	r24, 0x7F	; 127
    111c:	90 70       	andi	r25, 0x00	; 0
    111e:	a0 70       	andi	r26, 0x00	; 0
    1120:	b0 70       	andi	r27, 0x00	; 0
    1122:	80 34       	cpi	r24, 0x40	; 64
    1124:	91 05       	cpc	r25, r1
    1126:	a1 05       	cpc	r26, r1
    1128:	b1 05       	cpc	r27, r1
    112a:	39 f4       	brne	.+14     	; 0x113a <__pack_f+0xe0>
    112c:	27 ff       	sbrs	r18, 7
    112e:	09 c0       	rjmp	.+18     	; 0x1142 <__pack_f+0xe8>
    1130:	20 5c       	subi	r18, 0xC0	; 192
    1132:	3f 4f       	sbci	r19, 0xFF	; 255
    1134:	4f 4f       	sbci	r20, 0xFF	; 255
    1136:	5f 4f       	sbci	r21, 0xFF	; 255
    1138:	04 c0       	rjmp	.+8      	; 0x1142 <__pack_f+0xe8>
    113a:	21 5c       	subi	r18, 0xC1	; 193
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	4f 4f       	sbci	r20, 0xFF	; 255
    1140:	5f 4f       	sbci	r21, 0xFF	; 255
    1142:	e1 e0       	ldi	r30, 0x01	; 1
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	20 30       	cpi	r18, 0x00	; 0
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	38 07       	cpc	r19, r24
    114c:	80 e0       	ldi	r24, 0x00	; 0
    114e:	48 07       	cpc	r20, r24
    1150:	80 e4       	ldi	r24, 0x40	; 64
    1152:	58 07       	cpc	r21, r24
    1154:	28 f5       	brcc	.+74     	; 0x11a0 <__pack_f+0x146>
    1156:	e0 e0       	ldi	r30, 0x00	; 0
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	22 c0       	rjmp	.+68     	; 0x11a0 <__pack_f+0x146>
    115c:	e0 38       	cpi	r30, 0x80	; 128
    115e:	f1 05       	cpc	r31, r1
    1160:	6c f5       	brge	.+90     	; 0x11bc <__pack_f+0x162>
    1162:	e1 58       	subi	r30, 0x81	; 129
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	da 01       	movw	r26, r20
    1168:	c9 01       	movw	r24, r18
    116a:	8f 77       	andi	r24, 0x7F	; 127
    116c:	90 70       	andi	r25, 0x00	; 0
    116e:	a0 70       	andi	r26, 0x00	; 0
    1170:	b0 70       	andi	r27, 0x00	; 0
    1172:	80 34       	cpi	r24, 0x40	; 64
    1174:	91 05       	cpc	r25, r1
    1176:	a1 05       	cpc	r26, r1
    1178:	b1 05       	cpc	r27, r1
    117a:	39 f4       	brne	.+14     	; 0x118a <__pack_f+0x130>
    117c:	27 ff       	sbrs	r18, 7
    117e:	09 c0       	rjmp	.+18     	; 0x1192 <__pack_f+0x138>
    1180:	20 5c       	subi	r18, 0xC0	; 192
    1182:	3f 4f       	sbci	r19, 0xFF	; 255
    1184:	4f 4f       	sbci	r20, 0xFF	; 255
    1186:	5f 4f       	sbci	r21, 0xFF	; 255
    1188:	04 c0       	rjmp	.+8      	; 0x1192 <__pack_f+0x138>
    118a:	21 5c       	subi	r18, 0xC1	; 193
    118c:	3f 4f       	sbci	r19, 0xFF	; 255
    118e:	4f 4f       	sbci	r20, 0xFF	; 255
    1190:	5f 4f       	sbci	r21, 0xFF	; 255
    1192:	57 ff       	sbrs	r21, 7
    1194:	05 c0       	rjmp	.+10     	; 0x11a0 <__pack_f+0x146>
    1196:	56 95       	lsr	r21
    1198:	47 95       	ror	r20
    119a:	37 95       	ror	r19
    119c:	27 95       	ror	r18
    119e:	31 96       	adiw	r30, 0x01	; 1
    11a0:	87 e0       	ldi	r24, 0x07	; 7
    11a2:	56 95       	lsr	r21
    11a4:	47 95       	ror	r20
    11a6:	37 95       	ror	r19
    11a8:	27 95       	ror	r18
    11aa:	8a 95       	dec	r24
    11ac:	d1 f7       	brne	.-12     	; 0x11a2 <__pack_f+0x148>
    11ae:	0b c0       	rjmp	.+22     	; 0x11c6 <__pack_f+0x16c>
    11b0:	e0 e0       	ldi	r30, 0x00	; 0
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	05 c0       	rjmp	.+10     	; 0x11c0 <__pack_f+0x166>
    11b6:	e0 e0       	ldi	r30, 0x00	; 0
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	05 c0       	rjmp	.+10     	; 0x11c6 <__pack_f+0x16c>
    11bc:	ef ef       	ldi	r30, 0xFF	; 255
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	20 e0       	ldi	r18, 0x00	; 0
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	a9 01       	movw	r20, r18
    11c6:	8e 2f       	mov	r24, r30
    11c8:	87 95       	ror	r24
    11ca:	88 27       	eor	r24, r24
    11cc:	87 95       	ror	r24
    11ce:	94 2f       	mov	r25, r20
    11d0:	9f 77       	andi	r25, 0x7F	; 127
    11d2:	67 95       	ror	r22
    11d4:	66 27       	eor	r22, r22
    11d6:	67 95       	ror	r22
    11d8:	e6 95       	lsr	r30
    11da:	e2 2e       	mov	r14, r18
    11dc:	a9 2f       	mov	r26, r25
    11de:	a8 2b       	or	r26, r24
    11e0:	fe 2f       	mov	r31, r30
    11e2:	f6 2b       	or	r31, r22
    11e4:	62 2f       	mov	r22, r18
    11e6:	73 2f       	mov	r23, r19
    11e8:	8a 2f       	mov	r24, r26
    11ea:	9f 2f       	mov	r25, r31
    11ec:	cd b7       	in	r28, 0x3d	; 61
    11ee:	de b7       	in	r29, 0x3e	; 62
    11f0:	e6 e0       	ldi	r30, 0x06	; 6
    11f2:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <__epilogue_restores__+0x18>

000011f6 <__unpack_f>:
    11f6:	dc 01       	movw	r26, r24
    11f8:	fb 01       	movw	r30, r22
    11fa:	2c 91       	ld	r18, X
    11fc:	11 96       	adiw	r26, 0x01	; 1
    11fe:	3c 91       	ld	r19, X
    1200:	11 97       	sbiw	r26, 0x01	; 1
    1202:	12 96       	adiw	r26, 0x02	; 2
    1204:	8c 91       	ld	r24, X
    1206:	12 97       	sbiw	r26, 0x02	; 2
    1208:	48 2f       	mov	r20, r24
    120a:	4f 77       	andi	r20, 0x7F	; 127
    120c:	50 e0       	ldi	r21, 0x00	; 0
    120e:	98 2f       	mov	r25, r24
    1210:	99 1f       	adc	r25, r25
    1212:	99 27       	eor	r25, r25
    1214:	99 1f       	adc	r25, r25
    1216:	13 96       	adiw	r26, 0x03	; 3
    1218:	6c 91       	ld	r22, X
    121a:	13 97       	sbiw	r26, 0x03	; 3
    121c:	86 2f       	mov	r24, r22
    121e:	88 0f       	add	r24, r24
    1220:	89 2b       	or	r24, r25
    1222:	90 e0       	ldi	r25, 0x00	; 0
    1224:	66 1f       	adc	r22, r22
    1226:	66 27       	eor	r22, r22
    1228:	66 1f       	adc	r22, r22
    122a:	61 83       	std	Z+1, r22	; 0x01
    122c:	00 97       	sbiw	r24, 0x00	; 0
    122e:	39 f5       	brne	.+78     	; 0x127e <__unpack_f+0x88>
    1230:	21 15       	cp	r18, r1
    1232:	31 05       	cpc	r19, r1
    1234:	41 05       	cpc	r20, r1
    1236:	51 05       	cpc	r21, r1
    1238:	11 f4       	brne	.+4      	; 0x123e <__unpack_f+0x48>
    123a:	82 e0       	ldi	r24, 0x02	; 2
    123c:	29 c0       	rjmp	.+82     	; 0x1290 <__unpack_f+0x9a>
    123e:	82 e8       	ldi	r24, 0x82	; 130
    1240:	9f ef       	ldi	r25, 0xFF	; 255
    1242:	93 83       	std	Z+3, r25	; 0x03
    1244:	82 83       	std	Z+2, r24	; 0x02
    1246:	67 e0       	ldi	r22, 0x07	; 7
    1248:	22 0f       	add	r18, r18
    124a:	33 1f       	adc	r19, r19
    124c:	44 1f       	adc	r20, r20
    124e:	55 1f       	adc	r21, r21
    1250:	6a 95       	dec	r22
    1252:	d1 f7       	brne	.-12     	; 0x1248 <__unpack_f+0x52>
    1254:	83 e0       	ldi	r24, 0x03	; 3
    1256:	80 83       	st	Z, r24
    1258:	09 c0       	rjmp	.+18     	; 0x126c <__unpack_f+0x76>
    125a:	22 0f       	add	r18, r18
    125c:	33 1f       	adc	r19, r19
    125e:	44 1f       	adc	r20, r20
    1260:	55 1f       	adc	r21, r21
    1262:	82 81       	ldd	r24, Z+2	; 0x02
    1264:	93 81       	ldd	r25, Z+3	; 0x03
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	93 83       	std	Z+3, r25	; 0x03
    126a:	82 83       	std	Z+2, r24	; 0x02
    126c:	20 30       	cpi	r18, 0x00	; 0
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	38 07       	cpc	r19, r24
    1272:	80 e0       	ldi	r24, 0x00	; 0
    1274:	48 07       	cpc	r20, r24
    1276:	80 e4       	ldi	r24, 0x40	; 64
    1278:	58 07       	cpc	r21, r24
    127a:	78 f3       	brcs	.-34     	; 0x125a <__unpack_f+0x64>
    127c:	20 c0       	rjmp	.+64     	; 0x12be <__unpack_f+0xc8>
    127e:	8f 3f       	cpi	r24, 0xFF	; 255
    1280:	91 05       	cpc	r25, r1
    1282:	79 f4       	brne	.+30     	; 0x12a2 <__unpack_f+0xac>
    1284:	21 15       	cp	r18, r1
    1286:	31 05       	cpc	r19, r1
    1288:	41 05       	cpc	r20, r1
    128a:	51 05       	cpc	r21, r1
    128c:	19 f4       	brne	.+6      	; 0x1294 <__unpack_f+0x9e>
    128e:	84 e0       	ldi	r24, 0x04	; 4
    1290:	80 83       	st	Z, r24
    1292:	08 95       	ret
    1294:	44 ff       	sbrs	r20, 4
    1296:	03 c0       	rjmp	.+6      	; 0x129e <__unpack_f+0xa8>
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	80 83       	st	Z, r24
    129c:	10 c0       	rjmp	.+32     	; 0x12be <__unpack_f+0xc8>
    129e:	10 82       	st	Z, r1
    12a0:	0e c0       	rjmp	.+28     	; 0x12be <__unpack_f+0xc8>
    12a2:	8f 57       	subi	r24, 0x7F	; 127
    12a4:	90 40       	sbci	r25, 0x00	; 0
    12a6:	93 83       	std	Z+3, r25	; 0x03
    12a8:	82 83       	std	Z+2, r24	; 0x02
    12aa:	83 e0       	ldi	r24, 0x03	; 3
    12ac:	80 83       	st	Z, r24
    12ae:	87 e0       	ldi	r24, 0x07	; 7
    12b0:	22 0f       	add	r18, r18
    12b2:	33 1f       	adc	r19, r19
    12b4:	44 1f       	adc	r20, r20
    12b6:	55 1f       	adc	r21, r21
    12b8:	8a 95       	dec	r24
    12ba:	d1 f7       	brne	.-12     	; 0x12b0 <__unpack_f+0xba>
    12bc:	50 64       	ori	r21, 0x40	; 64
    12be:	24 83       	std	Z+4, r18	; 0x04
    12c0:	35 83       	std	Z+5, r19	; 0x05
    12c2:	46 83       	std	Z+6, r20	; 0x06
    12c4:	57 83       	std	Z+7, r21	; 0x07
    12c6:	08 95       	ret

000012c8 <__fpcmp_parts_f>:
    12c8:	fc 01       	movw	r30, r24
    12ca:	db 01       	movw	r26, r22
    12cc:	90 81       	ld	r25, Z
    12ce:	92 30       	cpi	r25, 0x02	; 2
    12d0:	08 f4       	brcc	.+2      	; 0x12d4 <__fpcmp_parts_f+0xc>
    12d2:	49 c0       	rjmp	.+146    	; 0x1366 <__fpcmp_parts_f+0x9e>
    12d4:	8c 91       	ld	r24, X
    12d6:	82 30       	cpi	r24, 0x02	; 2
    12d8:	08 f4       	brcc	.+2      	; 0x12dc <__fpcmp_parts_f+0x14>
    12da:	45 c0       	rjmp	.+138    	; 0x1366 <__fpcmp_parts_f+0x9e>
    12dc:	94 30       	cpi	r25, 0x04	; 4
    12de:	51 f4       	brne	.+20     	; 0x12f4 <__fpcmp_parts_f+0x2c>
    12e0:	61 81       	ldd	r22, Z+1	; 0x01
    12e2:	84 30       	cpi	r24, 0x04	; 4
    12e4:	b1 f5       	brne	.+108    	; 0x1352 <__fpcmp_parts_f+0x8a>
    12e6:	11 96       	adiw	r26, 0x01	; 1
    12e8:	2c 91       	ld	r18, X
    12ea:	11 97       	sbiw	r26, 0x01	; 1
    12ec:	30 e0       	ldi	r19, 0x00	; 0
    12ee:	26 1b       	sub	r18, r22
    12f0:	31 09       	sbc	r19, r1
    12f2:	41 c0       	rjmp	.+130    	; 0x1376 <__fpcmp_parts_f+0xae>
    12f4:	84 30       	cpi	r24, 0x04	; 4
    12f6:	21 f0       	breq	.+8      	; 0x1300 <__fpcmp_parts_f+0x38>
    12f8:	92 30       	cpi	r25, 0x02	; 2
    12fa:	41 f4       	brne	.+16     	; 0x130c <__fpcmp_parts_f+0x44>
    12fc:	82 30       	cpi	r24, 0x02	; 2
    12fe:	b1 f1       	breq	.+108    	; 0x136c <__fpcmp_parts_f+0xa4>
    1300:	11 96       	adiw	r26, 0x01	; 1
    1302:	8c 91       	ld	r24, X
    1304:	11 97       	sbiw	r26, 0x01	; 1
    1306:	88 23       	and	r24, r24
    1308:	a1 f1       	breq	.+104    	; 0x1372 <__fpcmp_parts_f+0xaa>
    130a:	2d c0       	rjmp	.+90     	; 0x1366 <__fpcmp_parts_f+0x9e>
    130c:	61 81       	ldd	r22, Z+1	; 0x01
    130e:	82 30       	cpi	r24, 0x02	; 2
    1310:	01 f1       	breq	.+64     	; 0x1352 <__fpcmp_parts_f+0x8a>
    1312:	11 96       	adiw	r26, 0x01	; 1
    1314:	8c 91       	ld	r24, X
    1316:	11 97       	sbiw	r26, 0x01	; 1
    1318:	68 17       	cp	r22, r24
    131a:	d9 f4       	brne	.+54     	; 0x1352 <__fpcmp_parts_f+0x8a>
    131c:	22 81       	ldd	r18, Z+2	; 0x02
    131e:	33 81       	ldd	r19, Z+3	; 0x03
    1320:	12 96       	adiw	r26, 0x02	; 2
    1322:	8d 91       	ld	r24, X+
    1324:	9c 91       	ld	r25, X
    1326:	13 97       	sbiw	r26, 0x03	; 3
    1328:	82 17       	cp	r24, r18
    132a:	93 07       	cpc	r25, r19
    132c:	94 f0       	brlt	.+36     	; 0x1352 <__fpcmp_parts_f+0x8a>
    132e:	28 17       	cp	r18, r24
    1330:	39 07       	cpc	r19, r25
    1332:	bc f0       	brlt	.+46     	; 0x1362 <__fpcmp_parts_f+0x9a>
    1334:	24 81       	ldd	r18, Z+4	; 0x04
    1336:	35 81       	ldd	r19, Z+5	; 0x05
    1338:	46 81       	ldd	r20, Z+6	; 0x06
    133a:	57 81       	ldd	r21, Z+7	; 0x07
    133c:	14 96       	adiw	r26, 0x04	; 4
    133e:	8d 91       	ld	r24, X+
    1340:	9d 91       	ld	r25, X+
    1342:	0d 90       	ld	r0, X+
    1344:	bc 91       	ld	r27, X
    1346:	a0 2d       	mov	r26, r0
    1348:	82 17       	cp	r24, r18
    134a:	93 07       	cpc	r25, r19
    134c:	a4 07       	cpc	r26, r20
    134e:	b5 07       	cpc	r27, r21
    1350:	18 f4       	brcc	.+6      	; 0x1358 <__fpcmp_parts_f+0x90>
    1352:	66 23       	and	r22, r22
    1354:	41 f0       	breq	.+16     	; 0x1366 <__fpcmp_parts_f+0x9e>
    1356:	0d c0       	rjmp	.+26     	; 0x1372 <__fpcmp_parts_f+0xaa>
    1358:	28 17       	cp	r18, r24
    135a:	39 07       	cpc	r19, r25
    135c:	4a 07       	cpc	r20, r26
    135e:	5b 07       	cpc	r21, r27
    1360:	28 f4       	brcc	.+10     	; 0x136c <__fpcmp_parts_f+0xa4>
    1362:	66 23       	and	r22, r22
    1364:	31 f0       	breq	.+12     	; 0x1372 <__fpcmp_parts_f+0xaa>
    1366:	21 e0       	ldi	r18, 0x01	; 1
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	05 c0       	rjmp	.+10     	; 0x1376 <__fpcmp_parts_f+0xae>
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
    1370:	02 c0       	rjmp	.+4      	; 0x1376 <__fpcmp_parts_f+0xae>
    1372:	2f ef       	ldi	r18, 0xFF	; 255
    1374:	3f ef       	ldi	r19, 0xFF	; 255
    1376:	c9 01       	movw	r24, r18
    1378:	08 95       	ret

0000137a <analogReference>:
    137a:	80 93 20 02 	sts	0x0220, r24
    137e:	08 95       	ret

00001380 <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    1380:	8e 30       	cpi	r24, 0x0E	; 14
    1382:	08 f0       	brcs	.+2      	; 0x1386 <analogRead+0x6>
    1384:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    1386:	87 70       	andi	r24, 0x07	; 7
    1388:	90 91 20 02 	lds	r25, 0x0220
    138c:	92 95       	swap	r25
    138e:	99 0f       	add	r25, r25
    1390:	99 0f       	add	r25, r25
    1392:	90 7c       	andi	r25, 0xC0	; 192
    1394:	98 2b       	or	r25, r24
    1396:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    139a:	80 91 7a 00 	lds	r24, 0x007A
    139e:	80 64       	ori	r24, 0x40	; 64
    13a0:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    13a4:	80 91 7a 00 	lds	r24, 0x007A
    13a8:	86 fd       	sbrc	r24, 6
    13aa:	fc cf       	rjmp	.-8      	; 0x13a4 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    13ac:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    13b0:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    13b4:	93 2f       	mov	r25, r19
    13b6:	80 e0       	ldi	r24, 0x00	; 0
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	28 2b       	or	r18, r24
    13bc:	39 2b       	or	r19, r25
}
    13be:	c9 01       	movw	r24, r18
    13c0:	08 95       	ret

000013c2 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    13c2:	1f 93       	push	r17
    13c4:	cf 93       	push	r28
    13c6:	df 93       	push	r29
    13c8:	18 2f       	mov	r17, r24
    13ca:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    13cc:	61 e0       	ldi	r22, 0x01	; 1
    13ce:	0e 94 56 0b 	call	0x16ac	; 0x16ac <pinMode>
	if (val == 0)
    13d2:	20 97       	sbiw	r28, 0x00	; 0
    13d4:	09 f4       	brne	.+2      	; 0x13d8 <analogWrite+0x16>
    13d6:	4a c0       	rjmp	.+148    	; 0x146c <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    13d8:	cf 3f       	cpi	r28, 0xFF	; 255
    13da:	d1 05       	cpc	r29, r1
    13dc:	09 f4       	brne	.+2      	; 0x13e0 <analogWrite+0x1e>
    13de:	49 c0       	rjmp	.+146    	; 0x1472 <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    13e0:	e1 2f       	mov	r30, r17
    13e2:	f0 e0       	ldi	r31, 0x00	; 0
    13e4:	e2 55       	subi	r30, 0x52	; 82
    13e6:	ff 4f       	sbci	r31, 0xFF	; 255
    13e8:	e4 91       	lpm	r30, Z+
    13ea:	e3 30       	cpi	r30, 0x03	; 3
    13ec:	c1 f0       	breq	.+48     	; 0x141e <analogWrite+0x5c>
    13ee:	e4 30       	cpi	r30, 0x04	; 4
    13f0:	28 f4       	brcc	.+10     	; 0x13fc <analogWrite+0x3a>
    13f2:	e1 30       	cpi	r30, 0x01	; 1
    13f4:	51 f0       	breq	.+20     	; 0x140a <analogWrite+0x48>
    13f6:	e2 30       	cpi	r30, 0x02	; 2
    13f8:	b1 f5       	brne	.+108    	; 0x1466 <analogWrite+0xa4>
    13fa:	0c c0       	rjmp	.+24     	; 0x1414 <analogWrite+0x52>
    13fc:	e6 30       	cpi	r30, 0x06	; 6
    13fe:	19 f1       	breq	.+70     	; 0x1446 <analogWrite+0x84>
    1400:	e7 30       	cpi	r30, 0x07	; 7
    1402:	49 f1       	breq	.+82     	; 0x1456 <analogWrite+0x94>
    1404:	e4 30       	cpi	r30, 0x04	; 4
    1406:	79 f5       	brne	.+94     	; 0x1466 <analogWrite+0xa4>
    1408:	14 c0       	rjmp	.+40     	; 0x1432 <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    140a:	84 b5       	in	r24, 0x24	; 36
    140c:	80 68       	ori	r24, 0x80	; 128
    140e:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    1410:	c7 bd       	out	0x27, r28	; 39
				break;
    1412:	33 c0       	rjmp	.+102    	; 0x147a <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    1414:	84 b5       	in	r24, 0x24	; 36
    1416:	80 62       	ori	r24, 0x20	; 32
    1418:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    141a:	c8 bd       	out	0x28, r28	; 40
				break;
    141c:	2e c0       	rjmp	.+92     	; 0x147a <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    141e:	80 91 80 00 	lds	r24, 0x0080
    1422:	80 68       	ori	r24, 0x80	; 128
    1424:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    1428:	d0 93 89 00 	sts	0x0089, r29
    142c:	c0 93 88 00 	sts	0x0088, r28
				break;
    1430:	24 c0       	rjmp	.+72     	; 0x147a <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    1432:	80 91 80 00 	lds	r24, 0x0080
    1436:	80 62       	ori	r24, 0x20	; 32
    1438:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    143c:	d0 93 8b 00 	sts	0x008B, r29
    1440:	c0 93 8a 00 	sts	0x008A, r28
				break;
    1444:	1a c0       	rjmp	.+52     	; 0x147a <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    1446:	80 91 b0 00 	lds	r24, 0x00B0
    144a:	80 68       	ori	r24, 0x80	; 128
    144c:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    1450:	c0 93 b3 00 	sts	0x00B3, r28
				break;
    1454:	12 c0       	rjmp	.+36     	; 0x147a <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    1456:	80 91 b0 00 	lds	r24, 0x00B0
    145a:	80 62       	ori	r24, 0x20	; 32
    145c:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    1460:	c0 93 b4 00 	sts	0x00B4, r28
				break;
    1464:	0a c0       	rjmp	.+20     	; 0x147a <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    1466:	c0 38       	cpi	r28, 0x80	; 128
    1468:	d1 05       	cpc	r29, r1
    146a:	1c f4       	brge	.+6      	; 0x1472 <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    146c:	81 2f       	mov	r24, r17
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	02 c0       	rjmp	.+4      	; 0x1476 <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    1472:	81 2f       	mov	r24, r17
    1474:	61 e0       	ldi	r22, 0x01	; 1
    1476:	0e 94 7a 0b 	call	0x16f4	; 0x16f4 <digitalWrite>
				}
		}
	}
}
    147a:	df 91       	pop	r29
    147c:	cf 91       	pop	r28
    147e:	1f 91       	pop	r17
    1480:	08 95       	ret

00001482 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    1482:	1f 92       	push	r1
    1484:	0f 92       	push	r0
    1486:	0f b6       	in	r0, 0x3f	; 63
    1488:	0f 92       	push	r0
    148a:	11 24       	eor	r1, r1
    148c:	2f 93       	push	r18
    148e:	3f 93       	push	r19
    1490:	8f 93       	push	r24
    1492:	9f 93       	push	r25
    1494:	af 93       	push	r26
    1496:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1498:	80 91 70 02 	lds	r24, 0x0270
    149c:	90 91 71 02 	lds	r25, 0x0271
    14a0:	a0 91 72 02 	lds	r26, 0x0272
    14a4:	b0 91 73 02 	lds	r27, 0x0273
	unsigned char f = timer0_fract;
    14a8:	30 91 74 02 	lds	r19, 0x0274

	m += MILLIS_INC;
    14ac:	01 96       	adiw	r24, 0x01	; 1
    14ae:	a1 1d       	adc	r26, r1
    14b0:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    14b2:	23 2f       	mov	r18, r19
    14b4:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    14b6:	2d 37       	cpi	r18, 0x7D	; 125
    14b8:	20 f0       	brcs	.+8      	; 0x14c2 <__vector_16+0x40>
		f -= FRACT_MAX;
    14ba:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    14bc:	01 96       	adiw	r24, 0x01	; 1
    14be:	a1 1d       	adc	r26, r1
    14c0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    14c2:	20 93 74 02 	sts	0x0274, r18
	timer0_millis = m;
    14c6:	80 93 70 02 	sts	0x0270, r24
    14ca:	90 93 71 02 	sts	0x0271, r25
    14ce:	a0 93 72 02 	sts	0x0272, r26
    14d2:	b0 93 73 02 	sts	0x0273, r27
	timer0_overflow_count++;
    14d6:	80 91 6c 02 	lds	r24, 0x026C
    14da:	90 91 6d 02 	lds	r25, 0x026D
    14de:	a0 91 6e 02 	lds	r26, 0x026E
    14e2:	b0 91 6f 02 	lds	r27, 0x026F
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	a1 1d       	adc	r26, r1
    14ea:	b1 1d       	adc	r27, r1
    14ec:	80 93 6c 02 	sts	0x026C, r24
    14f0:	90 93 6d 02 	sts	0x026D, r25
    14f4:	a0 93 6e 02 	sts	0x026E, r26
    14f8:	b0 93 6f 02 	sts	0x026F, r27
}
    14fc:	bf 91       	pop	r27
    14fe:	af 91       	pop	r26
    1500:	9f 91       	pop	r25
    1502:	8f 91       	pop	r24
    1504:	3f 91       	pop	r19
    1506:	2f 91       	pop	r18
    1508:	0f 90       	pop	r0
    150a:	0f be       	out	0x3f, r0	; 63
    150c:	0f 90       	pop	r0
    150e:	1f 90       	pop	r1
    1510:	18 95       	reti

00001512 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    1512:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    1514:	f8 94       	cli
	m = timer0_millis;
    1516:	20 91 70 02 	lds	r18, 0x0270
    151a:	30 91 71 02 	lds	r19, 0x0271
    151e:	40 91 72 02 	lds	r20, 0x0272
    1522:	50 91 73 02 	lds	r21, 0x0273
	SREG = oldSREG;
    1526:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    1528:	b9 01       	movw	r22, r18
    152a:	ca 01       	movw	r24, r20
    152c:	08 95       	ret

0000152e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    152e:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    1530:	f8 94       	cli
	m = timer0_overflow_count;
    1532:	20 91 6c 02 	lds	r18, 0x026C
    1536:	30 91 6d 02 	lds	r19, 0x026D
    153a:	40 91 6e 02 	lds	r20, 0x026E
    153e:	50 91 6f 02 	lds	r21, 0x026F
#if defined(TCNT0)
	t = TCNT0;
    1542:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1544:	a8 9b       	sbis	0x15, 0	; 21
    1546:	06 c0       	rjmp	.+12     	; 0x1554 <micros+0x26>
    1548:	8f 3f       	cpi	r24, 0xFF	; 255
    154a:	21 f0       	breq	.+8      	; 0x1554 <micros+0x26>
		m++;
    154c:	2f 5f       	subi	r18, 0xFF	; 255
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	4f 4f       	sbci	r20, 0xFF	; 255
    1552:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1554:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1556:	54 2f       	mov	r21, r20
    1558:	43 2f       	mov	r20, r19
    155a:	32 2f       	mov	r19, r18
    155c:	22 27       	eor	r18, r18
    155e:	28 0f       	add	r18, r24
    1560:	31 1d       	adc	r19, r1
    1562:	41 1d       	adc	r20, r1
    1564:	51 1d       	adc	r21, r1
    1566:	82 e0       	ldi	r24, 0x02	; 2
    1568:	22 0f       	add	r18, r18
    156a:	33 1f       	adc	r19, r19
    156c:	44 1f       	adc	r20, r20
    156e:	55 1f       	adc	r21, r21
    1570:	8a 95       	dec	r24
    1572:	d1 f7       	brne	.-12     	; 0x1568 <micros+0x3a>
}
    1574:	b9 01       	movw	r22, r18
    1576:	ca 01       	movw	r24, r20
    1578:	08 95       	ret

0000157a <delay>:

void delay(unsigned long ms)
{
    157a:	ef 92       	push	r14
    157c:	ff 92       	push	r15
    157e:	0f 93       	push	r16
    1580:	1f 93       	push	r17
    1582:	cf 93       	push	r28
    1584:	df 93       	push	r29
    1586:	7b 01       	movw	r14, r22
    1588:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    158a:	0e 94 97 0a 	call	0x152e	; 0x152e <micros>
    158e:	eb 01       	movw	r28, r22

	while (ms > 0) {
    1590:	0f c0       	rjmp	.+30     	; 0x15b0 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
    1592:	0e 94 97 0a 	call	0x152e	; 0x152e <micros>
    1596:	6c 1b       	sub	r22, r28
    1598:	7d 0b       	sbc	r23, r29
    159a:	83 e0       	ldi	r24, 0x03	; 3
    159c:	68 3e       	cpi	r22, 0xE8	; 232
    159e:	78 07       	cpc	r23, r24
    15a0:	38 f0       	brcs	.+14     	; 0x15b0 <delay+0x36>
			ms--;
    15a2:	08 94       	sec
    15a4:	e1 08       	sbc	r14, r1
    15a6:	f1 08       	sbc	r15, r1
    15a8:	01 09       	sbc	r16, r1
    15aa:	11 09       	sbc	r17, r1
			start += 1000;
    15ac:	c8 51       	subi	r28, 0x18	; 24
    15ae:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    15b0:	e1 14       	cp	r14, r1
    15b2:	f1 04       	cpc	r15, r1
    15b4:	01 05       	cpc	r16, r1
    15b6:	11 05       	cpc	r17, r1
    15b8:	61 f7       	brne	.-40     	; 0x1592 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	ff 90       	pop	r15
    15c4:	ef 90       	pop	r14
    15c6:	08 95       	ret

000015c8 <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	39 f0       	breq	.+14     	; 0x15da <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    15cc:	88 0f       	add	r24, r24
    15ce:	99 1f       	adc	r25, r25
    15d0:	88 0f       	add	r24, r24
    15d2:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    15d4:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <delayMicroseconds+0xe>
    15da:	08 95       	ret

000015dc <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    15dc:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    15de:	84 b5       	in	r24, 0x24	; 36
    15e0:	82 60       	ori	r24, 0x02	; 2
    15e2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    15e4:	84 b5       	in	r24, 0x24	; 36
    15e6:	81 60       	ori	r24, 0x01	; 1
    15e8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    15ea:	85 b5       	in	r24, 0x25	; 37
    15ec:	82 60       	ori	r24, 0x02	; 2
    15ee:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    15f0:	85 b5       	in	r24, 0x25	; 37
    15f2:	81 60       	ori	r24, 0x01	; 1
    15f4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    15f6:	ee e6       	ldi	r30, 0x6E	; 110
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	81 60       	ori	r24, 0x01	; 1
    15fe:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    1600:	e1 e8       	ldi	r30, 0x81	; 129
    1602:	f0 e0       	ldi	r31, 0x00	; 0
    1604:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    1606:	80 81       	ld	r24, Z
    1608:	82 60       	ori	r24, 0x02	; 2
    160a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    160c:	80 81       	ld	r24, Z
    160e:	81 60       	ori	r24, 0x01	; 1
    1610:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    1612:	e0 e8       	ldi	r30, 0x80	; 128
    1614:	f0 e0       	ldi	r31, 0x00	; 0
    1616:	80 81       	ld	r24, Z
    1618:	81 60       	ori	r24, 0x01	; 1
    161a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    161c:	e1 eb       	ldi	r30, 0xB1	; 177
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	84 60       	ori	r24, 0x04	; 4
    1624:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    1626:	e0 eb       	ldi	r30, 0xB0	; 176
    1628:	f0 e0       	ldi	r31, 0x00	; 0
    162a:	80 81       	ld	r24, Z
    162c:	81 60       	ori	r24, 0x01	; 1
    162e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    1630:	ea e7       	ldi	r30, 0x7A	; 122
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	80 81       	ld	r24, Z
    1636:	84 60       	ori	r24, 0x04	; 4
    1638:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    163a:	80 81       	ld	r24, Z
    163c:	82 60       	ori	r24, 0x02	; 2
    163e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1640:	80 81       	ld	r24, Z
    1642:	81 60       	ori	r24, 0x01	; 1
    1644:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1646:	80 81       	ld	r24, Z
    1648:	80 68       	ori	r24, 0x80	; 128
    164a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    164c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1650:	08 95       	ret

00001652 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1652:	83 30       	cpi	r24, 0x03	; 3
    1654:	71 f0       	breq	.+28     	; 0x1672 <turnOffPWM+0x20>
    1656:	84 30       	cpi	r24, 0x04	; 4
    1658:	28 f4       	brcc	.+10     	; 0x1664 <turnOffPWM+0x12>
    165a:	81 30       	cpi	r24, 0x01	; 1
    165c:	a1 f0       	breq	.+40     	; 0x1686 <turnOffPWM+0x34>
    165e:	82 30       	cpi	r24, 0x02	; 2
    1660:	21 f5       	brne	.+72     	; 0x16aa <turnOffPWM+0x58>
    1662:	14 c0       	rjmp	.+40     	; 0x168c <turnOffPWM+0x3a>
    1664:	86 30       	cpi	r24, 0x06	; 6
    1666:	b1 f0       	breq	.+44     	; 0x1694 <turnOffPWM+0x42>
    1668:	87 30       	cpi	r24, 0x07	; 7
    166a:	d1 f0       	breq	.+52     	; 0x16a0 <turnOffPWM+0x4e>
    166c:	84 30       	cpi	r24, 0x04	; 4
    166e:	e9 f4       	brne	.+58     	; 0x16aa <turnOffPWM+0x58>
    1670:	04 c0       	rjmp	.+8      	; 0x167a <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1672:	80 91 80 00 	lds	r24, 0x0080
    1676:	8f 77       	andi	r24, 0x7F	; 127
    1678:	03 c0       	rjmp	.+6      	; 0x1680 <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    167a:	80 91 80 00 	lds	r24, 0x0080
    167e:	8f 7d       	andi	r24, 0xDF	; 223
    1680:	80 93 80 00 	sts	0x0080, r24
    1684:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1686:	84 b5       	in	r24, 0x24	; 36
    1688:	8f 77       	andi	r24, 0x7F	; 127
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    168c:	84 b5       	in	r24, 0x24	; 36
    168e:	8f 7d       	andi	r24, 0xDF	; 223
    1690:	84 bd       	out	0x24, r24	; 36
    1692:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1694:	80 91 b0 00 	lds	r24, 0x00B0
    1698:	8f 77       	andi	r24, 0x7F	; 127
    169a:	80 93 b0 00 	sts	0x00B0, r24
    169e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    16a0:	80 91 b0 00 	lds	r24, 0x00B0
    16a4:	8f 7d       	andi	r24, 0xDF	; 223
    16a6:	80 93 b0 00 	sts	0x00B0, r24
    16aa:	08 95       	ret

000016ac <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    16ac:	90 e0       	ldi	r25, 0x00	; 0
    16ae:	fc 01       	movw	r30, r24
    16b0:	e6 56       	subi	r30, 0x66	; 102
    16b2:	ff 4f       	sbci	r31, 0xFF	; 255
    16b4:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    16b6:	fc 01       	movw	r30, r24
    16b8:	ea 57       	subi	r30, 0x7A	; 122
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    16be:	ee 23       	and	r30, r30
    16c0:	c1 f0       	breq	.+48     	; 0x16f2 <pinMode+0x46>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	ee 0f       	add	r30, r30
    16c6:	ff 1f       	adc	r31, r31
    16c8:	e8 59       	subi	r30, 0x98	; 152
    16ca:	ff 4f       	sbci	r31, 0xFF	; 255
    16cc:	85 91       	lpm	r24, Z+
    16ce:	94 91       	lpm	r25, Z+
    16d0:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
    16d2:	66 23       	and	r22, r22
    16d4:	41 f4       	brne	.+16     	; 0x16e6 <pinMode+0x3a>
		uint8_t oldSREG = SREG;
    16d6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    16d8:	f8 94       	cli
		*reg &= ~bit;
    16da:	8c 91       	ld	r24, X
    16dc:	20 95       	com	r18
    16de:	82 23       	and	r24, r18
    16e0:	8c 93       	st	X, r24
		SREG = oldSREG;
    16e2:	9f bf       	out	0x3f, r25	; 63
    16e4:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    16e6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    16e8:	f8 94       	cli
		*reg |= bit;
    16ea:	8c 91       	ld	r24, X
    16ec:	82 2b       	or	r24, r18
    16ee:	8c 93       	st	X, r24
		SREG = oldSREG;
    16f0:	9f bf       	out	0x3f, r25	; 63
    16f2:	08 95       	ret

000016f4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	df 93       	push	r29
    16fa:	cf 93       	push	r28
    16fc:	0f 92       	push	r0
    16fe:	cd b7       	in	r28, 0x3d	; 61
    1700:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    1702:	28 2f       	mov	r18, r24
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	f9 01       	movw	r30, r18
    1708:	e2 55       	subi	r30, 0x52	; 82
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    170e:	f9 01       	movw	r30, r18
    1710:	e6 56       	subi	r30, 0x66	; 102
    1712:	ff 4f       	sbci	r31, 0xFF	; 255
    1714:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    1716:	2a 57       	subi	r18, 0x7A	; 122
    1718:	3f 4f       	sbci	r19, 0xFF	; 255
    171a:	f9 01       	movw	r30, r18
    171c:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    171e:	00 23       	and	r16, r16
    1720:	d9 f0       	breq	.+54     	; 0x1758 <digitalWrite+0x64>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1722:	88 23       	and	r24, r24
    1724:	21 f0       	breq	.+8      	; 0x172e <digitalWrite+0x3a>
    1726:	69 83       	std	Y+1, r22	; 0x01
    1728:	0e 94 29 0b 	call	0x1652	; 0x1652 <turnOffPWM>
    172c:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    172e:	e0 2f       	mov	r30, r16
    1730:	f0 e0       	ldi	r31, 0x00	; 0
    1732:	ee 0f       	add	r30, r30
    1734:	ff 1f       	adc	r31, r31
    1736:	ee 58       	subi	r30, 0x8E	; 142
    1738:	ff 4f       	sbci	r31, 0xFF	; 255
    173a:	85 91       	lpm	r24, Z+
    173c:	94 91       	lpm	r25, Z+
    173e:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    1740:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1742:	f8 94       	cli

	if (val == LOW) {
    1744:	66 23       	and	r22, r22
    1746:	21 f4       	brne	.+8      	; 0x1750 <digitalWrite+0x5c>
		*out &= ~bit;
    1748:	8c 91       	ld	r24, X
    174a:	10 95       	com	r17
    174c:	81 23       	and	r24, r17
    174e:	02 c0       	rjmp	.+4      	; 0x1754 <digitalWrite+0x60>
	} else {
		*out |= bit;
    1750:	8c 91       	ld	r24, X
    1752:	81 2b       	or	r24, r17
    1754:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1756:	9f bf       	out	0x3f, r25	; 63
}
    1758:	0f 90       	pop	r0
    175a:	cf 91       	pop	r28
    175c:	df 91       	pop	r29
    175e:	1f 91       	pop	r17
    1760:	0f 91       	pop	r16
    1762:	08 95       	ret

00001764 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1764:	0f 93       	push	r16
    1766:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	f9 01       	movw	r30, r18
    176e:	e2 55       	subi	r30, 0x52	; 82
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1774:	f9 01       	movw	r30, r18
    1776:	e6 56       	subi	r30, 0x66	; 102
    1778:	ff 4f       	sbci	r31, 0xFF	; 255
    177a:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    177c:	2a 57       	subi	r18, 0x7A	; 122
    177e:	3f 4f       	sbci	r19, 0xFF	; 255
    1780:	f9 01       	movw	r30, r18
    1782:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    1784:	11 23       	and	r17, r17
    1786:	91 f0       	breq	.+36     	; 0x17ac <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1788:	88 23       	and	r24, r24
    178a:	11 f0       	breq	.+4      	; 0x1790 <digitalRead+0x2c>
    178c:	0e 94 29 0b 	call	0x1652	; 0x1652 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1790:	e1 2f       	mov	r30, r17
    1792:	f0 e0       	ldi	r31, 0x00	; 0
    1794:	ee 0f       	add	r30, r30
    1796:	ff 1f       	adc	r31, r31
    1798:	e4 58       	subi	r30, 0x84	; 132
    179a:	ff 4f       	sbci	r31, 0xFF	; 255
    179c:	85 91       	lpm	r24, Z+
    179e:	94 91       	lpm	r25, Z+
    17a0:	dc 01       	movw	r26, r24
    17a2:	8c 91       	ld	r24, X
    17a4:	80 23       	and	r24, r16
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    17a6:	21 e0       	ldi	r18, 0x01	; 1
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	11 f4       	brne	.+4      	; 0x17b0 <digitalRead+0x4c>
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    17b0:	c9 01       	movw	r24, r18
    17b2:	1f 91       	pop	r17
    17b4:	0f 91       	pop	r16
    17b6:	08 95       	ret

000017b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    17b8:	cf 92       	push	r12
    17ba:	df 92       	push	r13
    17bc:	ef 92       	push	r14
    17be:	ff 92       	push	r15
    17c0:	0f 93       	push	r16
    17c2:	1f 93       	push	r17
    17c4:	cf 93       	push	r28
    17c6:	df 93       	push	r29
    17c8:	6c 01       	movw	r12, r24
    17ca:	7b 01       	movw	r14, r22
    17cc:	8a 01       	movw	r16, r20
  size_t n = 0;
    17ce:	c0 e0       	ldi	r28, 0x00	; 0
    17d0:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    17d2:	0f c0       	rjmp	.+30     	; 0x17f2 <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
    17d4:	d7 01       	movw	r26, r14
    17d6:	6d 91       	ld	r22, X+
    17d8:	7d 01       	movw	r14, r26
    17da:	d6 01       	movw	r26, r12
    17dc:	ed 91       	ld	r30, X+
    17de:	fc 91       	ld	r31, X
    17e0:	01 90       	ld	r0, Z+
    17e2:	f0 81       	ld	r31, Z
    17e4:	e0 2d       	mov	r30, r0
    17e6:	c6 01       	movw	r24, r12
    17e8:	09 95       	icall
    17ea:	c8 0f       	add	r28, r24
    17ec:	d9 1f       	adc	r29, r25
    17ee:	01 50       	subi	r16, 0x01	; 1
    17f0:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    17f2:	01 15       	cp	r16, r1
    17f4:	11 05       	cpc	r17, r1
    17f6:	71 f7       	brne	.-36     	; 0x17d4 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    17f8:	ce 01       	movw	r24, r28
    17fa:	df 91       	pop	r29
    17fc:	cf 91       	pop	r28
    17fe:	1f 91       	pop	r17
    1800:	0f 91       	pop	r16
    1802:	ff 90       	pop	r15
    1804:	ef 90       	pop	r14
    1806:	df 90       	pop	r13
    1808:	cf 90       	pop	r12
    180a:	08 95       	ret

0000180c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    180c:	db 01       	movw	r26, r22
    180e:	0d 90       	ld	r0, X+
    1810:	00 20       	and	r0, r0
    1812:	e9 f7       	brne	.-6      	; 0x180e <_ZN5Print5writeEPKc+0x2>
    1814:	ad 01       	movw	r20, r26
    1816:	41 50       	subi	r20, 0x01	; 1
    1818:	50 40       	sbci	r21, 0x00	; 0
    181a:	46 1b       	sub	r20, r22
    181c:	57 0b       	sbc	r21, r23
    181e:	dc 01       	movw	r26, r24
    1820:	ed 91       	ld	r30, X+
    1822:	fc 91       	ld	r31, X
    1824:	02 80       	ldd	r0, Z+2	; 0x02
    1826:	f3 81       	ldd	r31, Z+3	; 0x03
    1828:	e0 2d       	mov	r30, r0
    182a:	09 95       	icall
    182c:	08 95       	ret

0000182e <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    182e:	ef 92       	push	r14
    1830:	ff 92       	push	r15
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	7c 01       	movw	r14, r24
  const prog_char *p = (const prog_char *)ifsh;
    183c:	06 2f       	mov	r16, r22
    183e:	17 2f       	mov	r17, r23
  size_t n = 0;
    1840:	c0 e0       	ldi	r28, 0x00	; 0
    1842:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
    1844:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    1846:	0f 5f       	subi	r16, 0xFF	; 255
    1848:	1f 4f       	sbci	r17, 0xFF	; 255
    184a:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    184c:	66 23       	and	r22, r22
    184e:	51 f0       	breq	.+20     	; 0x1864 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    1850:	f7 01       	movw	r30, r14
    1852:	a0 81       	ld	r26, Z
    1854:	b1 81       	ldd	r27, Z+1	; 0x01
    1856:	ed 91       	ld	r30, X+
    1858:	fc 91       	ld	r31, X
    185a:	c7 01       	movw	r24, r14
    185c:	09 95       	icall
    185e:	c8 0f       	add	r28, r24
    1860:	d9 1f       	adc	r29, r25

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
  size_t n = 0;
  while (1) {
    1862:	f0 cf       	rjmp	.-32     	; 0x1844 <_ZN5Print5printEPK19__FlashStringHelper+0x16>
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    1864:	ce 01       	movw	r24, r28
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	08 95       	ret

00001874 <_ZN5Print5printERK6String>:

size_t Print::print(const String &s)
{
    1874:	af 92       	push	r10
    1876:	bf 92       	push	r11
    1878:	cf 92       	push	r12
    187a:	df 92       	push	r13
    187c:	ef 92       	push	r14
    187e:	ff 92       	push	r15
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	7c 01       	movw	r14, r24
    188a:	6b 01       	movw	r12, r22
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    188c:	c0 e0       	ldi	r28, 0x00	; 0
    188e:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    1890:	00 e0       	ldi	r16, 0x00	; 0
    1892:	10 e0       	ldi	r17, 0x00	; 0
  for (uint16_t i = 0; i < s.length(); i++) {
    1894:	10 c0       	rjmp	.+32     	; 0x18b6 <_ZN5Print5printERK6String+0x42>
    n += write(s[i]);
    1896:	d7 01       	movw	r26, r14
    1898:	ed 91       	ld	r30, X+
    189a:	fc 91       	ld	r31, X
    189c:	a0 80       	ld	r10, Z
    189e:	b1 80       	ldd	r11, Z+1	; 0x01
    18a0:	c6 01       	movw	r24, r12
    18a2:	be 01       	movw	r22, r28
    18a4:	0e 94 56 16 	call	0x2cac	; 0x2cac <_ZNK6StringixEj>
    18a8:	68 2f       	mov	r22, r24
    18aa:	c7 01       	movw	r24, r14
    18ac:	f5 01       	movw	r30, r10
    18ae:	09 95       	icall
    18b0:	08 0f       	add	r16, r24
    18b2:	19 1f       	adc	r17, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    18b4:	21 96       	adiw	r28, 0x01	; 1
    18b6:	f6 01       	movw	r30, r12
    18b8:	84 81       	ldd	r24, Z+4	; 0x04
    18ba:	95 81       	ldd	r25, Z+5	; 0x05
    18bc:	c8 17       	cp	r28, r24
    18be:	d9 07       	cpc	r29, r25
    18c0:	50 f3       	brcs	.-44     	; 0x1896 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    18c2:	c8 01       	movw	r24, r16
    18c4:	df 91       	pop	r29
    18c6:	cf 91       	pop	r28
    18c8:	1f 91       	pop	r17
    18ca:	0f 91       	pop	r16
    18cc:	ff 90       	pop	r15
    18ce:	ef 90       	pop	r14
    18d0:	df 90       	pop	r13
    18d2:	cf 90       	pop	r12
    18d4:	bf 90       	pop	r11
    18d6:	af 90       	pop	r10
    18d8:	08 95       	ret

000018da <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
  return write(str);
    18da:	0e 94 06 0c 	call	0x180c	; 0x180c <_ZN5Print5writeEPKc>
}
    18de:	08 95       	ret

000018e0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    18e0:	dc 01       	movw	r26, r24
    18e2:	ed 91       	ld	r30, X+
    18e4:	fc 91       	ld	r31, X
    18e6:	01 90       	ld	r0, Z+
    18e8:	f0 81       	ld	r31, Z
    18ea:	e0 2d       	mov	r30, r0
    18ec:	09 95       	icall
}
    18ee:	08 95       	ret

000018f0 <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
{
    18f0:	9c 01       	movw	r18, r24
    18f2:	cb 01       	movw	r24, r22
  return x.printTo(*this);
    18f4:	db 01       	movw	r26, r22
    18f6:	ed 91       	ld	r30, X+
    18f8:	fc 91       	ld	r31, X
    18fa:	01 90       	ld	r0, Z+
    18fc:	f0 81       	ld	r31, Z
    18fe:	e0 2d       	mov	r30, r0
    1900:	b9 01       	movw	r22, r18
    1902:	09 95       	icall
}
    1904:	08 95       	ret

00001906 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	ec 01       	movw	r28, r24
  size_t n = print('\r');
    1910:	6d e0       	ldi	r22, 0x0D	; 13
    1912:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN5Print5printEc>
    1916:	8c 01       	movw	r16, r24
  n += print('\n');
    1918:	ce 01       	movw	r24, r28
    191a:	6a e0       	ldi	r22, 0x0A	; 10
    191c:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN5Print5printEc>
    1920:	08 0f       	add	r16, r24
    1922:	19 1f       	adc	r17, r25
  return n;
}
    1924:	c8 01       	movw	r24, r16
    1926:	df 91       	pop	r29
    1928:	cf 91       	pop	r28
    192a:	1f 91       	pop	r17
    192c:	0f 91       	pop	r16
    192e:	08 95       	ret

00001930 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    1930:	0f 93       	push	r16
    1932:	1f 93       	push	r17
    1934:	cf 93       	push	r28
    1936:	df 93       	push	r29
    1938:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
    193a:	0e 94 17 0c 	call	0x182e	; 0x182e <_ZN5Print5printEPK19__FlashStringHelper>
    193e:	8c 01       	movw	r16, r24
  n += println();
    1940:	ce 01       	movw	r24, r28
    1942:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN5Print7printlnEv>
    1946:	08 0f       	add	r16, r24
    1948:	19 1f       	adc	r17, r25
  return n;
}
    194a:	c8 01       	movw	r24, r16
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	08 95       	ret

00001956 <_ZN5Print7printlnERK6String>:
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
{
    1956:	0f 93       	push	r16
    1958:	1f 93       	push	r17
    195a:	cf 93       	push	r28
    195c:	df 93       	push	r29
    195e:	ec 01       	movw	r28, r24
  size_t n = print(s);
    1960:	0e 94 3a 0c 	call	0x1874	; 0x1874 <_ZN5Print5printERK6String>
    1964:	8c 01       	movw	r16, r24
  n += println();
    1966:	ce 01       	movw	r24, r28
    1968:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN5Print7printlnEv>
    196c:	08 0f       	add	r16, r24
    196e:	19 1f       	adc	r17, r25
  return n;
}
    1970:	c8 01       	movw	r24, r16
    1972:	df 91       	pop	r29
    1974:	cf 91       	pop	r28
    1976:	1f 91       	pop	r17
    1978:	0f 91       	pop	r16
    197a:	08 95       	ret

0000197c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    197c:	0f 93       	push	r16
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
    1984:	ec 01       	movw	r28, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1986:	0e 94 06 0c 	call	0x180c	; 0x180c <_ZN5Print5writeEPKc>
    198a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    198c:	ce 01       	movw	r24, r28
    198e:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN5Print7printlnEv>
    1992:	08 0f       	add	r16, r24
    1994:	19 1f       	adc	r17, r25
  return n;
}
    1996:	c8 01       	movw	r24, r16
    1998:	df 91       	pop	r29
    199a:	cf 91       	pop	r28
    199c:	1f 91       	pop	r17
    199e:	0f 91       	pop	r16
    19a0:	08 95       	ret

000019a2 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    19a2:	0f 93       	push	r16
    19a4:	1f 93       	push	r17
    19a6:	cf 93       	push	r28
    19a8:	df 93       	push	r29
    19aa:	ec 01       	movw	r28, r24
  size_t n = print(c);
    19ac:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN5Print5printEc>
    19b0:	8c 01       	movw	r16, r24
  n += println();
    19b2:	ce 01       	movw	r24, r28
    19b4:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN5Print7printlnEv>
    19b8:	08 0f       	add	r16, r24
    19ba:	19 1f       	adc	r17, r25
  return n;
}
    19bc:	c8 01       	movw	r24, r16
    19be:	df 91       	pop	r29
    19c0:	cf 91       	pop	r28
    19c2:	1f 91       	pop	r17
    19c4:	0f 91       	pop	r16
    19c6:	08 95       	ret

000019c8 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
{
    19c8:	0f 93       	push	r16
    19ca:	1f 93       	push	r17
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
    19d0:	ec 01       	movw	r28, r24
  size_t n = print(x);
    19d2:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <_ZN5Print5printERK9Printable>
    19d6:	8c 01       	movw	r16, r24
  n += println();
    19d8:	ce 01       	movw	r24, r28
    19da:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN5Print7printlnEv>
    19de:	08 0f       	add	r16, r24
    19e0:	19 1f       	adc	r17, r25
  return n;
}
    19e2:	c8 01       	movw	r24, r16
    19e4:	df 91       	pop	r29
    19e6:	cf 91       	pop	r28
    19e8:	1f 91       	pop	r17
    19ea:	0f 91       	pop	r16
    19ec:	08 95       	ret

000019ee <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    19ee:	8f 92       	push	r8
    19f0:	9f 92       	push	r9
    19f2:	af 92       	push	r10
    19f4:	bf 92       	push	r11
    19f6:	cf 92       	push	r12
    19f8:	df 92       	push	r13
    19fa:	ef 92       	push	r14
    19fc:	ff 92       	push	r15
    19fe:	0f 93       	push	r16
    1a00:	1f 93       	push	r17
    1a02:	df 93       	push	r29
    1a04:	cf 93       	push	r28
    1a06:	cd b7       	in	r28, 0x3d	; 61
    1a08:	de b7       	in	r29, 0x3e	; 62
    1a0a:	a1 97       	sbiw	r28, 0x21	; 33
    1a0c:	0f b6       	in	r0, 0x3f	; 63
    1a0e:	f8 94       	cli
    1a10:	de bf       	out	0x3e, r29	; 62
    1a12:	0f be       	out	0x3f, r0	; 63
    1a14:	cd bf       	out	0x3d, r28	; 61
    1a16:	6c 01       	movw	r12, r24
    1a18:	04 2f       	mov	r16, r20
    1a1a:	e5 2f       	mov	r30, r21
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	12 2f       	mov	r17, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    1a20:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    1a22:	22 30       	cpi	r18, 0x02	; 2
    1a24:	08 f4       	brcc	.+2      	; 0x1a28 <_ZN5Print11printNumberEmh+0x3a>
    1a26:	1a e0       	ldi	r17, 0x0A	; 10
    1a28:	21 e2       	ldi	r18, 0x21	; 33
    1a2a:	e2 2e       	mov	r14, r18
    1a2c:	f1 2c       	mov	r15, r1
    1a2e:	ec 0e       	add	r14, r28
    1a30:	fd 1e       	adc	r15, r29

  do {
    unsigned long m = n;
    n /= base;
    1a32:	81 2e       	mov	r8, r17
    1a34:	99 24       	eor	r9, r9
    1a36:	aa 24       	eor	r10, r10
    1a38:	bb 24       	eor	r11, r11
    1a3a:	03 c0       	rjmp	.+6      	; 0x1a42 <_ZN5Print11printNumberEmh+0x54>
    1a3c:	02 2f       	mov	r16, r18
    1a3e:	e3 2f       	mov	r30, r19
    1a40:	ca 01       	movw	r24, r20
    1a42:	60 2f       	mov	r22, r16
    1a44:	7e 2f       	mov	r23, r30
    1a46:	a5 01       	movw	r20, r10
    1a48:	94 01       	movw	r18, r8
    1a4a:	0e 94 ad 19 	call	0x335a	; 0x335a <__udivmodsi4>
    char c = m - base * n;
    1a4e:	12 9f       	mul	r17, r18
    1a50:	80 2d       	mov	r24, r0
    1a52:	11 24       	eor	r1, r1
    1a54:	08 1b       	sub	r16, r24
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1a56:	08 94       	sec
    1a58:	e1 08       	sbc	r14, r1
    1a5a:	f1 08       	sbc	r15, r1
    1a5c:	0a 30       	cpi	r16, 0x0A	; 10
    1a5e:	14 f4       	brge	.+4      	; 0x1a64 <_ZN5Print11printNumberEmh+0x76>
    1a60:	00 5d       	subi	r16, 0xD0	; 208
    1a62:	01 c0       	rjmp	.+2      	; 0x1a66 <_ZN5Print11printNumberEmh+0x78>
    1a64:	09 5c       	subi	r16, 0xC9	; 201
    1a66:	f7 01       	movw	r30, r14
    1a68:	00 83       	st	Z, r16
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    1a6a:	21 15       	cp	r18, r1
    1a6c:	31 05       	cpc	r19, r1
    1a6e:	41 05       	cpc	r20, r1
    1a70:	51 05       	cpc	r21, r1
    1a72:	21 f7       	brne	.-56     	; 0x1a3c <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1a74:	c6 01       	movw	r24, r12
    1a76:	b7 01       	movw	r22, r14
    1a78:	0e 94 06 0c 	call	0x180c	; 0x180c <_ZN5Print5writeEPKc>
}
    1a7c:	a1 96       	adiw	r28, 0x21	; 33
    1a7e:	0f b6       	in	r0, 0x3f	; 63
    1a80:	f8 94       	cli
    1a82:	de bf       	out	0x3e, r29	; 62
    1a84:	0f be       	out	0x3f, r0	; 63
    1a86:	cd bf       	out	0x3d, r28	; 61
    1a88:	cf 91       	pop	r28
    1a8a:	df 91       	pop	r29
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
    1a90:	ff 90       	pop	r15
    1a92:	ef 90       	pop	r14
    1a94:	df 90       	pop	r13
    1a96:	cf 90       	pop	r12
    1a98:	bf 90       	pop	r11
    1a9a:	af 90       	pop	r10
    1a9c:	9f 90       	pop	r9
    1a9e:	8f 90       	pop	r8
    1aa0:	08 95       	ret

00001aa2 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    1aa2:	21 15       	cp	r18, r1
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	49 f4       	brne	.+18     	; 0x1aba <_ZN5Print5printEmi+0x18>
    1aa8:	dc 01       	movw	r26, r24
    1aaa:	ed 91       	ld	r30, X+
    1aac:	fc 91       	ld	r31, X
    1aae:	01 90       	ld	r0, Z+
    1ab0:	f0 81       	ld	r31, Z
    1ab2:	e0 2d       	mov	r30, r0
    1ab4:	64 2f       	mov	r22, r20
    1ab6:	09 95       	icall
    1ab8:	08 95       	ret
  else return printNumber(n, base);
    1aba:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN5Print11printNumberEmh>
}
    1abe:	08 95       	ret

00001ac0 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    1ac0:	0f 93       	push	r16
    1ac2:	1f 93       	push	r17
    1ac4:	cf 93       	push	r28
    1ac6:	df 93       	push	r29
    1ac8:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1aca:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN5Print5printEmi>
    1ace:	8c 01       	movw	r16, r24
  n += println();
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN5Print7printlnEv>
    1ad6:	08 0f       	add	r16, r24
    1ad8:	19 1f       	adc	r17, r25
  return n;
}
    1ada:	c8 01       	movw	r24, r16
    1adc:	df 91       	pop	r29
    1ade:	cf 91       	pop	r28
    1ae0:	1f 91       	pop	r17
    1ae2:	0f 91       	pop	r16
    1ae4:	08 95       	ret

00001ae6 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    1ae6:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    1ae8:	ab 01       	movw	r20, r22
    1aea:	60 e0       	ldi	r22, 0x00	; 0
    1aec:	70 e0       	ldi	r23, 0x00	; 0
    1aee:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN5Print5printEmi>
}
    1af2:	08 95       	ret

00001af4 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    1af4:	0f 93       	push	r16
    1af6:	1f 93       	push	r17
    1af8:	cf 93       	push	r28
    1afa:	df 93       	push	r29
    1afc:	ec 01       	movw	r28, r24
    1afe:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    1b00:	ab 01       	movw	r20, r22
    1b02:	60 e0       	ldi	r22, 0x00	; 0
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN5Print5printEmi>
    1b0a:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    1b0c:	ce 01       	movw	r24, r28
    1b0e:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN5Print7printlnEv>
    1b12:	08 0f       	add	r16, r24
    1b14:	19 1f       	adc	r17, r25
  return n;
}
    1b16:	c8 01       	movw	r24, r16
    1b18:	df 91       	pop	r29
    1b1a:	cf 91       	pop	r28
    1b1c:	1f 91       	pop	r17
    1b1e:	0f 91       	pop	r16
    1b20:	08 95       	ret

00001b22 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    1b22:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    1b24:	46 2f       	mov	r20, r22
    1b26:	50 e0       	ldi	r21, 0x00	; 0
    1b28:	60 e0       	ldi	r22, 0x00	; 0
    1b2a:	70 e0       	ldi	r23, 0x00	; 0
    1b2c:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN5Print5printEmi>
}
    1b30:	08 95       	ret

00001b32 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    1b32:	0f 93       	push	r16
    1b34:	1f 93       	push	r17
    1b36:	cf 93       	push	r28
    1b38:	df 93       	push	r29
    1b3a:	ec 01       	movw	r28, r24
    1b3c:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    1b3e:	46 2f       	mov	r20, r22
    1b40:	50 e0       	ldi	r21, 0x00	; 0
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	70 e0       	ldi	r23, 0x00	; 0
    1b46:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN5Print5printEmi>
    1b4a:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    1b4c:	ce 01       	movw	r24, r28
    1b4e:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN5Print7printlnEv>
    1b52:	08 0f       	add	r16, r24
    1b54:	19 1f       	adc	r17, r25
  return n;
}
    1b56:	c8 01       	movw	r24, r16
    1b58:	df 91       	pop	r29
    1b5a:	cf 91       	pop	r28
    1b5c:	1f 91       	pop	r17
    1b5e:	0f 91       	pop	r16
    1b60:	08 95       	ret

00001b62 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1b62:	cf 92       	push	r12
    1b64:	df 92       	push	r13
    1b66:	ef 92       	push	r14
    1b68:	ff 92       	push	r15
    1b6a:	0f 93       	push	r16
    1b6c:	1f 93       	push	r17
    1b6e:	cf 93       	push	r28
    1b70:	df 93       	push	r29
    1b72:	ec 01       	movw	r28, r24
    1b74:	7a 01       	movw	r14, r20
    1b76:	8b 01       	movw	r16, r22
  if (base == 0) {
    1b78:	21 15       	cp	r18, r1
    1b7a:	31 05       	cpc	r19, r1
    1b7c:	41 f4       	brne	.+16     	; 0x1b8e <_ZN5Print5printEli+0x2c>
    return write(n);
    1b7e:	e8 81       	ld	r30, Y
    1b80:	f9 81       	ldd	r31, Y+1	; 0x01
    1b82:	01 90       	ld	r0, Z+
    1b84:	f0 81       	ld	r31, Z
    1b86:	e0 2d       	mov	r30, r0
    1b88:	64 2f       	mov	r22, r20
    1b8a:	09 95       	icall
    1b8c:	1a c0       	rjmp	.+52     	; 0x1bc2 <_ZN5Print5printEli+0x60>
  } else if (base == 10) {
    1b8e:	2a 30       	cpi	r18, 0x0A	; 10
    1b90:	31 05       	cpc	r19, r1
    1b92:	a9 f4       	brne	.+42     	; 0x1bbe <_ZN5Print5printEli+0x5c>
    if (n < 0) {
    1b94:	77 ff       	sbrs	r23, 7
    1b96:	12 c0       	rjmp	.+36     	; 0x1bbc <_ZN5Print5printEli+0x5a>
      int t = print('-');
    1b98:	6d e2       	ldi	r22, 0x2D	; 45
    1b9a:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN5Print5printEc>
    1b9e:	6c 01       	movw	r12, r24
      n = -n;
    1ba0:	44 27       	eor	r20, r20
    1ba2:	55 27       	eor	r21, r21
    1ba4:	ba 01       	movw	r22, r20
    1ba6:	4e 19       	sub	r20, r14
    1ba8:	5f 09       	sbc	r21, r15
    1baa:	60 0b       	sbc	r22, r16
    1bac:	71 0b       	sbc	r23, r17
      return printNumber(n, 10) + t;
    1bae:	ce 01       	movw	r24, r28
    1bb0:	2a e0       	ldi	r18, 0x0A	; 10
    1bb2:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN5Print11printNumberEmh>
    1bb6:	c8 0e       	add	r12, r24
    1bb8:	d9 1e       	adc	r13, r25
    1bba:	04 c0       	rjmp	.+8      	; 0x1bc4 <_ZN5Print5printEli+0x62>
    }
    return printNumber(n, 10);
    1bbc:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    1bbe:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <_ZN5Print11printNumberEmh>
    1bc2:	6c 01       	movw	r12, r24
  }
}
    1bc4:	c6 01       	movw	r24, r12
    1bc6:	df 91       	pop	r29
    1bc8:	cf 91       	pop	r28
    1bca:	1f 91       	pop	r17
    1bcc:	0f 91       	pop	r16
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	08 95       	ret

00001bd8 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    1bd8:	0f 93       	push	r16
    1bda:	1f 93       	push	r17
    1bdc:	cf 93       	push	r28
    1bde:	df 93       	push	r29
    1be0:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    1be2:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <_ZN5Print5printEli>
    1be6:	8c 01       	movw	r16, r24
  n += println();
    1be8:	ce 01       	movw	r24, r28
    1bea:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN5Print7printlnEv>
    1bee:	08 0f       	add	r16, r24
    1bf0:	19 1f       	adc	r17, r25
  return n;
}
    1bf2:	c8 01       	movw	r24, r16
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	1f 91       	pop	r17
    1bfa:	0f 91       	pop	r16
    1bfc:	08 95       	ret

00001bfe <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    1bfe:	9a 01       	movw	r18, r20
  return print((long) n, base);
    1c00:	fb 01       	movw	r30, r22
    1c02:	af 01       	movw	r20, r30
    1c04:	66 27       	eor	r22, r22
    1c06:	57 fd       	sbrc	r21, 7
    1c08:	60 95       	com	r22
    1c0a:	76 2f       	mov	r23, r22
    1c0c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <_ZN5Print5printEli>
}
    1c10:	08 95       	ret

00001c12 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    1c12:	0f 93       	push	r16
    1c14:	1f 93       	push	r17
    1c16:	cf 93       	push	r28
    1c18:	df 93       	push	r29
    1c1a:	ec 01       	movw	r28, r24
    1c1c:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1c1e:	cb 01       	movw	r24, r22
    1c20:	ac 01       	movw	r20, r24
    1c22:	66 27       	eor	r22, r22
    1c24:	57 fd       	sbrc	r21, 7
    1c26:	60 95       	com	r22
    1c28:	76 2f       	mov	r23, r22
    1c2a:	ce 01       	movw	r24, r28
    1c2c:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <_ZN5Print5printEli>
    1c30:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    1c32:	ce 01       	movw	r24, r28
    1c34:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN5Print7printlnEv>
    1c38:	08 0f       	add	r16, r24
    1c3a:	19 1f       	adc	r17, r25
  return n;
}
    1c3c:	c8 01       	movw	r24, r16
    1c3e:	df 91       	pop	r29
    1c40:	cf 91       	pop	r28
    1c42:	1f 91       	pop	r17
    1c44:	0f 91       	pop	r16
    1c46:	08 95       	ret

00001c48 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1c48:	6f 92       	push	r6
    1c4a:	7f 92       	push	r7
    1c4c:	9f 92       	push	r9
    1c4e:	af 92       	push	r10
    1c50:	bf 92       	push	r11
    1c52:	cf 92       	push	r12
    1c54:	df 92       	push	r13
    1c56:	ef 92       	push	r14
    1c58:	ff 92       	push	r15
    1c5a:	0f 93       	push	r16
    1c5c:	1f 93       	push	r17
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	3c 01       	movw	r6, r24
    1c64:	7a 01       	movw	r14, r20
    1c66:	8b 01       	movw	r16, r22
    1c68:	c2 2e       	mov	r12, r18
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    1c6a:	cb 01       	movw	r24, r22
    1c6c:	ba 01       	movw	r22, r20
    1c6e:	20 e0       	ldi	r18, 0x00	; 0
    1c70:	30 e0       	ldi	r19, 0x00	; 0
    1c72:	a9 01       	movw	r20, r18
    1c74:	0e 94 79 06 	call	0xcf2	; 0xcf2 <__ltsf2>
    1c78:	87 ff       	sbrs	r24, 7
    1c7a:	0a c0       	rjmp	.+20     	; 0x1c90 <_ZN5Print10printFloatEdh+0x48>
  {
     n += print('-');
    1c7c:	c3 01       	movw	r24, r6
    1c7e:	6d e2       	ldi	r22, 0x2D	; 45
    1c80:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <_ZN5Print5printEc>
    1c84:	ec 01       	movw	r28, r24
     number = -number;
    1c86:	17 fb       	bst	r17, 7
    1c88:	10 95       	com	r17
    1c8a:	17 f9       	bld	r17, 7
    1c8c:	10 95       	com	r17
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <_ZN5Print10printFloatEdh+0x4c>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1c90:	c0 e0       	ldi	r28, 0x00	; 0
    1c92:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1c94:	dd 24       	eor	r13, r13
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1c96:	50 e0       	ldi	r21, 0x00	; 0
    1c98:	40 e0       	ldi	r20, 0x00	; 0
    1c9a:	30 e0       	ldi	r19, 0x00	; 0
    1c9c:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    1c9e:	11 c0       	rjmp	.+34     	; 0x1cc2 <_ZN5Print10printFloatEdh+0x7a>
    rounding /= 10.0;
    1ca0:	da 01       	movw	r26, r20
    1ca2:	f9 01       	movw	r30, r18
    1ca4:	6b 2f       	mov	r22, r27
    1ca6:	74 2f       	mov	r23, r20
    1ca8:	8f 2f       	mov	r24, r31
    1caa:	92 2f       	mov	r25, r18
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 6b 05 	call	0xad6	; 0xad6 <__divsf3>
    1cb8:	56 2f       	mov	r21, r22
    1cba:	47 2f       	mov	r20, r23
    1cbc:	38 2f       	mov	r19, r24
    1cbe:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1cc0:	d3 94       	inc	r13
    1cc2:	dc 14       	cp	r13, r12
    1cc4:	68 f3       	brcs	.-38     	; 0x1ca0 <_ZN5Print10printFloatEdh+0x58>
    rounding /= 10.0;
  
  number += rounding;
    1cc6:	c8 01       	movw	r24, r16
    1cc8:	b7 01       	movw	r22, r14
    1cca:	da 01       	movw	r26, r20
    1ccc:	f9 01       	movw	r30, r18
    1cce:	2b 2f       	mov	r18, r27
    1cd0:	34 2f       	mov	r19, r20
    1cd2:	4f 2f       	mov	r20, r31
    1cd4:	5e 2f       	mov	r21, r30
    1cd6:	0e 94 13 04 	call	0x826	; 0x826 <__addsf3>
    1cda:	5b 01       	movw	r10, r22
    1cdc:	f8 2e       	mov	r15, r24
    1cde:	99 2e       	mov	r9, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    1ce0:	7b 2d       	mov	r23, r11
    1ce2:	0e 94 9d 02 	call	0x53a	; 0x53a <__fixunssfsi>
    1ce6:	16 2f       	mov	r17, r22
    1ce8:	d7 2e       	mov	r13, r23
    1cea:	e8 2e       	mov	r14, r24
    1cec:	09 2f       	mov	r16, r25
  double remainder = number - (double)int_part;
    1cee:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <__floatunsisf>
    1cf2:	9b 01       	movw	r18, r22
    1cf4:	ac 01       	movw	r20, r24
    1cf6:	6a 2d       	mov	r22, r10
    1cf8:	7b 2d       	mov	r23, r11
    1cfa:	8f 2d       	mov	r24, r15
    1cfc:	99 2d       	mov	r25, r9
    1cfe:	0e 94 40 04 	call	0x880	; 0x880 <__subsf3>
    1d02:	96 2e       	mov	r9, r22
    1d04:	a7 2e       	mov	r10, r23
    1d06:	b8 2e       	mov	r11, r24
    1d08:	f9 2e       	mov	r15, r25
  n += print(int_part);
    1d0a:	c3 01       	movw	r24, r6
    1d0c:	41 2f       	mov	r20, r17
    1d0e:	5d 2d       	mov	r21, r13
    1d10:	6e 2d       	mov	r22, r14
    1d12:	70 2f       	mov	r23, r16
    1d14:	2a e0       	ldi	r18, 0x0A	; 10
    1d16:	30 e0       	ldi	r19, 0x00	; 0
    1d18:	0e 94 51 0d 	call	0x1aa2	; 0x1aa2 <_ZN5Print5printEmi>
    1d1c:	c8 0f       	add	r28, r24
    1d1e:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    1d20:	cc 20       	and	r12, r12
    1d22:	b9 f1       	breq	.+110    	; 0x1d92 <_ZN5Print10printFloatEdh+0x14a>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1d24:	c3 01       	movw	r24, r6
    1d26:	6f e0       	ldi	r22, 0x0F	; 15
    1d28:	71 e0       	ldi	r23, 0x01	; 1
    1d2a:	0e 94 06 0c 	call	0x180c	; 0x180c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    1d2e:	c8 0f       	add	r28, r24
    1d30:	d9 1f       	adc	r29, r25
    1d32:	2f c0       	rjmp	.+94     	; 0x1d92 <_ZN5Print10printFloatEdh+0x14a>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    1d34:	69 2d       	mov	r22, r9
    1d36:	7a 2d       	mov	r23, r10
    1d38:	8b 2d       	mov	r24, r11
    1d3a:	9f 2d       	mov	r25, r15
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e2       	ldi	r20, 0x20	; 32
    1d42:	51 e4       	ldi	r21, 0x41	; 65
    1d44:	0e 94 71 04 	call	0x8e2	; 0x8e2 <__mulsf3>
    1d48:	d6 2e       	mov	r13, r22
    1d4a:	b7 2e       	mov	r11, r23
    1d4c:	a8 2e       	mov	r10, r24
    1d4e:	99 2e       	mov	r9, r25
    int toPrint = int(remainder);
    1d50:	0e 94 09 07 	call	0xe12	; 0xe12 <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1d54:	7b 01       	movw	r14, r22
    1d56:	00 27       	eor	r16, r16
    1d58:	f7 fc       	sbrc	r15, 7
    1d5a:	00 95       	com	r16
    1d5c:	10 2f       	mov	r17, r16
    1d5e:	c3 01       	movw	r24, r6
    1d60:	b8 01       	movw	r22, r16
    1d62:	a7 01       	movw	r20, r14
    1d64:	2a e0       	ldi	r18, 0x0A	; 10
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    1d6c:	c8 0f       	add	r28, r24
    1d6e:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1d70:	c8 01       	movw	r24, r16
    1d72:	b7 01       	movw	r22, r14
    1d74:	0e 94 a9 06 	call	0xd52	; 0xd52 <__floatsisf>
    1d78:	9b 01       	movw	r18, r22
    1d7a:	ac 01       	movw	r20, r24
    1d7c:	6d 2d       	mov	r22, r13
    1d7e:	7b 2d       	mov	r23, r11
    1d80:	8a 2d       	mov	r24, r10
    1d82:	99 2d       	mov	r25, r9
    1d84:	0e 94 40 04 	call	0x880	; 0x880 <__subsf3>
    1d88:	96 2e       	mov	r9, r22
    1d8a:	a7 2e       	mov	r10, r23
    1d8c:	b8 2e       	mov	r11, r24
    1d8e:	f9 2e       	mov	r15, r25
    1d90:	ca 94       	dec	r12
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1d92:	cc 20       	and	r12, r12
    1d94:	79 f6       	brne	.-98     	; 0x1d34 <_ZN5Print10printFloatEdh+0xec>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1d96:	ce 01       	movw	r24, r28
    1d98:	df 91       	pop	r29
    1d9a:	cf 91       	pop	r28
    1d9c:	1f 91       	pop	r17
    1d9e:	0f 91       	pop	r16
    1da0:	ff 90       	pop	r15
    1da2:	ef 90       	pop	r14
    1da4:	df 90       	pop	r13
    1da6:	cf 90       	pop	r12
    1da8:	bf 90       	pop	r11
    1daa:	af 90       	pop	r10
    1dac:	9f 90       	pop	r9
    1dae:	7f 90       	pop	r7
    1db0:	6f 90       	pop	r6
    1db2:	08 95       	ret

00001db4 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1db4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_ZN5Print10printFloatEdh>
}
    1db8:	08 95       	ret

00001dba <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    1dba:	0f 93       	push	r16
    1dbc:	1f 93       	push	r17
    1dbe:	cf 93       	push	r28
    1dc0:	df 93       	push	r29
    1dc2:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1dc4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_ZN5Print10printFloatEdh>
    1dc8:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    1dca:	ce 01       	movw	r24, r28
    1dcc:	0e 94 83 0c 	call	0x1906	; 0x1906 <_ZN5Print7printlnEv>
    1dd0:	08 0f       	add	r16, r24
    1dd2:	19 1f       	adc	r17, r25
  return n;
}
    1dd4:	c8 01       	movw	r24, r16
    1dd6:	df 91       	pop	r29
    1dd8:	cf 91       	pop	r28
    1dda:	1f 91       	pop	r17
    1ddc:	0f 91       	pop	r16
    1dde:	08 95       	ret

00001de0 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    1de0:	fc 01       	movw	r30, r24
    1de2:	84 85       	ldd	r24, Z+12	; 0x0c
    1de4:	95 85       	ldd	r25, Z+13	; 0x0d
    1de6:	fc 01       	movw	r30, r24
    1de8:	e0 5c       	subi	r30, 0xC0	; 192
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	20 81       	ld	r18, Z
    1dee:	31 81       	ldd	r19, Z+1	; 0x01
    1df0:	8e 5b       	subi	r24, 0xBE	; 190
    1df2:	9f 4f       	sbci	r25, 0xFF	; 255
    1df4:	fc 01       	movw	r30, r24
    1df6:	80 81       	ld	r24, Z
    1df8:	91 81       	ldd	r25, Z+1	; 0x01
    1dfa:	28 1b       	sub	r18, r24
    1dfc:	39 0b       	sbc	r19, r25
    1dfe:	2f 73       	andi	r18, 0x3F	; 63
    1e00:	30 70       	andi	r19, 0x00	; 0
}
    1e02:	c9 01       	movw	r24, r18
    1e04:	08 95       	ret

00001e06 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    1e06:	fc 01       	movw	r30, r24
    1e08:	84 85       	ldd	r24, Z+12	; 0x0c
    1e0a:	95 85       	ldd	r25, Z+13	; 0x0d
    1e0c:	fc 01       	movw	r30, r24
    1e0e:	e0 5c       	subi	r30, 0xC0	; 192
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	40 81       	ld	r20, Z
    1e14:	51 81       	ldd	r21, Z+1	; 0x01
    1e16:	fc 01       	movw	r30, r24
    1e18:	ee 5b       	subi	r30, 0xBE	; 190
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	20 81       	ld	r18, Z
    1e1e:	31 81       	ldd	r19, Z+1	; 0x01
    1e20:	42 17       	cp	r20, r18
    1e22:	53 07       	cpc	r21, r19
    1e24:	41 f0       	breq	.+16     	; 0x1e36 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    1e26:	01 90       	ld	r0, Z+
    1e28:	f0 81       	ld	r31, Z
    1e2a:	e0 2d       	mov	r30, r0
    1e2c:	e8 0f       	add	r30, r24
    1e2e:	f9 1f       	adc	r31, r25
    1e30:	20 81       	ld	r18, Z
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    1e36:	2f ef       	ldi	r18, 0xFF	; 255
    1e38:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    1e3a:	c9 01       	movw	r24, r18
    1e3c:	08 95       	ret

00001e3e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    1e3e:	fc 01       	movw	r30, r24
    1e40:	84 85       	ldd	r24, Z+12	; 0x0c
    1e42:	95 85       	ldd	r25, Z+13	; 0x0d
    1e44:	fc 01       	movw	r30, r24
    1e46:	e0 5c       	subi	r30, 0xC0	; 192
    1e48:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4a:	40 81       	ld	r20, Z
    1e4c:	51 81       	ldd	r21, Z+1	; 0x01
    1e4e:	fc 01       	movw	r30, r24
    1e50:	ee 5b       	subi	r30, 0xBE	; 190
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	20 81       	ld	r18, Z
    1e56:	31 81       	ldd	r19, Z+1	; 0x01
    1e58:	42 17       	cp	r20, r18
    1e5a:	53 07       	cpc	r21, r19
    1e5c:	71 f0       	breq	.+28     	; 0x1e7a <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1e5e:	a0 81       	ld	r26, Z
    1e60:	b1 81       	ldd	r27, Z+1	; 0x01
    1e62:	a8 0f       	add	r26, r24
    1e64:	b9 1f       	adc	r27, r25
    1e66:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    1e68:	80 81       	ld	r24, Z
    1e6a:	91 81       	ldd	r25, Z+1	; 0x01
    1e6c:	01 96       	adiw	r24, 0x01	; 1
    1e6e:	8f 73       	andi	r24, 0x3F	; 63
    1e70:	90 70       	andi	r25, 0x00	; 0
    1e72:	91 83       	std	Z+1, r25	; 0x01
    1e74:	80 83       	st	Z, r24
    return c;
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    1e7a:	2f ef       	ldi	r18, 0xFF	; 255
    1e7c:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    1e7e:	c9 01       	movw	r24, r18
    1e80:	08 95       	ret

00001e82 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    1e82:	dc 01       	movw	r26, r24
    1e84:	1e 96       	adiw	r26, 0x0e	; 14
    1e86:	8d 91       	ld	r24, X+
    1e88:	9c 91       	ld	r25, X
    1e8a:	1f 97       	sbiw	r26, 0x0f	; 15
    1e8c:	fc 01       	movw	r30, r24
    1e8e:	e0 5c       	subi	r30, 0xC0	; 192
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	8e 5b       	subi	r24, 0xBE	; 190
    1e94:	9f 4f       	sbci	r25, 0xFF	; 255
    1e96:	40 81       	ld	r20, Z
    1e98:	51 81       	ldd	r21, Z+1	; 0x01
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	2d 91       	ld	r18, X+
    1e9e:	3c 91       	ld	r19, X
    1ea0:	11 97       	sbiw	r26, 0x01	; 1
    1ea2:	42 17       	cp	r20, r18
    1ea4:	53 07       	cpc	r21, r19
    1ea6:	b9 f7       	brne	.-18     	; 0x1e96 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    1ea8:	08 95       	ret

00001eaa <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1eaa:	1f 93       	push	r17
    1eac:	fc 01       	movw	r30, r24
    1eae:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1eb0:	26 85       	ldd	r18, Z+14	; 0x0e
    1eb2:	37 85       	ldd	r19, Z+15	; 0x0f
    1eb4:	d9 01       	movw	r26, r18
    1eb6:	a0 5c       	subi	r26, 0xC0	; 192
    1eb8:	bf 4f       	sbci	r27, 0xFF	; 255
    1eba:	8d 91       	ld	r24, X+
    1ebc:	9c 91       	ld	r25, X
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	60 e4       	ldi	r22, 0x40	; 64
    1ec2:	70 e0       	ldi	r23, 0x00	; 0
    1ec4:	0e 94 9a 19 	call	0x3334	; 0x3334 <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1ec8:	d9 01       	movw	r26, r18
    1eca:	ae 5b       	subi	r26, 0xBE	; 190
    1ecc:	bf 4f       	sbci	r27, 0xFF	; 255
    1ece:	4d 91       	ld	r20, X+
    1ed0:	5c 91       	ld	r21, X
    1ed2:	11 97       	sbiw	r26, 0x01	; 1
    1ed4:	84 17       	cp	r24, r20
    1ed6:	95 07       	cpc	r25, r21
    1ed8:	d1 f3       	breq	.-12     	; 0x1ece <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1eda:	d9 01       	movw	r26, r18
    1edc:	a0 5c       	subi	r26, 0xC0	; 192
    1ede:	bf 4f       	sbci	r27, 0xFF	; 255
    1ee0:	0d 90       	ld	r0, X+
    1ee2:	bc 91       	ld	r27, X
    1ee4:	a0 2d       	mov	r26, r0
    1ee6:	a2 0f       	add	r26, r18
    1ee8:	b3 1f       	adc	r27, r19
    1eea:	1c 93       	st	X, r17
  _tx_buffer->head = i;
    1eec:	a6 85       	ldd	r26, Z+14	; 0x0e
    1eee:	b7 85       	ldd	r27, Z+15	; 0x0f
    1ef0:	a0 5c       	subi	r26, 0xC0	; 192
    1ef2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ef4:	11 96       	adiw	r26, 0x01	; 1
    1ef6:	9c 93       	st	X, r25
    1ef8:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
    1efa:	a6 89       	ldd	r26, Z+22	; 0x16
    1efc:	b7 89       	ldd	r27, Z+23	; 0x17
    1efe:	2c 91       	ld	r18, X
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	05 8c       	ldd	r0, Z+29	; 0x1d
    1f06:	02 c0       	rjmp	.+4      	; 0x1f0c <_ZN14HardwareSerial5writeEh+0x62>
    1f08:	88 0f       	add	r24, r24
    1f0a:	99 1f       	adc	r25, r25
    1f0c:	0a 94       	dec	r0
    1f0e:	e2 f7       	brpl	.-8      	; 0x1f08 <_ZN14HardwareSerial5writeEh+0x5e>
    1f10:	28 2b       	or	r18, r24
    1f12:	2c 93       	st	X, r18
  
  return 1;
}
    1f14:	81 e0       	ldi	r24, 0x01	; 1
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	1f 91       	pop	r17
    1f1a:	08 95       	ret

00001f1c <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1f1c:	fb 01       	movw	r30, r22
    1f1e:	e0 5c       	subi	r30, 0xC0	; 192
    1f20:	ff 4f       	sbci	r31, 0xFF	; 255
    1f22:	20 81       	ld	r18, Z
    1f24:	31 81       	ldd	r19, Z+1	; 0x01
    1f26:	2f 5f       	subi	r18, 0xFF	; 255
    1f28:	3f 4f       	sbci	r19, 0xFF	; 255
    1f2a:	2f 73       	andi	r18, 0x3F	; 63
    1f2c:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1f2e:	db 01       	movw	r26, r22
    1f30:	ae 5b       	subi	r26, 0xBE	; 190
    1f32:	bf 4f       	sbci	r27, 0xFF	; 255
    1f34:	4d 91       	ld	r20, X+
    1f36:	5c 91       	ld	r21, X
    1f38:	11 97       	sbiw	r26, 0x01	; 1
    1f3a:	24 17       	cp	r18, r20
    1f3c:	35 07       	cpc	r19, r21
    1f3e:	39 f0       	breq	.+14     	; 0x1f4e <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
    1f40:	a0 81       	ld	r26, Z
    1f42:	b1 81       	ldd	r27, Z+1	; 0x01
    1f44:	a6 0f       	add	r26, r22
    1f46:	b7 1f       	adc	r27, r23
    1f48:	8c 93       	st	X, r24
    buffer->head = i;
    1f4a:	31 83       	std	Z+1, r19	; 0x01
    1f4c:	20 83       	st	Z, r18
    1f4e:	08 95       	ret

00001f50 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1f50:	08 95       	ret

00001f52 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    1f52:	1f 92       	push	r1
    1f54:	0f 92       	push	r0
    1f56:	0f b6       	in	r0, 0x3f	; 63
    1f58:	0f 92       	push	r0
    1f5a:	11 24       	eor	r1, r1
    1f5c:	2f 93       	push	r18
    1f5e:	3f 93       	push	r19
    1f60:	4f 93       	push	r20
    1f62:	5f 93       	push	r21
    1f64:	6f 93       	push	r22
    1f66:	7f 93       	push	r23
    1f68:	8f 93       	push	r24
    1f6a:	9f 93       	push	r25
    1f6c:	af 93       	push	r26
    1f6e:	bf 93       	push	r27
    1f70:	ef 93       	push	r30
    1f72:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1f74:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
    1f78:	65 e7       	ldi	r22, 0x75	; 117
    1f7a:	72 e0       	ldi	r23, 0x02	; 2
    1f7c:	0e 94 8e 0f 	call	0x1f1c	; 0x1f1c <_Z10store_charhP11ring_buffer>
  }
    1f80:	ff 91       	pop	r31
    1f82:	ef 91       	pop	r30
    1f84:	bf 91       	pop	r27
    1f86:	af 91       	pop	r26
    1f88:	9f 91       	pop	r25
    1f8a:	8f 91       	pop	r24
    1f8c:	7f 91       	pop	r23
    1f8e:	6f 91       	pop	r22
    1f90:	5f 91       	pop	r21
    1f92:	4f 91       	pop	r20
    1f94:	3f 91       	pop	r19
    1f96:	2f 91       	pop	r18
    1f98:	0f 90       	pop	r0
    1f9a:	0f be       	out	0x3f, r0	; 63
    1f9c:	0f 90       	pop	r0
    1f9e:	1f 90       	pop	r1
    1fa0:	18 95       	reti

00001fa2 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    1fa2:	8d ef       	ldi	r24, 0xFD	; 253
    1fa4:	92 e0       	ldi	r25, 0x02	; 2
    1fa6:	0e 94 f0 0e 	call	0x1de0	; 0x1de0 <_ZN14HardwareSerial9availableEv>
    1faa:	00 97       	sbiw	r24, 0x00	; 0
    1fac:	11 f0       	breq	.+4      	; 0x1fb2 <_Z14serialEventRunv+0x10>
    1fae:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <_Z11serialEventv>
    1fb2:	08 95       	ret

00001fb4 <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    1fb4:	1f 92       	push	r1
    1fb6:	0f 92       	push	r0
    1fb8:	0f b6       	in	r0, 0x3f	; 63
    1fba:	0f 92       	push	r0
    1fbc:	11 24       	eor	r1, r1
    1fbe:	2f 93       	push	r18
    1fc0:	3f 93       	push	r19
    1fc2:	5f 93       	push	r21
    1fc4:	6f 93       	push	r22
    1fc6:	7f 93       	push	r23
    1fc8:	8f 93       	push	r24
    1fca:	9f 93       	push	r25
    1fcc:	af 93       	push	r26
    1fce:	bf 93       	push	r27
    1fd0:	ef 93       	push	r30
    1fd2:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    1fd4:	20 91 f9 02 	lds	r18, 0x02F9
    1fd8:	30 91 fa 02 	lds	r19, 0x02FA
    1fdc:	80 91 fb 02 	lds	r24, 0x02FB
    1fe0:	90 91 fc 02 	lds	r25, 0x02FC
    1fe4:	28 17       	cp	r18, r24
    1fe6:	39 07       	cpc	r19, r25
    1fe8:	31 f4       	brne	.+12     	; 0x1ff6 <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1fea:	80 91 c1 00 	lds	r24, 0x00C1
    1fee:	8f 7d       	andi	r24, 0xDF	; 223
    1ff0:	80 93 c1 00 	sts	0x00C1, r24
    1ff4:	16 c0       	rjmp	.+44     	; 0x2022 <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1ff6:	e0 91 fb 02 	lds	r30, 0x02FB
    1ffa:	f0 91 fc 02 	lds	r31, 0x02FC
    1ffe:	e7 54       	subi	r30, 0x47	; 71
    2000:	fd 4f       	sbci	r31, 0xFD	; 253
    2002:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    2004:	80 91 fb 02 	lds	r24, 0x02FB
    2008:	90 91 fc 02 	lds	r25, 0x02FC
    200c:	01 96       	adiw	r24, 0x01	; 1
    200e:	60 e4       	ldi	r22, 0x40	; 64
    2010:	70 e0       	ldi	r23, 0x00	; 0
    2012:	0e 94 9a 19 	call	0x3334	; 0x3334 <__divmodhi4>
    2016:	90 93 fc 02 	sts	0x02FC, r25
    201a:	80 93 fb 02 	sts	0x02FB, r24
	
  #if defined(UDR0)
    UDR0 = c;
    201e:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    2022:	ff 91       	pop	r31
    2024:	ef 91       	pop	r30
    2026:	bf 91       	pop	r27
    2028:	af 91       	pop	r26
    202a:	9f 91       	pop	r25
    202c:	8f 91       	pop	r24
    202e:	7f 91       	pop	r23
    2030:	6f 91       	pop	r22
    2032:	5f 91       	pop	r21
    2034:	3f 91       	pop	r19
    2036:	2f 91       	pop	r18
    2038:	0f 90       	pop	r0
    203a:	0f be       	out	0x3f, r0	; 63
    203c:	0f 90       	pop	r0
    203e:	1f 90       	pop	r1
    2040:	18 95       	reti

00002042 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:
#endif


// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
    2042:	8f 92       	push	r8
    2044:	af 92       	push	r10
    2046:	bf 92       	push	r11
    2048:	cf 92       	push	r12
    204a:	df 92       	push	r13
    204c:	ef 92       	push	r14
    204e:	ff 92       	push	r15
    2050:	0f 93       	push	r16
    2052:	1f 93       	push	r17
    2054:	df 93       	push	r29
    2056:	cf 93       	push	r28
    2058:	cd b7       	in	r28, 0x3d	; 61
    205a:	de b7       	in	r29, 0x3e	; 62
    205c:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    205e:	13 82       	std	Z+3, r1	; 0x03
    2060:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    2062:	88 ee       	ldi	r24, 0xE8	; 232
    2064:	93 e0       	ldi	r25, 0x03	; 3
    2066:	a0 e0       	ldi	r26, 0x00	; 0
    2068:	b0 e0       	ldi	r27, 0x00	; 0
    206a:	84 83       	std	Z+4, r24	; 0x04
    206c:	95 83       	std	Z+5, r25	; 0x05
    206e:	a6 83       	std	Z+6, r26	; 0x06
    2070:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    2072:	8d e2       	ldi	r24, 0x2D	; 45
    2074:	92 e0       	ldi	r25, 0x02	; 2
    2076:	91 83       	std	Z+1, r25	; 0x01
    2078:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    207a:	75 87       	std	Z+13, r23	; 0x0d
    207c:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
    207e:	57 87       	std	Z+15, r21	; 0x0f
    2080:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
    2082:	31 8b       	std	Z+17, r19	; 0x11
    2084:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
    2086:	13 8b       	std	Z+19, r17	; 0x13
    2088:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
    208a:	f5 8a       	std	Z+21, r15	; 0x15
    208c:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
    208e:	d7 8a       	std	Z+23, r13	; 0x17
    2090:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
    2092:	b1 8e       	std	Z+25, r11	; 0x19
    2094:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
    2096:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
    2098:	8e 85       	ldd	r24, Y+14	; 0x0e
    209a:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    209c:	8f 85       	ldd	r24, Y+15	; 0x0f
    209e:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    20a0:	88 89       	ldd	r24, Y+16	; 0x10
    20a2:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    20a4:	89 89       	ldd	r24, Y+17	; 0x11
    20a6:	86 8f       	std	Z+30, r24	; 0x1e
}
    20a8:	cf 91       	pop	r28
    20aa:	df 91       	pop	r29
    20ac:	1f 91       	pop	r17
    20ae:	0f 91       	pop	r16
    20b0:	ff 90       	pop	r15
    20b2:	ef 90       	pop	r14
    20b4:	df 90       	pop	r13
    20b6:	cf 90       	pop	r12
    20b8:	bf 90       	pop	r11
    20ba:	af 90       	pop	r10
    20bc:	8f 90       	pop	r8
    20be:	08 95       	ret

000020c0 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    20c0:	df 92       	push	r13
    20c2:	ef 92       	push	r14
    20c4:	ff 92       	push	r15
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	ec 01       	movw	r28, r24
    20d0:	7a 01       	movw	r14, r20
    20d2:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    20d4:	dd 24       	eor	r13, r13
    20d6:	d3 94       	inc	r13
    20d8:	40 30       	cpi	r20, 0x00	; 0
    20da:	81 ee       	ldi	r24, 0xE1	; 225
    20dc:	58 07       	cpc	r21, r24
    20de:	80 e0       	ldi	r24, 0x00	; 0
    20e0:	68 07       	cpc	r22, r24
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	78 07       	cpc	r23, r24
    20e6:	49 f4       	brne	.+18     	; 0x20fa <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    20e8:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    20ea:	ec 89       	ldd	r30, Y+20	; 0x14
    20ec:	fd 89       	ldd	r31, Y+21	; 0x15
    20ee:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    20f0:	60 e8       	ldi	r22, 0x80	; 128
    20f2:	74 e8       	ldi	r23, 0x84	; 132
    20f4:	8e e1       	ldi	r24, 0x1E	; 30
    20f6:	90 e0       	ldi	r25, 0x00	; 0
    20f8:	0f c0       	rjmp	.+30     	; 0x2118 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    20fa:	ec 89       	ldd	r30, Y+20	; 0x14
    20fc:	fd 89       	ldd	r31, Y+21	; 0x15
    20fe:	81 e0       	ldi	r24, 0x01	; 1
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	0e 8c       	ldd	r0, Y+30	; 0x1e
    2104:	02 c0       	rjmp	.+4      	; 0x210a <_ZN14HardwareSerial5beginEm+0x4a>
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	0a 94       	dec	r0
    210c:	e2 f7       	brpl	.-8      	; 0x2106 <_ZN14HardwareSerial5beginEm+0x46>
    210e:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2110:	60 e0       	ldi	r22, 0x00	; 0
    2112:	79 e0       	ldi	r23, 0x09	; 9
    2114:	8d e3       	ldi	r24, 0x3D	; 61
    2116:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2118:	a8 01       	movw	r20, r16
    211a:	97 01       	movw	r18, r14
    211c:	0e 94 ad 19 	call	0x335a	; 0x335a <__udivmodsi4>
    2120:	21 50       	subi	r18, 0x01	; 1
    2122:	30 40       	sbci	r19, 0x00	; 0
    2124:	40 40       	sbci	r20, 0x00	; 0
    2126:	50 40       	sbci	r21, 0x00	; 0
    2128:	56 95       	lsr	r21
    212a:	47 95       	ror	r20
    212c:	37 95       	ror	r19
    212e:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    2130:	80 e1       	ldi	r24, 0x10	; 16
    2132:	20 30       	cpi	r18, 0x00	; 0
    2134:	38 07       	cpc	r19, r24
    2136:	10 f0       	brcs	.+4      	; 0x213c <_ZN14HardwareSerial5beginEm+0x7c>
    2138:	dd 20       	and	r13, r13
    213a:	b1 f6       	brne	.-84     	; 0x20e8 <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    213c:	e8 89       	ldd	r30, Y+16	; 0x10
    213e:	f9 89       	ldd	r31, Y+17	; 0x11
    2140:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    2142:	ea 89       	ldd	r30, Y+18	; 0x12
    2144:	fb 89       	ldd	r31, Y+19	; 0x13
    2146:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    2148:	ee 89       	ldd	r30, Y+22	; 0x16
    214a:	ff 89       	ldd	r31, Y+23	; 0x17
    214c:	40 81       	ld	r20, Z
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9c 01       	movw	r18, r24
    2154:	0a 8c       	ldd	r0, Y+26	; 0x1a
    2156:	02 c0       	rjmp	.+4      	; 0x215c <_ZN14HardwareSerial5beginEm+0x9c>
    2158:	22 0f       	add	r18, r18
    215a:	33 1f       	adc	r19, r19
    215c:	0a 94       	dec	r0
    215e:	e2 f7       	brpl	.-8      	; 0x2158 <_ZN14HardwareSerial5beginEm+0x98>
    2160:	42 2b       	or	r20, r18
    2162:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    2164:	ee 89       	ldd	r30, Y+22	; 0x16
    2166:	ff 89       	ldd	r31, Y+23	; 0x17
    2168:	40 81       	ld	r20, Z
    216a:	9c 01       	movw	r18, r24
    216c:	0b 8c       	ldd	r0, Y+27	; 0x1b
    216e:	02 c0       	rjmp	.+4      	; 0x2174 <_ZN14HardwareSerial5beginEm+0xb4>
    2170:	22 0f       	add	r18, r18
    2172:	33 1f       	adc	r19, r19
    2174:	0a 94       	dec	r0
    2176:	e2 f7       	brpl	.-8      	; 0x2170 <_ZN14HardwareSerial5beginEm+0xb0>
    2178:	42 2b       	or	r20, r18
    217a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    217c:	ee 89       	ldd	r30, Y+22	; 0x16
    217e:	ff 89       	ldd	r31, Y+23	; 0x17
    2180:	40 81       	ld	r20, Z
    2182:	9c 01       	movw	r18, r24
    2184:	0c 8c       	ldd	r0, Y+28	; 0x1c
    2186:	02 c0       	rjmp	.+4      	; 0x218c <_ZN14HardwareSerial5beginEm+0xcc>
    2188:	22 0f       	add	r18, r18
    218a:	33 1f       	adc	r19, r19
    218c:	0a 94       	dec	r0
    218e:	e2 f7       	brpl	.-8      	; 0x2188 <_ZN14HardwareSerial5beginEm+0xc8>
    2190:	42 2b       	or	r20, r18
    2192:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    2194:	ee 89       	ldd	r30, Y+22	; 0x16
    2196:	ff 89       	ldd	r31, Y+23	; 0x17
    2198:	20 81       	ld	r18, Z
    219a:	0d 8c       	ldd	r0, Y+29	; 0x1d
    219c:	02 c0       	rjmp	.+4      	; 0x21a2 <_ZN14HardwareSerial5beginEm+0xe2>
    219e:	88 0f       	add	r24, r24
    21a0:	99 1f       	adc	r25, r25
    21a2:	0a 94       	dec	r0
    21a4:	e2 f7       	brpl	.-8      	; 0x219e <_ZN14HardwareSerial5beginEm+0xde>
    21a6:	80 95       	com	r24
    21a8:	82 23       	and	r24, r18
    21aa:	80 83       	st	Z, r24
}
    21ac:	df 91       	pop	r29
    21ae:	cf 91       	pop	r28
    21b0:	1f 91       	pop	r17
    21b2:	0f 91       	pop	r16
    21b4:	ff 90       	pop	r15
    21b6:	ef 90       	pop	r14
    21b8:	df 90       	pop	r13
    21ba:	08 95       	ret

000021bc <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    21bc:	cf 93       	push	r28
    21be:	df 93       	push	r29
    21c0:	fc 01       	movw	r30, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    21c2:	86 85       	ldd	r24, Z+14	; 0x0e
    21c4:	97 85       	ldd	r25, Z+15	; 0x0f
    21c6:	dc 01       	movw	r26, r24
    21c8:	a0 5c       	subi	r26, 0xC0	; 192
    21ca:	bf 4f       	sbci	r27, 0xFF	; 255
    21cc:	8e 5b       	subi	r24, 0xBE	; 190
    21ce:	9f 4f       	sbci	r25, 0xFF	; 255
    21d0:	4d 91       	ld	r20, X+
    21d2:	5c 91       	ld	r21, X
    21d4:	11 97       	sbiw	r26, 0x01	; 1
    21d6:	ec 01       	movw	r28, r24
    21d8:	28 81       	ld	r18, Y
    21da:	39 81       	ldd	r19, Y+1	; 0x01
    21dc:	42 17       	cp	r20, r18
    21de:	53 07       	cpc	r21, r19
    21e0:	b9 f7       	brne	.-18     	; 0x21d0 <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
    21e2:	a6 89       	ldd	r26, Z+22	; 0x16
    21e4:	b7 89       	ldd	r27, Z+23	; 0x17
    21e6:	4c 91       	ld	r20, X
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	9c 01       	movw	r18, r24
    21ee:	02 8c       	ldd	r0, Z+26	; 0x1a
    21f0:	02 c0       	rjmp	.+4      	; 0x21f6 <_ZN14HardwareSerial3endEv+0x3a>
    21f2:	22 0f       	add	r18, r18
    21f4:	33 1f       	adc	r19, r19
    21f6:	0a 94       	dec	r0
    21f8:	e2 f7       	brpl	.-8      	; 0x21f2 <_ZN14HardwareSerial3endEv+0x36>
    21fa:	20 95       	com	r18
    21fc:	24 23       	and	r18, r20
    21fe:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    2200:	a6 89       	ldd	r26, Z+22	; 0x16
    2202:	b7 89       	ldd	r27, Z+23	; 0x17
    2204:	4c 91       	ld	r20, X
    2206:	9c 01       	movw	r18, r24
    2208:	03 8c       	ldd	r0, Z+27	; 0x1b
    220a:	02 c0       	rjmp	.+4      	; 0x2210 <_ZN14HardwareSerial3endEv+0x54>
    220c:	22 0f       	add	r18, r18
    220e:	33 1f       	adc	r19, r19
    2210:	0a 94       	dec	r0
    2212:	e2 f7       	brpl	.-8      	; 0x220c <_ZN14HardwareSerial3endEv+0x50>
    2214:	20 95       	com	r18
    2216:	24 23       	and	r18, r20
    2218:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    221a:	a6 89       	ldd	r26, Z+22	; 0x16
    221c:	b7 89       	ldd	r27, Z+23	; 0x17
    221e:	4c 91       	ld	r20, X
    2220:	9c 01       	movw	r18, r24
    2222:	04 8c       	ldd	r0, Z+28	; 0x1c
    2224:	02 c0       	rjmp	.+4      	; 0x222a <_ZN14HardwareSerial3endEv+0x6e>
    2226:	22 0f       	add	r18, r18
    2228:	33 1f       	adc	r19, r19
    222a:	0a 94       	dec	r0
    222c:	e2 f7       	brpl	.-8      	; 0x2226 <_ZN14HardwareSerial3endEv+0x6a>
    222e:	20 95       	com	r18
    2230:	24 23       	and	r18, r20
    2232:	2c 93       	st	X, r18
  cbi(*_ucsrb, _udrie);
    2234:	a6 89       	ldd	r26, Z+22	; 0x16
    2236:	b7 89       	ldd	r27, Z+23	; 0x17
    2238:	2c 91       	ld	r18, X
    223a:	05 8c       	ldd	r0, Z+29	; 0x1d
    223c:	02 c0       	rjmp	.+4      	; 0x2242 <_ZN14HardwareSerial3endEv+0x86>
    223e:	88 0f       	add	r24, r24
    2240:	99 1f       	adc	r25, r25
    2242:	0a 94       	dec	r0
    2244:	e2 f7       	brpl	.-8      	; 0x223e <_ZN14HardwareSerial3endEv+0x82>
    2246:	80 95       	com	r24
    2248:	82 23       	and	r24, r18
    224a:	8c 93       	st	X, r24
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    224c:	84 85       	ldd	r24, Z+12	; 0x0c
    224e:	95 85       	ldd	r25, Z+13	; 0x0d
    2250:	fc 01       	movw	r30, r24
    2252:	ee 5b       	subi	r30, 0xBE	; 190
    2254:	ff 4f       	sbci	r31, 0xFF	; 255
    2256:	20 81       	ld	r18, Z
    2258:	31 81       	ldd	r19, Z+1	; 0x01
    225a:	80 5c       	subi	r24, 0xC0	; 192
    225c:	9f 4f       	sbci	r25, 0xFF	; 255
    225e:	fc 01       	movw	r30, r24
    2260:	31 83       	std	Z+1, r19	; 0x01
    2262:	20 83       	st	Z, r18
}
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	08 95       	ret

0000226a <_GLOBAL__I_rx_buffer>:
    226a:	10 92 00 03 	sts	0x0300, r1
    226e:	10 92 ff 02 	sts	0x02FF, r1
    2272:	88 ee       	ldi	r24, 0xE8	; 232
    2274:	93 e0       	ldi	r25, 0x03	; 3
    2276:	a0 e0       	ldi	r26, 0x00	; 0
    2278:	b0 e0       	ldi	r27, 0x00	; 0
    227a:	80 93 01 03 	sts	0x0301, r24
    227e:	90 93 02 03 	sts	0x0302, r25
    2282:	a0 93 03 03 	sts	0x0303, r26
    2286:	b0 93 04 03 	sts	0x0304, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    228a:	ef ef       	ldi	r30, 0xFF	; 255
    228c:	f2 e0       	ldi	r31, 0x02	; 2
    228e:	8d e2       	ldi	r24, 0x2D	; 45
    2290:	92 e0       	ldi	r25, 0x02	; 2
    2292:	92 93       	st	-Z, r25
    2294:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
    2296:	85 e7       	ldi	r24, 0x75	; 117
    2298:	92 e0       	ldi	r25, 0x02	; 2
    229a:	95 87       	std	Z+13, r25	; 0x0d
    229c:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    229e:	89 eb       	ldi	r24, 0xB9	; 185
    22a0:	92 e0       	ldi	r25, 0x02	; 2
    22a2:	97 87       	std	Z+15, r25	; 0x0f
    22a4:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    22a6:	85 ec       	ldi	r24, 0xC5	; 197
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	91 8b       	std	Z+17, r25	; 0x11
    22ac:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    22ae:	84 ec       	ldi	r24, 0xC4	; 196
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	93 8b       	std	Z+19, r25	; 0x13
    22b4:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    22b6:	80 ec       	ldi	r24, 0xC0	; 192
    22b8:	90 e0       	ldi	r25, 0x00	; 0
    22ba:	95 8b       	std	Z+21, r25	; 0x15
    22bc:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    22be:	81 ec       	ldi	r24, 0xC1	; 193
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	97 8b       	std	Z+23, r25	; 0x17
    22c4:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
    22c6:	86 ec       	ldi	r24, 0xC6	; 198
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	91 8f       	std	Z+25, r25	; 0x19
    22cc:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
    22ce:	84 e0       	ldi	r24, 0x04	; 4
    22d0:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    22d2:	83 e0       	ldi	r24, 0x03	; 3
    22d4:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    22d6:	87 e0       	ldi	r24, 0x07	; 7
    22d8:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    22da:	85 e0       	ldi	r24, 0x05	; 5
    22dc:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    22de:	81 e0       	ldi	r24, 0x01	; 1
    22e0:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    22e2:	08 95       	ret

000022e4 <_ZN6StringD1Ev>:
	*this = buf;
}

String::~String()
{
	free(buffer);
    22e4:	fc 01       	movw	r30, r24
    22e6:	80 81       	ld	r24, Z
    22e8:	91 81       	ldd	r25, Z+1	; 0x01
    22ea:	0e 94 ba 1a 	call	0x3574	; 0x3574 <free>
}
    22ee:	08 95       	ret

000022f0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
    22f0:	cf 93       	push	r28
    22f2:	df 93       	push	r29
    22f4:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    22f6:	88 81       	ld	r24, Y
    22f8:	99 81       	ldd	r25, Y+1	; 0x01
    22fa:	00 97       	sbiw	r24, 0x00	; 0
    22fc:	11 f0       	breq	.+4      	; 0x2302 <_ZN6String10invalidateEv+0x12>
    22fe:	0e 94 ba 1a 	call	0x3574	; 0x3574 <free>
	buffer = NULL;
    2302:	19 82       	std	Y+1, r1	; 0x01
    2304:	18 82       	st	Y, r1
	capacity = len = 0;
    2306:	1d 82       	std	Y+5, r1	; 0x05
    2308:	1c 82       	std	Y+4, r1	; 0x04
    230a:	1b 82       	std	Y+3, r1	; 0x03
    230c:	1a 82       	std	Y+2, r1	; 0x02
}
    230e:	df 91       	pop	r29
    2310:	cf 91       	pop	r28
    2312:	08 95       	ret

00002314 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    2314:	0f 93       	push	r16
    2316:	1f 93       	push	r17
    2318:	cf 93       	push	r28
    231a:	df 93       	push	r29
    231c:	ec 01       	movw	r28, r24
    231e:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2320:	6f 5f       	subi	r22, 0xFF	; 255
    2322:	7f 4f       	sbci	r23, 0xFF	; 255
    2324:	88 81       	ld	r24, Y
    2326:	99 81       	ldd	r25, Y+1	; 0x01
    2328:	0e 94 53 1b 	call	0x36a6	; 0x36a6 <realloc>
	if (newbuffer) {
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	31 f0       	breq	.+12     	; 0x233c <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    2330:	99 83       	std	Y+1, r25	; 0x01
    2332:	88 83       	st	Y, r24
		capacity = maxStrLen;
    2334:	1b 83       	std	Y+3, r17	; 0x03
    2336:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	01 c0       	rjmp	.+2      	; 0x233e <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    233c:	80 e0       	ldi	r24, 0x00	; 0
}
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	08 95       	ret

00002348 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    2348:	cf 93       	push	r28
    234a:	df 93       	push	r29
    234c:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    234e:	88 81       	ld	r24, Y
    2350:	99 81       	ldd	r25, Y+1	; 0x01
    2352:	00 97       	sbiw	r24, 0x00	; 0
    2354:	29 f0       	breq	.+10     	; 0x2360 <_ZN6String7reserveEj+0x18>
    2356:	8a 81       	ldd	r24, Y+2	; 0x02
    2358:	9b 81       	ldd	r25, Y+3	; 0x03
    235a:	86 17       	cp	r24, r22
    235c:	97 07       	cpc	r25, r23
    235e:	78 f4       	brcc	.+30     	; 0x237e <_ZN6String7reserveEj+0x36>
	if (changeBuffer(size)) {
    2360:	ce 01       	movw	r24, r28
    2362:	0e 94 8a 11 	call	0x2314	; 0x2314 <_ZN6String12changeBufferEj>
    2366:	88 23       	and	r24, r24
    2368:	41 f0       	breq	.+16     	; 0x237a <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    236a:	8c 81       	ldd	r24, Y+4	; 0x04
    236c:	9d 81       	ldd	r25, Y+5	; 0x05
    236e:	00 97       	sbiw	r24, 0x00	; 0
    2370:	31 f4       	brne	.+12     	; 0x237e <_ZN6String7reserveEj+0x36>
    2372:	e8 81       	ld	r30, Y
    2374:	f9 81       	ldd	r31, Y+1	; 0x01
    2376:	10 82       	st	Z, r1
    2378:	02 c0       	rjmp	.+4      	; 0x237e <_ZN6String7reserveEj+0x36>
		return 1;
	}
	return 0;
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	01 c0       	rjmp	.+2      	; 0x2380 <_ZN6String7reserveEj+0x38>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    237e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    2380:	df 91       	pop	r29
    2382:	cf 91       	pop	r28
    2384:	08 95       	ret

00002386 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    2386:	ef 92       	push	r14
    2388:	ff 92       	push	r15
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	ec 01       	movw	r28, r24
    2394:	7b 01       	movw	r14, r22
    2396:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    2398:	ba 01       	movw	r22, r20
    239a:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN6String7reserveEj>
    239e:	88 23       	and	r24, r24
    23a0:	21 f4       	brne	.+8      	; 0x23aa <_ZN6String4copyEPKcj+0x24>
		invalidate();
    23a2:	ce 01       	movw	r24, r28
    23a4:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN6String10invalidateEv>
		return *this;
    23a8:	07 c0       	rjmp	.+14     	; 0x23b8 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    23aa:	1d 83       	std	Y+5, r17	; 0x05
    23ac:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    23ae:	88 81       	ld	r24, Y
    23b0:	99 81       	ldd	r25, Y+1	; 0x01
    23b2:	b7 01       	movw	r22, r14
    23b4:	0e 94 8c 1c 	call	0x3918	; 0x3918 <strcpy>
	return *this;
}
    23b8:	ce 01       	movw	r24, r28
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	1f 91       	pop	r17
    23c0:	0f 91       	pop	r16
    23c2:	ff 90       	pop	r15
    23c4:	ef 90       	pop	r14
    23c6:	08 95       	ret

000023c8 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    23c8:	cf 93       	push	r28
    23ca:	df 93       	push	r29
    23cc:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    23ce:	11 82       	std	Z+1, r1	; 0x01
    23d0:	10 82       	st	Z, r1
	capacity = 0;
    23d2:	13 82       	std	Z+3, r1	; 0x03
    23d4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    23d6:	15 82       	std	Z+5, r1	; 0x05
    23d8:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    23da:	16 82       	std	Z+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    23dc:	61 15       	cp	r22, r1
    23de:	71 05       	cpc	r23, r1
    23e0:	59 f0       	breq	.+22     	; 0x23f8 <_ZN6StringC1EPKc+0x30>
    23e2:	eb 01       	movw	r28, r22
    23e4:	09 90       	ld	r0, Y+
    23e6:	00 20       	and	r0, r0
    23e8:	e9 f7       	brne	.-6      	; 0x23e4 <_ZN6StringC1EPKc+0x1c>
    23ea:	ae 01       	movw	r20, r28
    23ec:	41 50       	subi	r20, 0x01	; 1
    23ee:	50 40       	sbci	r21, 0x00	; 0
    23f0:	46 1b       	sub	r20, r22
    23f2:	57 0b       	sbc	r21, r23
    23f4:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN6String4copyEPKcj>
}
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	08 95       	ret

000023fe <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    23fe:	ef 92       	push	r14
    2400:	ff 92       	push	r15
    2402:	cf 93       	push	r28
    2404:	df 93       	push	r29
    2406:	ec 01       	movw	r28, r24
    2408:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    240a:	86 17       	cp	r24, r22
    240c:	97 07       	cpc	r25, r23
    240e:	61 f0       	breq	.+24     	; 0x2428 <_ZN6StringaSERKS_+0x2a>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	61 15       	cp	r22, r1
    2416:	71 05       	cpc	r23, r1
    2418:	29 f0       	breq	.+10     	; 0x2424 <_ZN6StringaSERKS_+0x26>
    241a:	44 81       	ldd	r20, Z+4	; 0x04
    241c:	55 81       	ldd	r21, Z+5	; 0x05
    241e:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN6String4copyEPKcj>
    2422:	02 c0       	rjmp	.+4      	; 0x2428 <_ZN6StringaSERKS_+0x2a>
	else invalidate();
    2424:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN6String10invalidateEv>
	
	return *this;
}
    2428:	ce 01       	movw	r24, r28
    242a:	df 91       	pop	r29
    242c:	cf 91       	pop	r28
    242e:	ff 90       	pop	r15
    2430:	ef 90       	pop	r14
    2432:	08 95       	ret

00002434 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    2434:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2436:	11 82       	std	Z+1, r1	; 0x01
    2438:	10 82       	st	Z, r1
	capacity = 0;
    243a:	13 82       	std	Z+3, r1	; 0x03
    243c:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    243e:	15 82       	std	Z+5, r1	; 0x05
    2440:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2442:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    2444:	0e 94 ff 11 	call	0x23fe	; 0x23fe <_ZN6StringaSERKS_>
}
    2448:	08 95       	ret

0000244a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    244a:	0f 93       	push	r16
    244c:	1f 93       	push	r17
    244e:	8c 01       	movw	r16, r24
	if (cstr) copy(cstr, strlen(cstr));
    2450:	61 15       	cp	r22, r1
    2452:	71 05       	cpc	r23, r1
    2454:	61 f0       	breq	.+24     	; 0x246e <_ZN6StringaSEPKc+0x24>
    2456:	db 01       	movw	r26, r22
    2458:	0d 90       	ld	r0, X+
    245a:	00 20       	and	r0, r0
    245c:	e9 f7       	brne	.-6      	; 0x2458 <_ZN6StringaSEPKc+0xe>
    245e:	ad 01       	movw	r20, r26
    2460:	41 50       	subi	r20, 0x01	; 1
    2462:	50 40       	sbci	r21, 0x00	; 0
    2464:	46 1b       	sub	r20, r22
    2466:	57 0b       	sbc	r21, r23
    2468:	0e 94 c3 11 	call	0x2386	; 0x2386 <_ZN6String4copyEPKcj>
    246c:	02 c0       	rjmp	.+4      	; 0x2472 <_ZN6StringaSEPKc+0x28>
	else invalidate();
    246e:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN6String10invalidateEv>
	
	return *this;
}
    2472:	c8 01       	movw	r24, r16
    2474:	1f 91       	pop	r17
    2476:	0f 91       	pop	r16
    2478:	08 95       	ret

0000247a <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    247a:	ef 92       	push	r14
    247c:	ff 92       	push	r15
    247e:	0f 93       	push	r16
    2480:	1f 93       	push	r17
    2482:	df 93       	push	r29
    2484:	cf 93       	push	r28
    2486:	cd b7       	in	r28, 0x3d	; 61
    2488:	de b7       	in	r29, 0x3e	; 62
    248a:	a1 97       	sbiw	r28, 0x21	; 33
    248c:	0f b6       	in	r0, 0x3f	; 63
    248e:	f8 94       	cli
    2490:	de bf       	out	0x3e, r29	; 62
    2492:	0f be       	out	0x3f, r0	; 63
    2494:	cd bf       	out	0x3d, r28	; 61
    2496:	7c 01       	movw	r14, r24
    2498:	cb 01       	movw	r24, r22
    249a:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    249c:	f7 01       	movw	r30, r14
    249e:	11 82       	std	Z+1, r1	; 0x01
    24a0:	10 82       	st	Z, r1
	capacity = 0;
    24a2:	13 82       	std	Z+3, r1	; 0x03
    24a4:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    24a6:	15 82       	std	Z+5, r1	; 0x05
    24a8:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    24aa:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    24ac:	8e 01       	movw	r16, r28
    24ae:	0f 5f       	subi	r16, 0xFF	; 255
    24b0:	1f 4f       	sbci	r17, 0xFF	; 255
    24b2:	a8 01       	movw	r20, r16
    24b4:	30 e0       	ldi	r19, 0x00	; 0
    24b6:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <ultoa>
	*this = buf;
    24ba:	c7 01       	movw	r24, r14
    24bc:	b8 01       	movw	r22, r16
    24be:	0e 94 25 12 	call	0x244a	; 0x244a <_ZN6StringaSEPKc>
}
    24c2:	a1 96       	adiw	r28, 0x21	; 33
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	f8 94       	cli
    24c8:	de bf       	out	0x3e, r29	; 62
    24ca:	0f be       	out	0x3f, r0	; 63
    24cc:	cd bf       	out	0x3d, r28	; 61
    24ce:	cf 91       	pop	r28
    24d0:	df 91       	pop	r29
    24d2:	1f 91       	pop	r17
    24d4:	0f 91       	pop	r16
    24d6:	ff 90       	pop	r15
    24d8:	ef 90       	pop	r14
    24da:	08 95       	ret

000024dc <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    24dc:	ef 92       	push	r14
    24de:	ff 92       	push	r15
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	a2 97       	sbiw	r28, 0x22	; 34
    24ee:	0f b6       	in	r0, 0x3f	; 63
    24f0:	f8 94       	cli
    24f2:	de bf       	out	0x3e, r29	; 62
    24f4:	0f be       	out	0x3f, r0	; 63
    24f6:	cd bf       	out	0x3d, r28	; 61
    24f8:	7c 01       	movw	r14, r24
    24fa:	cb 01       	movw	r24, r22
    24fc:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    24fe:	f7 01       	movw	r30, r14
    2500:	11 82       	std	Z+1, r1	; 0x01
    2502:	10 82       	st	Z, r1
	capacity = 0;
    2504:	13 82       	std	Z+3, r1	; 0x03
    2506:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2508:	15 82       	std	Z+5, r1	; 0x05
    250a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    250c:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    250e:	8e 01       	movw	r16, r28
    2510:	0f 5f       	subi	r16, 0xFF	; 255
    2512:	1f 4f       	sbci	r17, 0xFF	; 255
    2514:	a8 01       	movw	r20, r16
    2516:	30 e0       	ldi	r19, 0x00	; 0
    2518:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <ltoa>
	*this = buf;
    251c:	c7 01       	movw	r24, r14
    251e:	b8 01       	movw	r22, r16
    2520:	0e 94 25 12 	call	0x244a	; 0x244a <_ZN6StringaSEPKc>
}
    2524:	a2 96       	adiw	r28, 0x22	; 34
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	1f 91       	pop	r17
    2536:	0f 91       	pop	r16
    2538:	ff 90       	pop	r15
    253a:	ef 90       	pop	r14
    253c:	08 95       	ret

0000253e <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    253e:	ef 92       	push	r14
    2540:	ff 92       	push	r15
    2542:	0f 93       	push	r16
    2544:	1f 93       	push	r17
    2546:	df 93       	push	r29
    2548:	cf 93       	push	r28
    254a:	cd b7       	in	r28, 0x3d	; 61
    254c:	de b7       	in	r29, 0x3e	; 62
    254e:	61 97       	sbiw	r28, 0x11	; 17
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	de bf       	out	0x3e, r29	; 62
    2556:	0f be       	out	0x3f, r0	; 63
    2558:	cd bf       	out	0x3d, r28	; 61
    255a:	7c 01       	movw	r14, r24
    255c:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    255e:	f7 01       	movw	r30, r14
    2560:	11 82       	std	Z+1, r1	; 0x01
    2562:	10 82       	st	Z, r1
	capacity = 0;
    2564:	13 82       	std	Z+3, r1	; 0x03
    2566:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2568:	15 82       	std	Z+5, r1	; 0x05
    256a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    256c:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    256e:	8e 01       	movw	r16, r28
    2570:	0f 5f       	subi	r16, 0xFF	; 255
    2572:	1f 4f       	sbci	r17, 0xFF	; 255
    2574:	b8 01       	movw	r22, r16
    2576:	50 e0       	ldi	r21, 0x00	; 0
    2578:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <utoa>
	*this = buf;
    257c:	c7 01       	movw	r24, r14
    257e:	b8 01       	movw	r22, r16
    2580:	0e 94 25 12 	call	0x244a	; 0x244a <_ZN6StringaSEPKc>
}
    2584:	61 96       	adiw	r28, 0x11	; 17
    2586:	0f b6       	in	r0, 0x3f	; 63
    2588:	f8 94       	cli
    258a:	de bf       	out	0x3e, r29	; 62
    258c:	0f be       	out	0x3f, r0	; 63
    258e:	cd bf       	out	0x3d, r28	; 61
    2590:	cf 91       	pop	r28
    2592:	df 91       	pop	r29
    2594:	1f 91       	pop	r17
    2596:	0f 91       	pop	r16
    2598:	ff 90       	pop	r15
    259a:	ef 90       	pop	r14
    259c:	08 95       	ret

0000259e <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    259e:	ef 92       	push	r14
    25a0:	ff 92       	push	r15
    25a2:	0f 93       	push	r16
    25a4:	1f 93       	push	r17
    25a6:	df 93       	push	r29
    25a8:	cf 93       	push	r28
    25aa:	cd b7       	in	r28, 0x3d	; 61
    25ac:	de b7       	in	r29, 0x3e	; 62
    25ae:	62 97       	sbiw	r28, 0x12	; 18
    25b0:	0f b6       	in	r0, 0x3f	; 63
    25b2:	f8 94       	cli
    25b4:	de bf       	out	0x3e, r29	; 62
    25b6:	0f be       	out	0x3f, r0	; 63
    25b8:	cd bf       	out	0x3d, r28	; 61
    25ba:	7c 01       	movw	r14, r24
    25bc:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    25be:	f7 01       	movw	r30, r14
    25c0:	11 82       	std	Z+1, r1	; 0x01
    25c2:	10 82       	st	Z, r1
	capacity = 0;
    25c4:	13 82       	std	Z+3, r1	; 0x03
    25c6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    25c8:	15 82       	std	Z+5, r1	; 0x05
    25ca:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    25cc:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    25ce:	8e 01       	movw	r16, r28
    25d0:	0f 5f       	subi	r16, 0xFF	; 255
    25d2:	1f 4f       	sbci	r17, 0xFF	; 255
    25d4:	b8 01       	movw	r22, r16
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <itoa>
	*this = buf;
    25dc:	c7 01       	movw	r24, r14
    25de:	b8 01       	movw	r22, r16
    25e0:	0e 94 25 12 	call	0x244a	; 0x244a <_ZN6StringaSEPKc>
}
    25e4:	62 96       	adiw	r28, 0x12	; 18
    25e6:	0f b6       	in	r0, 0x3f	; 63
    25e8:	f8 94       	cli
    25ea:	de bf       	out	0x3e, r29	; 62
    25ec:	0f be       	out	0x3f, r0	; 63
    25ee:	cd bf       	out	0x3d, r28	; 61
    25f0:	cf 91       	pop	r28
    25f2:	df 91       	pop	r29
    25f4:	1f 91       	pop	r17
    25f6:	0f 91       	pop	r16
    25f8:	ff 90       	pop	r15
    25fa:	ef 90       	pop	r14
    25fc:	08 95       	ret

000025fe <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    25fe:	ef 92       	push	r14
    2600:	ff 92       	push	r15
    2602:	0f 93       	push	r16
    2604:	1f 93       	push	r17
    2606:	df 93       	push	r29
    2608:	cf 93       	push	r28
    260a:	cd b7       	in	r28, 0x3d	; 61
    260c:	de b7       	in	r29, 0x3e	; 62
    260e:	29 97       	sbiw	r28, 0x09	; 9
    2610:	0f b6       	in	r0, 0x3f	; 63
    2612:	f8 94       	cli
    2614:	de bf       	out	0x3e, r29	; 62
    2616:	0f be       	out	0x3f, r0	; 63
    2618:	cd bf       	out	0x3d, r28	; 61
    261a:	7c 01       	movw	r14, r24
    261c:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    261e:	f7 01       	movw	r30, r14
    2620:	11 82       	std	Z+1, r1	; 0x01
    2622:	10 82       	st	Z, r1
	capacity = 0;
    2624:	13 82       	std	Z+3, r1	; 0x03
    2626:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2628:	15 82       	std	Z+5, r1	; 0x05
    262a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    262c:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	8e 01       	movw	r16, r28
    2632:	0f 5f       	subi	r16, 0xFF	; 255
    2634:	1f 4f       	sbci	r17, 0xFF	; 255
    2636:	b8 01       	movw	r22, r16
    2638:	50 e0       	ldi	r21, 0x00	; 0
    263a:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <utoa>
	*this = buf;
    263e:	c7 01       	movw	r24, r14
    2640:	b8 01       	movw	r22, r16
    2642:	0e 94 25 12 	call	0x244a	; 0x244a <_ZN6StringaSEPKc>
}
    2646:	29 96       	adiw	r28, 0x09	; 9
    2648:	0f b6       	in	r0, 0x3f	; 63
    264a:	f8 94       	cli
    264c:	de bf       	out	0x3e, r29	; 62
    264e:	0f be       	out	0x3f, r0	; 63
    2650:	cd bf       	out	0x3d, r28	; 61
    2652:	cf 91       	pop	r28
    2654:	df 91       	pop	r29
    2656:	1f 91       	pop	r17
    2658:	0f 91       	pop	r16
    265a:	ff 90       	pop	r15
    265c:	ef 90       	pop	r14
    265e:	08 95       	ret

00002660 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	00 d0       	rcall	.+0      	; 0x2666 <_ZN6StringC1Ec+0x6>
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    266c:	11 82       	std	Z+1, r1	; 0x01
    266e:	10 82       	st	Z, r1
	capacity = 0;
    2670:	13 82       	std	Z+3, r1	; 0x03
    2672:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2674:	15 82       	std	Z+5, r1	; 0x05
    2676:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2678:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    267a:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    267c:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    267e:	be 01       	movw	r22, r28
    2680:	6f 5f       	subi	r22, 0xFF	; 255
    2682:	7f 4f       	sbci	r23, 0xFF	; 255
    2684:	0e 94 25 12 	call	0x244a	; 0x244a <_ZN6StringaSEPKc>
}
    2688:	0f 90       	pop	r0
    268a:	0f 90       	pop	r0
    268c:	cf 91       	pop	r28
    268e:	df 91       	pop	r29
    2690:	08 95       	ret

00002692 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    2692:	ef 92       	push	r14
    2694:	ff 92       	push	r15
    2696:	0f 93       	push	r16
    2698:	1f 93       	push	r17
    269a:	cf 93       	push	r28
    269c:	df 93       	push	r29
    269e:	ec 01       	movw	r28, r24
    26a0:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
    26a2:	0c 81       	ldd	r16, Y+4	; 0x04
    26a4:	1d 81       	ldd	r17, Y+5	; 0x05
	if (!cstr) return 0;
    26a6:	61 15       	cp	r22, r1
    26a8:	71 05       	cpc	r23, r1
    26aa:	b9 f0       	breq	.+46     	; 0x26da <_ZN6String6concatEPKcj+0x48>
	if (length == 0) return 1;
    26ac:	41 15       	cp	r20, r1
    26ae:	51 05       	cpc	r21, r1
    26b0:	91 f0       	breq	.+36     	; 0x26d6 <_ZN6String6concatEPKcj+0x44>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    26b2:	04 0f       	add	r16, r20
    26b4:	15 1f       	adc	r17, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    26b6:	b8 01       	movw	r22, r16
    26b8:	0e 94 a4 11 	call	0x2348	; 0x2348 <_ZN6String7reserveEj>
    26bc:	88 23       	and	r24, r24
    26be:	69 f0       	breq	.+26     	; 0x26da <_ZN6String6concatEPKcj+0x48>
	strcpy(buffer + len, cstr);
    26c0:	28 81       	ld	r18, Y
    26c2:	39 81       	ldd	r19, Y+1	; 0x01
    26c4:	8c 81       	ldd	r24, Y+4	; 0x04
    26c6:	9d 81       	ldd	r25, Y+5	; 0x05
    26c8:	82 0f       	add	r24, r18
    26ca:	93 1f       	adc	r25, r19
    26cc:	b7 01       	movw	r22, r14
    26ce:	0e 94 8c 1c 	call	0x3918	; 0x3918 <strcpy>
	len = newlen;
    26d2:	1d 83       	std	Y+5, r17	; 0x05
    26d4:	0c 83       	std	Y+4, r16	; 0x04

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	01 c0       	rjmp	.+2      	; 0x26dc <_ZN6String6concatEPKcj+0x4a>
	if (!reserve(newlen)) return 0;
    26da:	80 e0       	ldi	r24, 0x00	; 0
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    26dc:	df 91       	pop	r29
    26de:	cf 91       	pop	r28
    26e0:	1f 91       	pop	r17
    26e2:	0f 91       	pop	r16
    26e4:	ff 90       	pop	r15
    26e6:	ef 90       	pop	r14
    26e8:	08 95       	ret

000026ea <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    26ea:	fb 01       	movw	r30, r22
	return concat(s.buffer, s.len);
    26ec:	60 81       	ld	r22, Z
    26ee:	71 81       	ldd	r23, Z+1	; 0x01
    26f0:	44 81       	ldd	r20, Z+4	; 0x04
    26f2:	55 81       	ldd	r21, Z+5	; 0x05
    26f4:	0e 94 49 13 	call	0x2692	; 0x2692 <_ZN6String6concatEPKcj>
}
    26f8:	08 95       	ret

000026fa <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    26fa:	61 15       	cp	r22, r1
    26fc:	71 05       	cpc	r23, r1
    26fe:	61 f0       	breq	.+24     	; 0x2718 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
    2700:	db 01       	movw	r26, r22
    2702:	0d 90       	ld	r0, X+
    2704:	00 20       	and	r0, r0
    2706:	e9 f7       	brne	.-6      	; 0x2702 <_ZN6String6concatEPKc+0x8>
    2708:	ad 01       	movw	r20, r26
    270a:	41 50       	subi	r20, 0x01	; 1
    270c:	50 40       	sbci	r21, 0x00	; 0
    270e:	46 1b       	sub	r20, r22
    2710:	57 0b       	sbc	r21, r23
    2712:	0e 94 49 13 	call	0x2692	; 0x2692 <_ZN6String6concatEPKcj>
    2716:	08 95       	ret
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    2718:	80 e0       	ldi	r24, 0x00	; 0
	return concat(cstr, strlen(cstr));
}
    271a:	08 95       	ret

0000271c <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    271c:	df 93       	push	r29
    271e:	cf 93       	push	r28
    2720:	00 d0       	rcall	.+0      	; 0x2722 <_ZN6String6concatEc+0x6>
    2722:	cd b7       	in	r28, 0x3d	; 61
    2724:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    2726:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    2728:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    272a:	be 01       	movw	r22, r28
    272c:	6f 5f       	subi	r22, 0xFF	; 255
    272e:	7f 4f       	sbci	r23, 0xFF	; 255
    2730:	41 e0       	ldi	r20, 0x01	; 1
    2732:	50 e0       	ldi	r21, 0x00	; 0
    2734:	0e 94 49 13 	call	0x2692	; 0x2692 <_ZN6String6concatEPKcj>
}
    2738:	0f 90       	pop	r0
    273a:	0f 90       	pop	r0
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	08 95       	ret

00002742 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    2742:	ef 92       	push	r14
    2744:	ff 92       	push	r15
    2746:	0f 93       	push	r16
    2748:	1f 93       	push	r17
    274a:	df 93       	push	r29
    274c:	cf 93       	push	r28
    274e:	00 d0       	rcall	.+0      	; 0x2750 <_ZN6String6concatEh+0xe>
    2750:	00 d0       	rcall	.+0      	; 0x2752 <_ZN6String6concatEh+0x10>
    2752:	cd b7       	in	r28, 0x3d	; 61
    2754:	de b7       	in	r29, 0x3e	; 62
    2756:	7c 01       	movw	r14, r24
    2758:	86 2f       	mov	r24, r22
	char buf[4];
	itoa(num, buf, 10);
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	8e 01       	movw	r16, r28
    275e:	0f 5f       	subi	r16, 0xFF	; 255
    2760:	1f 4f       	sbci	r17, 0xFF	; 255
    2762:	b8 01       	movw	r22, r16
    2764:	4a e0       	ldi	r20, 0x0A	; 10
    2766:	50 e0       	ldi	r21, 0x00	; 0
    2768:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <itoa>
	return concat(buf, strlen(buf));
    276c:	f8 01       	movw	r30, r16
    276e:	01 90       	ld	r0, Z+
    2770:	00 20       	and	r0, r0
    2772:	e9 f7       	brne	.-6      	; 0x276e <_ZN6String6concatEh+0x2c>
    2774:	af 01       	movw	r20, r30
    2776:	41 50       	subi	r20, 0x01	; 1
    2778:	50 40       	sbci	r21, 0x00	; 0
    277a:	40 1b       	sub	r20, r16
    277c:	51 0b       	sbc	r21, r17
    277e:	c7 01       	movw	r24, r14
    2780:	b8 01       	movw	r22, r16
    2782:	0e 94 49 13 	call	0x2692	; 0x2692 <_ZN6String6concatEPKcj>
}
    2786:	0f 90       	pop	r0
    2788:	0f 90       	pop	r0
    278a:	0f 90       	pop	r0
    278c:	0f 90       	pop	r0
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	1f 91       	pop	r17
    2794:	0f 91       	pop	r16
    2796:	ff 90       	pop	r15
    2798:	ef 90       	pop	r14
    279a:	08 95       	ret

0000279c <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    279c:	ef 92       	push	r14
    279e:	ff 92       	push	r15
    27a0:	0f 93       	push	r16
    27a2:	1f 93       	push	r17
    27a4:	df 93       	push	r29
    27a6:	cf 93       	push	r28
    27a8:	cd b7       	in	r28, 0x3d	; 61
    27aa:	de b7       	in	r29, 0x3e	; 62
    27ac:	27 97       	sbiw	r28, 0x07	; 7
    27ae:	0f b6       	in	r0, 0x3f	; 63
    27b0:	f8 94       	cli
    27b2:	de bf       	out	0x3e, r29	; 62
    27b4:	0f be       	out	0x3f, r0	; 63
    27b6:	cd bf       	out	0x3d, r28	; 61
    27b8:	7c 01       	movw	r14, r24
    27ba:	cb 01       	movw	r24, r22
	char buf[7];
	itoa(num, buf, 10);
    27bc:	8e 01       	movw	r16, r28
    27be:	0f 5f       	subi	r16, 0xFF	; 255
    27c0:	1f 4f       	sbci	r17, 0xFF	; 255
    27c2:	b8 01       	movw	r22, r16
    27c4:	4a e0       	ldi	r20, 0x0A	; 10
    27c6:	50 e0       	ldi	r21, 0x00	; 0
    27c8:	0e 94 d5 1c 	call	0x39aa	; 0x39aa <itoa>
	return concat(buf, strlen(buf));
    27cc:	f8 01       	movw	r30, r16
    27ce:	01 90       	ld	r0, Z+
    27d0:	00 20       	and	r0, r0
    27d2:	e9 f7       	brne	.-6      	; 0x27ce <_ZN6String6concatEi+0x32>
    27d4:	af 01       	movw	r20, r30
    27d6:	41 50       	subi	r20, 0x01	; 1
    27d8:	50 40       	sbci	r21, 0x00	; 0
    27da:	40 1b       	sub	r20, r16
    27dc:	51 0b       	sbc	r21, r17
    27de:	c7 01       	movw	r24, r14
    27e0:	b8 01       	movw	r22, r16
    27e2:	0e 94 49 13 	call	0x2692	; 0x2692 <_ZN6String6concatEPKcj>
}
    27e6:	27 96       	adiw	r28, 0x07	; 7
    27e8:	0f b6       	in	r0, 0x3f	; 63
    27ea:	f8 94       	cli
    27ec:	de bf       	out	0x3e, r29	; 62
    27ee:	0f be       	out	0x3f, r0	; 63
    27f0:	cd bf       	out	0x3d, r28	; 61
    27f2:	cf 91       	pop	r28
    27f4:	df 91       	pop	r29
    27f6:	1f 91       	pop	r17
    27f8:	0f 91       	pop	r16
    27fa:	ff 90       	pop	r15
    27fc:	ef 90       	pop	r14
    27fe:	08 95       	ret

00002800 <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
    2800:	ef 92       	push	r14
    2802:	ff 92       	push	r15
    2804:	0f 93       	push	r16
    2806:	1f 93       	push	r17
    2808:	df 93       	push	r29
    280a:	cf 93       	push	r28
    280c:	00 d0       	rcall	.+0      	; 0x280e <_ZN6String6concatEj+0xe>
    280e:	00 d0       	rcall	.+0      	; 0x2810 <_ZN6String6concatEj+0x10>
    2810:	00 d0       	rcall	.+0      	; 0x2812 <_ZN6String6concatEj+0x12>
    2812:	cd b7       	in	r28, 0x3d	; 61
    2814:	de b7       	in	r29, 0x3e	; 62
    2816:	7c 01       	movw	r14, r24
    2818:	cb 01       	movw	r24, r22
	char buf[6];
	utoa(num, buf, 10);
    281a:	8e 01       	movw	r16, r28
    281c:	0f 5f       	subi	r16, 0xFF	; 255
    281e:	1f 4f       	sbci	r17, 0xFF	; 255
    2820:	b8 01       	movw	r22, r16
    2822:	4a e0       	ldi	r20, 0x0A	; 10
    2824:	50 e0       	ldi	r21, 0x00	; 0
    2826:	0e 94 64 1d 	call	0x3ac8	; 0x3ac8 <utoa>
	return concat(buf, strlen(buf));
    282a:	f8 01       	movw	r30, r16
    282c:	01 90       	ld	r0, Z+
    282e:	00 20       	and	r0, r0
    2830:	e9 f7       	brne	.-6      	; 0x282c <_ZN6String6concatEj+0x2c>
    2832:	af 01       	movw	r20, r30
    2834:	41 50       	subi	r20, 0x01	; 1
    2836:	50 40       	sbci	r21, 0x00	; 0
    2838:	40 1b       	sub	r20, r16
    283a:	51 0b       	sbc	r21, r17
    283c:	c7 01       	movw	r24, r14
    283e:	b8 01       	movw	r22, r16
    2840:	0e 94 49 13 	call	0x2692	; 0x2692 <_ZN6String6concatEPKcj>
}
    2844:	26 96       	adiw	r28, 0x06	; 6
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	cf 91       	pop	r28
    2852:	df 91       	pop	r29
    2854:	1f 91       	pop	r17
    2856:	0f 91       	pop	r16
    2858:	ff 90       	pop	r15
    285a:	ef 90       	pop	r14
    285c:	08 95       	ret

0000285e <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
    285e:	ef 92       	push	r14
    2860:	ff 92       	push	r15
    2862:	0f 93       	push	r16
    2864:	1f 93       	push	r17
    2866:	df 93       	push	r29
    2868:	cf 93       	push	r28
    286a:	cd b7       	in	r28, 0x3d	; 61
    286c:	de b7       	in	r29, 0x3e	; 62
    286e:	2c 97       	sbiw	r28, 0x0c	; 12
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	7c 01       	movw	r14, r24
    287c:	cb 01       	movw	r24, r22
    287e:	ba 01       	movw	r22, r20
	char buf[12];
	ltoa(num, buf, 10);
    2880:	8e 01       	movw	r16, r28
    2882:	0f 5f       	subi	r16, 0xFF	; 255
    2884:	1f 4f       	sbci	r17, 0xFF	; 255
    2886:	a8 01       	movw	r20, r16
    2888:	2a e0       	ldi	r18, 0x0A	; 10
    288a:	30 e0       	ldi	r19, 0x00	; 0
    288c:	0e 94 f6 1c 	call	0x39ec	; 0x39ec <ltoa>
	return concat(buf, strlen(buf));
    2890:	f8 01       	movw	r30, r16
    2892:	01 90       	ld	r0, Z+
    2894:	00 20       	and	r0, r0
    2896:	e9 f7       	brne	.-6      	; 0x2892 <_ZN6String6concatEl+0x34>
    2898:	af 01       	movw	r20, r30
    289a:	41 50       	subi	r20, 0x01	; 1
    289c:	50 40       	sbci	r21, 0x00	; 0
    289e:	40 1b       	sub	r20, r16
    28a0:	51 0b       	sbc	r21, r17
    28a2:	c7 01       	movw	r24, r14
    28a4:	b8 01       	movw	r22, r16
    28a6:	0e 94 49 13 	call	0x2692	; 0x2692 <_ZN6String6concatEPKcj>
}
    28aa:	2c 96       	adiw	r28, 0x0c	; 12
    28ac:	0f b6       	in	r0, 0x3f	; 63
    28ae:	f8 94       	cli
    28b0:	de bf       	out	0x3e, r29	; 62
    28b2:	0f be       	out	0x3f, r0	; 63
    28b4:	cd bf       	out	0x3d, r28	; 61
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	1f 91       	pop	r17
    28bc:	0f 91       	pop	r16
    28be:	ff 90       	pop	r15
    28c0:	ef 90       	pop	r14
    28c2:	08 95       	ret

000028c4 <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    28c4:	ef 92       	push	r14
    28c6:	ff 92       	push	r15
    28c8:	0f 93       	push	r16
    28ca:	1f 93       	push	r17
    28cc:	df 93       	push	r29
    28ce:	cf 93       	push	r28
    28d0:	cd b7       	in	r28, 0x3d	; 61
    28d2:	de b7       	in	r29, 0x3e	; 62
    28d4:	2b 97       	sbiw	r28, 0x0b	; 11
    28d6:	0f b6       	in	r0, 0x3f	; 63
    28d8:	f8 94       	cli
    28da:	de bf       	out	0x3e, r29	; 62
    28dc:	0f be       	out	0x3f, r0	; 63
    28de:	cd bf       	out	0x3d, r28	; 61
    28e0:	7c 01       	movw	r14, r24
    28e2:	cb 01       	movw	r24, r22
    28e4:	ba 01       	movw	r22, r20
	char buf[11];
	ultoa(num, buf, 10);
    28e6:	8e 01       	movw	r16, r28
    28e8:	0f 5f       	subi	r16, 0xFF	; 255
    28ea:	1f 4f       	sbci	r17, 0xFF	; 255
    28ec:	a8 01       	movw	r20, r16
    28ee:	2a e0       	ldi	r18, 0x0A	; 10
    28f0:	30 e0       	ldi	r19, 0x00	; 0
    28f2:	0e 94 3f 1d 	call	0x3a7e	; 0x3a7e <ultoa>
	return concat(buf, strlen(buf));
    28f6:	f8 01       	movw	r30, r16
    28f8:	01 90       	ld	r0, Z+
    28fa:	00 20       	and	r0, r0
    28fc:	e9 f7       	brne	.-6      	; 0x28f8 <_ZN6String6concatEm+0x34>
    28fe:	af 01       	movw	r20, r30
    2900:	41 50       	subi	r20, 0x01	; 1
    2902:	50 40       	sbci	r21, 0x00	; 0
    2904:	40 1b       	sub	r20, r16
    2906:	51 0b       	sbc	r21, r17
    2908:	c7 01       	movw	r24, r14
    290a:	b8 01       	movw	r22, r16
    290c:	0e 94 49 13 	call	0x2692	; 0x2692 <_ZN6String6concatEPKcj>
}
    2910:	2b 96       	adiw	r28, 0x0b	; 11
    2912:	0f b6       	in	r0, 0x3f	; 63
    2914:	f8 94       	cli
    2916:	de bf       	out	0x3e, r29	; 62
    2918:	0f be       	out	0x3f, r0	; 63
    291a:	cd bf       	out	0x3d, r28	; 61
    291c:	cf 91       	pop	r28
    291e:	df 91       	pop	r29
    2920:	1f 91       	pop	r17
    2922:	0f 91       	pop	r16
    2924:	ff 90       	pop	r15
    2926:	ef 90       	pop	r14
    2928:	08 95       	ret

0000292a <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    292a:	0f 93       	push	r16
    292c:	1f 93       	push	r17
    292e:	8c 01       	movw	r16, r24
    2930:	fb 01       	movw	r30, r22
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    2932:	60 81       	ld	r22, Z
    2934:	71 81       	ldd	r23, Z+1	; 0x01
    2936:	44 81       	ldd	r20, Z+4	; 0x04
    2938:	55 81       	ldd	r21, Z+5	; 0x05
    293a:	0e 94 49 13 	call	0x2692	; 0x2692 <_ZN6String6concatEPKcj>
    293e:	88 23       	and	r24, r24
    2940:	19 f4       	brne	.+6      	; 0x2948 <_ZplRK15StringSumHelperRK6String+0x1e>
    2942:	c8 01       	movw	r24, r16
    2944:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN6String10invalidateEv>
	return a;
}
    2948:	c8 01       	movw	r24, r16
    294a:	1f 91       	pop	r17
    294c:	0f 91       	pop	r16
    294e:	08 95       	ret

00002950 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    2950:	0f 93       	push	r16
    2952:	1f 93       	push	r17
    2954:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    2956:	61 15       	cp	r22, r1
    2958:	71 05       	cpc	r23, r1
    295a:	69 f0       	breq	.+26     	; 0x2976 <_ZplRK15StringSumHelperPKc+0x26>
    295c:	db 01       	movw	r26, r22
    295e:	0d 90       	ld	r0, X+
    2960:	00 20       	and	r0, r0
    2962:	e9 f7       	brne	.-6      	; 0x295e <_ZplRK15StringSumHelperPKc+0xe>
    2964:	ad 01       	movw	r20, r26
    2966:	41 50       	subi	r20, 0x01	; 1
    2968:	50 40       	sbci	r21, 0x00	; 0
    296a:	46 1b       	sub	r20, r22
    296c:	57 0b       	sbc	r21, r23
    296e:	0e 94 49 13 	call	0x2692	; 0x2692 <_ZN6String6concatEPKcj>
    2972:	88 23       	and	r24, r24
    2974:	19 f4       	brne	.+6      	; 0x297c <_ZplRK15StringSumHelperPKc+0x2c>
    2976:	c8 01       	movw	r24, r16
    2978:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN6String10invalidateEv>
	return a;
}
    297c:	c8 01       	movw	r24, r16
    297e:	1f 91       	pop	r17
    2980:	0f 91       	pop	r16
    2982:	08 95       	ret

00002984 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    2984:	0f 93       	push	r16
    2986:	1f 93       	push	r17
    2988:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    298a:	0e 94 8e 13 	call	0x271c	; 0x271c <_ZN6String6concatEc>
    298e:	88 23       	and	r24, r24
    2990:	19 f4       	brne	.+6      	; 0x2998 <_ZplRK15StringSumHelperc+0x14>
    2992:	c8 01       	movw	r24, r16
    2994:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN6String10invalidateEv>
	return a;
}
    2998:	c8 01       	movw	r24, r16
    299a:	1f 91       	pop	r17
    299c:	0f 91       	pop	r16
    299e:	08 95       	ret

000029a0 <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
    29a0:	0f 93       	push	r16
    29a2:	1f 93       	push	r17
    29a4:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    29a6:	0e 94 a1 13 	call	0x2742	; 0x2742 <_ZN6String6concatEh>
    29aa:	88 23       	and	r24, r24
    29ac:	19 f4       	brne	.+6      	; 0x29b4 <_ZplRK15StringSumHelperh+0x14>
    29ae:	c8 01       	movw	r24, r16
    29b0:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN6String10invalidateEv>
	return a;
}
    29b4:	c8 01       	movw	r24, r16
    29b6:	1f 91       	pop	r17
    29b8:	0f 91       	pop	r16
    29ba:	08 95       	ret

000029bc <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    29bc:	0f 93       	push	r16
    29be:	1f 93       	push	r17
    29c0:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    29c2:	0e 94 ce 13 	call	0x279c	; 0x279c <_ZN6String6concatEi>
    29c6:	88 23       	and	r24, r24
    29c8:	19 f4       	brne	.+6      	; 0x29d0 <_ZplRK15StringSumHelperi+0x14>
    29ca:	c8 01       	movw	r24, r16
    29cc:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN6String10invalidateEv>
	return a;
}
    29d0:	c8 01       	movw	r24, r16
    29d2:	1f 91       	pop	r17
    29d4:	0f 91       	pop	r16
    29d6:	08 95       	ret

000029d8 <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    29d8:	0f 93       	push	r16
    29da:	1f 93       	push	r17
    29dc:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    29de:	0e 94 00 14 	call	0x2800	; 0x2800 <_ZN6String6concatEj>
    29e2:	88 23       	and	r24, r24
    29e4:	19 f4       	brne	.+6      	; 0x29ec <_ZplRK15StringSumHelperj+0x14>
    29e6:	c8 01       	movw	r24, r16
    29e8:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN6String10invalidateEv>
	return a;
}
    29ec:	c8 01       	movw	r24, r16
    29ee:	1f 91       	pop	r17
    29f0:	0f 91       	pop	r16
    29f2:	08 95       	ret

000029f4 <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    29f4:	0f 93       	push	r16
    29f6:	1f 93       	push	r17
    29f8:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    29fa:	0e 94 2f 14 	call	0x285e	; 0x285e <_ZN6String6concatEl>
    29fe:	88 23       	and	r24, r24
    2a00:	19 f4       	brne	.+6      	; 0x2a08 <_ZplRK15StringSumHelperl+0x14>
    2a02:	c8 01       	movw	r24, r16
    2a04:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN6String10invalidateEv>
	return a;
}
    2a08:	c8 01       	movw	r24, r16
    2a0a:	1f 91       	pop	r17
    2a0c:	0f 91       	pop	r16
    2a0e:	08 95       	ret

00002a10 <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    2a10:	0f 93       	push	r16
    2a12:	1f 93       	push	r17
    2a14:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    2a16:	0e 94 62 14 	call	0x28c4	; 0x28c4 <_ZN6String6concatEm>
    2a1a:	88 23       	and	r24, r24
    2a1c:	19 f4       	brne	.+6      	; 0x2a24 <_ZplRK15StringSumHelperm+0x14>
    2a1e:	c8 01       	movw	r24, r16
    2a20:	0e 94 78 11 	call	0x22f0	; 0x22f0 <_ZN6String10invalidateEv>
	return a;
}
    2a24:	c8 01       	movw	r24, r16
    2a26:	1f 91       	pop	r17
    2a28:	0f 91       	pop	r16
    2a2a:	08 95       	ret

00002a2c <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    2a2c:	cf 93       	push	r28
    2a2e:	df 93       	push	r29
    2a30:	fc 01       	movw	r30, r24
    2a32:	db 01       	movw	r26, r22
	if (!buffer || !s.buffer) {
    2a34:	80 81       	ld	r24, Z
    2a36:	91 81       	ldd	r25, Z+1	; 0x01
    2a38:	00 97       	sbiw	r24, 0x00	; 0
    2a3a:	31 f0       	breq	.+12     	; 0x2a48 <_ZNK6String9compareToERKS_+0x1c>
    2a3c:	6d 91       	ld	r22, X+
    2a3e:	7c 91       	ld	r23, X
    2a40:	11 97       	sbiw	r26, 0x01	; 1
    2a42:	61 15       	cp	r22, r1
    2a44:	71 05       	cpc	r23, r1
    2a46:	e9 f4       	brne	.+58     	; 0x2a82 <_ZNK6String9compareToERKS_+0x56>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    2a48:	cd 91       	ld	r28, X+
    2a4a:	dc 91       	ld	r29, X
    2a4c:	11 97       	sbiw	r26, 0x01	; 1
    2a4e:	20 97       	sbiw	r28, 0x00	; 0
    2a50:	69 f0       	breq	.+26     	; 0x2a6c <_ZNK6String9compareToERKS_+0x40>
    2a52:	14 96       	adiw	r26, 0x04	; 4
    2a54:	2d 91       	ld	r18, X+
    2a56:	3c 91       	ld	r19, X
    2a58:	15 97       	sbiw	r26, 0x05	; 5
    2a5a:	21 15       	cp	r18, r1
    2a5c:	31 05       	cpc	r19, r1
    2a5e:	31 f0       	breq	.+12     	; 0x2a6c <_ZNK6String9compareToERKS_+0x40>
    2a60:	28 81       	ld	r18, Y
    2a62:	30 e0       	ldi	r19, 0x00	; 0
    2a64:	30 95       	com	r19
    2a66:	21 95       	neg	r18
    2a68:	3f 4f       	sbci	r19, 0xFF	; 255
    2a6a:	12 c0       	rjmp	.+36     	; 0x2a90 <_ZNK6String9compareToERKS_+0x64>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    2a6c:	00 97       	sbiw	r24, 0x00	; 0
    2a6e:	71 f0       	breq	.+28     	; 0x2a8c <_ZNK6String9compareToERKS_+0x60>
    2a70:	24 81       	ldd	r18, Z+4	; 0x04
    2a72:	35 81       	ldd	r19, Z+5	; 0x05
    2a74:	21 15       	cp	r18, r1
    2a76:	31 05       	cpc	r19, r1
    2a78:	49 f0       	breq	.+18     	; 0x2a8c <_ZNK6String9compareToERKS_+0x60>
    2a7a:	fc 01       	movw	r30, r24
    2a7c:	20 81       	ld	r18, Z
    2a7e:	30 e0       	ldi	r19, 0x00	; 0
    2a80:	07 c0       	rjmp	.+14     	; 0x2a90 <_ZNK6String9compareToERKS_+0x64>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    2a82:	0e 94 83 1c 	call	0x3906	; 0x3906 <strcmp>
    2a86:	28 2f       	mov	r18, r24
    2a88:	39 2f       	mov	r19, r25
    2a8a:	02 c0       	rjmp	.+4      	; 0x2a90 <_ZNK6String9compareToERKS_+0x64>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    2a90:	c9 01       	movw	r24, r18
    2a92:	df 91       	pop	r29
    2a94:	cf 91       	pop	r28
    2a96:	08 95       	ret

00002a98 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    2a98:	fc 01       	movw	r30, r24
    2a9a:	44 81       	ldd	r20, Z+4	; 0x04
    2a9c:	55 81       	ldd	r21, Z+5	; 0x05
    2a9e:	fb 01       	movw	r30, r22
    2aa0:	24 81       	ldd	r18, Z+4	; 0x04
    2aa2:	35 81       	ldd	r19, Z+5	; 0x05
    2aa4:	42 17       	cp	r20, r18
    2aa6:	53 07       	cpc	r21, r19
    2aa8:	29 f4       	brne	.+10     	; 0x2ab4 <_ZNK6String6equalsERKS_+0x1c>
    2aaa:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <_ZNK6String9compareToERKS_>
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    2aae:	21 e0       	ldi	r18, 0x01	; 1
    2ab0:	00 97       	sbiw	r24, 0x00	; 0
    2ab2:	09 f0       	breq	.+2      	; 0x2ab6 <_ZNK6String6equalsERKS_+0x1e>
{
	return (len == s2.len && compareTo(s2) == 0);
    2ab4:	20 e0       	ldi	r18, 0x00	; 0
}
    2ab6:	82 2f       	mov	r24, r18
    2ab8:	08 95       	ret

00002aba <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
    2aba:	fc 01       	movw	r30, r24
	if (len == 0) return (cstr == NULL || *cstr == 0);
    2abc:	84 81       	ldd	r24, Z+4	; 0x04
    2abe:	95 81       	ldd	r25, Z+5	; 0x05
    2ac0:	00 97       	sbiw	r24, 0x00	; 0
    2ac2:	41 f4       	brne	.+16     	; 0x2ad4 <_ZNK6String6equalsEPKc+0x1a>
    2ac4:	61 15       	cp	r22, r1
    2ac6:	71 05       	cpc	r23, r1
    2ac8:	19 f0       	breq	.+6      	; 0x2ad0 <_ZNK6String6equalsEPKc+0x16>
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	fb 01       	movw	r30, r22
    2ace:	09 c0       	rjmp	.+18     	; 0x2ae2 <_ZNK6String6equalsEPKc+0x28>
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	08 95       	ret
    2ad4:	01 90       	ld	r0, Z+
    2ad6:	f0 81       	ld	r31, Z
    2ad8:	e0 2d       	mov	r30, r0
	if (cstr == NULL) return buffer[0] == 0;
    2ada:	61 15       	cp	r22, r1
    2adc:	71 05       	cpc	r23, r1
    2ade:	31 f4       	brne	.+12     	; 0x2aec <_ZNK6String6equalsEPKc+0x32>
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	90 81       	ld	r25, Z
    2ae4:	99 23       	and	r25, r25
    2ae6:	59 f0       	breq	.+22     	; 0x2afe <_ZNK6String6equalsEPKc+0x44>
    2ae8:	80 e0       	ldi	r24, 0x00	; 0
    2aea:	08 95       	ret
	return strcmp(buffer, cstr) == 0;
    2aec:	cf 01       	movw	r24, r30
    2aee:	0e 94 83 1c 	call	0x3906	; 0x3906 <strcmp>
    2af2:	9c 01       	movw	r18, r24
    2af4:	81 e0       	ldi	r24, 0x01	; 1
    2af6:	21 15       	cp	r18, r1
    2af8:	31 05       	cpc	r19, r1
    2afa:	09 f0       	breq	.+2      	; 0x2afe <_ZNK6String6equalsEPKc+0x44>
    2afc:	80 e0       	ldi	r24, 0x00	; 0
}
    2afe:	08 95       	ret

00002b00 <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    2b00:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <_ZNK6String9compareToERKS_>
}
    2b04:	89 2f       	mov	r24, r25
    2b06:	88 1f       	adc	r24, r24
    2b08:	88 27       	eor	r24, r24
    2b0a:	88 1f       	adc	r24, r24
    2b0c:	08 95       	ret

00002b0e <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    2b0e:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <_ZNK6String9compareToERKS_>
    2b12:	21 e0       	ldi	r18, 0x01	; 1
    2b14:	18 16       	cp	r1, r24
    2b16:	19 06       	cpc	r1, r25
    2b18:	0c f0       	brlt	.+2      	; 0x2b1c <_ZNK6StringgtERKS_+0xe>
    2b1a:	20 e0       	ldi	r18, 0x00	; 0
}
    2b1c:	82 2f       	mov	r24, r18
    2b1e:	08 95       	ret

00002b20 <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    2b20:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <_ZNK6String9compareToERKS_>
    2b24:	21 e0       	ldi	r18, 0x01	; 1
    2b26:	18 16       	cp	r1, r24
    2b28:	19 06       	cpc	r1, r25
    2b2a:	0c f4       	brge	.+2      	; 0x2b2e <_ZNK6StringleERKS_+0xe>
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
}
    2b2e:	82 2f       	mov	r24, r18
    2b30:	08 95       	ret

00002b32 <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    2b32:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <_ZNK6String9compareToERKS_>
    2b36:	89 2f       	mov	r24, r25
    2b38:	80 95       	com	r24
}
    2b3a:	88 1f       	adc	r24, r24
    2b3c:	88 27       	eor	r24, r24
    2b3e:	88 1f       	adc	r24, r24
    2b40:	08 95       	ret

00002b42 <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    2b42:	ef 92       	push	r14
    2b44:	ff 92       	push	r15
    2b46:	0f 93       	push	r16
    2b48:	1f 93       	push	r17
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	fc 01       	movw	r30, r24
    2b50:	db 01       	movw	r26, r22
	if (this == &s2) return 1;
    2b52:	86 17       	cp	r24, r22
    2b54:	97 07       	cpc	r25, r23
    2b56:	29 f1       	breq	.+74     	; 0x2ba2 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
	if (len != s2.len) return 0;
    2b58:	84 81       	ldd	r24, Z+4	; 0x04
    2b5a:	95 81       	ldd	r25, Z+5	; 0x05
    2b5c:	14 96       	adiw	r26, 0x04	; 4
    2b5e:	2d 91       	ld	r18, X+
    2b60:	3c 91       	ld	r19, X
    2b62:	15 97       	sbiw	r26, 0x05	; 5
    2b64:	82 17       	cp	r24, r18
    2b66:	93 07       	cpc	r25, r19
    2b68:	f1 f4       	brne	.+60     	; 0x2ba6 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len == 0) return 1;
    2b6a:	00 97       	sbiw	r24, 0x00	; 0
    2b6c:	d1 f0       	breq	.+52     	; 0x2ba2 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
    2b6e:	00 81       	ld	r16, Z
    2b70:	11 81       	ldd	r17, Z+1	; 0x01
    2b72:	cd 91       	ld	r28, X+
    2b74:	dc 91       	ld	r29, X
    2b76:	11 97       	sbiw	r26, 0x01	; 1
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    2b78:	0f c0       	rjmp	.+30     	; 0x2b98 <_ZNK6String16equalsIgnoreCaseERKS_+0x56>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    2b7a:	99 27       	eor	r25, r25
    2b7c:	87 fd       	sbrc	r24, 7
    2b7e:	90 95       	com	r25
    2b80:	0e 94 4d 1c 	call	0x389a	; 0x389a <tolower>
    2b84:	7c 01       	movw	r14, r24
    2b86:	89 91       	ld	r24, Y+
    2b88:	99 27       	eor	r25, r25
    2b8a:	87 fd       	sbrc	r24, 7
    2b8c:	90 95       	com	r25
    2b8e:	0e 94 4d 1c 	call	0x389a	; 0x389a <tolower>
    2b92:	e8 16       	cp	r14, r24
    2b94:	f9 06       	cpc	r15, r25
    2b96:	39 f4       	brne	.+14     	; 0x2ba6 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    2b98:	f8 01       	movw	r30, r16
    2b9a:	81 91       	ld	r24, Z+
    2b9c:	8f 01       	movw	r16, r30
    2b9e:	88 23       	and	r24, r24
    2ba0:	61 f7       	brne	.-40     	; 0x2b7a <_ZNK6String16equalsIgnoreCaseERKS_+0x38>

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	01 c0       	rjmp	.+2      	; 0x2ba8 <_ZNK6String16equalsIgnoreCaseERKS_+0x66>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    2ba6:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return 1;
}
    2ba8:	df 91       	pop	r29
    2baa:	cf 91       	pop	r28
    2bac:	1f 91       	pop	r17
    2bae:	0f 91       	pop	r16
    2bb0:	ff 90       	pop	r15
    2bb2:	ef 90       	pop	r14
    2bb4:	08 95       	ret

00002bb6 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	db 01       	movw	r26, r22
    2bba:	ca 01       	movw	r24, r20
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    2bbc:	14 96       	adiw	r26, 0x04	; 4
    2bbe:	4d 91       	ld	r20, X+
    2bc0:	5c 91       	ld	r21, X
    2bc2:	15 97       	sbiw	r26, 0x05	; 5
    2bc4:	24 81       	ldd	r18, Z+4	; 0x04
    2bc6:	35 81       	ldd	r19, Z+5	; 0x05
    2bc8:	24 1b       	sub	r18, r20
    2bca:	35 0b       	sbc	r19, r21
    2bcc:	28 17       	cp	r18, r24
    2bce:	39 07       	cpc	r19, r25
    2bd0:	a0 f0       	brcs	.+40     	; 0x2bfa <_ZNK6String10startsWithERKS_j+0x44>
    2bd2:	20 81       	ld	r18, Z
    2bd4:	31 81       	ldd	r19, Z+1	; 0x01
    2bd6:	21 15       	cp	r18, r1
    2bd8:	31 05       	cpc	r19, r1
    2bda:	79 f0       	breq	.+30     	; 0x2bfa <_ZNK6String10startsWithERKS_j+0x44>
    2bdc:	6d 91       	ld	r22, X+
    2bde:	7c 91       	ld	r23, X
    2be0:	11 97       	sbiw	r26, 0x01	; 1
    2be2:	61 15       	cp	r22, r1
    2be4:	71 05       	cpc	r23, r1
    2be6:	59 f0       	breq	.+22     	; 0x2bfe <_ZNK6String10startsWithERKS_j+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    2be8:	82 0f       	add	r24, r18
    2bea:	93 1f       	adc	r25, r19
    2bec:	0e 94 93 1c 	call	0x3926	; 0x3926 <strncmp>
    2bf0:	9c 01       	movw	r18, r24
    2bf2:	81 e0       	ldi	r24, 0x01	; 1
    2bf4:	21 15       	cp	r18, r1
    2bf6:	31 05       	cpc	r19, r1
    2bf8:	19 f0       	breq	.+6      	; 0x2c00 <_ZNK6String10startsWithERKS_j+0x4a>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    2bfa:	80 e0       	ldi	r24, 0x00	; 0
    2bfc:	08 95       	ret
    2bfe:	80 e0       	ldi	r24, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    2c00:	08 95       	ret

00002c02 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    2c02:	fc 01       	movw	r30, r24
    2c04:	44 81       	ldd	r20, Z+4	; 0x04
    2c06:	55 81       	ldd	r21, Z+5	; 0x05
    2c08:	fb 01       	movw	r30, r22
    2c0a:	24 81       	ldd	r18, Z+4	; 0x04
    2c0c:	35 81       	ldd	r19, Z+5	; 0x05
    2c0e:	42 17       	cp	r20, r18
    2c10:	53 07       	cpc	r21, r19
    2c12:	28 f0       	brcs	.+10     	; 0x2c1e <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
    2c14:	40 e0       	ldi	r20, 0x00	; 0
    2c16:	50 e0       	ldi	r21, 0x00	; 0
    2c18:	0e 94 db 15 	call	0x2bb6	; 0x2bb6 <_ZNK6String10startsWithERKS_j>
    2c1c:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    2c1e:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
    2c20:	08 95       	ret

00002c22 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    2c22:	fc 01       	movw	r30, r24
    2c24:	db 01       	movw	r26, r22
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    2c26:	84 81       	ldd	r24, Z+4	; 0x04
    2c28:	95 81       	ldd	r25, Z+5	; 0x05
    2c2a:	14 96       	adiw	r26, 0x04	; 4
    2c2c:	4d 91       	ld	r20, X+
    2c2e:	5c 91       	ld	r21, X
    2c30:	15 97       	sbiw	r26, 0x05	; 5
    2c32:	84 17       	cp	r24, r20
    2c34:	95 07       	cpc	r25, r21
    2c36:	b0 f0       	brcs	.+44     	; 0x2c64 <_ZNK6String8endsWithERKS_+0x42>
    2c38:	20 81       	ld	r18, Z
    2c3a:	31 81       	ldd	r19, Z+1	; 0x01
    2c3c:	21 15       	cp	r18, r1
    2c3e:	31 05       	cpc	r19, r1
    2c40:	89 f0       	breq	.+34     	; 0x2c64 <_ZNK6String8endsWithERKS_+0x42>
    2c42:	6d 91       	ld	r22, X+
    2c44:	7c 91       	ld	r23, X
    2c46:	11 97       	sbiw	r26, 0x01	; 1
    2c48:	61 15       	cp	r22, r1
    2c4a:	71 05       	cpc	r23, r1
    2c4c:	69 f0       	breq	.+26     	; 0x2c68 <_ZNK6String8endsWithERKS_+0x46>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    2c4e:	84 1b       	sub	r24, r20
    2c50:	95 0b       	sbc	r25, r21
    2c52:	82 0f       	add	r24, r18
    2c54:	93 1f       	adc	r25, r19
    2c56:	0e 94 83 1c 	call	0x3906	; 0x3906 <strcmp>
    2c5a:	9c 01       	movw	r18, r24
    2c5c:	81 e0       	ldi	r24, 0x01	; 1
    2c5e:	21 15       	cp	r18, r1
    2c60:	31 05       	cpc	r19, r1
    2c62:	19 f0       	breq	.+6      	; 0x2c6a <_ZNK6String8endsWithERKS_+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    2c64:	80 e0       	ldi	r24, 0x00	; 0
    2c66:	08 95       	ret
    2c68:	80 e0       	ldi	r24, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    2c6a:	08 95       	ret

00002c6c <_ZN6String9setCharAtEjc>:
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
    2c6c:	fc 01       	movw	r30, r24
	if (loc < len) buffer[loc] = c;
    2c6e:	84 81       	ldd	r24, Z+4	; 0x04
    2c70:	95 81       	ldd	r25, Z+5	; 0x05
    2c72:	68 17       	cp	r22, r24
    2c74:	79 07       	cpc	r23, r25
    2c76:	30 f4       	brcc	.+12     	; 0x2c84 <_ZN6String9setCharAtEjc+0x18>
    2c78:	01 90       	ld	r0, Z+
    2c7a:	f0 81       	ld	r31, Z
    2c7c:	e0 2d       	mov	r30, r0
    2c7e:	e6 0f       	add	r30, r22
    2c80:	f7 1f       	adc	r31, r23
    2c82:	40 83       	st	Z, r20
    2c84:	08 95       	ret

00002c86 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
    2c86:	fc 01       	movw	r30, r24
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    2c88:	84 81       	ldd	r24, Z+4	; 0x04
    2c8a:	95 81       	ldd	r25, Z+5	; 0x05
    2c8c:	68 17       	cp	r22, r24
    2c8e:	79 07       	cpc	r23, r25
    2c90:	20 f4       	brcc	.+8      	; 0x2c9a <_ZN6StringixEj+0x14>
    2c92:	80 81       	ld	r24, Z
    2c94:	91 81       	ldd	r25, Z+1	; 0x01
    2c96:	00 97       	sbiw	r24, 0x00	; 0
    2c98:	29 f4       	brne	.+10     	; 0x2ca4 <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    2c9a:	10 92 1c 03 	sts	0x031C, r1
		return dummy_writable_char;
    2c9e:	6c e1       	ldi	r22, 0x1C	; 28
    2ca0:	73 e0       	ldi	r23, 0x03	; 3
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <_ZN6StringixEj+0x22>
	}
	return buffer[index];
    2ca4:	68 0f       	add	r22, r24
    2ca6:	79 1f       	adc	r23, r25
}
    2ca8:	cb 01       	movw	r24, r22
    2caa:	08 95       	ret

00002cac <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    2cac:	fc 01       	movw	r30, r24
	if (index >= len || !buffer) return 0;
    2cae:	84 81       	ldd	r24, Z+4	; 0x04
    2cb0:	95 81       	ldd	r25, Z+5	; 0x05
    2cb2:	68 17       	cp	r22, r24
    2cb4:	79 07       	cpc	r23, r25
    2cb6:	48 f4       	brcc	.+18     	; 0x2cca <_ZNK6StringixEj+0x1e>
    2cb8:	80 81       	ld	r24, Z
    2cba:	91 81       	ldd	r25, Z+1	; 0x01
    2cbc:	00 97       	sbiw	r24, 0x00	; 0
    2cbe:	39 f0       	breq	.+14     	; 0x2cce <_ZNK6StringixEj+0x22>
	return buffer[index];
    2cc0:	68 0f       	add	r22, r24
    2cc2:	79 1f       	adc	r23, r25
    2cc4:	fb 01       	movw	r30, r22
    2cc6:	80 81       	ld	r24, Z
    2cc8:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	08 95       	ret
    2cce:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    2cd0:	08 95       	ret

00002cd2 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    2cd2:	0e 94 56 16 	call	0x2cac	; 0x2cac <_ZNK6StringixEj>
}
    2cd6:	08 95       	ret

00002cd8 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    2cd8:	0f 93       	push	r16
    2cda:	1f 93       	push	r17
    2cdc:	cf 93       	push	r28
    2cde:	df 93       	push	r29
    2ce0:	fc 01       	movw	r30, r24
    2ce2:	8b 01       	movw	r16, r22
	if (!bufsize || !buf) return;
    2ce4:	41 15       	cp	r20, r1
    2ce6:	51 05       	cpc	r21, r1
    2ce8:	f1 f0       	breq	.+60     	; 0x2d26 <_ZNK6String8getBytesEPhjj+0x4e>
    2cea:	61 15       	cp	r22, r1
    2cec:	71 05       	cpc	r23, r1
    2cee:	d9 f0       	breq	.+54     	; 0x2d26 <_ZNK6String8getBytesEPhjj+0x4e>
	if (index >= len) {
    2cf0:	c4 81       	ldd	r28, Z+4	; 0x04
    2cf2:	d5 81       	ldd	r29, Z+5	; 0x05
    2cf4:	2c 17       	cp	r18, r28
    2cf6:	3d 07       	cpc	r19, r29
    2cf8:	18 f0       	brcs	.+6      	; 0x2d00 <_ZNK6String8getBytesEPhjj+0x28>
		buf[0] = 0;
    2cfa:	fb 01       	movw	r30, r22
    2cfc:	10 82       	st	Z, r1
		return;
    2cfe:	13 c0       	rjmp	.+38     	; 0x2d26 <_ZNK6String8getBytesEPhjj+0x4e>
	}
	unsigned int n = bufsize - 1;
    2d00:	41 50       	subi	r20, 0x01	; 1
    2d02:	50 40       	sbci	r21, 0x00	; 0
	if (n > len - index) n = len - index;
    2d04:	c2 1b       	sub	r28, r18
    2d06:	d3 0b       	sbc	r29, r19
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    2d08:	4c 17       	cp	r20, r28
    2d0a:	5d 07       	cpc	r21, r29
    2d0c:	08 f4       	brcc	.+2      	; 0x2d10 <_ZNK6String8getBytesEPhjj+0x38>
    2d0e:	ea 01       	movw	r28, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    2d10:	60 81       	ld	r22, Z
    2d12:	71 81       	ldd	r23, Z+1	; 0x01
    2d14:	62 0f       	add	r22, r18
    2d16:	73 1f       	adc	r23, r19
    2d18:	c8 01       	movw	r24, r16
    2d1a:	ae 01       	movw	r20, r28
    2d1c:	0e 94 a1 1c 	call	0x3942	; 0x3942 <strncpy>
	buf[n] = 0;
    2d20:	c0 0f       	add	r28, r16
    2d22:	d1 1f       	adc	r29, r17
    2d24:	18 82       	st	Y, r1
}
    2d26:	df 91       	pop	r29
    2d28:	cf 91       	pop	r28
    2d2a:	1f 91       	pop	r17
    2d2c:	0f 91       	pop	r16
    2d2e:	08 95       	ret

00002d30 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    2d30:	cf 93       	push	r28
    2d32:	df 93       	push	r29
    2d34:	fc 01       	movw	r30, r24
    2d36:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    2d38:	24 81       	ldd	r18, Z+4	; 0x04
    2d3a:	35 81       	ldd	r19, Z+5	; 0x05
    2d3c:	42 17       	cp	r20, r18
    2d3e:	53 07       	cpc	r21, r19
    2d40:	78 f4       	brcc	.+30     	; 0x2d60 <_ZNK6String7indexOfEcj+0x30>
	const char* temp = strchr(buffer + fromIndex, ch);
    2d42:	c0 81       	ld	r28, Z
    2d44:	d1 81       	ldd	r29, Z+1	; 0x01
    2d46:	77 27       	eor	r23, r23
    2d48:	67 fd       	sbrc	r22, 7
    2d4a:	70 95       	com	r23
    2d4c:	8c 0f       	add	r24, r28
    2d4e:	9d 1f       	adc	r25, r29
    2d50:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <strchr>
	if (temp == NULL) return -1;
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	21 f0       	breq	.+8      	; 0x2d60 <_ZNK6String7indexOfEcj+0x30>
	return temp - buffer;
    2d58:	9c 01       	movw	r18, r24
    2d5a:	2c 1b       	sub	r18, r28
    2d5c:	3d 0b       	sbc	r19, r29
    2d5e:	02 c0       	rjmp	.+4      	; 0x2d64 <_ZNK6String7indexOfEcj+0x34>

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
    2d60:	2f ef       	ldi	r18, 0xFF	; 255
    2d62:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    2d64:	c9 01       	movw	r24, r18
    2d66:	df 91       	pop	r29
    2d68:	cf 91       	pop	r28
    2d6a:	08 95       	ret

00002d6c <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    2d6c:	40 e0       	ldi	r20, 0x00	; 0
    2d6e:	50 e0       	ldi	r21, 0x00	; 0
    2d70:	0e 94 98 16 	call	0x2d30	; 0x2d30 <_ZNK6String7indexOfEcj>
}
    2d74:	08 95       	ret

00002d76 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    2d76:	cf 93       	push	r28
    2d78:	df 93       	push	r29
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    2d7e:	24 81       	ldd	r18, Z+4	; 0x04
    2d80:	35 81       	ldd	r19, Z+5	; 0x05
    2d82:	42 17       	cp	r20, r18
    2d84:	53 07       	cpc	r21, r19
    2d86:	78 f4       	brcc	.+30     	; 0x2da6 <_ZNK6String7indexOfERKS_j+0x30>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    2d88:	c0 81       	ld	r28, Z
    2d8a:	d1 81       	ldd	r29, Z+1	; 0x01
    2d8c:	fb 01       	movw	r30, r22
    2d8e:	60 81       	ld	r22, Z
    2d90:	71 81       	ldd	r23, Z+1	; 0x01
    2d92:	8c 0f       	add	r24, r28
    2d94:	9d 1f       	adc	r25, r29
    2d96:	0e 94 bb 1c 	call	0x3976	; 0x3976 <strstr>
	if (found == NULL) return -1;
    2d9a:	00 97       	sbiw	r24, 0x00	; 0
    2d9c:	21 f0       	breq	.+8      	; 0x2da6 <_ZNK6String7indexOfERKS_j+0x30>
	return found - buffer;
    2d9e:	9c 01       	movw	r18, r24
    2da0:	2c 1b       	sub	r18, r28
    2da2:	3d 0b       	sbc	r19, r29
    2da4:	02 c0       	rjmp	.+4      	; 0x2daa <_ZNK6String7indexOfERKS_j+0x34>

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
    2da6:	2f ef       	ldi	r18, 0xFF	; 255
    2da8:	3f ef       	ldi	r19, 0xFF	; 255
	return found - buffer;
}
    2daa:	c9 01       	movw	r24, r18
    2dac:	df 91       	pop	r29
    2dae:	cf 91       	pop	r28
    2db0:	08 95       	ret

00002db2 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    2db2:	40 e0       	ldi	r20, 0x00	; 0
    2db4:	50 e0       	ldi	r21, 0x00	; 0
    2db6:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <_ZNK6String7indexOfERKS_j>
}
    2dba:	08 95       	ret

00002dbc <_ZNK6String11lastIndexOfEcj>:
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    2dbc:	df 92       	push	r13
    2dbe:	ef 92       	push	r14
    2dc0:	ff 92       	push	r15
    2dc2:	0f 93       	push	r16
    2dc4:	1f 93       	push	r17
    2dc6:	cf 93       	push	r28
    2dc8:	df 93       	push	r29
    2dca:	ec 01       	movw	r28, r24
	if (fromIndex >= len || fromIndex < 0) return -1;
    2dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dce:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd0:	48 17       	cp	r20, r24
    2dd2:	59 07       	cpc	r21, r25
    2dd4:	f8 f4       	brcc	.+62     	; 0x2e14 <_ZNK6String11lastIndexOfEcj+0x58>
	char tempchar = buffer[fromIndex + 1];
    2dd6:	7a 01       	movw	r14, r20
    2dd8:	08 94       	sec
    2dda:	e1 1c       	adc	r14, r1
    2ddc:	f1 1c       	adc	r15, r1
    2dde:	e8 81       	ld	r30, Y
    2de0:	f9 81       	ldd	r31, Y+1	; 0x01
    2de2:	ee 0d       	add	r30, r14
    2de4:	ff 1d       	adc	r31, r15
    2de6:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    2de8:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    2dea:	08 81       	ld	r16, Y
    2dec:	19 81       	ldd	r17, Y+1	; 0x01
    2dee:	77 27       	eor	r23, r23
    2df0:	67 fd       	sbrc	r22, 7
    2df2:	70 95       	com	r23
    2df4:	c8 01       	movw	r24, r16
    2df6:	0e 94 b0 1c 	call	0x3960	; 0x3960 <strrchr>
	buffer[fromIndex + 1] = tempchar;
    2dfa:	0e 0d       	add	r16, r14
    2dfc:	1f 1d       	adc	r17, r15
    2dfe:	f8 01       	movw	r30, r16
    2e00:	d0 82       	st	Z, r13
	if (temp == NULL) return -1;
    2e02:	00 97       	sbiw	r24, 0x00	; 0
    2e04:	39 f0       	breq	.+14     	; 0x2e14 <_ZNK6String11lastIndexOfEcj+0x58>
	return temp - buffer;
    2e06:	28 81       	ld	r18, Y
    2e08:	39 81       	ldd	r19, Y+1	; 0x01
    2e0a:	ac 01       	movw	r20, r24
    2e0c:	42 1b       	sub	r20, r18
    2e0e:	53 0b       	sbc	r21, r19
    2e10:	9a 01       	movw	r18, r20
    2e12:	02 c0       	rjmp	.+4      	; 0x2e18 <_ZNK6String11lastIndexOfEcj+0x5c>
	if (fromIndex >= len || fromIndex < 0) return -1;
	char tempchar = buffer[fromIndex + 1];
	buffer[fromIndex + 1] = '\0';
	char* temp = strrchr( buffer, ch );
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
    2e14:	2f ef       	ldi	r18, 0xFF	; 255
    2e16:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    2e18:	c9 01       	movw	r24, r18
    2e1a:	df 91       	pop	r29
    2e1c:	cf 91       	pop	r28
    2e1e:	1f 91       	pop	r17
    2e20:	0f 91       	pop	r16
    2e22:	ff 90       	pop	r15
    2e24:	ef 90       	pop	r14
    2e26:	df 90       	pop	r13
    2e28:	08 95       	ret

00002e2a <_ZNK6String11lastIndexOfEc>:
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
    2e2a:	fc 01       	movw	r30, r24
    2e2c:	44 81       	ldd	r20, Z+4	; 0x04
    2e2e:	55 81       	ldd	r21, Z+5	; 0x05
    2e30:	41 50       	subi	r20, 0x01	; 1
    2e32:	50 40       	sbci	r21, 0x00	; 0
    2e34:	0e 94 de 16 	call	0x2dbc	; 0x2dbc <_ZNK6String11lastIndexOfEcj>
}
    2e38:	08 95       	ret

00002e3a <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    2e3a:	af 92       	push	r10
    2e3c:	bf 92       	push	r11
    2e3e:	cf 92       	push	r12
    2e40:	df 92       	push	r13
    2e42:	ef 92       	push	r14
    2e44:	ff 92       	push	r15
    2e46:	0f 93       	push	r16
    2e48:	1f 93       	push	r17
    2e4a:	cf 93       	push	r28
    2e4c:	df 93       	push	r29
    2e4e:	fc 01       	movw	r30, r24
    2e50:	6b 01       	movw	r12, r22
    2e52:	8a 01       	movw	r16, r20
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    2e54:	db 01       	movw	r26, r22
    2e56:	14 96       	adiw	r26, 0x04	; 4
    2e58:	2d 91       	ld	r18, X+
    2e5a:	3c 91       	ld	r19, X
    2e5c:	15 97       	sbiw	r26, 0x05	; 5
    2e5e:	21 15       	cp	r18, r1
    2e60:	31 05       	cpc	r19, r1
    2e62:	51 f1       	breq	.+84     	; 0x2eb8 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    2e64:	84 81       	ldd	r24, Z+4	; 0x04
    2e66:	95 81       	ldd	r25, Z+5	; 0x05
    2e68:	00 97       	sbiw	r24, 0x00	; 0
    2e6a:	31 f1       	breq	.+76     	; 0x2eb8 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    2e6c:	82 17       	cp	r24, r18
    2e6e:	93 07       	cpc	r25, r19
    2e70:	18 f1       	brcs	.+70     	; 0x2eb8 <_ZNK6String11lastIndexOfERKS_j+0x7e>
	if (fromIndex >= len) fromIndex = len - 1;
    2e72:	48 17       	cp	r20, r24
    2e74:	59 07       	cpc	r21, r25
    2e76:	18 f0       	brcs	.+6      	; 0x2e7e <_ZNK6String11lastIndexOfERKS_j+0x44>
    2e78:	8c 01       	movw	r16, r24
    2e7a:	01 50       	subi	r16, 0x01	; 1
    2e7c:	10 40       	sbci	r17, 0x00	; 0
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    2e7e:	e0 80       	ld	r14, Z
    2e80:	f1 80       	ldd	r15, Z+1	; 0x01
    2e82:	c7 01       	movw	r24, r14

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    2e84:	cf ef       	ldi	r28, 0xFF	; 255
    2e86:	df ef       	ldi	r29, 0xFF	; 255
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    2e88:	57 01       	movw	r10, r14
    2e8a:	a0 0e       	add	r10, r16
    2e8c:	b1 1e       	adc	r11, r17
    2e8e:	10 c0       	rjmp	.+32     	; 0x2eb0 <_ZNK6String11lastIndexOfERKS_j+0x76>
		p = strstr(p, s2.buffer);
    2e90:	f6 01       	movw	r30, r12
    2e92:	60 81       	ld	r22, Z
    2e94:	71 81       	ldd	r23, Z+1	; 0x01
    2e96:	0e 94 bb 1c 	call	0x3976	; 0x3976 <strstr>
		if (!p) break;
    2e9a:	00 97       	sbiw	r24, 0x00	; 0
    2e9c:	79 f0       	breq	.+30     	; 0x2ebc <_ZNK6String11lastIndexOfERKS_j+0x82>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    2e9e:	9c 01       	movw	r18, r24
    2ea0:	2e 19       	sub	r18, r14
    2ea2:	3f 09       	sbc	r19, r15
    2ea4:	02 17       	cp	r16, r18
    2ea6:	13 07       	cpc	r17, r19
    2ea8:	08 f4       	brcc	.+2      	; 0x2eac <_ZNK6String11lastIndexOfERKS_j+0x72>
    2eaa:	9e 01       	movw	r18, r28
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    2eac:	01 96       	adiw	r24, 0x01	; 1
    2eae:	e9 01       	movw	r28, r18
    2eb0:	a8 16       	cp	r10, r24
    2eb2:	b9 06       	cpc	r11, r25
    2eb4:	68 f7       	brcc	.-38     	; 0x2e90 <_ZNK6String11lastIndexOfERKS_j+0x56>
    2eb6:	02 c0       	rjmp	.+4      	; 0x2ebc <_ZNK6String11lastIndexOfERKS_j+0x82>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    2eb8:	cf ef       	ldi	r28, 0xFF	; 255
    2eba:	df ef       	ldi	r29, 0xFF	; 255
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    2ebc:	ce 01       	movw	r24, r28
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	1f 91       	pop	r17
    2ec4:	0f 91       	pop	r16
    2ec6:	ff 90       	pop	r15
    2ec8:	ef 90       	pop	r14
    2eca:	df 90       	pop	r13
    2ecc:	cf 90       	pop	r12
    2ece:	bf 90       	pop	r11
    2ed0:	af 90       	pop	r10
    2ed2:	08 95       	ret

00002ed4 <_ZNK6String11lastIndexOfERKS_>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    2ed4:	fc 01       	movw	r30, r24
    2ed6:	44 81       	ldd	r20, Z+4	; 0x04
    2ed8:	55 81       	ldd	r21, Z+5	; 0x05
    2eda:	fb 01       	movw	r30, r22
    2edc:	24 81       	ldd	r18, Z+4	; 0x04
    2ede:	35 81       	ldd	r19, Z+5	; 0x05
    2ee0:	42 1b       	sub	r20, r18
    2ee2:	53 0b       	sbc	r21, r19
    2ee4:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_ZNK6String11lastIndexOfERKS_j>
}
    2ee8:	08 95       	ret

00002eea <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    2eea:	af 92       	push	r10
    2eec:	bf 92       	push	r11
    2eee:	cf 92       	push	r12
    2ef0:	df 92       	push	r13
    2ef2:	ef 92       	push	r14
    2ef4:	ff 92       	push	r15
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	f8 2e       	mov	r15, r24
    2f00:	e9 2e       	mov	r14, r25
    2f02:	6b 01       	movw	r12, r22
    2f04:	8a 01       	movw	r16, r20
    2f06:	e9 01       	movw	r28, r18
	if (left > right) {
    2f08:	24 17       	cp	r18, r20
    2f0a:	35 07       	cpc	r19, r21
    2f0c:	48 f4       	brcc	.+18     	; 0x2f20 <_ZNK6String9substringEjj+0x36>
    2f0e:	34 2f       	mov	r19, r20
    2f10:	21 2f       	mov	r18, r17
    2f12:	8e 01       	movw	r16, r28
    2f14:	c9 01       	movw	r24, r18
    2f16:	a9 2e       	mov	r10, r25
    2f18:	e5 01       	movw	r28, r10
    2f1a:	5e 01       	movw	r10, r28
    2f1c:	b2 2e       	mov	r11, r18
    2f1e:	e5 01       	movw	r28, r10
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    2f20:	8f 2d       	mov	r24, r15
    2f22:	9e 2d       	mov	r25, r14
    2f24:	61 e1       	ldi	r22, 0x11	; 17
    2f26:	71 e0       	ldi	r23, 0x01	; 1
    2f28:	0e 94 e4 11 	call	0x23c8	; 0x23c8 <_ZN6StringC1EPKc>
	if (left > len) return out;
    2f2c:	d6 01       	movw	r26, r12
    2f2e:	14 96       	adiw	r26, 0x04	; 4
    2f30:	8d 91       	ld	r24, X+
    2f32:	9c 91       	ld	r25, X
    2f34:	15 97       	sbiw	r26, 0x05	; 5
    2f36:	80 17       	cp	r24, r16
    2f38:	91 07       	cpc	r25, r17
    2f3a:	d8 f0       	brcs	.+54     	; 0x2f72 <_ZNK6String9substringEjj+0x88>
    2f3c:	8c 17       	cp	r24, r28
    2f3e:	9d 07       	cpc	r25, r29
    2f40:	08 f4       	brcc	.+2      	; 0x2f44 <_ZNK6String9substringEjj+0x5a>
    2f42:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    2f44:	d6 01       	movw	r26, r12
    2f46:	ed 91       	ld	r30, X+
    2f48:	fc 91       	ld	r31, X
    2f4a:	11 97       	sbiw	r26, 0x01	; 1
    2f4c:	ec 0f       	add	r30, r28
    2f4e:	fd 1f       	adc	r31, r29
    2f50:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    2f52:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    2f54:	6d 91       	ld	r22, X+
    2f56:	7c 91       	ld	r23, X
    2f58:	60 0f       	add	r22, r16
    2f5a:	71 1f       	adc	r23, r17
    2f5c:	8f 2d       	mov	r24, r15
    2f5e:	9e 2d       	mov	r25, r14
    2f60:	0e 94 25 12 	call	0x244a	; 0x244a <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    2f64:	d6 01       	movw	r26, r12
    2f66:	ed 91       	ld	r30, X+
    2f68:	fc 91       	ld	r31, X
    2f6a:	11 97       	sbiw	r26, 0x01	; 1
    2f6c:	ec 0f       	add	r30, r28
    2f6e:	fd 1f       	adc	r31, r29
    2f70:	b0 82       	st	Z, r11
	return out;
}
    2f72:	8f 2d       	mov	r24, r15
    2f74:	9e 2d       	mov	r25, r14
    2f76:	df 91       	pop	r29
    2f78:	cf 91       	pop	r28
    2f7a:	1f 91       	pop	r17
    2f7c:	0f 91       	pop	r16
    2f7e:	ff 90       	pop	r15
    2f80:	ef 90       	pop	r14
    2f82:	df 90       	pop	r13
    2f84:	cf 90       	pop	r12
    2f86:	bf 90       	pop	r11
    2f88:	af 90       	pop	r10
    2f8a:	08 95       	ret

00002f8c <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
    2f90:	ec 01       	movw	r28, r24
	return substring(left, len);
    2f92:	fb 01       	movw	r30, r22
    2f94:	24 81       	ldd	r18, Z+4	; 0x04
    2f96:	35 81       	ldd	r19, Z+5	; 0x05
    2f98:	0e 94 75 17 	call	0x2eea	; 0x2eea <_ZNK6String9substringEjj>
}
    2f9c:	ce 01       	movw	r24, r28
    2f9e:	df 91       	pop	r29
    2fa0:	cf 91       	pop	r28
    2fa2:	08 95       	ret

00002fa4 <_ZN6String7replaceEcc>:
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    2fa4:	dc 01       	movw	r26, r24
    2fa6:	ed 91       	ld	r30, X+
    2fa8:	fc 91       	ld	r31, X
    2faa:	11 97       	sbiw	r26, 0x01	; 1
    2fac:	30 97       	sbiw	r30, 0x00	; 0
    2fae:	29 f4       	brne	.+10     	; 0x2fba <_ZN6String7replaceEcc+0x16>
    2fb0:	08 95       	ret
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    2fb2:	86 17       	cp	r24, r22
    2fb4:	09 f4       	brne	.+2      	; 0x2fb8 <_ZN6String7replaceEcc+0x14>
    2fb6:	40 83       	st	Z, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    2fb8:	31 96       	adiw	r30, 0x01	; 1
    2fba:	80 81       	ld	r24, Z
    2fbc:	88 23       	and	r24, r24
    2fbe:	c9 f7       	brne	.-14     	; 0x2fb2 <_ZN6String7replaceEcc+0xe>
    2fc0:	08 95       	ret

00002fc2 <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    2fc2:	2f 92       	push	r2
    2fc4:	3f 92       	push	r3
    2fc6:	4f 92       	push	r4
    2fc8:	5f 92       	push	r5
    2fca:	6f 92       	push	r6
    2fcc:	7f 92       	push	r7
    2fce:	8f 92       	push	r8
    2fd0:	9f 92       	push	r9
    2fd2:	af 92       	push	r10
    2fd4:	bf 92       	push	r11
    2fd6:	cf 92       	push	r12
    2fd8:	df 92       	push	r13
    2fda:	ef 92       	push	r14
    2fdc:	ff 92       	push	r15
    2fde:	0f 93       	push	r16
    2fe0:	1f 93       	push	r17
    2fe2:	cf 93       	push	r28
    2fe4:	df 93       	push	r29
    2fe6:	7c 01       	movw	r14, r24
    2fe8:	2b 01       	movw	r4, r22
    2fea:	6a 01       	movw	r12, r20
	if (len == 0 || find.len == 0) return;
    2fec:	dc 01       	movw	r26, r24
    2fee:	14 96       	adiw	r26, 0x04	; 4
    2ff0:	6d 90       	ld	r6, X+
    2ff2:	7c 90       	ld	r7, X
    2ff4:	15 97       	sbiw	r26, 0x05	; 5
    2ff6:	61 14       	cp	r6, r1
    2ff8:	71 04       	cpc	r7, r1
    2ffa:	09 f4       	brne	.+2      	; 0x2ffe <_ZN6String7replaceERKS_S1_+0x3c>
    2ffc:	d9 c0       	rjmp	.+434    	; 0x31b0 <_ZN6String7replaceERKS_S1_+0x1ee>
    2ffe:	fb 01       	movw	r30, r22
    3000:	84 80       	ldd	r8, Z+4	; 0x04
    3002:	95 80       	ldd	r9, Z+5	; 0x05
    3004:	81 14       	cp	r8, r1
    3006:	91 04       	cpc	r9, r1
    3008:	09 f4       	brne	.+2      	; 0x300c <_ZN6String7replaceERKS_S1_+0x4a>
    300a:	d2 c0       	rjmp	.+420    	; 0x31b0 <_ZN6String7replaceERKS_S1_+0x1ee>
	int diff = replace.len - find.len;
    300c:	da 01       	movw	r26, r20
    300e:	14 96       	adiw	r26, 0x04	; 4
    3010:	ad 90       	ld	r10, X+
    3012:	bc 90       	ld	r11, X
    3014:	15 97       	sbiw	r26, 0x05	; 5
    3016:	a8 18       	sub	r10, r8
    3018:	b9 08       	sbc	r11, r9
	char *readFrom = buffer;
    301a:	fc 01       	movw	r30, r24
    301c:	00 81       	ld	r16, Z
    301e:	11 81       	ldd	r17, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    3020:	a1 14       	cp	r10, r1
    3022:	b1 04       	cpc	r11, r1
    3024:	f1 f4       	brne	.+60     	; 0x3062 <_ZN6String7replaceERKS_S1_+0xa0>
    3026:	13 c0       	rjmp	.+38     	; 0x304e <_ZN6String7replaceERKS_S1_+0x8c>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    3028:	d6 01       	movw	r26, r12
    302a:	6c 91       	ld	r22, X
    302c:	11 96       	adiw	r26, 0x01	; 1
    302e:	7c 91       	ld	r23, X
    3030:	11 97       	sbiw	r26, 0x01	; 1
    3032:	14 96       	adiw	r26, 0x04	; 4
    3034:	4d 91       	ld	r20, X+
    3036:	5c 91       	ld	r21, X
    3038:	15 97       	sbiw	r26, 0x05	; 5
    303a:	ce 01       	movw	r24, r28
    303c:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <memcpy>
			readFrom = foundAt + replace.len;
    3040:	d6 01       	movw	r26, r12
    3042:	14 96       	adiw	r26, 0x04	; 4
    3044:	0d 91       	ld	r16, X+
    3046:	1c 91       	ld	r17, X
    3048:	15 97       	sbiw	r26, 0x05	; 5
    304a:	0c 0f       	add	r16, r28
    304c:	1d 1f       	adc	r17, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    304e:	f2 01       	movw	r30, r4
    3050:	60 81       	ld	r22, Z
    3052:	71 81       	ldd	r23, Z+1	; 0x01
    3054:	c8 01       	movw	r24, r16
    3056:	0e 94 bb 1c 	call	0x3976	; 0x3976 <strstr>
    305a:	ec 01       	movw	r28, r24
    305c:	00 97       	sbiw	r24, 0x00	; 0
    305e:	21 f7       	brne	.-56     	; 0x3028 <_ZN6String7replaceERKS_S1_+0x66>
    3060:	a7 c0       	rjmp	.+334    	; 0x31b0 <_ZN6String7replaceERKS_S1_+0x1ee>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    3062:	b7 fc       	sbrc	r11, 7
    3064:	02 c0       	rjmp	.+4      	; 0x306a <_ZN6String7replaceERKS_S1_+0xa8>
    3066:	e3 01       	movw	r28, r6
    3068:	42 c0       	rjmp	.+132    	; 0x30ee <_ZN6String7replaceERKS_S1_+0x12c>
    306a:	48 01       	movw	r8, r16
    306c:	2d c0       	rjmp	.+90     	; 0x30c8 <_ZN6String7replaceERKS_S1_+0x106>
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    306e:	e3 01       	movw	r28, r6
    3070:	c0 1b       	sub	r28, r16
    3072:	d1 0b       	sbc	r29, r17
			memcpy(writeTo, readFrom, n);
    3074:	c4 01       	movw	r24, r8
    3076:	b8 01       	movw	r22, r16
    3078:	ae 01       	movw	r20, r28
    307a:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <memcpy>
			writeTo += n;
    307e:	c8 0d       	add	r28, r8
    3080:	d9 1d       	adc	r29, r9
			memcpy(writeTo, replace.buffer, replace.len);
    3082:	d6 01       	movw	r26, r12
    3084:	6c 91       	ld	r22, X
    3086:	11 96       	adiw	r26, 0x01	; 1
    3088:	7c 91       	ld	r23, X
    308a:	11 97       	sbiw	r26, 0x01	; 1
    308c:	14 96       	adiw	r26, 0x04	; 4
    308e:	4d 91       	ld	r20, X+
    3090:	5c 91       	ld	r21, X
    3092:	15 97       	sbiw	r26, 0x05	; 5
    3094:	ce 01       	movw	r24, r28
    3096:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <memcpy>
			writeTo += replace.len;
    309a:	d6 01       	movw	r26, r12
    309c:	14 96       	adiw	r26, 0x04	; 4
    309e:	8d 90       	ld	r8, X+
    30a0:	9c 90       	ld	r9, X
    30a2:	15 97       	sbiw	r26, 0x05	; 5
    30a4:	8c 0e       	add	r8, r28
    30a6:	9d 1e       	adc	r9, r29
			readFrom = foundAt + find.len;
    30a8:	f2 01       	movw	r30, r4
    30aa:	04 81       	ldd	r16, Z+4	; 0x04
    30ac:	15 81       	ldd	r17, Z+5	; 0x05
    30ae:	06 0d       	add	r16, r6
    30b0:	17 1d       	adc	r17, r7
			len += diff;
    30b2:	d7 01       	movw	r26, r14
    30b4:	14 96       	adiw	r26, 0x04	; 4
    30b6:	8d 91       	ld	r24, X+
    30b8:	9c 91       	ld	r25, X
    30ba:	15 97       	sbiw	r26, 0x05	; 5
    30bc:	8a 0d       	add	r24, r10
    30be:	9b 1d       	adc	r25, r11
    30c0:	15 96       	adiw	r26, 0x05	; 5
    30c2:	9c 93       	st	X, r25
    30c4:	8e 93       	st	-X, r24
    30c6:	14 97       	sbiw	r26, 0x04	; 4
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    30c8:	f2 01       	movw	r30, r4
    30ca:	60 81       	ld	r22, Z
    30cc:	71 81       	ldd	r23, Z+1	; 0x01
    30ce:	c8 01       	movw	r24, r16
    30d0:	0e 94 bb 1c 	call	0x3976	; 0x3976 <strstr>
    30d4:	3c 01       	movw	r6, r24
    30d6:	00 97       	sbiw	r24, 0x00	; 0
    30d8:	51 f6       	brne	.-108    	; 0x306e <_ZN6String7replaceERKS_S1_+0xac>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    30da:	c4 01       	movw	r24, r8
    30dc:	b8 01       	movw	r22, r16
    30de:	0e 94 8c 1c 	call	0x3918	; 0x3918 <strcpy>
    30e2:	66 c0       	rjmp	.+204    	; 0x31b0 <_ZN6String7replaceERKS_S1_+0x1ee>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    30e4:	8c 01       	movw	r16, r24
    30e6:	08 0d       	add	r16, r8
    30e8:	19 1d       	adc	r17, r9
			size += diff;
    30ea:	ca 0d       	add	r28, r10
    30ec:	db 1d       	adc	r29, r11
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    30ee:	d2 01       	movw	r26, r4
    30f0:	6d 91       	ld	r22, X+
    30f2:	7c 91       	ld	r23, X
    30f4:	c8 01       	movw	r24, r16
    30f6:	0e 94 bb 1c 	call	0x3976	; 0x3976 <strstr>
    30fa:	00 97       	sbiw	r24, 0x00	; 0
    30fc:	99 f7       	brne	.-26     	; 0x30e4 <_ZN6String7replaceERKS_S1_+0x122>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    30fe:	c6 15       	cp	r28, r6
    3100:	d7 05       	cpc	r29, r7
    3102:	09 f4       	brne	.+2      	; 0x3106 <_ZN6String7replaceERKS_S1_+0x144>
    3104:	55 c0       	rjmp	.+170    	; 0x31b0 <_ZN6String7replaceERKS_S1_+0x1ee>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    3106:	f7 01       	movw	r30, r14
    3108:	82 81       	ldd	r24, Z+2	; 0x02
    310a:	93 81       	ldd	r25, Z+3	; 0x03
    310c:	8c 17       	cp	r24, r28
    310e:	9d 07       	cpc	r25, r29
    3110:	08 f0       	brcs	.+2      	; 0x3114 <_ZN6String7replaceERKS_S1_+0x152>
    3112:	45 c0       	rjmp	.+138    	; 0x319e <_ZN6String7replaceERKS_S1_+0x1dc>
    3114:	c7 01       	movw	r24, r14
    3116:	be 01       	movw	r22, r28
    3118:	0e 94 8a 11 	call	0x2314	; 0x2314 <_ZN6String12changeBufferEj>
    311c:	88 23       	and	r24, r24
    311e:	09 f4       	brne	.+2      	; 0x3122 <_ZN6String7replaceERKS_S1_+0x160>
    3120:	47 c0       	rjmp	.+142    	; 0x31b0 <_ZN6String7replaceERKS_S1_+0x1ee>
    3122:	3d c0       	rjmp	.+122    	; 0x319e <_ZN6String7replaceERKS_S1_+0x1dc>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    3124:	c7 01       	movw	r24, r14
    3126:	b2 01       	movw	r22, r4
    3128:	a9 01       	movw	r20, r18
    312a:	0e 94 1d 17 	call	0x2e3a	; 0x2e3a <_ZNK6String11lastIndexOfERKS_j>
    312e:	ec 01       	movw	r28, r24
    3130:	97 fd       	sbrc	r25, 7
    3132:	3e c0       	rjmp	.+124    	; 0x31b0 <_ZN6String7replaceERKS_S1_+0x1ee>
			readFrom = buffer + index + find.len;
    3134:	d7 01       	movw	r26, r14
    3136:	6d 91       	ld	r22, X+
    3138:	7c 91       	ld	r23, X
    313a:	11 97       	sbiw	r26, 0x01	; 1
    313c:	f2 01       	movw	r30, r4
    313e:	84 81       	ldd	r24, Z+4	; 0x04
    3140:	95 81       	ldd	r25, Z+5	; 0x05
    3142:	8c 0f       	add	r24, r28
    3144:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    3146:	68 0f       	add	r22, r24
    3148:	79 1f       	adc	r23, r25
    314a:	14 96       	adiw	r26, 0x04	; 4
    314c:	4d 91       	ld	r20, X+
    314e:	5c 91       	ld	r21, X
    3150:	15 97       	sbiw	r26, 0x05	; 5
    3152:	48 1b       	sub	r20, r24
    3154:	59 0b       	sbc	r21, r25
    3156:	cb 01       	movw	r24, r22
    3158:	8a 0d       	add	r24, r10
    315a:	9b 1d       	adc	r25, r11
    315c:	0e 94 66 1c 	call	0x38cc	; 0x38cc <memmove>
			len += diff;
    3160:	d7 01       	movw	r26, r14
    3162:	14 96       	adiw	r26, 0x04	; 4
    3164:	8d 91       	ld	r24, X+
    3166:	9c 91       	ld	r25, X
    3168:	15 97       	sbiw	r26, 0x05	; 5
    316a:	8a 0d       	add	r24, r10
    316c:	9b 1d       	adc	r25, r11
    316e:	15 96       	adiw	r26, 0x05	; 5
    3170:	9c 93       	st	X, r25
    3172:	8e 93       	st	-X, r24
    3174:	14 97       	sbiw	r26, 0x04	; 4
			buffer[len] = 0;
    3176:	ed 91       	ld	r30, X+
    3178:	fc 91       	ld	r31, X
    317a:	11 97       	sbiw	r26, 0x01	; 1
    317c:	e8 0f       	add	r30, r24
    317e:	f9 1f       	adc	r31, r25
    3180:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    3182:	2d 91       	ld	r18, X+
    3184:	3c 91       	ld	r19, X
    3186:	2c 0f       	add	r18, r28
    3188:	3d 1f       	adc	r19, r29
    318a:	f6 01       	movw	r30, r12
    318c:	60 81       	ld	r22, Z
    318e:	71 81       	ldd	r23, Z+1	; 0x01
    3190:	44 81       	ldd	r20, Z+4	; 0x04
    3192:	55 81       	ldd	r21, Z+5	; 0x05
    3194:	c9 01       	movw	r24, r18
    3196:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <memcpy>
			index--;
    319a:	9e 01       	movw	r18, r28
    319c:	05 c0       	rjmp	.+10     	; 0x31a8 <_ZN6String7replaceERKS_S1_+0x1e6>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    319e:	d7 01       	movw	r26, r14
    31a0:	14 96       	adiw	r26, 0x04	; 4
    31a2:	2d 91       	ld	r18, X+
    31a4:	3c 91       	ld	r19, X
    31a6:	15 97       	sbiw	r26, 0x05	; 5
    31a8:	21 50       	subi	r18, 0x01	; 1
    31aa:	30 40       	sbci	r19, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    31ac:	37 ff       	sbrs	r19, 7
    31ae:	ba cf       	rjmp	.-140    	; 0x3124 <_ZN6String7replaceERKS_S1_+0x162>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    31b0:	df 91       	pop	r29
    31b2:	cf 91       	pop	r28
    31b4:	1f 91       	pop	r17
    31b6:	0f 91       	pop	r16
    31b8:	ff 90       	pop	r15
    31ba:	ef 90       	pop	r14
    31bc:	df 90       	pop	r13
    31be:	cf 90       	pop	r12
    31c0:	bf 90       	pop	r11
    31c2:	af 90       	pop	r10
    31c4:	9f 90       	pop	r9
    31c6:	8f 90       	pop	r8
    31c8:	7f 90       	pop	r7
    31ca:	6f 90       	pop	r6
    31cc:	5f 90       	pop	r5
    31ce:	4f 90       	pop	r4
    31d0:	3f 90       	pop	r3
    31d2:	2f 90       	pop	r2
    31d4:	08 95       	ret

000031d6 <_ZN6String11toLowerCaseEv>:

void String::toLowerCase(void)
{
    31d6:	cf 93       	push	r28
    31d8:	df 93       	push	r29
	if (!buffer) return;
    31da:	fc 01       	movw	r30, r24
    31dc:	c0 81       	ld	r28, Z
    31de:	d1 81       	ldd	r29, Z+1	; 0x01
    31e0:	20 97       	sbiw	r28, 0x00	; 0
    31e2:	39 f4       	brne	.+14     	; 0x31f2 <_ZN6String11toLowerCaseEv+0x1c>
    31e4:	09 c0       	rjmp	.+18     	; 0x31f8 <_ZN6String11toLowerCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
    31e6:	99 27       	eor	r25, r25
    31e8:	87 fd       	sbrc	r24, 7
    31ea:	90 95       	com	r25
    31ec:	0e 94 4d 1c 	call	0x389a	; 0x389a <tolower>
    31f0:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    31f2:	88 81       	ld	r24, Y
    31f4:	88 23       	and	r24, r24
    31f6:	b9 f7       	brne	.-18     	; 0x31e6 <_ZN6String11toLowerCaseEv+0x10>
		*p = tolower(*p);
	}
}
    31f8:	df 91       	pop	r29
    31fa:	cf 91       	pop	r28
    31fc:	08 95       	ret

000031fe <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    31fe:	cf 93       	push	r28
    3200:	df 93       	push	r29
	if (!buffer) return;
    3202:	fc 01       	movw	r30, r24
    3204:	c0 81       	ld	r28, Z
    3206:	d1 81       	ldd	r29, Z+1	; 0x01
    3208:	20 97       	sbiw	r28, 0x00	; 0
    320a:	39 f4       	brne	.+14     	; 0x321a <_ZN6String11toUpperCaseEv+0x1c>
    320c:	09 c0       	rjmp	.+18     	; 0x3220 <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    320e:	99 27       	eor	r25, r25
    3210:	87 fd       	sbrc	r24, 7
    3212:	90 95       	com	r25
    3214:	0e 94 55 1c 	call	0x38aa	; 0x38aa <toupper>
    3218:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    321a:	88 81       	ld	r24, Y
    321c:	88 23       	and	r24, r24
    321e:	b9 f7       	brne	.-18     	; 0x320e <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    3220:	df 91       	pop	r29
    3222:	cf 91       	pop	r28
    3224:	08 95       	ret

00003226 <_ZN6String4trimEv>:

void String::trim(void)
{
    3226:	af 92       	push	r10
    3228:	bf 92       	push	r11
    322a:	cf 92       	push	r12
    322c:	df 92       	push	r13
    322e:	ef 92       	push	r14
    3230:	ff 92       	push	r15
    3232:	0f 93       	push	r16
    3234:	1f 93       	push	r17
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	6c 01       	movw	r12, r24
	if (!buffer || len == 0) return;
    323c:	dc 01       	movw	r26, r24
    323e:	ed 90       	ld	r14, X+
    3240:	fc 90       	ld	r15, X
    3242:	11 97       	sbiw	r26, 0x01	; 1
    3244:	e1 14       	cp	r14, r1
    3246:	f1 04       	cpc	r15, r1
    3248:	09 f4       	brne	.+2      	; 0x324c <_ZN6String4trimEv+0x26>
    324a:	43 c0       	rjmp	.+134    	; 0x32d2 <_ZN6String4trimEv+0xac>
    324c:	14 96       	adiw	r26, 0x04	; 4
    324e:	ad 90       	ld	r10, X+
    3250:	bc 90       	ld	r11, X
    3252:	15 97       	sbiw	r26, 0x05	; 5
    3254:	a1 14       	cp	r10, r1
    3256:	b1 04       	cpc	r11, r1
    3258:	e1 f1       	breq	.+120    	; 0x32d2 <_ZN6String4trimEv+0xac>
    325a:	87 01       	movw	r16, r14
    325c:	e8 01       	movw	r28, r16
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    325e:	88 81       	ld	r24, Y
    3260:	0f 5f       	subi	r16, 0xFF	; 255
    3262:	1f 4f       	sbci	r17, 0xFF	; 255
    3264:	99 27       	eor	r25, r25
    3266:	87 fd       	sbrc	r24, 7
    3268:	90 95       	com	r25
    326a:	0e 94 45 1c 	call	0x388a	; 0x388a <isspace>
    326e:	00 97       	sbiw	r24, 0x00	; 0
    3270:	a9 f7       	brne	.-22     	; 0x325c <_ZN6String4trimEv+0x36>
	char *end = buffer + len - 1;
    3272:	85 01       	movw	r16, r10
    3274:	01 50       	subi	r16, 0x01	; 1
    3276:	10 40       	sbci	r17, 0x00	; 0
    3278:	0e 0d       	add	r16, r14
    327a:	1f 1d       	adc	r17, r15
	while (isspace(*end) && end >= begin) end--;
    327c:	f8 01       	movw	r30, r16
    327e:	80 81       	ld	r24, Z
    3280:	99 27       	eor	r25, r25
    3282:	87 fd       	sbrc	r24, 7
    3284:	90 95       	com	r25
    3286:	0e 94 45 1c 	call	0x388a	; 0x388a <isspace>
    328a:	00 97       	sbiw	r24, 0x00	; 0
    328c:	31 f0       	breq	.+12     	; 0x329a <_ZN6String4trimEv+0x74>
    328e:	0c 17       	cp	r16, r28
    3290:	1d 07       	cpc	r17, r29
    3292:	18 f0       	brcs	.+6      	; 0x329a <_ZN6String4trimEv+0x74>
    3294:	01 50       	subi	r16, 0x01	; 1
    3296:	10 40       	sbci	r17, 0x00	; 0
    3298:	f1 cf       	rjmp	.-30     	; 0x327c <_ZN6String4trimEv+0x56>
	len = end + 1 - begin;
    329a:	0f 5f       	subi	r16, 0xFF	; 255
    329c:	1f 4f       	sbci	r17, 0xFF	; 255
    329e:	0c 1b       	sub	r16, r28
    32a0:	1d 0b       	sbc	r17, r29
    32a2:	d6 01       	movw	r26, r12
    32a4:	15 96       	adiw	r26, 0x05	; 5
    32a6:	1c 93       	st	X, r17
    32a8:	0e 93       	st	-X, r16
    32aa:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    32ac:	ec 16       	cp	r14, r28
    32ae:	fd 06       	cpc	r15, r29
    32b0:	28 f4       	brcc	.+10     	; 0x32bc <_ZN6String4trimEv+0x96>
    32b2:	c7 01       	movw	r24, r14
    32b4:	be 01       	movw	r22, r28
    32b6:	a8 01       	movw	r20, r16
    32b8:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <memcpy>
	buffer[len] = 0;
    32bc:	d6 01       	movw	r26, r12
    32be:	ed 91       	ld	r30, X+
    32c0:	fc 91       	ld	r31, X
    32c2:	11 97       	sbiw	r26, 0x01	; 1
    32c4:	14 96       	adiw	r26, 0x04	; 4
    32c6:	8d 91       	ld	r24, X+
    32c8:	9c 91       	ld	r25, X
    32ca:	15 97       	sbiw	r26, 0x05	; 5
    32cc:	e8 0f       	add	r30, r24
    32ce:	f9 1f       	adc	r31, r25
    32d0:	10 82       	st	Z, r1
}
    32d2:	df 91       	pop	r29
    32d4:	cf 91       	pop	r28
    32d6:	1f 91       	pop	r17
    32d8:	0f 91       	pop	r16
    32da:	ff 90       	pop	r15
    32dc:	ef 90       	pop	r14
    32de:	df 90       	pop	r13
    32e0:	cf 90       	pop	r12
    32e2:	bf 90       	pop	r11
    32e4:	af 90       	pop	r10
    32e6:	08 95       	ret

000032e8 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    32e8:	fc 01       	movw	r30, r24
    32ea:	80 81       	ld	r24, Z
    32ec:	91 81       	ldd	r25, Z+1	; 0x01
    32ee:	00 97       	sbiw	r24, 0x00	; 0
    32f0:	29 f0       	breq	.+10     	; 0x32fc <_ZNK6String5toIntEv+0x14>
    32f2:	0e 94 1e 1c 	call	0x383c	; 0x383c <atol>
    32f6:	9b 01       	movw	r18, r22
    32f8:	ac 01       	movw	r20, r24
    32fa:	03 c0       	rjmp	.+6      	; 0x3302 <_ZNK6String5toIntEv+0x1a>
	return 0;
    32fc:	20 e0       	ldi	r18, 0x00	; 0
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	a9 01       	movw	r20, r18
}
    3302:	b9 01       	movw	r22, r18
    3304:	ca 01       	movw	r24, r20
    3306:	08 95       	ret

00003308 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    3308:	0e 94 20 1a 	call	0x3440	; 0x3440 <malloc>
}
    330c:	08 95       	ret

0000330e <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    330e:	0e 94 ba 1a 	call	0x3574	; 0x3574 <free>
} 
    3312:	08 95       	ret

00003314 <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    3314:	21 e0       	ldi	r18, 0x01	; 1
    3316:	30 e0       	ldi	r19, 0x00	; 0
    3318:	fc 01       	movw	r30, r24
    331a:	80 81       	ld	r24, Z
    331c:	88 23       	and	r24, r24
    331e:	11 f0       	breq	.+4      	; 0x3324 <__cxa_guard_acquire+0x10>
    3320:	20 e0       	ldi	r18, 0x00	; 0
    3322:	30 e0       	ldi	r19, 0x00	; 0
    3324:	c9 01       	movw	r24, r18
    3326:	08 95       	ret

00003328 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    3328:	21 e0       	ldi	r18, 0x01	; 1
    332a:	fc 01       	movw	r30, r24
    332c:	20 83       	st	Z, r18
    332e:	08 95       	ret

00003330 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    3330:	08 95       	ret

00003332 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    3332:	08 95       	ret

00003334 <__divmodhi4>:
    3334:	97 fb       	bst	r25, 7
    3336:	09 2e       	mov	r0, r25
    3338:	07 26       	eor	r0, r23
    333a:	0a d0       	rcall	.+20     	; 0x3350 <__divmodhi4_neg1>
    333c:	77 fd       	sbrc	r23, 7
    333e:	04 d0       	rcall	.+8      	; 0x3348 <__divmodhi4_neg2>
    3340:	2e d0       	rcall	.+92     	; 0x339e <__udivmodhi4>
    3342:	06 d0       	rcall	.+12     	; 0x3350 <__divmodhi4_neg1>
    3344:	00 20       	and	r0, r0
    3346:	1a f4       	brpl	.+6      	; 0x334e <__divmodhi4_exit>

00003348 <__divmodhi4_neg2>:
    3348:	70 95       	com	r23
    334a:	61 95       	neg	r22
    334c:	7f 4f       	sbci	r23, 0xFF	; 255

0000334e <__divmodhi4_exit>:
    334e:	08 95       	ret

00003350 <__divmodhi4_neg1>:
    3350:	f6 f7       	brtc	.-4      	; 0x334e <__divmodhi4_exit>
    3352:	90 95       	com	r25
    3354:	81 95       	neg	r24
    3356:	9f 4f       	sbci	r25, 0xFF	; 255
    3358:	08 95       	ret

0000335a <__udivmodsi4>:
    335a:	a1 e2       	ldi	r26, 0x21	; 33
    335c:	1a 2e       	mov	r1, r26
    335e:	aa 1b       	sub	r26, r26
    3360:	bb 1b       	sub	r27, r27
    3362:	fd 01       	movw	r30, r26
    3364:	0d c0       	rjmp	.+26     	; 0x3380 <__udivmodsi4_ep>

00003366 <__udivmodsi4_loop>:
    3366:	aa 1f       	adc	r26, r26
    3368:	bb 1f       	adc	r27, r27
    336a:	ee 1f       	adc	r30, r30
    336c:	ff 1f       	adc	r31, r31
    336e:	a2 17       	cp	r26, r18
    3370:	b3 07       	cpc	r27, r19
    3372:	e4 07       	cpc	r30, r20
    3374:	f5 07       	cpc	r31, r21
    3376:	20 f0       	brcs	.+8      	; 0x3380 <__udivmodsi4_ep>
    3378:	a2 1b       	sub	r26, r18
    337a:	b3 0b       	sbc	r27, r19
    337c:	e4 0b       	sbc	r30, r20
    337e:	f5 0b       	sbc	r31, r21

00003380 <__udivmodsi4_ep>:
    3380:	66 1f       	adc	r22, r22
    3382:	77 1f       	adc	r23, r23
    3384:	88 1f       	adc	r24, r24
    3386:	99 1f       	adc	r25, r25
    3388:	1a 94       	dec	r1
    338a:	69 f7       	brne	.-38     	; 0x3366 <__udivmodsi4_loop>
    338c:	60 95       	com	r22
    338e:	70 95       	com	r23
    3390:	80 95       	com	r24
    3392:	90 95       	com	r25
    3394:	9b 01       	movw	r18, r22
    3396:	ac 01       	movw	r20, r24
    3398:	bd 01       	movw	r22, r26
    339a:	cf 01       	movw	r24, r30
    339c:	08 95       	ret

0000339e <__udivmodhi4>:
    339e:	aa 1b       	sub	r26, r26
    33a0:	bb 1b       	sub	r27, r27
    33a2:	51 e1       	ldi	r21, 0x11	; 17
    33a4:	07 c0       	rjmp	.+14     	; 0x33b4 <__udivmodhi4_ep>

000033a6 <__udivmodhi4_loop>:
    33a6:	aa 1f       	adc	r26, r26
    33a8:	bb 1f       	adc	r27, r27
    33aa:	a6 17       	cp	r26, r22
    33ac:	b7 07       	cpc	r27, r23
    33ae:	10 f0       	brcs	.+4      	; 0x33b4 <__udivmodhi4_ep>
    33b0:	a6 1b       	sub	r26, r22
    33b2:	b7 0b       	sbc	r27, r23

000033b4 <__udivmodhi4_ep>:
    33b4:	88 1f       	adc	r24, r24
    33b6:	99 1f       	adc	r25, r25
    33b8:	5a 95       	dec	r21
    33ba:	a9 f7       	brne	.-22     	; 0x33a6 <__udivmodhi4_loop>
    33bc:	80 95       	com	r24
    33be:	90 95       	com	r25
    33c0:	bc 01       	movw	r22, r24
    33c2:	cd 01       	movw	r24, r26
    33c4:	08 95       	ret

000033c6 <__prologue_saves__>:
    33c6:	2f 92       	push	r2
    33c8:	3f 92       	push	r3
    33ca:	4f 92       	push	r4
    33cc:	5f 92       	push	r5
    33ce:	6f 92       	push	r6
    33d0:	7f 92       	push	r7
    33d2:	8f 92       	push	r8
    33d4:	9f 92       	push	r9
    33d6:	af 92       	push	r10
    33d8:	bf 92       	push	r11
    33da:	cf 92       	push	r12
    33dc:	df 92       	push	r13
    33de:	ef 92       	push	r14
    33e0:	ff 92       	push	r15
    33e2:	0f 93       	push	r16
    33e4:	1f 93       	push	r17
    33e6:	cf 93       	push	r28
    33e8:	df 93       	push	r29
    33ea:	cd b7       	in	r28, 0x3d	; 61
    33ec:	de b7       	in	r29, 0x3e	; 62
    33ee:	ca 1b       	sub	r28, r26
    33f0:	db 0b       	sbc	r29, r27
    33f2:	0f b6       	in	r0, 0x3f	; 63
    33f4:	f8 94       	cli
    33f6:	de bf       	out	0x3e, r29	; 62
    33f8:	0f be       	out	0x3f, r0	; 63
    33fa:	cd bf       	out	0x3d, r28	; 61
    33fc:	09 94       	ijmp

000033fe <__epilogue_restores__>:
    33fe:	2a 88       	ldd	r2, Y+18	; 0x12
    3400:	39 88       	ldd	r3, Y+17	; 0x11
    3402:	48 88       	ldd	r4, Y+16	; 0x10
    3404:	5f 84       	ldd	r5, Y+15	; 0x0f
    3406:	6e 84       	ldd	r6, Y+14	; 0x0e
    3408:	7d 84       	ldd	r7, Y+13	; 0x0d
    340a:	8c 84       	ldd	r8, Y+12	; 0x0c
    340c:	9b 84       	ldd	r9, Y+11	; 0x0b
    340e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3410:	b9 84       	ldd	r11, Y+9	; 0x09
    3412:	c8 84       	ldd	r12, Y+8	; 0x08
    3414:	df 80       	ldd	r13, Y+7	; 0x07
    3416:	ee 80       	ldd	r14, Y+6	; 0x06
    3418:	fd 80       	ldd	r15, Y+5	; 0x05
    341a:	0c 81       	ldd	r16, Y+4	; 0x04
    341c:	1b 81       	ldd	r17, Y+3	; 0x03
    341e:	aa 81       	ldd	r26, Y+2	; 0x02
    3420:	b9 81       	ldd	r27, Y+1	; 0x01
    3422:	ce 0f       	add	r28, r30
    3424:	d1 1d       	adc	r29, r1
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	ed 01       	movw	r28, r26
    3432:	08 95       	ret

00003434 <__tablejump2__>:
    3434:	ee 0f       	add	r30, r30
    3436:	ff 1f       	adc	r31, r31

00003438 <__tablejump__>:
    3438:	05 90       	lpm	r0, Z+
    343a:	f4 91       	lpm	r31, Z+
    343c:	e0 2d       	mov	r30, r0
    343e:	09 94       	ijmp

00003440 <malloc>:
    3440:	cf 93       	push	r28
    3442:	df 93       	push	r29
    3444:	82 30       	cpi	r24, 0x02	; 2
    3446:	91 05       	cpc	r25, r1
    3448:	10 f4       	brcc	.+4      	; 0x344e <malloc+0xe>
    344a:	82 e0       	ldi	r24, 0x02	; 2
    344c:	90 e0       	ldi	r25, 0x00	; 0
    344e:	e0 91 1f 03 	lds	r30, 0x031F
    3452:	f0 91 20 03 	lds	r31, 0x0320
    3456:	40 e0       	ldi	r20, 0x00	; 0
    3458:	50 e0       	ldi	r21, 0x00	; 0
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	26 c0       	rjmp	.+76     	; 0x34ac <malloc+0x6c>
    3460:	60 81       	ld	r22, Z
    3462:	71 81       	ldd	r23, Z+1	; 0x01
    3464:	68 17       	cp	r22, r24
    3466:	79 07       	cpc	r23, r25
    3468:	e0 f0       	brcs	.+56     	; 0x34a2 <malloc+0x62>
    346a:	68 17       	cp	r22, r24
    346c:	79 07       	cpc	r23, r25
    346e:	81 f4       	brne	.+32     	; 0x3490 <malloc+0x50>
    3470:	82 81       	ldd	r24, Z+2	; 0x02
    3472:	93 81       	ldd	r25, Z+3	; 0x03
    3474:	21 15       	cp	r18, r1
    3476:	31 05       	cpc	r19, r1
    3478:	31 f0       	breq	.+12     	; 0x3486 <malloc+0x46>
    347a:	d9 01       	movw	r26, r18
    347c:	13 96       	adiw	r26, 0x03	; 3
    347e:	9c 93       	st	X, r25
    3480:	8e 93       	st	-X, r24
    3482:	12 97       	sbiw	r26, 0x02	; 2
    3484:	2b c0       	rjmp	.+86     	; 0x34dc <malloc+0x9c>
    3486:	90 93 20 03 	sts	0x0320, r25
    348a:	80 93 1f 03 	sts	0x031F, r24
    348e:	26 c0       	rjmp	.+76     	; 0x34dc <malloc+0x9c>
    3490:	41 15       	cp	r20, r1
    3492:	51 05       	cpc	r21, r1
    3494:	19 f0       	breq	.+6      	; 0x349c <malloc+0x5c>
    3496:	64 17       	cp	r22, r20
    3498:	75 07       	cpc	r23, r21
    349a:	18 f4       	brcc	.+6      	; 0x34a2 <malloc+0x62>
    349c:	ab 01       	movw	r20, r22
    349e:	e9 01       	movw	r28, r18
    34a0:	df 01       	movw	r26, r30
    34a2:	9f 01       	movw	r18, r30
    34a4:	72 81       	ldd	r23, Z+2	; 0x02
    34a6:	63 81       	ldd	r22, Z+3	; 0x03
    34a8:	e7 2f       	mov	r30, r23
    34aa:	f6 2f       	mov	r31, r22
    34ac:	30 97       	sbiw	r30, 0x00	; 0
    34ae:	c1 f6       	brne	.-80     	; 0x3460 <malloc+0x20>
    34b0:	41 15       	cp	r20, r1
    34b2:	51 05       	cpc	r21, r1
    34b4:	01 f1       	breq	.+64     	; 0x34f6 <malloc+0xb6>
    34b6:	48 1b       	sub	r20, r24
    34b8:	59 0b       	sbc	r21, r25
    34ba:	44 30       	cpi	r20, 0x04	; 4
    34bc:	51 05       	cpc	r21, r1
    34be:	80 f4       	brcc	.+32     	; 0x34e0 <malloc+0xa0>
    34c0:	12 96       	adiw	r26, 0x02	; 2
    34c2:	8d 91       	ld	r24, X+
    34c4:	9c 91       	ld	r25, X
    34c6:	13 97       	sbiw	r26, 0x03	; 3
    34c8:	20 97       	sbiw	r28, 0x00	; 0
    34ca:	19 f0       	breq	.+6      	; 0x34d2 <malloc+0x92>
    34cc:	9b 83       	std	Y+3, r25	; 0x03
    34ce:	8a 83       	std	Y+2, r24	; 0x02
    34d0:	04 c0       	rjmp	.+8      	; 0x34da <malloc+0x9a>
    34d2:	90 93 20 03 	sts	0x0320, r25
    34d6:	80 93 1f 03 	sts	0x031F, r24
    34da:	fd 01       	movw	r30, r26
    34dc:	32 96       	adiw	r30, 0x02	; 2
    34de:	46 c0       	rjmp	.+140    	; 0x356c <malloc+0x12c>
    34e0:	fd 01       	movw	r30, r26
    34e2:	e4 0f       	add	r30, r20
    34e4:	f5 1f       	adc	r31, r21
    34e6:	81 93       	st	Z+, r24
    34e8:	91 93       	st	Z+, r25
    34ea:	42 50       	subi	r20, 0x02	; 2
    34ec:	50 40       	sbci	r21, 0x00	; 0
    34ee:	11 96       	adiw	r26, 0x01	; 1
    34f0:	5c 93       	st	X, r21
    34f2:	4e 93       	st	-X, r20
    34f4:	3b c0       	rjmp	.+118    	; 0x356c <malloc+0x12c>
    34f6:	20 91 1d 03 	lds	r18, 0x031D
    34fa:	30 91 1e 03 	lds	r19, 0x031E
    34fe:	21 15       	cp	r18, r1
    3500:	31 05       	cpc	r19, r1
    3502:	41 f4       	brne	.+16     	; 0x3514 <malloc+0xd4>
    3504:	20 91 1c 02 	lds	r18, 0x021C
    3508:	30 91 1d 02 	lds	r19, 0x021D
    350c:	30 93 1e 03 	sts	0x031E, r19
    3510:	20 93 1d 03 	sts	0x031D, r18
    3514:	20 91 1e 02 	lds	r18, 0x021E
    3518:	30 91 1f 02 	lds	r19, 0x021F
    351c:	21 15       	cp	r18, r1
    351e:	31 05       	cpc	r19, r1
    3520:	41 f4       	brne	.+16     	; 0x3532 <malloc+0xf2>
    3522:	2d b7       	in	r18, 0x3d	; 61
    3524:	3e b7       	in	r19, 0x3e	; 62
    3526:	40 91 1a 02 	lds	r20, 0x021A
    352a:	50 91 1b 02 	lds	r21, 0x021B
    352e:	24 1b       	sub	r18, r20
    3530:	35 0b       	sbc	r19, r21
    3532:	e0 91 1d 03 	lds	r30, 0x031D
    3536:	f0 91 1e 03 	lds	r31, 0x031E
    353a:	e2 17       	cp	r30, r18
    353c:	f3 07       	cpc	r31, r19
    353e:	a0 f4       	brcc	.+40     	; 0x3568 <malloc+0x128>
    3540:	2e 1b       	sub	r18, r30
    3542:	3f 0b       	sbc	r19, r31
    3544:	28 17       	cp	r18, r24
    3546:	39 07       	cpc	r19, r25
    3548:	78 f0       	brcs	.+30     	; 0x3568 <malloc+0x128>
    354a:	ac 01       	movw	r20, r24
    354c:	4e 5f       	subi	r20, 0xFE	; 254
    354e:	5f 4f       	sbci	r21, 0xFF	; 255
    3550:	24 17       	cp	r18, r20
    3552:	35 07       	cpc	r19, r21
    3554:	48 f0       	brcs	.+18     	; 0x3568 <malloc+0x128>
    3556:	4e 0f       	add	r20, r30
    3558:	5f 1f       	adc	r21, r31
    355a:	50 93 1e 03 	sts	0x031E, r21
    355e:	40 93 1d 03 	sts	0x031D, r20
    3562:	81 93       	st	Z+, r24
    3564:	91 93       	st	Z+, r25
    3566:	02 c0       	rjmp	.+4      	; 0x356c <malloc+0x12c>
    3568:	e0 e0       	ldi	r30, 0x00	; 0
    356a:	f0 e0       	ldi	r31, 0x00	; 0
    356c:	cf 01       	movw	r24, r30
    356e:	df 91       	pop	r29
    3570:	cf 91       	pop	r28
    3572:	08 95       	ret

00003574 <free>:
    3574:	cf 93       	push	r28
    3576:	df 93       	push	r29
    3578:	00 97       	sbiw	r24, 0x00	; 0
    357a:	09 f4       	brne	.+2      	; 0x357e <free+0xa>
    357c:	91 c0       	rjmp	.+290    	; 0x36a0 <free+0x12c>
    357e:	fc 01       	movw	r30, r24
    3580:	32 97       	sbiw	r30, 0x02	; 2
    3582:	13 82       	std	Z+3, r1	; 0x03
    3584:	12 82       	std	Z+2, r1	; 0x02
    3586:	60 91 1f 03 	lds	r22, 0x031F
    358a:	70 91 20 03 	lds	r23, 0x0320
    358e:	61 15       	cp	r22, r1
    3590:	71 05       	cpc	r23, r1
    3592:	81 f4       	brne	.+32     	; 0x35b4 <free+0x40>
    3594:	20 81       	ld	r18, Z
    3596:	31 81       	ldd	r19, Z+1	; 0x01
    3598:	28 0f       	add	r18, r24
    359a:	39 1f       	adc	r19, r25
    359c:	80 91 1d 03 	lds	r24, 0x031D
    35a0:	90 91 1e 03 	lds	r25, 0x031E
    35a4:	82 17       	cp	r24, r18
    35a6:	93 07       	cpc	r25, r19
    35a8:	99 f5       	brne	.+102    	; 0x3610 <free+0x9c>
    35aa:	f0 93 1e 03 	sts	0x031E, r31
    35ae:	e0 93 1d 03 	sts	0x031D, r30
    35b2:	76 c0       	rjmp	.+236    	; 0x36a0 <free+0x12c>
    35b4:	db 01       	movw	r26, r22
    35b6:	80 e0       	ldi	r24, 0x00	; 0
    35b8:	90 e0       	ldi	r25, 0x00	; 0
    35ba:	02 c0       	rjmp	.+4      	; 0x35c0 <free+0x4c>
    35bc:	cd 01       	movw	r24, r26
    35be:	d9 01       	movw	r26, r18
    35c0:	ae 17       	cp	r26, r30
    35c2:	bf 07       	cpc	r27, r31
    35c4:	48 f4       	brcc	.+18     	; 0x35d8 <free+0x64>
    35c6:	12 96       	adiw	r26, 0x02	; 2
    35c8:	2d 91       	ld	r18, X+
    35ca:	3c 91       	ld	r19, X
    35cc:	13 97       	sbiw	r26, 0x03	; 3
    35ce:	21 15       	cp	r18, r1
    35d0:	31 05       	cpc	r19, r1
    35d2:	a1 f7       	brne	.-24     	; 0x35bc <free+0x48>
    35d4:	cd 01       	movw	r24, r26
    35d6:	21 c0       	rjmp	.+66     	; 0x361a <free+0xa6>
    35d8:	b3 83       	std	Z+3, r27	; 0x03
    35da:	a2 83       	std	Z+2, r26	; 0x02
    35dc:	ef 01       	movw	r28, r30
    35de:	49 91       	ld	r20, Y+
    35e0:	59 91       	ld	r21, Y+
    35e2:	9e 01       	movw	r18, r28
    35e4:	24 0f       	add	r18, r20
    35e6:	35 1f       	adc	r19, r21
    35e8:	a2 17       	cp	r26, r18
    35ea:	b3 07       	cpc	r27, r19
    35ec:	79 f4       	brne	.+30     	; 0x360c <free+0x98>
    35ee:	2d 91       	ld	r18, X+
    35f0:	3c 91       	ld	r19, X
    35f2:	11 97       	sbiw	r26, 0x01	; 1
    35f4:	24 0f       	add	r18, r20
    35f6:	35 1f       	adc	r19, r21
    35f8:	2e 5f       	subi	r18, 0xFE	; 254
    35fa:	3f 4f       	sbci	r19, 0xFF	; 255
    35fc:	31 83       	std	Z+1, r19	; 0x01
    35fe:	20 83       	st	Z, r18
    3600:	12 96       	adiw	r26, 0x02	; 2
    3602:	2d 91       	ld	r18, X+
    3604:	3c 91       	ld	r19, X
    3606:	13 97       	sbiw	r26, 0x03	; 3
    3608:	33 83       	std	Z+3, r19	; 0x03
    360a:	22 83       	std	Z+2, r18	; 0x02
    360c:	00 97       	sbiw	r24, 0x00	; 0
    360e:	29 f4       	brne	.+10     	; 0x361a <free+0xa6>
    3610:	f0 93 20 03 	sts	0x0320, r31
    3614:	e0 93 1f 03 	sts	0x031F, r30
    3618:	43 c0       	rjmp	.+134    	; 0x36a0 <free+0x12c>
    361a:	dc 01       	movw	r26, r24
    361c:	13 96       	adiw	r26, 0x03	; 3
    361e:	fc 93       	st	X, r31
    3620:	ee 93       	st	-X, r30
    3622:	12 97       	sbiw	r26, 0x02	; 2
    3624:	4d 91       	ld	r20, X+
    3626:	5d 91       	ld	r21, X+
    3628:	a4 0f       	add	r26, r20
    362a:	b5 1f       	adc	r27, r21
    362c:	ea 17       	cp	r30, r26
    362e:	fb 07       	cpc	r31, r27
    3630:	69 f4       	brne	.+26     	; 0x364c <free+0xd8>
    3632:	20 81       	ld	r18, Z
    3634:	31 81       	ldd	r19, Z+1	; 0x01
    3636:	24 0f       	add	r18, r20
    3638:	35 1f       	adc	r19, r21
    363a:	2e 5f       	subi	r18, 0xFE	; 254
    363c:	3f 4f       	sbci	r19, 0xFF	; 255
    363e:	ec 01       	movw	r28, r24
    3640:	39 83       	std	Y+1, r19	; 0x01
    3642:	28 83       	st	Y, r18
    3644:	22 81       	ldd	r18, Z+2	; 0x02
    3646:	33 81       	ldd	r19, Z+3	; 0x03
    3648:	3b 83       	std	Y+3, r19	; 0x03
    364a:	2a 83       	std	Y+2, r18	; 0x02
    364c:	e0 e0       	ldi	r30, 0x00	; 0
    364e:	f0 e0       	ldi	r31, 0x00	; 0
    3650:	02 c0       	rjmp	.+4      	; 0x3656 <free+0xe2>
    3652:	fb 01       	movw	r30, r22
    3654:	bc 01       	movw	r22, r24
    3656:	db 01       	movw	r26, r22
    3658:	12 96       	adiw	r26, 0x02	; 2
    365a:	8d 91       	ld	r24, X+
    365c:	9c 91       	ld	r25, X
    365e:	13 97       	sbiw	r26, 0x03	; 3
    3660:	00 97       	sbiw	r24, 0x00	; 0
    3662:	b9 f7       	brne	.-18     	; 0x3652 <free+0xde>
    3664:	9b 01       	movw	r18, r22
    3666:	2e 5f       	subi	r18, 0xFE	; 254
    3668:	3f 4f       	sbci	r19, 0xFF	; 255
    366a:	8d 91       	ld	r24, X+
    366c:	9c 91       	ld	r25, X
    366e:	11 97       	sbiw	r26, 0x01	; 1
    3670:	82 0f       	add	r24, r18
    3672:	93 1f       	adc	r25, r19
    3674:	40 91 1d 03 	lds	r20, 0x031D
    3678:	50 91 1e 03 	lds	r21, 0x031E
    367c:	48 17       	cp	r20, r24
    367e:	59 07       	cpc	r21, r25
    3680:	79 f4       	brne	.+30     	; 0x36a0 <free+0x12c>
    3682:	30 97       	sbiw	r30, 0x00	; 0
    3684:	29 f4       	brne	.+10     	; 0x3690 <free+0x11c>
    3686:	10 92 20 03 	sts	0x0320, r1
    368a:	10 92 1f 03 	sts	0x031F, r1
    368e:	02 c0       	rjmp	.+4      	; 0x3694 <free+0x120>
    3690:	13 82       	std	Z+3, r1	; 0x03
    3692:	12 82       	std	Z+2, r1	; 0x02
    3694:	22 50       	subi	r18, 0x02	; 2
    3696:	30 40       	sbci	r19, 0x00	; 0
    3698:	30 93 1e 03 	sts	0x031E, r19
    369c:	20 93 1d 03 	sts	0x031D, r18
    36a0:	df 91       	pop	r29
    36a2:	cf 91       	pop	r28
    36a4:	08 95       	ret

000036a6 <realloc>:
    36a6:	a0 e0       	ldi	r26, 0x00	; 0
    36a8:	b0 e0       	ldi	r27, 0x00	; 0
    36aa:	e9 e5       	ldi	r30, 0x59	; 89
    36ac:	fb e1       	ldi	r31, 0x1B	; 27
    36ae:	0c 94 e9 19 	jmp	0x33d2	; 0x33d2 <__prologue_saves__+0xc>
    36b2:	8c 01       	movw	r16, r24
    36b4:	cb 01       	movw	r24, r22
    36b6:	01 15       	cp	r16, r1
    36b8:	11 05       	cpc	r17, r1
    36ba:	29 f4       	brne	.+10     	; 0x36c6 <realloc+0x20>
    36bc:	0e 94 20 1a 	call	0x3440	; 0x3440 <malloc>
    36c0:	08 2f       	mov	r16, r24
    36c2:	19 2f       	mov	r17, r25
    36c4:	b5 c0       	rjmp	.+362    	; 0x3830 <realloc+0x18a>
    36c6:	d8 01       	movw	r26, r16
    36c8:	12 97       	sbiw	r26, 0x02	; 2
    36ca:	98 01       	movw	r18, r16
    36cc:	26 0f       	add	r18, r22
    36ce:	37 1f       	adc	r19, r23
    36d0:	2a 17       	cp	r18, r26
    36d2:	3b 07       	cpc	r19, r27
    36d4:	08 f4       	brcc	.+2      	; 0x36d8 <realloc+0x32>
    36d6:	aa c0       	rjmp	.+340    	; 0x382c <realloc+0x186>
    36d8:	ed 90       	ld	r14, X+
    36da:	fc 90       	ld	r15, X
    36dc:	11 97       	sbiw	r26, 0x01	; 1
    36de:	e6 16       	cp	r14, r22
    36e0:	f7 06       	cpc	r15, r23
    36e2:	d0 f0       	brcs	.+52     	; 0x3718 <realloc+0x72>
    36e4:	45 e0       	ldi	r20, 0x05	; 5
    36e6:	e4 16       	cp	r14, r20
    36e8:	f1 04       	cpc	r15, r1
    36ea:	08 f4       	brcc	.+2      	; 0x36ee <realloc+0x48>
    36ec:	a1 c0       	rjmp	.+322    	; 0x3830 <realloc+0x18a>
    36ee:	a7 01       	movw	r20, r14
    36f0:	44 50       	subi	r20, 0x04	; 4
    36f2:	50 40       	sbci	r21, 0x00	; 0
    36f4:	46 17       	cp	r20, r22
    36f6:	57 07       	cpc	r21, r23
    36f8:	08 f4       	brcc	.+2      	; 0x36fc <realloc+0x56>
    36fa:	9a c0       	rjmp	.+308    	; 0x3830 <realloc+0x18a>
    36fc:	a7 01       	movw	r20, r14
    36fe:	42 50       	subi	r20, 0x02	; 2
    3700:	50 40       	sbci	r21, 0x00	; 0
    3702:	46 1b       	sub	r20, r22
    3704:	57 0b       	sbc	r21, r23
    3706:	f9 01       	movw	r30, r18
    3708:	41 93       	st	Z+, r20
    370a:	51 93       	st	Z+, r21
    370c:	6d 93       	st	X+, r22
    370e:	7c 93       	st	X, r23
    3710:	cf 01       	movw	r24, r30
    3712:	0e 94 ba 1a 	call	0x3574	; 0x3574 <free>
    3716:	8c c0       	rjmp	.+280    	; 0x3830 <realloc+0x18a>
    3718:	5b 01       	movw	r10, r22
    371a:	ae 18       	sub	r10, r14
    371c:	bf 08       	sbc	r11, r15
    371e:	48 01       	movw	r8, r16
    3720:	8e 0c       	add	r8, r14
    3722:	9f 1c       	adc	r9, r15
    3724:	e0 91 1f 03 	lds	r30, 0x031F
    3728:	f0 91 20 03 	lds	r31, 0x0320
    372c:	cc 24       	eor	r12, r12
    372e:	dd 24       	eor	r13, r13
    3730:	c0 e0       	ldi	r28, 0x00	; 0
    3732:	d0 e0       	ldi	r29, 0x00	; 0
    3734:	41 c0       	rjmp	.+130    	; 0x37b8 <realloc+0x112>
    3736:	e8 15       	cp	r30, r8
    3738:	f9 05       	cpc	r31, r9
    373a:	99 f5       	brne	.+102    	; 0x37a2 <realloc+0xfc>
    373c:	60 81       	ld	r22, Z
    373e:	71 81       	ldd	r23, Z+1	; 0x01
    3740:	ab 01       	movw	r20, r22
    3742:	4e 5f       	subi	r20, 0xFE	; 254
    3744:	5f 4f       	sbci	r21, 0xFF	; 255
    3746:	4a 15       	cp	r20, r10
    3748:	5b 05       	cpc	r21, r11
    374a:	58 f1       	brcs	.+86     	; 0x37a2 <realloc+0xfc>
    374c:	ab 01       	movw	r20, r22
    374e:	4a 19       	sub	r20, r10
    3750:	5b 09       	sbc	r21, r11
    3752:	cc 24       	eor	r12, r12
    3754:	dd 24       	eor	r13, r13
    3756:	68 94       	set
    3758:	c1 f8       	bld	r12, 1
    375a:	c4 0e       	add	r12, r20
    375c:	d5 1e       	adc	r13, r21
    375e:	82 80       	ldd	r8, Z+2	; 0x02
    3760:	a3 80       	ldd	r10, Z+3	; 0x03
    3762:	e5 e0       	ldi	r30, 0x05	; 5
    3764:	ce 16       	cp	r12, r30
    3766:	d1 04       	cpc	r13, r1
    3768:	48 f0       	brcs	.+18     	; 0x377c <realloc+0xd6>
    376a:	f9 01       	movw	r30, r18
    376c:	82 82       	std	Z+2, r8	; 0x02
    376e:	a3 82       	std	Z+3, r10	; 0x03
    3770:	51 83       	std	Z+1, r21	; 0x01
    3772:	40 83       	st	Z, r20
    3774:	11 96       	adiw	r26, 0x01	; 1
    3776:	9c 93       	st	X, r25
    3778:	8e 93       	st	-X, r24
    377a:	09 c0       	rjmp	.+18     	; 0x378e <realloc+0xe8>
    377c:	c7 01       	movw	r24, r14
    377e:	02 96       	adiw	r24, 0x02	; 2
    3780:	86 0f       	add	r24, r22
    3782:	97 1f       	adc	r25, r23
    3784:	11 96       	adiw	r26, 0x01	; 1
    3786:	9c 93       	st	X, r25
    3788:	8e 93       	st	-X, r24
    378a:	e8 2d       	mov	r30, r8
    378c:	fa 2d       	mov	r31, r10
    378e:	20 97       	sbiw	r28, 0x00	; 0
    3790:	19 f0       	breq	.+6      	; 0x3798 <realloc+0xf2>
    3792:	fb 83       	std	Y+3, r31	; 0x03
    3794:	ea 83       	std	Y+2, r30	; 0x02
    3796:	4c c0       	rjmp	.+152    	; 0x3830 <realloc+0x18a>
    3798:	f0 93 20 03 	sts	0x0320, r31
    379c:	e0 93 1f 03 	sts	0x031F, r30
    37a0:	47 c0       	rjmp	.+142    	; 0x3830 <realloc+0x18a>
    37a2:	40 81       	ld	r20, Z
    37a4:	51 81       	ldd	r21, Z+1	; 0x01
    37a6:	c4 16       	cp	r12, r20
    37a8:	d5 06       	cpc	r13, r21
    37aa:	08 f4       	brcc	.+2      	; 0x37ae <realloc+0x108>
    37ac:	6a 01       	movw	r12, r20
    37ae:	ef 01       	movw	r28, r30
    37b0:	52 81       	ldd	r21, Z+2	; 0x02
    37b2:	43 81       	ldd	r20, Z+3	; 0x03
    37b4:	e5 2f       	mov	r30, r21
    37b6:	f4 2f       	mov	r31, r20
    37b8:	30 97       	sbiw	r30, 0x00	; 0
    37ba:	09 f0       	breq	.+2      	; 0x37be <realloc+0x118>
    37bc:	bc cf       	rjmp	.-136    	; 0x3736 <realloc+0x90>
    37be:	40 91 1d 03 	lds	r20, 0x031D
    37c2:	50 91 1e 03 	lds	r21, 0x031E
    37c6:	48 15       	cp	r20, r8
    37c8:	59 05       	cpc	r21, r9
    37ca:	e9 f4       	brne	.+58     	; 0x3806 <realloc+0x160>
    37cc:	c8 16       	cp	r12, r24
    37ce:	d9 06       	cpc	r13, r25
    37d0:	d0 f4       	brcc	.+52     	; 0x3806 <realloc+0x160>
    37d2:	40 91 1e 02 	lds	r20, 0x021E
    37d6:	50 91 1f 02 	lds	r21, 0x021F
    37da:	41 15       	cp	r20, r1
    37dc:	51 05       	cpc	r21, r1
    37de:	41 f4       	brne	.+16     	; 0x37f0 <realloc+0x14a>
    37e0:	4d b7       	in	r20, 0x3d	; 61
    37e2:	5e b7       	in	r21, 0x3e	; 62
    37e4:	60 91 1a 02 	lds	r22, 0x021A
    37e8:	70 91 1b 02 	lds	r23, 0x021B
    37ec:	46 1b       	sub	r20, r22
    37ee:	57 0b       	sbc	r21, r23
    37f0:	24 17       	cp	r18, r20
    37f2:	35 07       	cpc	r19, r21
    37f4:	d8 f4       	brcc	.+54     	; 0x382c <realloc+0x186>
    37f6:	30 93 1e 03 	sts	0x031E, r19
    37fa:	20 93 1d 03 	sts	0x031D, r18
    37fe:	11 96       	adiw	r26, 0x01	; 1
    3800:	9c 93       	st	X, r25
    3802:	8e 93       	st	-X, r24
    3804:	15 c0       	rjmp	.+42     	; 0x3830 <realloc+0x18a>
    3806:	0e 94 20 1a 	call	0x3440	; 0x3440 <malloc>
    380a:	c8 2e       	mov	r12, r24
    380c:	e6 01       	movw	r28, r12
    380e:	6e 01       	movw	r12, r28
    3810:	d9 2e       	mov	r13, r25
    3812:	e6 01       	movw	r28, r12
    3814:	20 97       	sbiw	r28, 0x00	; 0
    3816:	51 f0       	breq	.+20     	; 0x382c <realloc+0x186>
    3818:	8c 2d       	mov	r24, r12
    381a:	b8 01       	movw	r22, r16
    381c:	a7 01       	movw	r20, r14
    381e:	0e 94 5d 1c 	call	0x38ba	; 0x38ba <memcpy>
    3822:	c8 01       	movw	r24, r16
    3824:	0e 94 ba 1a 	call	0x3574	; 0x3574 <free>
    3828:	86 01       	movw	r16, r12
    382a:	02 c0       	rjmp	.+4      	; 0x3830 <realloc+0x18a>
    382c:	00 e0       	ldi	r16, 0x00	; 0
    382e:	10 e0       	ldi	r17, 0x00	; 0
    3830:	c8 01       	movw	r24, r16
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	ec e0       	ldi	r30, 0x0C	; 12
    3838:	0c 94 05 1a 	jmp	0x340a	; 0x340a <__epilogue_restores__+0xc>

0000383c <atol>:
    383c:	1f 93       	push	r17
    383e:	fc 01       	movw	r30, r24
    3840:	99 27       	eor	r25, r25
    3842:	88 27       	eor	r24, r24
    3844:	bc 01       	movw	r22, r24
    3846:	e8 94       	clt
    3848:	11 91       	ld	r17, Z+
    384a:	10 32       	cpi	r17, 0x20	; 32
    384c:	e9 f3       	breq	.-6      	; 0x3848 <atol+0xc>
    384e:	19 30       	cpi	r17, 0x09	; 9
    3850:	10 f0       	brcs	.+4      	; 0x3856 <atol+0x1a>
    3852:	1e 30       	cpi	r17, 0x0E	; 14
    3854:	c8 f3       	brcs	.-14     	; 0x3848 <atol+0xc>
    3856:	1b 32       	cpi	r17, 0x2B	; 43
    3858:	51 f0       	breq	.+20     	; 0x386e <atol+0x32>
    385a:	1d 32       	cpi	r17, 0x2D	; 45
    385c:	49 f4       	brne	.+18     	; 0x3870 <atol+0x34>
    385e:	68 94       	set
    3860:	06 c0       	rjmp	.+12     	; 0x386e <atol+0x32>
    3862:	0e 94 2a 1d 	call	0x3a54	; 0x3a54 <__mulsi_const_10>
    3866:	61 0f       	add	r22, r17
    3868:	71 1d       	adc	r23, r1
    386a:	81 1d       	adc	r24, r1
    386c:	91 1d       	adc	r25, r1
    386e:	11 91       	ld	r17, Z+
    3870:	10 53       	subi	r17, 0x30	; 48
    3872:	1a 30       	cpi	r17, 0x0A	; 10
    3874:	b0 f3       	brcs	.-20     	; 0x3862 <atol+0x26>
    3876:	3e f4       	brtc	.+14     	; 0x3886 <atol+0x4a>
    3878:	90 95       	com	r25
    387a:	80 95       	com	r24
    387c:	70 95       	com	r23
    387e:	61 95       	neg	r22
    3880:	7f 4f       	sbci	r23, 0xFF	; 255
    3882:	8f 4f       	sbci	r24, 0xFF	; 255
    3884:	9f 4f       	sbci	r25, 0xFF	; 255
    3886:	1f 91       	pop	r17
    3888:	08 95       	ret

0000388a <isspace>:
    388a:	91 11       	cpse	r25, r1
    388c:	33 c1       	rjmp	.+614    	; 0x3af4 <__ctype_isfalse>
    388e:	80 32       	cpi	r24, 0x20	; 32
    3890:	19 f0       	breq	.+6      	; 0x3898 <isspace+0xe>
    3892:	89 50       	subi	r24, 0x09	; 9
    3894:	85 50       	subi	r24, 0x05	; 5
    3896:	d0 f7       	brcc	.-12     	; 0x388c <isspace+0x2>
    3898:	08 95       	ret

0000389a <tolower>:
    389a:	91 11       	cpse	r25, r1
    389c:	08 95       	ret
    389e:	81 54       	subi	r24, 0x41	; 65
    38a0:	8a 51       	subi	r24, 0x1A	; 26
    38a2:	08 f4       	brcc	.+2      	; 0x38a6 <tolower+0xc>
    38a4:	80 5e       	subi	r24, 0xE0	; 224
    38a6:	85 5a       	subi	r24, 0xA5	; 165
    38a8:	08 95       	ret

000038aa <toupper>:
    38aa:	91 11       	cpse	r25, r1
    38ac:	08 95       	ret
    38ae:	81 56       	subi	r24, 0x61	; 97
    38b0:	8a 51       	subi	r24, 0x1A	; 26
    38b2:	08 f4       	brcc	.+2      	; 0x38b6 <toupper+0xc>
    38b4:	80 52       	subi	r24, 0x20	; 32
    38b6:	85 58       	subi	r24, 0x85	; 133
    38b8:	08 95       	ret

000038ba <memcpy>:
    38ba:	fb 01       	movw	r30, r22
    38bc:	dc 01       	movw	r26, r24
    38be:	02 c0       	rjmp	.+4      	; 0x38c4 <memcpy+0xa>
    38c0:	01 90       	ld	r0, Z+
    38c2:	0d 92       	st	X+, r0
    38c4:	41 50       	subi	r20, 0x01	; 1
    38c6:	50 40       	sbci	r21, 0x00	; 0
    38c8:	d8 f7       	brcc	.-10     	; 0x38c0 <memcpy+0x6>
    38ca:	08 95       	ret

000038cc <memmove>:
    38cc:	68 17       	cp	r22, r24
    38ce:	79 07       	cpc	r23, r25
    38d0:	68 f4       	brcc	.+26     	; 0x38ec <memmove+0x20>
    38d2:	fb 01       	movw	r30, r22
    38d4:	dc 01       	movw	r26, r24
    38d6:	e4 0f       	add	r30, r20
    38d8:	f5 1f       	adc	r31, r21
    38da:	a4 0f       	add	r26, r20
    38dc:	b5 1f       	adc	r27, r21
    38de:	02 c0       	rjmp	.+4      	; 0x38e4 <memmove+0x18>
    38e0:	02 90       	ld	r0, -Z
    38e2:	0e 92       	st	-X, r0
    38e4:	41 50       	subi	r20, 0x01	; 1
    38e6:	50 40       	sbci	r21, 0x00	; 0
    38e8:	d8 f7       	brcc	.-10     	; 0x38e0 <memmove+0x14>
    38ea:	08 95       	ret
    38ec:	0c 94 5d 1c 	jmp	0x38ba	; 0x38ba <memcpy>

000038f0 <strchr>:
    38f0:	fc 01       	movw	r30, r24
    38f2:	81 91       	ld	r24, Z+
    38f4:	86 17       	cp	r24, r22
    38f6:	21 f0       	breq	.+8      	; 0x3900 <strchr+0x10>
    38f8:	88 23       	and	r24, r24
    38fa:	d9 f7       	brne	.-10     	; 0x38f2 <strchr+0x2>
    38fc:	99 27       	eor	r25, r25
    38fe:	08 95       	ret
    3900:	31 97       	sbiw	r30, 0x01	; 1
    3902:	cf 01       	movw	r24, r30
    3904:	08 95       	ret

00003906 <strcmp>:
    3906:	fb 01       	movw	r30, r22
    3908:	dc 01       	movw	r26, r24
    390a:	8d 91       	ld	r24, X+
    390c:	01 90       	ld	r0, Z+
    390e:	80 19       	sub	r24, r0
    3910:	01 10       	cpse	r0, r1
    3912:	d9 f3       	breq	.-10     	; 0x390a <strcmp+0x4>
    3914:	99 0b       	sbc	r25, r25
    3916:	08 95       	ret

00003918 <strcpy>:
    3918:	fb 01       	movw	r30, r22
    391a:	dc 01       	movw	r26, r24
    391c:	01 90       	ld	r0, Z+
    391e:	0d 92       	st	X+, r0
    3920:	00 20       	and	r0, r0
    3922:	e1 f7       	brne	.-8      	; 0x391c <strcpy+0x4>
    3924:	08 95       	ret

00003926 <strncmp>:
    3926:	fb 01       	movw	r30, r22
    3928:	dc 01       	movw	r26, r24
    392a:	41 50       	subi	r20, 0x01	; 1
    392c:	50 40       	sbci	r21, 0x00	; 0
    392e:	30 f0       	brcs	.+12     	; 0x393c <strncmp+0x16>
    3930:	8d 91       	ld	r24, X+
    3932:	01 90       	ld	r0, Z+
    3934:	80 19       	sub	r24, r0
    3936:	19 f4       	brne	.+6      	; 0x393e <strncmp+0x18>
    3938:	00 20       	and	r0, r0
    393a:	b9 f7       	brne	.-18     	; 0x392a <strncmp+0x4>
    393c:	88 1b       	sub	r24, r24
    393e:	99 0b       	sbc	r25, r25
    3940:	08 95       	ret

00003942 <strncpy>:
    3942:	fb 01       	movw	r30, r22
    3944:	dc 01       	movw	r26, r24
    3946:	41 50       	subi	r20, 0x01	; 1
    3948:	50 40       	sbci	r21, 0x00	; 0
    394a:	48 f0       	brcs	.+18     	; 0x395e <strncpy+0x1c>
    394c:	01 90       	ld	r0, Z+
    394e:	0d 92       	st	X+, r0
    3950:	00 20       	and	r0, r0
    3952:	c9 f7       	brne	.-14     	; 0x3946 <strncpy+0x4>
    3954:	01 c0       	rjmp	.+2      	; 0x3958 <strncpy+0x16>
    3956:	1d 92       	st	X+, r1
    3958:	41 50       	subi	r20, 0x01	; 1
    395a:	50 40       	sbci	r21, 0x00	; 0
    395c:	e0 f7       	brcc	.-8      	; 0x3956 <strncpy+0x14>
    395e:	08 95       	ret

00003960 <strrchr>:
    3960:	fc 01       	movw	r30, r24
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	01 90       	ld	r0, Z+
    3968:	06 16       	cp	r0, r22
    396a:	09 f4       	brne	.+2      	; 0x396e <strrchr+0xe>
    396c:	cf 01       	movw	r24, r30
    396e:	00 20       	and	r0, r0
    3970:	d1 f7       	brne	.-12     	; 0x3966 <strrchr+0x6>
    3972:	01 97       	sbiw	r24, 0x01	; 1
    3974:	08 95       	ret

00003976 <strstr>:
    3976:	fb 01       	movw	r30, r22
    3978:	51 91       	ld	r21, Z+
    397a:	55 23       	and	r21, r21
    397c:	a9 f0       	breq	.+42     	; 0x39a8 <strstr+0x32>
    397e:	bf 01       	movw	r22, r30
    3980:	dc 01       	movw	r26, r24
    3982:	4d 91       	ld	r20, X+
    3984:	45 17       	cp	r20, r21
    3986:	41 11       	cpse	r20, r1
    3988:	e1 f7       	brne	.-8      	; 0x3982 <strstr+0xc>
    398a:	59 f4       	brne	.+22     	; 0x39a2 <strstr+0x2c>
    398c:	cd 01       	movw	r24, r26
    398e:	01 90       	ld	r0, Z+
    3990:	00 20       	and	r0, r0
    3992:	49 f0       	breq	.+18     	; 0x39a6 <strstr+0x30>
    3994:	4d 91       	ld	r20, X+
    3996:	40 15       	cp	r20, r0
    3998:	41 11       	cpse	r20, r1
    399a:	c9 f3       	breq	.-14     	; 0x398e <strstr+0x18>
    399c:	fb 01       	movw	r30, r22
    399e:	41 11       	cpse	r20, r1
    39a0:	ef cf       	rjmp	.-34     	; 0x3980 <strstr+0xa>
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	90 e0       	ldi	r25, 0x00	; 0
    39a6:	01 97       	sbiw	r24, 0x01	; 1
    39a8:	08 95       	ret

000039aa <itoa>:
    39aa:	fb 01       	movw	r30, r22
    39ac:	9f 01       	movw	r18, r30
    39ae:	e8 94       	clt
    39b0:	42 30       	cpi	r20, 0x02	; 2
    39b2:	c4 f0       	brlt	.+48     	; 0x39e4 <itoa+0x3a>
    39b4:	45 32       	cpi	r20, 0x25	; 37
    39b6:	b4 f4       	brge	.+44     	; 0x39e4 <itoa+0x3a>
    39b8:	4a 30       	cpi	r20, 0x0A	; 10
    39ba:	29 f4       	brne	.+10     	; 0x39c6 <itoa+0x1c>
    39bc:	97 fb       	bst	r25, 7
    39be:	1e f4       	brtc	.+6      	; 0x39c6 <itoa+0x1c>
    39c0:	90 95       	com	r25
    39c2:	81 95       	neg	r24
    39c4:	9f 4f       	sbci	r25, 0xFF	; 255
    39c6:	64 2f       	mov	r22, r20
    39c8:	77 27       	eor	r23, r23
    39ca:	0e 94 cf 19 	call	0x339e	; 0x339e <__udivmodhi4>
    39ce:	80 5d       	subi	r24, 0xD0	; 208
    39d0:	8a 33       	cpi	r24, 0x3A	; 58
    39d2:	0c f0       	brlt	.+2      	; 0x39d6 <itoa+0x2c>
    39d4:	89 5d       	subi	r24, 0xD9	; 217
    39d6:	81 93       	st	Z+, r24
    39d8:	cb 01       	movw	r24, r22
    39da:	00 97       	sbiw	r24, 0x00	; 0
    39dc:	a1 f7       	brne	.-24     	; 0x39c6 <itoa+0x1c>
    39de:	16 f4       	brtc	.+4      	; 0x39e4 <itoa+0x3a>
    39e0:	5d e2       	ldi	r21, 0x2D	; 45
    39e2:	51 93       	st	Z+, r21
    39e4:	10 82       	st	Z, r1
    39e6:	c9 01       	movw	r24, r18
    39e8:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <strrev>

000039ec <ltoa>:
    39ec:	fa 01       	movw	r30, r20
    39ee:	cf 93       	push	r28
    39f0:	ff 93       	push	r31
    39f2:	ef 93       	push	r30
    39f4:	22 30       	cpi	r18, 0x02	; 2
    39f6:	44 f1       	brlt	.+80     	; 0x3a48 <ltoa+0x5c>
    39f8:	25 32       	cpi	r18, 0x25	; 37
    39fa:	34 f5       	brge	.+76     	; 0x3a48 <ltoa+0x5c>
    39fc:	c2 2f       	mov	r28, r18
    39fe:	e8 94       	clt
    3a00:	ca 30       	cpi	r28, 0x0A	; 10
    3a02:	49 f4       	brne	.+18     	; 0x3a16 <ltoa+0x2a>
    3a04:	97 fb       	bst	r25, 7
    3a06:	3e f4       	brtc	.+14     	; 0x3a16 <ltoa+0x2a>
    3a08:	90 95       	com	r25
    3a0a:	80 95       	com	r24
    3a0c:	70 95       	com	r23
    3a0e:	61 95       	neg	r22
    3a10:	7f 4f       	sbci	r23, 0xFF	; 255
    3a12:	8f 4f       	sbci	r24, 0xFF	; 255
    3a14:	9f 4f       	sbci	r25, 0xFF	; 255
    3a16:	2c 2f       	mov	r18, r28
    3a18:	33 27       	eor	r19, r19
    3a1a:	44 27       	eor	r20, r20
    3a1c:	55 27       	eor	r21, r21
    3a1e:	ff 93       	push	r31
    3a20:	ef 93       	push	r30
    3a22:	0e 94 ad 19 	call	0x335a	; 0x335a <__udivmodsi4>
    3a26:	ef 91       	pop	r30
    3a28:	ff 91       	pop	r31
    3a2a:	60 5d       	subi	r22, 0xD0	; 208
    3a2c:	6a 33       	cpi	r22, 0x3A	; 58
    3a2e:	0c f0       	brlt	.+2      	; 0x3a32 <ltoa+0x46>
    3a30:	69 5d       	subi	r22, 0xD9	; 217
    3a32:	61 93       	st	Z+, r22
    3a34:	b9 01       	movw	r22, r18
    3a36:	ca 01       	movw	r24, r20
    3a38:	60 50       	subi	r22, 0x00	; 0
    3a3a:	70 40       	sbci	r23, 0x00	; 0
    3a3c:	80 40       	sbci	r24, 0x00	; 0
    3a3e:	90 40       	sbci	r25, 0x00	; 0
    3a40:	51 f7       	brne	.-44     	; 0x3a16 <ltoa+0x2a>
    3a42:	16 f4       	brtc	.+4      	; 0x3a48 <ltoa+0x5c>
    3a44:	cd e2       	ldi	r28, 0x2D	; 45
    3a46:	c1 93       	st	Z+, r28
    3a48:	10 82       	st	Z, r1
    3a4a:	8f 91       	pop	r24
    3a4c:	9f 91       	pop	r25
    3a4e:	cf 91       	pop	r28
    3a50:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <strrev>

00003a54 <__mulsi_const_10>:
    3a54:	59 2f       	mov	r21, r25
    3a56:	48 2f       	mov	r20, r24
    3a58:	37 2f       	mov	r19, r23
    3a5a:	26 2f       	mov	r18, r22
    3a5c:	66 0f       	add	r22, r22
    3a5e:	77 1f       	adc	r23, r23
    3a60:	88 1f       	adc	r24, r24
    3a62:	99 1f       	adc	r25, r25
    3a64:	66 0f       	add	r22, r22
    3a66:	77 1f       	adc	r23, r23
    3a68:	88 1f       	adc	r24, r24
    3a6a:	99 1f       	adc	r25, r25
    3a6c:	62 0f       	add	r22, r18
    3a6e:	73 1f       	adc	r23, r19
    3a70:	84 1f       	adc	r24, r20
    3a72:	95 1f       	adc	r25, r21
    3a74:	66 0f       	add	r22, r22
    3a76:	77 1f       	adc	r23, r23
    3a78:	88 1f       	adc	r24, r24
    3a7a:	99 1f       	adc	r25, r25
    3a7c:	08 95       	ret

00003a7e <ultoa>:
    3a7e:	fa 01       	movw	r30, r20
    3a80:	cf 93       	push	r28
    3a82:	ff 93       	push	r31
    3a84:	ef 93       	push	r30
    3a86:	22 30       	cpi	r18, 0x02	; 2
    3a88:	cc f0       	brlt	.+50     	; 0x3abc <ultoa+0x3e>
    3a8a:	25 32       	cpi	r18, 0x25	; 37
    3a8c:	bc f4       	brge	.+46     	; 0x3abc <ultoa+0x3e>
    3a8e:	c2 2f       	mov	r28, r18
    3a90:	2c 2f       	mov	r18, r28
    3a92:	33 27       	eor	r19, r19
    3a94:	44 27       	eor	r20, r20
    3a96:	55 27       	eor	r21, r21
    3a98:	ff 93       	push	r31
    3a9a:	ef 93       	push	r30
    3a9c:	0e 94 ad 19 	call	0x335a	; 0x335a <__udivmodsi4>
    3aa0:	ef 91       	pop	r30
    3aa2:	ff 91       	pop	r31
    3aa4:	60 5d       	subi	r22, 0xD0	; 208
    3aa6:	6a 33       	cpi	r22, 0x3A	; 58
    3aa8:	0c f0       	brlt	.+2      	; 0x3aac <ultoa+0x2e>
    3aaa:	69 5d       	subi	r22, 0xD9	; 217
    3aac:	61 93       	st	Z+, r22
    3aae:	b9 01       	movw	r22, r18
    3ab0:	ca 01       	movw	r24, r20
    3ab2:	60 50       	subi	r22, 0x00	; 0
    3ab4:	70 40       	sbci	r23, 0x00	; 0
    3ab6:	80 40       	sbci	r24, 0x00	; 0
    3ab8:	90 40       	sbci	r25, 0x00	; 0
    3aba:	51 f7       	brne	.-44     	; 0x3a90 <ultoa+0x12>
    3abc:	10 82       	st	Z, r1
    3abe:	8f 91       	pop	r24
    3ac0:	9f 91       	pop	r25
    3ac2:	cf 91       	pop	r28
    3ac4:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <strrev>

00003ac8 <utoa>:
    3ac8:	fb 01       	movw	r30, r22
    3aca:	9f 01       	movw	r18, r30
    3acc:	42 30       	cpi	r20, 0x02	; 2
    3ace:	74 f0       	brlt	.+28     	; 0x3aec <utoa+0x24>
    3ad0:	45 32       	cpi	r20, 0x25	; 37
    3ad2:	64 f4       	brge	.+24     	; 0x3aec <utoa+0x24>
    3ad4:	64 2f       	mov	r22, r20
    3ad6:	77 27       	eor	r23, r23
    3ad8:	0e 94 cf 19 	call	0x339e	; 0x339e <__udivmodhi4>
    3adc:	80 5d       	subi	r24, 0xD0	; 208
    3ade:	8a 33       	cpi	r24, 0x3A	; 58
    3ae0:	0c f0       	brlt	.+2      	; 0x3ae4 <utoa+0x1c>
    3ae2:	89 5d       	subi	r24, 0xD9	; 217
    3ae4:	81 93       	st	Z+, r24
    3ae6:	cb 01       	movw	r24, r22
    3ae8:	00 97       	sbiw	r24, 0x00	; 0
    3aea:	a1 f7       	brne	.-24     	; 0x3ad4 <utoa+0xc>
    3aec:	10 82       	st	Z, r1
    3aee:	c9 01       	movw	r24, r18
    3af0:	0c 94 7d 1d 	jmp	0x3afa	; 0x3afa <strrev>

00003af4 <__ctype_isfalse>:
    3af4:	99 27       	eor	r25, r25
    3af6:	88 27       	eor	r24, r24

00003af8 <__ctype_istrue>:
    3af8:	08 95       	ret

00003afa <strrev>:
    3afa:	dc 01       	movw	r26, r24
    3afc:	fc 01       	movw	r30, r24
    3afe:	67 2f       	mov	r22, r23
    3b00:	71 91       	ld	r23, Z+
    3b02:	77 23       	and	r23, r23
    3b04:	e1 f7       	brne	.-8      	; 0x3afe <strrev+0x4>
    3b06:	32 97       	sbiw	r30, 0x02	; 2
    3b08:	04 c0       	rjmp	.+8      	; 0x3b12 <strrev+0x18>
    3b0a:	7c 91       	ld	r23, X
    3b0c:	6d 93       	st	X+, r22
    3b0e:	70 83       	st	Z, r23
    3b10:	62 91       	ld	r22, -Z
    3b12:	ae 17       	cp	r26, r30
    3b14:	bf 07       	cpc	r27, r31
    3b16:	c8 f3       	brcs	.-14     	; 0x3b0a <strrev+0x10>
    3b18:	08 95       	ret

00003b1a <_exit>:
    3b1a:	f8 94       	cli

00003b1c <__stop_program>:
    3b1c:	ff cf       	rjmp	.-2      	; 0x3b1c <__stop_program>
