%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.6.1-20100214-22-ga30f00b
%%CreationDate: Fri Jun 29 22:32:51 2012
%%Title: /media/shared/Flim-Transport/Documents/Electronic_Schematics.sch
%%Author: (null)
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%Endcomments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
7485 499 translate 90 rotate
0.588235 0.588235 scale
-40000 -40000 translate
gsave
40000 40000 57000 40000 10 line
57000 40000 57000 51000 10 line
57000 51000 40000 51000 10 line
40000 51000 40000 40000 10 line
52900 40600 52900 40000 10 line
gsave
false false false false 208.000000 [(FILE:) ] 0 49500 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(REVISION:) ] 0 53000 40400 144.444443 text
grestore
gsave
false false false false 208.000000 [(DRAWN BY: ) ] 0 53000 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(PAGE) ] 0 49500 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(OF) ] 0 51200 40100 144.444443 text
grestore
gsave
false false false false 208.000000 [(TITLE) ] 0 49500 40700 144.444443 text
grestore
49400 40000 57000 40000 10 line
57000 40000 57000 41400 10 line
57000 41400 49400 41400 10 line
49400 41400 49400 40000 10 line
49400 40600 57000 40600 10 line
grestore
gsave
41600 44800 44900 44800 10 line
44900 44800 44900 46000 10 line
44900 46000 41600 46000 10 line
41600 46000 41600 44800 10 line
gsave
false true false true 390.000000 [(Arduino MC) ] 0 44000 45500 270.833344 text
grestore
41600 45100 41400 45100 10 line
gsave
false true false true 260.000000 [(AREF) ] 0 41345 45100 180.555557 text
grestore
41600 45400 41400 45400 10 line
gsave
false true false true 260.000000 [(GND) ] 0 41345 45400 180.555557 text
grestore
44900 44900 45100 44900 10 line
gsave
false false false true 260.000000 [(RESET) ] 0 45155 44900 180.555557 text
grestore
44900 45100 45100 45100 10 line
gsave
false false false true 260.000000 [(3V3) ] 0 45155 45100 180.555557 text
grestore
44900 45300 45100 45300 10 line
gsave
false false false true 260.000000 [(5V) ] 0 45155 45300 180.555557 text
grestore
44900 45500 45100 45500 10 line
gsave
false false false true 260.000000 [(Gnd) ] 0 45155 45500 180.555557 text
grestore
44900 45700 45100 45700 10 line
gsave
false false false true 260.000000 [(Gnd) ] 0 45155 45700 180.555557 text
grestore
44900 45900 45100 45900 10 line
gsave
false false false true 260.000000 [(Vin) ] 0 45155 45900 180.555557 text
grestore
gsave
false false false false 208.000000 [(POWER) ] 90 44800 45100 144.444443 text
grestore
41700 44800 41700 44500 10 line
gsave
false false false false 260.000000 [(0) ] 90 41655 44595 180.555557 text
grestore
gsave
false true false true 208.000000 [(ANALOG IN) ] 0 42800 45000 144.444443 text
grestore
42000 44800 42000 44500 10 line
gsave
false false false false 260.000000 [(1) ] 90 41955 44595 180.555557 text
grestore
42300 44800 42300 44500 10 line
gsave
false false false false 260.000000 [(2) ] 90 42255 44595 180.555557 text
grestore
42600 44800 42600 44500 10 line
gsave
false false false false 260.000000 [(3) ] 90 42555 44595 180.555557 text
grestore
42900 44800 42900 44500 10 line
gsave
false false false false 260.000000 [(4) ] 90 42855 44595 180.555557 text
grestore
43200 44800 43200 44500 10 line
gsave
false false false false 260.000000 [(5) ] 90 43155 44595 180.555557 text
grestore
43800 44800 43800 44500 10 line
gsave
false true false false 260.000000 [(1) ] 90 43805 44445 180.555557 text
grestore
gsave
false false false false 260.000000 [(3) ] 90 43755 44595 180.555557 text
grestore
44100 44800 44100 44500 10 line
gsave
false true false false 260.000000 [(1) ] 90 44105 44445 180.555557 text
grestore
gsave
false false false false 260.000000 [(2) ] 90 44055 44595 180.555557 text
grestore
gsave
false true false true 208.000000 [(DIGITAL) ] 0 44400 45000 144.444443 text
grestore
gsave
false true false true 208.000000 [(DIGITAL) ] 0 43500 45900 144.444443 text
grestore
42200 46000 42200 46300 10 line
gsave
false true false false 260.000000 [(8) ] 90 42155 46205 180.555557 text
grestore
42500 46000 42500 46300 10 line
gsave
false true false false 260.000000 [(7) ] 90 42455 46205 180.555557 text
grestore
42800 46000 42800 46300 10 line
gsave
false false false false 260.000000 [(PWM) ] 90 42805 46355 180.555557 text
grestore
gsave
false true false false 260.000000 [(6) ] 90 42755 46205 180.555557 text
grestore
43100 46000 43100 46300 10 line
gsave
false false false false 260.000000 [(PWM) ] 90 43105 46355 180.555557 text
grestore
gsave
false true false false 260.000000 [(5) ] 90 43055 46205 180.555557 text
grestore
43400 46000 43400 46300 10 line
gsave
false true false false 260.000000 [(4) ] 90 43355 46205 180.555557 text
grestore
43700 46000 43700 46300 10 line
gsave
false false false false 260.000000 [(PWM) ] 90 43705 46355 180.555557 text
grestore
gsave
false true false false 260.000000 [(3) ] 90 43655 46205 180.555557 text
grestore
44400 44800 44400 44500 10 line
gsave
false true false false 260.000000 [(PWM 1) ] 90 44405 44445 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 90 44355 44595 180.555557 text
grestore
44700 44800 44700 44500 10 line
gsave
false true false false 260.000000 [(PWM 1) ] 90 44705 44445 180.555557 text
grestore
gsave
false false false false 260.000000 [(0) ] 90 44655 44595 180.555557 text
grestore
41900 46000 41900 46300 10 line
gsave
false false false false 260.000000 [(PWM) ] 90 41905 46355 180.555557 text
grestore
gsave
false true false false 260.000000 [(9) ] 90 41855 46205 180.555557 text
grestore
44000 46000 44000 46300 10 line
gsave
false true false false 260.000000 [(2) ] 90 43955 46205 180.555557 text
grestore
44600 46000 44600 46300 10 line
gsave
false false false false 260.000000 [(RX) ] 90 44605 46355 180.555557 text
grestore
gsave
false true false false 260.000000 [(0) ] 90 44555 46205 180.555557 text
grestore
44300 46000 44300 46300 10 line
gsave
false false false false 260.000000 [(TX) ] 90 44305 46355 180.555557 text
grestore
gsave
false true false false 260.000000 [(1) ] 90 44255 46205 180.555557 text
grestore
41600 45700 41400 45700 10 line
gsave
false true false true 260.000000 [(PWR) ] 0 41345 45700 180.555557 text
grestore
grestore
gsave
53000 47300 53200 47200 10 line
53200 47200 53000 47100 10 line
53000 47100 53200 47000 10 line
53200 47000 53000 46900 10 line
53000 47300 53200 47400 10 line
53200 47400 53100 47450 10 line
53100 47600 53100 47450 10 line
53100 46700 53100 46852 10 line
53000 46901 53100 46850 10 line
newpath
53100 47600
25
0 360 arc
fill
newpath
53100 47600
25
0 360 arc
fill
grestore
gsave
false false false false 260.000000 [(100K) ] 90 52900 46900 180.555557 text
grestore
gsave
46950 48400 46800 48400 10 line
47200 48400 47099 48348 10 line
47199 48401 47098 48453 10 line
47200 48500 47400 48400 10 line
47400 48400 47200 48300 10 line
47200 48300 47400 48200 10 line
47400 48200 47200 48100 10 line
47200 48500 47400 48600 10 line
47400 48600 47300 48650 10 line
47300 48800 47300 48650 10 line
47300 47900 47300 48052 10 line
47200 48101 47300 48050 10 line
47200 48400 46950 48400 10 line
grestore
gsave
false false false false 260.000000 [(POT) ] 90 47000 48500 180.555557 text
grestore
gsave
54100 49600 54100 49400 10 line
54100 48600 54100 48800 10 line
54100 49100 200 0 360 10 darc
54000 49273 54000 49400 10 line
54000 49400 54200 49400 10 line
54200 49400 54200 49273 10 line
54000 48926 54000 48800 10 line
54000 48800 54200 48800 10 line
54200 48800 54200 48927 10 line
grestore
gsave
false false false false 260.000000 [(DC Motor) ] 0 54400 49200 180.555557 text
grestore
gsave
gsave
false false false false 312.000000 [(VEXTA) ] 270 56200 43000 216.666672 text
grestore
55300 41700 56700 41700 10 line
56700 41700 56700 43700 10 line
56700 43700 55300 43700 10 line
55300 43700 55300 41700 10 line
gsave
false false false false 208.000000 [(        5 Phase) (Motor Stepper Motor) () ] 270 55600 43300 144.444443 text
grestore
55300 43500 55000 43500 10 line
gsave
false true false false 260.000000 [(BLACK) ] 0 54945 43500 180.555557 text
grestore
55300 43100 55000 43100 10 line
gsave
false true false false 260.000000 [(GREEN) ] 0 54945 43100 180.555557 text
grestore
55300 42700 55000 42700 10 line
gsave
false true false false 260.000000 [(ORANGE) ] 0 54945 42700 180.555557 text
grestore
55300 42300 55000 42300 10 line
gsave
false true false false 260.000000 [(RED) ] 0 54945 42300 180.555557 text
grestore
55300 41900 55000 41900 10 line
gsave
false true false false 260.000000 [(BLUE) ] 0 54945 41900 180.555557 text
grestore
56800 41700 55200 41700 10 line
55200 41700 55200 41600 10 line
56800 41700 56800 41600 10 line
55200 41600 56800 41600 10 line
56100 41600 56100 41400 10 line
56000 41400 56100 41400 10 line
56000 41600 56000 41400 10 line
grestore
gsave
gsave
false true false false 312.000000 [(VEXTA) ] 90 52300 43600 216.666672 text
grestore
52000 41700 52800 41700 10 line
52800 41700 52800 44700 10 line
52800 44700 52000 44700 10 line
52000 44700 52000 41700 10 line
52000 44300 51700 44300 10 line
gsave
false true false false 260.000000 [(AC) ] 0 51645 44300 180.555557 text
grestore
52000 43900 51700 43900 10 line
gsave
false true false false 260.000000 [(GND) ] 0 51645 43900 180.555557 text
grestore
52800 44300 53100 44300 10 line
gsave
false false false false 260.000000 [(CW +) ] 0 53155 44300 180.555557 text
grestore
gsave
false true false false 208.000000 [(Motor Controller) () ] 90 52700 43800 144.444443 text
grestore
52800 43900 53100 43900 10 line
gsave
false false false false 260.000000 [(CW -) ] 0 53155 43900 180.555557 text
grestore
52800 43500 53100 43500 10 line
gsave
false false false false 260.000000 [(BLACK) ] 0 53155 43500 180.555557 text
grestore
52800 43100 53100 43100 10 line
gsave
false false false false 260.000000 [(GREEN) ] 0 53155 43100 180.555557 text
grestore
52800 42700 53100 42700 10 line
gsave
false false false false 260.000000 [(ORANGE) ] 0 53155 42700 180.555557 text
grestore
52800 42300 53100 42300 10 line
gsave
false false false false 260.000000 [(RED) ] 0 53155 42300 180.555557 text
grestore
52800 41900 53100 41900 10 line
gsave
false false false false 260.000000 [(BLUE) ] 0 53155 41900 180.555557 text
grestore
grestore
gsave
gsave
false false false false 312.000000 [(LCD ) ] 0 43300 50000 216.666672 text
grestore
41700 49700 45100 49700 10 line
45100 49700 45100 50300 10 line
45100 50300 41700 50300 10 line
41700 50300 41700 49700 10 line
41600 49600 45200 49600 10 line
45200 49600 45200 50400 10 line
45200 50400 41600 50400 10 line
41600 50400 41600 49600 10 line
41800 49600 41800 49300 10 line
gsave
false true false false 260.000000 [(Vcc) ] 90 41800 49245 180.555557 text
grestore
42200 49600 42200 49300 10 line
gsave
false true false false 260.000000 [(GND) ] 90 42200 49245 180.555557 text
grestore
42600 49600 42600 49300 10 line
gsave
false true false false 260.000000 [(RS) ] 90 42600 49245 180.555557 text
grestore
gsave
false false false false 208.000000 [(SERLCD) ] 0 43200 49800 144.444443 text
grestore
43000 49600 43000 49300 10 line
gsave
false true false false 260.000000 [(D4) ] 90 43000 49245 180.555557 text
grestore
43400 49600 43400 49300 10 line
gsave
false true false false 260.000000 [(D5) ] 90 43400 49245 180.555557 text
grestore
43800 49600 43800 49300 10 line
gsave
false true false false 260.000000 [(D6) ] 90 43800 49245 180.555557 text
grestore
44200 49600 44200 49300 10 line
gsave
false true false false 260.000000 [(D7) ] 90 44200 49245 180.555557 text
grestore
44600 49600 44600 49300 10 line
gsave
false true false false 260.000000 [(Enable) ] 90 44600 49245 180.555557 text
grestore
45000 49600 45000 49300 10 line
gsave
false true false false 260.000000 [(Contrast V0) ] 90 45000 49245 180.555557 text
grestore
grestore
gsave
gsave
false false false false 234.000000 [(955 POWER SUPPLY) ] 270 50200 48100 162.500000 text
grestore
49900 46300 50700 46300 10 line
50700 46300 50700 48200 10 line
50700 48200 49900 48200 10 line
49900 48200 49900 46300 10 line
49900 47900 49600 47900 10 line
gsave
false true false false 260.000000 [(AC) ] 0 49545 47900 180.555557 text
grestore
49900 47500 49600 47500 10 line
gsave
false true false false 260.000000 [(AC) ] 0 49545 47500 180.555557 text
grestore
49900 47100 49600 47100 10 line
gsave
false true false false 260.000000 [(5VDC) ] 0 49545 47100 180.555557 text
grestore
49900 46700 49600 46700 10 line
gsave
false true false false 260.000000 [(GND) ] 0 49545 46700 180.555557 text
grestore
grestore
gsave
46200 49400 46200 49700 10 line
gsave
false true false true 208.000000 [(1) ] 0 46150 49600 144.444443 text
grestore
gsave
true false false false 208.000000 [(+) ] 0 46200 49750 144.444443 text
grestore
46200 50600 46200 50300 10 line
gsave
false true false true 208.000000 [(2) ] 0 46150 50500 144.444443 text
grestore
gsave
true false false true 208.000000 [(-) ] 0 46200 50250 144.444443 text
grestore
46200 50000 300 0 360 10 darc
46270 50025 75 199 340 10 darc
46130 49975 75 19 160 10 darc
grestore
gsave
false true false true 260.000000 [(120V) ] 0 45800 49950 180.555557 text
grestore
gsave
false true false true 260.000000 [(AC) ] 0 45800 50150 180.555557 text
grestore
42600 47700 42600 49600 10 line
42600 47700 46500 47700 10 line
46500 47700 46500 43700 10 line
46500 43700 44100 43700 10 line
44100 43700 44100 44800 10 line
43400 49600 43400 46000 10 line
43000 48200 43000 49600 10 line
43000 48200 43100 48200 10 line
43100 48200 43100 46000 10 line
43800 49600 43800 48200 10 line
43700 46000 43700 48200 10 line
44200 49600 44200 48200 10 line
44000 46000 44000 48200 10 line
43700 48200 43800 48200 10 line
44000 48200 44200 48200 10 line
44600 49600 44600 48000 10 line
44600 48000 46800 48000 10 line
46800 43400 46800 48000 10 line
44400 44800 44400 43400 10 line
44400 43400 46800 43400 10 line
41800 47100 49900 47100 10 line
46100 45900 46100 47100 10 line
44900 45900 46100 45900 10 line
46200 50600 48500 50600 10 line
48500 50600 48500 47900 10 line
48500 47900 49900 47900 10 line
46200 49400 48300 49400 10 line
48300 47500 49900 47500 10 line
48300 49400 48300 47500 10 line
41800 47100 41800 49600 10 line
44900 45700 47300 45700 10 line
47300 45700 47300 47400 10 line
47300 46700 49900 46700 10 line
42200 49600 42200 47400 10 line
42200 47400 47300 47400 10 line
45000 49600 45000 48400 10 line
45000 48400 46800 48400 10 line
47300 48800 48100 48800 10 line
48100 48800 48100 47100 10 line
47800 46700 47800 47900 10 line
47800 47900 47300 47900 10 line
gsave
50400 43700 50400 44000 10 line
gsave
false true false true 208.000000 [(1) ] 0 50350 43900 144.444443 text
grestore
gsave
true false false false 208.000000 [(+) ] 0 50400 44050 144.444443 text
grestore
50400 44900 50400 44600 10 line
gsave
false true false true 208.000000 [(2) ] 0 50350 44800 144.444443 text
grestore
gsave
true false false true 208.000000 [(-) ] 0 50400 44550 144.444443 text
grestore
50400 44300 300 0 360 10 darc
50470 44325 75 199 340 10 darc
50330 44275 75 19 160 10 darc
grestore
gsave
false true false true 260.000000 [(120V) ] 0 50000 44250 180.555557 text
grestore
gsave
false true false true 260.000000 [(AC) ] 0 50000 44450 180.555557 text
grestore
gsave
false false false false 260.000000 [(ENGR 466 Film Transport Electronics Diagram) ] 0 50100 40700 180.555557 text
grestore
gsave
false false false false 260.000000 [(Anderson Li) ] 0 53900 40100 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 53900 40400 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 50900 40100 180.555557 text
grestore
gsave
false false false false 260.000000 [(1) ] 0 51600 40100 180.555557 text
grestore
50400 44900 51000 44900 10 line
51000 44900 51000 44300 10 line
51000 44300 52000 44300 10 line
50400 43700 50800 43700 10 line
50800 43700 50800 43900 10 line
50800 43900 52000 43900 10 line
40400 47000 42800 47000 10 line
40400 41800 40400 47000 10 line
40400 41800 49200 41800 10 line
49200 41800 49200 45400 10 line
49200 45400 53800 45400 10 line
53800 45400 53800 44300 10 line
42800 47000 42800 46000 10 line
40700 42100 40700 46700 10 line
40700 42100 48900 42100 10 line
52800 44300 53800 44300 10 line
52800 43900 54100 43900 10 line
54100 43900 54100 45100 10 line
48900 45100 54100 45100 10 line
48900 45100 48900 42100 10 line
40700 46700 42500 46700 10 line
42500 46700 42500 46000 10 line
52800 43500 55300 43500 10 line
52800 43100 55300 43100 10 line
52800 42700 55300 42700 10 line
52800 42300 55300 42300 10 line
52800 41900 55300 41900 10 line
gsave
53000 49000 53400 49000 10 line
53000 49000 53200 49300 10 line
53200 49300 53400 49000 10 line
53000 49300 53400 49300 10 line
53200 48700 53200 48900 10 line
53200 49600 53200 49400 10 line
53200 49400 53200 49300 10 line
53200 49000 53200 48900 10 line
grestore
gsave
false false false false 260.000000 [(IN4007) ] 90 52900 49000 180.555557 text
grestore
gsave
55600 48800 55600 49000 10 line
55600 49700 55600 49500 10 line
55800 49200 55400 49200 10 line
55800 49300 55400 49300 10 line
55600 49500 55600 49300 10 line
55600 49200 55600 49000 10 line
grestore
gsave
false false false true 260.000000 [(0.01uF) ] 90 55900 49000 180.555557 text
grestore
gsave
54100 48100 54100 47900 10 line
gsave
false false false false 156.000000 [(D) ] 0 54000 47950 108.333336 text
grestore
54100 47300 54100 47100 10 line
gsave
false false false false 156.000000 [(S) ] 0 54000 47150 108.333336 text
grestore
54000 47601 316 0 360 10 darc
53900 47800 53900 47400 10 line
53500 47600 53684 47600 10 line
gsave
false false false false 156.000000 [(G) ] 0 53600 47650 108.333336 text
grestore
53900 47600 53684 47600 10 line
54100 47900 54100 47740 10 line
53940 47800 53940 47680 10 line
53940 47400 53940 47520 10 line
53940 47540 53940 47660 10 line
53940 47740 54100 47740 10 line
53940 47460 54100 47460 10 line
54100 47300 54100 47460 10 line
54100 47460 54100 47600 10 line
53940 47600 53980 47620 10 line
53980 47620 53980 47580 10 line
53980 47580 53940 47600 10 line
53980 47600 54100 47600 10 line
54100 47800 54180 47800 10 line
54160 47630 54220 47630 10 line
54180 47800 54190 47800 10 line
54190 47680 54190 47800 10 line
54140 47610 54160 47630 10 line
54220 47630 54240 47650 10 line
54160 47570 54190 47630 10 line
54220 47570 54190 47630 10 line
54160 47570 54220 47570 10 line
54190 47630 54190 47680 10 line
54100 47400 54190 47400 10 line
54190 47400 54190 47570 10 line
54100 47800 5 0 360 10 darc
54100 47800 5 dot
54100 47460 5 0 360 10 darc
54100 47460 5 dot
54100 47400 5 0 360 10 darc
54100 47400 5 dot
grestore
gsave
false false false false 260.000000 [(IRFZ40) ] 0 54400 47600 180.555557 text
grestore
54100 48600 54100 48100 10 line
53200 48700 53200 48400 10 line
53200 48400 54100 48400 10 line
54100 49600 54100 50400 10 line
53200 49600 53200 50000 10 line
53200 50000 54100 50000 10 line
54100 50000 55600 50000 10 line
55600 50000 55600 49700 10 line
54100 48400 55600 48400 10 line
55600 48400 55600 48800 10 line
50900 47600 53500 47600 10 line
54100 50400 48900 50400 10 line
48900 50400 48900 47100 10 line
50900 47600 50900 46000 10 line
50900 46000 47800 46000 10 line
47800 46000 47800 42700 10 line
43800 42700 47800 42700 10 line
43800 42700 43800 44800 10 line
53100 46700 53100 45700 10 line
48900 45700 54100 45700 10 line
48900 45700 48900 46700 10 line
54100 47100 54100 45700 10 line
newpath
53100 47600
25
0 360 arc
fill
newpath
53100 47600
25
0 360 arc
fill
newpath
46100 47100
25
0 360 arc
fill
newpath
48100 47100
25
0 360 arc
fill
newpath
48900 47100
25
0 360 arc
fill
newpath
46100 47100
25
0 360 arc
fill
newpath
46100 47100
25
0 360 arc
fill
newpath
47300 46700
25
0 360 arc
fill
newpath
47300 46700
25
0 360 arc
fill
newpath
47300 46700
25
0 360 arc
fill
newpath
47800 46700
25
0 360 arc
fill
newpath
48900 46700
25
0 360 arc
fill
newpath
48100 47100
25
0 360 arc
fill
newpath
48100 47100
25
0 360 arc
fill
newpath
47800 46700
25
0 360 arc
fill
newpath
47800 46700
25
0 360 arc
fill
newpath
54100 48400
25
0 360 arc
fill
newpath
54100 48400
25
0 360 arc
fill
newpath
54100 48400
25
0 360 arc
fill
newpath
54100 48400
25
0 360 arc
fill
newpath
54100 50000
25
0 360 arc
fill
newpath
54100 50000
25
0 360 arc
fill
newpath
54100 50000
25
0 360 arc
fill
newpath
54100 50000
25
0 360 arc
fill
newpath
54100 50000
25
0 360 arc
fill
newpath
54100 50000
25
0 360 arc
fill
newpath
54100 48400
25
0 360 arc
fill
newpath
54100 48400
25
0 360 arc
fill
newpath
53100 47600
25
0 360 arc
fill
newpath
48900 47100
25
0 360 arc
fill
newpath
48900 47100
25
0 360 arc
fill
newpath
53100 45700
25
0 360 arc
fill
newpath
53100 45700
25
0 360 arc
fill
newpath
53100 45700
25
0 360 arc
fill
newpath
48900 46700
25
0 360 arc
fill
newpath
48900 46700
25
0 360 arc
fill
showpage
%%End
