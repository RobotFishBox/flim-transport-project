
BlinkTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000013a  00800100  000036de  00003772  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000036de  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000b5  0080023a  0080023a  000038ac  2**0
                  ALLOC
  3 .stab         00009114  00000000  00000000  000038ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008c83  00000000  00000000  0000c9c0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 21 08 	jmp	0x1042	; 0x1042 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 89 0d 	jmp	0x1b12	; 0x1b12 <__vector_18>
      4c:	0c 94 ba 0d 	jmp	0x1b74	; 0x1b74 <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	15 0f       	add	r17, r21

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	12 e0       	ldi	r17, 0x02	; 2
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	ee ed       	ldi	r30, 0xDE	; 222
      d8:	f6 e3       	ldi	r31, 0x36	; 54
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	aa 33       	cpi	r26, 0x3A	; 58
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	12 e0       	ldi	r17, 0x02	; 2
      e8:	aa e3       	ldi	r26, 0x3A	; 58
      ea:	b2 e0       	ldi	r27, 0x02	; 2
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	af 3e       	cpi	r26, 0xEF	; 239
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c4 ec       	ldi	r28, 0xC4	; 196
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	22 97       	sbiw	r28, 0x02	; 2
     100:	fe 01       	movw	r30, r28
     102:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <__tablejump__>
     106:	c2 3c       	cpi	r28, 0xC2	; 194
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 a6 00 	call	0x14c	; 0x14c <main>
     110:	0c 94 6d 1b 	jmp	0x36da	; 0x36da <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <setup>:
     118:	8b ec       	ldi	r24, 0xCB	; 203
     11a:	92 e0       	ldi	r25, 0x02	; 2
     11c:	40 e8       	ldi	r20, 0x80	; 128
     11e:	55 e2       	ldi	r21, 0x25	; 37
     120:	60 e0       	ldi	r22, 0x00	; 0
     122:	70 e0       	ldi	r23, 0x00	; 0
     124:	0e 94 40 0e 	call	0x1c80	; 0x1c80 <_ZN14HardwareSerial5beginEm>
     128:	08 95       	ret

0000012a <loop>:
     12a:	82 e0       	ldi	r24, 0x02	; 2
     12c:	0e 94 a0 07 	call	0xf40	; 0xf40 <analogRead>
     130:	bc 01       	movw	r22, r24
     132:	8b ec       	ldi	r24, 0xCB	; 203
     134:	92 e0       	ldi	r25, 0x02	; 2
     136:	4a e0       	ldi	r20, 0x0A	; 10
     138:	50 e0       	ldi	r21, 0x00	; 0
     13a:	0e 94 e9 0b 	call	0x17d2	; 0x17d2 <_ZN5Print7printlnEii>
     13e:	6a ef       	ldi	r22, 0xFA	; 250
     140:	70 e0       	ldi	r23, 0x00	; 0
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	0e 94 9d 08 	call	0x113a	; 0x113a <delay>
     14a:	08 95       	ret

0000014c <main>:
     14c:	0e 94 ce 08 	call	0x119c	; 0x119c <init>
     150:	0e 94 8c 00 	call	0x118	; 0x118 <setup>
     154:	0e 94 95 00 	call	0x12a	; 0x12a <loop>
     158:	fd cf       	rjmp	.-6      	; 0x154 <main+0x8>

0000015a <__fixunssfsi>:
     15a:	ef 92       	push	r14
     15c:	ff 92       	push	r15
     15e:	0f 93       	push	r16
     160:	1f 93       	push	r17
     162:	7b 01       	movw	r14, r22
     164:	8c 01       	movw	r16, r24
     166:	20 e0       	ldi	r18, 0x00	; 0
     168:	30 e0       	ldi	r19, 0x00	; 0
     16a:	40 e0       	ldi	r20, 0x00	; 0
     16c:	5f e4       	ldi	r21, 0x4F	; 79
     16e:	0e 94 29 04 	call	0x852	; 0x852 <__gesf2>
     172:	87 fd       	sbrc	r24, 7
     174:	11 c0       	rjmp	.+34     	; 0x198 <__fixunssfsi+0x3e>
     176:	c8 01       	movw	r24, r16
     178:	b7 01       	movw	r22, r14
     17a:	20 e0       	ldi	r18, 0x00	; 0
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	40 e0       	ldi	r20, 0x00	; 0
     180:	5f e4       	ldi	r21, 0x4F	; 79
     182:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__subsf3>
     186:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fixsfsi>
     18a:	9b 01       	movw	r18, r22
     18c:	ac 01       	movw	r20, r24
     18e:	20 50       	subi	r18, 0x00	; 0
     190:	30 40       	sbci	r19, 0x00	; 0
     192:	40 40       	sbci	r20, 0x00	; 0
     194:	50 48       	sbci	r21, 0x80	; 128
     196:	06 c0       	rjmp	.+12     	; 0x1a4 <__fixunssfsi+0x4a>
     198:	c8 01       	movw	r24, r16
     19a:	b7 01       	movw	r22, r14
     19c:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fixsfsi>
     1a0:	9b 01       	movw	r18, r22
     1a2:	ac 01       	movw	r20, r24
     1a4:	b9 01       	movw	r22, r18
     1a6:	ca 01       	movw	r24, r20
     1a8:	1f 91       	pop	r17
     1aa:	0f 91       	pop	r16
     1ac:	ff 90       	pop	r15
     1ae:	ef 90       	pop	r14
     1b0:	08 95       	ret

000001b2 <_fpadd_parts>:
     1b2:	a0 e0       	ldi	r26, 0x00	; 0
     1b4:	b0 e0       	ldi	r27, 0x00	; 0
     1b6:	ef ed       	ldi	r30, 0xDF	; 223
     1b8:	f0 e0       	ldi	r31, 0x00	; 0
     1ba:	0c 94 c7 17 	jmp	0x2f8e	; 0x2f8e <__prologue_saves__+0x8>
     1be:	fc 01       	movw	r30, r24
     1c0:	ea 01       	movw	r28, r20
     1c2:	80 81       	ld	r24, Z
     1c4:	82 30       	cpi	r24, 0x02	; 2
     1c6:	08 f4       	brcc	.+2      	; 0x1ca <_fpadd_parts+0x18>
     1c8:	38 c1       	rjmp	.+624    	; 0x43a <_fpadd_parts+0x288>
     1ca:	db 01       	movw	r26, r22
     1cc:	9c 91       	ld	r25, X
     1ce:	92 30       	cpi	r25, 0x02	; 2
     1d0:	08 f4       	brcc	.+2      	; 0x1d4 <_fpadd_parts+0x22>
     1d2:	30 c1       	rjmp	.+608    	; 0x434 <_fpadd_parts+0x282>
     1d4:	84 30       	cpi	r24, 0x04	; 4
     1d6:	59 f4       	brne	.+22     	; 0x1ee <_fpadd_parts+0x3c>
     1d8:	94 30       	cpi	r25, 0x04	; 4
     1da:	09 f0       	breq	.+2      	; 0x1de <_fpadd_parts+0x2c>
     1dc:	2e c1       	rjmp	.+604    	; 0x43a <_fpadd_parts+0x288>
     1de:	91 81       	ldd	r25, Z+1	; 0x01
     1e0:	11 96       	adiw	r26, 0x01	; 1
     1e2:	8c 91       	ld	r24, X
     1e4:	11 97       	sbiw	r26, 0x01	; 1
     1e6:	98 17       	cp	r25, r24
     1e8:	09 f0       	breq	.+2      	; 0x1ec <_fpadd_parts+0x3a>
     1ea:	21 c1       	rjmp	.+578    	; 0x42e <_fpadd_parts+0x27c>
     1ec:	26 c1       	rjmp	.+588    	; 0x43a <_fpadd_parts+0x288>
     1ee:	94 30       	cpi	r25, 0x04	; 4
     1f0:	09 f4       	brne	.+2      	; 0x1f4 <_fpadd_parts+0x42>
     1f2:	20 c1       	rjmp	.+576    	; 0x434 <_fpadd_parts+0x282>
     1f4:	92 30       	cpi	r25, 0x02	; 2
     1f6:	b1 f4       	brne	.+44     	; 0x224 <_fpadd_parts+0x72>
     1f8:	82 30       	cpi	r24, 0x02	; 2
     1fa:	09 f0       	breq	.+2      	; 0x1fe <_fpadd_parts+0x4c>
     1fc:	1e c1       	rjmp	.+572    	; 0x43a <_fpadd_parts+0x288>
     1fe:	ca 01       	movw	r24, r20
     200:	af 01       	movw	r20, r30
     202:	28 e0       	ldi	r18, 0x08	; 8
     204:	da 01       	movw	r26, r20
     206:	0d 90       	ld	r0, X+
     208:	ad 01       	movw	r20, r26
     20a:	dc 01       	movw	r26, r24
     20c:	0d 92       	st	X+, r0
     20e:	cd 01       	movw	r24, r26
     210:	21 50       	subi	r18, 0x01	; 1
     212:	c1 f7       	brne	.-16     	; 0x204 <_fpadd_parts+0x52>
     214:	db 01       	movw	r26, r22
     216:	11 96       	adiw	r26, 0x01	; 1
     218:	8c 91       	ld	r24, X
     21a:	11 97       	sbiw	r26, 0x01	; 1
     21c:	91 81       	ldd	r25, Z+1	; 0x01
     21e:	89 23       	and	r24, r25
     220:	89 83       	std	Y+1, r24	; 0x01
     222:	0a c1       	rjmp	.+532    	; 0x438 <_fpadd_parts+0x286>
     224:	82 30       	cpi	r24, 0x02	; 2
     226:	09 f4       	brne	.+2      	; 0x22a <_fpadd_parts+0x78>
     228:	05 c1       	rjmp	.+522    	; 0x434 <_fpadd_parts+0x282>
     22a:	c2 80       	ldd	r12, Z+2	; 0x02
     22c:	d3 80       	ldd	r13, Z+3	; 0x03
     22e:	db 01       	movw	r26, r22
     230:	12 96       	adiw	r26, 0x02	; 2
     232:	6d 90       	ld	r6, X+
     234:	7c 90       	ld	r7, X
     236:	13 97       	sbiw	r26, 0x03	; 3
     238:	24 81       	ldd	r18, Z+4	; 0x04
     23a:	35 81       	ldd	r19, Z+5	; 0x05
     23c:	46 81       	ldd	r20, Z+6	; 0x06
     23e:	57 81       	ldd	r21, Z+7	; 0x07
     240:	14 96       	adiw	r26, 0x04	; 4
     242:	ed 90       	ld	r14, X+
     244:	fd 90       	ld	r15, X+
     246:	0d 91       	ld	r16, X+
     248:	1c 91       	ld	r17, X
     24a:	17 97       	sbiw	r26, 0x07	; 7
     24c:	c6 01       	movw	r24, r12
     24e:	86 19       	sub	r24, r6
     250:	97 09       	sbc	r25, r7
     252:	5c 01       	movw	r10, r24
     254:	97 ff       	sbrs	r25, 7
     256:	04 c0       	rjmp	.+8      	; 0x260 <_fpadd_parts+0xae>
     258:	aa 24       	eor	r10, r10
     25a:	bb 24       	eor	r11, r11
     25c:	a8 1a       	sub	r10, r24
     25e:	b9 0a       	sbc	r11, r25
     260:	b0 e2       	ldi	r27, 0x20	; 32
     262:	ab 16       	cp	r10, r27
     264:	b1 04       	cpc	r11, r1
     266:	0c f0       	brlt	.+2      	; 0x26a <_fpadd_parts+0xb8>
     268:	61 c0       	rjmp	.+194    	; 0x32c <_fpadd_parts+0x17a>
     26a:	18 16       	cp	r1, r24
     26c:	19 06       	cpc	r1, r25
     26e:	6c f5       	brge	.+90     	; 0x2ca <_fpadd_parts+0x118>
     270:	37 01       	movw	r6, r14
     272:	48 01       	movw	r8, r16
     274:	0a 2c       	mov	r0, r10
     276:	04 c0       	rjmp	.+8      	; 0x280 <_fpadd_parts+0xce>
     278:	96 94       	lsr	r9
     27a:	87 94       	ror	r8
     27c:	77 94       	ror	r7
     27e:	67 94       	ror	r6
     280:	0a 94       	dec	r0
     282:	d2 f7       	brpl	.-12     	; 0x278 <_fpadd_parts+0xc6>
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	a0 e0       	ldi	r26, 0x00	; 0
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	0a 2c       	mov	r0, r10
     28e:	04 c0       	rjmp	.+8      	; 0x298 <_fpadd_parts+0xe6>
     290:	88 0f       	add	r24, r24
     292:	99 1f       	adc	r25, r25
     294:	aa 1f       	adc	r26, r26
     296:	bb 1f       	adc	r27, r27
     298:	0a 94       	dec	r0
     29a:	d2 f7       	brpl	.-12     	; 0x290 <_fpadd_parts+0xde>
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	a1 09       	sbc	r26, r1
     2a0:	b1 09       	sbc	r27, r1
     2a2:	8e 21       	and	r24, r14
     2a4:	9f 21       	and	r25, r15
     2a6:	a0 23       	and	r26, r16
     2a8:	b1 23       	and	r27, r17
     2aa:	ee 24       	eor	r14, r14
     2ac:	ff 24       	eor	r15, r15
     2ae:	87 01       	movw	r16, r14
     2b0:	e3 94       	inc	r14
     2b2:	00 97       	sbiw	r24, 0x00	; 0
     2b4:	a1 05       	cpc	r26, r1
     2b6:	b1 05       	cpc	r27, r1
     2b8:	19 f4       	brne	.+6      	; 0x2c0 <_fpadd_parts+0x10e>
     2ba:	ee 24       	eor	r14, r14
     2bc:	ff 24       	eor	r15, r15
     2be:	87 01       	movw	r16, r14
     2c0:	e6 28       	or	r14, r6
     2c2:	f7 28       	or	r15, r7
     2c4:	08 29       	or	r16, r8
     2c6:	19 29       	or	r17, r9
     2c8:	3c c0       	rjmp	.+120    	; 0x342 <_fpadd_parts+0x190>
     2ca:	00 97       	sbiw	r24, 0x00	; 0
     2cc:	d1 f1       	breq	.+116    	; 0x342 <_fpadd_parts+0x190>
     2ce:	ca 0c       	add	r12, r10
     2d0:	db 1c       	adc	r13, r11
     2d2:	39 01       	movw	r6, r18
     2d4:	4a 01       	movw	r8, r20
     2d6:	0a 2c       	mov	r0, r10
     2d8:	04 c0       	rjmp	.+8      	; 0x2e2 <_fpadd_parts+0x130>
     2da:	96 94       	lsr	r9
     2dc:	87 94       	ror	r8
     2de:	77 94       	ror	r7
     2e0:	67 94       	ror	r6
     2e2:	0a 94       	dec	r0
     2e4:	d2 f7       	brpl	.-12     	; 0x2da <_fpadd_parts+0x128>
     2e6:	81 e0       	ldi	r24, 0x01	; 1
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	a0 e0       	ldi	r26, 0x00	; 0
     2ec:	b0 e0       	ldi	r27, 0x00	; 0
     2ee:	0a 2c       	mov	r0, r10
     2f0:	04 c0       	rjmp	.+8      	; 0x2fa <_fpadd_parts+0x148>
     2f2:	88 0f       	add	r24, r24
     2f4:	99 1f       	adc	r25, r25
     2f6:	aa 1f       	adc	r26, r26
     2f8:	bb 1f       	adc	r27, r27
     2fa:	0a 94       	dec	r0
     2fc:	d2 f7       	brpl	.-12     	; 0x2f2 <_fpadd_parts+0x140>
     2fe:	01 97       	sbiw	r24, 0x01	; 1
     300:	a1 09       	sbc	r26, r1
     302:	b1 09       	sbc	r27, r1
     304:	82 23       	and	r24, r18
     306:	93 23       	and	r25, r19
     308:	a4 23       	and	r26, r20
     30a:	b5 23       	and	r27, r21
     30c:	21 e0       	ldi	r18, 0x01	; 1
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e0       	ldi	r20, 0x00	; 0
     312:	50 e0       	ldi	r21, 0x00	; 0
     314:	00 97       	sbiw	r24, 0x00	; 0
     316:	a1 05       	cpc	r26, r1
     318:	b1 05       	cpc	r27, r1
     31a:	19 f4       	brne	.+6      	; 0x322 <_fpadd_parts+0x170>
     31c:	20 e0       	ldi	r18, 0x00	; 0
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	a9 01       	movw	r20, r18
     322:	26 29       	or	r18, r6
     324:	37 29       	or	r19, r7
     326:	48 29       	or	r20, r8
     328:	59 29       	or	r21, r9
     32a:	0b c0       	rjmp	.+22     	; 0x342 <_fpadd_parts+0x190>
     32c:	6c 14       	cp	r6, r12
     32e:	7d 04       	cpc	r7, r13
     330:	24 f4       	brge	.+8      	; 0x33a <_fpadd_parts+0x188>
     332:	ee 24       	eor	r14, r14
     334:	ff 24       	eor	r15, r15
     336:	87 01       	movw	r16, r14
     338:	04 c0       	rjmp	.+8      	; 0x342 <_fpadd_parts+0x190>
     33a:	63 01       	movw	r12, r6
     33c:	20 e0       	ldi	r18, 0x00	; 0
     33e:	30 e0       	ldi	r19, 0x00	; 0
     340:	a9 01       	movw	r20, r18
     342:	81 81       	ldd	r24, Z+1	; 0x01
     344:	fb 01       	movw	r30, r22
     346:	91 81       	ldd	r25, Z+1	; 0x01
     348:	89 17       	cp	r24, r25
     34a:	09 f4       	brne	.+2      	; 0x34e <_fpadd_parts+0x19c>
     34c:	45 c0       	rjmp	.+138    	; 0x3d8 <_fpadd_parts+0x226>
     34e:	88 23       	and	r24, r24
     350:	49 f0       	breq	.+18     	; 0x364 <_fpadd_parts+0x1b2>
     352:	d8 01       	movw	r26, r16
     354:	c7 01       	movw	r24, r14
     356:	82 1b       	sub	r24, r18
     358:	93 0b       	sbc	r25, r19
     35a:	a4 0b       	sbc	r26, r20
     35c:	b5 0b       	sbc	r27, r21
     35e:	9c 01       	movw	r18, r24
     360:	ad 01       	movw	r20, r26
     362:	04 c0       	rjmp	.+8      	; 0x36c <_fpadd_parts+0x1ba>
     364:	2e 19       	sub	r18, r14
     366:	3f 09       	sbc	r19, r15
     368:	40 0b       	sbc	r20, r16
     36a:	51 0b       	sbc	r21, r17
     36c:	57 fd       	sbrc	r21, 7
     36e:	04 c0       	rjmp	.+8      	; 0x378 <_fpadd_parts+0x1c6>
     370:	19 82       	std	Y+1, r1	; 0x01
     372:	db 82       	std	Y+3, r13	; 0x03
     374:	ca 82       	std	Y+2, r12	; 0x02
     376:	0b c0       	rjmp	.+22     	; 0x38e <_fpadd_parts+0x1dc>
     378:	81 e0       	ldi	r24, 0x01	; 1
     37a:	89 83       	std	Y+1, r24	; 0x01
     37c:	db 82       	std	Y+3, r13	; 0x03
     37e:	ca 82       	std	Y+2, r12	; 0x02
     380:	50 95       	com	r21
     382:	40 95       	com	r20
     384:	30 95       	com	r19
     386:	21 95       	neg	r18
     388:	3f 4f       	sbci	r19, 0xFF	; 255
     38a:	4f 4f       	sbci	r20, 0xFF	; 255
     38c:	5f 4f       	sbci	r21, 0xFF	; 255
     38e:	2c 83       	std	Y+4, r18	; 0x04
     390:	3d 83       	std	Y+5, r19	; 0x05
     392:	4e 83       	std	Y+6, r20	; 0x06
     394:	5f 83       	std	Y+7, r21	; 0x07
     396:	0d c0       	rjmp	.+26     	; 0x3b2 <_fpadd_parts+0x200>
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	aa 1f       	adc	r26, r26
     39e:	bb 1f       	adc	r27, r27
     3a0:	8c 83       	std	Y+4, r24	; 0x04
     3a2:	9d 83       	std	Y+5, r25	; 0x05
     3a4:	ae 83       	std	Y+6, r26	; 0x06
     3a6:	bf 83       	std	Y+7, r27	; 0x07
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	9b 81       	ldd	r25, Y+3	; 0x03
     3ac:	01 97       	sbiw	r24, 0x01	; 1
     3ae:	9b 83       	std	Y+3, r25	; 0x03
     3b0:	8a 83       	std	Y+2, r24	; 0x02
     3b2:	8c 81       	ldd	r24, Y+4	; 0x04
     3b4:	9d 81       	ldd	r25, Y+5	; 0x05
     3b6:	ae 81       	ldd	r26, Y+6	; 0x06
     3b8:	bf 81       	ldd	r27, Y+7	; 0x07
     3ba:	9c 01       	movw	r18, r24
     3bc:	ad 01       	movw	r20, r26
     3be:	21 50       	subi	r18, 0x01	; 1
     3c0:	30 40       	sbci	r19, 0x00	; 0
     3c2:	40 40       	sbci	r20, 0x00	; 0
     3c4:	50 40       	sbci	r21, 0x00	; 0
     3c6:	2f 3f       	cpi	r18, 0xFF	; 255
     3c8:	ef ef       	ldi	r30, 0xFF	; 255
     3ca:	3e 07       	cpc	r19, r30
     3cc:	ef ef       	ldi	r30, 0xFF	; 255
     3ce:	4e 07       	cpc	r20, r30
     3d0:	ef e3       	ldi	r30, 0x3F	; 63
     3d2:	5e 07       	cpc	r21, r30
     3d4:	08 f3       	brcs	.-62     	; 0x398 <_fpadd_parts+0x1e6>
     3d6:	0b c0       	rjmp	.+22     	; 0x3ee <_fpadd_parts+0x23c>
     3d8:	89 83       	std	Y+1, r24	; 0x01
     3da:	db 82       	std	Y+3, r13	; 0x03
     3dc:	ca 82       	std	Y+2, r12	; 0x02
     3de:	2e 0d       	add	r18, r14
     3e0:	3f 1d       	adc	r19, r15
     3e2:	40 1f       	adc	r20, r16
     3e4:	51 1f       	adc	r21, r17
     3e6:	2c 83       	std	Y+4, r18	; 0x04
     3e8:	3d 83       	std	Y+5, r19	; 0x05
     3ea:	4e 83       	std	Y+6, r20	; 0x06
     3ec:	5f 83       	std	Y+7, r21	; 0x07
     3ee:	83 e0       	ldi	r24, 0x03	; 3
     3f0:	88 83       	st	Y, r24
     3f2:	2c 81       	ldd	r18, Y+4	; 0x04
     3f4:	3d 81       	ldd	r19, Y+5	; 0x05
     3f6:	4e 81       	ldd	r20, Y+6	; 0x06
     3f8:	5f 81       	ldd	r21, Y+7	; 0x07
     3fa:	57 ff       	sbrs	r21, 7
     3fc:	1d c0       	rjmp	.+58     	; 0x438 <_fpadd_parts+0x286>
     3fe:	da 01       	movw	r26, r20
     400:	c9 01       	movw	r24, r18
     402:	81 70       	andi	r24, 0x01	; 1
     404:	90 70       	andi	r25, 0x00	; 0
     406:	a0 70       	andi	r26, 0x00	; 0
     408:	b0 70       	andi	r27, 0x00	; 0
     40a:	56 95       	lsr	r21
     40c:	47 95       	ror	r20
     40e:	37 95       	ror	r19
     410:	27 95       	ror	r18
     412:	82 2b       	or	r24, r18
     414:	93 2b       	or	r25, r19
     416:	a4 2b       	or	r26, r20
     418:	b5 2b       	or	r27, r21
     41a:	8c 83       	std	Y+4, r24	; 0x04
     41c:	9d 83       	std	Y+5, r25	; 0x05
     41e:	ae 83       	std	Y+6, r26	; 0x06
     420:	bf 83       	std	Y+7, r27	; 0x07
     422:	8a 81       	ldd	r24, Y+2	; 0x02
     424:	9b 81       	ldd	r25, Y+3	; 0x03
     426:	01 96       	adiw	r24, 0x01	; 1
     428:	9b 83       	std	Y+3, r25	; 0x03
     42a:	8a 83       	std	Y+2, r24	; 0x02
     42c:	05 c0       	rjmp	.+10     	; 0x438 <_fpadd_parts+0x286>
     42e:	e3 e0       	ldi	r30, 0x03	; 3
     430:	f1 e0       	ldi	r31, 0x01	; 1
     432:	03 c0       	rjmp	.+6      	; 0x43a <_fpadd_parts+0x288>
     434:	fb 01       	movw	r30, r22
     436:	01 c0       	rjmp	.+2      	; 0x43a <_fpadd_parts+0x288>
     438:	fe 01       	movw	r30, r28
     43a:	cf 01       	movw	r24, r30
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62
     440:	ee e0       	ldi	r30, 0x0E	; 14
     442:	0c 94 e3 17 	jmp	0x2fc6	; 0x2fc6 <__epilogue_restores__+0x8>

00000446 <__addsf3>:
     446:	a0 e2       	ldi	r26, 0x20	; 32
     448:	b0 e0       	ldi	r27, 0x00	; 0
     44a:	e9 e2       	ldi	r30, 0x29	; 41
     44c:	f2 e0       	ldi	r31, 0x02	; 2
     44e:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__prologue_saves__+0x18>
     452:	69 83       	std	Y+1, r22	; 0x01
     454:	7a 83       	std	Y+2, r23	; 0x02
     456:	8b 83       	std	Y+3, r24	; 0x03
     458:	9c 83       	std	Y+4, r25	; 0x04
     45a:	2d 83       	std	Y+5, r18	; 0x05
     45c:	3e 83       	std	Y+6, r19	; 0x06
     45e:	4f 83       	std	Y+7, r20	; 0x07
     460:	58 87       	std	Y+8, r21	; 0x08
     462:	89 e0       	ldi	r24, 0x09	; 9
     464:	e8 2e       	mov	r14, r24
     466:	f1 2c       	mov	r15, r1
     468:	ec 0e       	add	r14, r28
     46a:	fd 1e       	adc	r15, r29
     46c:	ce 01       	movw	r24, r28
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	b7 01       	movw	r22, r14
     472:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__unpack_f>
     476:	8e 01       	movw	r16, r28
     478:	0f 5e       	subi	r16, 0xEF	; 239
     47a:	1f 4f       	sbci	r17, 0xFF	; 255
     47c:	ce 01       	movw	r24, r28
     47e:	05 96       	adiw	r24, 0x05	; 5
     480:	b8 01       	movw	r22, r16
     482:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__unpack_f>
     486:	c7 01       	movw	r24, r14
     488:	b8 01       	movw	r22, r16
     48a:	ae 01       	movw	r20, r28
     48c:	47 5e       	subi	r20, 0xE7	; 231
     48e:	5f 4f       	sbci	r21, 0xFF	; 255
     490:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_fpadd_parts>
     494:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__pack_f>
     498:	a0 96       	adiw	r28, 0x20	; 32
     49a:	e6 e0       	ldi	r30, 0x06	; 6
     49c:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__+0x18>

000004a0 <__subsf3>:
     4a0:	a0 e2       	ldi	r26, 0x20	; 32
     4a2:	b0 e0       	ldi	r27, 0x00	; 0
     4a4:	e6 e5       	ldi	r30, 0x56	; 86
     4a6:	f2 e0       	ldi	r31, 0x02	; 2
     4a8:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__prologue_saves__+0x18>
     4ac:	69 83       	std	Y+1, r22	; 0x01
     4ae:	7a 83       	std	Y+2, r23	; 0x02
     4b0:	8b 83       	std	Y+3, r24	; 0x03
     4b2:	9c 83       	std	Y+4, r25	; 0x04
     4b4:	2d 83       	std	Y+5, r18	; 0x05
     4b6:	3e 83       	std	Y+6, r19	; 0x06
     4b8:	4f 83       	std	Y+7, r20	; 0x07
     4ba:	58 87       	std	Y+8, r21	; 0x08
     4bc:	8e 01       	movw	r16, r28
     4be:	07 5f       	subi	r16, 0xF7	; 247
     4c0:	1f 4f       	sbci	r17, 0xFF	; 255
     4c2:	ce 01       	movw	r24, r28
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	b8 01       	movw	r22, r16
     4c8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__unpack_f>
     4cc:	91 e1       	ldi	r25, 0x11	; 17
     4ce:	e9 2e       	mov	r14, r25
     4d0:	f1 2c       	mov	r15, r1
     4d2:	ec 0e       	add	r14, r28
     4d4:	fd 1e       	adc	r15, r29
     4d6:	ce 01       	movw	r24, r28
     4d8:	05 96       	adiw	r24, 0x05	; 5
     4da:	b7 01       	movw	r22, r14
     4dc:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__unpack_f>
     4e0:	8a 89       	ldd	r24, Y+18	; 0x12
     4e2:	91 e0       	ldi	r25, 0x01	; 1
     4e4:	89 27       	eor	r24, r25
     4e6:	8a 8b       	std	Y+18, r24	; 0x12
     4e8:	c8 01       	movw	r24, r16
     4ea:	b7 01       	movw	r22, r14
     4ec:	ae 01       	movw	r20, r28
     4ee:	47 5e       	subi	r20, 0xE7	; 231
     4f0:	5f 4f       	sbci	r21, 0xFF	; 255
     4f2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_fpadd_parts>
     4f6:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__pack_f>
     4fa:	a0 96       	adiw	r28, 0x20	; 32
     4fc:	e6 e0       	ldi	r30, 0x06	; 6
     4fe:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__+0x18>

00000502 <__mulsf3>:
     502:	a0 e2       	ldi	r26, 0x20	; 32
     504:	b0 e0       	ldi	r27, 0x00	; 0
     506:	e7 e8       	ldi	r30, 0x87	; 135
     508:	f2 e0       	ldi	r31, 0x02	; 2
     50a:	0c 94 c3 17 	jmp	0x2f86	; 0x2f86 <__prologue_saves__>
     50e:	69 83       	std	Y+1, r22	; 0x01
     510:	7a 83       	std	Y+2, r23	; 0x02
     512:	8b 83       	std	Y+3, r24	; 0x03
     514:	9c 83       	std	Y+4, r25	; 0x04
     516:	2d 83       	std	Y+5, r18	; 0x05
     518:	3e 83       	std	Y+6, r19	; 0x06
     51a:	4f 83       	std	Y+7, r20	; 0x07
     51c:	58 87       	std	Y+8, r21	; 0x08
     51e:	ce 01       	movw	r24, r28
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	be 01       	movw	r22, r28
     524:	67 5f       	subi	r22, 0xF7	; 247
     526:	7f 4f       	sbci	r23, 0xFF	; 255
     528:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__unpack_f>
     52c:	ce 01       	movw	r24, r28
     52e:	05 96       	adiw	r24, 0x05	; 5
     530:	be 01       	movw	r22, r28
     532:	6f 5e       	subi	r22, 0xEF	; 239
     534:	7f 4f       	sbci	r23, 0xFF	; 255
     536:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__unpack_f>
     53a:	99 85       	ldd	r25, Y+9	; 0x09
     53c:	92 30       	cpi	r25, 0x02	; 2
     53e:	78 f0       	brcs	.+30     	; 0x55e <__mulsf3+0x5c>
     540:	89 89       	ldd	r24, Y+17	; 0x11
     542:	82 30       	cpi	r24, 0x02	; 2
     544:	c0 f0       	brcs	.+48     	; 0x576 <__mulsf3+0x74>
     546:	94 30       	cpi	r25, 0x04	; 4
     548:	19 f4       	brne	.+6      	; 0x550 <__mulsf3+0x4e>
     54a:	82 30       	cpi	r24, 0x02	; 2
     54c:	41 f4       	brne	.+16     	; 0x55e <__mulsf3+0x5c>
     54e:	cb c0       	rjmp	.+406    	; 0x6e6 <__mulsf3+0x1e4>
     550:	84 30       	cpi	r24, 0x04	; 4
     552:	19 f4       	brne	.+6      	; 0x55a <__mulsf3+0x58>
     554:	92 30       	cpi	r25, 0x02	; 2
     556:	79 f4       	brne	.+30     	; 0x576 <__mulsf3+0x74>
     558:	c6 c0       	rjmp	.+396    	; 0x6e6 <__mulsf3+0x1e4>
     55a:	92 30       	cpi	r25, 0x02	; 2
     55c:	51 f4       	brne	.+20     	; 0x572 <__mulsf3+0x70>
     55e:	81 e0       	ldi	r24, 0x01	; 1
     560:	2a 85       	ldd	r18, Y+10	; 0x0a
     562:	9a 89       	ldd	r25, Y+18	; 0x12
     564:	29 17       	cp	r18, r25
     566:	09 f4       	brne	.+2      	; 0x56a <__mulsf3+0x68>
     568:	80 e0       	ldi	r24, 0x00	; 0
     56a:	8a 87       	std	Y+10, r24	; 0x0a
     56c:	ce 01       	movw	r24, r28
     56e:	09 96       	adiw	r24, 0x09	; 9
     570:	bc c0       	rjmp	.+376    	; 0x6ea <__mulsf3+0x1e8>
     572:	82 30       	cpi	r24, 0x02	; 2
     574:	51 f4       	brne	.+20     	; 0x58a <__mulsf3+0x88>
     576:	81 e0       	ldi	r24, 0x01	; 1
     578:	2a 85       	ldd	r18, Y+10	; 0x0a
     57a:	9a 89       	ldd	r25, Y+18	; 0x12
     57c:	29 17       	cp	r18, r25
     57e:	09 f4       	brne	.+2      	; 0x582 <__mulsf3+0x80>
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	8a 8b       	std	Y+18, r24	; 0x12
     584:	ce 01       	movw	r24, r28
     586:	41 96       	adiw	r24, 0x11	; 17
     588:	b0 c0       	rjmp	.+352    	; 0x6ea <__mulsf3+0x1e8>
     58a:	6d 84       	ldd	r6, Y+13	; 0x0d
     58c:	7e 84       	ldd	r7, Y+14	; 0x0e
     58e:	8f 84       	ldd	r8, Y+15	; 0x0f
     590:	98 88       	ldd	r9, Y+16	; 0x10
     592:	ed 88       	ldd	r14, Y+21	; 0x15
     594:	fe 88       	ldd	r15, Y+22	; 0x16
     596:	0f 89       	ldd	r16, Y+23	; 0x17
     598:	18 8d       	ldd	r17, Y+24	; 0x18
     59a:	e0 e2       	ldi	r30, 0x20	; 32
     59c:	f0 e0       	ldi	r31, 0x00	; 0
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	dc 01       	movw	r26, r24
     5a4:	aa 24       	eor	r10, r10
     5a6:	bb 24       	eor	r11, r11
     5a8:	65 01       	movw	r12, r10
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	a9 01       	movw	r20, r18
     5b0:	b3 01       	movw	r22, r6
     5b2:	61 70       	andi	r22, 0x01	; 1
     5b4:	70 70       	andi	r23, 0x00	; 0
     5b6:	61 15       	cp	r22, r1
     5b8:	71 05       	cpc	r23, r1
     5ba:	d1 f0       	breq	.+52     	; 0x5f0 <__mulsf3+0xee>
     5bc:	2e 0d       	add	r18, r14
     5be:	3f 1d       	adc	r19, r15
     5c0:	40 1f       	adc	r20, r16
     5c2:	51 1f       	adc	r21, r17
     5c4:	15 01       	movw	r2, r10
     5c6:	26 01       	movw	r4, r12
     5c8:	28 0e       	add	r2, r24
     5ca:	39 1e       	adc	r3, r25
     5cc:	4a 1e       	adc	r4, r26
     5ce:	5b 1e       	adc	r5, r27
     5d0:	81 e0       	ldi	r24, 0x01	; 1
     5d2:	90 e0       	ldi	r25, 0x00	; 0
     5d4:	a0 e0       	ldi	r26, 0x00	; 0
     5d6:	b0 e0       	ldi	r27, 0x00	; 0
     5d8:	2e 15       	cp	r18, r14
     5da:	3f 05       	cpc	r19, r15
     5dc:	40 07       	cpc	r20, r16
     5de:	51 07       	cpc	r21, r17
     5e0:	18 f0       	brcs	.+6      	; 0x5e8 <__mulsf3+0xe6>
     5e2:	80 e0       	ldi	r24, 0x00	; 0
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	dc 01       	movw	r26, r24
     5e8:	82 0d       	add	r24, r2
     5ea:	93 1d       	adc	r25, r3
     5ec:	a4 1d       	adc	r26, r4
     5ee:	b5 1d       	adc	r27, r5
     5f0:	aa 0c       	add	r10, r10
     5f2:	bb 1c       	adc	r11, r11
     5f4:	cc 1c       	adc	r12, r12
     5f6:	dd 1c       	adc	r13, r13
     5f8:	17 ff       	sbrs	r17, 7
     5fa:	09 c0       	rjmp	.+18     	; 0x60e <__mulsf3+0x10c>
     5fc:	61 e0       	ldi	r22, 0x01	; 1
     5fe:	26 2e       	mov	r2, r22
     600:	31 2c       	mov	r3, r1
     602:	41 2c       	mov	r4, r1
     604:	51 2c       	mov	r5, r1
     606:	a2 28       	or	r10, r2
     608:	b3 28       	or	r11, r3
     60a:	c4 28       	or	r12, r4
     60c:	d5 28       	or	r13, r5
     60e:	31 97       	sbiw	r30, 0x01	; 1
     610:	49 f0       	breq	.+18     	; 0x624 <__mulsf3+0x122>
     612:	ee 0c       	add	r14, r14
     614:	ff 1c       	adc	r15, r15
     616:	00 1f       	adc	r16, r16
     618:	11 1f       	adc	r17, r17
     61a:	96 94       	lsr	r9
     61c:	87 94       	ror	r8
     61e:	77 94       	ror	r7
     620:	67 94       	ror	r6
     622:	c6 cf       	rjmp	.-116    	; 0x5b0 <__mulsf3+0xae>
     624:	6b 89       	ldd	r22, Y+19	; 0x13
     626:	7c 89       	ldd	r23, Y+20	; 0x14
     628:	eb 85       	ldd	r30, Y+11	; 0x0b
     62a:	fc 85       	ldd	r31, Y+12	; 0x0c
     62c:	6e 0f       	add	r22, r30
     62e:	7f 1f       	adc	r23, r31
     630:	6e 5f       	subi	r22, 0xFE	; 254
     632:	7f 4f       	sbci	r23, 0xFF	; 255
     634:	7c 8f       	std	Y+28, r23	; 0x1c
     636:	6b 8f       	std	Y+27, r22	; 0x1b
     638:	61 e0       	ldi	r22, 0x01	; 1
     63a:	ea 85       	ldd	r30, Y+10	; 0x0a
     63c:	7a 89       	ldd	r23, Y+18	; 0x12
     63e:	e7 17       	cp	r30, r23
     640:	09 f4       	brne	.+2      	; 0x644 <__mulsf3+0x142>
     642:	60 e0       	ldi	r22, 0x00	; 0
     644:	6a 8f       	std	Y+26, r22	; 0x1a
     646:	6b 8d       	ldd	r22, Y+27	; 0x1b
     648:	7c 8d       	ldd	r23, Y+28	; 0x1c
     64a:	10 c0       	rjmp	.+32     	; 0x66c <__mulsf3+0x16a>
     64c:	fc 01       	movw	r30, r24
     64e:	e1 70       	andi	r30, 0x01	; 1
     650:	f0 70       	andi	r31, 0x00	; 0
     652:	30 97       	sbiw	r30, 0x00	; 0
     654:	29 f0       	breq	.+10     	; 0x660 <__mulsf3+0x15e>
     656:	56 95       	lsr	r21
     658:	47 95       	ror	r20
     65a:	37 95       	ror	r19
     65c:	27 95       	ror	r18
     65e:	50 68       	ori	r21, 0x80	; 128
     660:	b6 95       	lsr	r27
     662:	a7 95       	ror	r26
     664:	97 95       	ror	r25
     666:	87 95       	ror	r24
     668:	6f 5f       	subi	r22, 0xFF	; 255
     66a:	7f 4f       	sbci	r23, 0xFF	; 255
     66c:	b7 fd       	sbrc	r27, 7
     66e:	ee cf       	rjmp	.-36     	; 0x64c <__mulsf3+0x14a>
     670:	0c c0       	rjmp	.+24     	; 0x68a <__mulsf3+0x188>
     672:	88 0f       	add	r24, r24
     674:	99 1f       	adc	r25, r25
     676:	aa 1f       	adc	r26, r26
     678:	bb 1f       	adc	r27, r27
     67a:	57 fd       	sbrc	r21, 7
     67c:	81 60       	ori	r24, 0x01	; 1
     67e:	22 0f       	add	r18, r18
     680:	33 1f       	adc	r19, r19
     682:	44 1f       	adc	r20, r20
     684:	55 1f       	adc	r21, r21
     686:	61 50       	subi	r22, 0x01	; 1
     688:	70 40       	sbci	r23, 0x00	; 0
     68a:	80 30       	cpi	r24, 0x00	; 0
     68c:	e0 e0       	ldi	r30, 0x00	; 0
     68e:	9e 07       	cpc	r25, r30
     690:	e0 e0       	ldi	r30, 0x00	; 0
     692:	ae 07       	cpc	r26, r30
     694:	e0 e4       	ldi	r30, 0x40	; 64
     696:	be 07       	cpc	r27, r30
     698:	60 f3       	brcs	.-40     	; 0x672 <__mulsf3+0x170>
     69a:	6b 8f       	std	Y+27, r22	; 0x1b
     69c:	7c 8f       	std	Y+28, r23	; 0x1c
     69e:	6f e7       	ldi	r22, 0x7F	; 127
     6a0:	e6 2e       	mov	r14, r22
     6a2:	f1 2c       	mov	r15, r1
     6a4:	01 2d       	mov	r16, r1
     6a6:	11 2d       	mov	r17, r1
     6a8:	e8 22       	and	r14, r24
     6aa:	f9 22       	and	r15, r25
     6ac:	0a 23       	and	r16, r26
     6ae:	1b 23       	and	r17, r27
     6b0:	60 e4       	ldi	r22, 0x40	; 64
     6b2:	e6 16       	cp	r14, r22
     6b4:	f1 04       	cpc	r15, r1
     6b6:	01 05       	cpc	r16, r1
     6b8:	11 05       	cpc	r17, r1
     6ba:	61 f4       	brne	.+24     	; 0x6d4 <__mulsf3+0x1d2>
     6bc:	87 fd       	sbrc	r24, 7
     6be:	0a c0       	rjmp	.+20     	; 0x6d4 <__mulsf3+0x1d2>
     6c0:	21 15       	cp	r18, r1
     6c2:	31 05       	cpc	r19, r1
     6c4:	41 05       	cpc	r20, r1
     6c6:	51 05       	cpc	r21, r1
     6c8:	29 f0       	breq	.+10     	; 0x6d4 <__mulsf3+0x1d2>
     6ca:	80 5c       	subi	r24, 0xC0	; 192
     6cc:	9f 4f       	sbci	r25, 0xFF	; 255
     6ce:	af 4f       	sbci	r26, 0xFF	; 255
     6d0:	bf 4f       	sbci	r27, 0xFF	; 255
     6d2:	80 78       	andi	r24, 0x80	; 128
     6d4:	8d 8f       	std	Y+29, r24	; 0x1d
     6d6:	9e 8f       	std	Y+30, r25	; 0x1e
     6d8:	af 8f       	std	Y+31, r26	; 0x1f
     6da:	b8 a3       	std	Y+32, r27	; 0x20
     6dc:	83 e0       	ldi	r24, 0x03	; 3
     6de:	89 8f       	std	Y+25, r24	; 0x19
     6e0:	ce 01       	movw	r24, r28
     6e2:	49 96       	adiw	r24, 0x19	; 25
     6e4:	02 c0       	rjmp	.+4      	; 0x6ea <__mulsf3+0x1e8>
     6e6:	83 e0       	ldi	r24, 0x03	; 3
     6e8:	91 e0       	ldi	r25, 0x01	; 1
     6ea:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__pack_f>
     6ee:	a0 96       	adiw	r28, 0x20	; 32
     6f0:	e2 e1       	ldi	r30, 0x12	; 18
     6f2:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <__epilogue_restores__>

000006f6 <__divsf3>:
     6f6:	a8 e1       	ldi	r26, 0x18	; 24
     6f8:	b0 e0       	ldi	r27, 0x00	; 0
     6fa:	e1 e8       	ldi	r30, 0x81	; 129
     6fc:	f3 e0       	ldi	r31, 0x03	; 3
     6fe:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <__prologue_saves__+0x10>
     702:	69 83       	std	Y+1, r22	; 0x01
     704:	7a 83       	std	Y+2, r23	; 0x02
     706:	8b 83       	std	Y+3, r24	; 0x03
     708:	9c 83       	std	Y+4, r25	; 0x04
     70a:	2d 83       	std	Y+5, r18	; 0x05
     70c:	3e 83       	std	Y+6, r19	; 0x06
     70e:	4f 83       	std	Y+7, r20	; 0x07
     710:	58 87       	std	Y+8, r21	; 0x08
     712:	8e 01       	movw	r16, r28
     714:	07 5f       	subi	r16, 0xF7	; 247
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__unpack_f>
     722:	81 e1       	ldi	r24, 0x11	; 17
     724:	e8 2e       	mov	r14, r24
     726:	f1 2c       	mov	r15, r1
     728:	ec 0e       	add	r14, r28
     72a:	fd 1e       	adc	r15, r29
     72c:	ce 01       	movw	r24, r28
     72e:	05 96       	adiw	r24, 0x05	; 5
     730:	b7 01       	movw	r22, r14
     732:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__unpack_f>
     736:	99 85       	ldd	r25, Y+9	; 0x09
     738:	92 30       	cpi	r25, 0x02	; 2
     73a:	08 f4       	brcc	.+2      	; 0x73e <__divsf3+0x48>
     73c:	83 c0       	rjmp	.+262    	; 0x844 <__divsf3+0x14e>
     73e:	89 89       	ldd	r24, Y+17	; 0x11
     740:	82 30       	cpi	r24, 0x02	; 2
     742:	08 f4       	brcc	.+2      	; 0x746 <__divsf3+0x50>
     744:	7b c0       	rjmp	.+246    	; 0x83c <__divsf3+0x146>
     746:	2a 85       	ldd	r18, Y+10	; 0x0a
     748:	3a 89       	ldd	r19, Y+18	; 0x12
     74a:	23 27       	eor	r18, r19
     74c:	2a 87       	std	Y+10, r18	; 0x0a
     74e:	94 30       	cpi	r25, 0x04	; 4
     750:	11 f0       	breq	.+4      	; 0x756 <__divsf3+0x60>
     752:	92 30       	cpi	r25, 0x02	; 2
     754:	21 f4       	brne	.+8      	; 0x75e <__divsf3+0x68>
     756:	98 17       	cp	r25, r24
     758:	09 f0       	breq	.+2      	; 0x75c <__divsf3+0x66>
     75a:	6c c0       	rjmp	.+216    	; 0x834 <__divsf3+0x13e>
     75c:	71 c0       	rjmp	.+226    	; 0x840 <__divsf3+0x14a>
     75e:	84 30       	cpi	r24, 0x04	; 4
     760:	39 f4       	brne	.+14     	; 0x770 <__divsf3+0x7a>
     762:	1d 86       	std	Y+13, r1	; 0x0d
     764:	1e 86       	std	Y+14, r1	; 0x0e
     766:	1f 86       	std	Y+15, r1	; 0x0f
     768:	18 8a       	std	Y+16, r1	; 0x10
     76a:	1c 86       	std	Y+12, r1	; 0x0c
     76c:	1b 86       	std	Y+11, r1	; 0x0b
     76e:	6a c0       	rjmp	.+212    	; 0x844 <__divsf3+0x14e>
     770:	82 30       	cpi	r24, 0x02	; 2
     772:	19 f4       	brne	.+6      	; 0x77a <__divsf3+0x84>
     774:	84 e0       	ldi	r24, 0x04	; 4
     776:	89 87       	std	Y+9, r24	; 0x09
     778:	65 c0       	rjmp	.+202    	; 0x844 <__divsf3+0x14e>
     77a:	8b 85       	ldd	r24, Y+11	; 0x0b
     77c:	9c 85       	ldd	r25, Y+12	; 0x0c
     77e:	2b 89       	ldd	r18, Y+19	; 0x13
     780:	3c 89       	ldd	r19, Y+20	; 0x14
     782:	82 1b       	sub	r24, r18
     784:	93 0b       	sbc	r25, r19
     786:	9c 87       	std	Y+12, r25	; 0x0c
     788:	8b 87       	std	Y+11, r24	; 0x0b
     78a:	2d 85       	ldd	r18, Y+13	; 0x0d
     78c:	3e 85       	ldd	r19, Y+14	; 0x0e
     78e:	4f 85       	ldd	r20, Y+15	; 0x0f
     790:	58 89       	ldd	r21, Y+16	; 0x10
     792:	ed 88       	ldd	r14, Y+21	; 0x15
     794:	fe 88       	ldd	r15, Y+22	; 0x16
     796:	0f 89       	ldd	r16, Y+23	; 0x17
     798:	18 8d       	ldd	r17, Y+24	; 0x18
     79a:	2e 15       	cp	r18, r14
     79c:	3f 05       	cpc	r19, r15
     79e:	40 07       	cpc	r20, r16
     7a0:	51 07       	cpc	r21, r17
     7a2:	38 f4       	brcc	.+14     	; 0x7b2 <__divsf3+0xbc>
     7a4:	22 0f       	add	r18, r18
     7a6:	33 1f       	adc	r19, r19
     7a8:	44 1f       	adc	r20, r20
     7aa:	55 1f       	adc	r21, r21
     7ac:	01 97       	sbiw	r24, 0x01	; 1
     7ae:	9c 87       	std	Y+12, r25	; 0x0c
     7b0:	8b 87       	std	Y+11, r24	; 0x0b
     7b2:	6f e1       	ldi	r22, 0x1F	; 31
     7b4:	70 e0       	ldi	r23, 0x00	; 0
     7b6:	a1 2c       	mov	r10, r1
     7b8:	b1 2c       	mov	r11, r1
     7ba:	c1 2c       	mov	r12, r1
     7bc:	a0 e4       	ldi	r26, 0x40	; 64
     7be:	da 2e       	mov	r13, r26
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	dc 01       	movw	r26, r24
     7c6:	2e 15       	cp	r18, r14
     7c8:	3f 05       	cpc	r19, r15
     7ca:	40 07       	cpc	r20, r16
     7cc:	51 07       	cpc	r21, r17
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__divsf3+0xea>
     7d0:	8a 29       	or	r24, r10
     7d2:	9b 29       	or	r25, r11
     7d4:	ac 29       	or	r26, r12
     7d6:	bd 29       	or	r27, r13
     7d8:	2e 19       	sub	r18, r14
     7da:	3f 09       	sbc	r19, r15
     7dc:	40 0b       	sbc	r20, r16
     7de:	51 0b       	sbc	r21, r17
     7e0:	d6 94       	lsr	r13
     7e2:	c7 94       	ror	r12
     7e4:	b7 94       	ror	r11
     7e6:	a7 94       	ror	r10
     7e8:	22 0f       	add	r18, r18
     7ea:	33 1f       	adc	r19, r19
     7ec:	44 1f       	adc	r20, r20
     7ee:	55 1f       	adc	r21, r21
     7f0:	61 50       	subi	r22, 0x01	; 1
     7f2:	70 40       	sbci	r23, 0x00	; 0
     7f4:	41 f7       	brne	.-48     	; 0x7c6 <__divsf3+0xd0>
     7f6:	6f e7       	ldi	r22, 0x7F	; 127
     7f8:	e6 2e       	mov	r14, r22
     7fa:	f1 2c       	mov	r15, r1
     7fc:	01 2d       	mov	r16, r1
     7fe:	11 2d       	mov	r17, r1
     800:	e8 22       	and	r14, r24
     802:	f9 22       	and	r15, r25
     804:	0a 23       	and	r16, r26
     806:	1b 23       	and	r17, r27
     808:	60 e4       	ldi	r22, 0x40	; 64
     80a:	e6 16       	cp	r14, r22
     80c:	f1 04       	cpc	r15, r1
     80e:	01 05       	cpc	r16, r1
     810:	11 05       	cpc	r17, r1
     812:	61 f4       	brne	.+24     	; 0x82c <__divsf3+0x136>
     814:	87 fd       	sbrc	r24, 7
     816:	0a c0       	rjmp	.+20     	; 0x82c <__divsf3+0x136>
     818:	21 15       	cp	r18, r1
     81a:	31 05       	cpc	r19, r1
     81c:	41 05       	cpc	r20, r1
     81e:	51 05       	cpc	r21, r1
     820:	29 f0       	breq	.+10     	; 0x82c <__divsf3+0x136>
     822:	80 5c       	subi	r24, 0xC0	; 192
     824:	9f 4f       	sbci	r25, 0xFF	; 255
     826:	af 4f       	sbci	r26, 0xFF	; 255
     828:	bf 4f       	sbci	r27, 0xFF	; 255
     82a:	80 78       	andi	r24, 0x80	; 128
     82c:	8d 87       	std	Y+13, r24	; 0x0d
     82e:	9e 87       	std	Y+14, r25	; 0x0e
     830:	af 87       	std	Y+15, r26	; 0x0f
     832:	b8 8b       	std	Y+16, r27	; 0x10
     834:	8e 01       	movw	r16, r28
     836:	07 5f       	subi	r16, 0xF7	; 247
     838:	1f 4f       	sbci	r17, 0xFF	; 255
     83a:	04 c0       	rjmp	.+8      	; 0x844 <__divsf3+0x14e>
     83c:	87 01       	movw	r16, r14
     83e:	02 c0       	rjmp	.+4      	; 0x844 <__divsf3+0x14e>
     840:	03 e0       	ldi	r16, 0x03	; 3
     842:	11 e0       	ldi	r17, 0x01	; 1
     844:	c8 01       	movw	r24, r16
     846:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__pack_f>
     84a:	68 96       	adiw	r28, 0x18	; 24
     84c:	ea e0       	ldi	r30, 0x0A	; 10
     84e:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__epilogue_restores__+0x10>

00000852 <__gesf2>:
     852:	a8 e1       	ldi	r26, 0x18	; 24
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	ef e2       	ldi	r30, 0x2F	; 47
     858:	f4 e0       	ldi	r31, 0x04	; 4
     85a:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__prologue_saves__+0x18>
     85e:	69 83       	std	Y+1, r22	; 0x01
     860:	7a 83       	std	Y+2, r23	; 0x02
     862:	8b 83       	std	Y+3, r24	; 0x03
     864:	9c 83       	std	Y+4, r25	; 0x04
     866:	2d 83       	std	Y+5, r18	; 0x05
     868:	3e 83       	std	Y+6, r19	; 0x06
     86a:	4f 83       	std	Y+7, r20	; 0x07
     86c:	58 87       	std	Y+8, r21	; 0x08
     86e:	8e 01       	movw	r16, r28
     870:	07 5f       	subi	r16, 0xF7	; 247
     872:	1f 4f       	sbci	r17, 0xFF	; 255
     874:	ce 01       	movw	r24, r28
     876:	01 96       	adiw	r24, 0x01	; 1
     878:	b8 01       	movw	r22, r16
     87a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__unpack_f>
     87e:	81 e1       	ldi	r24, 0x11	; 17
     880:	e8 2e       	mov	r14, r24
     882:	f1 2c       	mov	r15, r1
     884:	ec 0e       	add	r14, r28
     886:	fd 1e       	adc	r15, r29
     888:	ce 01       	movw	r24, r28
     88a:	05 96       	adiw	r24, 0x05	; 5
     88c:	b7 01       	movw	r22, r14
     88e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__unpack_f>
     892:	89 85       	ldd	r24, Y+9	; 0x09
     894:	82 30       	cpi	r24, 0x02	; 2
     896:	40 f0       	brcs	.+16     	; 0x8a8 <__gesf2+0x56>
     898:	89 89       	ldd	r24, Y+17	; 0x11
     89a:	82 30       	cpi	r24, 0x02	; 2
     89c:	28 f0       	brcs	.+10     	; 0x8a8 <__gesf2+0x56>
     89e:	c8 01       	movw	r24, r16
     8a0:	b7 01       	movw	r22, r14
     8a2:	0e 94 44 07 	call	0xe88	; 0xe88 <__fpcmp_parts_f>
     8a6:	01 c0       	rjmp	.+2      	; 0x8aa <__gesf2+0x58>
     8a8:	8f ef       	ldi	r24, 0xFF	; 255
     8aa:	68 96       	adiw	r28, 0x18	; 24
     8ac:	e6 e0       	ldi	r30, 0x06	; 6
     8ae:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__+0x18>

000008b2 <__ltsf2>:
     8b2:	a8 e1       	ldi	r26, 0x18	; 24
     8b4:	b0 e0       	ldi	r27, 0x00	; 0
     8b6:	ef e5       	ldi	r30, 0x5F	; 95
     8b8:	f4 e0       	ldi	r31, 0x04	; 4
     8ba:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__prologue_saves__+0x18>
     8be:	69 83       	std	Y+1, r22	; 0x01
     8c0:	7a 83       	std	Y+2, r23	; 0x02
     8c2:	8b 83       	std	Y+3, r24	; 0x03
     8c4:	9c 83       	std	Y+4, r25	; 0x04
     8c6:	2d 83       	std	Y+5, r18	; 0x05
     8c8:	3e 83       	std	Y+6, r19	; 0x06
     8ca:	4f 83       	std	Y+7, r20	; 0x07
     8cc:	58 87       	std	Y+8, r21	; 0x08
     8ce:	8e 01       	movw	r16, r28
     8d0:	07 5f       	subi	r16, 0xF7	; 247
     8d2:	1f 4f       	sbci	r17, 0xFF	; 255
     8d4:	ce 01       	movw	r24, r28
     8d6:	01 96       	adiw	r24, 0x01	; 1
     8d8:	b8 01       	movw	r22, r16
     8da:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__unpack_f>
     8de:	81 e1       	ldi	r24, 0x11	; 17
     8e0:	e8 2e       	mov	r14, r24
     8e2:	f1 2c       	mov	r15, r1
     8e4:	ec 0e       	add	r14, r28
     8e6:	fd 1e       	adc	r15, r29
     8e8:	ce 01       	movw	r24, r28
     8ea:	05 96       	adiw	r24, 0x05	; 5
     8ec:	b7 01       	movw	r22, r14
     8ee:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__unpack_f>
     8f2:	89 85       	ldd	r24, Y+9	; 0x09
     8f4:	82 30       	cpi	r24, 0x02	; 2
     8f6:	40 f0       	brcs	.+16     	; 0x908 <__stack+0x9>
     8f8:	89 89       	ldd	r24, Y+17	; 0x11
     8fa:	82 30       	cpi	r24, 0x02	; 2
     8fc:	28 f0       	brcs	.+10     	; 0x908 <__stack+0x9>
     8fe:	c8 01       	movw	r24, r16
     900:	b7 01       	movw	r22, r14
     902:	0e 94 44 07 	call	0xe88	; 0xe88 <__fpcmp_parts_f>
     906:	01 c0       	rjmp	.+2      	; 0x90a <__stack+0xb>
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	68 96       	adiw	r28, 0x18	; 24
     90c:	e6 e0       	ldi	r30, 0x06	; 6
     90e:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__+0x18>

00000912 <__floatsisf>:
     912:	a8 e0       	ldi	r26, 0x08	; 8
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	ef e8       	ldi	r30, 0x8F	; 143
     918:	f4 e0       	ldi	r31, 0x04	; 4
     91a:	0c 94 cf 17 	jmp	0x2f9e	; 0x2f9e <__prologue_saves__+0x18>
     91e:	7b 01       	movw	r14, r22
     920:	8c 01       	movw	r16, r24
     922:	83 e0       	ldi	r24, 0x03	; 3
     924:	89 83       	std	Y+1, r24	; 0x01
     926:	d8 01       	movw	r26, r16
     928:	c7 01       	movw	r24, r14
     92a:	88 27       	eor	r24, r24
     92c:	b7 fd       	sbrc	r27, 7
     92e:	83 95       	inc	r24
     930:	99 27       	eor	r25, r25
     932:	aa 27       	eor	r26, r26
     934:	bb 27       	eor	r27, r27
     936:	28 2f       	mov	r18, r24
     938:	8a 83       	std	Y+2, r24	; 0x02
     93a:	e1 14       	cp	r14, r1
     93c:	f1 04       	cpc	r15, r1
     93e:	01 05       	cpc	r16, r1
     940:	11 05       	cpc	r17, r1
     942:	19 f4       	brne	.+6      	; 0x94a <__floatsisf+0x38>
     944:	82 e0       	ldi	r24, 0x02	; 2
     946:	89 83       	std	Y+1, r24	; 0x01
     948:	37 c0       	rjmp	.+110    	; 0x9b8 <__floatsisf+0xa6>
     94a:	8e e1       	ldi	r24, 0x1E	; 30
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	9c 83       	std	Y+4, r25	; 0x04
     950:	8b 83       	std	Y+3, r24	; 0x03
     952:	22 23       	and	r18, r18
     954:	89 f0       	breq	.+34     	; 0x978 <__floatsisf+0x66>
     956:	80 e0       	ldi	r24, 0x00	; 0
     958:	e8 16       	cp	r14, r24
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	f8 06       	cpc	r15, r24
     95e:	80 e0       	ldi	r24, 0x00	; 0
     960:	08 07       	cpc	r16, r24
     962:	80 e8       	ldi	r24, 0x80	; 128
     964:	18 07       	cpc	r17, r24
     966:	69 f1       	breq	.+90     	; 0x9c2 <__floatsisf+0xb0>
     968:	10 95       	com	r17
     96a:	00 95       	com	r16
     96c:	f0 94       	com	r15
     96e:	e0 94       	com	r14
     970:	e1 1c       	adc	r14, r1
     972:	f1 1c       	adc	r15, r1
     974:	01 1d       	adc	r16, r1
     976:	11 1d       	adc	r17, r1
     978:	ed 82       	std	Y+5, r14	; 0x05
     97a:	fe 82       	std	Y+6, r15	; 0x06
     97c:	0f 83       	std	Y+7, r16	; 0x07
     97e:	18 87       	std	Y+8, r17	; 0x08
     980:	c8 01       	movw	r24, r16
     982:	b7 01       	movw	r22, r14
     984:	0e 94 b3 05 	call	0xb66	; 0xb66 <__clzsi2>
     988:	9c 01       	movw	r18, r24
     98a:	21 50       	subi	r18, 0x01	; 1
     98c:	30 40       	sbci	r19, 0x00	; 0
     98e:	12 16       	cp	r1, r18
     990:	13 06       	cpc	r1, r19
     992:	94 f4       	brge	.+36     	; 0x9b8 <__floatsisf+0xa6>
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x8e>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x86>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	8e e1       	ldi	r24, 0x1E	; 30
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	82 1b       	sub	r24, r18
     9b2:	93 0b       	sbc	r25, r19
     9b4:	9c 83       	std	Y+4, r25	; 0x04
     9b6:	8b 83       	std	Y+3, r24	; 0x03
     9b8:	ce 01       	movw	r24, r28
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__pack_f>
     9c0:	04 c0       	rjmp	.+8      	; 0x9ca <__floatsisf+0xb8>
     9c2:	60 e0       	ldi	r22, 0x00	; 0
     9c4:	70 e0       	ldi	r23, 0x00	; 0
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	9f ec       	ldi	r25, 0xCF	; 207
     9ca:	28 96       	adiw	r28, 0x08	; 8
     9cc:	e6 e0       	ldi	r30, 0x06	; 6
     9ce:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__+0x18>

000009d2 <__fixsfsi>:
     9d2:	ac e0       	ldi	r26, 0x0C	; 12
     9d4:	b0 e0       	ldi	r27, 0x00	; 0
     9d6:	ef ee       	ldi	r30, 0xEF	; 239
     9d8:	f4 e0       	ldi	r31, 0x04	; 4
     9da:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__prologue_saves__+0x20>
     9de:	69 83       	std	Y+1, r22	; 0x01
     9e0:	7a 83       	std	Y+2, r23	; 0x02
     9e2:	8b 83       	std	Y+3, r24	; 0x03
     9e4:	9c 83       	std	Y+4, r25	; 0x04
     9e6:	ce 01       	movw	r24, r28
     9e8:	01 96       	adiw	r24, 0x01	; 1
     9ea:	be 01       	movw	r22, r28
     9ec:	6b 5f       	subi	r22, 0xFB	; 251
     9ee:	7f 4f       	sbci	r23, 0xFF	; 255
     9f0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__unpack_f>
     9f4:	8d 81       	ldd	r24, Y+5	; 0x05
     9f6:	82 30       	cpi	r24, 0x02	; 2
     9f8:	81 f1       	breq	.+96     	; 0xa5a <__fixsfsi+0x88>
     9fa:	82 30       	cpi	r24, 0x02	; 2
     9fc:	70 f1       	brcs	.+92     	; 0xa5a <__fixsfsi+0x88>
     9fe:	84 30       	cpi	r24, 0x04	; 4
     a00:	21 f4       	brne	.+8      	; 0xa0a <__fixsfsi+0x38>
     a02:	8e 81       	ldd	r24, Y+6	; 0x06
     a04:	88 23       	and	r24, r24
     a06:	69 f1       	breq	.+90     	; 0xa62 <__fixsfsi+0x90>
     a08:	0a c0       	rjmp	.+20     	; 0xa1e <__fixsfsi+0x4c>
     a0a:	2f 81       	ldd	r18, Y+7	; 0x07
     a0c:	38 85       	ldd	r19, Y+8	; 0x08
     a0e:	37 fd       	sbrc	r19, 7
     a10:	24 c0       	rjmp	.+72     	; 0xa5a <__fixsfsi+0x88>
     a12:	6e 81       	ldd	r22, Y+6	; 0x06
     a14:	2f 31       	cpi	r18, 0x1F	; 31
     a16:	31 05       	cpc	r19, r1
     a18:	3c f0       	brlt	.+14     	; 0xa28 <__fixsfsi+0x56>
     a1a:	66 23       	and	r22, r22
     a1c:	11 f1       	breq	.+68     	; 0xa62 <__fixsfsi+0x90>
     a1e:	20 e0       	ldi	r18, 0x00	; 0
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	40 e0       	ldi	r20, 0x00	; 0
     a24:	50 e8       	ldi	r21, 0x80	; 128
     a26:	21 c0       	rjmp	.+66     	; 0xa6a <__fixsfsi+0x98>
     a28:	8e e1       	ldi	r24, 0x1E	; 30
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	82 1b       	sub	r24, r18
     a2e:	93 0b       	sbc	r25, r19
     a30:	29 85       	ldd	r18, Y+9	; 0x09
     a32:	3a 85       	ldd	r19, Y+10	; 0x0a
     a34:	4b 85       	ldd	r20, Y+11	; 0x0b
     a36:	5c 85       	ldd	r21, Y+12	; 0x0c
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__fixsfsi+0x70>
     a3a:	56 95       	lsr	r21
     a3c:	47 95       	ror	r20
     a3e:	37 95       	ror	r19
     a40:	27 95       	ror	r18
     a42:	8a 95       	dec	r24
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__fixsfsi+0x68>
     a46:	66 23       	and	r22, r22
     a48:	81 f0       	breq	.+32     	; 0xa6a <__fixsfsi+0x98>
     a4a:	50 95       	com	r21
     a4c:	40 95       	com	r20
     a4e:	30 95       	com	r19
     a50:	21 95       	neg	r18
     a52:	3f 4f       	sbci	r19, 0xFF	; 255
     a54:	4f 4f       	sbci	r20, 0xFF	; 255
     a56:	5f 4f       	sbci	r21, 0xFF	; 255
     a58:	08 c0       	rjmp	.+16     	; 0xa6a <__fixsfsi+0x98>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	a9 01       	movw	r20, r18
     a60:	04 c0       	rjmp	.+8      	; 0xa6a <__fixsfsi+0x98>
     a62:	2f ef       	ldi	r18, 0xFF	; 255
     a64:	3f ef       	ldi	r19, 0xFF	; 255
     a66:	4f ef       	ldi	r20, 0xFF	; 255
     a68:	5f e7       	ldi	r21, 0x7F	; 127
     a6a:	b9 01       	movw	r22, r18
     a6c:	ca 01       	movw	r24, r20
     a6e:	2c 96       	adiw	r28, 0x0c	; 12
     a70:	e2 e0       	ldi	r30, 0x02	; 2
     a72:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <__epilogue_restores__+0x20>

00000a76 <__floatunsisf>:
     a76:	a8 e0       	ldi	r26, 0x08	; 8
     a78:	b0 e0       	ldi	r27, 0x00	; 0
     a7a:	e1 e4       	ldi	r30, 0x41	; 65
     a7c:	f5 e0       	ldi	r31, 0x05	; 5
     a7e:	0c 94 cd 17 	jmp	0x2f9a	; 0x2f9a <__prologue_saves__+0x14>
     a82:	7b 01       	movw	r14, r22
     a84:	8c 01       	movw	r16, r24
     a86:	1a 82       	std	Y+2, r1	; 0x02
     a88:	61 15       	cp	r22, r1
     a8a:	71 05       	cpc	r23, r1
     a8c:	81 05       	cpc	r24, r1
     a8e:	91 05       	cpc	r25, r1
     a90:	19 f4       	brne	.+6      	; 0xa98 <__floatunsisf+0x22>
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	89 83       	std	Y+1, r24	; 0x01
     a96:	5f c0       	rjmp	.+190    	; 0xb56 <__floatunsisf+0xe0>
     a98:	83 e0       	ldi	r24, 0x03	; 3
     a9a:	89 83       	std	Y+1, r24	; 0x01
     a9c:	8e e1       	ldi	r24, 0x1E	; 30
     a9e:	c8 2e       	mov	r12, r24
     aa0:	d1 2c       	mov	r13, r1
     aa2:	dc 82       	std	Y+4, r13	; 0x04
     aa4:	cb 82       	std	Y+3, r12	; 0x03
     aa6:	ed 82       	std	Y+5, r14	; 0x05
     aa8:	fe 82       	std	Y+6, r15	; 0x06
     aaa:	0f 83       	std	Y+7, r16	; 0x07
     aac:	18 87       	std	Y+8, r17	; 0x08
     aae:	c8 01       	movw	r24, r16
     ab0:	b7 01       	movw	r22, r14
     ab2:	0e 94 b3 05 	call	0xb66	; 0xb66 <__clzsi2>
     ab6:	fc 01       	movw	r30, r24
     ab8:	31 97       	sbiw	r30, 0x01	; 1
     aba:	f7 ff       	sbrs	r31, 7
     abc:	3a c0       	rjmp	.+116    	; 0xb32 <__floatunsisf+0xbc>
     abe:	aa 27       	eor	r26, r26
     ac0:	bb 27       	eor	r27, r27
     ac2:	ae 1b       	sub	r26, r30
     ac4:	bf 0b       	sbc	r27, r31
     ac6:	21 e0       	ldi	r18, 0x01	; 1
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	40 e0       	ldi	r20, 0x00	; 0
     acc:	50 e0       	ldi	r21, 0x00	; 0
     ace:	0a 2e       	mov	r0, r26
     ad0:	04 c0       	rjmp	.+8      	; 0xada <__floatunsisf+0x64>
     ad2:	22 0f       	add	r18, r18
     ad4:	33 1f       	adc	r19, r19
     ad6:	44 1f       	adc	r20, r20
     ad8:	55 1f       	adc	r21, r21
     ada:	0a 94       	dec	r0
     adc:	d2 f7       	brpl	.-12     	; 0xad2 <__floatunsisf+0x5c>
     ade:	21 50       	subi	r18, 0x01	; 1
     ae0:	30 40       	sbci	r19, 0x00	; 0
     ae2:	40 40       	sbci	r20, 0x00	; 0
     ae4:	50 40       	sbci	r21, 0x00	; 0
     ae6:	2e 21       	and	r18, r14
     ae8:	3f 21       	and	r19, r15
     aea:	40 23       	and	r20, r16
     aec:	51 23       	and	r21, r17
     aee:	61 e0       	ldi	r22, 0x01	; 1
     af0:	70 e0       	ldi	r23, 0x00	; 0
     af2:	80 e0       	ldi	r24, 0x00	; 0
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	21 15       	cp	r18, r1
     af8:	31 05       	cpc	r19, r1
     afa:	41 05       	cpc	r20, r1
     afc:	51 05       	cpc	r21, r1
     afe:	19 f4       	brne	.+6      	; 0xb06 <__floatunsisf+0x90>
     b00:	60 e0       	ldi	r22, 0x00	; 0
     b02:	70 e0       	ldi	r23, 0x00	; 0
     b04:	cb 01       	movw	r24, r22
     b06:	04 c0       	rjmp	.+8      	; 0xb10 <__floatunsisf+0x9a>
     b08:	16 95       	lsr	r17
     b0a:	07 95       	ror	r16
     b0c:	f7 94       	ror	r15
     b0e:	e7 94       	ror	r14
     b10:	aa 95       	dec	r26
     b12:	d2 f7       	brpl	.-12     	; 0xb08 <__floatunsisf+0x92>
     b14:	e6 2a       	or	r14, r22
     b16:	f7 2a       	or	r15, r23
     b18:	08 2b       	or	r16, r24
     b1a:	19 2b       	or	r17, r25
     b1c:	ed 82       	std	Y+5, r14	; 0x05
     b1e:	fe 82       	std	Y+6, r15	; 0x06
     b20:	0f 83       	std	Y+7, r16	; 0x07
     b22:	18 87       	std	Y+8, r17	; 0x08
     b24:	8e e1       	ldi	r24, 0x1E	; 30
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	8e 1b       	sub	r24, r30
     b2a:	9f 0b       	sbc	r25, r31
     b2c:	9c 83       	std	Y+4, r25	; 0x04
     b2e:	8b 83       	std	Y+3, r24	; 0x03
     b30:	12 c0       	rjmp	.+36     	; 0xb56 <__floatunsisf+0xe0>
     b32:	30 97       	sbiw	r30, 0x00	; 0
     b34:	81 f0       	breq	.+32     	; 0xb56 <__floatunsisf+0xe0>
     b36:	0e 2e       	mov	r0, r30
     b38:	04 c0       	rjmp	.+8      	; 0xb42 <__floatunsisf+0xcc>
     b3a:	ee 0c       	add	r14, r14
     b3c:	ff 1c       	adc	r15, r15
     b3e:	00 1f       	adc	r16, r16
     b40:	11 1f       	adc	r17, r17
     b42:	0a 94       	dec	r0
     b44:	d2 f7       	brpl	.-12     	; 0xb3a <__floatunsisf+0xc4>
     b46:	ed 82       	std	Y+5, r14	; 0x05
     b48:	fe 82       	std	Y+6, r15	; 0x06
     b4a:	0f 83       	std	Y+7, r16	; 0x07
     b4c:	18 87       	std	Y+8, r17	; 0x08
     b4e:	ce 1a       	sub	r12, r30
     b50:	df 0a       	sbc	r13, r31
     b52:	dc 82       	std	Y+4, r13	; 0x04
     b54:	cb 82       	std	Y+3, r12	; 0x03
     b56:	ce 01       	movw	r24, r28
     b58:	01 96       	adiw	r24, 0x01	; 1
     b5a:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__pack_f>
     b5e:	28 96       	adiw	r28, 0x08	; 8
     b60:	e8 e0       	ldi	r30, 0x08	; 8
     b62:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <__epilogue_restores__+0x14>

00000b66 <__clzsi2>:
     b66:	af 92       	push	r10
     b68:	bf 92       	push	r11
     b6a:	cf 92       	push	r12
     b6c:	df 92       	push	r13
     b6e:	ef 92       	push	r14
     b70:	ff 92       	push	r15
     b72:	0f 93       	push	r16
     b74:	1f 93       	push	r17
     b76:	7b 01       	movw	r14, r22
     b78:	8c 01       	movw	r16, r24
     b7a:	80 e0       	ldi	r24, 0x00	; 0
     b7c:	e8 16       	cp	r14, r24
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	f8 06       	cpc	r15, r24
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	08 07       	cpc	r16, r24
     b86:	80 e0       	ldi	r24, 0x00	; 0
     b88:	18 07       	cpc	r17, r24
     b8a:	58 f4       	brcc	.+22     	; 0xba2 <__clzsi2+0x3c>
     b8c:	ef ef       	ldi	r30, 0xFF	; 255
     b8e:	ee 16       	cp	r14, r30
     b90:	f1 04       	cpc	r15, r1
     b92:	01 05       	cpc	r16, r1
     b94:	11 05       	cpc	r17, r1
     b96:	09 f0       	breq	.+2      	; 0xb9a <__clzsi2+0x34>
     b98:	90 f4       	brcc	.+36     	; 0xbbe <__clzsi2+0x58>
     b9a:	80 e0       	ldi	r24, 0x00	; 0
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	dc 01       	movw	r26, r24
     ba0:	17 c0       	rjmp	.+46     	; 0xbd0 <__clzsi2+0x6a>
     ba2:	f0 e0       	ldi	r31, 0x00	; 0
     ba4:	ef 16       	cp	r14, r31
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	ff 06       	cpc	r15, r31
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	0f 07       	cpc	r16, r31
     bae:	f1 e0       	ldi	r31, 0x01	; 1
     bb0:	1f 07       	cpc	r17, r31
     bb2:	50 f4       	brcc	.+20     	; 0xbc8 <__clzsi2+0x62>
     bb4:	80 e1       	ldi	r24, 0x10	; 16
     bb6:	90 e0       	ldi	r25, 0x00	; 0
     bb8:	a0 e0       	ldi	r26, 0x00	; 0
     bba:	b0 e0       	ldi	r27, 0x00	; 0
     bbc:	09 c0       	rjmp	.+18     	; 0xbd0 <__clzsi2+0x6a>
     bbe:	88 e0       	ldi	r24, 0x08	; 8
     bc0:	90 e0       	ldi	r25, 0x00	; 0
     bc2:	a0 e0       	ldi	r26, 0x00	; 0
     bc4:	b0 e0       	ldi	r27, 0x00	; 0
     bc6:	04 c0       	rjmp	.+8      	; 0xbd0 <__clzsi2+0x6a>
     bc8:	88 e1       	ldi	r24, 0x18	; 24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	20 e2       	ldi	r18, 0x20	; 32
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	28 1b       	sub	r18, r24
     bda:	39 0b       	sbc	r19, r25
     bdc:	4a 0b       	sbc	r20, r26
     bde:	5b 0b       	sbc	r21, r27
     be0:	57 01       	movw	r10, r14
     be2:	68 01       	movw	r12, r16
     be4:	04 c0       	rjmp	.+8      	; 0xbee <__clzsi2+0x88>
     be6:	d6 94       	lsr	r13
     be8:	c7 94       	ror	r12
     bea:	b7 94       	ror	r11
     bec:	a7 94       	ror	r10
     bee:	8a 95       	dec	r24
     bf0:	d2 f7       	brpl	.-12     	; 0xbe6 <__clzsi2+0x80>
     bf2:	d6 01       	movw	r26, r12
     bf4:	c5 01       	movw	r24, r10
     bf6:	85 5f       	subi	r24, 0xF5	; 245
     bf8:	9e 4f       	sbci	r25, 0xFE	; 254
     bfa:	fc 01       	movw	r30, r24
     bfc:	80 81       	ld	r24, Z
     bfe:	28 1b       	sub	r18, r24
     c00:	31 09       	sbc	r19, r1
     c02:	41 09       	sbc	r20, r1
     c04:	51 09       	sbc	r21, r1
     c06:	c9 01       	movw	r24, r18
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	ef 90       	pop	r14
     c10:	df 90       	pop	r13
     c12:	cf 90       	pop	r12
     c14:	bf 90       	pop	r11
     c16:	af 90       	pop	r10
     c18:	08 95       	ret

00000c1a <__pack_f>:
     c1a:	ef 92       	push	r14
     c1c:	ff 92       	push	r15
     c1e:	0f 93       	push	r16
     c20:	1f 93       	push	r17
     c22:	cf 93       	push	r28
     c24:	df 93       	push	r29
     c26:	fc 01       	movw	r30, r24
     c28:	24 81       	ldd	r18, Z+4	; 0x04
     c2a:	35 81       	ldd	r19, Z+5	; 0x05
     c2c:	46 81       	ldd	r20, Z+6	; 0x06
     c2e:	57 81       	ldd	r21, Z+7	; 0x07
     c30:	61 81       	ldd	r22, Z+1	; 0x01
     c32:	80 81       	ld	r24, Z
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	20 f4       	brcc	.+8      	; 0xc40 <__pack_f+0x26>
     c38:	40 61       	ori	r20, 0x10	; 16
     c3a:	ef ef       	ldi	r30, 0xFF	; 255
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	a3 c0       	rjmp	.+326    	; 0xd86 <__pack_f+0x16c>
     c40:	84 30       	cpi	r24, 0x04	; 4
     c42:	09 f4       	brne	.+2      	; 0xc46 <__pack_f+0x2c>
     c44:	9b c0       	rjmp	.+310    	; 0xd7c <__pack_f+0x162>
     c46:	82 30       	cpi	r24, 0x02	; 2
     c48:	09 f4       	brne	.+2      	; 0xc4c <__pack_f+0x32>
     c4a:	92 c0       	rjmp	.+292    	; 0xd70 <__pack_f+0x156>
     c4c:	21 15       	cp	r18, r1
     c4e:	31 05       	cpc	r19, r1
     c50:	41 05       	cpc	r20, r1
     c52:	51 05       	cpc	r21, r1
     c54:	09 f4       	brne	.+2      	; 0xc58 <__pack_f+0x3e>
     c56:	8f c0       	rjmp	.+286    	; 0xd76 <__pack_f+0x15c>
     c58:	02 80       	ldd	r0, Z+2	; 0x02
     c5a:	f3 81       	ldd	r31, Z+3	; 0x03
     c5c:	e0 2d       	mov	r30, r0
     c5e:	8f ef       	ldi	r24, 0xFF	; 255
     c60:	e2 38       	cpi	r30, 0x82	; 130
     c62:	f8 07       	cpc	r31, r24
     c64:	0c f0       	brlt	.+2      	; 0xc68 <__pack_f+0x4e>
     c66:	5a c0       	rjmp	.+180    	; 0xd1c <__pack_f+0x102>
     c68:	c2 e8       	ldi	r28, 0x82	; 130
     c6a:	df ef       	ldi	r29, 0xFF	; 255
     c6c:	ce 1b       	sub	r28, r30
     c6e:	df 0b       	sbc	r29, r31
     c70:	ca 31       	cpi	r28, 0x1A	; 26
     c72:	d1 05       	cpc	r29, r1
     c74:	6c f5       	brge	.+90     	; 0xcd0 <__pack_f+0xb6>
     c76:	79 01       	movw	r14, r18
     c78:	8a 01       	movw	r16, r20
     c7a:	0c 2e       	mov	r0, r28
     c7c:	04 c0       	rjmp	.+8      	; 0xc86 <__pack_f+0x6c>
     c7e:	16 95       	lsr	r17
     c80:	07 95       	ror	r16
     c82:	f7 94       	ror	r15
     c84:	e7 94       	ror	r14
     c86:	0a 94       	dec	r0
     c88:	d2 f7       	brpl	.-12     	; 0xc7e <__pack_f+0x64>
     c8a:	81 e0       	ldi	r24, 0x01	; 1
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	a0 e0       	ldi	r26, 0x00	; 0
     c90:	b0 e0       	ldi	r27, 0x00	; 0
     c92:	0c 2e       	mov	r0, r28
     c94:	04 c0       	rjmp	.+8      	; 0xc9e <__pack_f+0x84>
     c96:	88 0f       	add	r24, r24
     c98:	99 1f       	adc	r25, r25
     c9a:	aa 1f       	adc	r26, r26
     c9c:	bb 1f       	adc	r27, r27
     c9e:	0a 94       	dec	r0
     ca0:	d2 f7       	brpl	.-12     	; 0xc96 <__pack_f+0x7c>
     ca2:	01 97       	sbiw	r24, 0x01	; 1
     ca4:	a1 09       	sbc	r26, r1
     ca6:	b1 09       	sbc	r27, r1
     ca8:	82 23       	and	r24, r18
     caa:	93 23       	and	r25, r19
     cac:	a4 23       	and	r26, r20
     cae:	b5 23       	and	r27, r21
     cb0:	21 e0       	ldi	r18, 0x01	; 1
     cb2:	30 e0       	ldi	r19, 0x00	; 0
     cb4:	40 e0       	ldi	r20, 0x00	; 0
     cb6:	50 e0       	ldi	r21, 0x00	; 0
     cb8:	00 97       	sbiw	r24, 0x00	; 0
     cba:	a1 05       	cpc	r26, r1
     cbc:	b1 05       	cpc	r27, r1
     cbe:	19 f4       	brne	.+6      	; 0xcc6 <__pack_f+0xac>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	a9 01       	movw	r20, r18
     cc6:	2e 29       	or	r18, r14
     cc8:	3f 29       	or	r19, r15
     cca:	40 2b       	or	r20, r16
     ccc:	51 2b       	or	r21, r17
     cce:	03 c0       	rjmp	.+6      	; 0xcd6 <__pack_f+0xbc>
     cd0:	20 e0       	ldi	r18, 0x00	; 0
     cd2:	30 e0       	ldi	r19, 0x00	; 0
     cd4:	a9 01       	movw	r20, r18
     cd6:	da 01       	movw	r26, r20
     cd8:	c9 01       	movw	r24, r18
     cda:	8f 77       	andi	r24, 0x7F	; 127
     cdc:	90 70       	andi	r25, 0x00	; 0
     cde:	a0 70       	andi	r26, 0x00	; 0
     ce0:	b0 70       	andi	r27, 0x00	; 0
     ce2:	80 34       	cpi	r24, 0x40	; 64
     ce4:	91 05       	cpc	r25, r1
     ce6:	a1 05       	cpc	r26, r1
     ce8:	b1 05       	cpc	r27, r1
     cea:	39 f4       	brne	.+14     	; 0xcfa <__pack_f+0xe0>
     cec:	27 ff       	sbrs	r18, 7
     cee:	09 c0       	rjmp	.+18     	; 0xd02 <__pack_f+0xe8>
     cf0:	20 5c       	subi	r18, 0xC0	; 192
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
     cf4:	4f 4f       	sbci	r20, 0xFF	; 255
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
     cf8:	04 c0       	rjmp	.+8      	; 0xd02 <__pack_f+0xe8>
     cfa:	21 5c       	subi	r18, 0xC1	; 193
     cfc:	3f 4f       	sbci	r19, 0xFF	; 255
     cfe:	4f 4f       	sbci	r20, 0xFF	; 255
     d00:	5f 4f       	sbci	r21, 0xFF	; 255
     d02:	e1 e0       	ldi	r30, 0x01	; 1
     d04:	f0 e0       	ldi	r31, 0x00	; 0
     d06:	20 30       	cpi	r18, 0x00	; 0
     d08:	80 e0       	ldi	r24, 0x00	; 0
     d0a:	38 07       	cpc	r19, r24
     d0c:	80 e0       	ldi	r24, 0x00	; 0
     d0e:	48 07       	cpc	r20, r24
     d10:	80 e4       	ldi	r24, 0x40	; 64
     d12:	58 07       	cpc	r21, r24
     d14:	28 f5       	brcc	.+74     	; 0xd60 <__pack_f+0x146>
     d16:	e0 e0       	ldi	r30, 0x00	; 0
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	22 c0       	rjmp	.+68     	; 0xd60 <__pack_f+0x146>
     d1c:	e0 38       	cpi	r30, 0x80	; 128
     d1e:	f1 05       	cpc	r31, r1
     d20:	6c f5       	brge	.+90     	; 0xd7c <__pack_f+0x162>
     d22:	e1 58       	subi	r30, 0x81	; 129
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	da 01       	movw	r26, r20
     d28:	c9 01       	movw	r24, r18
     d2a:	8f 77       	andi	r24, 0x7F	; 127
     d2c:	90 70       	andi	r25, 0x00	; 0
     d2e:	a0 70       	andi	r26, 0x00	; 0
     d30:	b0 70       	andi	r27, 0x00	; 0
     d32:	80 34       	cpi	r24, 0x40	; 64
     d34:	91 05       	cpc	r25, r1
     d36:	a1 05       	cpc	r26, r1
     d38:	b1 05       	cpc	r27, r1
     d3a:	39 f4       	brne	.+14     	; 0xd4a <__pack_f+0x130>
     d3c:	27 ff       	sbrs	r18, 7
     d3e:	09 c0       	rjmp	.+18     	; 0xd52 <__pack_f+0x138>
     d40:	20 5c       	subi	r18, 0xC0	; 192
     d42:	3f 4f       	sbci	r19, 0xFF	; 255
     d44:	4f 4f       	sbci	r20, 0xFF	; 255
     d46:	5f 4f       	sbci	r21, 0xFF	; 255
     d48:	04 c0       	rjmp	.+8      	; 0xd52 <__pack_f+0x138>
     d4a:	21 5c       	subi	r18, 0xC1	; 193
     d4c:	3f 4f       	sbci	r19, 0xFF	; 255
     d4e:	4f 4f       	sbci	r20, 0xFF	; 255
     d50:	5f 4f       	sbci	r21, 0xFF	; 255
     d52:	57 ff       	sbrs	r21, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x146>
     d56:	56 95       	lsr	r21
     d58:	47 95       	ror	r20
     d5a:	37 95       	ror	r19
     d5c:	27 95       	ror	r18
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	56 95       	lsr	r21
     d64:	47 95       	ror	r20
     d66:	37 95       	ror	r19
     d68:	27 95       	ror	r18
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x148>
     d6e:	0b c0       	rjmp	.+22     	; 0xd86 <__pack_f+0x16c>
     d70:	e0 e0       	ldi	r30, 0x00	; 0
     d72:	f0 e0       	ldi	r31, 0x00	; 0
     d74:	05 c0       	rjmp	.+10     	; 0xd80 <__pack_f+0x166>
     d76:	e0 e0       	ldi	r30, 0x00	; 0
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	05 c0       	rjmp	.+10     	; 0xd86 <__pack_f+0x16c>
     d7c:	ef ef       	ldi	r30, 0xFF	; 255
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	20 e0       	ldi	r18, 0x00	; 0
     d82:	30 e0       	ldi	r19, 0x00	; 0
     d84:	a9 01       	movw	r20, r18
     d86:	8e 2f       	mov	r24, r30
     d88:	87 95       	ror	r24
     d8a:	88 27       	eor	r24, r24
     d8c:	87 95       	ror	r24
     d8e:	94 2f       	mov	r25, r20
     d90:	9f 77       	andi	r25, 0x7F	; 127
     d92:	67 95       	ror	r22
     d94:	66 27       	eor	r22, r22
     d96:	67 95       	ror	r22
     d98:	e6 95       	lsr	r30
     d9a:	e2 2e       	mov	r14, r18
     d9c:	a9 2f       	mov	r26, r25
     d9e:	a8 2b       	or	r26, r24
     da0:	fe 2f       	mov	r31, r30
     da2:	f6 2b       	or	r31, r22
     da4:	62 2f       	mov	r22, r18
     da6:	73 2f       	mov	r23, r19
     da8:	8a 2f       	mov	r24, r26
     daa:	9f 2f       	mov	r25, r31
     dac:	cd b7       	in	r28, 0x3d	; 61
     dae:	de b7       	in	r29, 0x3e	; 62
     db0:	e6 e0       	ldi	r30, 0x06	; 6
     db2:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__epilogue_restores__+0x18>

00000db6 <__unpack_f>:
     db6:	dc 01       	movw	r26, r24
     db8:	fb 01       	movw	r30, r22
     dba:	2c 91       	ld	r18, X
     dbc:	11 96       	adiw	r26, 0x01	; 1
     dbe:	3c 91       	ld	r19, X
     dc0:	11 97       	sbiw	r26, 0x01	; 1
     dc2:	12 96       	adiw	r26, 0x02	; 2
     dc4:	8c 91       	ld	r24, X
     dc6:	12 97       	sbiw	r26, 0x02	; 2
     dc8:	48 2f       	mov	r20, r24
     dca:	4f 77       	andi	r20, 0x7F	; 127
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	98 2f       	mov	r25, r24
     dd0:	99 1f       	adc	r25, r25
     dd2:	99 27       	eor	r25, r25
     dd4:	99 1f       	adc	r25, r25
     dd6:	13 96       	adiw	r26, 0x03	; 3
     dd8:	6c 91       	ld	r22, X
     dda:	13 97       	sbiw	r26, 0x03	; 3
     ddc:	86 2f       	mov	r24, r22
     dde:	88 0f       	add	r24, r24
     de0:	89 2b       	or	r24, r25
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	66 1f       	adc	r22, r22
     de6:	66 27       	eor	r22, r22
     de8:	66 1f       	adc	r22, r22
     dea:	61 83       	std	Z+1, r22	; 0x01
     dec:	00 97       	sbiw	r24, 0x00	; 0
     dee:	39 f5       	brne	.+78     	; 0xe3e <__unpack_f+0x88>
     df0:	21 15       	cp	r18, r1
     df2:	31 05       	cpc	r19, r1
     df4:	41 05       	cpc	r20, r1
     df6:	51 05       	cpc	r21, r1
     df8:	11 f4       	brne	.+4      	; 0xdfe <__unpack_f+0x48>
     dfa:	82 e0       	ldi	r24, 0x02	; 2
     dfc:	29 c0       	rjmp	.+82     	; 0xe50 <__unpack_f+0x9a>
     dfe:	82 e8       	ldi	r24, 0x82	; 130
     e00:	9f ef       	ldi	r25, 0xFF	; 255
     e02:	93 83       	std	Z+3, r25	; 0x03
     e04:	82 83       	std	Z+2, r24	; 0x02
     e06:	67 e0       	ldi	r22, 0x07	; 7
     e08:	22 0f       	add	r18, r18
     e0a:	33 1f       	adc	r19, r19
     e0c:	44 1f       	adc	r20, r20
     e0e:	55 1f       	adc	r21, r21
     e10:	6a 95       	dec	r22
     e12:	d1 f7       	brne	.-12     	; 0xe08 <__unpack_f+0x52>
     e14:	83 e0       	ldi	r24, 0x03	; 3
     e16:	80 83       	st	Z, r24
     e18:	09 c0       	rjmp	.+18     	; 0xe2c <__unpack_f+0x76>
     e1a:	22 0f       	add	r18, r18
     e1c:	33 1f       	adc	r19, r19
     e1e:	44 1f       	adc	r20, r20
     e20:	55 1f       	adc	r21, r21
     e22:	82 81       	ldd	r24, Z+2	; 0x02
     e24:	93 81       	ldd	r25, Z+3	; 0x03
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	93 83       	std	Z+3, r25	; 0x03
     e2a:	82 83       	std	Z+2, r24	; 0x02
     e2c:	20 30       	cpi	r18, 0x00	; 0
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	38 07       	cpc	r19, r24
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	48 07       	cpc	r20, r24
     e36:	80 e4       	ldi	r24, 0x40	; 64
     e38:	58 07       	cpc	r21, r24
     e3a:	78 f3       	brcs	.-34     	; 0xe1a <__unpack_f+0x64>
     e3c:	20 c0       	rjmp	.+64     	; 0xe7e <__unpack_f+0xc8>
     e3e:	8f 3f       	cpi	r24, 0xFF	; 255
     e40:	91 05       	cpc	r25, r1
     e42:	79 f4       	brne	.+30     	; 0xe62 <__unpack_f+0xac>
     e44:	21 15       	cp	r18, r1
     e46:	31 05       	cpc	r19, r1
     e48:	41 05       	cpc	r20, r1
     e4a:	51 05       	cpc	r21, r1
     e4c:	19 f4       	brne	.+6      	; 0xe54 <__unpack_f+0x9e>
     e4e:	84 e0       	ldi	r24, 0x04	; 4
     e50:	80 83       	st	Z, r24
     e52:	08 95       	ret
     e54:	44 ff       	sbrs	r20, 4
     e56:	03 c0       	rjmp	.+6      	; 0xe5e <__unpack_f+0xa8>
     e58:	81 e0       	ldi	r24, 0x01	; 1
     e5a:	80 83       	st	Z, r24
     e5c:	10 c0       	rjmp	.+32     	; 0xe7e <__unpack_f+0xc8>
     e5e:	10 82       	st	Z, r1
     e60:	0e c0       	rjmp	.+28     	; 0xe7e <__unpack_f+0xc8>
     e62:	8f 57       	subi	r24, 0x7F	; 127
     e64:	90 40       	sbci	r25, 0x00	; 0
     e66:	93 83       	std	Z+3, r25	; 0x03
     e68:	82 83       	std	Z+2, r24	; 0x02
     e6a:	83 e0       	ldi	r24, 0x03	; 3
     e6c:	80 83       	st	Z, r24
     e6e:	87 e0       	ldi	r24, 0x07	; 7
     e70:	22 0f       	add	r18, r18
     e72:	33 1f       	adc	r19, r19
     e74:	44 1f       	adc	r20, r20
     e76:	55 1f       	adc	r21, r21
     e78:	8a 95       	dec	r24
     e7a:	d1 f7       	brne	.-12     	; 0xe70 <__unpack_f+0xba>
     e7c:	50 64       	ori	r21, 0x40	; 64
     e7e:	24 83       	std	Z+4, r18	; 0x04
     e80:	35 83       	std	Z+5, r19	; 0x05
     e82:	46 83       	std	Z+6, r20	; 0x06
     e84:	57 83       	std	Z+7, r21	; 0x07
     e86:	08 95       	ret

00000e88 <__fpcmp_parts_f>:
     e88:	fc 01       	movw	r30, r24
     e8a:	db 01       	movw	r26, r22
     e8c:	90 81       	ld	r25, Z
     e8e:	92 30       	cpi	r25, 0x02	; 2
     e90:	08 f4       	brcc	.+2      	; 0xe94 <__fpcmp_parts_f+0xc>
     e92:	49 c0       	rjmp	.+146    	; 0xf26 <__fpcmp_parts_f+0x9e>
     e94:	8c 91       	ld	r24, X
     e96:	82 30       	cpi	r24, 0x02	; 2
     e98:	08 f4       	brcc	.+2      	; 0xe9c <__fpcmp_parts_f+0x14>
     e9a:	45 c0       	rjmp	.+138    	; 0xf26 <__fpcmp_parts_f+0x9e>
     e9c:	94 30       	cpi	r25, 0x04	; 4
     e9e:	51 f4       	brne	.+20     	; 0xeb4 <__fpcmp_parts_f+0x2c>
     ea0:	61 81       	ldd	r22, Z+1	; 0x01
     ea2:	84 30       	cpi	r24, 0x04	; 4
     ea4:	b1 f5       	brne	.+108    	; 0xf12 <__fpcmp_parts_f+0x8a>
     ea6:	11 96       	adiw	r26, 0x01	; 1
     ea8:	2c 91       	ld	r18, X
     eaa:	11 97       	sbiw	r26, 0x01	; 1
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	26 1b       	sub	r18, r22
     eb0:	31 09       	sbc	r19, r1
     eb2:	41 c0       	rjmp	.+130    	; 0xf36 <__fpcmp_parts_f+0xae>
     eb4:	84 30       	cpi	r24, 0x04	; 4
     eb6:	21 f0       	breq	.+8      	; 0xec0 <__fpcmp_parts_f+0x38>
     eb8:	92 30       	cpi	r25, 0x02	; 2
     eba:	41 f4       	brne	.+16     	; 0xecc <__fpcmp_parts_f+0x44>
     ebc:	82 30       	cpi	r24, 0x02	; 2
     ebe:	b1 f1       	breq	.+108    	; 0xf2c <__fpcmp_parts_f+0xa4>
     ec0:	11 96       	adiw	r26, 0x01	; 1
     ec2:	8c 91       	ld	r24, X
     ec4:	11 97       	sbiw	r26, 0x01	; 1
     ec6:	88 23       	and	r24, r24
     ec8:	a1 f1       	breq	.+104    	; 0xf32 <__fpcmp_parts_f+0xaa>
     eca:	2d c0       	rjmp	.+90     	; 0xf26 <__fpcmp_parts_f+0x9e>
     ecc:	61 81       	ldd	r22, Z+1	; 0x01
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	01 f1       	breq	.+64     	; 0xf12 <__fpcmp_parts_f+0x8a>
     ed2:	11 96       	adiw	r26, 0x01	; 1
     ed4:	8c 91       	ld	r24, X
     ed6:	11 97       	sbiw	r26, 0x01	; 1
     ed8:	68 17       	cp	r22, r24
     eda:	d9 f4       	brne	.+54     	; 0xf12 <__fpcmp_parts_f+0x8a>
     edc:	22 81       	ldd	r18, Z+2	; 0x02
     ede:	33 81       	ldd	r19, Z+3	; 0x03
     ee0:	12 96       	adiw	r26, 0x02	; 2
     ee2:	8d 91       	ld	r24, X+
     ee4:	9c 91       	ld	r25, X
     ee6:	13 97       	sbiw	r26, 0x03	; 3
     ee8:	82 17       	cp	r24, r18
     eea:	93 07       	cpc	r25, r19
     eec:	94 f0       	brlt	.+36     	; 0xf12 <__fpcmp_parts_f+0x8a>
     eee:	28 17       	cp	r18, r24
     ef0:	39 07       	cpc	r19, r25
     ef2:	bc f0       	brlt	.+46     	; 0xf22 <__fpcmp_parts_f+0x9a>
     ef4:	24 81       	ldd	r18, Z+4	; 0x04
     ef6:	35 81       	ldd	r19, Z+5	; 0x05
     ef8:	46 81       	ldd	r20, Z+6	; 0x06
     efa:	57 81       	ldd	r21, Z+7	; 0x07
     efc:	14 96       	adiw	r26, 0x04	; 4
     efe:	8d 91       	ld	r24, X+
     f00:	9d 91       	ld	r25, X+
     f02:	0d 90       	ld	r0, X+
     f04:	bc 91       	ld	r27, X
     f06:	a0 2d       	mov	r26, r0
     f08:	82 17       	cp	r24, r18
     f0a:	93 07       	cpc	r25, r19
     f0c:	a4 07       	cpc	r26, r20
     f0e:	b5 07       	cpc	r27, r21
     f10:	18 f4       	brcc	.+6      	; 0xf18 <__fpcmp_parts_f+0x90>
     f12:	66 23       	and	r22, r22
     f14:	41 f0       	breq	.+16     	; 0xf26 <__fpcmp_parts_f+0x9e>
     f16:	0d c0       	rjmp	.+26     	; 0xf32 <__fpcmp_parts_f+0xaa>
     f18:	28 17       	cp	r18, r24
     f1a:	39 07       	cpc	r19, r25
     f1c:	4a 07       	cpc	r20, r26
     f1e:	5b 07       	cpc	r21, r27
     f20:	28 f4       	brcc	.+10     	; 0xf2c <__fpcmp_parts_f+0xa4>
     f22:	66 23       	and	r22, r22
     f24:	31 f0       	breq	.+12     	; 0xf32 <__fpcmp_parts_f+0xaa>
     f26:	21 e0       	ldi	r18, 0x01	; 1
     f28:	30 e0       	ldi	r19, 0x00	; 0
     f2a:	05 c0       	rjmp	.+10     	; 0xf36 <__fpcmp_parts_f+0xae>
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	30 e0       	ldi	r19, 0x00	; 0
     f30:	02 c0       	rjmp	.+4      	; 0xf36 <__fpcmp_parts_f+0xae>
     f32:	2f ef       	ldi	r18, 0xFF	; 255
     f34:	3f ef       	ldi	r19, 0xFF	; 255
     f36:	c9 01       	movw	r24, r18
     f38:	08 95       	ret

00000f3a <analogReference>:
     f3a:	80 93 11 02 	sts	0x0211, r24
     f3e:	08 95       	ret

00000f40 <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
     f40:	8e 30       	cpi	r24, 0x0E	; 14
     f42:	08 f0       	brcs	.+2      	; 0xf46 <analogRead+0x6>
     f44:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
     f46:	87 70       	andi	r24, 0x07	; 7
     f48:	90 91 11 02 	lds	r25, 0x0211
     f4c:	92 95       	swap	r25
     f4e:	99 0f       	add	r25, r25
     f50:	99 0f       	add	r25, r25
     f52:	90 7c       	andi	r25, 0xC0	; 192
     f54:	98 2b       	or	r25, r24
     f56:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
     f5a:	80 91 7a 00 	lds	r24, 0x007A
     f5e:	80 64       	ori	r24, 0x40	; 64
     f60:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
     f64:	80 91 7a 00 	lds	r24, 0x007A
     f68:	86 fd       	sbrc	r24, 6
     f6a:	fc cf       	rjmp	.-8      	; 0xf64 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
     f6c:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
     f70:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
     f74:	93 2f       	mov	r25, r19
     f76:	80 e0       	ldi	r24, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	28 2b       	or	r18, r24
     f7c:	39 2b       	or	r19, r25
}
     f7e:	c9 01       	movw	r24, r18
     f80:	08 95       	ret

00000f82 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
     f82:	1f 93       	push	r17
     f84:	cf 93       	push	r28
     f86:	df 93       	push	r29
     f88:	18 2f       	mov	r17, r24
     f8a:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
     f8c:	61 e0       	ldi	r22, 0x01	; 1
     f8e:	0e 94 36 09 	call	0x126c	; 0x126c <pinMode>
	if (val == 0)
     f92:	20 97       	sbiw	r28, 0x00	; 0
     f94:	09 f4       	brne	.+2      	; 0xf98 <analogWrite+0x16>
     f96:	4a c0       	rjmp	.+148    	; 0x102c <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
     f98:	cf 3f       	cpi	r28, 0xFF	; 255
     f9a:	d1 05       	cpc	r29, r1
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <analogWrite+0x1e>
     f9e:	49 c0       	rjmp	.+146    	; 0x1032 <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
     fa0:	e1 2f       	mov	r30, r17
     fa2:	f0 e0       	ldi	r31, 0x00	; 0
     fa4:	e2 55       	subi	r30, 0x52	; 82
     fa6:	ff 4f       	sbci	r31, 0xFF	; 255
     fa8:	e4 91       	lpm	r30, Z+
     faa:	e3 30       	cpi	r30, 0x03	; 3
     fac:	c1 f0       	breq	.+48     	; 0xfde <analogWrite+0x5c>
     fae:	e4 30       	cpi	r30, 0x04	; 4
     fb0:	28 f4       	brcc	.+10     	; 0xfbc <analogWrite+0x3a>
     fb2:	e1 30       	cpi	r30, 0x01	; 1
     fb4:	51 f0       	breq	.+20     	; 0xfca <analogWrite+0x48>
     fb6:	e2 30       	cpi	r30, 0x02	; 2
     fb8:	b1 f5       	brne	.+108    	; 0x1026 <analogWrite+0xa4>
     fba:	0c c0       	rjmp	.+24     	; 0xfd4 <analogWrite+0x52>
     fbc:	e6 30       	cpi	r30, 0x06	; 6
     fbe:	19 f1       	breq	.+70     	; 0x1006 <analogWrite+0x84>
     fc0:	e7 30       	cpi	r30, 0x07	; 7
     fc2:	49 f1       	breq	.+82     	; 0x1016 <analogWrite+0x94>
     fc4:	e4 30       	cpi	r30, 0x04	; 4
     fc6:	79 f5       	brne	.+94     	; 0x1026 <analogWrite+0xa4>
     fc8:	14 c0       	rjmp	.+40     	; 0xff2 <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
     fca:	84 b5       	in	r24, 0x24	; 36
     fcc:	80 68       	ori	r24, 0x80	; 128
     fce:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
     fd0:	c7 bd       	out	0x27, r28	; 39
				break;
     fd2:	33 c0       	rjmp	.+102    	; 0x103a <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
     fd4:	84 b5       	in	r24, 0x24	; 36
     fd6:	80 62       	ori	r24, 0x20	; 32
     fd8:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
     fda:	c8 bd       	out	0x28, r28	; 40
				break;
     fdc:	2e c0       	rjmp	.+92     	; 0x103a <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
     fde:	80 91 80 00 	lds	r24, 0x0080
     fe2:	80 68       	ori	r24, 0x80	; 128
     fe4:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
     fe8:	d0 93 89 00 	sts	0x0089, r29
     fec:	c0 93 88 00 	sts	0x0088, r28
				break;
     ff0:	24 c0       	rjmp	.+72     	; 0x103a <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
     ff2:	80 91 80 00 	lds	r24, 0x0080
     ff6:	80 62       	ori	r24, 0x20	; 32
     ff8:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
     ffc:	d0 93 8b 00 	sts	0x008B, r29
    1000:	c0 93 8a 00 	sts	0x008A, r28
				break;
    1004:	1a c0       	rjmp	.+52     	; 0x103a <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    1006:	80 91 b0 00 	lds	r24, 0x00B0
    100a:	80 68       	ori	r24, 0x80	; 128
    100c:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    1010:	c0 93 b3 00 	sts	0x00B3, r28
				break;
    1014:	12 c0       	rjmp	.+36     	; 0x103a <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    1016:	80 91 b0 00 	lds	r24, 0x00B0
    101a:	80 62       	ori	r24, 0x20	; 32
    101c:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    1020:	c0 93 b4 00 	sts	0x00B4, r28
				break;
    1024:	0a c0       	rjmp	.+20     	; 0x103a <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    1026:	c0 38       	cpi	r28, 0x80	; 128
    1028:	d1 05       	cpc	r29, r1
    102a:	1c f4       	brge	.+6      	; 0x1032 <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    102c:	81 2f       	mov	r24, r17
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	02 c0       	rjmp	.+4      	; 0x1036 <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    1032:	81 2f       	mov	r24, r17
    1034:	61 e0       	ldi	r22, 0x01	; 1
    1036:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <digitalWrite>
				}
		}
	}
}
    103a:	df 91       	pop	r29
    103c:	cf 91       	pop	r28
    103e:	1f 91       	pop	r17
    1040:	08 95       	ret

00001042 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
    104c:	2f 93       	push	r18
    104e:	3f 93       	push	r19
    1050:	8f 93       	push	r24
    1052:	9f 93       	push	r25
    1054:	af 93       	push	r26
    1056:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    1058:	80 91 3e 02 	lds	r24, 0x023E
    105c:	90 91 3f 02 	lds	r25, 0x023F
    1060:	a0 91 40 02 	lds	r26, 0x0240
    1064:	b0 91 41 02 	lds	r27, 0x0241
	unsigned char f = timer0_fract;
    1068:	30 91 42 02 	lds	r19, 0x0242

	m += MILLIS_INC;
    106c:	01 96       	adiw	r24, 0x01	; 1
    106e:	a1 1d       	adc	r26, r1
    1070:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    1072:	23 2f       	mov	r18, r19
    1074:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    1076:	2d 37       	cpi	r18, 0x7D	; 125
    1078:	20 f0       	brcs	.+8      	; 0x1082 <__vector_16+0x40>
		f -= FRACT_MAX;
    107a:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	a1 1d       	adc	r26, r1
    1080:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    1082:	20 93 42 02 	sts	0x0242, r18
	timer0_millis = m;
    1086:	80 93 3e 02 	sts	0x023E, r24
    108a:	90 93 3f 02 	sts	0x023F, r25
    108e:	a0 93 40 02 	sts	0x0240, r26
    1092:	b0 93 41 02 	sts	0x0241, r27
	timer0_overflow_count++;
    1096:	80 91 3a 02 	lds	r24, 0x023A
    109a:	90 91 3b 02 	lds	r25, 0x023B
    109e:	a0 91 3c 02 	lds	r26, 0x023C
    10a2:	b0 91 3d 02 	lds	r27, 0x023D
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	a1 1d       	adc	r26, r1
    10aa:	b1 1d       	adc	r27, r1
    10ac:	80 93 3a 02 	sts	0x023A, r24
    10b0:	90 93 3b 02 	sts	0x023B, r25
    10b4:	a0 93 3c 02 	sts	0x023C, r26
    10b8:	b0 93 3d 02 	sts	0x023D, r27
}
    10bc:	bf 91       	pop	r27
    10be:	af 91       	pop	r26
    10c0:	9f 91       	pop	r25
    10c2:	8f 91       	pop	r24
    10c4:	3f 91       	pop	r19
    10c6:	2f 91       	pop	r18
    10c8:	0f 90       	pop	r0
    10ca:	0f be       	out	0x3f, r0	; 63
    10cc:	0f 90       	pop	r0
    10ce:	1f 90       	pop	r1
    10d0:	18 95       	reti

000010d2 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    10d2:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    10d4:	f8 94       	cli
	m = timer0_millis;
    10d6:	20 91 3e 02 	lds	r18, 0x023E
    10da:	30 91 3f 02 	lds	r19, 0x023F
    10de:	40 91 40 02 	lds	r20, 0x0240
    10e2:	50 91 41 02 	lds	r21, 0x0241
	SREG = oldSREG;
    10e6:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    10e8:	b9 01       	movw	r22, r18
    10ea:	ca 01       	movw	r24, r20
    10ec:	08 95       	ret

000010ee <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    10ee:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    10f0:	f8 94       	cli
	m = timer0_overflow_count;
    10f2:	20 91 3a 02 	lds	r18, 0x023A
    10f6:	30 91 3b 02 	lds	r19, 0x023B
    10fa:	40 91 3c 02 	lds	r20, 0x023C
    10fe:	50 91 3d 02 	lds	r21, 0x023D
#if defined(TCNT0)
	t = TCNT0;
    1102:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    1104:	a8 9b       	sbis	0x15, 0	; 21
    1106:	06 c0       	rjmp	.+12     	; 0x1114 <micros+0x26>
    1108:	8f 3f       	cpi	r24, 0xFF	; 255
    110a:	21 f0       	breq	.+8      	; 0x1114 <micros+0x26>
		m++;
    110c:	2f 5f       	subi	r18, 0xFF	; 255
    110e:	3f 4f       	sbci	r19, 0xFF	; 255
    1110:	4f 4f       	sbci	r20, 0xFF	; 255
    1112:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    1114:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    1116:	54 2f       	mov	r21, r20
    1118:	43 2f       	mov	r20, r19
    111a:	32 2f       	mov	r19, r18
    111c:	22 27       	eor	r18, r18
    111e:	28 0f       	add	r18, r24
    1120:	31 1d       	adc	r19, r1
    1122:	41 1d       	adc	r20, r1
    1124:	51 1d       	adc	r21, r1
    1126:	82 e0       	ldi	r24, 0x02	; 2
    1128:	22 0f       	add	r18, r18
    112a:	33 1f       	adc	r19, r19
    112c:	44 1f       	adc	r20, r20
    112e:	55 1f       	adc	r21, r21
    1130:	8a 95       	dec	r24
    1132:	d1 f7       	brne	.-12     	; 0x1128 <micros+0x3a>
}
    1134:	b9 01       	movw	r22, r18
    1136:	ca 01       	movw	r24, r20
    1138:	08 95       	ret

0000113a <delay>:

void delay(unsigned long ms)
{
    113a:	ef 92       	push	r14
    113c:	ff 92       	push	r15
    113e:	0f 93       	push	r16
    1140:	1f 93       	push	r17
    1142:	cf 93       	push	r28
    1144:	df 93       	push	r29
    1146:	7b 01       	movw	r14, r22
    1148:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    114a:	0e 94 77 08 	call	0x10ee	; 0x10ee <micros>
    114e:	eb 01       	movw	r28, r22

	while (ms > 0) {
    1150:	0f c0       	rjmp	.+30     	; 0x1170 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
    1152:	0e 94 77 08 	call	0x10ee	; 0x10ee <micros>
    1156:	6c 1b       	sub	r22, r28
    1158:	7d 0b       	sbc	r23, r29
    115a:	83 e0       	ldi	r24, 0x03	; 3
    115c:	68 3e       	cpi	r22, 0xE8	; 232
    115e:	78 07       	cpc	r23, r24
    1160:	38 f0       	brcs	.+14     	; 0x1170 <delay+0x36>
			ms--;
    1162:	08 94       	sec
    1164:	e1 08       	sbc	r14, r1
    1166:	f1 08       	sbc	r15, r1
    1168:	01 09       	sbc	r16, r1
    116a:	11 09       	sbc	r17, r1
			start += 1000;
    116c:	c8 51       	subi	r28, 0x18	; 24
    116e:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    1170:	e1 14       	cp	r14, r1
    1172:	f1 04       	cpc	r15, r1
    1174:	01 05       	cpc	r16, r1
    1176:	11 05       	cpc	r17, r1
    1178:	61 f7       	brne	.-40     	; 0x1152 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	1f 91       	pop	r17
    1180:	0f 91       	pop	r16
    1182:	ff 90       	pop	r15
    1184:	ef 90       	pop	r14
    1186:	08 95       	ret

00001188 <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    1188:	01 97       	sbiw	r24, 0x01	; 1
    118a:	39 f0       	breq	.+14     	; 0x119a <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    118c:	88 0f       	add	r24, r24
    118e:	99 1f       	adc	r25, r25
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    1194:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	f1 f7       	brne	.-4      	; 0x1196 <delayMicroseconds+0xe>
    119a:	08 95       	ret

0000119c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    119c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    119e:	84 b5       	in	r24, 0x24	; 36
    11a0:	82 60       	ori	r24, 0x02	; 2
    11a2:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    11a4:	84 b5       	in	r24, 0x24	; 36
    11a6:	81 60       	ori	r24, 0x01	; 1
    11a8:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    11aa:	85 b5       	in	r24, 0x25	; 37
    11ac:	82 60       	ori	r24, 0x02	; 2
    11ae:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    11b0:	85 b5       	in	r24, 0x25	; 37
    11b2:	81 60       	ori	r24, 0x01	; 1
    11b4:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    11b6:	ee e6       	ldi	r30, 0x6E	; 110
    11b8:	f0 e0       	ldi	r31, 0x00	; 0
    11ba:	80 81       	ld	r24, Z
    11bc:	81 60       	ori	r24, 0x01	; 1
    11be:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    11c0:	e1 e8       	ldi	r30, 0x81	; 129
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    11c6:	80 81       	ld	r24, Z
    11c8:	82 60       	ori	r24, 0x02	; 2
    11ca:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    11cc:	80 81       	ld	r24, Z
    11ce:	81 60       	ori	r24, 0x01	; 1
    11d0:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    11d2:	e0 e8       	ldi	r30, 0x80	; 128
    11d4:	f0 e0       	ldi	r31, 0x00	; 0
    11d6:	80 81       	ld	r24, Z
    11d8:	81 60       	ori	r24, 0x01	; 1
    11da:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    11dc:	e1 eb       	ldi	r30, 0xB1	; 177
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	84 60       	ori	r24, 0x04	; 4
    11e4:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    11e6:	e0 eb       	ldi	r30, 0xB0	; 176
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	81 60       	ori	r24, 0x01	; 1
    11ee:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    11f0:	ea e7       	ldi	r30, 0x7A	; 122
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	80 81       	ld	r24, Z
    11f6:	84 60       	ori	r24, 0x04	; 4
    11f8:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    11fa:	80 81       	ld	r24, Z
    11fc:	82 60       	ori	r24, 0x02	; 2
    11fe:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    1200:	80 81       	ld	r24, Z
    1202:	81 60       	ori	r24, 0x01	; 1
    1204:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    1206:	80 81       	ld	r24, Z
    1208:	80 68       	ori	r24, 0x80	; 128
    120a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    120c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1210:	08 95       	ret

00001212 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    1212:	83 30       	cpi	r24, 0x03	; 3
    1214:	71 f0       	breq	.+28     	; 0x1232 <turnOffPWM+0x20>
    1216:	84 30       	cpi	r24, 0x04	; 4
    1218:	28 f4       	brcc	.+10     	; 0x1224 <turnOffPWM+0x12>
    121a:	81 30       	cpi	r24, 0x01	; 1
    121c:	a1 f0       	breq	.+40     	; 0x1246 <turnOffPWM+0x34>
    121e:	82 30       	cpi	r24, 0x02	; 2
    1220:	21 f5       	brne	.+72     	; 0x126a <turnOffPWM+0x58>
    1222:	14 c0       	rjmp	.+40     	; 0x124c <turnOffPWM+0x3a>
    1224:	86 30       	cpi	r24, 0x06	; 6
    1226:	b1 f0       	breq	.+44     	; 0x1254 <turnOffPWM+0x42>
    1228:	87 30       	cpi	r24, 0x07	; 7
    122a:	d1 f0       	breq	.+52     	; 0x1260 <turnOffPWM+0x4e>
    122c:	84 30       	cpi	r24, 0x04	; 4
    122e:	e9 f4       	brne	.+58     	; 0x126a <turnOffPWM+0x58>
    1230:	04 c0       	rjmp	.+8      	; 0x123a <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    1232:	80 91 80 00 	lds	r24, 0x0080
    1236:	8f 77       	andi	r24, 0x7F	; 127
    1238:	03 c0       	rjmp	.+6      	; 0x1240 <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    123a:	80 91 80 00 	lds	r24, 0x0080
    123e:	8f 7d       	andi	r24, 0xDF	; 223
    1240:	80 93 80 00 	sts	0x0080, r24
    1244:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    1246:	84 b5       	in	r24, 0x24	; 36
    1248:	8f 77       	andi	r24, 0x7F	; 127
    124a:	02 c0       	rjmp	.+4      	; 0x1250 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    124c:	84 b5       	in	r24, 0x24	; 36
    124e:	8f 7d       	andi	r24, 0xDF	; 223
    1250:	84 bd       	out	0x24, r24	; 36
    1252:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    1254:	80 91 b0 00 	lds	r24, 0x00B0
    1258:	8f 77       	andi	r24, 0x7F	; 127
    125a:	80 93 b0 00 	sts	0x00B0, r24
    125e:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1260:	80 91 b0 00 	lds	r24, 0x00B0
    1264:	8f 7d       	andi	r24, 0xDF	; 223
    1266:	80 93 b0 00 	sts	0x00B0, r24
    126a:	08 95       	ret

0000126c <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	fc 01       	movw	r30, r24
    1270:	e6 56       	subi	r30, 0x66	; 102
    1272:	ff 4f       	sbci	r31, 0xFF	; 255
    1274:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    1276:	fc 01       	movw	r30, r24
    1278:	ea 57       	subi	r30, 0x7A	; 122
    127a:	ff 4f       	sbci	r31, 0xFF	; 255
    127c:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    127e:	ee 23       	and	r30, r30
    1280:	c1 f0       	breq	.+48     	; 0x12b2 <pinMode+0x46>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	ee 0f       	add	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	e8 59       	subi	r30, 0x98	; 152
    128a:	ff 4f       	sbci	r31, 0xFF	; 255
    128c:	85 91       	lpm	r24, Z+
    128e:	94 91       	lpm	r25, Z+
    1290:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
    1292:	66 23       	and	r22, r22
    1294:	41 f4       	brne	.+16     	; 0x12a6 <pinMode+0x3a>
		uint8_t oldSREG = SREG;
    1296:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1298:	f8 94       	cli
		*reg &= ~bit;
    129a:	8c 91       	ld	r24, X
    129c:	20 95       	com	r18
    129e:	82 23       	and	r24, r18
    12a0:	8c 93       	st	X, r24
		SREG = oldSREG;
    12a2:	9f bf       	out	0x3f, r25	; 63
    12a4:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    12a6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    12a8:	f8 94       	cli
		*reg |= bit;
    12aa:	8c 91       	ld	r24, X
    12ac:	82 2b       	or	r24, r18
    12ae:	8c 93       	st	X, r24
		SREG = oldSREG;
    12b0:	9f bf       	out	0x3f, r25	; 63
    12b2:	08 95       	ret

000012b4 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    12b4:	0f 93       	push	r16
    12b6:	1f 93       	push	r17
    12b8:	df 93       	push	r29
    12ba:	cf 93       	push	r28
    12bc:	0f 92       	push	r0
    12be:	cd b7       	in	r28, 0x3d	; 61
    12c0:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    12c2:	28 2f       	mov	r18, r24
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	f9 01       	movw	r30, r18
    12c8:	e2 55       	subi	r30, 0x52	; 82
    12ca:	ff 4f       	sbci	r31, 0xFF	; 255
    12cc:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    12ce:	f9 01       	movw	r30, r18
    12d0:	e6 56       	subi	r30, 0x66	; 102
    12d2:	ff 4f       	sbci	r31, 0xFF	; 255
    12d4:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    12d6:	2a 57       	subi	r18, 0x7A	; 122
    12d8:	3f 4f       	sbci	r19, 0xFF	; 255
    12da:	f9 01       	movw	r30, r18
    12dc:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    12de:	00 23       	and	r16, r16
    12e0:	d9 f0       	breq	.+54     	; 0x1318 <digitalWrite+0x64>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    12e2:	88 23       	and	r24, r24
    12e4:	21 f0       	breq	.+8      	; 0x12ee <digitalWrite+0x3a>
    12e6:	69 83       	std	Y+1, r22	; 0x01
    12e8:	0e 94 09 09 	call	0x1212	; 0x1212 <turnOffPWM>
    12ec:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    12ee:	e0 2f       	mov	r30, r16
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	ee 0f       	add	r30, r30
    12f4:	ff 1f       	adc	r31, r31
    12f6:	ee 58       	subi	r30, 0x8E	; 142
    12f8:	ff 4f       	sbci	r31, 0xFF	; 255
    12fa:	85 91       	lpm	r24, Z+
    12fc:	94 91       	lpm	r25, Z+
    12fe:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    1300:	9f b7       	in	r25, 0x3f	; 63
	cli();
    1302:	f8 94       	cli

	if (val == LOW) {
    1304:	66 23       	and	r22, r22
    1306:	21 f4       	brne	.+8      	; 0x1310 <digitalWrite+0x5c>
		*out &= ~bit;
    1308:	8c 91       	ld	r24, X
    130a:	10 95       	com	r17
    130c:	81 23       	and	r24, r17
    130e:	02 c0       	rjmp	.+4      	; 0x1314 <digitalWrite+0x60>
	} else {
		*out |= bit;
    1310:	8c 91       	ld	r24, X
    1312:	81 2b       	or	r24, r17
    1314:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    1316:	9f bf       	out	0x3f, r25	; 63
}
    1318:	0f 90       	pop	r0
    131a:	cf 91       	pop	r28
    131c:	df 91       	pop	r29
    131e:	1f 91       	pop	r17
    1320:	0f 91       	pop	r16
    1322:	08 95       	ret

00001324 <digitalRead>:

int digitalRead(uint8_t pin)
{
    1324:	0f 93       	push	r16
    1326:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    1328:	28 2f       	mov	r18, r24
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	f9 01       	movw	r30, r18
    132e:	e2 55       	subi	r30, 0x52	; 82
    1330:	ff 4f       	sbci	r31, 0xFF	; 255
    1332:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    1334:	f9 01       	movw	r30, r18
    1336:	e6 56       	subi	r30, 0x66	; 102
    1338:	ff 4f       	sbci	r31, 0xFF	; 255
    133a:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    133c:	2a 57       	subi	r18, 0x7A	; 122
    133e:	3f 4f       	sbci	r19, 0xFF	; 255
    1340:	f9 01       	movw	r30, r18
    1342:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    1344:	11 23       	and	r17, r17
    1346:	91 f0       	breq	.+36     	; 0x136c <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    1348:	88 23       	and	r24, r24
    134a:	11 f0       	breq	.+4      	; 0x1350 <digitalRead+0x2c>
    134c:	0e 94 09 09 	call	0x1212	; 0x1212 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    1350:	e1 2f       	mov	r30, r17
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	ee 0f       	add	r30, r30
    1356:	ff 1f       	adc	r31, r31
    1358:	e4 58       	subi	r30, 0x84	; 132
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	85 91       	lpm	r24, Z+
    135e:	94 91       	lpm	r25, Z+
    1360:	dc 01       	movw	r26, r24
    1362:	8c 91       	ld	r24, X
    1364:	80 23       	and	r24, r16
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    1366:	21 e0       	ldi	r18, 0x01	; 1
    1368:	30 e0       	ldi	r19, 0x00	; 0
    136a:	11 f4       	brne	.+4      	; 0x1370 <digitalRead+0x4c>
    136c:	20 e0       	ldi	r18, 0x00	; 0
    136e:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    1370:	c9 01       	movw	r24, r18
    1372:	1f 91       	pop	r17
    1374:	0f 91       	pop	r16
    1376:	08 95       	ret

00001378 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    1378:	cf 92       	push	r12
    137a:	df 92       	push	r13
    137c:	ef 92       	push	r14
    137e:	ff 92       	push	r15
    1380:	0f 93       	push	r16
    1382:	1f 93       	push	r17
    1384:	cf 93       	push	r28
    1386:	df 93       	push	r29
    1388:	6c 01       	movw	r12, r24
    138a:	7b 01       	movw	r14, r22
    138c:	8a 01       	movw	r16, r20
  size_t n = 0;
    138e:	c0 e0       	ldi	r28, 0x00	; 0
    1390:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    1392:	0f c0       	rjmp	.+30     	; 0x13b2 <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
    1394:	d7 01       	movw	r26, r14
    1396:	6d 91       	ld	r22, X+
    1398:	7d 01       	movw	r14, r26
    139a:	d6 01       	movw	r26, r12
    139c:	ed 91       	ld	r30, X+
    139e:	fc 91       	ld	r31, X
    13a0:	01 90       	ld	r0, Z+
    13a2:	f0 81       	ld	r31, Z
    13a4:	e0 2d       	mov	r30, r0
    13a6:	c6 01       	movw	r24, r12
    13a8:	09 95       	icall
    13aa:	c8 0f       	add	r28, r24
    13ac:	d9 1f       	adc	r29, r25
    13ae:	01 50       	subi	r16, 0x01	; 1
    13b0:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    13b2:	01 15       	cp	r16, r1
    13b4:	11 05       	cpc	r17, r1
    13b6:	71 f7       	brne	.-36     	; 0x1394 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    13b8:	ce 01       	movw	r24, r28
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	08 95       	ret

000013cc <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    13cc:	db 01       	movw	r26, r22
    13ce:	0d 90       	ld	r0, X+
    13d0:	00 20       	and	r0, r0
    13d2:	e9 f7       	brne	.-6      	; 0x13ce <_ZN5Print5writeEPKc+0x2>
    13d4:	ad 01       	movw	r20, r26
    13d6:	41 50       	subi	r20, 0x01	; 1
    13d8:	50 40       	sbci	r21, 0x00	; 0
    13da:	46 1b       	sub	r20, r22
    13dc:	57 0b       	sbc	r21, r23
    13de:	dc 01       	movw	r26, r24
    13e0:	ed 91       	ld	r30, X+
    13e2:	fc 91       	ld	r31, X
    13e4:	02 80       	ldd	r0, Z+2	; 0x02
    13e6:	f3 81       	ldd	r31, Z+3	; 0x03
    13e8:	e0 2d       	mov	r30, r0
    13ea:	09 95       	icall
    13ec:	08 95       	ret

000013ee <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    13ee:	ef 92       	push	r14
    13f0:	ff 92       	push	r15
    13f2:	0f 93       	push	r16
    13f4:	1f 93       	push	r17
    13f6:	cf 93       	push	r28
    13f8:	df 93       	push	r29
    13fa:	7c 01       	movw	r14, r24
  const prog_char *p = (const prog_char *)ifsh;
    13fc:	06 2f       	mov	r16, r22
    13fe:	17 2f       	mov	r17, r23
  size_t n = 0;
    1400:	c0 e0       	ldi	r28, 0x00	; 0
    1402:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
    1404:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    1406:	0f 5f       	subi	r16, 0xFF	; 255
    1408:	1f 4f       	sbci	r17, 0xFF	; 255
    140a:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    140c:	66 23       	and	r22, r22
    140e:	51 f0       	breq	.+20     	; 0x1424 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    1410:	f7 01       	movw	r30, r14
    1412:	a0 81       	ld	r26, Z
    1414:	b1 81       	ldd	r27, Z+1	; 0x01
    1416:	ed 91       	ld	r30, X+
    1418:	fc 91       	ld	r31, X
    141a:	c7 01       	movw	r24, r14
    141c:	09 95       	icall
    141e:	c8 0f       	add	r28, r24
    1420:	d9 1f       	adc	r29, r25

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
  size_t n = 0;
  while (1) {
    1422:	f0 cf       	rjmp	.-32     	; 0x1404 <_ZN5Print5printEPK19__FlashStringHelper+0x16>
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    1424:	ce 01       	movw	r24, r28
    1426:	df 91       	pop	r29
    1428:	cf 91       	pop	r28
    142a:	1f 91       	pop	r17
    142c:	0f 91       	pop	r16
    142e:	ff 90       	pop	r15
    1430:	ef 90       	pop	r14
    1432:	08 95       	ret

00001434 <_ZN5Print5printERK6String>:

size_t Print::print(const String &s)
{
    1434:	af 92       	push	r10
    1436:	bf 92       	push	r11
    1438:	cf 92       	push	r12
    143a:	df 92       	push	r13
    143c:	ef 92       	push	r14
    143e:	ff 92       	push	r15
    1440:	0f 93       	push	r16
    1442:	1f 93       	push	r17
    1444:	cf 93       	push	r28
    1446:	df 93       	push	r29
    1448:	7c 01       	movw	r14, r24
    144a:	6b 01       	movw	r12, r22
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    144c:	c0 e0       	ldi	r28, 0x00	; 0
    144e:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    1450:	00 e0       	ldi	r16, 0x00	; 0
    1452:	10 e0       	ldi	r17, 0x00	; 0
  for (uint16_t i = 0; i < s.length(); i++) {
    1454:	10 c0       	rjmp	.+32     	; 0x1476 <_ZN5Print5printERK6String+0x42>
    n += write(s[i]);
    1456:	d7 01       	movw	r26, r14
    1458:	ed 91       	ld	r30, X+
    145a:	fc 91       	ld	r31, X
    145c:	a0 80       	ld	r10, Z
    145e:	b1 80       	ldd	r11, Z+1	; 0x01
    1460:	c6 01       	movw	r24, r12
    1462:	be 01       	movw	r22, r28
    1464:	0e 94 36 14 	call	0x286c	; 0x286c <_ZNK6StringixEj>
    1468:	68 2f       	mov	r22, r24
    146a:	c7 01       	movw	r24, r14
    146c:	f5 01       	movw	r30, r10
    146e:	09 95       	icall
    1470:	08 0f       	add	r16, r24
    1472:	19 1f       	adc	r17, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    1474:	21 96       	adiw	r28, 0x01	; 1
    1476:	f6 01       	movw	r30, r12
    1478:	84 81       	ldd	r24, Z+4	; 0x04
    147a:	95 81       	ldd	r25, Z+5	; 0x05
    147c:	c8 17       	cp	r28, r24
    147e:	d9 07       	cpc	r29, r25
    1480:	50 f3       	brcs	.-44     	; 0x1456 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    1482:	c8 01       	movw	r24, r16
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	ff 90       	pop	r15
    148e:	ef 90       	pop	r14
    1490:	df 90       	pop	r13
    1492:	cf 90       	pop	r12
    1494:	bf 90       	pop	r11
    1496:	af 90       	pop	r10
    1498:	08 95       	ret

0000149a <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
  return write(str);
    149a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN5Print5writeEPKc>
}
    149e:	08 95       	ret

000014a0 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    14a0:	dc 01       	movw	r26, r24
    14a2:	ed 91       	ld	r30, X+
    14a4:	fc 91       	ld	r31, X
    14a6:	01 90       	ld	r0, Z+
    14a8:	f0 81       	ld	r31, Z
    14aa:	e0 2d       	mov	r30, r0
    14ac:	09 95       	icall
}
    14ae:	08 95       	ret

000014b0 <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
{
    14b0:	9c 01       	movw	r18, r24
    14b2:	cb 01       	movw	r24, r22
  return x.printTo(*this);
    14b4:	db 01       	movw	r26, r22
    14b6:	ed 91       	ld	r30, X+
    14b8:	fc 91       	ld	r31, X
    14ba:	01 90       	ld	r0, Z+
    14bc:	f0 81       	ld	r31, Z
    14be:	e0 2d       	mov	r30, r0
    14c0:	b9 01       	movw	r22, r18
    14c2:	09 95       	icall
}
    14c4:	08 95       	ret

000014c6 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
    14c6:	0f 93       	push	r16
    14c8:	1f 93       	push	r17
    14ca:	cf 93       	push	r28
    14cc:	df 93       	push	r29
    14ce:	ec 01       	movw	r28, r24
  size_t n = print('\r');
    14d0:	6d e0       	ldi	r22, 0x0D	; 13
    14d2:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN5Print5printEc>
    14d6:	8c 01       	movw	r16, r24
  n += print('\n');
    14d8:	ce 01       	movw	r24, r28
    14da:	6a e0       	ldi	r22, 0x0A	; 10
    14dc:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN5Print5printEc>
    14e0:	08 0f       	add	r16, r24
    14e2:	19 1f       	adc	r17, r25
  return n;
}
    14e4:	c8 01       	movw	r24, r16
    14e6:	df 91       	pop	r29
    14e8:	cf 91       	pop	r28
    14ea:	1f 91       	pop	r17
    14ec:	0f 91       	pop	r16
    14ee:	08 95       	ret

000014f0 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    14f0:	0f 93       	push	r16
    14f2:	1f 93       	push	r17
    14f4:	cf 93       	push	r28
    14f6:	df 93       	push	r29
    14f8:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
    14fa:	0e 94 f7 09 	call	0x13ee	; 0x13ee <_ZN5Print5printEPK19__FlashStringHelper>
    14fe:	8c 01       	movw	r16, r24
  n += println();
    1500:	ce 01       	movw	r24, r28
    1502:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print7printlnEv>
    1506:	08 0f       	add	r16, r24
    1508:	19 1f       	adc	r17, r25
  return n;
}
    150a:	c8 01       	movw	r24, r16
    150c:	df 91       	pop	r29
    150e:	cf 91       	pop	r28
    1510:	1f 91       	pop	r17
    1512:	0f 91       	pop	r16
    1514:	08 95       	ret

00001516 <_ZN5Print7printlnERK6String>:
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
{
    1516:	0f 93       	push	r16
    1518:	1f 93       	push	r17
    151a:	cf 93       	push	r28
    151c:	df 93       	push	r29
    151e:	ec 01       	movw	r28, r24
  size_t n = print(s);
    1520:	0e 94 1a 0a 	call	0x1434	; 0x1434 <_ZN5Print5printERK6String>
    1524:	8c 01       	movw	r16, r24
  n += println();
    1526:	ce 01       	movw	r24, r28
    1528:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print7printlnEv>
    152c:	08 0f       	add	r16, r24
    152e:	19 1f       	adc	r17, r25
  return n;
}
    1530:	c8 01       	movw	r24, r16
    1532:	df 91       	pop	r29
    1534:	cf 91       	pop	r28
    1536:	1f 91       	pop	r17
    1538:	0f 91       	pop	r16
    153a:	08 95       	ret

0000153c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	ec 01       	movw	r28, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    1546:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN5Print5writeEPKc>
    154a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    154c:	ce 01       	movw	r24, r28
    154e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print7printlnEv>
    1552:	08 0f       	add	r16, r24
    1554:	19 1f       	adc	r17, r25
  return n;
}
    1556:	c8 01       	movw	r24, r16
    1558:	df 91       	pop	r29
    155a:	cf 91       	pop	r28
    155c:	1f 91       	pop	r17
    155e:	0f 91       	pop	r16
    1560:	08 95       	ret

00001562 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    1562:	0f 93       	push	r16
    1564:	1f 93       	push	r17
    1566:	cf 93       	push	r28
    1568:	df 93       	push	r29
    156a:	ec 01       	movw	r28, r24
  size_t n = print(c);
    156c:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN5Print5printEc>
    1570:	8c 01       	movw	r16, r24
  n += println();
    1572:	ce 01       	movw	r24, r28
    1574:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print7printlnEv>
    1578:	08 0f       	add	r16, r24
    157a:	19 1f       	adc	r17, r25
  return n;
}
    157c:	c8 01       	movw	r24, r16
    157e:	df 91       	pop	r29
    1580:	cf 91       	pop	r28
    1582:	1f 91       	pop	r17
    1584:	0f 91       	pop	r16
    1586:	08 95       	ret

00001588 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
{
    1588:	0f 93       	push	r16
    158a:	1f 93       	push	r17
    158c:	cf 93       	push	r28
    158e:	df 93       	push	r29
    1590:	ec 01       	movw	r28, r24
  size_t n = print(x);
    1592:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <_ZN5Print5printERK9Printable>
    1596:	8c 01       	movw	r16, r24
  n += println();
    1598:	ce 01       	movw	r24, r28
    159a:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print7printlnEv>
    159e:	08 0f       	add	r16, r24
    15a0:	19 1f       	adc	r17, r25
  return n;
}
    15a2:	c8 01       	movw	r24, r16
    15a4:	df 91       	pop	r29
    15a6:	cf 91       	pop	r28
    15a8:	1f 91       	pop	r17
    15aa:	0f 91       	pop	r16
    15ac:	08 95       	ret

000015ae <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    15ae:	8f 92       	push	r8
    15b0:	9f 92       	push	r9
    15b2:	af 92       	push	r10
    15b4:	bf 92       	push	r11
    15b6:	cf 92       	push	r12
    15b8:	df 92       	push	r13
    15ba:	ef 92       	push	r14
    15bc:	ff 92       	push	r15
    15be:	0f 93       	push	r16
    15c0:	1f 93       	push	r17
    15c2:	df 93       	push	r29
    15c4:	cf 93       	push	r28
    15c6:	cd b7       	in	r28, 0x3d	; 61
    15c8:	de b7       	in	r29, 0x3e	; 62
    15ca:	a1 97       	sbiw	r28, 0x21	; 33
    15cc:	0f b6       	in	r0, 0x3f	; 63
    15ce:	f8 94       	cli
    15d0:	de bf       	out	0x3e, r29	; 62
    15d2:	0f be       	out	0x3f, r0	; 63
    15d4:	cd bf       	out	0x3d, r28	; 61
    15d6:	6c 01       	movw	r12, r24
    15d8:	04 2f       	mov	r16, r20
    15da:	e5 2f       	mov	r30, r21
    15dc:	cb 01       	movw	r24, r22
    15de:	12 2f       	mov	r17, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    15e0:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    15e2:	22 30       	cpi	r18, 0x02	; 2
    15e4:	08 f4       	brcc	.+2      	; 0x15e8 <_ZN5Print11printNumberEmh+0x3a>
    15e6:	1a e0       	ldi	r17, 0x0A	; 10
    15e8:	21 e2       	ldi	r18, 0x21	; 33
    15ea:	e2 2e       	mov	r14, r18
    15ec:	f1 2c       	mov	r15, r1
    15ee:	ec 0e       	add	r14, r28
    15f0:	fd 1e       	adc	r15, r29

  do {
    unsigned long m = n;
    n /= base;
    15f2:	81 2e       	mov	r8, r17
    15f4:	99 24       	eor	r9, r9
    15f6:	aa 24       	eor	r10, r10
    15f8:	bb 24       	eor	r11, r11
    15fa:	03 c0       	rjmp	.+6      	; 0x1602 <_ZN5Print11printNumberEmh+0x54>
    15fc:	02 2f       	mov	r16, r18
    15fe:	e3 2f       	mov	r30, r19
    1600:	ca 01       	movw	r24, r20
    1602:	60 2f       	mov	r22, r16
    1604:	7e 2f       	mov	r23, r30
    1606:	a5 01       	movw	r20, r10
    1608:	94 01       	movw	r18, r8
    160a:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__udivmodsi4>
    char c = m - base * n;
    160e:	12 9f       	mul	r17, r18
    1610:	80 2d       	mov	r24, r0
    1612:	11 24       	eor	r1, r1
    1614:	08 1b       	sub	r16, r24
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    1616:	08 94       	sec
    1618:	e1 08       	sbc	r14, r1
    161a:	f1 08       	sbc	r15, r1
    161c:	0a 30       	cpi	r16, 0x0A	; 10
    161e:	14 f4       	brge	.+4      	; 0x1624 <_ZN5Print11printNumberEmh+0x76>
    1620:	00 5d       	subi	r16, 0xD0	; 208
    1622:	01 c0       	rjmp	.+2      	; 0x1626 <_ZN5Print11printNumberEmh+0x78>
    1624:	09 5c       	subi	r16, 0xC9	; 201
    1626:	f7 01       	movw	r30, r14
    1628:	00 83       	st	Z, r16
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    162a:	21 15       	cp	r18, r1
    162c:	31 05       	cpc	r19, r1
    162e:	41 05       	cpc	r20, r1
    1630:	51 05       	cpc	r21, r1
    1632:	21 f7       	brne	.-56     	; 0x15fc <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    1634:	c6 01       	movw	r24, r12
    1636:	b7 01       	movw	r22, r14
    1638:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN5Print5writeEPKc>
}
    163c:	a1 96       	adiw	r28, 0x21	; 33
    163e:	0f b6       	in	r0, 0x3f	; 63
    1640:	f8 94       	cli
    1642:	de bf       	out	0x3e, r29	; 62
    1644:	0f be       	out	0x3f, r0	; 63
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	1f 91       	pop	r17
    164e:	0f 91       	pop	r16
    1650:	ff 90       	pop	r15
    1652:	ef 90       	pop	r14
    1654:	df 90       	pop	r13
    1656:	cf 90       	pop	r12
    1658:	bf 90       	pop	r11
    165a:	af 90       	pop	r10
    165c:	9f 90       	pop	r9
    165e:	8f 90       	pop	r8
    1660:	08 95       	ret

00001662 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    1662:	21 15       	cp	r18, r1
    1664:	31 05       	cpc	r19, r1
    1666:	49 f4       	brne	.+18     	; 0x167a <_ZN5Print5printEmi+0x18>
    1668:	dc 01       	movw	r26, r24
    166a:	ed 91       	ld	r30, X+
    166c:	fc 91       	ld	r31, X
    166e:	01 90       	ld	r0, Z+
    1670:	f0 81       	ld	r31, Z
    1672:	e0 2d       	mov	r30, r0
    1674:	64 2f       	mov	r22, r20
    1676:	09 95       	icall
    1678:	08 95       	ret
  else return printNumber(n, base);
    167a:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN5Print11printNumberEmh>
}
    167e:	08 95       	ret

00001680 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    1680:	0f 93       	push	r16
    1682:	1f 93       	push	r17
    1684:	cf 93       	push	r28
    1686:	df 93       	push	r29
    1688:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    168a:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN5Print5printEmi>
    168e:	8c 01       	movw	r16, r24
  n += println();
    1690:	ce 01       	movw	r24, r28
    1692:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print7printlnEv>
    1696:	08 0f       	add	r16, r24
    1698:	19 1f       	adc	r17, r25
  return n;
}
    169a:	c8 01       	movw	r24, r16
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	08 95       	ret

000016a6 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    16a6:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    16a8:	ab 01       	movw	r20, r22
    16aa:	60 e0       	ldi	r22, 0x00	; 0
    16ac:	70 e0       	ldi	r23, 0x00	; 0
    16ae:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN5Print5printEmi>
}
    16b2:	08 95       	ret

000016b4 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    16b4:	0f 93       	push	r16
    16b6:	1f 93       	push	r17
    16b8:	cf 93       	push	r28
    16ba:	df 93       	push	r29
    16bc:	ec 01       	movw	r28, r24
    16be:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    16c0:	ab 01       	movw	r20, r22
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	70 e0       	ldi	r23, 0x00	; 0
    16c6:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN5Print5printEmi>
    16ca:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    16cc:	ce 01       	movw	r24, r28
    16ce:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print7printlnEv>
    16d2:	08 0f       	add	r16, r24
    16d4:	19 1f       	adc	r17, r25
  return n;
}
    16d6:	c8 01       	movw	r24, r16
    16d8:	df 91       	pop	r29
    16da:	cf 91       	pop	r28
    16dc:	1f 91       	pop	r17
    16de:	0f 91       	pop	r16
    16e0:	08 95       	ret

000016e2 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    16e2:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    16e4:	46 2f       	mov	r20, r22
    16e6:	50 e0       	ldi	r21, 0x00	; 0
    16e8:	60 e0       	ldi	r22, 0x00	; 0
    16ea:	70 e0       	ldi	r23, 0x00	; 0
    16ec:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN5Print5printEmi>
}
    16f0:	08 95       	ret

000016f2 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    16f2:	0f 93       	push	r16
    16f4:	1f 93       	push	r17
    16f6:	cf 93       	push	r28
    16f8:	df 93       	push	r29
    16fa:	ec 01       	movw	r28, r24
    16fc:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    16fe:	46 2f       	mov	r20, r22
    1700:	50 e0       	ldi	r21, 0x00	; 0
    1702:	60 e0       	ldi	r22, 0x00	; 0
    1704:	70 e0       	ldi	r23, 0x00	; 0
    1706:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN5Print5printEmi>
    170a:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    170c:	ce 01       	movw	r24, r28
    170e:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print7printlnEv>
    1712:	08 0f       	add	r16, r24
    1714:	19 1f       	adc	r17, r25
  return n;
}
    1716:	c8 01       	movw	r24, r16
    1718:	df 91       	pop	r29
    171a:	cf 91       	pop	r28
    171c:	1f 91       	pop	r17
    171e:	0f 91       	pop	r16
    1720:	08 95       	ret

00001722 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    1722:	cf 92       	push	r12
    1724:	df 92       	push	r13
    1726:	ef 92       	push	r14
    1728:	ff 92       	push	r15
    172a:	0f 93       	push	r16
    172c:	1f 93       	push	r17
    172e:	cf 93       	push	r28
    1730:	df 93       	push	r29
    1732:	ec 01       	movw	r28, r24
    1734:	7a 01       	movw	r14, r20
    1736:	8b 01       	movw	r16, r22
  if (base == 0) {
    1738:	21 15       	cp	r18, r1
    173a:	31 05       	cpc	r19, r1
    173c:	41 f4       	brne	.+16     	; 0x174e <_ZN5Print5printEli+0x2c>
    return write(n);
    173e:	e8 81       	ld	r30, Y
    1740:	f9 81       	ldd	r31, Y+1	; 0x01
    1742:	01 90       	ld	r0, Z+
    1744:	f0 81       	ld	r31, Z
    1746:	e0 2d       	mov	r30, r0
    1748:	64 2f       	mov	r22, r20
    174a:	09 95       	icall
    174c:	1a c0       	rjmp	.+52     	; 0x1782 <_ZN5Print5printEli+0x60>
  } else if (base == 10) {
    174e:	2a 30       	cpi	r18, 0x0A	; 10
    1750:	31 05       	cpc	r19, r1
    1752:	a9 f4       	brne	.+42     	; 0x177e <_ZN5Print5printEli+0x5c>
    if (n < 0) {
    1754:	77 ff       	sbrs	r23, 7
    1756:	12 c0       	rjmp	.+36     	; 0x177c <_ZN5Print5printEli+0x5a>
      int t = print('-');
    1758:	6d e2       	ldi	r22, 0x2D	; 45
    175a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN5Print5printEc>
    175e:	6c 01       	movw	r12, r24
      n = -n;
    1760:	44 27       	eor	r20, r20
    1762:	55 27       	eor	r21, r21
    1764:	ba 01       	movw	r22, r20
    1766:	4e 19       	sub	r20, r14
    1768:	5f 09       	sbc	r21, r15
    176a:	60 0b       	sbc	r22, r16
    176c:	71 0b       	sbc	r23, r17
      return printNumber(n, 10) + t;
    176e:	ce 01       	movw	r24, r28
    1770:	2a e0       	ldi	r18, 0x0A	; 10
    1772:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN5Print11printNumberEmh>
    1776:	c8 0e       	add	r12, r24
    1778:	d9 1e       	adc	r13, r25
    177a:	04 c0       	rjmp	.+8      	; 0x1784 <_ZN5Print5printEli+0x62>
    }
    return printNumber(n, 10);
    177c:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    177e:	0e 94 d7 0a 	call	0x15ae	; 0x15ae <_ZN5Print11printNumberEmh>
    1782:	6c 01       	movw	r12, r24
  }
}
    1784:	c6 01       	movw	r24, r12
    1786:	df 91       	pop	r29
    1788:	cf 91       	pop	r28
    178a:	1f 91       	pop	r17
    178c:	0f 91       	pop	r16
    178e:	ff 90       	pop	r15
    1790:	ef 90       	pop	r14
    1792:	df 90       	pop	r13
    1794:	cf 90       	pop	r12
    1796:	08 95       	ret

00001798 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    17a2:	0e 94 91 0b 	call	0x1722	; 0x1722 <_ZN5Print5printEli>
    17a6:	8c 01       	movw	r16, r24
  n += println();
    17a8:	ce 01       	movw	r24, r28
    17aa:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print7printlnEv>
    17ae:	08 0f       	add	r16, r24
    17b0:	19 1f       	adc	r17, r25
  return n;
}
    17b2:	c8 01       	movw	r24, r16
    17b4:	df 91       	pop	r29
    17b6:	cf 91       	pop	r28
    17b8:	1f 91       	pop	r17
    17ba:	0f 91       	pop	r16
    17bc:	08 95       	ret

000017be <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    17be:	9a 01       	movw	r18, r20
  return print((long) n, base);
    17c0:	fb 01       	movw	r30, r22
    17c2:	af 01       	movw	r20, r30
    17c4:	66 27       	eor	r22, r22
    17c6:	57 fd       	sbrc	r21, 7
    17c8:	60 95       	com	r22
    17ca:	76 2f       	mov	r23, r22
    17cc:	0e 94 91 0b 	call	0x1722	; 0x1722 <_ZN5Print5printEli>
}
    17d0:	08 95       	ret

000017d2 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    17d2:	0f 93       	push	r16
    17d4:	1f 93       	push	r17
    17d6:	cf 93       	push	r28
    17d8:	df 93       	push	r29
    17da:	ec 01       	movw	r28, r24
    17dc:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    17de:	cb 01       	movw	r24, r22
    17e0:	ac 01       	movw	r20, r24
    17e2:	66 27       	eor	r22, r22
    17e4:	57 fd       	sbrc	r21, 7
    17e6:	60 95       	com	r22
    17e8:	76 2f       	mov	r23, r22
    17ea:	ce 01       	movw	r24, r28
    17ec:	0e 94 91 0b 	call	0x1722	; 0x1722 <_ZN5Print5printEli>
    17f0:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    17f2:	ce 01       	movw	r24, r28
    17f4:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print7printlnEv>
    17f8:	08 0f       	add	r16, r24
    17fa:	19 1f       	adc	r17, r25
  return n;
}
    17fc:	c8 01       	movw	r24, r16
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	08 95       	ret

00001808 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    1808:	6f 92       	push	r6
    180a:	7f 92       	push	r7
    180c:	9f 92       	push	r9
    180e:	af 92       	push	r10
    1810:	bf 92       	push	r11
    1812:	cf 92       	push	r12
    1814:	df 92       	push	r13
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	3c 01       	movw	r6, r24
    1824:	7a 01       	movw	r14, r20
    1826:	8b 01       	movw	r16, r22
    1828:	c2 2e       	mov	r12, r18
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    182a:	cb 01       	movw	r24, r22
    182c:	ba 01       	movw	r22, r20
    182e:	20 e0       	ldi	r18, 0x00	; 0
    1830:	30 e0       	ldi	r19, 0x00	; 0
    1832:	a9 01       	movw	r20, r18
    1834:	0e 94 59 04 	call	0x8b2	; 0x8b2 <__ltsf2>
    1838:	87 ff       	sbrs	r24, 7
    183a:	0a c0       	rjmp	.+20     	; 0x1850 <_ZN5Print10printFloatEdh+0x48>
  {
     n += print('-');
    183c:	c3 01       	movw	r24, r6
    183e:	6d e2       	ldi	r22, 0x2D	; 45
    1840:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_ZN5Print5printEc>
    1844:	ec 01       	movw	r28, r24
     number = -number;
    1846:	17 fb       	bst	r17, 7
    1848:	10 95       	com	r17
    184a:	17 f9       	bld	r17, 7
    184c:	10 95       	com	r17
    184e:	02 c0       	rjmp	.+4      	; 0x1854 <_ZN5Print10printFloatEdh+0x4c>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    1850:	c0 e0       	ldi	r28, 0x00	; 0
    1852:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1854:	dd 24       	eor	r13, r13
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    1856:	50 e0       	ldi	r21, 0x00	; 0
    1858:	40 e0       	ldi	r20, 0x00	; 0
    185a:	30 e0       	ldi	r19, 0x00	; 0
    185c:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    185e:	11 c0       	rjmp	.+34     	; 0x1882 <_ZN5Print10printFloatEdh+0x7a>
    rounding /= 10.0;
    1860:	da 01       	movw	r26, r20
    1862:	f9 01       	movw	r30, r18
    1864:	6b 2f       	mov	r22, r27
    1866:	74 2f       	mov	r23, r20
    1868:	8f 2f       	mov	r24, r31
    186a:	92 2f       	mov	r25, r18
    186c:	20 e0       	ldi	r18, 0x00	; 0
    186e:	30 e0       	ldi	r19, 0x00	; 0
    1870:	40 e2       	ldi	r20, 0x20	; 32
    1872:	51 e4       	ldi	r21, 0x41	; 65
    1874:	0e 94 7b 03 	call	0x6f6	; 0x6f6 <__divsf3>
    1878:	56 2f       	mov	r21, r22
    187a:	47 2f       	mov	r20, r23
    187c:	38 2f       	mov	r19, r24
    187e:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    1880:	d3 94       	inc	r13
    1882:	dc 14       	cp	r13, r12
    1884:	68 f3       	brcs	.-38     	; 0x1860 <_ZN5Print10printFloatEdh+0x58>
    rounding /= 10.0;
  
  number += rounding;
    1886:	c8 01       	movw	r24, r16
    1888:	b7 01       	movw	r22, r14
    188a:	da 01       	movw	r26, r20
    188c:	f9 01       	movw	r30, r18
    188e:	2b 2f       	mov	r18, r27
    1890:	34 2f       	mov	r19, r20
    1892:	4f 2f       	mov	r20, r31
    1894:	5e 2f       	mov	r21, r30
    1896:	0e 94 23 02 	call	0x446	; 0x446 <__addsf3>
    189a:	5b 01       	movw	r10, r22
    189c:	f8 2e       	mov	r15, r24
    189e:	99 2e       	mov	r9, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    18a0:	7b 2d       	mov	r23, r11
    18a2:	0e 94 ad 00 	call	0x15a	; 0x15a <__fixunssfsi>
    18a6:	16 2f       	mov	r17, r22
    18a8:	d7 2e       	mov	r13, r23
    18aa:	e8 2e       	mov	r14, r24
    18ac:	09 2f       	mov	r16, r25
  double remainder = number - (double)int_part;
    18ae:	0e 94 3b 05 	call	0xa76	; 0xa76 <__floatunsisf>
    18b2:	9b 01       	movw	r18, r22
    18b4:	ac 01       	movw	r20, r24
    18b6:	6a 2d       	mov	r22, r10
    18b8:	7b 2d       	mov	r23, r11
    18ba:	8f 2d       	mov	r24, r15
    18bc:	99 2d       	mov	r25, r9
    18be:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__subsf3>
    18c2:	96 2e       	mov	r9, r22
    18c4:	a7 2e       	mov	r10, r23
    18c6:	b8 2e       	mov	r11, r24
    18c8:	f9 2e       	mov	r15, r25
  n += print(int_part);
    18ca:	c3 01       	movw	r24, r6
    18cc:	41 2f       	mov	r20, r17
    18ce:	5d 2d       	mov	r21, r13
    18d0:	6e 2d       	mov	r22, r14
    18d2:	70 2f       	mov	r23, r16
    18d4:	2a e0       	ldi	r18, 0x0A	; 10
    18d6:	30 e0       	ldi	r19, 0x00	; 0
    18d8:	0e 94 31 0b 	call	0x1662	; 0x1662 <_ZN5Print5printEmi>
    18dc:	c8 0f       	add	r28, r24
    18de:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    18e0:	cc 20       	and	r12, r12
    18e2:	b9 f1       	breq	.+110    	; 0x1952 <_ZN5Print10printFloatEdh+0x14a>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    18e4:	c3 01       	movw	r24, r6
    18e6:	60 e0       	ldi	r22, 0x00	; 0
    18e8:	71 e0       	ldi	r23, 0x01	; 1
    18ea:	0e 94 e6 09 	call	0x13cc	; 0x13cc <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    18ee:	c8 0f       	add	r28, r24
    18f0:	d9 1f       	adc	r29, r25
    18f2:	2f c0       	rjmp	.+94     	; 0x1952 <_ZN5Print10printFloatEdh+0x14a>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    18f4:	69 2d       	mov	r22, r9
    18f6:	7a 2d       	mov	r23, r10
    18f8:	8b 2d       	mov	r24, r11
    18fa:	9f 2d       	mov	r25, r15
    18fc:	20 e0       	ldi	r18, 0x00	; 0
    18fe:	30 e0       	ldi	r19, 0x00	; 0
    1900:	40 e2       	ldi	r20, 0x20	; 32
    1902:	51 e4       	ldi	r21, 0x41	; 65
    1904:	0e 94 81 02 	call	0x502	; 0x502 <__mulsf3>
    1908:	d6 2e       	mov	r13, r22
    190a:	b7 2e       	mov	r11, r23
    190c:	a8 2e       	mov	r10, r24
    190e:	99 2e       	mov	r9, r25
    int toPrint = int(remainder);
    1910:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    1914:	7b 01       	movw	r14, r22
    1916:	00 27       	eor	r16, r16
    1918:	f7 fc       	sbrc	r15, 7
    191a:	00 95       	com	r16
    191c:	10 2f       	mov	r17, r16
    191e:	c3 01       	movw	r24, r6
    1920:	b8 01       	movw	r22, r16
    1922:	a7 01       	movw	r20, r14
    1924:	2a e0       	ldi	r18, 0x0A	; 10
    1926:	30 e0       	ldi	r19, 0x00	; 0
    1928:	0e 94 91 0b 	call	0x1722	; 0x1722 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    192c:	c8 0f       	add	r28, r24
    192e:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    1930:	c8 01       	movw	r24, r16
    1932:	b7 01       	movw	r22, r14
    1934:	0e 94 89 04 	call	0x912	; 0x912 <__floatsisf>
    1938:	9b 01       	movw	r18, r22
    193a:	ac 01       	movw	r20, r24
    193c:	6d 2d       	mov	r22, r13
    193e:	7b 2d       	mov	r23, r11
    1940:	8a 2d       	mov	r24, r10
    1942:	99 2d       	mov	r25, r9
    1944:	0e 94 50 02 	call	0x4a0	; 0x4a0 <__subsf3>
    1948:	96 2e       	mov	r9, r22
    194a:	a7 2e       	mov	r10, r23
    194c:	b8 2e       	mov	r11, r24
    194e:	f9 2e       	mov	r15, r25
    1950:	ca 94       	dec	r12
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    1952:	cc 20       	and	r12, r12
    1954:	79 f6       	brne	.-98     	; 0x18f4 <_ZN5Print10printFloatEdh+0xec>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    1956:	ce 01       	movw	r24, r28
    1958:	df 91       	pop	r29
    195a:	cf 91       	pop	r28
    195c:	1f 91       	pop	r17
    195e:	0f 91       	pop	r16
    1960:	ff 90       	pop	r15
    1962:	ef 90       	pop	r14
    1964:	df 90       	pop	r13
    1966:	cf 90       	pop	r12
    1968:	bf 90       	pop	r11
    196a:	af 90       	pop	r10
    196c:	9f 90       	pop	r9
    196e:	7f 90       	pop	r7
    1970:	6f 90       	pop	r6
    1972:	08 95       	ret

00001974 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1974:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN5Print10printFloatEdh>
}
    1978:	08 95       	ret

0000197a <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    197a:	0f 93       	push	r16
    197c:	1f 93       	push	r17
    197e:	cf 93       	push	r28
    1980:	df 93       	push	r29
    1982:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    1984:	0e 94 04 0c 	call	0x1808	; 0x1808 <_ZN5Print10printFloatEdh>
    1988:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    198a:	ce 01       	movw	r24, r28
    198c:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <_ZN5Print7printlnEv>
    1990:	08 0f       	add	r16, r24
    1992:	19 1f       	adc	r17, r25
  return n;
}
    1994:	c8 01       	movw	r24, r16
    1996:	df 91       	pop	r29
    1998:	cf 91       	pop	r28
    199a:	1f 91       	pop	r17
    199c:	0f 91       	pop	r16
    199e:	08 95       	ret

000019a0 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    19a0:	fc 01       	movw	r30, r24
    19a2:	84 85       	ldd	r24, Z+12	; 0x0c
    19a4:	95 85       	ldd	r25, Z+13	; 0x0d
    19a6:	fc 01       	movw	r30, r24
    19a8:	e0 5c       	subi	r30, 0xC0	; 192
    19aa:	ff 4f       	sbci	r31, 0xFF	; 255
    19ac:	20 81       	ld	r18, Z
    19ae:	31 81       	ldd	r19, Z+1	; 0x01
    19b0:	8e 5b       	subi	r24, 0xBE	; 190
    19b2:	9f 4f       	sbci	r25, 0xFF	; 255
    19b4:	fc 01       	movw	r30, r24
    19b6:	80 81       	ld	r24, Z
    19b8:	91 81       	ldd	r25, Z+1	; 0x01
    19ba:	28 1b       	sub	r18, r24
    19bc:	39 0b       	sbc	r19, r25
    19be:	2f 73       	andi	r18, 0x3F	; 63
    19c0:	30 70       	andi	r19, 0x00	; 0
}
    19c2:	c9 01       	movw	r24, r18
    19c4:	08 95       	ret

000019c6 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    19c6:	fc 01       	movw	r30, r24
    19c8:	84 85       	ldd	r24, Z+12	; 0x0c
    19ca:	95 85       	ldd	r25, Z+13	; 0x0d
    19cc:	fc 01       	movw	r30, r24
    19ce:	e0 5c       	subi	r30, 0xC0	; 192
    19d0:	ff 4f       	sbci	r31, 0xFF	; 255
    19d2:	40 81       	ld	r20, Z
    19d4:	51 81       	ldd	r21, Z+1	; 0x01
    19d6:	fc 01       	movw	r30, r24
    19d8:	ee 5b       	subi	r30, 0xBE	; 190
    19da:	ff 4f       	sbci	r31, 0xFF	; 255
    19dc:	20 81       	ld	r18, Z
    19de:	31 81       	ldd	r19, Z+1	; 0x01
    19e0:	42 17       	cp	r20, r18
    19e2:	53 07       	cpc	r21, r19
    19e4:	41 f0       	breq	.+16     	; 0x19f6 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    19e6:	01 90       	ld	r0, Z+
    19e8:	f0 81       	ld	r31, Z
    19ea:	e0 2d       	mov	r30, r0
    19ec:	e8 0f       	add	r30, r24
    19ee:	f9 1f       	adc	r31, r25
    19f0:	20 81       	ld	r18, Z
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    19f6:	2f ef       	ldi	r18, 0xFF	; 255
    19f8:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    19fa:	c9 01       	movw	r24, r18
    19fc:	08 95       	ret

000019fe <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    19fe:	fc 01       	movw	r30, r24
    1a00:	84 85       	ldd	r24, Z+12	; 0x0c
    1a02:	95 85       	ldd	r25, Z+13	; 0x0d
    1a04:	fc 01       	movw	r30, r24
    1a06:	e0 5c       	subi	r30, 0xC0	; 192
    1a08:	ff 4f       	sbci	r31, 0xFF	; 255
    1a0a:	40 81       	ld	r20, Z
    1a0c:	51 81       	ldd	r21, Z+1	; 0x01
    1a0e:	fc 01       	movw	r30, r24
    1a10:	ee 5b       	subi	r30, 0xBE	; 190
    1a12:	ff 4f       	sbci	r31, 0xFF	; 255
    1a14:	20 81       	ld	r18, Z
    1a16:	31 81       	ldd	r19, Z+1	; 0x01
    1a18:	42 17       	cp	r20, r18
    1a1a:	53 07       	cpc	r21, r19
    1a1c:	71 f0       	breq	.+28     	; 0x1a3a <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    1a1e:	a0 81       	ld	r26, Z
    1a20:	b1 81       	ldd	r27, Z+1	; 0x01
    1a22:	a8 0f       	add	r26, r24
    1a24:	b9 1f       	adc	r27, r25
    1a26:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    1a28:	80 81       	ld	r24, Z
    1a2a:	91 81       	ldd	r25, Z+1	; 0x01
    1a2c:	01 96       	adiw	r24, 0x01	; 1
    1a2e:	8f 73       	andi	r24, 0x3F	; 63
    1a30:	90 70       	andi	r25, 0x00	; 0
    1a32:	91 83       	std	Z+1, r25	; 0x01
    1a34:	80 83       	st	Z, r24
    return c;
    1a36:	30 e0       	ldi	r19, 0x00	; 0
    1a38:	02 c0       	rjmp	.+4      	; 0x1a3e <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    1a3a:	2f ef       	ldi	r18, 0xFF	; 255
    1a3c:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    1a3e:	c9 01       	movw	r24, r18
    1a40:	08 95       	ret

00001a42 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    1a42:	dc 01       	movw	r26, r24
    1a44:	1e 96       	adiw	r26, 0x0e	; 14
    1a46:	8d 91       	ld	r24, X+
    1a48:	9c 91       	ld	r25, X
    1a4a:	1f 97       	sbiw	r26, 0x0f	; 15
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	e0 5c       	subi	r30, 0xC0	; 192
    1a50:	ff 4f       	sbci	r31, 0xFF	; 255
    1a52:	8e 5b       	subi	r24, 0xBE	; 190
    1a54:	9f 4f       	sbci	r25, 0xFF	; 255
    1a56:	40 81       	ld	r20, Z
    1a58:	51 81       	ldd	r21, Z+1	; 0x01
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	2d 91       	ld	r18, X+
    1a5e:	3c 91       	ld	r19, X
    1a60:	11 97       	sbiw	r26, 0x01	; 1
    1a62:	42 17       	cp	r20, r18
    1a64:	53 07       	cpc	r21, r19
    1a66:	b9 f7       	brne	.-18     	; 0x1a56 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    1a68:	08 95       	ret

00001a6a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    1a6a:	1f 93       	push	r17
    1a6c:	fc 01       	movw	r30, r24
    1a6e:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1a70:	26 85       	ldd	r18, Z+14	; 0x0e
    1a72:	37 85       	ldd	r19, Z+15	; 0x0f
    1a74:	d9 01       	movw	r26, r18
    1a76:	a0 5c       	subi	r26, 0xC0	; 192
    1a78:	bf 4f       	sbci	r27, 0xFF	; 255
    1a7a:	8d 91       	ld	r24, X+
    1a7c:	9c 91       	ld	r25, X
    1a7e:	01 96       	adiw	r24, 0x01	; 1
    1a80:	60 e4       	ldi	r22, 0x40	; 64
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    1a88:	d9 01       	movw	r26, r18
    1a8a:	ae 5b       	subi	r26, 0xBE	; 190
    1a8c:	bf 4f       	sbci	r27, 0xFF	; 255
    1a8e:	4d 91       	ld	r20, X+
    1a90:	5c 91       	ld	r21, X
    1a92:	11 97       	sbiw	r26, 0x01	; 1
    1a94:	84 17       	cp	r24, r20
    1a96:	95 07       	cpc	r25, r21
    1a98:	d1 f3       	breq	.-12     	; 0x1a8e <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    1a9a:	d9 01       	movw	r26, r18
    1a9c:	a0 5c       	subi	r26, 0xC0	; 192
    1a9e:	bf 4f       	sbci	r27, 0xFF	; 255
    1aa0:	0d 90       	ld	r0, X+
    1aa2:	bc 91       	ld	r27, X
    1aa4:	a0 2d       	mov	r26, r0
    1aa6:	a2 0f       	add	r26, r18
    1aa8:	b3 1f       	adc	r27, r19
    1aaa:	1c 93       	st	X, r17
  _tx_buffer->head = i;
    1aac:	a6 85       	ldd	r26, Z+14	; 0x0e
    1aae:	b7 85       	ldd	r27, Z+15	; 0x0f
    1ab0:	a0 5c       	subi	r26, 0xC0	; 192
    1ab2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ab4:	11 96       	adiw	r26, 0x01	; 1
    1ab6:	9c 93       	st	X, r25
    1ab8:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
    1aba:	a6 89       	ldd	r26, Z+22	; 0x16
    1abc:	b7 89       	ldd	r27, Z+23	; 0x17
    1abe:	2c 91       	ld	r18, X
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	05 8c       	ldd	r0, Z+29	; 0x1d
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <_ZN14HardwareSerial5writeEh+0x62>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	0a 94       	dec	r0
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <_ZN14HardwareSerial5writeEh+0x5e>
    1ad0:	28 2b       	or	r18, r24
    1ad2:	2c 93       	st	X, r18
  
  return 1;
}
    1ad4:	81 e0       	ldi	r24, 0x01	; 1
    1ad6:	90 e0       	ldi	r25, 0x00	; 0
    1ad8:	1f 91       	pop	r17
    1ada:	08 95       	ret

00001adc <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    1adc:	fb 01       	movw	r30, r22
    1ade:	e0 5c       	subi	r30, 0xC0	; 192
    1ae0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae2:	20 81       	ld	r18, Z
    1ae4:	31 81       	ldd	r19, Z+1	; 0x01
    1ae6:	2f 5f       	subi	r18, 0xFF	; 255
    1ae8:	3f 4f       	sbci	r19, 0xFF	; 255
    1aea:	2f 73       	andi	r18, 0x3F	; 63
    1aec:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    1aee:	db 01       	movw	r26, r22
    1af0:	ae 5b       	subi	r26, 0xBE	; 190
    1af2:	bf 4f       	sbci	r27, 0xFF	; 255
    1af4:	4d 91       	ld	r20, X+
    1af6:	5c 91       	ld	r21, X
    1af8:	11 97       	sbiw	r26, 0x01	; 1
    1afa:	24 17       	cp	r18, r20
    1afc:	35 07       	cpc	r19, r21
    1afe:	39 f0       	breq	.+14     	; 0x1b0e <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
    1b00:	a0 81       	ld	r26, Z
    1b02:	b1 81       	ldd	r27, Z+1	; 0x01
    1b04:	a6 0f       	add	r26, r22
    1b06:	b7 1f       	adc	r27, r23
    1b08:	8c 93       	st	X, r24
    buffer->head = i;
    1b0a:	31 83       	std	Z+1, r19	; 0x01
    1b0c:	20 83       	st	Z, r18
    1b0e:	08 95       	ret

00001b10 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    1b10:	08 95       	ret

00001b12 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    1b12:	1f 92       	push	r1
    1b14:	0f 92       	push	r0
    1b16:	0f b6       	in	r0, 0x3f	; 63
    1b18:	0f 92       	push	r0
    1b1a:	11 24       	eor	r1, r1
    1b1c:	2f 93       	push	r18
    1b1e:	3f 93       	push	r19
    1b20:	4f 93       	push	r20
    1b22:	5f 93       	push	r21
    1b24:	6f 93       	push	r22
    1b26:	7f 93       	push	r23
    1b28:	8f 93       	push	r24
    1b2a:	9f 93       	push	r25
    1b2c:	af 93       	push	r26
    1b2e:	bf 93       	push	r27
    1b30:	ef 93       	push	r30
    1b32:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    1b34:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
    1b38:	63 e4       	ldi	r22, 0x43	; 67
    1b3a:	72 e0       	ldi	r23, 0x02	; 2
    1b3c:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <_Z10store_charhP11ring_buffer>
  }
    1b40:	ff 91       	pop	r31
    1b42:	ef 91       	pop	r30
    1b44:	bf 91       	pop	r27
    1b46:	af 91       	pop	r26
    1b48:	9f 91       	pop	r25
    1b4a:	8f 91       	pop	r24
    1b4c:	7f 91       	pop	r23
    1b4e:	6f 91       	pop	r22
    1b50:	5f 91       	pop	r21
    1b52:	4f 91       	pop	r20
    1b54:	3f 91       	pop	r19
    1b56:	2f 91       	pop	r18
    1b58:	0f 90       	pop	r0
    1b5a:	0f be       	out	0x3f, r0	; 63
    1b5c:	0f 90       	pop	r0
    1b5e:	1f 90       	pop	r1
    1b60:	18 95       	reti

00001b62 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    1b62:	8b ec       	ldi	r24, 0xCB	; 203
    1b64:	92 e0       	ldi	r25, 0x02	; 2
    1b66:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <_ZN14HardwareSerial9availableEv>
    1b6a:	00 97       	sbiw	r24, 0x00	; 0
    1b6c:	11 f0       	breq	.+4      	; 0x1b72 <_Z14serialEventRunv+0x10>
    1b6e:	0e 94 88 0d 	call	0x1b10	; 0x1b10 <_Z11serialEventv>
    1b72:	08 95       	ret

00001b74 <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    1b74:	1f 92       	push	r1
    1b76:	0f 92       	push	r0
    1b78:	0f b6       	in	r0, 0x3f	; 63
    1b7a:	0f 92       	push	r0
    1b7c:	11 24       	eor	r1, r1
    1b7e:	2f 93       	push	r18
    1b80:	3f 93       	push	r19
    1b82:	5f 93       	push	r21
    1b84:	6f 93       	push	r22
    1b86:	7f 93       	push	r23
    1b88:	8f 93       	push	r24
    1b8a:	9f 93       	push	r25
    1b8c:	af 93       	push	r26
    1b8e:	bf 93       	push	r27
    1b90:	ef 93       	push	r30
    1b92:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    1b94:	20 91 c7 02 	lds	r18, 0x02C7
    1b98:	30 91 c8 02 	lds	r19, 0x02C8
    1b9c:	80 91 c9 02 	lds	r24, 0x02C9
    1ba0:	90 91 ca 02 	lds	r25, 0x02CA
    1ba4:	28 17       	cp	r18, r24
    1ba6:	39 07       	cpc	r19, r25
    1ba8:	31 f4       	brne	.+12     	; 0x1bb6 <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    1baa:	80 91 c1 00 	lds	r24, 0x00C1
    1bae:	8f 7d       	andi	r24, 0xDF	; 223
    1bb0:	80 93 c1 00 	sts	0x00C1, r24
    1bb4:	16 c0       	rjmp	.+44     	; 0x1be2 <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    1bb6:	e0 91 c9 02 	lds	r30, 0x02C9
    1bba:	f0 91 ca 02 	lds	r31, 0x02CA
    1bbe:	e9 57       	subi	r30, 0x79	; 121
    1bc0:	fd 4f       	sbci	r31, 0xFD	; 253
    1bc2:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    1bc4:	80 91 c9 02 	lds	r24, 0x02C9
    1bc8:	90 91 ca 02 	lds	r25, 0x02CA
    1bcc:	01 96       	adiw	r24, 0x01	; 1
    1bce:	60 e4       	ldi	r22, 0x40	; 64
    1bd0:	70 e0       	ldi	r23, 0x00	; 0
    1bd2:	0e 94 7a 17 	call	0x2ef4	; 0x2ef4 <__divmodhi4>
    1bd6:	90 93 ca 02 	sts	0x02CA, r25
    1bda:	80 93 c9 02 	sts	0x02C9, r24
	
  #if defined(UDR0)
    UDR0 = c;
    1bde:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    1be2:	ff 91       	pop	r31
    1be4:	ef 91       	pop	r30
    1be6:	bf 91       	pop	r27
    1be8:	af 91       	pop	r26
    1bea:	9f 91       	pop	r25
    1bec:	8f 91       	pop	r24
    1bee:	7f 91       	pop	r23
    1bf0:	6f 91       	pop	r22
    1bf2:	5f 91       	pop	r21
    1bf4:	3f 91       	pop	r19
    1bf6:	2f 91       	pop	r18
    1bf8:	0f 90       	pop	r0
    1bfa:	0f be       	out	0x3f, r0	; 63
    1bfc:	0f 90       	pop	r0
    1bfe:	1f 90       	pop	r1
    1c00:	18 95       	reti

00001c02 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:
#endif


// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
    1c02:	8f 92       	push	r8
    1c04:	af 92       	push	r10
    1c06:	bf 92       	push	r11
    1c08:	cf 92       	push	r12
    1c0a:	df 92       	push	r13
    1c0c:	ef 92       	push	r14
    1c0e:	ff 92       	push	r15
    1c10:	0f 93       	push	r16
    1c12:	1f 93       	push	r17
    1c14:	df 93       	push	r29
    1c16:	cf 93       	push	r28
    1c18:	cd b7       	in	r28, 0x3d	; 61
    1c1a:	de b7       	in	r29, 0x3e	; 62
    1c1c:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1c1e:	13 82       	std	Z+3, r1	; 0x03
    1c20:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    1c22:	88 ee       	ldi	r24, 0xE8	; 232
    1c24:	93 e0       	ldi	r25, 0x03	; 3
    1c26:	a0 e0       	ldi	r26, 0x00	; 0
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	84 83       	std	Z+4, r24	; 0x04
    1c2c:	95 83       	std	Z+5, r25	; 0x05
    1c2e:	a6 83       	std	Z+6, r26	; 0x06
    1c30:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1c32:	8e e1       	ldi	r24, 0x1E	; 30
    1c34:	92 e0       	ldi	r25, 0x02	; 2
    1c36:	91 83       	std	Z+1, r25	; 0x01
    1c38:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    1c3a:	75 87       	std	Z+13, r23	; 0x0d
    1c3c:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
    1c3e:	57 87       	std	Z+15, r21	; 0x0f
    1c40:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
    1c42:	31 8b       	std	Z+17, r19	; 0x11
    1c44:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
    1c46:	13 8b       	std	Z+19, r17	; 0x13
    1c48:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
    1c4a:	f5 8a       	std	Z+21, r15	; 0x15
    1c4c:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
    1c4e:	d7 8a       	std	Z+23, r13	; 0x17
    1c50:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
    1c52:	b1 8e       	std	Z+25, r11	; 0x19
    1c54:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
    1c56:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
    1c58:	8e 85       	ldd	r24, Y+14	; 0x0e
    1c5a:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    1c5c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c5e:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    1c60:	88 89       	ldd	r24, Y+16	; 0x10
    1c62:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    1c64:	89 89       	ldd	r24, Y+17	; 0x11
    1c66:	86 8f       	std	Z+30, r24	; 0x1e
}
    1c68:	cf 91       	pop	r28
    1c6a:	df 91       	pop	r29
    1c6c:	1f 91       	pop	r17
    1c6e:	0f 91       	pop	r16
    1c70:	ff 90       	pop	r15
    1c72:	ef 90       	pop	r14
    1c74:	df 90       	pop	r13
    1c76:	cf 90       	pop	r12
    1c78:	bf 90       	pop	r11
    1c7a:	af 90       	pop	r10
    1c7c:	8f 90       	pop	r8
    1c7e:	08 95       	ret

00001c80 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    1c80:	df 92       	push	r13
    1c82:	ef 92       	push	r14
    1c84:	ff 92       	push	r15
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	cf 93       	push	r28
    1c8c:	df 93       	push	r29
    1c8e:	ec 01       	movw	r28, r24
    1c90:	7a 01       	movw	r14, r20
    1c92:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    1c94:	dd 24       	eor	r13, r13
    1c96:	d3 94       	inc	r13
    1c98:	40 30       	cpi	r20, 0x00	; 0
    1c9a:	81 ee       	ldi	r24, 0xE1	; 225
    1c9c:	58 07       	cpc	r21, r24
    1c9e:	80 e0       	ldi	r24, 0x00	; 0
    1ca0:	68 07       	cpc	r22, r24
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	78 07       	cpc	r23, r24
    1ca6:	49 f4       	brne	.+18     	; 0x1cba <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    1ca8:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    1caa:	ec 89       	ldd	r30, Y+20	; 0x14
    1cac:	fd 89       	ldd	r31, Y+21	; 0x15
    1cae:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1cb0:	60 e8       	ldi	r22, 0x80	; 128
    1cb2:	74 e8       	ldi	r23, 0x84	; 132
    1cb4:	8e e1       	ldi	r24, 0x1E	; 30
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	0f c0       	rjmp	.+30     	; 0x1cd8 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    1cba:	ec 89       	ldd	r30, Y+20	; 0x14
    1cbc:	fd 89       	ldd	r31, Y+21	; 0x15
    1cbe:	81 e0       	ldi	r24, 0x01	; 1
    1cc0:	90 e0       	ldi	r25, 0x00	; 0
    1cc2:	0e 8c       	ldd	r0, Y+30	; 0x1e
    1cc4:	02 c0       	rjmp	.+4      	; 0x1cca <_ZN14HardwareSerial5beginEm+0x4a>
    1cc6:	88 0f       	add	r24, r24
    1cc8:	99 1f       	adc	r25, r25
    1cca:	0a 94       	dec	r0
    1ccc:	e2 f7       	brpl	.-8      	; 0x1cc6 <_ZN14HardwareSerial5beginEm+0x46>
    1cce:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    1cd0:	60 e0       	ldi	r22, 0x00	; 0
    1cd2:	79 e0       	ldi	r23, 0x09	; 9
    1cd4:	8d e3       	ldi	r24, 0x3D	; 61
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    1cd8:	a8 01       	movw	r20, r16
    1cda:	97 01       	movw	r18, r14
    1cdc:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__udivmodsi4>
    1ce0:	21 50       	subi	r18, 0x01	; 1
    1ce2:	30 40       	sbci	r19, 0x00	; 0
    1ce4:	40 40       	sbci	r20, 0x00	; 0
    1ce6:	50 40       	sbci	r21, 0x00	; 0
    1ce8:	56 95       	lsr	r21
    1cea:	47 95       	ror	r20
    1cec:	37 95       	ror	r19
    1cee:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    1cf0:	80 e1       	ldi	r24, 0x10	; 16
    1cf2:	20 30       	cpi	r18, 0x00	; 0
    1cf4:	38 07       	cpc	r19, r24
    1cf6:	10 f0       	brcs	.+4      	; 0x1cfc <_ZN14HardwareSerial5beginEm+0x7c>
    1cf8:	dd 20       	and	r13, r13
    1cfa:	b1 f6       	brne	.-84     	; 0x1ca8 <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    1cfc:	e8 89       	ldd	r30, Y+16	; 0x10
    1cfe:	f9 89       	ldd	r31, Y+17	; 0x11
    1d00:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    1d02:	ea 89       	ldd	r30, Y+18	; 0x12
    1d04:	fb 89       	ldd	r31, Y+19	; 0x13
    1d06:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    1d08:	ee 89       	ldd	r30, Y+22	; 0x16
    1d0a:	ff 89       	ldd	r31, Y+23	; 0x17
    1d0c:	40 81       	ld	r20, Z
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	9c 01       	movw	r18, r24
    1d14:	0a 8c       	ldd	r0, Y+26	; 0x1a
    1d16:	02 c0       	rjmp	.+4      	; 0x1d1c <_ZN14HardwareSerial5beginEm+0x9c>
    1d18:	22 0f       	add	r18, r18
    1d1a:	33 1f       	adc	r19, r19
    1d1c:	0a 94       	dec	r0
    1d1e:	e2 f7       	brpl	.-8      	; 0x1d18 <_ZN14HardwareSerial5beginEm+0x98>
    1d20:	42 2b       	or	r20, r18
    1d22:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    1d24:	ee 89       	ldd	r30, Y+22	; 0x16
    1d26:	ff 89       	ldd	r31, Y+23	; 0x17
    1d28:	40 81       	ld	r20, Z
    1d2a:	9c 01       	movw	r18, r24
    1d2c:	0b 8c       	ldd	r0, Y+27	; 0x1b
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <_ZN14HardwareSerial5beginEm+0xb4>
    1d30:	22 0f       	add	r18, r18
    1d32:	33 1f       	adc	r19, r19
    1d34:	0a 94       	dec	r0
    1d36:	e2 f7       	brpl	.-8      	; 0x1d30 <_ZN14HardwareSerial5beginEm+0xb0>
    1d38:	42 2b       	or	r20, r18
    1d3a:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    1d3c:	ee 89       	ldd	r30, Y+22	; 0x16
    1d3e:	ff 89       	ldd	r31, Y+23	; 0x17
    1d40:	40 81       	ld	r20, Z
    1d42:	9c 01       	movw	r18, r24
    1d44:	0c 8c       	ldd	r0, Y+28	; 0x1c
    1d46:	02 c0       	rjmp	.+4      	; 0x1d4c <_ZN14HardwareSerial5beginEm+0xcc>
    1d48:	22 0f       	add	r18, r18
    1d4a:	33 1f       	adc	r19, r19
    1d4c:	0a 94       	dec	r0
    1d4e:	e2 f7       	brpl	.-8      	; 0x1d48 <_ZN14HardwareSerial5beginEm+0xc8>
    1d50:	42 2b       	or	r20, r18
    1d52:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    1d54:	ee 89       	ldd	r30, Y+22	; 0x16
    1d56:	ff 89       	ldd	r31, Y+23	; 0x17
    1d58:	20 81       	ld	r18, Z
    1d5a:	0d 8c       	ldd	r0, Y+29	; 0x1d
    1d5c:	02 c0       	rjmp	.+4      	; 0x1d62 <_ZN14HardwareSerial5beginEm+0xe2>
    1d5e:	88 0f       	add	r24, r24
    1d60:	99 1f       	adc	r25, r25
    1d62:	0a 94       	dec	r0
    1d64:	e2 f7       	brpl	.-8      	; 0x1d5e <_ZN14HardwareSerial5beginEm+0xde>
    1d66:	80 95       	com	r24
    1d68:	82 23       	and	r24, r18
    1d6a:	80 83       	st	Z, r24
}
    1d6c:	df 91       	pop	r29
    1d6e:	cf 91       	pop	r28
    1d70:	1f 91       	pop	r17
    1d72:	0f 91       	pop	r16
    1d74:	ff 90       	pop	r15
    1d76:	ef 90       	pop	r14
    1d78:	df 90       	pop	r13
    1d7a:	08 95       	ret

00001d7c <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    1d7c:	cf 93       	push	r28
    1d7e:	df 93       	push	r29
    1d80:	fc 01       	movw	r30, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    1d82:	86 85       	ldd	r24, Z+14	; 0x0e
    1d84:	97 85       	ldd	r25, Z+15	; 0x0f
    1d86:	dc 01       	movw	r26, r24
    1d88:	a0 5c       	subi	r26, 0xC0	; 192
    1d8a:	bf 4f       	sbci	r27, 0xFF	; 255
    1d8c:	8e 5b       	subi	r24, 0xBE	; 190
    1d8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d90:	4d 91       	ld	r20, X+
    1d92:	5c 91       	ld	r21, X
    1d94:	11 97       	sbiw	r26, 0x01	; 1
    1d96:	ec 01       	movw	r28, r24
    1d98:	28 81       	ld	r18, Y
    1d9a:	39 81       	ldd	r19, Y+1	; 0x01
    1d9c:	42 17       	cp	r20, r18
    1d9e:	53 07       	cpc	r21, r19
    1da0:	b9 f7       	brne	.-18     	; 0x1d90 <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
    1da2:	a6 89       	ldd	r26, Z+22	; 0x16
    1da4:	b7 89       	ldd	r27, Z+23	; 0x17
    1da6:	4c 91       	ld	r20, X
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	9c 01       	movw	r18, r24
    1dae:	02 8c       	ldd	r0, Z+26	; 0x1a
    1db0:	02 c0       	rjmp	.+4      	; 0x1db6 <_ZN14HardwareSerial3endEv+0x3a>
    1db2:	22 0f       	add	r18, r18
    1db4:	33 1f       	adc	r19, r19
    1db6:	0a 94       	dec	r0
    1db8:	e2 f7       	brpl	.-8      	; 0x1db2 <_ZN14HardwareSerial3endEv+0x36>
    1dba:	20 95       	com	r18
    1dbc:	24 23       	and	r18, r20
    1dbe:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    1dc0:	a6 89       	ldd	r26, Z+22	; 0x16
    1dc2:	b7 89       	ldd	r27, Z+23	; 0x17
    1dc4:	4c 91       	ld	r20, X
    1dc6:	9c 01       	movw	r18, r24
    1dc8:	03 8c       	ldd	r0, Z+27	; 0x1b
    1dca:	02 c0       	rjmp	.+4      	; 0x1dd0 <_ZN14HardwareSerial3endEv+0x54>
    1dcc:	22 0f       	add	r18, r18
    1dce:	33 1f       	adc	r19, r19
    1dd0:	0a 94       	dec	r0
    1dd2:	e2 f7       	brpl	.-8      	; 0x1dcc <_ZN14HardwareSerial3endEv+0x50>
    1dd4:	20 95       	com	r18
    1dd6:	24 23       	and	r18, r20
    1dd8:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    1dda:	a6 89       	ldd	r26, Z+22	; 0x16
    1ddc:	b7 89       	ldd	r27, Z+23	; 0x17
    1dde:	4c 91       	ld	r20, X
    1de0:	9c 01       	movw	r18, r24
    1de2:	04 8c       	ldd	r0, Z+28	; 0x1c
    1de4:	02 c0       	rjmp	.+4      	; 0x1dea <_ZN14HardwareSerial3endEv+0x6e>
    1de6:	22 0f       	add	r18, r18
    1de8:	33 1f       	adc	r19, r19
    1dea:	0a 94       	dec	r0
    1dec:	e2 f7       	brpl	.-8      	; 0x1de6 <_ZN14HardwareSerial3endEv+0x6a>
    1dee:	20 95       	com	r18
    1df0:	24 23       	and	r18, r20
    1df2:	2c 93       	st	X, r18
  cbi(*_ucsrb, _udrie);
    1df4:	a6 89       	ldd	r26, Z+22	; 0x16
    1df6:	b7 89       	ldd	r27, Z+23	; 0x17
    1df8:	2c 91       	ld	r18, X
    1dfa:	05 8c       	ldd	r0, Z+29	; 0x1d
    1dfc:	02 c0       	rjmp	.+4      	; 0x1e02 <_ZN14HardwareSerial3endEv+0x86>
    1dfe:	88 0f       	add	r24, r24
    1e00:	99 1f       	adc	r25, r25
    1e02:	0a 94       	dec	r0
    1e04:	e2 f7       	brpl	.-8      	; 0x1dfe <_ZN14HardwareSerial3endEv+0x82>
    1e06:	80 95       	com	r24
    1e08:	82 23       	and	r24, r18
    1e0a:	8c 93       	st	X, r24
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    1e0c:	84 85       	ldd	r24, Z+12	; 0x0c
    1e0e:	95 85       	ldd	r25, Z+13	; 0x0d
    1e10:	fc 01       	movw	r30, r24
    1e12:	ee 5b       	subi	r30, 0xBE	; 190
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	20 81       	ld	r18, Z
    1e18:	31 81       	ldd	r19, Z+1	; 0x01
    1e1a:	80 5c       	subi	r24, 0xC0	; 192
    1e1c:	9f 4f       	sbci	r25, 0xFF	; 255
    1e1e:	fc 01       	movw	r30, r24
    1e20:	31 83       	std	Z+1, r19	; 0x01
    1e22:	20 83       	st	Z, r18
}
    1e24:	df 91       	pop	r29
    1e26:	cf 91       	pop	r28
    1e28:	08 95       	ret

00001e2a <_GLOBAL__I_rx_buffer>:
    1e2a:	10 92 ce 02 	sts	0x02CE, r1
    1e2e:	10 92 cd 02 	sts	0x02CD, r1
    1e32:	88 ee       	ldi	r24, 0xE8	; 232
    1e34:	93 e0       	ldi	r25, 0x03	; 3
    1e36:	a0 e0       	ldi	r26, 0x00	; 0
    1e38:	b0 e0       	ldi	r27, 0x00	; 0
    1e3a:	80 93 cf 02 	sts	0x02CF, r24
    1e3e:	90 93 d0 02 	sts	0x02D0, r25
    1e42:	a0 93 d1 02 	sts	0x02D1, r26
    1e46:	b0 93 d2 02 	sts	0x02D2, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    1e4a:	ed ec       	ldi	r30, 0xCD	; 205
    1e4c:	f2 e0       	ldi	r31, 0x02	; 2
    1e4e:	8e e1       	ldi	r24, 0x1E	; 30
    1e50:	92 e0       	ldi	r25, 0x02	; 2
    1e52:	92 93       	st	-Z, r25
    1e54:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
    1e56:	83 e4       	ldi	r24, 0x43	; 67
    1e58:	92 e0       	ldi	r25, 0x02	; 2
    1e5a:	95 87       	std	Z+13, r25	; 0x0d
    1e5c:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    1e5e:	87 e8       	ldi	r24, 0x87	; 135
    1e60:	92 e0       	ldi	r25, 0x02	; 2
    1e62:	97 87       	std	Z+15, r25	; 0x0f
    1e64:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    1e66:	85 ec       	ldi	r24, 0xC5	; 197
    1e68:	90 e0       	ldi	r25, 0x00	; 0
    1e6a:	91 8b       	std	Z+17, r25	; 0x11
    1e6c:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    1e6e:	84 ec       	ldi	r24, 0xC4	; 196
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	93 8b       	std	Z+19, r25	; 0x13
    1e74:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    1e76:	80 ec       	ldi	r24, 0xC0	; 192
    1e78:	90 e0       	ldi	r25, 0x00	; 0
    1e7a:	95 8b       	std	Z+21, r25	; 0x15
    1e7c:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    1e7e:	81 ec       	ldi	r24, 0xC1	; 193
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	97 8b       	std	Z+23, r25	; 0x17
    1e84:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
    1e86:	86 ec       	ldi	r24, 0xC6	; 198
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	91 8f       	std	Z+25, r25	; 0x19
    1e8c:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
    1e8e:	84 e0       	ldi	r24, 0x04	; 4
    1e90:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    1e92:	83 e0       	ldi	r24, 0x03	; 3
    1e94:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    1e96:	87 e0       	ldi	r24, 0x07	; 7
    1e98:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    1e9a:	85 e0       	ldi	r24, 0x05	; 5
    1e9c:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    1e9e:	81 e0       	ldi	r24, 0x01	; 1
    1ea0:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    1ea2:	08 95       	ret

00001ea4 <_ZN6StringD1Ev>:
	*this = buf;
}

String::~String()
{
	free(buffer);
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	80 81       	ld	r24, Z
    1ea8:	91 81       	ldd	r25, Z+1	; 0x01
    1eaa:	0e 94 9a 18 	call	0x3134	; 0x3134 <free>
}
    1eae:	08 95       	ret

00001eb0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
    1eb0:	cf 93       	push	r28
    1eb2:	df 93       	push	r29
    1eb4:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    1eb6:	88 81       	ld	r24, Y
    1eb8:	99 81       	ldd	r25, Y+1	; 0x01
    1eba:	00 97       	sbiw	r24, 0x00	; 0
    1ebc:	11 f0       	breq	.+4      	; 0x1ec2 <_ZN6String10invalidateEv+0x12>
    1ebe:	0e 94 9a 18 	call	0x3134	; 0x3134 <free>
	buffer = NULL;
    1ec2:	19 82       	std	Y+1, r1	; 0x01
    1ec4:	18 82       	st	Y, r1
	capacity = len = 0;
    1ec6:	1d 82       	std	Y+5, r1	; 0x05
    1ec8:	1c 82       	std	Y+4, r1	; 0x04
    1eca:	1b 82       	std	Y+3, r1	; 0x03
    1ecc:	1a 82       	std	Y+2, r1	; 0x02
}
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	08 95       	ret

00001ed4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	ec 01       	movw	r28, r24
    1ede:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    1ee0:	6f 5f       	subi	r22, 0xFF	; 255
    1ee2:	7f 4f       	sbci	r23, 0xFF	; 255
    1ee4:	88 81       	ld	r24, Y
    1ee6:	99 81       	ldd	r25, Y+1	; 0x01
    1ee8:	0e 94 33 19 	call	0x3266	; 0x3266 <realloc>
	if (newbuffer) {
    1eec:	00 97       	sbiw	r24, 0x00	; 0
    1eee:	31 f0       	breq	.+12     	; 0x1efc <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    1ef0:	99 83       	std	Y+1, r25	; 0x01
    1ef2:	88 83       	st	Y, r24
		capacity = maxStrLen;
    1ef4:	1b 83       	std	Y+3, r17	; 0x03
    1ef6:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	01 c0       	rjmp	.+2      	; 0x1efe <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    1efc:	80 e0       	ldi	r24, 0x00	; 0
}
    1efe:	df 91       	pop	r29
    1f00:	cf 91       	pop	r28
    1f02:	1f 91       	pop	r17
    1f04:	0f 91       	pop	r16
    1f06:	08 95       	ret

00001f08 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    1f08:	cf 93       	push	r28
    1f0a:	df 93       	push	r29
    1f0c:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    1f0e:	88 81       	ld	r24, Y
    1f10:	99 81       	ldd	r25, Y+1	; 0x01
    1f12:	00 97       	sbiw	r24, 0x00	; 0
    1f14:	29 f0       	breq	.+10     	; 0x1f20 <_ZN6String7reserveEj+0x18>
    1f16:	8a 81       	ldd	r24, Y+2	; 0x02
    1f18:	9b 81       	ldd	r25, Y+3	; 0x03
    1f1a:	86 17       	cp	r24, r22
    1f1c:	97 07       	cpc	r25, r23
    1f1e:	78 f4       	brcc	.+30     	; 0x1f3e <_ZN6String7reserveEj+0x36>
	if (changeBuffer(size)) {
    1f20:	ce 01       	movw	r24, r28
    1f22:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN6String12changeBufferEj>
    1f26:	88 23       	and	r24, r24
    1f28:	41 f0       	breq	.+16     	; 0x1f3a <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    1f2a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f2c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f2e:	00 97       	sbiw	r24, 0x00	; 0
    1f30:	31 f4       	brne	.+12     	; 0x1f3e <_ZN6String7reserveEj+0x36>
    1f32:	e8 81       	ld	r30, Y
    1f34:	f9 81       	ldd	r31, Y+1	; 0x01
    1f36:	10 82       	st	Z, r1
    1f38:	02 c0       	rjmp	.+4      	; 0x1f3e <_ZN6String7reserveEj+0x36>
		return 1;
	}
	return 0;
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	01 c0       	rjmp	.+2      	; 0x1f40 <_ZN6String7reserveEj+0x38>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    1f3e:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	08 95       	ret

00001f46 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    1f46:	ef 92       	push	r14
    1f48:	ff 92       	push	r15
    1f4a:	0f 93       	push	r16
    1f4c:	1f 93       	push	r17
    1f4e:	cf 93       	push	r28
    1f50:	df 93       	push	r29
    1f52:	ec 01       	movw	r28, r24
    1f54:	7b 01       	movw	r14, r22
    1f56:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    1f58:	ba 01       	movw	r22, r20
    1f5a:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <_ZN6String7reserveEj>
    1f5e:	88 23       	and	r24, r24
    1f60:	21 f4       	brne	.+8      	; 0x1f6a <_ZN6String4copyEPKcj+0x24>
		invalidate();
    1f62:	ce 01       	movw	r24, r28
    1f64:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_ZN6String10invalidateEv>
		return *this;
    1f68:	07 c0       	rjmp	.+14     	; 0x1f78 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    1f6a:	1d 83       	std	Y+5, r17	; 0x05
    1f6c:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    1f6e:	88 81       	ld	r24, Y
    1f70:	99 81       	ldd	r25, Y+1	; 0x01
    1f72:	b7 01       	movw	r22, r14
    1f74:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <strcpy>
	return *this;
}
    1f78:	ce 01       	movw	r24, r28
    1f7a:	df 91       	pop	r29
    1f7c:	cf 91       	pop	r28
    1f7e:	1f 91       	pop	r17
    1f80:	0f 91       	pop	r16
    1f82:	ff 90       	pop	r15
    1f84:	ef 90       	pop	r14
    1f86:	08 95       	ret

00001f88 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    1f88:	cf 93       	push	r28
    1f8a:	df 93       	push	r29
    1f8c:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1f8e:	11 82       	std	Z+1, r1	; 0x01
    1f90:	10 82       	st	Z, r1
	capacity = 0;
    1f92:	13 82       	std	Z+3, r1	; 0x03
    1f94:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    1f96:	15 82       	std	Z+5, r1	; 0x05
    1f98:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    1f9a:	16 82       	std	Z+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    1f9c:	61 15       	cp	r22, r1
    1f9e:	71 05       	cpc	r23, r1
    1fa0:	59 f0       	breq	.+22     	; 0x1fb8 <_ZN6StringC1EPKc+0x30>
    1fa2:	eb 01       	movw	r28, r22
    1fa4:	09 90       	ld	r0, Y+
    1fa6:	00 20       	and	r0, r0
    1fa8:	e9 f7       	brne	.-6      	; 0x1fa4 <_ZN6StringC1EPKc+0x1c>
    1faa:	ae 01       	movw	r20, r28
    1fac:	41 50       	subi	r20, 0x01	; 1
    1fae:	50 40       	sbci	r21, 0x00	; 0
    1fb0:	46 1b       	sub	r20, r22
    1fb2:	57 0b       	sbc	r21, r23
    1fb4:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN6String4copyEPKcj>
}
    1fb8:	df 91       	pop	r29
    1fba:	cf 91       	pop	r28
    1fbc:	08 95       	ret

00001fbe <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    1fbe:	ef 92       	push	r14
    1fc0:	ff 92       	push	r15
    1fc2:	cf 93       	push	r28
    1fc4:	df 93       	push	r29
    1fc6:	ec 01       	movw	r28, r24
    1fc8:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    1fca:	86 17       	cp	r24, r22
    1fcc:	97 07       	cpc	r25, r23
    1fce:	61 f0       	breq	.+24     	; 0x1fe8 <_ZN6StringaSERKS_+0x2a>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    1fd0:	60 81       	ld	r22, Z
    1fd2:	71 81       	ldd	r23, Z+1	; 0x01
    1fd4:	61 15       	cp	r22, r1
    1fd6:	71 05       	cpc	r23, r1
    1fd8:	29 f0       	breq	.+10     	; 0x1fe4 <_ZN6StringaSERKS_+0x26>
    1fda:	44 81       	ldd	r20, Z+4	; 0x04
    1fdc:	55 81       	ldd	r21, Z+5	; 0x05
    1fde:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN6String4copyEPKcj>
    1fe2:	02 c0       	rjmp	.+4      	; 0x1fe8 <_ZN6StringaSERKS_+0x2a>
	else invalidate();
    1fe4:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_ZN6String10invalidateEv>
	
	return *this;
}
    1fe8:	ce 01       	movw	r24, r28
    1fea:	df 91       	pop	r29
    1fec:	cf 91       	pop	r28
    1fee:	ff 90       	pop	r15
    1ff0:	ef 90       	pop	r14
    1ff2:	08 95       	ret

00001ff4 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    1ff4:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    1ff6:	11 82       	std	Z+1, r1	; 0x01
    1ff8:	10 82       	st	Z, r1
	capacity = 0;
    1ffa:	13 82       	std	Z+3, r1	; 0x03
    1ffc:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    1ffe:	15 82       	std	Z+5, r1	; 0x05
    2000:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2002:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    2004:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <_ZN6StringaSERKS_>
}
    2008:	08 95       	ret

0000200a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    200a:	0f 93       	push	r16
    200c:	1f 93       	push	r17
    200e:	8c 01       	movw	r16, r24
	if (cstr) copy(cstr, strlen(cstr));
    2010:	61 15       	cp	r22, r1
    2012:	71 05       	cpc	r23, r1
    2014:	61 f0       	breq	.+24     	; 0x202e <_ZN6StringaSEPKc+0x24>
    2016:	db 01       	movw	r26, r22
    2018:	0d 90       	ld	r0, X+
    201a:	00 20       	and	r0, r0
    201c:	e9 f7       	brne	.-6      	; 0x2018 <_ZN6StringaSEPKc+0xe>
    201e:	ad 01       	movw	r20, r26
    2020:	41 50       	subi	r20, 0x01	; 1
    2022:	50 40       	sbci	r21, 0x00	; 0
    2024:	46 1b       	sub	r20, r22
    2026:	57 0b       	sbc	r21, r23
    2028:	0e 94 a3 0f 	call	0x1f46	; 0x1f46 <_ZN6String4copyEPKcj>
    202c:	02 c0       	rjmp	.+4      	; 0x2032 <_ZN6StringaSEPKc+0x28>
	else invalidate();
    202e:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_ZN6String10invalidateEv>
	
	return *this;
}
    2032:	c8 01       	movw	r24, r16
    2034:	1f 91       	pop	r17
    2036:	0f 91       	pop	r16
    2038:	08 95       	ret

0000203a <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    203a:	ef 92       	push	r14
    203c:	ff 92       	push	r15
    203e:	0f 93       	push	r16
    2040:	1f 93       	push	r17
    2042:	df 93       	push	r29
    2044:	cf 93       	push	r28
    2046:	cd b7       	in	r28, 0x3d	; 61
    2048:	de b7       	in	r29, 0x3e	; 62
    204a:	a1 97       	sbiw	r28, 0x21	; 33
    204c:	0f b6       	in	r0, 0x3f	; 63
    204e:	f8 94       	cli
    2050:	de bf       	out	0x3e, r29	; 62
    2052:	0f be       	out	0x3f, r0	; 63
    2054:	cd bf       	out	0x3d, r28	; 61
    2056:	7c 01       	movw	r14, r24
    2058:	cb 01       	movw	r24, r22
    205a:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    205c:	f7 01       	movw	r30, r14
    205e:	11 82       	std	Z+1, r1	; 0x01
    2060:	10 82       	st	Z, r1
	capacity = 0;
    2062:	13 82       	std	Z+3, r1	; 0x03
    2064:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2066:	15 82       	std	Z+5, r1	; 0x05
    2068:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    206a:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    206c:	8e 01       	movw	r16, r28
    206e:	0f 5f       	subi	r16, 0xFF	; 255
    2070:	1f 4f       	sbci	r17, 0xFF	; 255
    2072:	a8 01       	movw	r20, r16
    2074:	30 e0       	ldi	r19, 0x00	; 0
    2076:	0e 94 1f 1b 	call	0x363e	; 0x363e <ultoa>
	*this = buf;
    207a:	c7 01       	movw	r24, r14
    207c:	b8 01       	movw	r22, r16
    207e:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringaSEPKc>
}
    2082:	a1 96       	adiw	r28, 0x21	; 33
    2084:	0f b6       	in	r0, 0x3f	; 63
    2086:	f8 94       	cli
    2088:	de bf       	out	0x3e, r29	; 62
    208a:	0f be       	out	0x3f, r0	; 63
    208c:	cd bf       	out	0x3d, r28	; 61
    208e:	cf 91       	pop	r28
    2090:	df 91       	pop	r29
    2092:	1f 91       	pop	r17
    2094:	0f 91       	pop	r16
    2096:	ff 90       	pop	r15
    2098:	ef 90       	pop	r14
    209a:	08 95       	ret

0000209c <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    209c:	ef 92       	push	r14
    209e:	ff 92       	push	r15
    20a0:	0f 93       	push	r16
    20a2:	1f 93       	push	r17
    20a4:	df 93       	push	r29
    20a6:	cf 93       	push	r28
    20a8:	cd b7       	in	r28, 0x3d	; 61
    20aa:	de b7       	in	r29, 0x3e	; 62
    20ac:	a2 97       	sbiw	r28, 0x22	; 34
    20ae:	0f b6       	in	r0, 0x3f	; 63
    20b0:	f8 94       	cli
    20b2:	de bf       	out	0x3e, r29	; 62
    20b4:	0f be       	out	0x3f, r0	; 63
    20b6:	cd bf       	out	0x3d, r28	; 61
    20b8:	7c 01       	movw	r14, r24
    20ba:	cb 01       	movw	r24, r22
    20bc:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    20be:	f7 01       	movw	r30, r14
    20c0:	11 82       	std	Z+1, r1	; 0x01
    20c2:	10 82       	st	Z, r1
	capacity = 0;
    20c4:	13 82       	std	Z+3, r1	; 0x03
    20c6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    20c8:	15 82       	std	Z+5, r1	; 0x05
    20ca:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    20cc:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    20ce:	8e 01       	movw	r16, r28
    20d0:	0f 5f       	subi	r16, 0xFF	; 255
    20d2:	1f 4f       	sbci	r17, 0xFF	; 255
    20d4:	a8 01       	movw	r20, r16
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <ltoa>
	*this = buf;
    20dc:	c7 01       	movw	r24, r14
    20de:	b8 01       	movw	r22, r16
    20e0:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringaSEPKc>
}
    20e4:	a2 96       	adiw	r28, 0x22	; 34
    20e6:	0f b6       	in	r0, 0x3f	; 63
    20e8:	f8 94       	cli
    20ea:	de bf       	out	0x3e, r29	; 62
    20ec:	0f be       	out	0x3f, r0	; 63
    20ee:	cd bf       	out	0x3d, r28	; 61
    20f0:	cf 91       	pop	r28
    20f2:	df 91       	pop	r29
    20f4:	1f 91       	pop	r17
    20f6:	0f 91       	pop	r16
    20f8:	ff 90       	pop	r15
    20fa:	ef 90       	pop	r14
    20fc:	08 95       	ret

000020fe <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    20fe:	ef 92       	push	r14
    2100:	ff 92       	push	r15
    2102:	0f 93       	push	r16
    2104:	1f 93       	push	r17
    2106:	df 93       	push	r29
    2108:	cf 93       	push	r28
    210a:	cd b7       	in	r28, 0x3d	; 61
    210c:	de b7       	in	r29, 0x3e	; 62
    210e:	61 97       	sbiw	r28, 0x11	; 17
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	de bf       	out	0x3e, r29	; 62
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	cd bf       	out	0x3d, r28	; 61
    211a:	7c 01       	movw	r14, r24
    211c:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    211e:	f7 01       	movw	r30, r14
    2120:	11 82       	std	Z+1, r1	; 0x01
    2122:	10 82       	st	Z, r1
	capacity = 0;
    2124:	13 82       	std	Z+3, r1	; 0x03
    2126:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2128:	15 82       	std	Z+5, r1	; 0x05
    212a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    212c:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    212e:	8e 01       	movw	r16, r28
    2130:	0f 5f       	subi	r16, 0xFF	; 255
    2132:	1f 4f       	sbci	r17, 0xFF	; 255
    2134:	b8 01       	movw	r22, r16
    2136:	50 e0       	ldi	r21, 0x00	; 0
    2138:	0e 94 44 1b 	call	0x3688	; 0x3688 <utoa>
	*this = buf;
    213c:	c7 01       	movw	r24, r14
    213e:	b8 01       	movw	r22, r16
    2140:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringaSEPKc>
}
    2144:	61 96       	adiw	r28, 0x11	; 17
    2146:	0f b6       	in	r0, 0x3f	; 63
    2148:	f8 94       	cli
    214a:	de bf       	out	0x3e, r29	; 62
    214c:	0f be       	out	0x3f, r0	; 63
    214e:	cd bf       	out	0x3d, r28	; 61
    2150:	cf 91       	pop	r28
    2152:	df 91       	pop	r29
    2154:	1f 91       	pop	r17
    2156:	0f 91       	pop	r16
    2158:	ff 90       	pop	r15
    215a:	ef 90       	pop	r14
    215c:	08 95       	ret

0000215e <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    215e:	ef 92       	push	r14
    2160:	ff 92       	push	r15
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	df 93       	push	r29
    2168:	cf 93       	push	r28
    216a:	cd b7       	in	r28, 0x3d	; 61
    216c:	de b7       	in	r29, 0x3e	; 62
    216e:	62 97       	sbiw	r28, 0x12	; 18
    2170:	0f b6       	in	r0, 0x3f	; 63
    2172:	f8 94       	cli
    2174:	de bf       	out	0x3e, r29	; 62
    2176:	0f be       	out	0x3f, r0	; 63
    2178:	cd bf       	out	0x3d, r28	; 61
    217a:	7c 01       	movw	r14, r24
    217c:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    217e:	f7 01       	movw	r30, r14
    2180:	11 82       	std	Z+1, r1	; 0x01
    2182:	10 82       	st	Z, r1
	capacity = 0;
    2184:	13 82       	std	Z+3, r1	; 0x03
    2186:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2188:	15 82       	std	Z+5, r1	; 0x05
    218a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    218c:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    218e:	8e 01       	movw	r16, r28
    2190:	0f 5f       	subi	r16, 0xFF	; 255
    2192:	1f 4f       	sbci	r17, 0xFF	; 255
    2194:	b8 01       	movw	r22, r16
    2196:	50 e0       	ldi	r21, 0x00	; 0
    2198:	0e 94 b5 1a 	call	0x356a	; 0x356a <itoa>
	*this = buf;
    219c:	c7 01       	movw	r24, r14
    219e:	b8 01       	movw	r22, r16
    21a0:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringaSEPKc>
}
    21a4:	62 96       	adiw	r28, 0x12	; 18
    21a6:	0f b6       	in	r0, 0x3f	; 63
    21a8:	f8 94       	cli
    21aa:	de bf       	out	0x3e, r29	; 62
    21ac:	0f be       	out	0x3f, r0	; 63
    21ae:	cd bf       	out	0x3d, r28	; 61
    21b0:	cf 91       	pop	r28
    21b2:	df 91       	pop	r29
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	ff 90       	pop	r15
    21ba:	ef 90       	pop	r14
    21bc:	08 95       	ret

000021be <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    21be:	ef 92       	push	r14
    21c0:	ff 92       	push	r15
    21c2:	0f 93       	push	r16
    21c4:	1f 93       	push	r17
    21c6:	df 93       	push	r29
    21c8:	cf 93       	push	r28
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	29 97       	sbiw	r28, 0x09	; 9
    21d0:	0f b6       	in	r0, 0x3f	; 63
    21d2:	f8 94       	cli
    21d4:	de bf       	out	0x3e, r29	; 62
    21d6:	0f be       	out	0x3f, r0	; 63
    21d8:	cd bf       	out	0x3d, r28	; 61
    21da:	7c 01       	movw	r14, r24
    21dc:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    21de:	f7 01       	movw	r30, r14
    21e0:	11 82       	std	Z+1, r1	; 0x01
    21e2:	10 82       	st	Z, r1
	capacity = 0;
    21e4:	13 82       	std	Z+3, r1	; 0x03
    21e6:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    21e8:	15 82       	std	Z+5, r1	; 0x05
    21ea:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    21ec:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    21ee:	90 e0       	ldi	r25, 0x00	; 0
    21f0:	8e 01       	movw	r16, r28
    21f2:	0f 5f       	subi	r16, 0xFF	; 255
    21f4:	1f 4f       	sbci	r17, 0xFF	; 255
    21f6:	b8 01       	movw	r22, r16
    21f8:	50 e0       	ldi	r21, 0x00	; 0
    21fa:	0e 94 44 1b 	call	0x3688	; 0x3688 <utoa>
	*this = buf;
    21fe:	c7 01       	movw	r24, r14
    2200:	b8 01       	movw	r22, r16
    2202:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringaSEPKc>
}
    2206:	29 96       	adiw	r28, 0x09	; 9
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	de bf       	out	0x3e, r29	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	cd bf       	out	0x3d, r28	; 61
    2212:	cf 91       	pop	r28
    2214:	df 91       	pop	r29
    2216:	1f 91       	pop	r17
    2218:	0f 91       	pop	r16
    221a:	ff 90       	pop	r15
    221c:	ef 90       	pop	r14
    221e:	08 95       	ret

00002220 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    2220:	df 93       	push	r29
    2222:	cf 93       	push	r28
    2224:	00 d0       	rcall	.+0      	; 0x2226 <_ZN6StringC1Ec+0x6>
    2226:	cd b7       	in	r28, 0x3d	; 61
    2228:	de b7       	in	r29, 0x3e	; 62
    222a:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    222c:	11 82       	std	Z+1, r1	; 0x01
    222e:	10 82       	st	Z, r1
	capacity = 0;
    2230:	13 82       	std	Z+3, r1	; 0x03
    2232:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2234:	15 82       	std	Z+5, r1	; 0x05
    2236:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2238:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    223a:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    223c:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    223e:	be 01       	movw	r22, r28
    2240:	6f 5f       	subi	r22, 0xFF	; 255
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringaSEPKc>
}
    2248:	0f 90       	pop	r0
    224a:	0f 90       	pop	r0
    224c:	cf 91       	pop	r28
    224e:	df 91       	pop	r29
    2250:	08 95       	ret

00002252 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    2252:	ef 92       	push	r14
    2254:	ff 92       	push	r15
    2256:	0f 93       	push	r16
    2258:	1f 93       	push	r17
    225a:	cf 93       	push	r28
    225c:	df 93       	push	r29
    225e:	ec 01       	movw	r28, r24
    2260:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
    2262:	0c 81       	ldd	r16, Y+4	; 0x04
    2264:	1d 81       	ldd	r17, Y+5	; 0x05
	if (!cstr) return 0;
    2266:	61 15       	cp	r22, r1
    2268:	71 05       	cpc	r23, r1
    226a:	b9 f0       	breq	.+46     	; 0x229a <_ZN6String6concatEPKcj+0x48>
	if (length == 0) return 1;
    226c:	41 15       	cp	r20, r1
    226e:	51 05       	cpc	r21, r1
    2270:	91 f0       	breq	.+36     	; 0x2296 <_ZN6String6concatEPKcj+0x44>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    2272:	04 0f       	add	r16, r20
    2274:	15 1f       	adc	r17, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    2276:	b8 01       	movw	r22, r16
    2278:	0e 94 84 0f 	call	0x1f08	; 0x1f08 <_ZN6String7reserveEj>
    227c:	88 23       	and	r24, r24
    227e:	69 f0       	breq	.+26     	; 0x229a <_ZN6String6concatEPKcj+0x48>
	strcpy(buffer + len, cstr);
    2280:	28 81       	ld	r18, Y
    2282:	39 81       	ldd	r19, Y+1	; 0x01
    2284:	8c 81       	ldd	r24, Y+4	; 0x04
    2286:	9d 81       	ldd	r25, Y+5	; 0x05
    2288:	82 0f       	add	r24, r18
    228a:	93 1f       	adc	r25, r19
    228c:	b7 01       	movw	r22, r14
    228e:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <strcpy>
	len = newlen;
    2292:	1d 83       	std	Y+5, r17	; 0x05
    2294:	0c 83       	std	Y+4, r16	; 0x04

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
    2296:	81 e0       	ldi	r24, 0x01	; 1
    2298:	01 c0       	rjmp	.+2      	; 0x229c <_ZN6String6concatEPKcj+0x4a>
	if (!reserve(newlen)) return 0;
    229a:	80 e0       	ldi	r24, 0x00	; 0
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    229c:	df 91       	pop	r29
    229e:	cf 91       	pop	r28
    22a0:	1f 91       	pop	r17
    22a2:	0f 91       	pop	r16
    22a4:	ff 90       	pop	r15
    22a6:	ef 90       	pop	r14
    22a8:	08 95       	ret

000022aa <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    22aa:	fb 01       	movw	r30, r22
	return concat(s.buffer, s.len);
    22ac:	60 81       	ld	r22, Z
    22ae:	71 81       	ldd	r23, Z+1	; 0x01
    22b0:	44 81       	ldd	r20, Z+4	; 0x04
    22b2:	55 81       	ldd	r21, Z+5	; 0x05
    22b4:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN6String6concatEPKcj>
}
    22b8:	08 95       	ret

000022ba <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    22ba:	61 15       	cp	r22, r1
    22bc:	71 05       	cpc	r23, r1
    22be:	61 f0       	breq	.+24     	; 0x22d8 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
    22c0:	db 01       	movw	r26, r22
    22c2:	0d 90       	ld	r0, X+
    22c4:	00 20       	and	r0, r0
    22c6:	e9 f7       	brne	.-6      	; 0x22c2 <_ZN6String6concatEPKc+0x8>
    22c8:	ad 01       	movw	r20, r26
    22ca:	41 50       	subi	r20, 0x01	; 1
    22cc:	50 40       	sbci	r21, 0x00	; 0
    22ce:	46 1b       	sub	r20, r22
    22d0:	57 0b       	sbc	r21, r23
    22d2:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN6String6concatEPKcj>
    22d6:	08 95       	ret
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    22d8:	80 e0       	ldi	r24, 0x00	; 0
	return concat(cstr, strlen(cstr));
}
    22da:	08 95       	ret

000022dc <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    22dc:	df 93       	push	r29
    22de:	cf 93       	push	r28
    22e0:	00 d0       	rcall	.+0      	; 0x22e2 <_ZN6String6concatEc+0x6>
    22e2:	cd b7       	in	r28, 0x3d	; 61
    22e4:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    22e6:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    22e8:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    22ea:	be 01       	movw	r22, r28
    22ec:	6f 5f       	subi	r22, 0xFF	; 255
    22ee:	7f 4f       	sbci	r23, 0xFF	; 255
    22f0:	41 e0       	ldi	r20, 0x01	; 1
    22f2:	50 e0       	ldi	r21, 0x00	; 0
    22f4:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN6String6concatEPKcj>
}
    22f8:	0f 90       	pop	r0
    22fa:	0f 90       	pop	r0
    22fc:	cf 91       	pop	r28
    22fe:	df 91       	pop	r29
    2300:	08 95       	ret

00002302 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    2302:	ef 92       	push	r14
    2304:	ff 92       	push	r15
    2306:	0f 93       	push	r16
    2308:	1f 93       	push	r17
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	00 d0       	rcall	.+0      	; 0x2310 <_ZN6String6concatEh+0xe>
    2310:	00 d0       	rcall	.+0      	; 0x2312 <_ZN6String6concatEh+0x10>
    2312:	cd b7       	in	r28, 0x3d	; 61
    2314:	de b7       	in	r29, 0x3e	; 62
    2316:	7c 01       	movw	r14, r24
    2318:	86 2f       	mov	r24, r22
	char buf[4];
	itoa(num, buf, 10);
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	8e 01       	movw	r16, r28
    231e:	0f 5f       	subi	r16, 0xFF	; 255
    2320:	1f 4f       	sbci	r17, 0xFF	; 255
    2322:	b8 01       	movw	r22, r16
    2324:	4a e0       	ldi	r20, 0x0A	; 10
    2326:	50 e0       	ldi	r21, 0x00	; 0
    2328:	0e 94 b5 1a 	call	0x356a	; 0x356a <itoa>
	return concat(buf, strlen(buf));
    232c:	f8 01       	movw	r30, r16
    232e:	01 90       	ld	r0, Z+
    2330:	00 20       	and	r0, r0
    2332:	e9 f7       	brne	.-6      	; 0x232e <_ZN6String6concatEh+0x2c>
    2334:	af 01       	movw	r20, r30
    2336:	41 50       	subi	r20, 0x01	; 1
    2338:	50 40       	sbci	r21, 0x00	; 0
    233a:	40 1b       	sub	r20, r16
    233c:	51 0b       	sbc	r21, r17
    233e:	c7 01       	movw	r24, r14
    2340:	b8 01       	movw	r22, r16
    2342:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN6String6concatEPKcj>
}
    2346:	0f 90       	pop	r0
    2348:	0f 90       	pop	r0
    234a:	0f 90       	pop	r0
    234c:	0f 90       	pop	r0
    234e:	cf 91       	pop	r28
    2350:	df 91       	pop	r29
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	ff 90       	pop	r15
    2358:	ef 90       	pop	r14
    235a:	08 95       	ret

0000235c <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    235c:	ef 92       	push	r14
    235e:	ff 92       	push	r15
    2360:	0f 93       	push	r16
    2362:	1f 93       	push	r17
    2364:	df 93       	push	r29
    2366:	cf 93       	push	r28
    2368:	cd b7       	in	r28, 0x3d	; 61
    236a:	de b7       	in	r29, 0x3e	; 62
    236c:	27 97       	sbiw	r28, 0x07	; 7
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	de bf       	out	0x3e, r29	; 62
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	cd bf       	out	0x3d, r28	; 61
    2378:	7c 01       	movw	r14, r24
    237a:	cb 01       	movw	r24, r22
	char buf[7];
	itoa(num, buf, 10);
    237c:	8e 01       	movw	r16, r28
    237e:	0f 5f       	subi	r16, 0xFF	; 255
    2380:	1f 4f       	sbci	r17, 0xFF	; 255
    2382:	b8 01       	movw	r22, r16
    2384:	4a e0       	ldi	r20, 0x0A	; 10
    2386:	50 e0       	ldi	r21, 0x00	; 0
    2388:	0e 94 b5 1a 	call	0x356a	; 0x356a <itoa>
	return concat(buf, strlen(buf));
    238c:	f8 01       	movw	r30, r16
    238e:	01 90       	ld	r0, Z+
    2390:	00 20       	and	r0, r0
    2392:	e9 f7       	brne	.-6      	; 0x238e <_ZN6String6concatEi+0x32>
    2394:	af 01       	movw	r20, r30
    2396:	41 50       	subi	r20, 0x01	; 1
    2398:	50 40       	sbci	r21, 0x00	; 0
    239a:	40 1b       	sub	r20, r16
    239c:	51 0b       	sbc	r21, r17
    239e:	c7 01       	movw	r24, r14
    23a0:	b8 01       	movw	r22, r16
    23a2:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN6String6concatEPKcj>
}
    23a6:	27 96       	adiw	r28, 0x07	; 7
    23a8:	0f b6       	in	r0, 0x3f	; 63
    23aa:	f8 94       	cli
    23ac:	de bf       	out	0x3e, r29	; 62
    23ae:	0f be       	out	0x3f, r0	; 63
    23b0:	cd bf       	out	0x3d, r28	; 61
    23b2:	cf 91       	pop	r28
    23b4:	df 91       	pop	r29
    23b6:	1f 91       	pop	r17
    23b8:	0f 91       	pop	r16
    23ba:	ff 90       	pop	r15
    23bc:	ef 90       	pop	r14
    23be:	08 95       	ret

000023c0 <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
    23c0:	ef 92       	push	r14
    23c2:	ff 92       	push	r15
    23c4:	0f 93       	push	r16
    23c6:	1f 93       	push	r17
    23c8:	df 93       	push	r29
    23ca:	cf 93       	push	r28
    23cc:	00 d0       	rcall	.+0      	; 0x23ce <_ZN6String6concatEj+0xe>
    23ce:	00 d0       	rcall	.+0      	; 0x23d0 <_ZN6String6concatEj+0x10>
    23d0:	00 d0       	rcall	.+0      	; 0x23d2 <_ZN6String6concatEj+0x12>
    23d2:	cd b7       	in	r28, 0x3d	; 61
    23d4:	de b7       	in	r29, 0x3e	; 62
    23d6:	7c 01       	movw	r14, r24
    23d8:	cb 01       	movw	r24, r22
	char buf[6];
	utoa(num, buf, 10);
    23da:	8e 01       	movw	r16, r28
    23dc:	0f 5f       	subi	r16, 0xFF	; 255
    23de:	1f 4f       	sbci	r17, 0xFF	; 255
    23e0:	b8 01       	movw	r22, r16
    23e2:	4a e0       	ldi	r20, 0x0A	; 10
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	0e 94 44 1b 	call	0x3688	; 0x3688 <utoa>
	return concat(buf, strlen(buf));
    23ea:	f8 01       	movw	r30, r16
    23ec:	01 90       	ld	r0, Z+
    23ee:	00 20       	and	r0, r0
    23f0:	e9 f7       	brne	.-6      	; 0x23ec <_ZN6String6concatEj+0x2c>
    23f2:	af 01       	movw	r20, r30
    23f4:	41 50       	subi	r20, 0x01	; 1
    23f6:	50 40       	sbci	r21, 0x00	; 0
    23f8:	40 1b       	sub	r20, r16
    23fa:	51 0b       	sbc	r21, r17
    23fc:	c7 01       	movw	r24, r14
    23fe:	b8 01       	movw	r22, r16
    2400:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN6String6concatEPKcj>
}
    2404:	26 96       	adiw	r28, 0x06	; 6
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	1f 91       	pop	r17
    2416:	0f 91       	pop	r16
    2418:	ff 90       	pop	r15
    241a:	ef 90       	pop	r14
    241c:	08 95       	ret

0000241e <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
    241e:	ef 92       	push	r14
    2420:	ff 92       	push	r15
    2422:	0f 93       	push	r16
    2424:	1f 93       	push	r17
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	cd b7       	in	r28, 0x3d	; 61
    242c:	de b7       	in	r29, 0x3e	; 62
    242e:	2c 97       	sbiw	r28, 0x0c	; 12
    2430:	0f b6       	in	r0, 0x3f	; 63
    2432:	f8 94       	cli
    2434:	de bf       	out	0x3e, r29	; 62
    2436:	0f be       	out	0x3f, r0	; 63
    2438:	cd bf       	out	0x3d, r28	; 61
    243a:	7c 01       	movw	r14, r24
    243c:	cb 01       	movw	r24, r22
    243e:	ba 01       	movw	r22, r20
	char buf[12];
	ltoa(num, buf, 10);
    2440:	8e 01       	movw	r16, r28
    2442:	0f 5f       	subi	r16, 0xFF	; 255
    2444:	1f 4f       	sbci	r17, 0xFF	; 255
    2446:	a8 01       	movw	r20, r16
    2448:	2a e0       	ldi	r18, 0x0A	; 10
    244a:	30 e0       	ldi	r19, 0x00	; 0
    244c:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <ltoa>
	return concat(buf, strlen(buf));
    2450:	f8 01       	movw	r30, r16
    2452:	01 90       	ld	r0, Z+
    2454:	00 20       	and	r0, r0
    2456:	e9 f7       	brne	.-6      	; 0x2452 <_ZN6String6concatEl+0x34>
    2458:	af 01       	movw	r20, r30
    245a:	41 50       	subi	r20, 0x01	; 1
    245c:	50 40       	sbci	r21, 0x00	; 0
    245e:	40 1b       	sub	r20, r16
    2460:	51 0b       	sbc	r21, r17
    2462:	c7 01       	movw	r24, r14
    2464:	b8 01       	movw	r22, r16
    2466:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN6String6concatEPKcj>
}
    246a:	2c 96       	adiw	r28, 0x0c	; 12
    246c:	0f b6       	in	r0, 0x3f	; 63
    246e:	f8 94       	cli
    2470:	de bf       	out	0x3e, r29	; 62
    2472:	0f be       	out	0x3f, r0	; 63
    2474:	cd bf       	out	0x3d, r28	; 61
    2476:	cf 91       	pop	r28
    2478:	df 91       	pop	r29
    247a:	1f 91       	pop	r17
    247c:	0f 91       	pop	r16
    247e:	ff 90       	pop	r15
    2480:	ef 90       	pop	r14
    2482:	08 95       	ret

00002484 <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    2484:	ef 92       	push	r14
    2486:	ff 92       	push	r15
    2488:	0f 93       	push	r16
    248a:	1f 93       	push	r17
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	cd b7       	in	r28, 0x3d	; 61
    2492:	de b7       	in	r29, 0x3e	; 62
    2494:	2b 97       	sbiw	r28, 0x0b	; 11
    2496:	0f b6       	in	r0, 0x3f	; 63
    2498:	f8 94       	cli
    249a:	de bf       	out	0x3e, r29	; 62
    249c:	0f be       	out	0x3f, r0	; 63
    249e:	cd bf       	out	0x3d, r28	; 61
    24a0:	7c 01       	movw	r14, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	ba 01       	movw	r22, r20
	char buf[11];
	ultoa(num, buf, 10);
    24a6:	8e 01       	movw	r16, r28
    24a8:	0f 5f       	subi	r16, 0xFF	; 255
    24aa:	1f 4f       	sbci	r17, 0xFF	; 255
    24ac:	a8 01       	movw	r20, r16
    24ae:	2a e0       	ldi	r18, 0x0A	; 10
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	0e 94 1f 1b 	call	0x363e	; 0x363e <ultoa>
	return concat(buf, strlen(buf));
    24b6:	f8 01       	movw	r30, r16
    24b8:	01 90       	ld	r0, Z+
    24ba:	00 20       	and	r0, r0
    24bc:	e9 f7       	brne	.-6      	; 0x24b8 <_ZN6String6concatEm+0x34>
    24be:	af 01       	movw	r20, r30
    24c0:	41 50       	subi	r20, 0x01	; 1
    24c2:	50 40       	sbci	r21, 0x00	; 0
    24c4:	40 1b       	sub	r20, r16
    24c6:	51 0b       	sbc	r21, r17
    24c8:	c7 01       	movw	r24, r14
    24ca:	b8 01       	movw	r22, r16
    24cc:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN6String6concatEPKcj>
}
    24d0:	2b 96       	adiw	r28, 0x0b	; 11
    24d2:	0f b6       	in	r0, 0x3f	; 63
    24d4:	f8 94       	cli
    24d6:	de bf       	out	0x3e, r29	; 62
    24d8:	0f be       	out	0x3f, r0	; 63
    24da:	cd bf       	out	0x3d, r28	; 61
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	1f 91       	pop	r17
    24e2:	0f 91       	pop	r16
    24e4:	ff 90       	pop	r15
    24e6:	ef 90       	pop	r14
    24e8:	08 95       	ret

000024ea <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    24ea:	0f 93       	push	r16
    24ec:	1f 93       	push	r17
    24ee:	8c 01       	movw	r16, r24
    24f0:	fb 01       	movw	r30, r22
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    24f2:	60 81       	ld	r22, Z
    24f4:	71 81       	ldd	r23, Z+1	; 0x01
    24f6:	44 81       	ldd	r20, Z+4	; 0x04
    24f8:	55 81       	ldd	r21, Z+5	; 0x05
    24fa:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN6String6concatEPKcj>
    24fe:	88 23       	and	r24, r24
    2500:	19 f4       	brne	.+6      	; 0x2508 <_ZplRK15StringSumHelperRK6String+0x1e>
    2502:	c8 01       	movw	r24, r16
    2504:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_ZN6String10invalidateEv>
	return a;
}
    2508:	c8 01       	movw	r24, r16
    250a:	1f 91       	pop	r17
    250c:	0f 91       	pop	r16
    250e:	08 95       	ret

00002510 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    2510:	0f 93       	push	r16
    2512:	1f 93       	push	r17
    2514:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    2516:	61 15       	cp	r22, r1
    2518:	71 05       	cpc	r23, r1
    251a:	69 f0       	breq	.+26     	; 0x2536 <_ZplRK15StringSumHelperPKc+0x26>
    251c:	db 01       	movw	r26, r22
    251e:	0d 90       	ld	r0, X+
    2520:	00 20       	and	r0, r0
    2522:	e9 f7       	brne	.-6      	; 0x251e <_ZplRK15StringSumHelperPKc+0xe>
    2524:	ad 01       	movw	r20, r26
    2526:	41 50       	subi	r20, 0x01	; 1
    2528:	50 40       	sbci	r21, 0x00	; 0
    252a:	46 1b       	sub	r20, r22
    252c:	57 0b       	sbc	r21, r23
    252e:	0e 94 29 11 	call	0x2252	; 0x2252 <_ZN6String6concatEPKcj>
    2532:	88 23       	and	r24, r24
    2534:	19 f4       	brne	.+6      	; 0x253c <_ZplRK15StringSumHelperPKc+0x2c>
    2536:	c8 01       	movw	r24, r16
    2538:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_ZN6String10invalidateEv>
	return a;
}
    253c:	c8 01       	movw	r24, r16
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	08 95       	ret

00002544 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    2544:	0f 93       	push	r16
    2546:	1f 93       	push	r17
    2548:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    254a:	0e 94 6e 11 	call	0x22dc	; 0x22dc <_ZN6String6concatEc>
    254e:	88 23       	and	r24, r24
    2550:	19 f4       	brne	.+6      	; 0x2558 <_ZplRK15StringSumHelperc+0x14>
    2552:	c8 01       	movw	r24, r16
    2554:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_ZN6String10invalidateEv>
	return a;
}
    2558:	c8 01       	movw	r24, r16
    255a:	1f 91       	pop	r17
    255c:	0f 91       	pop	r16
    255e:	08 95       	ret

00002560 <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
    2560:	0f 93       	push	r16
    2562:	1f 93       	push	r17
    2564:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    2566:	0e 94 81 11 	call	0x2302	; 0x2302 <_ZN6String6concatEh>
    256a:	88 23       	and	r24, r24
    256c:	19 f4       	brne	.+6      	; 0x2574 <_ZplRK15StringSumHelperh+0x14>
    256e:	c8 01       	movw	r24, r16
    2570:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_ZN6String10invalidateEv>
	return a;
}
    2574:	c8 01       	movw	r24, r16
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	08 95       	ret

0000257c <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    257c:	0f 93       	push	r16
    257e:	1f 93       	push	r17
    2580:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    2582:	0e 94 ae 11 	call	0x235c	; 0x235c <_ZN6String6concatEi>
    2586:	88 23       	and	r24, r24
    2588:	19 f4       	brne	.+6      	; 0x2590 <_ZplRK15StringSumHelperi+0x14>
    258a:	c8 01       	movw	r24, r16
    258c:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_ZN6String10invalidateEv>
	return a;
}
    2590:	c8 01       	movw	r24, r16
    2592:	1f 91       	pop	r17
    2594:	0f 91       	pop	r16
    2596:	08 95       	ret

00002598 <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    2598:	0f 93       	push	r16
    259a:	1f 93       	push	r17
    259c:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    259e:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <_ZN6String6concatEj>
    25a2:	88 23       	and	r24, r24
    25a4:	19 f4       	brne	.+6      	; 0x25ac <_ZplRK15StringSumHelperj+0x14>
    25a6:	c8 01       	movw	r24, r16
    25a8:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_ZN6String10invalidateEv>
	return a;
}
    25ac:	c8 01       	movw	r24, r16
    25ae:	1f 91       	pop	r17
    25b0:	0f 91       	pop	r16
    25b2:	08 95       	ret

000025b4 <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    25b4:	0f 93       	push	r16
    25b6:	1f 93       	push	r17
    25b8:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    25ba:	0e 94 0f 12 	call	0x241e	; 0x241e <_ZN6String6concatEl>
    25be:	88 23       	and	r24, r24
    25c0:	19 f4       	brne	.+6      	; 0x25c8 <_ZplRK15StringSumHelperl+0x14>
    25c2:	c8 01       	movw	r24, r16
    25c4:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_ZN6String10invalidateEv>
	return a;
}
    25c8:	c8 01       	movw	r24, r16
    25ca:	1f 91       	pop	r17
    25cc:	0f 91       	pop	r16
    25ce:	08 95       	ret

000025d0 <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    25d0:	0f 93       	push	r16
    25d2:	1f 93       	push	r17
    25d4:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    25d6:	0e 94 42 12 	call	0x2484	; 0x2484 <_ZN6String6concatEm>
    25da:	88 23       	and	r24, r24
    25dc:	19 f4       	brne	.+6      	; 0x25e4 <_ZplRK15StringSumHelperm+0x14>
    25de:	c8 01       	movw	r24, r16
    25e0:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <_ZN6String10invalidateEv>
	return a;
}
    25e4:	c8 01       	movw	r24, r16
    25e6:	1f 91       	pop	r17
    25e8:	0f 91       	pop	r16
    25ea:	08 95       	ret

000025ec <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    25ec:	cf 93       	push	r28
    25ee:	df 93       	push	r29
    25f0:	fc 01       	movw	r30, r24
    25f2:	db 01       	movw	r26, r22
	if (!buffer || !s.buffer) {
    25f4:	80 81       	ld	r24, Z
    25f6:	91 81       	ldd	r25, Z+1	; 0x01
    25f8:	00 97       	sbiw	r24, 0x00	; 0
    25fa:	31 f0       	breq	.+12     	; 0x2608 <_ZNK6String9compareToERKS_+0x1c>
    25fc:	6d 91       	ld	r22, X+
    25fe:	7c 91       	ld	r23, X
    2600:	11 97       	sbiw	r26, 0x01	; 1
    2602:	61 15       	cp	r22, r1
    2604:	71 05       	cpc	r23, r1
    2606:	e9 f4       	brne	.+58     	; 0x2642 <_ZNK6String9compareToERKS_+0x56>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    2608:	cd 91       	ld	r28, X+
    260a:	dc 91       	ld	r29, X
    260c:	11 97       	sbiw	r26, 0x01	; 1
    260e:	20 97       	sbiw	r28, 0x00	; 0
    2610:	69 f0       	breq	.+26     	; 0x262c <_ZNK6String9compareToERKS_+0x40>
    2612:	14 96       	adiw	r26, 0x04	; 4
    2614:	2d 91       	ld	r18, X+
    2616:	3c 91       	ld	r19, X
    2618:	15 97       	sbiw	r26, 0x05	; 5
    261a:	21 15       	cp	r18, r1
    261c:	31 05       	cpc	r19, r1
    261e:	31 f0       	breq	.+12     	; 0x262c <_ZNK6String9compareToERKS_+0x40>
    2620:	28 81       	ld	r18, Y
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	30 95       	com	r19
    2626:	21 95       	neg	r18
    2628:	3f 4f       	sbci	r19, 0xFF	; 255
    262a:	12 c0       	rjmp	.+36     	; 0x2650 <_ZNK6String9compareToERKS_+0x64>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    262c:	00 97       	sbiw	r24, 0x00	; 0
    262e:	71 f0       	breq	.+28     	; 0x264c <_ZNK6String9compareToERKS_+0x60>
    2630:	24 81       	ldd	r18, Z+4	; 0x04
    2632:	35 81       	ldd	r19, Z+5	; 0x05
    2634:	21 15       	cp	r18, r1
    2636:	31 05       	cpc	r19, r1
    2638:	49 f0       	breq	.+18     	; 0x264c <_ZNK6String9compareToERKS_+0x60>
    263a:	fc 01       	movw	r30, r24
    263c:	20 81       	ld	r18, Z
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	07 c0       	rjmp	.+14     	; 0x2650 <_ZNK6String9compareToERKS_+0x64>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    2642:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <strcmp>
    2646:	28 2f       	mov	r18, r24
    2648:	39 2f       	mov	r19, r25
    264a:	02 c0       	rjmp	.+4      	; 0x2650 <_ZNK6String9compareToERKS_+0x64>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    2650:	c9 01       	movw	r24, r18
    2652:	df 91       	pop	r29
    2654:	cf 91       	pop	r28
    2656:	08 95       	ret

00002658 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    2658:	fc 01       	movw	r30, r24
    265a:	44 81       	ldd	r20, Z+4	; 0x04
    265c:	55 81       	ldd	r21, Z+5	; 0x05
    265e:	fb 01       	movw	r30, r22
    2660:	24 81       	ldd	r18, Z+4	; 0x04
    2662:	35 81       	ldd	r19, Z+5	; 0x05
    2664:	42 17       	cp	r20, r18
    2666:	53 07       	cpc	r21, r19
    2668:	29 f4       	brne	.+10     	; 0x2674 <_ZNK6String6equalsERKS_+0x1c>
    266a:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZNK6String9compareToERKS_>
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    266e:	21 e0       	ldi	r18, 0x01	; 1
    2670:	00 97       	sbiw	r24, 0x00	; 0
    2672:	09 f0       	breq	.+2      	; 0x2676 <_ZNK6String6equalsERKS_+0x1e>
{
	return (len == s2.len && compareTo(s2) == 0);
    2674:	20 e0       	ldi	r18, 0x00	; 0
}
    2676:	82 2f       	mov	r24, r18
    2678:	08 95       	ret

0000267a <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
    267a:	fc 01       	movw	r30, r24
	if (len == 0) return (cstr == NULL || *cstr == 0);
    267c:	84 81       	ldd	r24, Z+4	; 0x04
    267e:	95 81       	ldd	r25, Z+5	; 0x05
    2680:	00 97       	sbiw	r24, 0x00	; 0
    2682:	41 f4       	brne	.+16     	; 0x2694 <_ZNK6String6equalsEPKc+0x1a>
    2684:	61 15       	cp	r22, r1
    2686:	71 05       	cpc	r23, r1
    2688:	19 f0       	breq	.+6      	; 0x2690 <_ZNK6String6equalsEPKc+0x16>
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	fb 01       	movw	r30, r22
    268e:	09 c0       	rjmp	.+18     	; 0x26a2 <_ZNK6String6equalsEPKc+0x28>
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    2690:	81 e0       	ldi	r24, 0x01	; 1
    2692:	08 95       	ret
    2694:	01 90       	ld	r0, Z+
    2696:	f0 81       	ld	r31, Z
    2698:	e0 2d       	mov	r30, r0
	if (cstr == NULL) return buffer[0] == 0;
    269a:	61 15       	cp	r22, r1
    269c:	71 05       	cpc	r23, r1
    269e:	31 f4       	brne	.+12     	; 0x26ac <_ZNK6String6equalsEPKc+0x32>
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 81       	ld	r25, Z
    26a4:	99 23       	and	r25, r25
    26a6:	59 f0       	breq	.+22     	; 0x26be <_ZNK6String6equalsEPKc+0x44>
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	08 95       	ret
	return strcmp(buffer, cstr) == 0;
    26ac:	cf 01       	movw	r24, r30
    26ae:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <strcmp>
    26b2:	9c 01       	movw	r18, r24
    26b4:	81 e0       	ldi	r24, 0x01	; 1
    26b6:	21 15       	cp	r18, r1
    26b8:	31 05       	cpc	r19, r1
    26ba:	09 f0       	breq	.+2      	; 0x26be <_ZNK6String6equalsEPKc+0x44>
    26bc:	80 e0       	ldi	r24, 0x00	; 0
}
    26be:	08 95       	ret

000026c0 <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    26c0:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZNK6String9compareToERKS_>
}
    26c4:	89 2f       	mov	r24, r25
    26c6:	88 1f       	adc	r24, r24
    26c8:	88 27       	eor	r24, r24
    26ca:	88 1f       	adc	r24, r24
    26cc:	08 95       	ret

000026ce <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    26ce:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZNK6String9compareToERKS_>
    26d2:	21 e0       	ldi	r18, 0x01	; 1
    26d4:	18 16       	cp	r1, r24
    26d6:	19 06       	cpc	r1, r25
    26d8:	0c f0       	brlt	.+2      	; 0x26dc <_ZNK6StringgtERKS_+0xe>
    26da:	20 e0       	ldi	r18, 0x00	; 0
}
    26dc:	82 2f       	mov	r24, r18
    26de:	08 95       	ret

000026e0 <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    26e0:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZNK6String9compareToERKS_>
    26e4:	21 e0       	ldi	r18, 0x01	; 1
    26e6:	18 16       	cp	r1, r24
    26e8:	19 06       	cpc	r1, r25
    26ea:	0c f4       	brge	.+2      	; 0x26ee <_ZNK6StringleERKS_+0xe>
    26ec:	20 e0       	ldi	r18, 0x00	; 0
}
    26ee:	82 2f       	mov	r24, r18
    26f0:	08 95       	ret

000026f2 <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    26f2:	0e 94 f6 12 	call	0x25ec	; 0x25ec <_ZNK6String9compareToERKS_>
    26f6:	89 2f       	mov	r24, r25
    26f8:	80 95       	com	r24
}
    26fa:	88 1f       	adc	r24, r24
    26fc:	88 27       	eor	r24, r24
    26fe:	88 1f       	adc	r24, r24
    2700:	08 95       	ret

00002702 <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    2702:	ef 92       	push	r14
    2704:	ff 92       	push	r15
    2706:	0f 93       	push	r16
    2708:	1f 93       	push	r17
    270a:	cf 93       	push	r28
    270c:	df 93       	push	r29
    270e:	fc 01       	movw	r30, r24
    2710:	db 01       	movw	r26, r22
	if (this == &s2) return 1;
    2712:	86 17       	cp	r24, r22
    2714:	97 07       	cpc	r25, r23
    2716:	29 f1       	breq	.+74     	; 0x2762 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
	if (len != s2.len) return 0;
    2718:	84 81       	ldd	r24, Z+4	; 0x04
    271a:	95 81       	ldd	r25, Z+5	; 0x05
    271c:	14 96       	adiw	r26, 0x04	; 4
    271e:	2d 91       	ld	r18, X+
    2720:	3c 91       	ld	r19, X
    2722:	15 97       	sbiw	r26, 0x05	; 5
    2724:	82 17       	cp	r24, r18
    2726:	93 07       	cpc	r25, r19
    2728:	f1 f4       	brne	.+60     	; 0x2766 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len == 0) return 1;
    272a:	00 97       	sbiw	r24, 0x00	; 0
    272c:	d1 f0       	breq	.+52     	; 0x2762 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
    272e:	00 81       	ld	r16, Z
    2730:	11 81       	ldd	r17, Z+1	; 0x01
    2732:	cd 91       	ld	r28, X+
    2734:	dc 91       	ld	r29, X
    2736:	11 97       	sbiw	r26, 0x01	; 1
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    2738:	0f c0       	rjmp	.+30     	; 0x2758 <_ZNK6String16equalsIgnoreCaseERKS_+0x56>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    273a:	99 27       	eor	r25, r25
    273c:	87 fd       	sbrc	r24, 7
    273e:	90 95       	com	r25
    2740:	0e 94 2d 1a 	call	0x345a	; 0x345a <tolower>
    2744:	7c 01       	movw	r14, r24
    2746:	89 91       	ld	r24, Y+
    2748:	99 27       	eor	r25, r25
    274a:	87 fd       	sbrc	r24, 7
    274c:	90 95       	com	r25
    274e:	0e 94 2d 1a 	call	0x345a	; 0x345a <tolower>
    2752:	e8 16       	cp	r14, r24
    2754:	f9 06       	cpc	r15, r25
    2756:	39 f4       	brne	.+14     	; 0x2766 <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    2758:	f8 01       	movw	r30, r16
    275a:	81 91       	ld	r24, Z+
    275c:	8f 01       	movw	r16, r30
    275e:	88 23       	and	r24, r24
    2760:	61 f7       	brne	.-40     	; 0x273a <_ZNK6String16equalsIgnoreCaseERKS_+0x38>

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
    2762:	81 e0       	ldi	r24, 0x01	; 1
    2764:	01 c0       	rjmp	.+2      	; 0x2768 <_ZNK6String16equalsIgnoreCaseERKS_+0x66>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    2766:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return 1;
}
    2768:	df 91       	pop	r29
    276a:	cf 91       	pop	r28
    276c:	1f 91       	pop	r17
    276e:	0f 91       	pop	r16
    2770:	ff 90       	pop	r15
    2772:	ef 90       	pop	r14
    2774:	08 95       	ret

00002776 <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    2776:	fc 01       	movw	r30, r24
    2778:	db 01       	movw	r26, r22
    277a:	ca 01       	movw	r24, r20
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    277c:	14 96       	adiw	r26, 0x04	; 4
    277e:	4d 91       	ld	r20, X+
    2780:	5c 91       	ld	r21, X
    2782:	15 97       	sbiw	r26, 0x05	; 5
    2784:	24 81       	ldd	r18, Z+4	; 0x04
    2786:	35 81       	ldd	r19, Z+5	; 0x05
    2788:	24 1b       	sub	r18, r20
    278a:	35 0b       	sbc	r19, r21
    278c:	28 17       	cp	r18, r24
    278e:	39 07       	cpc	r19, r25
    2790:	a0 f0       	brcs	.+40     	; 0x27ba <_ZNK6String10startsWithERKS_j+0x44>
    2792:	20 81       	ld	r18, Z
    2794:	31 81       	ldd	r19, Z+1	; 0x01
    2796:	21 15       	cp	r18, r1
    2798:	31 05       	cpc	r19, r1
    279a:	79 f0       	breq	.+30     	; 0x27ba <_ZNK6String10startsWithERKS_j+0x44>
    279c:	6d 91       	ld	r22, X+
    279e:	7c 91       	ld	r23, X
    27a0:	11 97       	sbiw	r26, 0x01	; 1
    27a2:	61 15       	cp	r22, r1
    27a4:	71 05       	cpc	r23, r1
    27a6:	59 f0       	breq	.+22     	; 0x27be <_ZNK6String10startsWithERKS_j+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    27a8:	82 0f       	add	r24, r18
    27aa:	93 1f       	adc	r25, r19
    27ac:	0e 94 73 1a 	call	0x34e6	; 0x34e6 <strncmp>
    27b0:	9c 01       	movw	r18, r24
    27b2:	81 e0       	ldi	r24, 0x01	; 1
    27b4:	21 15       	cp	r18, r1
    27b6:	31 05       	cpc	r19, r1
    27b8:	19 f0       	breq	.+6      	; 0x27c0 <_ZNK6String10startsWithERKS_j+0x4a>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    27ba:	80 e0       	ldi	r24, 0x00	; 0
    27bc:	08 95       	ret
    27be:	80 e0       	ldi	r24, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    27c0:	08 95       	ret

000027c2 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    27c2:	fc 01       	movw	r30, r24
    27c4:	44 81       	ldd	r20, Z+4	; 0x04
    27c6:	55 81       	ldd	r21, Z+5	; 0x05
    27c8:	fb 01       	movw	r30, r22
    27ca:	24 81       	ldd	r18, Z+4	; 0x04
    27cc:	35 81       	ldd	r19, Z+5	; 0x05
    27ce:	42 17       	cp	r20, r18
    27d0:	53 07       	cpc	r21, r19
    27d2:	28 f0       	brcs	.+10     	; 0x27de <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
    27d4:	40 e0       	ldi	r20, 0x00	; 0
    27d6:	50 e0       	ldi	r21, 0x00	; 0
    27d8:	0e 94 bb 13 	call	0x2776	; 0x2776 <_ZNK6String10startsWithERKS_j>
    27dc:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    27de:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
    27e0:	08 95       	ret

000027e2 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    27e2:	fc 01       	movw	r30, r24
    27e4:	db 01       	movw	r26, r22
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    27e6:	84 81       	ldd	r24, Z+4	; 0x04
    27e8:	95 81       	ldd	r25, Z+5	; 0x05
    27ea:	14 96       	adiw	r26, 0x04	; 4
    27ec:	4d 91       	ld	r20, X+
    27ee:	5c 91       	ld	r21, X
    27f0:	15 97       	sbiw	r26, 0x05	; 5
    27f2:	84 17       	cp	r24, r20
    27f4:	95 07       	cpc	r25, r21
    27f6:	b0 f0       	brcs	.+44     	; 0x2824 <_ZNK6String8endsWithERKS_+0x42>
    27f8:	20 81       	ld	r18, Z
    27fa:	31 81       	ldd	r19, Z+1	; 0x01
    27fc:	21 15       	cp	r18, r1
    27fe:	31 05       	cpc	r19, r1
    2800:	89 f0       	breq	.+34     	; 0x2824 <_ZNK6String8endsWithERKS_+0x42>
    2802:	6d 91       	ld	r22, X+
    2804:	7c 91       	ld	r23, X
    2806:	11 97       	sbiw	r26, 0x01	; 1
    2808:	61 15       	cp	r22, r1
    280a:	71 05       	cpc	r23, r1
    280c:	69 f0       	breq	.+26     	; 0x2828 <_ZNK6String8endsWithERKS_+0x46>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    280e:	84 1b       	sub	r24, r20
    2810:	95 0b       	sbc	r25, r21
    2812:	82 0f       	add	r24, r18
    2814:	93 1f       	adc	r25, r19
    2816:	0e 94 63 1a 	call	0x34c6	; 0x34c6 <strcmp>
    281a:	9c 01       	movw	r18, r24
    281c:	81 e0       	ldi	r24, 0x01	; 1
    281e:	21 15       	cp	r18, r1
    2820:	31 05       	cpc	r19, r1
    2822:	19 f0       	breq	.+6      	; 0x282a <_ZNK6String8endsWithERKS_+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    2824:	80 e0       	ldi	r24, 0x00	; 0
    2826:	08 95       	ret
    2828:	80 e0       	ldi	r24, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    282a:	08 95       	ret

0000282c <_ZN6String9setCharAtEjc>:
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
    282c:	fc 01       	movw	r30, r24
	if (loc < len) buffer[loc] = c;
    282e:	84 81       	ldd	r24, Z+4	; 0x04
    2830:	95 81       	ldd	r25, Z+5	; 0x05
    2832:	68 17       	cp	r22, r24
    2834:	79 07       	cpc	r23, r25
    2836:	30 f4       	brcc	.+12     	; 0x2844 <_ZN6String9setCharAtEjc+0x18>
    2838:	01 90       	ld	r0, Z+
    283a:	f0 81       	ld	r31, Z
    283c:	e0 2d       	mov	r30, r0
    283e:	e6 0f       	add	r30, r22
    2840:	f7 1f       	adc	r31, r23
    2842:	40 83       	st	Z, r20
    2844:	08 95       	ret

00002846 <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
    2846:	fc 01       	movw	r30, r24
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    2848:	84 81       	ldd	r24, Z+4	; 0x04
    284a:	95 81       	ldd	r25, Z+5	; 0x05
    284c:	68 17       	cp	r22, r24
    284e:	79 07       	cpc	r23, r25
    2850:	20 f4       	brcc	.+8      	; 0x285a <_ZN6StringixEj+0x14>
    2852:	80 81       	ld	r24, Z
    2854:	91 81       	ldd	r25, Z+1	; 0x01
    2856:	00 97       	sbiw	r24, 0x00	; 0
    2858:	29 f4       	brne	.+10     	; 0x2864 <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    285a:	10 92 ea 02 	sts	0x02EA, r1
		return dummy_writable_char;
    285e:	6a ee       	ldi	r22, 0xEA	; 234
    2860:	72 e0       	ldi	r23, 0x02	; 2
    2862:	02 c0       	rjmp	.+4      	; 0x2868 <_ZN6StringixEj+0x22>
	}
	return buffer[index];
    2864:	68 0f       	add	r22, r24
    2866:	79 1f       	adc	r23, r25
}
    2868:	cb 01       	movw	r24, r22
    286a:	08 95       	ret

0000286c <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    286c:	fc 01       	movw	r30, r24
	if (index >= len || !buffer) return 0;
    286e:	84 81       	ldd	r24, Z+4	; 0x04
    2870:	95 81       	ldd	r25, Z+5	; 0x05
    2872:	68 17       	cp	r22, r24
    2874:	79 07       	cpc	r23, r25
    2876:	48 f4       	brcc	.+18     	; 0x288a <_ZNK6StringixEj+0x1e>
    2878:	80 81       	ld	r24, Z
    287a:	91 81       	ldd	r25, Z+1	; 0x01
    287c:	00 97       	sbiw	r24, 0x00	; 0
    287e:	39 f0       	breq	.+14     	; 0x288e <_ZNK6StringixEj+0x22>
	return buffer[index];
    2880:	68 0f       	add	r22, r24
    2882:	79 1f       	adc	r23, r25
    2884:	fb 01       	movw	r30, r22
    2886:	80 81       	ld	r24, Z
    2888:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    288a:	80 e0       	ldi	r24, 0x00	; 0
    288c:	08 95       	ret
    288e:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    2890:	08 95       	ret

00002892 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    2892:	0e 94 36 14 	call	0x286c	; 0x286c <_ZNK6StringixEj>
}
    2896:	08 95       	ret

00002898 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	fc 01       	movw	r30, r24
    28a2:	8b 01       	movw	r16, r22
	if (!bufsize || !buf) return;
    28a4:	41 15       	cp	r20, r1
    28a6:	51 05       	cpc	r21, r1
    28a8:	f1 f0       	breq	.+60     	; 0x28e6 <_ZNK6String8getBytesEPhjj+0x4e>
    28aa:	61 15       	cp	r22, r1
    28ac:	71 05       	cpc	r23, r1
    28ae:	d9 f0       	breq	.+54     	; 0x28e6 <_ZNK6String8getBytesEPhjj+0x4e>
	if (index >= len) {
    28b0:	c4 81       	ldd	r28, Z+4	; 0x04
    28b2:	d5 81       	ldd	r29, Z+5	; 0x05
    28b4:	2c 17       	cp	r18, r28
    28b6:	3d 07       	cpc	r19, r29
    28b8:	18 f0       	brcs	.+6      	; 0x28c0 <_ZNK6String8getBytesEPhjj+0x28>
		buf[0] = 0;
    28ba:	fb 01       	movw	r30, r22
    28bc:	10 82       	st	Z, r1
		return;
    28be:	13 c0       	rjmp	.+38     	; 0x28e6 <_ZNK6String8getBytesEPhjj+0x4e>
	}
	unsigned int n = bufsize - 1;
    28c0:	41 50       	subi	r20, 0x01	; 1
    28c2:	50 40       	sbci	r21, 0x00	; 0
	if (n > len - index) n = len - index;
    28c4:	c2 1b       	sub	r28, r18
    28c6:	d3 0b       	sbc	r29, r19
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    28c8:	4c 17       	cp	r20, r28
    28ca:	5d 07       	cpc	r21, r29
    28cc:	08 f4       	brcc	.+2      	; 0x28d0 <_ZNK6String8getBytesEPhjj+0x38>
    28ce:	ea 01       	movw	r28, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    28d0:	60 81       	ld	r22, Z
    28d2:	71 81       	ldd	r23, Z+1	; 0x01
    28d4:	62 0f       	add	r22, r18
    28d6:	73 1f       	adc	r23, r19
    28d8:	c8 01       	movw	r24, r16
    28da:	ae 01       	movw	r20, r28
    28dc:	0e 94 81 1a 	call	0x3502	; 0x3502 <strncpy>
	buf[n] = 0;
    28e0:	c0 0f       	add	r28, r16
    28e2:	d1 1f       	adc	r29, r17
    28e4:	18 82       	st	Y, r1
}
    28e6:	df 91       	pop	r29
    28e8:	cf 91       	pop	r28
    28ea:	1f 91       	pop	r17
    28ec:	0f 91       	pop	r16
    28ee:	08 95       	ret

000028f0 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    28f0:	cf 93       	push	r28
    28f2:	df 93       	push	r29
    28f4:	fc 01       	movw	r30, r24
    28f6:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    28f8:	24 81       	ldd	r18, Z+4	; 0x04
    28fa:	35 81       	ldd	r19, Z+5	; 0x05
    28fc:	42 17       	cp	r20, r18
    28fe:	53 07       	cpc	r21, r19
    2900:	78 f4       	brcc	.+30     	; 0x2920 <_ZNK6String7indexOfEcj+0x30>
	const char* temp = strchr(buffer + fromIndex, ch);
    2902:	c0 81       	ld	r28, Z
    2904:	d1 81       	ldd	r29, Z+1	; 0x01
    2906:	77 27       	eor	r23, r23
    2908:	67 fd       	sbrc	r22, 7
    290a:	70 95       	com	r23
    290c:	8c 0f       	add	r24, r28
    290e:	9d 1f       	adc	r25, r29
    2910:	0e 94 58 1a 	call	0x34b0	; 0x34b0 <strchr>
	if (temp == NULL) return -1;
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	21 f0       	breq	.+8      	; 0x2920 <_ZNK6String7indexOfEcj+0x30>
	return temp - buffer;
    2918:	9c 01       	movw	r18, r24
    291a:	2c 1b       	sub	r18, r28
    291c:	3d 0b       	sbc	r19, r29
    291e:	02 c0       	rjmp	.+4      	; 0x2924 <_ZNK6String7indexOfEcj+0x34>

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
    2920:	2f ef       	ldi	r18, 0xFF	; 255
    2922:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    2924:	c9 01       	movw	r24, r18
    2926:	df 91       	pop	r29
    2928:	cf 91       	pop	r28
    292a:	08 95       	ret

0000292c <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	0e 94 78 14 	call	0x28f0	; 0x28f0 <_ZNK6String7indexOfEcj>
}
    2934:	08 95       	ret

00002936 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    2936:	cf 93       	push	r28
    2938:	df 93       	push	r29
    293a:	fc 01       	movw	r30, r24
    293c:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    293e:	24 81       	ldd	r18, Z+4	; 0x04
    2940:	35 81       	ldd	r19, Z+5	; 0x05
    2942:	42 17       	cp	r20, r18
    2944:	53 07       	cpc	r21, r19
    2946:	78 f4       	brcc	.+30     	; 0x2966 <_ZNK6String7indexOfERKS_j+0x30>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    2948:	c0 81       	ld	r28, Z
    294a:	d1 81       	ldd	r29, Z+1	; 0x01
    294c:	fb 01       	movw	r30, r22
    294e:	60 81       	ld	r22, Z
    2950:	71 81       	ldd	r23, Z+1	; 0x01
    2952:	8c 0f       	add	r24, r28
    2954:	9d 1f       	adc	r25, r29
    2956:	0e 94 9b 1a 	call	0x3536	; 0x3536 <strstr>
	if (found == NULL) return -1;
    295a:	00 97       	sbiw	r24, 0x00	; 0
    295c:	21 f0       	breq	.+8      	; 0x2966 <_ZNK6String7indexOfERKS_j+0x30>
	return found - buffer;
    295e:	9c 01       	movw	r18, r24
    2960:	2c 1b       	sub	r18, r28
    2962:	3d 0b       	sbc	r19, r29
    2964:	02 c0       	rjmp	.+4      	; 0x296a <_ZNK6String7indexOfERKS_j+0x34>

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
    2966:	2f ef       	ldi	r18, 0xFF	; 255
    2968:	3f ef       	ldi	r19, 0xFF	; 255
	return found - buffer;
}
    296a:	c9 01       	movw	r24, r18
    296c:	df 91       	pop	r29
    296e:	cf 91       	pop	r28
    2970:	08 95       	ret

00002972 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    2972:	40 e0       	ldi	r20, 0x00	; 0
    2974:	50 e0       	ldi	r21, 0x00	; 0
    2976:	0e 94 9b 14 	call	0x2936	; 0x2936 <_ZNK6String7indexOfERKS_j>
}
    297a:	08 95       	ret

0000297c <_ZNK6String11lastIndexOfEcj>:
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    297c:	df 92       	push	r13
    297e:	ef 92       	push	r14
    2980:	ff 92       	push	r15
    2982:	0f 93       	push	r16
    2984:	1f 93       	push	r17
    2986:	cf 93       	push	r28
    2988:	df 93       	push	r29
    298a:	ec 01       	movw	r28, r24
	if (fromIndex >= len || fromIndex < 0) return -1;
    298c:	8c 81       	ldd	r24, Y+4	; 0x04
    298e:	9d 81       	ldd	r25, Y+5	; 0x05
    2990:	48 17       	cp	r20, r24
    2992:	59 07       	cpc	r21, r25
    2994:	f8 f4       	brcc	.+62     	; 0x29d4 <_ZNK6String11lastIndexOfEcj+0x58>
	char tempchar = buffer[fromIndex + 1];
    2996:	7a 01       	movw	r14, r20
    2998:	08 94       	sec
    299a:	e1 1c       	adc	r14, r1
    299c:	f1 1c       	adc	r15, r1
    299e:	e8 81       	ld	r30, Y
    29a0:	f9 81       	ldd	r31, Y+1	; 0x01
    29a2:	ee 0d       	add	r30, r14
    29a4:	ff 1d       	adc	r31, r15
    29a6:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    29a8:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    29aa:	08 81       	ld	r16, Y
    29ac:	19 81       	ldd	r17, Y+1	; 0x01
    29ae:	77 27       	eor	r23, r23
    29b0:	67 fd       	sbrc	r22, 7
    29b2:	70 95       	com	r23
    29b4:	c8 01       	movw	r24, r16
    29b6:	0e 94 90 1a 	call	0x3520	; 0x3520 <strrchr>
	buffer[fromIndex + 1] = tempchar;
    29ba:	0e 0d       	add	r16, r14
    29bc:	1f 1d       	adc	r17, r15
    29be:	f8 01       	movw	r30, r16
    29c0:	d0 82       	st	Z, r13
	if (temp == NULL) return -1;
    29c2:	00 97       	sbiw	r24, 0x00	; 0
    29c4:	39 f0       	breq	.+14     	; 0x29d4 <_ZNK6String11lastIndexOfEcj+0x58>
	return temp - buffer;
    29c6:	28 81       	ld	r18, Y
    29c8:	39 81       	ldd	r19, Y+1	; 0x01
    29ca:	ac 01       	movw	r20, r24
    29cc:	42 1b       	sub	r20, r18
    29ce:	53 0b       	sbc	r21, r19
    29d0:	9a 01       	movw	r18, r20
    29d2:	02 c0       	rjmp	.+4      	; 0x29d8 <_ZNK6String11lastIndexOfEcj+0x5c>
	if (fromIndex >= len || fromIndex < 0) return -1;
	char tempchar = buffer[fromIndex + 1];
	buffer[fromIndex + 1] = '\0';
	char* temp = strrchr( buffer, ch );
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
    29d4:	2f ef       	ldi	r18, 0xFF	; 255
    29d6:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    29d8:	c9 01       	movw	r24, r18
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	1f 91       	pop	r17
    29e0:	0f 91       	pop	r16
    29e2:	ff 90       	pop	r15
    29e4:	ef 90       	pop	r14
    29e6:	df 90       	pop	r13
    29e8:	08 95       	ret

000029ea <_ZNK6String11lastIndexOfEc>:
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
    29ea:	fc 01       	movw	r30, r24
    29ec:	44 81       	ldd	r20, Z+4	; 0x04
    29ee:	55 81       	ldd	r21, Z+5	; 0x05
    29f0:	41 50       	subi	r20, 0x01	; 1
    29f2:	50 40       	sbci	r21, 0x00	; 0
    29f4:	0e 94 be 14 	call	0x297c	; 0x297c <_ZNK6String11lastIndexOfEcj>
}
    29f8:	08 95       	ret

000029fa <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    29fa:	af 92       	push	r10
    29fc:	bf 92       	push	r11
    29fe:	cf 92       	push	r12
    2a00:	df 92       	push	r13
    2a02:	ef 92       	push	r14
    2a04:	ff 92       	push	r15
    2a06:	0f 93       	push	r16
    2a08:	1f 93       	push	r17
    2a0a:	cf 93       	push	r28
    2a0c:	df 93       	push	r29
    2a0e:	fc 01       	movw	r30, r24
    2a10:	6b 01       	movw	r12, r22
    2a12:	8a 01       	movw	r16, r20
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    2a14:	db 01       	movw	r26, r22
    2a16:	14 96       	adiw	r26, 0x04	; 4
    2a18:	2d 91       	ld	r18, X+
    2a1a:	3c 91       	ld	r19, X
    2a1c:	15 97       	sbiw	r26, 0x05	; 5
    2a1e:	21 15       	cp	r18, r1
    2a20:	31 05       	cpc	r19, r1
    2a22:	51 f1       	breq	.+84     	; 0x2a78 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    2a24:	84 81       	ldd	r24, Z+4	; 0x04
    2a26:	95 81       	ldd	r25, Z+5	; 0x05
    2a28:	00 97       	sbiw	r24, 0x00	; 0
    2a2a:	31 f1       	breq	.+76     	; 0x2a78 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    2a2c:	82 17       	cp	r24, r18
    2a2e:	93 07       	cpc	r25, r19
    2a30:	18 f1       	brcs	.+70     	; 0x2a78 <_ZNK6String11lastIndexOfERKS_j+0x7e>
	if (fromIndex >= len) fromIndex = len - 1;
    2a32:	48 17       	cp	r20, r24
    2a34:	59 07       	cpc	r21, r25
    2a36:	18 f0       	brcs	.+6      	; 0x2a3e <_ZNK6String11lastIndexOfERKS_j+0x44>
    2a38:	8c 01       	movw	r16, r24
    2a3a:	01 50       	subi	r16, 0x01	; 1
    2a3c:	10 40       	sbci	r17, 0x00	; 0
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    2a3e:	e0 80       	ld	r14, Z
    2a40:	f1 80       	ldd	r15, Z+1	; 0x01
    2a42:	c7 01       	movw	r24, r14

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    2a44:	cf ef       	ldi	r28, 0xFF	; 255
    2a46:	df ef       	ldi	r29, 0xFF	; 255
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    2a48:	57 01       	movw	r10, r14
    2a4a:	a0 0e       	add	r10, r16
    2a4c:	b1 1e       	adc	r11, r17
    2a4e:	10 c0       	rjmp	.+32     	; 0x2a70 <_ZNK6String11lastIndexOfERKS_j+0x76>
		p = strstr(p, s2.buffer);
    2a50:	f6 01       	movw	r30, r12
    2a52:	60 81       	ld	r22, Z
    2a54:	71 81       	ldd	r23, Z+1	; 0x01
    2a56:	0e 94 9b 1a 	call	0x3536	; 0x3536 <strstr>
		if (!p) break;
    2a5a:	00 97       	sbiw	r24, 0x00	; 0
    2a5c:	79 f0       	breq	.+30     	; 0x2a7c <_ZNK6String11lastIndexOfERKS_j+0x82>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    2a5e:	9c 01       	movw	r18, r24
    2a60:	2e 19       	sub	r18, r14
    2a62:	3f 09       	sbc	r19, r15
    2a64:	02 17       	cp	r16, r18
    2a66:	13 07       	cpc	r17, r19
    2a68:	08 f4       	brcc	.+2      	; 0x2a6c <_ZNK6String11lastIndexOfERKS_j+0x72>
    2a6a:	9e 01       	movw	r18, r28
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    2a6c:	01 96       	adiw	r24, 0x01	; 1
    2a6e:	e9 01       	movw	r28, r18
    2a70:	a8 16       	cp	r10, r24
    2a72:	b9 06       	cpc	r11, r25
    2a74:	68 f7       	brcc	.-38     	; 0x2a50 <_ZNK6String11lastIndexOfERKS_j+0x56>
    2a76:	02 c0       	rjmp	.+4      	; 0x2a7c <_ZNK6String11lastIndexOfERKS_j+0x82>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    2a78:	cf ef       	ldi	r28, 0xFF	; 255
    2a7a:	df ef       	ldi	r29, 0xFF	; 255
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    2a7c:	ce 01       	movw	r24, r28
    2a7e:	df 91       	pop	r29
    2a80:	cf 91       	pop	r28
    2a82:	1f 91       	pop	r17
    2a84:	0f 91       	pop	r16
    2a86:	ff 90       	pop	r15
    2a88:	ef 90       	pop	r14
    2a8a:	df 90       	pop	r13
    2a8c:	cf 90       	pop	r12
    2a8e:	bf 90       	pop	r11
    2a90:	af 90       	pop	r10
    2a92:	08 95       	ret

00002a94 <_ZNK6String11lastIndexOfERKS_>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    2a94:	fc 01       	movw	r30, r24
    2a96:	44 81       	ldd	r20, Z+4	; 0x04
    2a98:	55 81       	ldd	r21, Z+5	; 0x05
    2a9a:	fb 01       	movw	r30, r22
    2a9c:	24 81       	ldd	r18, Z+4	; 0x04
    2a9e:	35 81       	ldd	r19, Z+5	; 0x05
    2aa0:	42 1b       	sub	r20, r18
    2aa2:	53 0b       	sbc	r21, r19
    2aa4:	0e 94 fd 14 	call	0x29fa	; 0x29fa <_ZNK6String11lastIndexOfERKS_j>
}
    2aa8:	08 95       	ret

00002aaa <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    2aaa:	af 92       	push	r10
    2aac:	bf 92       	push	r11
    2aae:	cf 92       	push	r12
    2ab0:	df 92       	push	r13
    2ab2:	ef 92       	push	r14
    2ab4:	ff 92       	push	r15
    2ab6:	0f 93       	push	r16
    2ab8:	1f 93       	push	r17
    2aba:	cf 93       	push	r28
    2abc:	df 93       	push	r29
    2abe:	f8 2e       	mov	r15, r24
    2ac0:	e9 2e       	mov	r14, r25
    2ac2:	6b 01       	movw	r12, r22
    2ac4:	8a 01       	movw	r16, r20
    2ac6:	e9 01       	movw	r28, r18
	if (left > right) {
    2ac8:	24 17       	cp	r18, r20
    2aca:	35 07       	cpc	r19, r21
    2acc:	48 f4       	brcc	.+18     	; 0x2ae0 <_ZNK6String9substringEjj+0x36>
    2ace:	34 2f       	mov	r19, r20
    2ad0:	21 2f       	mov	r18, r17
    2ad2:	8e 01       	movw	r16, r28
    2ad4:	c9 01       	movw	r24, r18
    2ad6:	a9 2e       	mov	r10, r25
    2ad8:	e5 01       	movw	r28, r10
    2ada:	5e 01       	movw	r10, r28
    2adc:	b2 2e       	mov	r11, r18
    2ade:	e5 01       	movw	r28, r10
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    2ae0:	8f 2d       	mov	r24, r15
    2ae2:	9e 2d       	mov	r25, r14
    2ae4:	62 e0       	ldi	r22, 0x02	; 2
    2ae6:	71 e0       	ldi	r23, 0x01	; 1
    2ae8:	0e 94 c4 0f 	call	0x1f88	; 0x1f88 <_ZN6StringC1EPKc>
	if (left > len) return out;
    2aec:	d6 01       	movw	r26, r12
    2aee:	14 96       	adiw	r26, 0x04	; 4
    2af0:	8d 91       	ld	r24, X+
    2af2:	9c 91       	ld	r25, X
    2af4:	15 97       	sbiw	r26, 0x05	; 5
    2af6:	80 17       	cp	r24, r16
    2af8:	91 07       	cpc	r25, r17
    2afa:	d8 f0       	brcs	.+54     	; 0x2b32 <_ZNK6String9substringEjj+0x88>
    2afc:	8c 17       	cp	r24, r28
    2afe:	9d 07       	cpc	r25, r29
    2b00:	08 f4       	brcc	.+2      	; 0x2b04 <_ZNK6String9substringEjj+0x5a>
    2b02:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    2b04:	d6 01       	movw	r26, r12
    2b06:	ed 91       	ld	r30, X+
    2b08:	fc 91       	ld	r31, X
    2b0a:	11 97       	sbiw	r26, 0x01	; 1
    2b0c:	ec 0f       	add	r30, r28
    2b0e:	fd 1f       	adc	r31, r29
    2b10:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    2b12:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    2b14:	6d 91       	ld	r22, X+
    2b16:	7c 91       	ld	r23, X
    2b18:	60 0f       	add	r22, r16
    2b1a:	71 1f       	adc	r23, r17
    2b1c:	8f 2d       	mov	r24, r15
    2b1e:	9e 2d       	mov	r25, r14
    2b20:	0e 94 05 10 	call	0x200a	; 0x200a <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    2b24:	d6 01       	movw	r26, r12
    2b26:	ed 91       	ld	r30, X+
    2b28:	fc 91       	ld	r31, X
    2b2a:	11 97       	sbiw	r26, 0x01	; 1
    2b2c:	ec 0f       	add	r30, r28
    2b2e:	fd 1f       	adc	r31, r29
    2b30:	b0 82       	st	Z, r11
	return out;
}
    2b32:	8f 2d       	mov	r24, r15
    2b34:	9e 2d       	mov	r25, r14
    2b36:	df 91       	pop	r29
    2b38:	cf 91       	pop	r28
    2b3a:	1f 91       	pop	r17
    2b3c:	0f 91       	pop	r16
    2b3e:	ff 90       	pop	r15
    2b40:	ef 90       	pop	r14
    2b42:	df 90       	pop	r13
    2b44:	cf 90       	pop	r12
    2b46:	bf 90       	pop	r11
    2b48:	af 90       	pop	r10
    2b4a:	08 95       	ret

00002b4c <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    2b4c:	cf 93       	push	r28
    2b4e:	df 93       	push	r29
    2b50:	ec 01       	movw	r28, r24
	return substring(left, len);
    2b52:	fb 01       	movw	r30, r22
    2b54:	24 81       	ldd	r18, Z+4	; 0x04
    2b56:	35 81       	ldd	r19, Z+5	; 0x05
    2b58:	0e 94 55 15 	call	0x2aaa	; 0x2aaa <_ZNK6String9substringEjj>
}
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	df 91       	pop	r29
    2b60:	cf 91       	pop	r28
    2b62:	08 95       	ret

00002b64 <_ZN6String7replaceEcc>:
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    2b64:	dc 01       	movw	r26, r24
    2b66:	ed 91       	ld	r30, X+
    2b68:	fc 91       	ld	r31, X
    2b6a:	11 97       	sbiw	r26, 0x01	; 1
    2b6c:	30 97       	sbiw	r30, 0x00	; 0
    2b6e:	29 f4       	brne	.+10     	; 0x2b7a <_ZN6String7replaceEcc+0x16>
    2b70:	08 95       	ret
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    2b72:	86 17       	cp	r24, r22
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <_ZN6String7replaceEcc+0x14>
    2b76:	40 83       	st	Z, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    2b78:	31 96       	adiw	r30, 0x01	; 1
    2b7a:	80 81       	ld	r24, Z
    2b7c:	88 23       	and	r24, r24
    2b7e:	c9 f7       	brne	.-14     	; 0x2b72 <_ZN6String7replaceEcc+0xe>
    2b80:	08 95       	ret

00002b82 <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    2b82:	2f 92       	push	r2
    2b84:	3f 92       	push	r3
    2b86:	4f 92       	push	r4
    2b88:	5f 92       	push	r5
    2b8a:	6f 92       	push	r6
    2b8c:	7f 92       	push	r7
    2b8e:	8f 92       	push	r8
    2b90:	9f 92       	push	r9
    2b92:	af 92       	push	r10
    2b94:	bf 92       	push	r11
    2b96:	cf 92       	push	r12
    2b98:	df 92       	push	r13
    2b9a:	ef 92       	push	r14
    2b9c:	ff 92       	push	r15
    2b9e:	0f 93       	push	r16
    2ba0:	1f 93       	push	r17
    2ba2:	cf 93       	push	r28
    2ba4:	df 93       	push	r29
    2ba6:	7c 01       	movw	r14, r24
    2ba8:	2b 01       	movw	r4, r22
    2baa:	6a 01       	movw	r12, r20
	if (len == 0 || find.len == 0) return;
    2bac:	dc 01       	movw	r26, r24
    2bae:	14 96       	adiw	r26, 0x04	; 4
    2bb0:	6d 90       	ld	r6, X+
    2bb2:	7c 90       	ld	r7, X
    2bb4:	15 97       	sbiw	r26, 0x05	; 5
    2bb6:	61 14       	cp	r6, r1
    2bb8:	71 04       	cpc	r7, r1
    2bba:	09 f4       	brne	.+2      	; 0x2bbe <_ZN6String7replaceERKS_S1_+0x3c>
    2bbc:	d9 c0       	rjmp	.+434    	; 0x2d70 <_ZN6String7replaceERKS_S1_+0x1ee>
    2bbe:	fb 01       	movw	r30, r22
    2bc0:	84 80       	ldd	r8, Z+4	; 0x04
    2bc2:	95 80       	ldd	r9, Z+5	; 0x05
    2bc4:	81 14       	cp	r8, r1
    2bc6:	91 04       	cpc	r9, r1
    2bc8:	09 f4       	brne	.+2      	; 0x2bcc <_ZN6String7replaceERKS_S1_+0x4a>
    2bca:	d2 c0       	rjmp	.+420    	; 0x2d70 <_ZN6String7replaceERKS_S1_+0x1ee>
	int diff = replace.len - find.len;
    2bcc:	da 01       	movw	r26, r20
    2bce:	14 96       	adiw	r26, 0x04	; 4
    2bd0:	ad 90       	ld	r10, X+
    2bd2:	bc 90       	ld	r11, X
    2bd4:	15 97       	sbiw	r26, 0x05	; 5
    2bd6:	a8 18       	sub	r10, r8
    2bd8:	b9 08       	sbc	r11, r9
	char *readFrom = buffer;
    2bda:	fc 01       	movw	r30, r24
    2bdc:	00 81       	ld	r16, Z
    2bde:	11 81       	ldd	r17, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    2be0:	a1 14       	cp	r10, r1
    2be2:	b1 04       	cpc	r11, r1
    2be4:	f1 f4       	brne	.+60     	; 0x2c22 <_ZN6String7replaceERKS_S1_+0xa0>
    2be6:	13 c0       	rjmp	.+38     	; 0x2c0e <_ZN6String7replaceERKS_S1_+0x8c>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    2be8:	d6 01       	movw	r26, r12
    2bea:	6c 91       	ld	r22, X
    2bec:	11 96       	adiw	r26, 0x01	; 1
    2bee:	7c 91       	ld	r23, X
    2bf0:	11 97       	sbiw	r26, 0x01	; 1
    2bf2:	14 96       	adiw	r26, 0x04	; 4
    2bf4:	4d 91       	ld	r20, X+
    2bf6:	5c 91       	ld	r21, X
    2bf8:	15 97       	sbiw	r26, 0x05	; 5
    2bfa:	ce 01       	movw	r24, r28
    2bfc:	0e 94 3d 1a 	call	0x347a	; 0x347a <memcpy>
			readFrom = foundAt + replace.len;
    2c00:	d6 01       	movw	r26, r12
    2c02:	14 96       	adiw	r26, 0x04	; 4
    2c04:	0d 91       	ld	r16, X+
    2c06:	1c 91       	ld	r17, X
    2c08:	15 97       	sbiw	r26, 0x05	; 5
    2c0a:	0c 0f       	add	r16, r28
    2c0c:	1d 1f       	adc	r17, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    2c0e:	f2 01       	movw	r30, r4
    2c10:	60 81       	ld	r22, Z
    2c12:	71 81       	ldd	r23, Z+1	; 0x01
    2c14:	c8 01       	movw	r24, r16
    2c16:	0e 94 9b 1a 	call	0x3536	; 0x3536 <strstr>
    2c1a:	ec 01       	movw	r28, r24
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	21 f7       	brne	.-56     	; 0x2be8 <_ZN6String7replaceERKS_S1_+0x66>
    2c20:	a7 c0       	rjmp	.+334    	; 0x2d70 <_ZN6String7replaceERKS_S1_+0x1ee>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    2c22:	b7 fc       	sbrc	r11, 7
    2c24:	02 c0       	rjmp	.+4      	; 0x2c2a <_ZN6String7replaceERKS_S1_+0xa8>
    2c26:	e3 01       	movw	r28, r6
    2c28:	42 c0       	rjmp	.+132    	; 0x2cae <_ZN6String7replaceERKS_S1_+0x12c>
    2c2a:	48 01       	movw	r8, r16
    2c2c:	2d c0       	rjmp	.+90     	; 0x2c88 <_ZN6String7replaceERKS_S1_+0x106>
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    2c2e:	e3 01       	movw	r28, r6
    2c30:	c0 1b       	sub	r28, r16
    2c32:	d1 0b       	sbc	r29, r17
			memcpy(writeTo, readFrom, n);
    2c34:	c4 01       	movw	r24, r8
    2c36:	b8 01       	movw	r22, r16
    2c38:	ae 01       	movw	r20, r28
    2c3a:	0e 94 3d 1a 	call	0x347a	; 0x347a <memcpy>
			writeTo += n;
    2c3e:	c8 0d       	add	r28, r8
    2c40:	d9 1d       	adc	r29, r9
			memcpy(writeTo, replace.buffer, replace.len);
    2c42:	d6 01       	movw	r26, r12
    2c44:	6c 91       	ld	r22, X
    2c46:	11 96       	adiw	r26, 0x01	; 1
    2c48:	7c 91       	ld	r23, X
    2c4a:	11 97       	sbiw	r26, 0x01	; 1
    2c4c:	14 96       	adiw	r26, 0x04	; 4
    2c4e:	4d 91       	ld	r20, X+
    2c50:	5c 91       	ld	r21, X
    2c52:	15 97       	sbiw	r26, 0x05	; 5
    2c54:	ce 01       	movw	r24, r28
    2c56:	0e 94 3d 1a 	call	0x347a	; 0x347a <memcpy>
			writeTo += replace.len;
    2c5a:	d6 01       	movw	r26, r12
    2c5c:	14 96       	adiw	r26, 0x04	; 4
    2c5e:	8d 90       	ld	r8, X+
    2c60:	9c 90       	ld	r9, X
    2c62:	15 97       	sbiw	r26, 0x05	; 5
    2c64:	8c 0e       	add	r8, r28
    2c66:	9d 1e       	adc	r9, r29
			readFrom = foundAt + find.len;
    2c68:	f2 01       	movw	r30, r4
    2c6a:	04 81       	ldd	r16, Z+4	; 0x04
    2c6c:	15 81       	ldd	r17, Z+5	; 0x05
    2c6e:	06 0d       	add	r16, r6
    2c70:	17 1d       	adc	r17, r7
			len += diff;
    2c72:	d7 01       	movw	r26, r14
    2c74:	14 96       	adiw	r26, 0x04	; 4
    2c76:	8d 91       	ld	r24, X+
    2c78:	9c 91       	ld	r25, X
    2c7a:	15 97       	sbiw	r26, 0x05	; 5
    2c7c:	8a 0d       	add	r24, r10
    2c7e:	9b 1d       	adc	r25, r11
    2c80:	15 96       	adiw	r26, 0x05	; 5
    2c82:	9c 93       	st	X, r25
    2c84:	8e 93       	st	-X, r24
    2c86:	14 97       	sbiw	r26, 0x04	; 4
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    2c88:	f2 01       	movw	r30, r4
    2c8a:	60 81       	ld	r22, Z
    2c8c:	71 81       	ldd	r23, Z+1	; 0x01
    2c8e:	c8 01       	movw	r24, r16
    2c90:	0e 94 9b 1a 	call	0x3536	; 0x3536 <strstr>
    2c94:	3c 01       	movw	r6, r24
    2c96:	00 97       	sbiw	r24, 0x00	; 0
    2c98:	51 f6       	brne	.-108    	; 0x2c2e <_ZN6String7replaceERKS_S1_+0xac>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    2c9a:	c4 01       	movw	r24, r8
    2c9c:	b8 01       	movw	r22, r16
    2c9e:	0e 94 6c 1a 	call	0x34d8	; 0x34d8 <strcpy>
    2ca2:	66 c0       	rjmp	.+204    	; 0x2d70 <_ZN6String7replaceERKS_S1_+0x1ee>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    2ca4:	8c 01       	movw	r16, r24
    2ca6:	08 0d       	add	r16, r8
    2ca8:	19 1d       	adc	r17, r9
			size += diff;
    2caa:	ca 0d       	add	r28, r10
    2cac:	db 1d       	adc	r29, r11
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    2cae:	d2 01       	movw	r26, r4
    2cb0:	6d 91       	ld	r22, X+
    2cb2:	7c 91       	ld	r23, X
    2cb4:	c8 01       	movw	r24, r16
    2cb6:	0e 94 9b 1a 	call	0x3536	; 0x3536 <strstr>
    2cba:	00 97       	sbiw	r24, 0x00	; 0
    2cbc:	99 f7       	brne	.-26     	; 0x2ca4 <_ZN6String7replaceERKS_S1_+0x122>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    2cbe:	c6 15       	cp	r28, r6
    2cc0:	d7 05       	cpc	r29, r7
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <_ZN6String7replaceERKS_S1_+0x144>
    2cc4:	55 c0       	rjmp	.+170    	; 0x2d70 <_ZN6String7replaceERKS_S1_+0x1ee>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    2cc6:	f7 01       	movw	r30, r14
    2cc8:	82 81       	ldd	r24, Z+2	; 0x02
    2cca:	93 81       	ldd	r25, Z+3	; 0x03
    2ccc:	8c 17       	cp	r24, r28
    2cce:	9d 07       	cpc	r25, r29
    2cd0:	08 f0       	brcs	.+2      	; 0x2cd4 <_ZN6String7replaceERKS_S1_+0x152>
    2cd2:	45 c0       	rjmp	.+138    	; 0x2d5e <_ZN6String7replaceERKS_S1_+0x1dc>
    2cd4:	c7 01       	movw	r24, r14
    2cd6:	be 01       	movw	r22, r28
    2cd8:	0e 94 6a 0f 	call	0x1ed4	; 0x1ed4 <_ZN6String12changeBufferEj>
    2cdc:	88 23       	and	r24, r24
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <_ZN6String7replaceERKS_S1_+0x160>
    2ce0:	47 c0       	rjmp	.+142    	; 0x2d70 <_ZN6String7replaceERKS_S1_+0x1ee>
    2ce2:	3d c0       	rjmp	.+122    	; 0x2d5e <_ZN6String7replaceERKS_S1_+0x1dc>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    2ce4:	c7 01       	movw	r24, r14
    2ce6:	b2 01       	movw	r22, r4
    2ce8:	a9 01       	movw	r20, r18
    2cea:	0e 94 fd 14 	call	0x29fa	; 0x29fa <_ZNK6String11lastIndexOfERKS_j>
    2cee:	ec 01       	movw	r28, r24
    2cf0:	97 fd       	sbrc	r25, 7
    2cf2:	3e c0       	rjmp	.+124    	; 0x2d70 <_ZN6String7replaceERKS_S1_+0x1ee>
			readFrom = buffer + index + find.len;
    2cf4:	d7 01       	movw	r26, r14
    2cf6:	6d 91       	ld	r22, X+
    2cf8:	7c 91       	ld	r23, X
    2cfa:	11 97       	sbiw	r26, 0x01	; 1
    2cfc:	f2 01       	movw	r30, r4
    2cfe:	84 81       	ldd	r24, Z+4	; 0x04
    2d00:	95 81       	ldd	r25, Z+5	; 0x05
    2d02:	8c 0f       	add	r24, r28
    2d04:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    2d06:	68 0f       	add	r22, r24
    2d08:	79 1f       	adc	r23, r25
    2d0a:	14 96       	adiw	r26, 0x04	; 4
    2d0c:	4d 91       	ld	r20, X+
    2d0e:	5c 91       	ld	r21, X
    2d10:	15 97       	sbiw	r26, 0x05	; 5
    2d12:	48 1b       	sub	r20, r24
    2d14:	59 0b       	sbc	r21, r25
    2d16:	cb 01       	movw	r24, r22
    2d18:	8a 0d       	add	r24, r10
    2d1a:	9b 1d       	adc	r25, r11
    2d1c:	0e 94 46 1a 	call	0x348c	; 0x348c <memmove>
			len += diff;
    2d20:	d7 01       	movw	r26, r14
    2d22:	14 96       	adiw	r26, 0x04	; 4
    2d24:	8d 91       	ld	r24, X+
    2d26:	9c 91       	ld	r25, X
    2d28:	15 97       	sbiw	r26, 0x05	; 5
    2d2a:	8a 0d       	add	r24, r10
    2d2c:	9b 1d       	adc	r25, r11
    2d2e:	15 96       	adiw	r26, 0x05	; 5
    2d30:	9c 93       	st	X, r25
    2d32:	8e 93       	st	-X, r24
    2d34:	14 97       	sbiw	r26, 0x04	; 4
			buffer[len] = 0;
    2d36:	ed 91       	ld	r30, X+
    2d38:	fc 91       	ld	r31, X
    2d3a:	11 97       	sbiw	r26, 0x01	; 1
    2d3c:	e8 0f       	add	r30, r24
    2d3e:	f9 1f       	adc	r31, r25
    2d40:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    2d42:	2d 91       	ld	r18, X+
    2d44:	3c 91       	ld	r19, X
    2d46:	2c 0f       	add	r18, r28
    2d48:	3d 1f       	adc	r19, r29
    2d4a:	f6 01       	movw	r30, r12
    2d4c:	60 81       	ld	r22, Z
    2d4e:	71 81       	ldd	r23, Z+1	; 0x01
    2d50:	44 81       	ldd	r20, Z+4	; 0x04
    2d52:	55 81       	ldd	r21, Z+5	; 0x05
    2d54:	c9 01       	movw	r24, r18
    2d56:	0e 94 3d 1a 	call	0x347a	; 0x347a <memcpy>
			index--;
    2d5a:	9e 01       	movw	r18, r28
    2d5c:	05 c0       	rjmp	.+10     	; 0x2d68 <_ZN6String7replaceERKS_S1_+0x1e6>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    2d5e:	d7 01       	movw	r26, r14
    2d60:	14 96       	adiw	r26, 0x04	; 4
    2d62:	2d 91       	ld	r18, X+
    2d64:	3c 91       	ld	r19, X
    2d66:	15 97       	sbiw	r26, 0x05	; 5
    2d68:	21 50       	subi	r18, 0x01	; 1
    2d6a:	30 40       	sbci	r19, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    2d6c:	37 ff       	sbrs	r19, 7
    2d6e:	ba cf       	rjmp	.-140    	; 0x2ce4 <_ZN6String7replaceERKS_S1_+0x162>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    2d70:	df 91       	pop	r29
    2d72:	cf 91       	pop	r28
    2d74:	1f 91       	pop	r17
    2d76:	0f 91       	pop	r16
    2d78:	ff 90       	pop	r15
    2d7a:	ef 90       	pop	r14
    2d7c:	df 90       	pop	r13
    2d7e:	cf 90       	pop	r12
    2d80:	bf 90       	pop	r11
    2d82:	af 90       	pop	r10
    2d84:	9f 90       	pop	r9
    2d86:	8f 90       	pop	r8
    2d88:	7f 90       	pop	r7
    2d8a:	6f 90       	pop	r6
    2d8c:	5f 90       	pop	r5
    2d8e:	4f 90       	pop	r4
    2d90:	3f 90       	pop	r3
    2d92:	2f 90       	pop	r2
    2d94:	08 95       	ret

00002d96 <_ZN6String11toLowerCaseEv>:

void String::toLowerCase(void)
{
    2d96:	cf 93       	push	r28
    2d98:	df 93       	push	r29
	if (!buffer) return;
    2d9a:	fc 01       	movw	r30, r24
    2d9c:	c0 81       	ld	r28, Z
    2d9e:	d1 81       	ldd	r29, Z+1	; 0x01
    2da0:	20 97       	sbiw	r28, 0x00	; 0
    2da2:	39 f4       	brne	.+14     	; 0x2db2 <_ZN6String11toLowerCaseEv+0x1c>
    2da4:	09 c0       	rjmp	.+18     	; 0x2db8 <_ZN6String11toLowerCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
    2da6:	99 27       	eor	r25, r25
    2da8:	87 fd       	sbrc	r24, 7
    2daa:	90 95       	com	r25
    2dac:	0e 94 2d 1a 	call	0x345a	; 0x345a <tolower>
    2db0:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    2db2:	88 81       	ld	r24, Y
    2db4:	88 23       	and	r24, r24
    2db6:	b9 f7       	brne	.-18     	; 0x2da6 <_ZN6String11toLowerCaseEv+0x10>
		*p = tolower(*p);
	}
}
    2db8:	df 91       	pop	r29
    2dba:	cf 91       	pop	r28
    2dbc:	08 95       	ret

00002dbe <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    2dbe:	cf 93       	push	r28
    2dc0:	df 93       	push	r29
	if (!buffer) return;
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	c0 81       	ld	r28, Z
    2dc6:	d1 81       	ldd	r29, Z+1	; 0x01
    2dc8:	20 97       	sbiw	r28, 0x00	; 0
    2dca:	39 f4       	brne	.+14     	; 0x2dda <_ZN6String11toUpperCaseEv+0x1c>
    2dcc:	09 c0       	rjmp	.+18     	; 0x2de0 <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    2dce:	99 27       	eor	r25, r25
    2dd0:	87 fd       	sbrc	r24, 7
    2dd2:	90 95       	com	r25
    2dd4:	0e 94 35 1a 	call	0x346a	; 0x346a <toupper>
    2dd8:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    2dda:	88 81       	ld	r24, Y
    2ddc:	88 23       	and	r24, r24
    2dde:	b9 f7       	brne	.-18     	; 0x2dce <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    2de0:	df 91       	pop	r29
    2de2:	cf 91       	pop	r28
    2de4:	08 95       	ret

00002de6 <_ZN6String4trimEv>:

void String::trim(void)
{
    2de6:	af 92       	push	r10
    2de8:	bf 92       	push	r11
    2dea:	cf 92       	push	r12
    2dec:	df 92       	push	r13
    2dee:	ef 92       	push	r14
    2df0:	ff 92       	push	r15
    2df2:	0f 93       	push	r16
    2df4:	1f 93       	push	r17
    2df6:	cf 93       	push	r28
    2df8:	df 93       	push	r29
    2dfa:	6c 01       	movw	r12, r24
	if (!buffer || len == 0) return;
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	ed 90       	ld	r14, X+
    2e00:	fc 90       	ld	r15, X
    2e02:	11 97       	sbiw	r26, 0x01	; 1
    2e04:	e1 14       	cp	r14, r1
    2e06:	f1 04       	cpc	r15, r1
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <_ZN6String4trimEv+0x26>
    2e0a:	43 c0       	rjmp	.+134    	; 0x2e92 <_ZN6String4trimEv+0xac>
    2e0c:	14 96       	adiw	r26, 0x04	; 4
    2e0e:	ad 90       	ld	r10, X+
    2e10:	bc 90       	ld	r11, X
    2e12:	15 97       	sbiw	r26, 0x05	; 5
    2e14:	a1 14       	cp	r10, r1
    2e16:	b1 04       	cpc	r11, r1
    2e18:	e1 f1       	breq	.+120    	; 0x2e92 <_ZN6String4trimEv+0xac>
    2e1a:	87 01       	movw	r16, r14
    2e1c:	e8 01       	movw	r28, r16
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    2e1e:	88 81       	ld	r24, Y
    2e20:	0f 5f       	subi	r16, 0xFF	; 255
    2e22:	1f 4f       	sbci	r17, 0xFF	; 255
    2e24:	99 27       	eor	r25, r25
    2e26:	87 fd       	sbrc	r24, 7
    2e28:	90 95       	com	r25
    2e2a:	0e 94 25 1a 	call	0x344a	; 0x344a <isspace>
    2e2e:	00 97       	sbiw	r24, 0x00	; 0
    2e30:	a9 f7       	brne	.-22     	; 0x2e1c <_ZN6String4trimEv+0x36>
	char *end = buffer + len - 1;
    2e32:	85 01       	movw	r16, r10
    2e34:	01 50       	subi	r16, 0x01	; 1
    2e36:	10 40       	sbci	r17, 0x00	; 0
    2e38:	0e 0d       	add	r16, r14
    2e3a:	1f 1d       	adc	r17, r15
	while (isspace(*end) && end >= begin) end--;
    2e3c:	f8 01       	movw	r30, r16
    2e3e:	80 81       	ld	r24, Z
    2e40:	99 27       	eor	r25, r25
    2e42:	87 fd       	sbrc	r24, 7
    2e44:	90 95       	com	r25
    2e46:	0e 94 25 1a 	call	0x344a	; 0x344a <isspace>
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	31 f0       	breq	.+12     	; 0x2e5a <_ZN6String4trimEv+0x74>
    2e4e:	0c 17       	cp	r16, r28
    2e50:	1d 07       	cpc	r17, r29
    2e52:	18 f0       	brcs	.+6      	; 0x2e5a <_ZN6String4trimEv+0x74>
    2e54:	01 50       	subi	r16, 0x01	; 1
    2e56:	10 40       	sbci	r17, 0x00	; 0
    2e58:	f1 cf       	rjmp	.-30     	; 0x2e3c <_ZN6String4trimEv+0x56>
	len = end + 1 - begin;
    2e5a:	0f 5f       	subi	r16, 0xFF	; 255
    2e5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2e5e:	0c 1b       	sub	r16, r28
    2e60:	1d 0b       	sbc	r17, r29
    2e62:	d6 01       	movw	r26, r12
    2e64:	15 96       	adiw	r26, 0x05	; 5
    2e66:	1c 93       	st	X, r17
    2e68:	0e 93       	st	-X, r16
    2e6a:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    2e6c:	ec 16       	cp	r14, r28
    2e6e:	fd 06       	cpc	r15, r29
    2e70:	28 f4       	brcc	.+10     	; 0x2e7c <_ZN6String4trimEv+0x96>
    2e72:	c7 01       	movw	r24, r14
    2e74:	be 01       	movw	r22, r28
    2e76:	a8 01       	movw	r20, r16
    2e78:	0e 94 3d 1a 	call	0x347a	; 0x347a <memcpy>
	buffer[len] = 0;
    2e7c:	d6 01       	movw	r26, r12
    2e7e:	ed 91       	ld	r30, X+
    2e80:	fc 91       	ld	r31, X
    2e82:	11 97       	sbiw	r26, 0x01	; 1
    2e84:	14 96       	adiw	r26, 0x04	; 4
    2e86:	8d 91       	ld	r24, X+
    2e88:	9c 91       	ld	r25, X
    2e8a:	15 97       	sbiw	r26, 0x05	; 5
    2e8c:	e8 0f       	add	r30, r24
    2e8e:	f9 1f       	adc	r31, r25
    2e90:	10 82       	st	Z, r1
}
    2e92:	df 91       	pop	r29
    2e94:	cf 91       	pop	r28
    2e96:	1f 91       	pop	r17
    2e98:	0f 91       	pop	r16
    2e9a:	ff 90       	pop	r15
    2e9c:	ef 90       	pop	r14
    2e9e:	df 90       	pop	r13
    2ea0:	cf 90       	pop	r12
    2ea2:	bf 90       	pop	r11
    2ea4:	af 90       	pop	r10
    2ea6:	08 95       	ret

00002ea8 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    2ea8:	fc 01       	movw	r30, r24
    2eaa:	80 81       	ld	r24, Z
    2eac:	91 81       	ldd	r25, Z+1	; 0x01
    2eae:	00 97       	sbiw	r24, 0x00	; 0
    2eb0:	29 f0       	breq	.+10     	; 0x2ebc <_ZNK6String5toIntEv+0x14>
    2eb2:	0e 94 fe 19 	call	0x33fc	; 0x33fc <atol>
    2eb6:	9b 01       	movw	r18, r22
    2eb8:	ac 01       	movw	r20, r24
    2eba:	03 c0       	rjmp	.+6      	; 0x2ec2 <_ZNK6String5toIntEv+0x1a>
	return 0;
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	a9 01       	movw	r20, r18
}
    2ec2:	b9 01       	movw	r22, r18
    2ec4:	ca 01       	movw	r24, r20
    2ec6:	08 95       	ret

00002ec8 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    2ec8:	0e 94 00 18 	call	0x3000	; 0x3000 <malloc>
}
    2ecc:	08 95       	ret

00002ece <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    2ece:	0e 94 9a 18 	call	0x3134	; 0x3134 <free>
} 
    2ed2:	08 95       	ret

00002ed4 <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    2ed4:	21 e0       	ldi	r18, 0x01	; 1
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	fc 01       	movw	r30, r24
    2eda:	80 81       	ld	r24, Z
    2edc:	88 23       	and	r24, r24
    2ede:	11 f0       	breq	.+4      	; 0x2ee4 <__cxa_guard_acquire+0x10>
    2ee0:	20 e0       	ldi	r18, 0x00	; 0
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	c9 01       	movw	r24, r18
    2ee6:	08 95       	ret

00002ee8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    2ee8:	21 e0       	ldi	r18, 0x01	; 1
    2eea:	fc 01       	movw	r30, r24
    2eec:	20 83       	st	Z, r18
    2eee:	08 95       	ret

00002ef0 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    2ef0:	08 95       	ret

00002ef2 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    2ef2:	08 95       	ret

00002ef4 <__divmodhi4>:
    2ef4:	97 fb       	bst	r25, 7
    2ef6:	09 2e       	mov	r0, r25
    2ef8:	07 26       	eor	r0, r23
    2efa:	0a d0       	rcall	.+20     	; 0x2f10 <__divmodhi4_neg1>
    2efc:	77 fd       	sbrc	r23, 7
    2efe:	04 d0       	rcall	.+8      	; 0x2f08 <__divmodhi4_neg2>
    2f00:	2e d0       	rcall	.+92     	; 0x2f5e <__udivmodhi4>
    2f02:	06 d0       	rcall	.+12     	; 0x2f10 <__divmodhi4_neg1>
    2f04:	00 20       	and	r0, r0
    2f06:	1a f4       	brpl	.+6      	; 0x2f0e <__divmodhi4_exit>

00002f08 <__divmodhi4_neg2>:
    2f08:	70 95       	com	r23
    2f0a:	61 95       	neg	r22
    2f0c:	7f 4f       	sbci	r23, 0xFF	; 255

00002f0e <__divmodhi4_exit>:
    2f0e:	08 95       	ret

00002f10 <__divmodhi4_neg1>:
    2f10:	f6 f7       	brtc	.-4      	; 0x2f0e <__divmodhi4_exit>
    2f12:	90 95       	com	r25
    2f14:	81 95       	neg	r24
    2f16:	9f 4f       	sbci	r25, 0xFF	; 255
    2f18:	08 95       	ret

00002f1a <__udivmodsi4>:
    2f1a:	a1 e2       	ldi	r26, 0x21	; 33
    2f1c:	1a 2e       	mov	r1, r26
    2f1e:	aa 1b       	sub	r26, r26
    2f20:	bb 1b       	sub	r27, r27
    2f22:	fd 01       	movw	r30, r26
    2f24:	0d c0       	rjmp	.+26     	; 0x2f40 <__udivmodsi4_ep>

00002f26 <__udivmodsi4_loop>:
    2f26:	aa 1f       	adc	r26, r26
    2f28:	bb 1f       	adc	r27, r27
    2f2a:	ee 1f       	adc	r30, r30
    2f2c:	ff 1f       	adc	r31, r31
    2f2e:	a2 17       	cp	r26, r18
    2f30:	b3 07       	cpc	r27, r19
    2f32:	e4 07       	cpc	r30, r20
    2f34:	f5 07       	cpc	r31, r21
    2f36:	20 f0       	brcs	.+8      	; 0x2f40 <__udivmodsi4_ep>
    2f38:	a2 1b       	sub	r26, r18
    2f3a:	b3 0b       	sbc	r27, r19
    2f3c:	e4 0b       	sbc	r30, r20
    2f3e:	f5 0b       	sbc	r31, r21

00002f40 <__udivmodsi4_ep>:
    2f40:	66 1f       	adc	r22, r22
    2f42:	77 1f       	adc	r23, r23
    2f44:	88 1f       	adc	r24, r24
    2f46:	99 1f       	adc	r25, r25
    2f48:	1a 94       	dec	r1
    2f4a:	69 f7       	brne	.-38     	; 0x2f26 <__udivmodsi4_loop>
    2f4c:	60 95       	com	r22
    2f4e:	70 95       	com	r23
    2f50:	80 95       	com	r24
    2f52:	90 95       	com	r25
    2f54:	9b 01       	movw	r18, r22
    2f56:	ac 01       	movw	r20, r24
    2f58:	bd 01       	movw	r22, r26
    2f5a:	cf 01       	movw	r24, r30
    2f5c:	08 95       	ret

00002f5e <__udivmodhi4>:
    2f5e:	aa 1b       	sub	r26, r26
    2f60:	bb 1b       	sub	r27, r27
    2f62:	51 e1       	ldi	r21, 0x11	; 17
    2f64:	07 c0       	rjmp	.+14     	; 0x2f74 <__udivmodhi4_ep>

00002f66 <__udivmodhi4_loop>:
    2f66:	aa 1f       	adc	r26, r26
    2f68:	bb 1f       	adc	r27, r27
    2f6a:	a6 17       	cp	r26, r22
    2f6c:	b7 07       	cpc	r27, r23
    2f6e:	10 f0       	brcs	.+4      	; 0x2f74 <__udivmodhi4_ep>
    2f70:	a6 1b       	sub	r26, r22
    2f72:	b7 0b       	sbc	r27, r23

00002f74 <__udivmodhi4_ep>:
    2f74:	88 1f       	adc	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	5a 95       	dec	r21
    2f7a:	a9 f7       	brne	.-22     	; 0x2f66 <__udivmodhi4_loop>
    2f7c:	80 95       	com	r24
    2f7e:	90 95       	com	r25
    2f80:	bc 01       	movw	r22, r24
    2f82:	cd 01       	movw	r24, r26
    2f84:	08 95       	ret

00002f86 <__prologue_saves__>:
    2f86:	2f 92       	push	r2
    2f88:	3f 92       	push	r3
    2f8a:	4f 92       	push	r4
    2f8c:	5f 92       	push	r5
    2f8e:	6f 92       	push	r6
    2f90:	7f 92       	push	r7
    2f92:	8f 92       	push	r8
    2f94:	9f 92       	push	r9
    2f96:	af 92       	push	r10
    2f98:	bf 92       	push	r11
    2f9a:	cf 92       	push	r12
    2f9c:	df 92       	push	r13
    2f9e:	ef 92       	push	r14
    2fa0:	ff 92       	push	r15
    2fa2:	0f 93       	push	r16
    2fa4:	1f 93       	push	r17
    2fa6:	cf 93       	push	r28
    2fa8:	df 93       	push	r29
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	ca 1b       	sub	r28, r26
    2fb0:	db 0b       	sbc	r29, r27
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	de bf       	out	0x3e, r29	; 62
    2fb8:	0f be       	out	0x3f, r0	; 63
    2fba:	cd bf       	out	0x3d, r28	; 61
    2fbc:	09 94       	ijmp

00002fbe <__epilogue_restores__>:
    2fbe:	2a 88       	ldd	r2, Y+18	; 0x12
    2fc0:	39 88       	ldd	r3, Y+17	; 0x11
    2fc2:	48 88       	ldd	r4, Y+16	; 0x10
    2fc4:	5f 84       	ldd	r5, Y+15	; 0x0f
    2fc6:	6e 84       	ldd	r6, Y+14	; 0x0e
    2fc8:	7d 84       	ldd	r7, Y+13	; 0x0d
    2fca:	8c 84       	ldd	r8, Y+12	; 0x0c
    2fcc:	9b 84       	ldd	r9, Y+11	; 0x0b
    2fce:	aa 84       	ldd	r10, Y+10	; 0x0a
    2fd0:	b9 84       	ldd	r11, Y+9	; 0x09
    2fd2:	c8 84       	ldd	r12, Y+8	; 0x08
    2fd4:	df 80       	ldd	r13, Y+7	; 0x07
    2fd6:	ee 80       	ldd	r14, Y+6	; 0x06
    2fd8:	fd 80       	ldd	r15, Y+5	; 0x05
    2fda:	0c 81       	ldd	r16, Y+4	; 0x04
    2fdc:	1b 81       	ldd	r17, Y+3	; 0x03
    2fde:	aa 81       	ldd	r26, Y+2	; 0x02
    2fe0:	b9 81       	ldd	r27, Y+1	; 0x01
    2fe2:	ce 0f       	add	r28, r30
    2fe4:	d1 1d       	adc	r29, r1
    2fe6:	0f b6       	in	r0, 0x3f	; 63
    2fe8:	f8 94       	cli
    2fea:	de bf       	out	0x3e, r29	; 62
    2fec:	0f be       	out	0x3f, r0	; 63
    2fee:	cd bf       	out	0x3d, r28	; 61
    2ff0:	ed 01       	movw	r28, r26
    2ff2:	08 95       	ret

00002ff4 <__tablejump2__>:
    2ff4:	ee 0f       	add	r30, r30
    2ff6:	ff 1f       	adc	r31, r31

00002ff8 <__tablejump__>:
    2ff8:	05 90       	lpm	r0, Z+
    2ffa:	f4 91       	lpm	r31, Z+
    2ffc:	e0 2d       	mov	r30, r0
    2ffe:	09 94       	ijmp

00003000 <malloc>:
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	82 30       	cpi	r24, 0x02	; 2
    3006:	91 05       	cpc	r25, r1
    3008:	10 f4       	brcc	.+4      	; 0x300e <malloc+0xe>
    300a:	82 e0       	ldi	r24, 0x02	; 2
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	e0 91 ed 02 	lds	r30, 0x02ED
    3012:	f0 91 ee 02 	lds	r31, 0x02EE
    3016:	40 e0       	ldi	r20, 0x00	; 0
    3018:	50 e0       	ldi	r21, 0x00	; 0
    301a:	20 e0       	ldi	r18, 0x00	; 0
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	26 c0       	rjmp	.+76     	; 0x306c <malloc+0x6c>
    3020:	60 81       	ld	r22, Z
    3022:	71 81       	ldd	r23, Z+1	; 0x01
    3024:	68 17       	cp	r22, r24
    3026:	79 07       	cpc	r23, r25
    3028:	e0 f0       	brcs	.+56     	; 0x3062 <malloc+0x62>
    302a:	68 17       	cp	r22, r24
    302c:	79 07       	cpc	r23, r25
    302e:	81 f4       	brne	.+32     	; 0x3050 <malloc+0x50>
    3030:	82 81       	ldd	r24, Z+2	; 0x02
    3032:	93 81       	ldd	r25, Z+3	; 0x03
    3034:	21 15       	cp	r18, r1
    3036:	31 05       	cpc	r19, r1
    3038:	31 f0       	breq	.+12     	; 0x3046 <malloc+0x46>
    303a:	d9 01       	movw	r26, r18
    303c:	13 96       	adiw	r26, 0x03	; 3
    303e:	9c 93       	st	X, r25
    3040:	8e 93       	st	-X, r24
    3042:	12 97       	sbiw	r26, 0x02	; 2
    3044:	2b c0       	rjmp	.+86     	; 0x309c <malloc+0x9c>
    3046:	90 93 ee 02 	sts	0x02EE, r25
    304a:	80 93 ed 02 	sts	0x02ED, r24
    304e:	26 c0       	rjmp	.+76     	; 0x309c <malloc+0x9c>
    3050:	41 15       	cp	r20, r1
    3052:	51 05       	cpc	r21, r1
    3054:	19 f0       	breq	.+6      	; 0x305c <malloc+0x5c>
    3056:	64 17       	cp	r22, r20
    3058:	75 07       	cpc	r23, r21
    305a:	18 f4       	brcc	.+6      	; 0x3062 <malloc+0x62>
    305c:	ab 01       	movw	r20, r22
    305e:	e9 01       	movw	r28, r18
    3060:	df 01       	movw	r26, r30
    3062:	9f 01       	movw	r18, r30
    3064:	72 81       	ldd	r23, Z+2	; 0x02
    3066:	63 81       	ldd	r22, Z+3	; 0x03
    3068:	e7 2f       	mov	r30, r23
    306a:	f6 2f       	mov	r31, r22
    306c:	30 97       	sbiw	r30, 0x00	; 0
    306e:	c1 f6       	brne	.-80     	; 0x3020 <malloc+0x20>
    3070:	41 15       	cp	r20, r1
    3072:	51 05       	cpc	r21, r1
    3074:	01 f1       	breq	.+64     	; 0x30b6 <malloc+0xb6>
    3076:	48 1b       	sub	r20, r24
    3078:	59 0b       	sbc	r21, r25
    307a:	44 30       	cpi	r20, 0x04	; 4
    307c:	51 05       	cpc	r21, r1
    307e:	80 f4       	brcc	.+32     	; 0x30a0 <malloc+0xa0>
    3080:	12 96       	adiw	r26, 0x02	; 2
    3082:	8d 91       	ld	r24, X+
    3084:	9c 91       	ld	r25, X
    3086:	13 97       	sbiw	r26, 0x03	; 3
    3088:	20 97       	sbiw	r28, 0x00	; 0
    308a:	19 f0       	breq	.+6      	; 0x3092 <malloc+0x92>
    308c:	9b 83       	std	Y+3, r25	; 0x03
    308e:	8a 83       	std	Y+2, r24	; 0x02
    3090:	04 c0       	rjmp	.+8      	; 0x309a <malloc+0x9a>
    3092:	90 93 ee 02 	sts	0x02EE, r25
    3096:	80 93 ed 02 	sts	0x02ED, r24
    309a:	fd 01       	movw	r30, r26
    309c:	32 96       	adiw	r30, 0x02	; 2
    309e:	46 c0       	rjmp	.+140    	; 0x312c <malloc+0x12c>
    30a0:	fd 01       	movw	r30, r26
    30a2:	e4 0f       	add	r30, r20
    30a4:	f5 1f       	adc	r31, r21
    30a6:	81 93       	st	Z+, r24
    30a8:	91 93       	st	Z+, r25
    30aa:	42 50       	subi	r20, 0x02	; 2
    30ac:	50 40       	sbci	r21, 0x00	; 0
    30ae:	11 96       	adiw	r26, 0x01	; 1
    30b0:	5c 93       	st	X, r21
    30b2:	4e 93       	st	-X, r20
    30b4:	3b c0       	rjmp	.+118    	; 0x312c <malloc+0x12c>
    30b6:	20 91 eb 02 	lds	r18, 0x02EB
    30ba:	30 91 ec 02 	lds	r19, 0x02EC
    30be:	21 15       	cp	r18, r1
    30c0:	31 05       	cpc	r19, r1
    30c2:	41 f4       	brne	.+16     	; 0x30d4 <malloc+0xd4>
    30c4:	20 91 0d 02 	lds	r18, 0x020D
    30c8:	30 91 0e 02 	lds	r19, 0x020E
    30cc:	30 93 ec 02 	sts	0x02EC, r19
    30d0:	20 93 eb 02 	sts	0x02EB, r18
    30d4:	20 91 0f 02 	lds	r18, 0x020F
    30d8:	30 91 10 02 	lds	r19, 0x0210
    30dc:	21 15       	cp	r18, r1
    30de:	31 05       	cpc	r19, r1
    30e0:	41 f4       	brne	.+16     	; 0x30f2 <malloc+0xf2>
    30e2:	2d b7       	in	r18, 0x3d	; 61
    30e4:	3e b7       	in	r19, 0x3e	; 62
    30e6:	40 91 0b 02 	lds	r20, 0x020B
    30ea:	50 91 0c 02 	lds	r21, 0x020C
    30ee:	24 1b       	sub	r18, r20
    30f0:	35 0b       	sbc	r19, r21
    30f2:	e0 91 eb 02 	lds	r30, 0x02EB
    30f6:	f0 91 ec 02 	lds	r31, 0x02EC
    30fa:	e2 17       	cp	r30, r18
    30fc:	f3 07       	cpc	r31, r19
    30fe:	a0 f4       	brcc	.+40     	; 0x3128 <malloc+0x128>
    3100:	2e 1b       	sub	r18, r30
    3102:	3f 0b       	sbc	r19, r31
    3104:	28 17       	cp	r18, r24
    3106:	39 07       	cpc	r19, r25
    3108:	78 f0       	brcs	.+30     	; 0x3128 <malloc+0x128>
    310a:	ac 01       	movw	r20, r24
    310c:	4e 5f       	subi	r20, 0xFE	; 254
    310e:	5f 4f       	sbci	r21, 0xFF	; 255
    3110:	24 17       	cp	r18, r20
    3112:	35 07       	cpc	r19, r21
    3114:	48 f0       	brcs	.+18     	; 0x3128 <malloc+0x128>
    3116:	4e 0f       	add	r20, r30
    3118:	5f 1f       	adc	r21, r31
    311a:	50 93 ec 02 	sts	0x02EC, r21
    311e:	40 93 eb 02 	sts	0x02EB, r20
    3122:	81 93       	st	Z+, r24
    3124:	91 93       	st	Z+, r25
    3126:	02 c0       	rjmp	.+4      	; 0x312c <malloc+0x12c>
    3128:	e0 e0       	ldi	r30, 0x00	; 0
    312a:	f0 e0       	ldi	r31, 0x00	; 0
    312c:	cf 01       	movw	r24, r30
    312e:	df 91       	pop	r29
    3130:	cf 91       	pop	r28
    3132:	08 95       	ret

00003134 <free>:
    3134:	cf 93       	push	r28
    3136:	df 93       	push	r29
    3138:	00 97       	sbiw	r24, 0x00	; 0
    313a:	09 f4       	brne	.+2      	; 0x313e <free+0xa>
    313c:	91 c0       	rjmp	.+290    	; 0x3260 <free+0x12c>
    313e:	fc 01       	movw	r30, r24
    3140:	32 97       	sbiw	r30, 0x02	; 2
    3142:	13 82       	std	Z+3, r1	; 0x03
    3144:	12 82       	std	Z+2, r1	; 0x02
    3146:	60 91 ed 02 	lds	r22, 0x02ED
    314a:	70 91 ee 02 	lds	r23, 0x02EE
    314e:	61 15       	cp	r22, r1
    3150:	71 05       	cpc	r23, r1
    3152:	81 f4       	brne	.+32     	; 0x3174 <free+0x40>
    3154:	20 81       	ld	r18, Z
    3156:	31 81       	ldd	r19, Z+1	; 0x01
    3158:	28 0f       	add	r18, r24
    315a:	39 1f       	adc	r19, r25
    315c:	80 91 eb 02 	lds	r24, 0x02EB
    3160:	90 91 ec 02 	lds	r25, 0x02EC
    3164:	82 17       	cp	r24, r18
    3166:	93 07       	cpc	r25, r19
    3168:	99 f5       	brne	.+102    	; 0x31d0 <free+0x9c>
    316a:	f0 93 ec 02 	sts	0x02EC, r31
    316e:	e0 93 eb 02 	sts	0x02EB, r30
    3172:	76 c0       	rjmp	.+236    	; 0x3260 <free+0x12c>
    3174:	db 01       	movw	r26, r22
    3176:	80 e0       	ldi	r24, 0x00	; 0
    3178:	90 e0       	ldi	r25, 0x00	; 0
    317a:	02 c0       	rjmp	.+4      	; 0x3180 <free+0x4c>
    317c:	cd 01       	movw	r24, r26
    317e:	d9 01       	movw	r26, r18
    3180:	ae 17       	cp	r26, r30
    3182:	bf 07       	cpc	r27, r31
    3184:	48 f4       	brcc	.+18     	; 0x3198 <free+0x64>
    3186:	12 96       	adiw	r26, 0x02	; 2
    3188:	2d 91       	ld	r18, X+
    318a:	3c 91       	ld	r19, X
    318c:	13 97       	sbiw	r26, 0x03	; 3
    318e:	21 15       	cp	r18, r1
    3190:	31 05       	cpc	r19, r1
    3192:	a1 f7       	brne	.-24     	; 0x317c <free+0x48>
    3194:	cd 01       	movw	r24, r26
    3196:	21 c0       	rjmp	.+66     	; 0x31da <free+0xa6>
    3198:	b3 83       	std	Z+3, r27	; 0x03
    319a:	a2 83       	std	Z+2, r26	; 0x02
    319c:	ef 01       	movw	r28, r30
    319e:	49 91       	ld	r20, Y+
    31a0:	59 91       	ld	r21, Y+
    31a2:	9e 01       	movw	r18, r28
    31a4:	24 0f       	add	r18, r20
    31a6:	35 1f       	adc	r19, r21
    31a8:	a2 17       	cp	r26, r18
    31aa:	b3 07       	cpc	r27, r19
    31ac:	79 f4       	brne	.+30     	; 0x31cc <free+0x98>
    31ae:	2d 91       	ld	r18, X+
    31b0:	3c 91       	ld	r19, X
    31b2:	11 97       	sbiw	r26, 0x01	; 1
    31b4:	24 0f       	add	r18, r20
    31b6:	35 1f       	adc	r19, r21
    31b8:	2e 5f       	subi	r18, 0xFE	; 254
    31ba:	3f 4f       	sbci	r19, 0xFF	; 255
    31bc:	31 83       	std	Z+1, r19	; 0x01
    31be:	20 83       	st	Z, r18
    31c0:	12 96       	adiw	r26, 0x02	; 2
    31c2:	2d 91       	ld	r18, X+
    31c4:	3c 91       	ld	r19, X
    31c6:	13 97       	sbiw	r26, 0x03	; 3
    31c8:	33 83       	std	Z+3, r19	; 0x03
    31ca:	22 83       	std	Z+2, r18	; 0x02
    31cc:	00 97       	sbiw	r24, 0x00	; 0
    31ce:	29 f4       	brne	.+10     	; 0x31da <free+0xa6>
    31d0:	f0 93 ee 02 	sts	0x02EE, r31
    31d4:	e0 93 ed 02 	sts	0x02ED, r30
    31d8:	43 c0       	rjmp	.+134    	; 0x3260 <free+0x12c>
    31da:	dc 01       	movw	r26, r24
    31dc:	13 96       	adiw	r26, 0x03	; 3
    31de:	fc 93       	st	X, r31
    31e0:	ee 93       	st	-X, r30
    31e2:	12 97       	sbiw	r26, 0x02	; 2
    31e4:	4d 91       	ld	r20, X+
    31e6:	5d 91       	ld	r21, X+
    31e8:	a4 0f       	add	r26, r20
    31ea:	b5 1f       	adc	r27, r21
    31ec:	ea 17       	cp	r30, r26
    31ee:	fb 07       	cpc	r31, r27
    31f0:	69 f4       	brne	.+26     	; 0x320c <free+0xd8>
    31f2:	20 81       	ld	r18, Z
    31f4:	31 81       	ldd	r19, Z+1	; 0x01
    31f6:	24 0f       	add	r18, r20
    31f8:	35 1f       	adc	r19, r21
    31fa:	2e 5f       	subi	r18, 0xFE	; 254
    31fc:	3f 4f       	sbci	r19, 0xFF	; 255
    31fe:	ec 01       	movw	r28, r24
    3200:	39 83       	std	Y+1, r19	; 0x01
    3202:	28 83       	st	Y, r18
    3204:	22 81       	ldd	r18, Z+2	; 0x02
    3206:	33 81       	ldd	r19, Z+3	; 0x03
    3208:	3b 83       	std	Y+3, r19	; 0x03
    320a:	2a 83       	std	Y+2, r18	; 0x02
    320c:	e0 e0       	ldi	r30, 0x00	; 0
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	02 c0       	rjmp	.+4      	; 0x3216 <free+0xe2>
    3212:	fb 01       	movw	r30, r22
    3214:	bc 01       	movw	r22, r24
    3216:	db 01       	movw	r26, r22
    3218:	12 96       	adiw	r26, 0x02	; 2
    321a:	8d 91       	ld	r24, X+
    321c:	9c 91       	ld	r25, X
    321e:	13 97       	sbiw	r26, 0x03	; 3
    3220:	00 97       	sbiw	r24, 0x00	; 0
    3222:	b9 f7       	brne	.-18     	; 0x3212 <free+0xde>
    3224:	9b 01       	movw	r18, r22
    3226:	2e 5f       	subi	r18, 0xFE	; 254
    3228:	3f 4f       	sbci	r19, 0xFF	; 255
    322a:	8d 91       	ld	r24, X+
    322c:	9c 91       	ld	r25, X
    322e:	11 97       	sbiw	r26, 0x01	; 1
    3230:	82 0f       	add	r24, r18
    3232:	93 1f       	adc	r25, r19
    3234:	40 91 eb 02 	lds	r20, 0x02EB
    3238:	50 91 ec 02 	lds	r21, 0x02EC
    323c:	48 17       	cp	r20, r24
    323e:	59 07       	cpc	r21, r25
    3240:	79 f4       	brne	.+30     	; 0x3260 <free+0x12c>
    3242:	30 97       	sbiw	r30, 0x00	; 0
    3244:	29 f4       	brne	.+10     	; 0x3250 <free+0x11c>
    3246:	10 92 ee 02 	sts	0x02EE, r1
    324a:	10 92 ed 02 	sts	0x02ED, r1
    324e:	02 c0       	rjmp	.+4      	; 0x3254 <free+0x120>
    3250:	13 82       	std	Z+3, r1	; 0x03
    3252:	12 82       	std	Z+2, r1	; 0x02
    3254:	22 50       	subi	r18, 0x02	; 2
    3256:	30 40       	sbci	r19, 0x00	; 0
    3258:	30 93 ec 02 	sts	0x02EC, r19
    325c:	20 93 eb 02 	sts	0x02EB, r18
    3260:	df 91       	pop	r29
    3262:	cf 91       	pop	r28
    3264:	08 95       	ret

00003266 <realloc>:
    3266:	a0 e0       	ldi	r26, 0x00	; 0
    3268:	b0 e0       	ldi	r27, 0x00	; 0
    326a:	e9 e3       	ldi	r30, 0x39	; 57
    326c:	f9 e1       	ldi	r31, 0x19	; 25
    326e:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <__prologue_saves__+0xc>
    3272:	8c 01       	movw	r16, r24
    3274:	cb 01       	movw	r24, r22
    3276:	01 15       	cp	r16, r1
    3278:	11 05       	cpc	r17, r1
    327a:	29 f4       	brne	.+10     	; 0x3286 <realloc+0x20>
    327c:	0e 94 00 18 	call	0x3000	; 0x3000 <malloc>
    3280:	08 2f       	mov	r16, r24
    3282:	19 2f       	mov	r17, r25
    3284:	b5 c0       	rjmp	.+362    	; 0x33f0 <realloc+0x18a>
    3286:	d8 01       	movw	r26, r16
    3288:	12 97       	sbiw	r26, 0x02	; 2
    328a:	98 01       	movw	r18, r16
    328c:	26 0f       	add	r18, r22
    328e:	37 1f       	adc	r19, r23
    3290:	2a 17       	cp	r18, r26
    3292:	3b 07       	cpc	r19, r27
    3294:	08 f4       	brcc	.+2      	; 0x3298 <realloc+0x32>
    3296:	aa c0       	rjmp	.+340    	; 0x33ec <realloc+0x186>
    3298:	ed 90       	ld	r14, X+
    329a:	fc 90       	ld	r15, X
    329c:	11 97       	sbiw	r26, 0x01	; 1
    329e:	e6 16       	cp	r14, r22
    32a0:	f7 06       	cpc	r15, r23
    32a2:	d0 f0       	brcs	.+52     	; 0x32d8 <realloc+0x72>
    32a4:	45 e0       	ldi	r20, 0x05	; 5
    32a6:	e4 16       	cp	r14, r20
    32a8:	f1 04       	cpc	r15, r1
    32aa:	08 f4       	brcc	.+2      	; 0x32ae <realloc+0x48>
    32ac:	a1 c0       	rjmp	.+322    	; 0x33f0 <realloc+0x18a>
    32ae:	a7 01       	movw	r20, r14
    32b0:	44 50       	subi	r20, 0x04	; 4
    32b2:	50 40       	sbci	r21, 0x00	; 0
    32b4:	46 17       	cp	r20, r22
    32b6:	57 07       	cpc	r21, r23
    32b8:	08 f4       	brcc	.+2      	; 0x32bc <realloc+0x56>
    32ba:	9a c0       	rjmp	.+308    	; 0x33f0 <realloc+0x18a>
    32bc:	a7 01       	movw	r20, r14
    32be:	42 50       	subi	r20, 0x02	; 2
    32c0:	50 40       	sbci	r21, 0x00	; 0
    32c2:	46 1b       	sub	r20, r22
    32c4:	57 0b       	sbc	r21, r23
    32c6:	f9 01       	movw	r30, r18
    32c8:	41 93       	st	Z+, r20
    32ca:	51 93       	st	Z+, r21
    32cc:	6d 93       	st	X+, r22
    32ce:	7c 93       	st	X, r23
    32d0:	cf 01       	movw	r24, r30
    32d2:	0e 94 9a 18 	call	0x3134	; 0x3134 <free>
    32d6:	8c c0       	rjmp	.+280    	; 0x33f0 <realloc+0x18a>
    32d8:	5b 01       	movw	r10, r22
    32da:	ae 18       	sub	r10, r14
    32dc:	bf 08       	sbc	r11, r15
    32de:	48 01       	movw	r8, r16
    32e0:	8e 0c       	add	r8, r14
    32e2:	9f 1c       	adc	r9, r15
    32e4:	e0 91 ed 02 	lds	r30, 0x02ED
    32e8:	f0 91 ee 02 	lds	r31, 0x02EE
    32ec:	cc 24       	eor	r12, r12
    32ee:	dd 24       	eor	r13, r13
    32f0:	c0 e0       	ldi	r28, 0x00	; 0
    32f2:	d0 e0       	ldi	r29, 0x00	; 0
    32f4:	41 c0       	rjmp	.+130    	; 0x3378 <realloc+0x112>
    32f6:	e8 15       	cp	r30, r8
    32f8:	f9 05       	cpc	r31, r9
    32fa:	99 f5       	brne	.+102    	; 0x3362 <realloc+0xfc>
    32fc:	60 81       	ld	r22, Z
    32fe:	71 81       	ldd	r23, Z+1	; 0x01
    3300:	ab 01       	movw	r20, r22
    3302:	4e 5f       	subi	r20, 0xFE	; 254
    3304:	5f 4f       	sbci	r21, 0xFF	; 255
    3306:	4a 15       	cp	r20, r10
    3308:	5b 05       	cpc	r21, r11
    330a:	58 f1       	brcs	.+86     	; 0x3362 <realloc+0xfc>
    330c:	ab 01       	movw	r20, r22
    330e:	4a 19       	sub	r20, r10
    3310:	5b 09       	sbc	r21, r11
    3312:	cc 24       	eor	r12, r12
    3314:	dd 24       	eor	r13, r13
    3316:	68 94       	set
    3318:	c1 f8       	bld	r12, 1
    331a:	c4 0e       	add	r12, r20
    331c:	d5 1e       	adc	r13, r21
    331e:	82 80       	ldd	r8, Z+2	; 0x02
    3320:	a3 80       	ldd	r10, Z+3	; 0x03
    3322:	e5 e0       	ldi	r30, 0x05	; 5
    3324:	ce 16       	cp	r12, r30
    3326:	d1 04       	cpc	r13, r1
    3328:	48 f0       	brcs	.+18     	; 0x333c <realloc+0xd6>
    332a:	f9 01       	movw	r30, r18
    332c:	82 82       	std	Z+2, r8	; 0x02
    332e:	a3 82       	std	Z+3, r10	; 0x03
    3330:	51 83       	std	Z+1, r21	; 0x01
    3332:	40 83       	st	Z, r20
    3334:	11 96       	adiw	r26, 0x01	; 1
    3336:	9c 93       	st	X, r25
    3338:	8e 93       	st	-X, r24
    333a:	09 c0       	rjmp	.+18     	; 0x334e <realloc+0xe8>
    333c:	c7 01       	movw	r24, r14
    333e:	02 96       	adiw	r24, 0x02	; 2
    3340:	86 0f       	add	r24, r22
    3342:	97 1f       	adc	r25, r23
    3344:	11 96       	adiw	r26, 0x01	; 1
    3346:	9c 93       	st	X, r25
    3348:	8e 93       	st	-X, r24
    334a:	e8 2d       	mov	r30, r8
    334c:	fa 2d       	mov	r31, r10
    334e:	20 97       	sbiw	r28, 0x00	; 0
    3350:	19 f0       	breq	.+6      	; 0x3358 <realloc+0xf2>
    3352:	fb 83       	std	Y+3, r31	; 0x03
    3354:	ea 83       	std	Y+2, r30	; 0x02
    3356:	4c c0       	rjmp	.+152    	; 0x33f0 <realloc+0x18a>
    3358:	f0 93 ee 02 	sts	0x02EE, r31
    335c:	e0 93 ed 02 	sts	0x02ED, r30
    3360:	47 c0       	rjmp	.+142    	; 0x33f0 <realloc+0x18a>
    3362:	40 81       	ld	r20, Z
    3364:	51 81       	ldd	r21, Z+1	; 0x01
    3366:	c4 16       	cp	r12, r20
    3368:	d5 06       	cpc	r13, r21
    336a:	08 f4       	brcc	.+2      	; 0x336e <realloc+0x108>
    336c:	6a 01       	movw	r12, r20
    336e:	ef 01       	movw	r28, r30
    3370:	52 81       	ldd	r21, Z+2	; 0x02
    3372:	43 81       	ldd	r20, Z+3	; 0x03
    3374:	e5 2f       	mov	r30, r21
    3376:	f4 2f       	mov	r31, r20
    3378:	30 97       	sbiw	r30, 0x00	; 0
    337a:	09 f0       	breq	.+2      	; 0x337e <realloc+0x118>
    337c:	bc cf       	rjmp	.-136    	; 0x32f6 <realloc+0x90>
    337e:	40 91 eb 02 	lds	r20, 0x02EB
    3382:	50 91 ec 02 	lds	r21, 0x02EC
    3386:	48 15       	cp	r20, r8
    3388:	59 05       	cpc	r21, r9
    338a:	e9 f4       	brne	.+58     	; 0x33c6 <realloc+0x160>
    338c:	c8 16       	cp	r12, r24
    338e:	d9 06       	cpc	r13, r25
    3390:	d0 f4       	brcc	.+52     	; 0x33c6 <realloc+0x160>
    3392:	40 91 0f 02 	lds	r20, 0x020F
    3396:	50 91 10 02 	lds	r21, 0x0210
    339a:	41 15       	cp	r20, r1
    339c:	51 05       	cpc	r21, r1
    339e:	41 f4       	brne	.+16     	; 0x33b0 <realloc+0x14a>
    33a0:	4d b7       	in	r20, 0x3d	; 61
    33a2:	5e b7       	in	r21, 0x3e	; 62
    33a4:	60 91 0b 02 	lds	r22, 0x020B
    33a8:	70 91 0c 02 	lds	r23, 0x020C
    33ac:	46 1b       	sub	r20, r22
    33ae:	57 0b       	sbc	r21, r23
    33b0:	24 17       	cp	r18, r20
    33b2:	35 07       	cpc	r19, r21
    33b4:	d8 f4       	brcc	.+54     	; 0x33ec <realloc+0x186>
    33b6:	30 93 ec 02 	sts	0x02EC, r19
    33ba:	20 93 eb 02 	sts	0x02EB, r18
    33be:	11 96       	adiw	r26, 0x01	; 1
    33c0:	9c 93       	st	X, r25
    33c2:	8e 93       	st	-X, r24
    33c4:	15 c0       	rjmp	.+42     	; 0x33f0 <realloc+0x18a>
    33c6:	0e 94 00 18 	call	0x3000	; 0x3000 <malloc>
    33ca:	c8 2e       	mov	r12, r24
    33cc:	e6 01       	movw	r28, r12
    33ce:	6e 01       	movw	r12, r28
    33d0:	d9 2e       	mov	r13, r25
    33d2:	e6 01       	movw	r28, r12
    33d4:	20 97       	sbiw	r28, 0x00	; 0
    33d6:	51 f0       	breq	.+20     	; 0x33ec <realloc+0x186>
    33d8:	8c 2d       	mov	r24, r12
    33da:	b8 01       	movw	r22, r16
    33dc:	a7 01       	movw	r20, r14
    33de:	0e 94 3d 1a 	call	0x347a	; 0x347a <memcpy>
    33e2:	c8 01       	movw	r24, r16
    33e4:	0e 94 9a 18 	call	0x3134	; 0x3134 <free>
    33e8:	86 01       	movw	r16, r12
    33ea:	02 c0       	rjmp	.+4      	; 0x33f0 <realloc+0x18a>
    33ec:	00 e0       	ldi	r16, 0x00	; 0
    33ee:	10 e0       	ldi	r17, 0x00	; 0
    33f0:	c8 01       	movw	r24, r16
    33f2:	cd b7       	in	r28, 0x3d	; 61
    33f4:	de b7       	in	r29, 0x3e	; 62
    33f6:	ec e0       	ldi	r30, 0x0C	; 12
    33f8:	0c 94 e5 17 	jmp	0x2fca	; 0x2fca <__epilogue_restores__+0xc>

000033fc <atol>:
    33fc:	1f 93       	push	r17
    33fe:	fc 01       	movw	r30, r24
    3400:	99 27       	eor	r25, r25
    3402:	88 27       	eor	r24, r24
    3404:	bc 01       	movw	r22, r24
    3406:	e8 94       	clt
    3408:	11 91       	ld	r17, Z+
    340a:	10 32       	cpi	r17, 0x20	; 32
    340c:	e9 f3       	breq	.-6      	; 0x3408 <atol+0xc>
    340e:	19 30       	cpi	r17, 0x09	; 9
    3410:	10 f0       	brcs	.+4      	; 0x3416 <atol+0x1a>
    3412:	1e 30       	cpi	r17, 0x0E	; 14
    3414:	c8 f3       	brcs	.-14     	; 0x3408 <atol+0xc>
    3416:	1b 32       	cpi	r17, 0x2B	; 43
    3418:	51 f0       	breq	.+20     	; 0x342e <atol+0x32>
    341a:	1d 32       	cpi	r17, 0x2D	; 45
    341c:	49 f4       	brne	.+18     	; 0x3430 <atol+0x34>
    341e:	68 94       	set
    3420:	06 c0       	rjmp	.+12     	; 0x342e <atol+0x32>
    3422:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__mulsi_const_10>
    3426:	61 0f       	add	r22, r17
    3428:	71 1d       	adc	r23, r1
    342a:	81 1d       	adc	r24, r1
    342c:	91 1d       	adc	r25, r1
    342e:	11 91       	ld	r17, Z+
    3430:	10 53       	subi	r17, 0x30	; 48
    3432:	1a 30       	cpi	r17, 0x0A	; 10
    3434:	b0 f3       	brcs	.-20     	; 0x3422 <atol+0x26>
    3436:	3e f4       	brtc	.+14     	; 0x3446 <atol+0x4a>
    3438:	90 95       	com	r25
    343a:	80 95       	com	r24
    343c:	70 95       	com	r23
    343e:	61 95       	neg	r22
    3440:	7f 4f       	sbci	r23, 0xFF	; 255
    3442:	8f 4f       	sbci	r24, 0xFF	; 255
    3444:	9f 4f       	sbci	r25, 0xFF	; 255
    3446:	1f 91       	pop	r17
    3448:	08 95       	ret

0000344a <isspace>:
    344a:	91 11       	cpse	r25, r1
    344c:	33 c1       	rjmp	.+614    	; 0x36b4 <__ctype_isfalse>
    344e:	80 32       	cpi	r24, 0x20	; 32
    3450:	19 f0       	breq	.+6      	; 0x3458 <isspace+0xe>
    3452:	89 50       	subi	r24, 0x09	; 9
    3454:	85 50       	subi	r24, 0x05	; 5
    3456:	d0 f7       	brcc	.-12     	; 0x344c <isspace+0x2>
    3458:	08 95       	ret

0000345a <tolower>:
    345a:	91 11       	cpse	r25, r1
    345c:	08 95       	ret
    345e:	81 54       	subi	r24, 0x41	; 65
    3460:	8a 51       	subi	r24, 0x1A	; 26
    3462:	08 f4       	brcc	.+2      	; 0x3466 <tolower+0xc>
    3464:	80 5e       	subi	r24, 0xE0	; 224
    3466:	85 5a       	subi	r24, 0xA5	; 165
    3468:	08 95       	ret

0000346a <toupper>:
    346a:	91 11       	cpse	r25, r1
    346c:	08 95       	ret
    346e:	81 56       	subi	r24, 0x61	; 97
    3470:	8a 51       	subi	r24, 0x1A	; 26
    3472:	08 f4       	brcc	.+2      	; 0x3476 <toupper+0xc>
    3474:	80 52       	subi	r24, 0x20	; 32
    3476:	85 58       	subi	r24, 0x85	; 133
    3478:	08 95       	ret

0000347a <memcpy>:
    347a:	fb 01       	movw	r30, r22
    347c:	dc 01       	movw	r26, r24
    347e:	02 c0       	rjmp	.+4      	; 0x3484 <memcpy+0xa>
    3480:	01 90       	ld	r0, Z+
    3482:	0d 92       	st	X+, r0
    3484:	41 50       	subi	r20, 0x01	; 1
    3486:	50 40       	sbci	r21, 0x00	; 0
    3488:	d8 f7       	brcc	.-10     	; 0x3480 <memcpy+0x6>
    348a:	08 95       	ret

0000348c <memmove>:
    348c:	68 17       	cp	r22, r24
    348e:	79 07       	cpc	r23, r25
    3490:	68 f4       	brcc	.+26     	; 0x34ac <memmove+0x20>
    3492:	fb 01       	movw	r30, r22
    3494:	dc 01       	movw	r26, r24
    3496:	e4 0f       	add	r30, r20
    3498:	f5 1f       	adc	r31, r21
    349a:	a4 0f       	add	r26, r20
    349c:	b5 1f       	adc	r27, r21
    349e:	02 c0       	rjmp	.+4      	; 0x34a4 <memmove+0x18>
    34a0:	02 90       	ld	r0, -Z
    34a2:	0e 92       	st	-X, r0
    34a4:	41 50       	subi	r20, 0x01	; 1
    34a6:	50 40       	sbci	r21, 0x00	; 0
    34a8:	d8 f7       	brcc	.-10     	; 0x34a0 <memmove+0x14>
    34aa:	08 95       	ret
    34ac:	0c 94 3d 1a 	jmp	0x347a	; 0x347a <memcpy>

000034b0 <strchr>:
    34b0:	fc 01       	movw	r30, r24
    34b2:	81 91       	ld	r24, Z+
    34b4:	86 17       	cp	r24, r22
    34b6:	21 f0       	breq	.+8      	; 0x34c0 <strchr+0x10>
    34b8:	88 23       	and	r24, r24
    34ba:	d9 f7       	brne	.-10     	; 0x34b2 <strchr+0x2>
    34bc:	99 27       	eor	r25, r25
    34be:	08 95       	ret
    34c0:	31 97       	sbiw	r30, 0x01	; 1
    34c2:	cf 01       	movw	r24, r30
    34c4:	08 95       	ret

000034c6 <strcmp>:
    34c6:	fb 01       	movw	r30, r22
    34c8:	dc 01       	movw	r26, r24
    34ca:	8d 91       	ld	r24, X+
    34cc:	01 90       	ld	r0, Z+
    34ce:	80 19       	sub	r24, r0
    34d0:	01 10       	cpse	r0, r1
    34d2:	d9 f3       	breq	.-10     	; 0x34ca <strcmp+0x4>
    34d4:	99 0b       	sbc	r25, r25
    34d6:	08 95       	ret

000034d8 <strcpy>:
    34d8:	fb 01       	movw	r30, r22
    34da:	dc 01       	movw	r26, r24
    34dc:	01 90       	ld	r0, Z+
    34de:	0d 92       	st	X+, r0
    34e0:	00 20       	and	r0, r0
    34e2:	e1 f7       	brne	.-8      	; 0x34dc <strcpy+0x4>
    34e4:	08 95       	ret

000034e6 <strncmp>:
    34e6:	fb 01       	movw	r30, r22
    34e8:	dc 01       	movw	r26, r24
    34ea:	41 50       	subi	r20, 0x01	; 1
    34ec:	50 40       	sbci	r21, 0x00	; 0
    34ee:	30 f0       	brcs	.+12     	; 0x34fc <strncmp+0x16>
    34f0:	8d 91       	ld	r24, X+
    34f2:	01 90       	ld	r0, Z+
    34f4:	80 19       	sub	r24, r0
    34f6:	19 f4       	brne	.+6      	; 0x34fe <strncmp+0x18>
    34f8:	00 20       	and	r0, r0
    34fa:	b9 f7       	brne	.-18     	; 0x34ea <strncmp+0x4>
    34fc:	88 1b       	sub	r24, r24
    34fe:	99 0b       	sbc	r25, r25
    3500:	08 95       	ret

00003502 <strncpy>:
    3502:	fb 01       	movw	r30, r22
    3504:	dc 01       	movw	r26, r24
    3506:	41 50       	subi	r20, 0x01	; 1
    3508:	50 40       	sbci	r21, 0x00	; 0
    350a:	48 f0       	brcs	.+18     	; 0x351e <strncpy+0x1c>
    350c:	01 90       	ld	r0, Z+
    350e:	0d 92       	st	X+, r0
    3510:	00 20       	and	r0, r0
    3512:	c9 f7       	brne	.-14     	; 0x3506 <strncpy+0x4>
    3514:	01 c0       	rjmp	.+2      	; 0x3518 <strncpy+0x16>
    3516:	1d 92       	st	X+, r1
    3518:	41 50       	subi	r20, 0x01	; 1
    351a:	50 40       	sbci	r21, 0x00	; 0
    351c:	e0 f7       	brcc	.-8      	; 0x3516 <strncpy+0x14>
    351e:	08 95       	ret

00003520 <strrchr>:
    3520:	fc 01       	movw	r30, r24
    3522:	81 e0       	ldi	r24, 0x01	; 1
    3524:	90 e0       	ldi	r25, 0x00	; 0
    3526:	01 90       	ld	r0, Z+
    3528:	06 16       	cp	r0, r22
    352a:	09 f4       	brne	.+2      	; 0x352e <strrchr+0xe>
    352c:	cf 01       	movw	r24, r30
    352e:	00 20       	and	r0, r0
    3530:	d1 f7       	brne	.-12     	; 0x3526 <strrchr+0x6>
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	08 95       	ret

00003536 <strstr>:
    3536:	fb 01       	movw	r30, r22
    3538:	51 91       	ld	r21, Z+
    353a:	55 23       	and	r21, r21
    353c:	a9 f0       	breq	.+42     	; 0x3568 <strstr+0x32>
    353e:	bf 01       	movw	r22, r30
    3540:	dc 01       	movw	r26, r24
    3542:	4d 91       	ld	r20, X+
    3544:	45 17       	cp	r20, r21
    3546:	41 11       	cpse	r20, r1
    3548:	e1 f7       	brne	.-8      	; 0x3542 <strstr+0xc>
    354a:	59 f4       	brne	.+22     	; 0x3562 <strstr+0x2c>
    354c:	cd 01       	movw	r24, r26
    354e:	01 90       	ld	r0, Z+
    3550:	00 20       	and	r0, r0
    3552:	49 f0       	breq	.+18     	; 0x3566 <strstr+0x30>
    3554:	4d 91       	ld	r20, X+
    3556:	40 15       	cp	r20, r0
    3558:	41 11       	cpse	r20, r1
    355a:	c9 f3       	breq	.-14     	; 0x354e <strstr+0x18>
    355c:	fb 01       	movw	r30, r22
    355e:	41 11       	cpse	r20, r1
    3560:	ef cf       	rjmp	.-34     	; 0x3540 <strstr+0xa>
    3562:	81 e0       	ldi	r24, 0x01	; 1
    3564:	90 e0       	ldi	r25, 0x00	; 0
    3566:	01 97       	sbiw	r24, 0x01	; 1
    3568:	08 95       	ret

0000356a <itoa>:
    356a:	fb 01       	movw	r30, r22
    356c:	9f 01       	movw	r18, r30
    356e:	e8 94       	clt
    3570:	42 30       	cpi	r20, 0x02	; 2
    3572:	c4 f0       	brlt	.+48     	; 0x35a4 <itoa+0x3a>
    3574:	45 32       	cpi	r20, 0x25	; 37
    3576:	b4 f4       	brge	.+44     	; 0x35a4 <itoa+0x3a>
    3578:	4a 30       	cpi	r20, 0x0A	; 10
    357a:	29 f4       	brne	.+10     	; 0x3586 <itoa+0x1c>
    357c:	97 fb       	bst	r25, 7
    357e:	1e f4       	brtc	.+6      	; 0x3586 <itoa+0x1c>
    3580:	90 95       	com	r25
    3582:	81 95       	neg	r24
    3584:	9f 4f       	sbci	r25, 0xFF	; 255
    3586:	64 2f       	mov	r22, r20
    3588:	77 27       	eor	r23, r23
    358a:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <__udivmodhi4>
    358e:	80 5d       	subi	r24, 0xD0	; 208
    3590:	8a 33       	cpi	r24, 0x3A	; 58
    3592:	0c f0       	brlt	.+2      	; 0x3596 <itoa+0x2c>
    3594:	89 5d       	subi	r24, 0xD9	; 217
    3596:	81 93       	st	Z+, r24
    3598:	cb 01       	movw	r24, r22
    359a:	00 97       	sbiw	r24, 0x00	; 0
    359c:	a1 f7       	brne	.-24     	; 0x3586 <itoa+0x1c>
    359e:	16 f4       	brtc	.+4      	; 0x35a4 <itoa+0x3a>
    35a0:	5d e2       	ldi	r21, 0x2D	; 45
    35a2:	51 93       	st	Z+, r21
    35a4:	10 82       	st	Z, r1
    35a6:	c9 01       	movw	r24, r18
    35a8:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <strrev>

000035ac <ltoa>:
    35ac:	fa 01       	movw	r30, r20
    35ae:	cf 93       	push	r28
    35b0:	ff 93       	push	r31
    35b2:	ef 93       	push	r30
    35b4:	22 30       	cpi	r18, 0x02	; 2
    35b6:	44 f1       	brlt	.+80     	; 0x3608 <ltoa+0x5c>
    35b8:	25 32       	cpi	r18, 0x25	; 37
    35ba:	34 f5       	brge	.+76     	; 0x3608 <ltoa+0x5c>
    35bc:	c2 2f       	mov	r28, r18
    35be:	e8 94       	clt
    35c0:	ca 30       	cpi	r28, 0x0A	; 10
    35c2:	49 f4       	brne	.+18     	; 0x35d6 <ltoa+0x2a>
    35c4:	97 fb       	bst	r25, 7
    35c6:	3e f4       	brtc	.+14     	; 0x35d6 <ltoa+0x2a>
    35c8:	90 95       	com	r25
    35ca:	80 95       	com	r24
    35cc:	70 95       	com	r23
    35ce:	61 95       	neg	r22
    35d0:	7f 4f       	sbci	r23, 0xFF	; 255
    35d2:	8f 4f       	sbci	r24, 0xFF	; 255
    35d4:	9f 4f       	sbci	r25, 0xFF	; 255
    35d6:	2c 2f       	mov	r18, r28
    35d8:	33 27       	eor	r19, r19
    35da:	44 27       	eor	r20, r20
    35dc:	55 27       	eor	r21, r21
    35de:	ff 93       	push	r31
    35e0:	ef 93       	push	r30
    35e2:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__udivmodsi4>
    35e6:	ef 91       	pop	r30
    35e8:	ff 91       	pop	r31
    35ea:	60 5d       	subi	r22, 0xD0	; 208
    35ec:	6a 33       	cpi	r22, 0x3A	; 58
    35ee:	0c f0       	brlt	.+2      	; 0x35f2 <ltoa+0x46>
    35f0:	69 5d       	subi	r22, 0xD9	; 217
    35f2:	61 93       	st	Z+, r22
    35f4:	b9 01       	movw	r22, r18
    35f6:	ca 01       	movw	r24, r20
    35f8:	60 50       	subi	r22, 0x00	; 0
    35fa:	70 40       	sbci	r23, 0x00	; 0
    35fc:	80 40       	sbci	r24, 0x00	; 0
    35fe:	90 40       	sbci	r25, 0x00	; 0
    3600:	51 f7       	brne	.-44     	; 0x35d6 <ltoa+0x2a>
    3602:	16 f4       	brtc	.+4      	; 0x3608 <ltoa+0x5c>
    3604:	cd e2       	ldi	r28, 0x2D	; 45
    3606:	c1 93       	st	Z+, r28
    3608:	10 82       	st	Z, r1
    360a:	8f 91       	pop	r24
    360c:	9f 91       	pop	r25
    360e:	cf 91       	pop	r28
    3610:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <strrev>

00003614 <__mulsi_const_10>:
    3614:	59 2f       	mov	r21, r25
    3616:	48 2f       	mov	r20, r24
    3618:	37 2f       	mov	r19, r23
    361a:	26 2f       	mov	r18, r22
    361c:	66 0f       	add	r22, r22
    361e:	77 1f       	adc	r23, r23
    3620:	88 1f       	adc	r24, r24
    3622:	99 1f       	adc	r25, r25
    3624:	66 0f       	add	r22, r22
    3626:	77 1f       	adc	r23, r23
    3628:	88 1f       	adc	r24, r24
    362a:	99 1f       	adc	r25, r25
    362c:	62 0f       	add	r22, r18
    362e:	73 1f       	adc	r23, r19
    3630:	84 1f       	adc	r24, r20
    3632:	95 1f       	adc	r25, r21
    3634:	66 0f       	add	r22, r22
    3636:	77 1f       	adc	r23, r23
    3638:	88 1f       	adc	r24, r24
    363a:	99 1f       	adc	r25, r25
    363c:	08 95       	ret

0000363e <ultoa>:
    363e:	fa 01       	movw	r30, r20
    3640:	cf 93       	push	r28
    3642:	ff 93       	push	r31
    3644:	ef 93       	push	r30
    3646:	22 30       	cpi	r18, 0x02	; 2
    3648:	cc f0       	brlt	.+50     	; 0x367c <ultoa+0x3e>
    364a:	25 32       	cpi	r18, 0x25	; 37
    364c:	bc f4       	brge	.+46     	; 0x367c <ultoa+0x3e>
    364e:	c2 2f       	mov	r28, r18
    3650:	2c 2f       	mov	r18, r28
    3652:	33 27       	eor	r19, r19
    3654:	44 27       	eor	r20, r20
    3656:	55 27       	eor	r21, r21
    3658:	ff 93       	push	r31
    365a:	ef 93       	push	r30
    365c:	0e 94 8d 17 	call	0x2f1a	; 0x2f1a <__udivmodsi4>
    3660:	ef 91       	pop	r30
    3662:	ff 91       	pop	r31
    3664:	60 5d       	subi	r22, 0xD0	; 208
    3666:	6a 33       	cpi	r22, 0x3A	; 58
    3668:	0c f0       	brlt	.+2      	; 0x366c <ultoa+0x2e>
    366a:	69 5d       	subi	r22, 0xD9	; 217
    366c:	61 93       	st	Z+, r22
    366e:	b9 01       	movw	r22, r18
    3670:	ca 01       	movw	r24, r20
    3672:	60 50       	subi	r22, 0x00	; 0
    3674:	70 40       	sbci	r23, 0x00	; 0
    3676:	80 40       	sbci	r24, 0x00	; 0
    3678:	90 40       	sbci	r25, 0x00	; 0
    367a:	51 f7       	brne	.-44     	; 0x3650 <ultoa+0x12>
    367c:	10 82       	st	Z, r1
    367e:	8f 91       	pop	r24
    3680:	9f 91       	pop	r25
    3682:	cf 91       	pop	r28
    3684:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <strrev>

00003688 <utoa>:
    3688:	fb 01       	movw	r30, r22
    368a:	9f 01       	movw	r18, r30
    368c:	42 30       	cpi	r20, 0x02	; 2
    368e:	74 f0       	brlt	.+28     	; 0x36ac <utoa+0x24>
    3690:	45 32       	cpi	r20, 0x25	; 37
    3692:	64 f4       	brge	.+24     	; 0x36ac <utoa+0x24>
    3694:	64 2f       	mov	r22, r20
    3696:	77 27       	eor	r23, r23
    3698:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <__udivmodhi4>
    369c:	80 5d       	subi	r24, 0xD0	; 208
    369e:	8a 33       	cpi	r24, 0x3A	; 58
    36a0:	0c f0       	brlt	.+2      	; 0x36a4 <utoa+0x1c>
    36a2:	89 5d       	subi	r24, 0xD9	; 217
    36a4:	81 93       	st	Z+, r24
    36a6:	cb 01       	movw	r24, r22
    36a8:	00 97       	sbiw	r24, 0x00	; 0
    36aa:	a1 f7       	brne	.-24     	; 0x3694 <utoa+0xc>
    36ac:	10 82       	st	Z, r1
    36ae:	c9 01       	movw	r24, r18
    36b0:	0c 94 5d 1b 	jmp	0x36ba	; 0x36ba <strrev>

000036b4 <__ctype_isfalse>:
    36b4:	99 27       	eor	r25, r25
    36b6:	88 27       	eor	r24, r24

000036b8 <__ctype_istrue>:
    36b8:	08 95       	ret

000036ba <strrev>:
    36ba:	dc 01       	movw	r26, r24
    36bc:	fc 01       	movw	r30, r24
    36be:	67 2f       	mov	r22, r23
    36c0:	71 91       	ld	r23, Z+
    36c2:	77 23       	and	r23, r23
    36c4:	e1 f7       	brne	.-8      	; 0x36be <strrev+0x4>
    36c6:	32 97       	sbiw	r30, 0x02	; 2
    36c8:	04 c0       	rjmp	.+8      	; 0x36d2 <strrev+0x18>
    36ca:	7c 91       	ld	r23, X
    36cc:	6d 93       	st	X+, r22
    36ce:	70 83       	st	Z, r23
    36d0:	62 91       	ld	r22, -Z
    36d2:	ae 17       	cp	r26, r30
    36d4:	bf 07       	cpc	r27, r31
    36d6:	c8 f3       	brcs	.-14     	; 0x36ca <strrev+0x10>
    36d8:	08 95       	ret

000036da <_exit>:
    36da:	f8 94       	cli

000036dc <__stop_program>:
    36dc:	ff cf       	rjmp	.-2      	; 0x36dc <__stop_program>
