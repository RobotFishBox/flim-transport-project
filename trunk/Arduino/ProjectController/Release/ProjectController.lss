
ProjectController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000216  00800100  0000532a  000053be  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000532a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d6  00800316  00800316  000055d4  2**0
                  ALLOC
  3 .stab         000097f8  00000000  00000000  000055d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008d69  00000000  00000000  0000edcc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <__vector_7>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 13 0d 	jmp	0x1a26	; 0x1a26 <__vector_11>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 cb 15 	jmp	0x2b96	; 0x2b96 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 5b 23 	jmp	0x46b6	; 0x46b6 <__vector_18>
      4c:	0c 94 8c 23 	jmp	0x4718	; 0x4718 <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	e7 24       	eor	r14, r7

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	13 e0       	ldi	r17, 0x03	; 3
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	ea e2       	ldi	r30, 0x2A	; 42
      d8:	f3 e5       	ldi	r31, 0x53	; 83
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a6 31       	cpi	r26, 0x16	; 22
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	13 e0       	ldi	r17, 0x03	; 3
      e8:	a6 e1       	ldi	r26, 0x16	; 22
      ea:	b3 e0       	ldi	r27, 0x03	; 3
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	ac 3e       	cpi	r26, 0xEC	; 236
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c4 ec       	ldi	r28, 0xC4	; 196
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	22 97       	sbiw	r28, 0x02	; 2
     100:	fe 01       	movw	r30, r28
     102:	0e 94 a6 25 	call	0x4b4c	; 0x4b4c <__tablejump__>
     106:	c2 3c       	cpi	r28, 0xC2	; 194
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 bb 0d 	call	0x1b76	; 0x1b76 <main>
     110:	0c 94 93 29 	jmp	0x5326	; 0x5326 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_ZN12AccelStepper4stepEh>:
     118:	dc 01       	movw	r26, r24
     11a:	12 96       	adiw	r26, 0x02	; 2
     11c:	2c 91       	ld	r18, X
     11e:	12 97       	sbiw	r26, 0x02	; 2
     120:	21 30       	cpi	r18, 0x01	; 1
     122:	79 f0       	breq	.+30     	; 0x142 <_ZN12AccelStepper4stepEh+0x2a>
     124:	21 30       	cpi	r18, 0x01	; 1
     126:	28 f0       	brcs	.+10     	; 0x132 <_ZN12AccelStepper4stepEh+0x1a>
     128:	22 30       	cpi	r18, 0x02	; 2
     12a:	99 f0       	breq	.+38     	; 0x152 <_ZN12AccelStepper4stepEh+0x3a>
     12c:	24 30       	cpi	r18, 0x04	; 4
     12e:	01 f5       	brne	.+64     	; 0x170 <_ZN12AccelStepper4stepEh+0x58>
     130:	18 c0       	rjmp	.+48     	; 0x162 <_ZN12AccelStepper4stepEh+0x4a>
     132:	dc 01       	movw	r26, r24
     134:	ed 91       	ld	r30, X+
     136:	fc 91       	ld	r31, X
     138:	02 80       	ldd	r0, Z+2	; 0x02
     13a:	f3 81       	ldd	r31, Z+3	; 0x03
     13c:	e0 2d       	mov	r30, r0
     13e:	09 95       	icall
     140:	08 95       	ret
     142:	dc 01       	movw	r26, r24
     144:	ed 91       	ld	r30, X+
     146:	fc 91       	ld	r31, X
     148:	11 97       	sbiw	r26, 0x01	; 1
     14a:	04 80       	ldd	r0, Z+4	; 0x04
     14c:	f5 81       	ldd	r31, Z+5	; 0x05
     14e:	e0 2d       	mov	r30, r0
     150:	06 c0       	rjmp	.+12     	; 0x15e <_ZN12AccelStepper4stepEh+0x46>
     152:	dc 01       	movw	r26, r24
     154:	ed 91       	ld	r30, X+
     156:	fc 91       	ld	r31, X
     158:	06 80       	ldd	r0, Z+6	; 0x06
     15a:	f7 81       	ldd	r31, Z+7	; 0x07
     15c:	e0 2d       	mov	r30, r0
     15e:	09 95       	icall
     160:	08 95       	ret
     162:	dc 01       	movw	r26, r24
     164:	ed 91       	ld	r30, X+
     166:	fc 91       	ld	r31, X
     168:	00 84       	ldd	r0, Z+8	; 0x08
     16a:	f1 85       	ldd	r31, Z+9	; 0x09
     16c:	e0 2d       	mov	r30, r0
     16e:	09 95       	icall
     170:	08 95       	ret

00000172 <_ZN12AccelStepper5step0Ev>:
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	ec 01       	movw	r28, r24
     178:	6f 85       	ldd	r22, Y+15	; 0x0f
     17a:	78 89       	ldd	r23, Y+16	; 0x10
     17c:	89 89       	ldd	r24, Y+17	; 0x11
     17e:	9a 89       	ldd	r25, Y+18	; 0x12
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	a9 01       	movw	r20, r18
     186:	0e 94 a3 11 	call	0x2346	; 0x2346 <__gtsf2>
     18a:	18 16       	cp	r1, r24
     18c:	1c f4       	brge	.+6      	; 0x194 <_ZN12AccelStepper5step0Ev+0x22>
     18e:	eb a1       	ldd	r30, Y+35	; 0x23
     190:	fc a1       	ldd	r31, Y+36	; 0x24
     192:	02 c0       	rjmp	.+4      	; 0x198 <_ZN12AccelStepper5step0Ev+0x26>
     194:	ed a1       	ldd	r30, Y+37	; 0x25
     196:	fe a1       	ldd	r31, Y+38	; 0x26
     198:	09 95       	icall
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	08 95       	ret

000001a0 <_ZN12AccelStepper5step4Eh>:
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	ec 01       	movw	r28, r24
     1a6:	61 30       	cpi	r22, 0x01	; 1
     1a8:	71 f0       	breq	.+28     	; 0x1c6 <_ZN12AccelStepper5step4Eh+0x26>
     1aa:	61 30       	cpi	r22, 0x01	; 1
     1ac:	28 f0       	brcs	.+10     	; 0x1b8 <_ZN12AccelStepper5step4Eh+0x18>
     1ae:	62 30       	cpi	r22, 0x02	; 2
     1b0:	c9 f0       	breq	.+50     	; 0x1e4 <_ZN12AccelStepper5step4Eh+0x44>
     1b2:	63 30       	cpi	r22, 0x03	; 3
     1b4:	71 f5       	brne	.+92     	; 0x212 <_ZN12AccelStepper5step4Eh+0x72>
     1b6:	1d c0       	rjmp	.+58     	; 0x1f2 <_ZN12AccelStepper5step4Eh+0x52>
     1b8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ba:	61 e0       	ldi	r22, 0x01	; 1
     1bc:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     1c0:	8c 81       	ldd	r24, Y+4	; 0x04
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	06 c0       	rjmp	.+12     	; 0x1d2 <_ZN12AccelStepper5step4Eh+0x32>
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     1ce:	8c 81       	ldd	r24, Y+4	; 0x04
     1d0:	61 e0       	ldi	r22, 0x01	; 1
     1d2:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     1d6:	8d 81       	ldd	r24, Y+5	; 0x05
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     1de:	8e 81       	ldd	r24, Y+6	; 0x06
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	15 c0       	rjmp	.+42     	; 0x20e <_ZN12AccelStepper5step4Eh+0x6e>
     1e4:	8b 81       	ldd	r24, Y+3	; 0x03
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     1ec:	8c 81       	ldd	r24, Y+4	; 0x04
     1ee:	61 e0       	ldi	r22, 0x01	; 1
     1f0:	06 c0       	rjmp	.+12     	; 0x1fe <_ZN12AccelStepper5step4Eh+0x5e>
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     1fa:	8c 81       	ldd	r24, Y+4	; 0x04
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     202:	8d 81       	ldd	r24, Y+5	; 0x05
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     20a:	8e 81       	ldd	r24, Y+6	; 0x06
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <_ZN12AccelStepper5step2Eh>:
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	ec 01       	movw	r28, r24
     21e:	61 30       	cpi	r22, 0x01	; 1
     220:	51 f0       	breq	.+20     	; 0x236 <_ZN12AccelStepper5step2Eh+0x1e>
     222:	61 30       	cpi	r22, 0x01	; 1
     224:	28 f0       	brcs	.+10     	; 0x230 <_ZN12AccelStepper5step2Eh+0x18>
     226:	62 30       	cpi	r22, 0x02	; 2
     228:	69 f0       	breq	.+26     	; 0x244 <_ZN12AccelStepper5step2Eh+0x2c>
     22a:	63 30       	cpi	r22, 0x03	; 3
     22c:	b1 f4       	brne	.+44     	; 0x25a <_ZN12AccelStepper5step2Eh+0x42>
     22e:	0d c0       	rjmp	.+26     	; 0x24a <_ZN12AccelStepper5step2Eh+0x32>
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	02 c0       	rjmp	.+4      	; 0x23a <_ZN12AccelStepper5step2Eh+0x22>
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	61 e0       	ldi	r22, 0x01	; 1
     23a:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     23e:	8c 81       	ldd	r24, Y+4	; 0x04
     240:	61 e0       	ldi	r22, 0x01	; 1
     242:	09 c0       	rjmp	.+18     	; 0x256 <_ZN12AccelStepper5step2Eh+0x3e>
     244:	8b 81       	ldd	r24, Y+3	; 0x03
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	02 c0       	rjmp	.+4      	; 0x24e <_ZN12AccelStepper5step2Eh+0x36>
     24a:	8b 81       	ldd	r24, Y+3	; 0x03
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     252:	8c 81       	ldd	r24, Y+4	; 0x04
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <_ZN12AccelStepper5step1Eh>:
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	6f 85       	ldd	r22, Y+15	; 0x0f
     26c:	78 89       	ldd	r23, Y+16	; 0x10
     26e:	89 89       	ldd	r24, Y+17	; 0x11
     270:	9a 89       	ldd	r25, Y+18	; 0x12
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	a9 01       	movw	r20, r18
     278:	0e 94 a3 11 	call	0x2346	; 0x2346 <__gtsf2>
     27c:	18 16       	cp	r1, r24
     27e:	0c f0       	brlt	.+2      	; 0x282 <_ZN12AccelStepper5step1Eh+0x22>
     280:	10 e0       	ldi	r17, 0x00	; 0
     282:	8c 81       	ldd	r24, Y+4	; 0x04
     284:	61 2f       	mov	r22, r17
     286:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     28a:	8b 81       	ldd	r24, Y+3	; 0x03
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <delayMicroseconds>
     29a:	8b 81       	ldd	r24, Y+3	; 0x03
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	08 95       	ret

000002aa <_ZN12AccelStepper12desiredSpeedEv>:
     2aa:	af 92       	push	r10
     2ac:	bf 92       	push	r11
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
     2c0:	6b 85       	ldd	r22, Y+11	; 0x0b
     2c2:	7c 85       	ldd	r23, Y+12	; 0x0c
     2c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     2c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     2c8:	2f 81       	ldd	r18, Y+7	; 0x07
     2ca:	38 85       	ldd	r19, Y+8	; 0x08
     2cc:	49 85       	ldd	r20, Y+9	; 0x09
     2ce:	5a 85       	ldd	r21, Y+10	; 0x0a
     2d0:	62 1b       	sub	r22, r18
     2d2:	73 0b       	sbc	r23, r19
     2d4:	84 0b       	sbc	r24, r20
     2d6:	95 0b       	sbc	r25, r21
     2d8:	09 f4       	brne	.+2      	; 0x2dc <_ZN12AccelStepper12desiredSpeedEv+0x32>
     2da:	d9 c0       	rjmp	.+434    	; 0x48e <_ZN12AccelStepper12desiredSpeedEv+0x1e4>
     2dc:	16 16       	cp	r1, r22
     2de:	17 06       	cpc	r1, r23
     2e0:	18 06       	cpc	r1, r24
     2e2:	19 06       	cpc	r1, r25
     2e4:	8c f4       	brge	.+34     	; 0x308 <_ZN12AccelStepper12desiredSpeedEv+0x5e>
     2e6:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
     2ea:	9b 01       	movw	r18, r22
     2ec:	ac 01       	movw	r20, r24
     2ee:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__addsf3>
     2f2:	2f 89       	ldd	r18, Y+23	; 0x17
     2f4:	38 8d       	ldd	r19, Y+24	; 0x18
     2f6:	49 8d       	ldd	r20, Y+25	; 0x19
     2f8:	5a 8d       	ldd	r21, Y+26	; 0x1a
     2fa:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
     2fe:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <sqrt>
     302:	7b 01       	movw	r14, r22
     304:	8c 01       	movw	r16, r24
     306:	1b c0       	rjmp	.+54     	; 0x33e <_ZN12AccelStepper12desiredSpeedEv+0x94>
     308:	90 95       	com	r25
     30a:	80 95       	com	r24
     30c:	70 95       	com	r23
     30e:	61 95       	neg	r22
     310:	7f 4f       	sbci	r23, 0xFF	; 255
     312:	8f 4f       	sbci	r24, 0xFF	; 255
     314:	9f 4f       	sbci	r25, 0xFF	; 255
     316:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
     31a:	9b 01       	movw	r18, r22
     31c:	ac 01       	movw	r20, r24
     31e:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__addsf3>
     322:	2f 89       	ldd	r18, Y+23	; 0x17
     324:	38 8d       	ldd	r19, Y+24	; 0x18
     326:	49 8d       	ldd	r20, Y+25	; 0x19
     328:	5a 8d       	ldd	r21, Y+26	; 0x1a
     32a:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
     32e:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <sqrt>
     332:	7b 01       	movw	r14, r22
     334:	8c 01       	movw	r16, r24
     336:	17 fb       	bst	r17, 7
     338:	10 95       	com	r17
     33a:	17 f9       	bld	r17, 7
     33c:	10 95       	com	r17
     33e:	af 84       	ldd	r10, Y+15	; 0x0f
     340:	b8 88       	ldd	r11, Y+16	; 0x10
     342:	c9 88       	ldd	r12, Y+17	; 0x11
     344:	da 88       	ldd	r13, Y+18	; 0x12
     346:	c8 01       	movw	r24, r16
     348:	b7 01       	movw	r22, r14
     34a:	a6 01       	movw	r20, r12
     34c:	95 01       	movw	r18, r10
     34e:	0e 94 a3 11 	call	0x2346	; 0x2346 <__gtsf2>
     352:	18 16       	cp	r1, r24
     354:	0c f0       	brlt	.+2      	; 0x358 <_ZN12AccelStepper12desiredSpeedEv+0xae>
     356:	45 c0       	rjmp	.+138    	; 0x3e2 <_ZN12AccelStepper12desiredSpeedEv+0x138>
     358:	c6 01       	movw	r24, r12
     35a:	b5 01       	movw	r22, r10
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	a9 01       	movw	r20, r18
     362:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__eqsf2>
     366:	88 23       	and	r24, r24
     368:	59 f4       	brne	.+22     	; 0x380 <_ZN12AccelStepper12desiredSpeedEv+0xd6>
     36a:	2f 89       	ldd	r18, Y+23	; 0x17
     36c:	38 8d       	ldd	r19, Y+24	; 0x18
     36e:	49 8d       	ldd	r20, Y+25	; 0x19
     370:	5a 8d       	ldd	r21, Y+26	; 0x1a
     372:	ca 01       	movw	r24, r20
     374:	b9 01       	movw	r22, r18
     376:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__addsf3>
     37a:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <sqrt>
     37e:	1d c0       	rjmp	.+58     	; 0x3ba <_ZN12AccelStepper12desiredSpeedEv+0x110>
     380:	6f 89       	ldd	r22, Y+23	; 0x17
     382:	78 8d       	ldd	r23, Y+24	; 0x18
     384:	89 8d       	ldd	r24, Y+25	; 0x19
     386:	9a 8d       	ldd	r25, Y+26	; 0x1a
     388:	a6 01       	movw	r20, r12
     38a:	95 01       	movw	r18, r10
     38c:	0e 94 c5 10 	call	0x218a	; 0x218a <__divsf3>
     390:	e6 2e       	mov	r14, r22
     392:	f7 2e       	mov	r15, r23
     394:	08 2f       	mov	r16, r24
     396:	19 2f       	mov	r17, r25
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	a9 01       	movw	r20, r18
     39e:	0e 94 a3 11 	call	0x2346	; 0x2346 <__gtsf2>
     3a2:	18 16       	cp	r1, r24
     3a4:	24 f0       	brlt	.+8      	; 0x3ae <_ZN12AccelStepper12desiredSpeedEv+0x104>
     3a6:	17 fb       	bst	r17, 7
     3a8:	10 95       	com	r17
     3aa:	17 f9       	bld	r17, 7
     3ac:	10 95       	com	r17
     3ae:	c6 01       	movw	r24, r12
     3b0:	b5 01       	movw	r22, r10
     3b2:	a8 01       	movw	r20, r16
     3b4:	97 01       	movw	r18, r14
     3b6:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__addsf3>
     3ba:	c6 2e       	mov	r12, r22
     3bc:	b7 2e       	mov	r11, r23
     3be:	a8 2e       	mov	r10, r24
     3c0:	d9 2e       	mov	r13, r25
     3c2:	eb 88       	ldd	r14, Y+19	; 0x13
     3c4:	fc 88       	ldd	r15, Y+20	; 0x14
     3c6:	0d 89       	ldd	r16, Y+21	; 0x15
     3c8:	1e 89       	ldd	r17, Y+22	; 0x16
     3ca:	a8 01       	movw	r20, r16
     3cc:	97 01       	movw	r18, r14
     3ce:	0e 94 a3 11 	call	0x2346	; 0x2346 <__gtsf2>
     3d2:	18 16       	cp	r1, r24
     3d4:	0c f4       	brge	.+2      	; 0x3d8 <_ZN12AccelStepper12desiredSpeedEv+0x12e>
     3d6:	65 c0       	rjmp	.+202    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3d8:	ec 2c       	mov	r14, r12
     3da:	fb 2c       	mov	r15, r11
     3dc:	0a 2d       	mov	r16, r10
     3de:	1d 2d       	mov	r17, r13
     3e0:	60 c0       	rjmp	.+192    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3e2:	c8 01       	movw	r24, r16
     3e4:	b7 01       	movw	r22, r14
     3e6:	a6 01       	movw	r20, r12
     3e8:	95 01       	movw	r18, r10
     3ea:	0e 94 03 12 	call	0x2406	; 0x2406 <__ltsf2>
     3ee:	87 ff       	sbrs	r24, 7
     3f0:	58 c0       	rjmp	.+176    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3f2:	c6 01       	movw	r24, r12
     3f4:	b5 01       	movw	r22, r10
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	a9 01       	movw	r20, r18
     3fc:	0e 94 73 11 	call	0x22e6	; 0x22e6 <__eqsf2>
     400:	88 23       	and	r24, r24
     402:	89 f4       	brne	.+34     	; 0x426 <_ZN12AccelStepper12desiredSpeedEv+0x17c>
     404:	2f 89       	ldd	r18, Y+23	; 0x17
     406:	38 8d       	ldd	r19, Y+24	; 0x18
     408:	49 8d       	ldd	r20, Y+25	; 0x19
     40a:	5a 8d       	ldd	r21, Y+26	; 0x1a
     40c:	ca 01       	movw	r24, r20
     40e:	b9 01       	movw	r22, r18
     410:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__addsf3>
     414:	0e 94 ae 25 	call	0x4b5c	; 0x4b5c <sqrt>
     418:	5b 01       	movw	r10, r22
     41a:	6c 01       	movw	r12, r24
     41c:	d7 fa       	bst	r13, 7
     41e:	d0 94       	com	r13
     420:	d7 f8       	bld	r13, 7
     422:	d0 94       	com	r13
     424:	21 c0       	rjmp	.+66     	; 0x468 <_ZN12AccelStepper12desiredSpeedEv+0x1be>
     426:	6f 89       	ldd	r22, Y+23	; 0x17
     428:	78 8d       	ldd	r23, Y+24	; 0x18
     42a:	89 8d       	ldd	r24, Y+25	; 0x19
     42c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     42e:	a6 01       	movw	r20, r12
     430:	95 01       	movw	r18, r10
     432:	0e 94 c5 10 	call	0x218a	; 0x218a <__divsf3>
     436:	e6 2e       	mov	r14, r22
     438:	f7 2e       	mov	r15, r23
     43a:	08 2f       	mov	r16, r24
     43c:	19 2f       	mov	r17, r25
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	a9 01       	movw	r20, r18
     444:	0e 94 a3 11 	call	0x2346	; 0x2346 <__gtsf2>
     448:	18 16       	cp	r1, r24
     44a:	24 f0       	brlt	.+8      	; 0x454 <_ZN12AccelStepper12desiredSpeedEv+0x1aa>
     44c:	17 fb       	bst	r17, 7
     44e:	10 95       	com	r17
     450:	17 f9       	bld	r17, 7
     452:	10 95       	com	r17
     454:	c6 01       	movw	r24, r12
     456:	b5 01       	movw	r22, r10
     458:	a8 01       	movw	r20, r16
     45a:	97 01       	movw	r18, r14
     45c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__subsf3>
     460:	a6 2e       	mov	r10, r22
     462:	b7 2e       	mov	r11, r23
     464:	c8 2e       	mov	r12, r24
     466:	d9 2e       	mov	r13, r25
     468:	eb 88       	ldd	r14, Y+19	; 0x13
     46a:	fc 88       	ldd	r15, Y+20	; 0x14
     46c:	0d 89       	ldd	r16, Y+21	; 0x15
     46e:	1e 89       	ldd	r17, Y+22	; 0x16
     470:	17 fb       	bst	r17, 7
     472:	10 95       	com	r17
     474:	17 f9       	bld	r17, 7
     476:	10 95       	com	r17
     478:	c6 01       	movw	r24, r12
     47a:	b5 01       	movw	r22, r10
     47c:	a8 01       	movw	r20, r16
     47e:	97 01       	movw	r18, r14
     480:	0e 94 03 12 	call	0x2406	; 0x2406 <__ltsf2>
     484:	87 fd       	sbrc	r24, 7
     486:	0d c0       	rjmp	.+26     	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     488:	86 01       	movw	r16, r12
     48a:	75 01       	movw	r14, r10
     48c:	0a c0       	rjmp	.+20     	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     48e:	0f 2e       	mov	r0, r31
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	ef 2e       	mov	r14, r31
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	ff 2e       	mov	r15, r31
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	0f 2f       	mov	r16, r31
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	1f 2f       	mov	r17, r31
     4a0:	f0 2d       	mov	r31, r0
     4a2:	6e 2d       	mov	r22, r14
     4a4:	7f 2d       	mov	r23, r15
     4a6:	80 2f       	mov	r24, r16
     4a8:	91 2f       	mov	r25, r17
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	df 90       	pop	r13
     4b8:	cf 90       	pop	r12
     4ba:	bf 90       	pop	r11
     4bc:	af 90       	pop	r10
     4be:	08 95       	ret

000004c0 <_ZN12AccelStepper8runSpeedEv>:
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	ec 01       	movw	r28, r24
     4d6:	0e 94 13 16 	call	0x2c26	; 0x2c26 <millis>
     4da:	5b 01       	movw	r10, r22
     4dc:	6c 01       	movw	r12, r24
     4de:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4e2:	ad 8d       	ldd	r26, Y+29	; 0x1d
     4e4:	be 8d       	ldd	r27, Y+30	; 0x1e
     4e6:	2f 8d       	ldd	r18, Y+31	; 0x1f
     4e8:	38 a1       	ldd	r19, Y+32	; 0x20
     4ea:	49 a1       	ldd	r20, Y+33	; 0x21
     4ec:	5a a1       	ldd	r21, Y+34	; 0x22
     4ee:	82 0f       	add	r24, r18
     4f0:	93 1f       	adc	r25, r19
     4f2:	a4 1f       	adc	r26, r20
     4f4:	b5 1f       	adc	r27, r21
     4f6:	8a 15       	cp	r24, r10
     4f8:	9b 05       	cpc	r25, r11
     4fa:	ac 05       	cpc	r26, r12
     4fc:	bd 05       	cpc	r27, r13
     4fe:	c0 f5       	brcc	.+112    	; 0x570 <_ZN12AccelStepper8runSpeedEv+0xb0>
     500:	ef 84       	ldd	r14, Y+15	; 0x0f
     502:	f8 88       	ldd	r15, Y+16	; 0x10
     504:	09 89       	ldd	r16, Y+17	; 0x11
     506:	1a 89       	ldd	r17, Y+18	; 0x12
     508:	c8 01       	movw	r24, r16
     50a:	b7 01       	movw	r22, r14
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	a9 01       	movw	r20, r18
     512:	0e 94 a3 11 	call	0x2346	; 0x2346 <__gtsf2>
     516:	18 16       	cp	r1, r24
     518:	44 f4       	brge	.+16     	; 0x52a <_ZN12AccelStepper8runSpeedEv+0x6a>
     51a:	8f 81       	ldd	r24, Y+7	; 0x07
     51c:	98 85       	ldd	r25, Y+8	; 0x08
     51e:	a9 85       	ldd	r26, Y+9	; 0x09
     520:	ba 85       	ldd	r27, Y+10	; 0x0a
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	a1 1d       	adc	r26, r1
     526:	b1 1d       	adc	r27, r1
     528:	10 c0       	rjmp	.+32     	; 0x54a <_ZN12AccelStepper8runSpeedEv+0x8a>
     52a:	c8 01       	movw	r24, r16
     52c:	b7 01       	movw	r22, r14
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	a9 01       	movw	r20, r18
     534:	0e 94 03 12 	call	0x2406	; 0x2406 <__ltsf2>
     538:	87 ff       	sbrs	r24, 7
     53a:	0b c0       	rjmp	.+22     	; 0x552 <_ZN12AccelStepper8runSpeedEv+0x92>
     53c:	8f 81       	ldd	r24, Y+7	; 0x07
     53e:	98 85       	ldd	r25, Y+8	; 0x08
     540:	a9 85       	ldd	r26, Y+9	; 0x09
     542:	ba 85       	ldd	r27, Y+10	; 0x0a
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	a1 09       	sbc	r26, r1
     548:	b1 09       	sbc	r27, r1
     54a:	8f 83       	std	Y+7, r24	; 0x07
     54c:	98 87       	std	Y+8, r25	; 0x08
     54e:	a9 87       	std	Y+9, r26	; 0x09
     550:	ba 87       	std	Y+10, r27	; 0x0a
     552:	e8 81       	ld	r30, Y
     554:	f9 81       	ldd	r31, Y+1	; 0x01
     556:	6f 81       	ldd	r22, Y+7	; 0x07
     558:	63 70       	andi	r22, 0x03	; 3
     55a:	01 90       	ld	r0, Z+
     55c:	f0 81       	ld	r31, Z
     55e:	e0 2d       	mov	r30, r0
     560:	ce 01       	movw	r24, r28
     562:	09 95       	icall
     564:	af 8e       	std	Y+31, r10	; 0x1f
     566:	b8 a2       	std	Y+32, r11	; 0x20
     568:	c9 a2       	std	Y+33, r12	; 0x21
     56a:	da a2       	std	Y+34, r13	; 0x22
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	01 c0       	rjmp	.+2      	; 0x572 <_ZN12AccelStepper8runSpeedEv+0xb2>
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	bf 90       	pop	r11
     584:	af 90       	pop	r10
     586:	08 95       	ret

00000588 <_ZN12AccelStepper12distanceToGoEv>:
     588:	fc 01       	movw	r30, r24
     58a:	23 85       	ldd	r18, Z+11	; 0x0b
     58c:	34 85       	ldd	r19, Z+12	; 0x0c
     58e:	45 85       	ldd	r20, Z+13	; 0x0d
     590:	56 85       	ldd	r21, Z+14	; 0x0e
     592:	87 81       	ldd	r24, Z+7	; 0x07
     594:	90 85       	ldd	r25, Z+8	; 0x08
     596:	a1 85       	ldd	r26, Z+9	; 0x09
     598:	b2 85       	ldd	r27, Z+10	; 0x0a
     59a:	28 1b       	sub	r18, r24
     59c:	39 0b       	sbc	r19, r25
     59e:	4a 0b       	sbc	r20, r26
     5a0:	5b 0b       	sbc	r21, r27
     5a2:	b9 01       	movw	r22, r18
     5a4:	ca 01       	movw	r24, r20
     5a6:	08 95       	ret

000005a8 <_ZN12AccelStepper14targetPositionEv>:
     5a8:	fc 01       	movw	r30, r24
     5aa:	63 85       	ldd	r22, Z+11	; 0x0b
     5ac:	74 85       	ldd	r23, Z+12	; 0x0c
     5ae:	85 85       	ldd	r24, Z+13	; 0x0d
     5b0:	96 85       	ldd	r25, Z+14	; 0x0e
     5b2:	08 95       	ret

000005b4 <_ZN12AccelStepper15currentPositionEv>:
     5b4:	fc 01       	movw	r30, r24
     5b6:	67 81       	ldd	r22, Z+7	; 0x07
     5b8:	70 85       	ldd	r23, Z+8	; 0x08
     5ba:	81 85       	ldd	r24, Z+9	; 0x09
     5bc:	92 85       	ldd	r25, Z+10	; 0x0a
     5be:	08 95       	ret

000005c0 <_ZN12AccelStepper18setCurrentPositionEl>:
     5c0:	fc 01       	movw	r30, r24
     5c2:	47 83       	std	Z+7, r20	; 0x07
     5c4:	50 87       	std	Z+8, r21	; 0x08
     5c6:	61 87       	std	Z+9, r22	; 0x09
     5c8:	72 87       	std	Z+10, r23	; 0x0a
     5ca:	08 95       	ret

000005cc <_ZN12AccelStepperC1EPFvvES1_>:
     5cc:	fc 01       	movw	r30, r24
     5ce:	84 e0       	ldi	r24, 0x04	; 4
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	91 83       	std	Z+1, r25	; 0x01
     5d4:	80 83       	st	Z, r24
     5d6:	12 82       	std	Z+2, r1	; 0x02
     5d8:	17 82       	std	Z+7, r1	; 0x07
     5da:	10 86       	std	Z+8, r1	; 0x08
     5dc:	11 86       	std	Z+9, r1	; 0x09
     5de:	12 86       	std	Z+10, r1	; 0x0a
     5e0:	13 86       	std	Z+11, r1	; 0x0b
     5e2:	14 86       	std	Z+12, r1	; 0x0c
     5e4:	15 86       	std	Z+13, r1	; 0x0d
     5e6:	16 86       	std	Z+14, r1	; 0x0e
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	dc 01       	movw	r26, r24
     5ee:	87 87       	std	Z+15, r24	; 0x0f
     5f0:	90 8b       	std	Z+16, r25	; 0x10
     5f2:	a1 8b       	std	Z+17, r26	; 0x11
     5f4:	b2 8b       	std	Z+18, r27	; 0x12
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e8       	ldi	r26, 0x80	; 128
     5fc:	bf e3       	ldi	r27, 0x3F	; 63
     5fe:	83 8b       	std	Z+19, r24	; 0x13
     600:	94 8b       	std	Z+20, r25	; 0x14
     602:	a5 8b       	std	Z+21, r26	; 0x15
     604:	b6 8b       	std	Z+22, r27	; 0x16
     606:	87 8b       	std	Z+23, r24	; 0x17
     608:	90 8f       	std	Z+24, r25	; 0x18
     60a:	a1 8f       	std	Z+25, r26	; 0x19
     60c:	b2 8f       	std	Z+26, r27	; 0x1a
     60e:	13 8e       	std	Z+27, r1	; 0x1b
     610:	14 8e       	std	Z+28, r1	; 0x1c
     612:	15 8e       	std	Z+29, r1	; 0x1d
     614:	16 8e       	std	Z+30, r1	; 0x1e
     616:	17 8e       	std	Z+31, r1	; 0x1f
     618:	10 a2       	std	Z+32, r1	; 0x20
     61a:	11 a2       	std	Z+33, r1	; 0x21
     61c:	12 a2       	std	Z+34, r1	; 0x22
     61e:	13 82       	std	Z+3, r1	; 0x03
     620:	14 82       	std	Z+4, r1	; 0x04
     622:	15 82       	std	Z+5, r1	; 0x05
     624:	16 82       	std	Z+6, r1	; 0x06
     626:	74 a3       	std	Z+36, r23	; 0x24
     628:	63 a3       	std	Z+35, r22	; 0x23
     62a:	56 a3       	std	Z+38, r21	; 0x26
     62c:	45 a3       	std	Z+37, r20	; 0x25
     62e:	08 95       	ret

00000630 <_ZN12AccelStepper8setSpeedEf>:
     630:	af 92       	push	r10
     632:	bf 92       	push	r11
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	ec 01       	movw	r28, r24
     646:	9a 01       	movw	r18, r20
     648:	ab 01       	movw	r20, r22
     64a:	2f 87       	std	Y+15, r18	; 0x0f
     64c:	38 8b       	std	Y+16, r19	; 0x10
     64e:	49 8b       	std	Y+17, r20	; 0x11
     650:	5a 8b       	std	Y+18, r21	; 0x12
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	8a e7       	ldi	r24, 0x7A	; 122
     658:	94 e4       	ldi	r25, 0x44	; 68
     65a:	0e 94 c5 10 	call	0x218a	; 0x218a <__divsf3>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	5b 01       	movw	r10, r22
     664:	6c 01       	movw	r12, r24
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	a9 01       	movw	r20, r18
     66c:	0e 94 a3 11 	call	0x2346	; 0x2346 <__gtsf2>
     670:	18 16       	cp	r1, r24
     672:	1c f4       	brge	.+6      	; 0x67a <_ZN12AccelStepper8setSpeedEf+0x4a>
     674:	b7 01       	movw	r22, r14
     676:	c8 01       	movw	r24, r16
     678:	03 c0       	rjmp	.+6      	; 0x680 <_ZN12AccelStepper8setSpeedEf+0x50>
     67a:	c6 01       	movw	r24, r12
     67c:	b5 01       	movw	r22, r10
     67e:	90 58       	subi	r25, 0x80	; 128
     680:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fixunssfsi>
     684:	6b 8f       	std	Y+27, r22	; 0x1b
     686:	7c 8f       	std	Y+28, r23	; 0x1c
     688:	8d 8f       	std	Y+29, r24	; 0x1d
     68a:	9e 8f       	std	Y+30, r25	; 0x1e
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	df 90       	pop	r13
     69a:	cf 90       	pop	r12
     69c:	bf 90       	pop	r11
     69e:	af 90       	pop	r10
     6a0:	08 95       	ret

000006a2 <_ZN12AccelStepper15computeNewSpeedEv>:
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
     6a8:	e8 81       	ld	r30, Y
     6aa:	f9 81       	ldd	r31, Y+1	; 0x01
     6ac:	02 84       	ldd	r0, Z+10	; 0x0a
     6ae:	f3 85       	ldd	r31, Z+11	; 0x0b
     6b0:	e0 2d       	mov	r30, r0
     6b2:	09 95       	icall
     6b4:	ab 01       	movw	r20, r22
     6b6:	bc 01       	movw	r22, r24
     6b8:	ce 01       	movw	r24, r28
     6ba:	0e 94 18 03 	call	0x630	; 0x630 <_ZN12AccelStepper8setSpeedEf>
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <_ZN12AccelStepper15setAccelerationEf>:
     6c4:	fc 01       	movw	r30, r24
     6c6:	47 8b       	std	Z+23, r20	; 0x17
     6c8:	50 8f       	std	Z+24, r21	; 0x18
     6ca:	61 8f       	std	Z+25, r22	; 0x19
     6cc:	72 8f       	std	Z+26, r23	; 0x1a
     6ce:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     6d2:	08 95       	ret

000006d4 <_ZN12AccelStepper11setMaxSpeedEf>:
     6d4:	fc 01       	movw	r30, r24
     6d6:	43 8b       	std	Z+19, r20	; 0x13
     6d8:	54 8b       	std	Z+20, r21	; 0x14
     6da:	65 8b       	std	Z+21, r22	; 0x15
     6dc:	76 8b       	std	Z+22, r23	; 0x16
     6de:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     6e2:	08 95       	ret

000006e4 <_ZN12AccelStepper3runEv>:
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	ec 01       	movw	r28, r24
     6ea:	2b 85       	ldd	r18, Y+11	; 0x0b
     6ec:	3c 85       	ldd	r19, Y+12	; 0x0c
     6ee:	4d 85       	ldd	r20, Y+13	; 0x0d
     6f0:	5e 85       	ldd	r21, Y+14	; 0x0e
     6f2:	8f 81       	ldd	r24, Y+7	; 0x07
     6f4:	98 85       	ldd	r25, Y+8	; 0x08
     6f6:	a9 85       	ldd	r26, Y+9	; 0x09
     6f8:	ba 85       	ldd	r27, Y+10	; 0x0a
     6fa:	28 17       	cp	r18, r24
     6fc:	39 07       	cpc	r19, r25
     6fe:	4a 07       	cpc	r20, r26
     700:	5b 07       	cpc	r21, r27
     702:	49 f0       	breq	.+18     	; 0x716 <_ZN12AccelStepper3runEv+0x32>
     704:	ce 01       	movw	r24, r28
     706:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN12AccelStepper8runSpeedEv>
     70a:	88 23       	and	r24, r24
     70c:	31 f0       	breq	.+12     	; 0x71a <_ZN12AccelStepper3runEv+0x36>
     70e:	ce 01       	movw	r24, r28
     710:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     714:	02 c0       	rjmp	.+4      	; 0x71a <_ZN12AccelStepper3runEv+0x36>
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	01 c0       	rjmp	.+2      	; 0x71c <_ZN12AccelStepper3runEv+0x38>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <_ZN12AccelStepper6moveToEl>:
     722:	fc 01       	movw	r30, r24
     724:	43 87       	std	Z+11, r20	; 0x0b
     726:	54 87       	std	Z+12, r21	; 0x0c
     728:	65 87       	std	Z+13, r22	; 0x0d
     72a:	76 87       	std	Z+14, r23	; 0x0e
     72c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     730:	08 95       	ret

00000732 <_ZN12AccelStepper4moveEl>:
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	fc 01       	movw	r30, r24
     738:	07 81       	ldd	r16, Z+7	; 0x07
     73a:	10 85       	ldd	r17, Z+8	; 0x08
     73c:	21 85       	ldd	r18, Z+9	; 0x09
     73e:	32 85       	ldd	r19, Z+10	; 0x0a
     740:	40 0f       	add	r20, r16
     742:	51 1f       	adc	r21, r17
     744:	62 1f       	adc	r22, r18
     746:	73 1f       	adc	r23, r19
     748:	43 87       	std	Z+11, r20	; 0x0b
     74a:	54 87       	std	Z+12, r21	; 0x0c
     74c:	65 87       	std	Z+13, r22	; 0x0d
     74e:	76 87       	std	Z+14, r23	; 0x0e
     750:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	08 95       	ret

0000075a <_ZN12AccelStepper5speedEv>:
     75a:	fc 01       	movw	r30, r24
     75c:	57 85       	ldd	r21, Z+15	; 0x0f
     75e:	40 89       	ldd	r20, Z+16	; 0x10
     760:	31 89       	ldd	r19, Z+17	; 0x11
     762:	22 89       	ldd	r18, Z+18	; 0x12
     764:	65 2f       	mov	r22, r21
     766:	74 2f       	mov	r23, r20
     768:	83 2f       	mov	r24, r19
     76a:	92 2f       	mov	r25, r18
     76c:	08 95       	ret

0000076e <_ZN12AccelStepper14disableOutputsEv>:
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	ec 01       	movw	r28, r24
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	88 23       	and	r24, r24
     778:	99 f0       	breq	.+38     	; 0x7a0 <_ZN12AccelStepper14disableOutputsEv+0x32>
     77a:	8b 81       	ldd	r24, Y+3	; 0x03
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     78a:	8a 81       	ldd	r24, Y+2	; 0x02
     78c:	84 30       	cpi	r24, 0x04	; 4
     78e:	41 f4       	brne	.+16     	; 0x7a0 <_ZN12AccelStepper14disableOutputsEv+0x32>
     790:	8d 81       	ldd	r24, Y+5	; 0x05
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     798:	8e 81       	ldd	r24, Y+6	; 0x06
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <_ZN12AccelStepper13enableOutputsEv>:
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	ec 01       	movw	r28, r24
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	88 23       	and	r24, r24
     7b0:	99 f0       	breq	.+38     	; 0x7d8 <_ZN12AccelStepper13enableOutputsEv+0x32>
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <pinMode>
     7ba:	8c 81       	ldd	r24, Y+4	; 0x04
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <pinMode>
     7c2:	8a 81       	ldd	r24, Y+2	; 0x02
     7c4:	84 30       	cpi	r24, 0x04	; 4
     7c6:	41 f4       	brne	.+16     	; 0x7d8 <_ZN12AccelStepper13enableOutputsEv+0x32>
     7c8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <pinMode>
     7d0:	8e 81       	ldd	r24, Y+6	; 0x06
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <pinMode>
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <_ZN12AccelStepperC1Ehhhhh>:
     7de:	ef 92       	push	r14
     7e0:	0f 93       	push	r16
     7e2:	fc 01       	movw	r30, r24
     7e4:	84 e0       	ldi	r24, 0x04	; 4
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	91 83       	std	Z+1, r25	; 0x01
     7ea:	80 83       	st	Z, r24
     7ec:	62 83       	std	Z+2, r22	; 0x02
     7ee:	17 82       	std	Z+7, r1	; 0x07
     7f0:	10 86       	std	Z+8, r1	; 0x08
     7f2:	11 86       	std	Z+9, r1	; 0x09
     7f4:	12 86       	std	Z+10, r1	; 0x0a
     7f6:	13 86       	std	Z+11, r1	; 0x0b
     7f8:	14 86       	std	Z+12, r1	; 0x0c
     7fa:	15 86       	std	Z+13, r1	; 0x0d
     7fc:	16 86       	std	Z+14, r1	; 0x0e
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	dc 01       	movw	r26, r24
     804:	87 87       	std	Z+15, r24	; 0x0f
     806:	90 8b       	std	Z+16, r25	; 0x10
     808:	a1 8b       	std	Z+17, r26	; 0x11
     80a:	b2 8b       	std	Z+18, r27	; 0x12
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	a0 e8       	ldi	r26, 0x80	; 128
     812:	bf e3       	ldi	r27, 0x3F	; 63
     814:	83 8b       	std	Z+19, r24	; 0x13
     816:	94 8b       	std	Z+20, r25	; 0x14
     818:	a5 8b       	std	Z+21, r26	; 0x15
     81a:	b6 8b       	std	Z+22, r27	; 0x16
     81c:	87 8b       	std	Z+23, r24	; 0x17
     81e:	90 8f       	std	Z+24, r25	; 0x18
     820:	a1 8f       	std	Z+25, r26	; 0x19
     822:	b2 8f       	std	Z+26, r27	; 0x1a
     824:	13 8e       	std	Z+27, r1	; 0x1b
     826:	14 8e       	std	Z+28, r1	; 0x1c
     828:	15 8e       	std	Z+29, r1	; 0x1d
     82a:	16 8e       	std	Z+30, r1	; 0x1e
     82c:	17 8e       	std	Z+31, r1	; 0x1f
     82e:	10 a2       	std	Z+32, r1	; 0x20
     830:	11 a2       	std	Z+33, r1	; 0x21
     832:	12 a2       	std	Z+34, r1	; 0x22
     834:	43 83       	std	Z+3, r20	; 0x03
     836:	24 83       	std	Z+4, r18	; 0x04
     838:	05 83       	std	Z+5, r16	; 0x05
     83a:	e6 82       	std	Z+6, r14	; 0x06
     83c:	cf 01       	movw	r24, r30
     83e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_ZN12AccelStepper13enableOutputsEv>
     842:	0f 91       	pop	r16
     844:	ef 90       	pop	r14
     846:	08 95       	ret

00000848 <_ZN12AccelStepper13runToPositionEv>:
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
     84e:	ce 01       	movw	r24, r28
     850:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN12AccelStepper3runEv>
     854:	88 23       	and	r24, r24
     856:	d9 f7       	brne	.-10     	; 0x84e <_ZN12AccelStepper13runToPositionEv+0x6>
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_ZN12AccelStepper18runSpeedToPositionEv>:
     85e:	fc 01       	movw	r30, r24
     860:	63 85       	ldd	r22, Z+11	; 0x0b
     862:	74 85       	ldd	r23, Z+12	; 0x0c
     864:	85 85       	ldd	r24, Z+13	; 0x0d
     866:	96 85       	ldd	r25, Z+14	; 0x0e
     868:	27 81       	ldd	r18, Z+7	; 0x07
     86a:	30 85       	ldd	r19, Z+8	; 0x08
     86c:	41 85       	ldd	r20, Z+9	; 0x09
     86e:	52 85       	ldd	r21, Z+10	; 0x0a
     870:	62 17       	cp	r22, r18
     872:	73 07       	cpc	r23, r19
     874:	84 07       	cpc	r24, r20
     876:	95 07       	cpc	r25, r21
     878:	21 f0       	breq	.+8      	; 0x882 <_ZN12AccelStepper18runSpeedToPositionEv+0x24>
     87a:	cf 01       	movw	r24, r30
     87c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN12AccelStepper8runSpeedEv>
     880:	08 95       	ret
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	08 95       	ret

00000886 <_ZN12AccelStepper16runToNewPositionEl>:
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	ec 01       	movw	r28, r24
     88c:	4b 87       	std	Y+11, r20	; 0x0b
     88e:	5c 87       	std	Y+12, r21	; 0x0c
     890:	6d 87       	std	Y+13, r22	; 0x0d
     892:	7e 87       	std	Y+14, r23	; 0x0e
     894:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     898:	ce 01       	movw	r24, r28
     89a:	0e 94 24 04 	call	0x848	; 0x848 <_ZN12AccelStepper13runToPositionEv>
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <_ZN7DCMotorC1Eii>:
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	df 93       	push	r29
     8ae:	cf 93       	push	r28
     8b0:	0f 92       	push	r0
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	7c 01       	movw	r14, r24
     8b8:	16 2f       	mov	r17, r22
     8ba:	04 2f       	mov	r16, r20
     8bc:	fc 01       	movw	r30, r24
     8be:	60 83       	st	Z, r22
     8c0:	71 83       	std	Z+1, r23	; 0x01
     8c2:	86 2f       	mov	r24, r22
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	59 83       	std	Y+1, r21	; 0x01
     8c8:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <pinMode>
     8cc:	81 2f       	mov	r24, r17
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     8d4:	f7 01       	movw	r30, r14
     8d6:	02 83       	std	Z+2, r16	; 0x02
     8d8:	59 81       	ldd	r21, Y+1	; 0x01
     8da:	53 83       	std	Z+3, r21	; 0x03
     8dc:	80 2f       	mov	r24, r16
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <pinMode>
     8e4:	80 2f       	mov	r24, r16
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     8ec:	0f 90       	pop	r0
     8ee:	cf 91       	pop	r28
     8f0:	df 91       	pop	r29
     8f2:	1f 91       	pop	r17
     8f4:	0f 91       	pop	r16
     8f6:	ff 90       	pop	r15
     8f8:	ef 90       	pop	r14
     8fa:	08 95       	ret

000008fc <_ZN7DCMotor13setMotorspeedEi>:
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	ec 01       	movw	r28, r24
     906:	8b 01       	movw	r16, r22
     908:	77 fd       	sbrc	r23, 7
     90a:	07 c0       	rjmp	.+14     	; 0x91a <__stack+0x1b>
     90c:	8a 81       	ldd	r24, Y+2	; 0x02
     90e:	60 e0       	ldi	r22, 0x00	; 0
     910:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     914:	88 81       	ld	r24, Y
     916:	60 2f       	mov	r22, r16
     918:	07 c0       	rjmp	.+14     	; 0x928 <__stack+0x29>
     91a:	8a 81       	ldd	r24, Y+2	; 0x02
     91c:	61 e0       	ldi	r22, 0x01	; 1
     91e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     922:	60 2f       	mov	r22, r16
     924:	61 50       	subi	r22, 0x01	; 1
     926:	88 81       	ld	r24, Y
     928:	40 e0       	ldi	r20, 0x00	; 0
     92a:	0e 94 99 0a 	call	0x1532	; 0x1532 <_Z10SoftPWMSetahh>
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	1f 91       	pop	r17
     934:	0f 91       	pop	r16
     936:	08 95       	ret

00000938 <_Z12DCMotor_intiv>:
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	0e 94 50 0a 	call	0x14a0	; 0x14a0 <_Z12SoftPWMBeginh>
     93e:	08 95       	ret

00000940 <_ZN3LCDC1Ehhhhhhhh>:
     940:	6f 92       	push	r6
     942:	7f 92       	push	r7
     944:	8f 92       	push	r8
     946:	af 92       	push	r10
     948:	cf 92       	push	r12
     94a:	ef 92       	push	r14
     94c:	ff 92       	push	r15
     94e:	0f 93       	push	r16
     950:	1f 93       	push	r17
     952:	df 93       	push	r29
     954:	cf 93       	push	r28
     956:	00 d0       	rcall	.+0      	; 0x958 <_ZN3LCDC1Ehhhhhhhh+0x18>
     958:	0f 92       	push	r0
     95a:	cd b7       	in	r28, 0x3d	; 61
     95c:	de b7       	in	r29, 0x3e	; 62
     95e:	3c 01       	movw	r6, r24
     960:	85 e1       	ldi	r24, 0x15	; 21
     962:	90 e0       	ldi	r25, 0x00	; 0
     964:	2b 83       	std	Y+3, r18	; 0x03
     966:	4a 83       	std	Y+2, r20	; 0x02
     968:	69 83       	std	Y+1, r22	; 0x01
     96a:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <_Znwj>
     96e:	f8 2e       	mov	r15, r24
     970:	19 2f       	mov	r17, r25
     972:	69 81       	ldd	r22, Y+1	; 0x01
     974:	4a 81       	ldd	r20, Y+2	; 0x02
     976:	2b 81       	ldd	r18, Y+3	; 0x03
     978:	0e 94 a6 07 	call	0xf4c	; 0xf4c <_ZN13LiquidCrystalC1Ehhhhhh>
     97c:	f3 01       	movw	r30, r6
     97e:	f0 82       	st	Z, r15
     980:	11 83       	std	Z+1, r17	; 0x01
     982:	8f 2d       	mov	r24, r15
     984:	91 2f       	mov	r25, r17
     986:	6a 2d       	mov	r22, r10
     988:	48 2d       	mov	r20, r8
     98a:	20 e0       	ldi	r18, 0x00	; 0
     98c:	0e 94 f0 06 	call	0xde0	; 0xde0 <_ZN13LiquidCrystal5beginEhhh>
     990:	f3 01       	movw	r30, r6
     992:	80 81       	ld	r24, Z
     994:	91 81       	ldd	r25, Z+1	; 0x01
     996:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN13LiquidCrystal5clearEv>
     99a:	0f 90       	pop	r0
     99c:	0f 90       	pop	r0
     99e:	0f 90       	pop	r0
     9a0:	cf 91       	pop	r28
     9a2:	df 91       	pop	r29
     9a4:	1f 91       	pop	r17
     9a6:	0f 91       	pop	r16
     9a8:	ff 90       	pop	r15
     9aa:	ef 90       	pop	r14
     9ac:	cf 90       	pop	r12
     9ae:	af 90       	pop	r10
     9b0:	8f 90       	pop	r8
     9b2:	7f 90       	pop	r7
     9b4:	6f 90       	pop	r6
     9b6:	08 95       	ret

000009b8 <_ZN3LCD5traceE6String>:
     9b8:	0f 93       	push	r16
     9ba:	1f 93       	push	r17
     9bc:	cf 93       	push	r28
     9be:	df 93       	push	r29
     9c0:	ec 01       	movw	r28, r24
     9c2:	8b 01       	movw	r16, r22
     9c4:	88 81       	ld	r24, Y
     9c6:	99 81       	ldd	r25, Y+1	; 0x01
     9c8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN13LiquidCrystal5clearEv>
     9cc:	88 81       	ld	r24, Y
     9ce:	99 81       	ldd	r25, Y+1	; 0x01
     9d0:	60 e0       	ldi	r22, 0x00	; 0
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	0e 94 b2 06 	call	0xd64	; 0xd64 <_ZN13LiquidCrystal9setCursorEhh>
     9d8:	88 81       	ld	r24, Y
     9da:	99 81       	ldd	r25, Y+1	; 0x01
     9dc:	b8 01       	movw	r22, r16
     9de:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <_ZN5Print5printERK6String>
     9e2:	df 91       	pop	r29
     9e4:	cf 91       	pop	r28
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	08 95       	ret

000009ec <_ZN3LCD9updateLCDEiiii>:
     9ec:	af 92       	push	r10
     9ee:	bf 92       	push	r11
     9f0:	cf 92       	push	r12
     9f2:	df 92       	push	r13
     9f4:	ef 92       	push	r14
     9f6:	ff 92       	push	r15
     9f8:	0f 93       	push	r16
     9fa:	1f 93       	push	r17
     9fc:	cf 93       	push	r28
     9fe:	df 93       	push	r29
     a00:	ec 01       	movw	r28, r24
     a02:	6b 01       	movw	r12, r22
     a04:	5a 01       	movw	r10, r20
     a06:	79 01       	movw	r14, r18
     a08:	88 81       	ld	r24, Y
     a0a:	99 81       	ldd	r25, Y+1	; 0x01
     a0c:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN13LiquidCrystal5clearEv>
     a10:	88 81       	ld	r24, Y
     a12:	99 81       	ldd	r25, Y+1	; 0x01
     a14:	60 e0       	ldi	r22, 0x00	; 0
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	0e 94 b2 06 	call	0xd64	; 0xd64 <_ZN13LiquidCrystal9setCursorEhh>
     a1c:	88 81       	ld	r24, Y
     a1e:	99 81       	ldd	r25, Y+1	; 0x01
     a20:	60 e1       	ldi	r22, 0x10	; 16
     a22:	71 e0       	ldi	r23, 0x01	; 1
     a24:	0e 94 1f 20 	call	0x403e	; 0x403e <_ZN5Print5printEPKc>
     a28:	88 81       	ld	r24, Y
     a2a:	99 81       	ldd	r25, Y+1	; 0x01
     a2c:	b6 01       	movw	r22, r12
     a2e:	4a e0       	ldi	r20, 0x0A	; 10
     a30:	50 e0       	ldi	r21, 0x00	; 0
     a32:	0e 94 b1 21 	call	0x4362	; 0x4362 <_ZN5Print5printEii>
     a36:	88 81       	ld	r24, Y
     a38:	99 81       	ldd	r25, Y+1	; 0x01
     a3a:	69 e0       	ldi	r22, 0x09	; 9
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	0e 94 b2 06 	call	0xd64	; 0xd64 <_ZN13LiquidCrystal9setCursorEhh>
     a42:	88 81       	ld	r24, Y
     a44:	99 81       	ldd	r25, Y+1	; 0x01
     a46:	66 e1       	ldi	r22, 0x16	; 22
     a48:	71 e0       	ldi	r23, 0x01	; 1
     a4a:	0e 94 1f 20 	call	0x403e	; 0x403e <_ZN5Print5printEPKc>
     a4e:	88 81       	ld	r24, Y
     a50:	99 81       	ldd	r25, Y+1	; 0x01
     a52:	b5 01       	movw	r22, r10
     a54:	4a e0       	ldi	r20, 0x0A	; 10
     a56:	50 e0       	ldi	r21, 0x00	; 0
     a58:	0e 94 b1 21 	call	0x4362	; 0x4362 <_ZN5Print5printEii>
     a5c:	88 81       	ld	r24, Y
     a5e:	99 81       	ldd	r25, Y+1	; 0x01
     a60:	60 e0       	ldi	r22, 0x00	; 0
     a62:	41 e0       	ldi	r20, 0x01	; 1
     a64:	0e 94 b2 06 	call	0xd64	; 0xd64 <_ZN13LiquidCrystal9setCursorEhh>
     a68:	88 81       	ld	r24, Y
     a6a:	99 81       	ldd	r25, Y+1	; 0x01
     a6c:	6b e1       	ldi	r22, 0x1B	; 27
     a6e:	71 e0       	ldi	r23, 0x01	; 1
     a70:	0e 94 1f 20 	call	0x403e	; 0x403e <_ZN5Print5printEPKc>
     a74:	88 81       	ld	r24, Y
     a76:	99 81       	ldd	r25, Y+1	; 0x01
     a78:	b7 01       	movw	r22, r14
     a7a:	4a e0       	ldi	r20, 0x0A	; 10
     a7c:	50 e0       	ldi	r21, 0x00	; 0
     a7e:	0e 94 b1 21 	call	0x4362	; 0x4362 <_ZN5Print5printEii>
     a82:	88 81       	ld	r24, Y
     a84:	99 81       	ldd	r25, Y+1	; 0x01
     a86:	69 e0       	ldi	r22, 0x09	; 9
     a88:	41 e0       	ldi	r20, 0x01	; 1
     a8a:	0e 94 b2 06 	call	0xd64	; 0xd64 <_ZN13LiquidCrystal9setCursorEhh>
     a8e:	88 81       	ld	r24, Y
     a90:	99 81       	ldd	r25, Y+1	; 0x01
     a92:	61 e2       	ldi	r22, 0x21	; 33
     a94:	71 e0       	ldi	r23, 0x01	; 1
     a96:	0e 94 1f 20 	call	0x403e	; 0x403e <_ZN5Print5printEPKc>
     a9a:	88 81       	ld	r24, Y
     a9c:	99 81       	ldd	r25, Y+1	; 0x01
     a9e:	b8 01       	movw	r22, r16
     aa0:	4a e0       	ldi	r20, 0x0A	; 10
     aa2:	50 e0       	ldi	r21, 0x00	; 0
     aa4:	0e 94 b1 21 	call	0x4362	; 0x4362 <_ZN5Print5printEii>
     aa8:	df 91       	pop	r29
     aaa:	cf 91       	pop	r28
     aac:	1f 91       	pop	r17
     aae:	0f 91       	pop	r16
     ab0:	ff 90       	pop	r15
     ab2:	ef 90       	pop	r14
     ab4:	df 90       	pop	r13
     ab6:	cf 90       	pop	r12
     ab8:	bf 90       	pop	r11
     aba:	af 90       	pop	r10
     abc:	08 95       	ret

00000abe <_ZN13LiquidCrystal11pulseEnableEv>:
     abe:	cf 93       	push	r28
     ac0:	df 93       	push	r29
     ac2:	ec 01       	movw	r28, r24
     ac4:	8e 81       	ldd	r24, Y+6	; 0x06
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <delayMicroseconds>
     ad4:	8e 81       	ldd	r24, Y+6	; 0x06
     ad6:	61 e0       	ldi	r22, 0x01	; 1
     ad8:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <delayMicroseconds>
     ae4:	8e 81       	ldd	r24, Y+6	; 0x06
     ae6:	60 e0       	ldi	r22, 0x00	; 0
     ae8:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     aec:	84 e6       	ldi	r24, 0x64	; 100
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <delayMicroseconds>
     af4:	df 91       	pop	r29
     af6:	cf 91       	pop	r28
     af8:	08 95       	ret

00000afa <_ZN13LiquidCrystal10write4bitsEh>:
     afa:	af 92       	push	r10
     afc:	bf 92       	push	r11
     afe:	cf 92       	push	r12
     b00:	df 92       	push	r13
     b02:	ef 92       	push	r14
     b04:	ff 92       	push	r15
     b06:	0f 93       	push	r16
     b08:	1f 93       	push	r17
     b0a:	cf 93       	push	r28
     b0c:	df 93       	push	r29
     b0e:	7c 01       	movw	r14, r24
     b10:	8c 01       	movw	r16, r24
     b12:	09 5f       	subi	r16, 0xF9	; 249
     b14:	1f 4f       	sbci	r17, 0xFF	; 255
     b16:	c0 e0       	ldi	r28, 0x00	; 0
     b18:	d0 e0       	ldi	r29, 0x00	; 0
     b1a:	a6 2e       	mov	r10, r22
     b1c:	bb 24       	eor	r11, r11
     b1e:	68 01       	movw	r12, r16
     b20:	f8 01       	movw	r30, r16
     b22:	81 91       	ld	r24, Z+
     b24:	8f 01       	movw	r16, r30
     b26:	61 e0       	ldi	r22, 0x01	; 1
     b28:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <pinMode>
     b2c:	b5 01       	movw	r22, r10
     b2e:	0c 2e       	mov	r0, r28
     b30:	02 c0       	rjmp	.+4      	; 0xb36 <_ZN13LiquidCrystal10write4bitsEh+0x3c>
     b32:	75 95       	asr	r23
     b34:	67 95       	ror	r22
     b36:	0a 94       	dec	r0
     b38:	e2 f7       	brpl	.-8      	; 0xb32 <_ZN13LiquidCrystal10write4bitsEh+0x38>
     b3a:	61 70       	andi	r22, 0x01	; 1
     b3c:	f6 01       	movw	r30, r12
     b3e:	80 81       	ld	r24, Z
     b40:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     b44:	21 96       	adiw	r28, 0x01	; 1
     b46:	c4 30       	cpi	r28, 0x04	; 4
     b48:	d1 05       	cpc	r29, r1
     b4a:	49 f7       	brne	.-46     	; 0xb1e <_ZN13LiquidCrystal10write4bitsEh+0x24>
     b4c:	c7 01       	movw	r24, r14
     b4e:	0e 94 5f 05 	call	0xabe	; 0xabe <_ZN13LiquidCrystal11pulseEnableEv>
     b52:	df 91       	pop	r29
     b54:	cf 91       	pop	r28
     b56:	1f 91       	pop	r17
     b58:	0f 91       	pop	r16
     b5a:	ff 90       	pop	r15
     b5c:	ef 90       	pop	r14
     b5e:	df 90       	pop	r13
     b60:	cf 90       	pop	r12
     b62:	bf 90       	pop	r11
     b64:	af 90       	pop	r10
     b66:	08 95       	ret

00000b68 <_ZN13LiquidCrystal10write8bitsEh>:
     b68:	af 92       	push	r10
     b6a:	bf 92       	push	r11
     b6c:	cf 92       	push	r12
     b6e:	df 92       	push	r13
     b70:	ef 92       	push	r14
     b72:	ff 92       	push	r15
     b74:	0f 93       	push	r16
     b76:	1f 93       	push	r17
     b78:	cf 93       	push	r28
     b7a:	df 93       	push	r29
     b7c:	7c 01       	movw	r14, r24
     b7e:	8c 01       	movw	r16, r24
     b80:	09 5f       	subi	r16, 0xF9	; 249
     b82:	1f 4f       	sbci	r17, 0xFF	; 255
     b84:	c0 e0       	ldi	r28, 0x00	; 0
     b86:	d0 e0       	ldi	r29, 0x00	; 0
     b88:	a6 2e       	mov	r10, r22
     b8a:	bb 24       	eor	r11, r11
     b8c:	68 01       	movw	r12, r16
     b8e:	f8 01       	movw	r30, r16
     b90:	81 91       	ld	r24, Z+
     b92:	8f 01       	movw	r16, r30
     b94:	61 e0       	ldi	r22, 0x01	; 1
     b96:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <pinMode>
     b9a:	b5 01       	movw	r22, r10
     b9c:	0c 2e       	mov	r0, r28
     b9e:	02 c0       	rjmp	.+4      	; 0xba4 <_ZN13LiquidCrystal10write8bitsEh+0x3c>
     ba0:	75 95       	asr	r23
     ba2:	67 95       	ror	r22
     ba4:	0a 94       	dec	r0
     ba6:	e2 f7       	brpl	.-8      	; 0xba0 <_ZN13LiquidCrystal10write8bitsEh+0x38>
     ba8:	61 70       	andi	r22, 0x01	; 1
     baa:	f6 01       	movw	r30, r12
     bac:	80 81       	ld	r24, Z
     bae:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     bb2:	21 96       	adiw	r28, 0x01	; 1
     bb4:	c8 30       	cpi	r28, 0x08	; 8
     bb6:	d1 05       	cpc	r29, r1
     bb8:	49 f7       	brne	.-46     	; 0xb8c <_ZN13LiquidCrystal10write8bitsEh+0x24>
     bba:	c7 01       	movw	r24, r14
     bbc:	0e 94 5f 05 	call	0xabe	; 0xabe <_ZN13LiquidCrystal11pulseEnableEv>
     bc0:	df 91       	pop	r29
     bc2:	cf 91       	pop	r28
     bc4:	1f 91       	pop	r17
     bc6:	0f 91       	pop	r16
     bc8:	ff 90       	pop	r15
     bca:	ef 90       	pop	r14
     bcc:	df 90       	pop	r13
     bce:	cf 90       	pop	r12
     bd0:	bf 90       	pop	r11
     bd2:	af 90       	pop	r10
     bd4:	08 95       	ret

00000bd6 <_ZN13LiquidCrystal4sendEhh>:
     bd6:	1f 93       	push	r17
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	ec 01       	movw	r28, r24
     bde:	16 2f       	mov	r17, r22
     be0:	8c 81       	ldd	r24, Y+4	; 0x04
     be2:	64 2f       	mov	r22, r20
     be4:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     be8:	8d 81       	ldd	r24, Y+5	; 0x05
     bea:	8f 3f       	cpi	r24, 0xFF	; 255
     bec:	19 f0       	breq	.+6      	; 0xbf4 <_ZN13LiquidCrystal4sendEhh+0x1e>
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     bf4:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf6:	84 ff       	sbrs	r24, 4
     bf8:	05 c0       	rjmp	.+10     	; 0xc04 <_ZN13LiquidCrystal4sendEhh+0x2e>
     bfa:	ce 01       	movw	r24, r28
     bfc:	61 2f       	mov	r22, r17
     bfe:	0e 94 b4 05 	call	0xb68	; 0xb68 <_ZN13LiquidCrystal10write8bitsEh>
     c02:	0f c0       	rjmp	.+30     	; 0xc22 <_ZN13LiquidCrystal4sendEhh+0x4c>
     c04:	21 2f       	mov	r18, r17
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	84 e0       	ldi	r24, 0x04	; 4
     c0a:	35 95       	asr	r19
     c0c:	27 95       	ror	r18
     c0e:	8a 95       	dec	r24
     c10:	e1 f7       	brne	.-8      	; 0xc0a <_ZN13LiquidCrystal4sendEhh+0x34>
     c12:	ce 01       	movw	r24, r28
     c14:	62 2f       	mov	r22, r18
     c16:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal10write4bitsEh>
     c1a:	ce 01       	movw	r24, r28
     c1c:	61 2f       	mov	r22, r17
     c1e:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal10write4bitsEh>
     c22:	df 91       	pop	r29
     c24:	cf 91       	pop	r28
     c26:	1f 91       	pop	r17
     c28:	08 95       	ret

00000c2a <_ZN13LiquidCrystal5writeEh>:
     c2a:	41 e0       	ldi	r20, 0x01	; 1
     c2c:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_ZN13LiquidCrystal4sendEhh>
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	08 95       	ret

00000c36 <_ZN13LiquidCrystal7commandEh>:
     c36:	40 e0       	ldi	r20, 0x00	; 0
     c38:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <_ZN13LiquidCrystal4sendEhh>
     c3c:	08 95       	ret

00000c3e <_ZN13LiquidCrystal10createCharEhPh>:
     c3e:	cf 92       	push	r12
     c40:	df 92       	push	r13
     c42:	ef 92       	push	r14
     c44:	ff 92       	push	r15
     c46:	0f 93       	push	r16
     c48:	1f 93       	push	r17
     c4a:	df 93       	push	r29
     c4c:	cf 93       	push	r28
     c4e:	00 d0       	rcall	.+0      	; 0xc50 <_ZN13LiquidCrystal10createCharEhPh+0x12>
     c50:	cd b7       	in	r28, 0x3d	; 61
     c52:	de b7       	in	r29, 0x3e	; 62
     c54:	6c 01       	movw	r12, r24
     c56:	67 70       	andi	r22, 0x07	; 7
     c58:	66 0f       	add	r22, r22
     c5a:	66 0f       	add	r22, r22
     c5c:	66 0f       	add	r22, r22
     c5e:	60 64       	ori	r22, 0x40	; 64
     c60:	49 83       	std	Y+1, r20	; 0x01
     c62:	5a 83       	std	Y+2, r21	; 0x02
     c64:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     c68:	49 81       	ldd	r20, Y+1	; 0x01
     c6a:	5a 81       	ldd	r21, Y+2	; 0x02
     c6c:	e4 2e       	mov	r14, r20
     c6e:	f5 2e       	mov	r15, r21
     c70:	00 e0       	ldi	r16, 0x00	; 0
     c72:	10 e0       	ldi	r17, 0x00	; 0
     c74:	d7 01       	movw	r26, r14
     c76:	6d 91       	ld	r22, X+
     c78:	7d 01       	movw	r14, r26
     c7a:	d6 01       	movw	r26, r12
     c7c:	ed 91       	ld	r30, X+
     c7e:	fc 91       	ld	r31, X
     c80:	01 90       	ld	r0, Z+
     c82:	f0 81       	ld	r31, Z
     c84:	e0 2d       	mov	r30, r0
     c86:	c6 01       	movw	r24, r12
     c88:	09 95       	icall
     c8a:	0f 5f       	subi	r16, 0xFF	; 255
     c8c:	1f 4f       	sbci	r17, 0xFF	; 255
     c8e:	08 30       	cpi	r16, 0x08	; 8
     c90:	11 05       	cpc	r17, r1
     c92:	81 f7       	brne	.-32     	; 0xc74 <_ZN13LiquidCrystal10createCharEhPh+0x36>
     c94:	0f 90       	pop	r0
     c96:	0f 90       	pop	r0
     c98:	cf 91       	pop	r28
     c9a:	df 91       	pop	r29
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	ff 90       	pop	r15
     ca2:	ef 90       	pop	r14
     ca4:	df 90       	pop	r13
     ca6:	cf 90       	pop	r12
     ca8:	08 95       	ret

00000caa <_ZN13LiquidCrystal12noAutoscrollEv>:
     caa:	fc 01       	movw	r30, r24
     cac:	61 89       	ldd	r22, Z+17	; 0x11
     cae:	6e 7f       	andi	r22, 0xFE	; 254
     cb0:	61 8b       	std	Z+17, r22	; 0x11
     cb2:	64 60       	ori	r22, 0x04	; 4
     cb4:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     cb8:	08 95       	ret

00000cba <_ZN13LiquidCrystal10autoscrollEv>:
     cba:	fc 01       	movw	r30, r24
     cbc:	61 89       	ldd	r22, Z+17	; 0x11
     cbe:	26 2f       	mov	r18, r22
     cc0:	21 60       	ori	r18, 0x01	; 1
     cc2:	21 8b       	std	Z+17, r18	; 0x11
     cc4:	65 60       	ori	r22, 0x05	; 5
     cc6:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     cca:	08 95       	ret

00000ccc <_ZN13LiquidCrystal11rightToLeftEv>:
     ccc:	fc 01       	movw	r30, r24
     cce:	61 89       	ldd	r22, Z+17	; 0x11
     cd0:	6d 7f       	andi	r22, 0xFD	; 253
     cd2:	61 8b       	std	Z+17, r22	; 0x11
     cd4:	64 60       	ori	r22, 0x04	; 4
     cd6:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     cda:	08 95       	ret

00000cdc <_ZN13LiquidCrystal11leftToRightEv>:
     cdc:	fc 01       	movw	r30, r24
     cde:	61 89       	ldd	r22, Z+17	; 0x11
     ce0:	26 2f       	mov	r18, r22
     ce2:	22 60       	ori	r18, 0x02	; 2
     ce4:	21 8b       	std	Z+17, r18	; 0x11
     ce6:	66 60       	ori	r22, 0x06	; 6
     ce8:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     cec:	08 95       	ret

00000cee <_ZN13LiquidCrystal18scrollDisplayRightEv>:
     cee:	6c e1       	ldi	r22, 0x1C	; 28
     cf0:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     cf4:	08 95       	ret

00000cf6 <_ZN13LiquidCrystal17scrollDisplayLeftEv>:
     cf6:	68 e1       	ldi	r22, 0x18	; 24
     cf8:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     cfc:	08 95       	ret

00000cfe <_ZN13LiquidCrystal5blinkEv>:
     cfe:	fc 01       	movw	r30, r24
     d00:	60 89       	ldd	r22, Z+16	; 0x10
     d02:	26 2f       	mov	r18, r22
     d04:	21 60       	ori	r18, 0x01	; 1
     d06:	20 8b       	std	Z+16, r18	; 0x10
     d08:	69 60       	ori	r22, 0x09	; 9
     d0a:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     d0e:	08 95       	ret

00000d10 <_ZN13LiquidCrystal7noBlinkEv>:
     d10:	fc 01       	movw	r30, r24
     d12:	60 89       	ldd	r22, Z+16	; 0x10
     d14:	6e 7f       	andi	r22, 0xFE	; 254
     d16:	60 8b       	std	Z+16, r22	; 0x10
     d18:	68 60       	ori	r22, 0x08	; 8
     d1a:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     d1e:	08 95       	ret

00000d20 <_ZN13LiquidCrystal6cursorEv>:
     d20:	fc 01       	movw	r30, r24
     d22:	60 89       	ldd	r22, Z+16	; 0x10
     d24:	26 2f       	mov	r18, r22
     d26:	22 60       	ori	r18, 0x02	; 2
     d28:	20 8b       	std	Z+16, r18	; 0x10
     d2a:	6a 60       	ori	r22, 0x0A	; 10
     d2c:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     d30:	08 95       	ret

00000d32 <_ZN13LiquidCrystal8noCursorEv>:
     d32:	fc 01       	movw	r30, r24
     d34:	60 89       	ldd	r22, Z+16	; 0x10
     d36:	6d 7f       	andi	r22, 0xFD	; 253
     d38:	60 8b       	std	Z+16, r22	; 0x10
     d3a:	68 60       	ori	r22, 0x08	; 8
     d3c:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     d40:	08 95       	ret

00000d42 <_ZN13LiquidCrystal7displayEv>:
     d42:	fc 01       	movw	r30, r24
     d44:	60 89       	ldd	r22, Z+16	; 0x10
     d46:	26 2f       	mov	r18, r22
     d48:	24 60       	ori	r18, 0x04	; 4
     d4a:	20 8b       	std	Z+16, r18	; 0x10
     d4c:	6c 60       	ori	r22, 0x0C	; 12
     d4e:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     d52:	08 95       	ret

00000d54 <_ZN13LiquidCrystal9noDisplayEv>:
     d54:	fc 01       	movw	r30, r24
     d56:	60 89       	ldd	r22, Z+16	; 0x10
     d58:	6b 7f       	andi	r22, 0xFB	; 251
     d5a:	60 8b       	std	Z+16, r22	; 0x10
     d5c:	68 60       	ori	r22, 0x08	; 8
     d5e:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     d62:	08 95       	ret

00000d64 <_ZN13LiquidCrystal9setCursorEhh>:
     d64:	df 93       	push	r29
     d66:	cf 93       	push	r28
     d68:	cd b7       	in	r28, 0x3d	; 61
     d6a:	de b7       	in	r29, 0x3e	; 62
     d6c:	28 97       	sbiw	r28, 0x08	; 8
     d6e:	0f b6       	in	r0, 0x3f	; 63
     d70:	f8 94       	cli
     d72:	de bf       	out	0x3e, r29	; 62
     d74:	0f be       	out	0x3f, r0	; 63
     d76:	cd bf       	out	0x3d, r28	; 61
     d78:	fe 01       	movw	r30, r28
     d7a:	31 96       	adiw	r30, 0x01	; 1
     d7c:	ad e2       	ldi	r26, 0x2D	; 45
     d7e:	b1 e0       	ldi	r27, 0x01	; 1
     d80:	28 e0       	ldi	r18, 0x08	; 8
     d82:	0d 90       	ld	r0, X+
     d84:	01 92       	st	Z+, r0
     d86:	21 50       	subi	r18, 0x01	; 1
     d88:	e1 f7       	brne	.-8      	; 0xd82 <_ZN13LiquidCrystal9setCursorEhh+0x1e>
     d8a:	fc 01       	movw	r30, r24
     d8c:	23 89       	ldd	r18, Z+19	; 0x13
     d8e:	42 17       	cp	r20, r18
     d90:	10 f0       	brcs	.+4      	; 0xd96 <_ZN13LiquidCrystal9setCursorEhh+0x32>
     d92:	42 2f       	mov	r20, r18
     d94:	41 50       	subi	r20, 0x01	; 1
     d96:	e4 2f       	mov	r30, r20
     d98:	f0 e0       	ldi	r31, 0x00	; 0
     d9a:	ee 0f       	add	r30, r30
     d9c:	ff 1f       	adc	r31, r31
     d9e:	ec 0f       	add	r30, r28
     da0:	fd 1f       	adc	r31, r29
     da2:	21 81       	ldd	r18, Z+1	; 0x01
     da4:	26 0f       	add	r18, r22
     da6:	20 68       	ori	r18, 0x80	; 128
     da8:	62 2f       	mov	r22, r18
     daa:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     dae:	28 96       	adiw	r28, 0x08	; 8
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	de bf       	out	0x3e, r29	; 62
     db6:	0f be       	out	0x3f, r0	; 63
     db8:	cd bf       	out	0x3d, r28	; 61
     dba:	cf 91       	pop	r28
     dbc:	df 91       	pop	r29
     dbe:	08 95       	ret

00000dc0 <_ZN13LiquidCrystal4homeEv>:
     dc0:	62 e0       	ldi	r22, 0x02	; 2
     dc2:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     dc6:	80 ed       	ldi	r24, 0xD0	; 208
     dc8:	97 e0       	ldi	r25, 0x07	; 7
     dca:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <delayMicroseconds>
     dce:	08 95       	ret

00000dd0 <_ZN13LiquidCrystal5clearEv>:
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     dd6:	80 ed       	ldi	r24, 0xD0	; 208
     dd8:	97 e0       	ldi	r25, 0x07	; 7
     dda:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <delayMicroseconds>
     dde:	08 95       	ret

00000de0 <_ZN13LiquidCrystal5beginEhhh>:
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	ec 01       	movw	r28, r24
     de6:	42 30       	cpi	r20, 0x02	; 2
     de8:	18 f0       	brcs	.+6      	; 0xdf0 <_ZN13LiquidCrystal5beginEhhh+0x10>
     dea:	8f 85       	ldd	r24, Y+15	; 0x0f
     dec:	88 60       	ori	r24, 0x08	; 8
     dee:	8f 87       	std	Y+15, r24	; 0x0f
     df0:	4b 8b       	std	Y+19, r20	; 0x13
     df2:	1c 8a       	std	Y+20, r1	; 0x14
     df4:	22 23       	and	r18, r18
     df6:	29 f0       	breq	.+10     	; 0xe02 <_ZN13LiquidCrystal5beginEhhh+0x22>
     df8:	41 30       	cpi	r20, 0x01	; 1
     dfa:	19 f4       	brne	.+6      	; 0xe02 <_ZN13LiquidCrystal5beginEhhh+0x22>
     dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
     dfe:	84 60       	ori	r24, 0x04	; 4
     e00:	8f 87       	std	Y+15, r24	; 0x0f
     e02:	80 e5       	ldi	r24, 0x50	; 80
     e04:	93 ec       	ldi	r25, 0xC3	; 195
     e06:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <delayMicroseconds>
     e0a:	8c 81       	ldd	r24, Y+4	; 0x04
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     e12:	8e 81       	ldd	r24, Y+6	; 0x06
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     e1a:	8d 81       	ldd	r24, Y+5	; 0x05
     e1c:	8f 3f       	cpi	r24, 0xFF	; 255
     e1e:	19 f0       	breq	.+6      	; 0xe26 <_ZN13LiquidCrystal5beginEhhh+0x46>
     e20:	60 e0       	ldi	r22, 0x00	; 0
     e22:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
     e26:	6f 85       	ldd	r22, Y+15	; 0x0f
     e28:	64 fd       	sbrc	r22, 4
     e2a:	1d c0       	rjmp	.+58     	; 0xe66 <_ZN13LiquidCrystal5beginEhhh+0x86>
     e2c:	ce 01       	movw	r24, r28
     e2e:	63 e0       	ldi	r22, 0x03	; 3
     e30:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal10write4bitsEh>
     e34:	84 e9       	ldi	r24, 0x94	; 148
     e36:	91 e1       	ldi	r25, 0x11	; 17
     e38:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <delayMicroseconds>
     e3c:	ce 01       	movw	r24, r28
     e3e:	63 e0       	ldi	r22, 0x03	; 3
     e40:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal10write4bitsEh>
     e44:	84 e9       	ldi	r24, 0x94	; 148
     e46:	91 e1       	ldi	r25, 0x11	; 17
     e48:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <delayMicroseconds>
     e4c:	ce 01       	movw	r24, r28
     e4e:	63 e0       	ldi	r22, 0x03	; 3
     e50:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal10write4bitsEh>
     e54:	86 e9       	ldi	r24, 0x96	; 150
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <delayMicroseconds>
     e5c:	ce 01       	movw	r24, r28
     e5e:	62 e0       	ldi	r22, 0x02	; 2
     e60:	0e 94 7d 05 	call	0xafa	; 0xafa <_ZN13LiquidCrystal10write4bitsEh>
     e64:	16 c0       	rjmp	.+44     	; 0xe92 <_ZN13LiquidCrystal5beginEhhh+0xb2>
     e66:	60 62       	ori	r22, 0x20	; 32
     e68:	ce 01       	movw	r24, r28
     e6a:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     e6e:	84 e9       	ldi	r24, 0x94	; 148
     e70:	91 e1       	ldi	r25, 0x11	; 17
     e72:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <delayMicroseconds>
     e76:	6f 85       	ldd	r22, Y+15	; 0x0f
     e78:	60 62       	ori	r22, 0x20	; 32
     e7a:	ce 01       	movw	r24, r28
     e7c:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     e80:	86 e9       	ldi	r24, 0x96	; 150
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	0e 94 6e 16 	call	0x2cdc	; 0x2cdc <delayMicroseconds>
     e88:	6f 85       	ldd	r22, Y+15	; 0x0f
     e8a:	60 62       	ori	r22, 0x20	; 32
     e8c:	ce 01       	movw	r24, r28
     e8e:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     e92:	6f 85       	ldd	r22, Y+15	; 0x0f
     e94:	60 62       	ori	r22, 0x20	; 32
     e96:	ce 01       	movw	r24, r28
     e98:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     e9c:	84 e0       	ldi	r24, 0x04	; 4
     e9e:	88 8b       	std	Y+16, r24	; 0x10
     ea0:	ce 01       	movw	r24, r28
     ea2:	0e 94 a1 06 	call	0xd42	; 0xd42 <_ZN13LiquidCrystal7displayEv>
     ea6:	ce 01       	movw	r24, r28
     ea8:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <_ZN13LiquidCrystal5clearEv>
     eac:	82 e0       	ldi	r24, 0x02	; 2
     eae:	89 8b       	std	Y+17, r24	; 0x11
     eb0:	ce 01       	movw	r24, r28
     eb2:	66 e0       	ldi	r22, 0x06	; 6
     eb4:	0e 94 1b 06 	call	0xc36	; 0xc36 <_ZN13LiquidCrystal7commandEh>
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	08 95       	ret

00000ebe <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
     ebe:	6f 92       	push	r6
     ec0:	7f 92       	push	r7
     ec2:	8f 92       	push	r8
     ec4:	af 92       	push	r10
     ec6:	cf 92       	push	r12
     ec8:	ef 92       	push	r14
     eca:	0f 93       	push	r16
     ecc:	1f 93       	push	r17
     ece:	df 93       	push	r29
     ed0:	cf 93       	push	r28
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	3c 01       	movw	r6, r24
     ed8:	16 2f       	mov	r17, r22
     eda:	84 2f       	mov	r24, r20
     edc:	f3 01       	movw	r30, r6
     ede:	44 83       	std	Z+4, r20	; 0x04
     ee0:	25 83       	std	Z+5, r18	; 0x05
     ee2:	06 83       	std	Z+6, r16	; 0x06
     ee4:	e7 82       	std	Z+7, r14	; 0x07
     ee6:	c0 86       	std	Z+8, r12	; 0x08
     ee8:	a1 86       	std	Z+9, r10	; 0x09
     eea:	82 86       	std	Z+10, r8	; 0x0a
     eec:	9d 85       	ldd	r25, Y+13	; 0x0d
     eee:	93 87       	std	Z+11, r25	; 0x0b
     ef0:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef2:	94 87       	std	Z+12, r25	; 0x0c
     ef4:	9f 85       	ldd	r25, Y+15	; 0x0f
     ef6:	95 87       	std	Z+13, r25	; 0x0d
     ef8:	98 89       	ldd	r25, Y+16	; 0x10
     efa:	96 87       	std	Z+14, r25	; 0x0e
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <pinMode>
     f02:	f3 01       	movw	r30, r6
     f04:	85 81       	ldd	r24, Z+5	; 0x05
     f06:	8f 3f       	cpi	r24, 0xFF	; 255
     f08:	19 f0       	breq	.+6      	; 0xf10 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x52>
     f0a:	61 e0       	ldi	r22, 0x01	; 1
     f0c:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <pinMode>
     f10:	f3 01       	movw	r30, r6
     f12:	86 81       	ldd	r24, Z+6	; 0x06
     f14:	61 e0       	ldi	r22, 0x01	; 1
     f16:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <pinMode>
     f1a:	11 23       	and	r17, r17
     f1c:	19 f0       	breq	.+6      	; 0xf24 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x66>
     f1e:	f3 01       	movw	r30, r6
     f20:	17 86       	std	Z+15, r1	; 0x0f
     f22:	03 c0       	rjmp	.+6      	; 0xf2a <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x6c>
     f24:	80 e1       	ldi	r24, 0x10	; 16
     f26:	f3 01       	movw	r30, r6
     f28:	87 87       	std	Z+15, r24	; 0x0f
     f2a:	c3 01       	movw	r24, r6
     f2c:	60 e1       	ldi	r22, 0x10	; 16
     f2e:	41 e0       	ldi	r20, 0x01	; 1
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	0e 94 f0 06 	call	0xde0	; 0xde0 <_ZN13LiquidCrystal5beginEhhh>
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	1f 91       	pop	r17
     f3c:	0f 91       	pop	r16
     f3e:	ef 90       	pop	r14
     f40:	cf 90       	pop	r12
     f42:	af 90       	pop	r10
     f44:	8f 90       	pop	r8
     f46:	7f 90       	pop	r7
     f48:	6f 90       	pop	r6
     f4a:	08 95       	ret

00000f4c <_ZN13LiquidCrystalC1Ehhhhhh>:
     f4c:	8f 92       	push	r8
     f4e:	af 92       	push	r10
     f50:	cf 92       	push	r12
     f52:	ef 92       	push	r14
     f54:	0f 93       	push	r16
     f56:	cf 93       	push	r28
     f58:	df 93       	push	r29
     f5a:	a6 2f       	mov	r26, r22
     f5c:	74 2f       	mov	r23, r20
     f5e:	52 2f       	mov	r21, r18
     f60:	30 2f       	mov	r19, r16
     f62:	ae 2c       	mov	r10, r14
     f64:	8c 2c       	mov	r8, r12
     f66:	ec 01       	movw	r28, r24
     f68:	1b 82       	std	Y+3, r1	; 0x03
     f6a:	1a 82       	std	Y+2, r1	; 0x02
     f6c:	e9 e2       	ldi	r30, 0x29	; 41
     f6e:	f1 e0       	ldi	r31, 0x01	; 1
     f70:	f9 83       	std	Y+1, r31	; 0x01
     f72:	e8 83       	st	Y, r30
     f74:	00 d0       	rcall	.+0      	; 0xf76 <_ZN13LiquidCrystalC1Ehhhhhh+0x2a>
     f76:	00 d0       	rcall	.+0      	; 0xf78 <_ZN13LiquidCrystalC1Ehhhhhh+0x2c>
     f78:	ed b7       	in	r30, 0x3d	; 61
     f7a:	fe b7       	in	r31, 0x3e	; 62
     f7c:	31 96       	adiw	r30, 0x01	; 1
     f7e:	cd b7       	in	r28, 0x3d	; 61
     f80:	de b7       	in	r29, 0x3e	; 62
     f82:	19 82       	std	Y+1, r1	; 0x01
     f84:	11 82       	std	Z+1, r1	; 0x01
     f86:	12 82       	std	Z+2, r1	; 0x02
     f88:	13 82       	std	Z+3, r1	; 0x03
     f8a:	61 e0       	ldi	r22, 0x01	; 1
     f8c:	4a 2f       	mov	r20, r26
     f8e:	2f ef       	ldi	r18, 0xFF	; 255
     f90:	07 2f       	mov	r16, r23
     f92:	e5 2e       	mov	r14, r21
     f94:	c3 2e       	mov	r12, r19
     f96:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     f9a:	0f 90       	pop	r0
     f9c:	0f 90       	pop	r0
     f9e:	0f 90       	pop	r0
     fa0:	0f 90       	pop	r0
     fa2:	df 91       	pop	r29
     fa4:	cf 91       	pop	r28
     fa6:	0f 91       	pop	r16
     fa8:	ef 90       	pop	r14
     faa:	cf 90       	pop	r12
     fac:	af 90       	pop	r10
     fae:	8f 90       	pop	r8
     fb0:	08 95       	ret

00000fb2 <_ZN13LiquidCrystalC1Ehhhhhhh>:
     fb2:	8f 92       	push	r8
     fb4:	af 92       	push	r10
     fb6:	cf 92       	push	r12
     fb8:	ef 92       	push	r14
     fba:	0f 93       	push	r16
     fbc:	1f 93       	push	r17
     fbe:	cf 93       	push	r28
     fc0:	df 93       	push	r29
     fc2:	16 2f       	mov	r17, r22
     fc4:	f4 2f       	mov	r31, r20
     fc6:	e2 2f       	mov	r30, r18
     fc8:	70 2f       	mov	r23, r16
     fca:	5e 2d       	mov	r21, r14
     fcc:	3c 2d       	mov	r19, r12
     fce:	8a 2c       	mov	r8, r10
     fd0:	dc 01       	movw	r26, r24
     fd2:	13 96       	adiw	r26, 0x03	; 3
     fd4:	1c 92       	st	X, r1
     fd6:	1e 92       	st	-X, r1
     fd8:	12 97       	sbiw	r26, 0x02	; 2
     fda:	c9 e2       	ldi	r28, 0x29	; 41
     fdc:	d1 e0       	ldi	r29, 0x01	; 1
     fde:	cd 93       	st	X+, r28
     fe0:	dc 93       	st	X, r29
     fe2:	00 d0       	rcall	.+0      	; 0xfe4 <_ZN13LiquidCrystalC1Ehhhhhhh+0x32>
     fe4:	00 d0       	rcall	.+0      	; 0xfe6 <_ZN13LiquidCrystalC1Ehhhhhhh+0x34>
     fe6:	cd b7       	in	r28, 0x3d	; 61
     fe8:	de b7       	in	r29, 0x3e	; 62
     fea:	21 96       	adiw	r28, 0x01	; 1
     fec:	ad b7       	in	r26, 0x3d	; 61
     fee:	be b7       	in	r27, 0x3e	; 62
     ff0:	11 96       	adiw	r26, 0x01	; 1
     ff2:	1c 92       	st	X, r1
     ff4:	19 82       	std	Y+1, r1	; 0x01
     ff6:	1a 82       	std	Y+2, r1	; 0x02
     ff8:	1b 82       	std	Y+3, r1	; 0x03
     ffa:	61 e0       	ldi	r22, 0x01	; 1
     ffc:	41 2f       	mov	r20, r17
     ffe:	2f 2f       	mov	r18, r31
    1000:	0e 2f       	mov	r16, r30
    1002:	e7 2e       	mov	r14, r23
    1004:	c5 2e       	mov	r12, r21
    1006:	a3 2e       	mov	r10, r19
    1008:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	df 91       	pop	r29
    1016:	cf 91       	pop	r28
    1018:	1f 91       	pop	r17
    101a:	0f 91       	pop	r16
    101c:	ef 90       	pop	r14
    101e:	cf 90       	pop	r12
    1020:	af 90       	pop	r10
    1022:	8f 90       	pop	r8
    1024:	08 95       	ret

00001026 <_ZN13LiquidCrystalC1Ehhhhhhhhhh>:
    1026:	8f 92       	push	r8
    1028:	af 92       	push	r10
    102a:	cf 92       	push	r12
    102c:	ef 92       	push	r14
    102e:	ff 92       	push	r15
    1030:	0f 93       	push	r16
    1032:	1f 93       	push	r17
    1034:	df 93       	push	r29
    1036:	cf 93       	push	r28
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	f6 2e       	mov	r15, r22
    103e:	f4 2f       	mov	r31, r20
    1040:	e2 2f       	mov	r30, r18
    1042:	70 2f       	mov	r23, r16
    1044:	5e 2d       	mov	r21, r14
    1046:	3c 2d       	mov	r19, r12
    1048:	dc 01       	movw	r26, r24
    104a:	13 96       	adiw	r26, 0x03	; 3
    104c:	1c 92       	st	X, r1
    104e:	1e 92       	st	-X, r1
    1050:	12 97       	sbiw	r26, 0x02	; 2
    1052:	09 e2       	ldi	r16, 0x29	; 41
    1054:	11 e0       	ldi	r17, 0x01	; 1
    1056:	0d 93       	st	X+, r16
    1058:	1c 93       	st	X, r17
    105a:	00 d0       	rcall	.+0      	; 0x105c <_ZN13LiquidCrystalC1Ehhhhhhhhhh+0x36>
    105c:	00 d0       	rcall	.+0      	; 0x105e <_ZN13LiquidCrystalC1Ehhhhhhhhhh+0x38>
    105e:	0d b7       	in	r16, 0x3d	; 61
    1060:	1e b7       	in	r17, 0x3e	; 62
    1062:	0f 5f       	subi	r16, 0xFF	; 255
    1064:	1f 4f       	sbci	r17, 0xFF	; 255
    1066:	ad b7       	in	r26, 0x3d	; 61
    1068:	be b7       	in	r27, 0x3e	; 62
    106a:	11 96       	adiw	r26, 0x01	; 1
    106c:	ac 92       	st	X, r10
    106e:	d8 01       	movw	r26, r16
    1070:	11 96       	adiw	r26, 0x01	; 1
    1072:	8c 92       	st	X, r8
    1074:	11 97       	sbiw	r26, 0x01	; 1
    1076:	2c 85       	ldd	r18, Y+12	; 0x0c
    1078:	12 96       	adiw	r26, 0x02	; 2
    107a:	2c 93       	st	X, r18
    107c:	12 97       	sbiw	r26, 0x02	; 2
    107e:	2d 85       	ldd	r18, Y+13	; 0x0d
    1080:	13 96       	adiw	r26, 0x03	; 3
    1082:	2c 93       	st	X, r18
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	4f 2d       	mov	r20, r15
    1088:	2f ef       	ldi	r18, 0xFF	; 255
    108a:	0f 2f       	mov	r16, r31
    108c:	ee 2e       	mov	r14, r30
    108e:	c7 2e       	mov	r12, r23
    1090:	a5 2e       	mov	r10, r21
    1092:	83 2e       	mov	r8, r19
    1094:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    1098:	0f 90       	pop	r0
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	1f 91       	pop	r17
    10a6:	0f 91       	pop	r16
    10a8:	ff 90       	pop	r15
    10aa:	ef 90       	pop	r14
    10ac:	cf 90       	pop	r12
    10ae:	af 90       	pop	r10
    10b0:	8f 90       	pop	r8
    10b2:	08 95       	ret

000010b4 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh>:
    10b4:	8f 92       	push	r8
    10b6:	af 92       	push	r10
    10b8:	cf 92       	push	r12
    10ba:	df 92       	push	r13
    10bc:	ef 92       	push	r14
    10be:	ff 92       	push	r15
    10c0:	0f 93       	push	r16
    10c2:	1f 93       	push	r17
    10c4:	df 93       	push	r29
    10c6:	cf 93       	push	r28
    10c8:	cd b7       	in	r28, 0x3d	; 61
    10ca:	de b7       	in	r29, 0x3e	; 62
    10cc:	a6 2f       	mov	r26, r22
    10ce:	f4 2e       	mov	r15, r20
    10d0:	d2 2e       	mov	r13, r18
    10d2:	70 2f       	mov	r23, r16
    10d4:	5e 2d       	mov	r21, r14
    10d6:	3c 2d       	mov	r19, r12
    10d8:	ba 2d       	mov	r27, r10
    10da:	fc 01       	movw	r30, r24
    10dc:	13 82       	std	Z+3, r1	; 0x03
    10de:	12 82       	std	Z+2, r1	; 0x02
    10e0:	09 e2       	ldi	r16, 0x29	; 41
    10e2:	11 e0       	ldi	r17, 0x01	; 1
    10e4:	11 83       	std	Z+1, r17	; 0x01
    10e6:	00 83       	st	Z, r16
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <_ZN13LiquidCrystalC1Ehhhhhhhhhhh+0x36>
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <_ZN13LiquidCrystalC1Ehhhhhhhhhhh+0x38>
    10ec:	0d b7       	in	r16, 0x3d	; 61
    10ee:	1e b7       	in	r17, 0x3e	; 62
    10f0:	0f 5f       	subi	r16, 0xFF	; 255
    10f2:	1f 4f       	sbci	r17, 0xFF	; 255
    10f4:	ed b7       	in	r30, 0x3d	; 61
    10f6:	fe b7       	in	r31, 0x3e	; 62
    10f8:	81 82       	std	Z+1, r8	; 0x01
    10fa:	2d 85       	ldd	r18, Y+13	; 0x0d
    10fc:	f8 01       	movw	r30, r16
    10fe:	21 83       	std	Z+1, r18	; 0x01
    1100:	2e 85       	ldd	r18, Y+14	; 0x0e
    1102:	22 83       	std	Z+2, r18	; 0x02
    1104:	2f 85       	ldd	r18, Y+15	; 0x0f
    1106:	23 83       	std	Z+3, r18	; 0x03
    1108:	60 e0       	ldi	r22, 0x00	; 0
    110a:	4a 2f       	mov	r20, r26
    110c:	2f 2d       	mov	r18, r15
    110e:	0d 2d       	mov	r16, r13
    1110:	e7 2e       	mov	r14, r23
    1112:	c5 2e       	mov	r12, r21
    1114:	a3 2e       	mov	r10, r19
    1116:	8b 2e       	mov	r8, r27
    1118:	0e 94 5f 07 	call	0xebe	; 0xebe <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	0f 90       	pop	r0
    1122:	0f 90       	pop	r0
    1124:	cf 91       	pop	r28
    1126:	df 91       	pop	r29
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	ff 90       	pop	r15
    112e:	ef 90       	pop	r14
    1130:	df 90       	pop	r13
    1132:	cf 90       	pop	r12
    1134:	af 90       	pop	r10
    1136:	8f 90       	pop	r8
    1138:	08 95       	ret

0000113a <_ZN12PDControllerC1Ev>:
    113a:	2a ef       	ldi	r18, 0xFA	; 250
    113c:	30 e0       	ldi	r19, 0x00	; 0
    113e:	fc 01       	movw	r30, r24
    1140:	31 8f       	std	Z+25, r19	; 0x19
    1142:	20 8f       	std	Z+24, r18	; 0x18
    1144:	08 95       	ret

00001146 <_ZN12PDController7computeEd>:
    1146:	6f 92       	push	r6
    1148:	7f 92       	push	r7
    114a:	8f 92       	push	r8
    114c:	9f 92       	push	r9
    114e:	af 92       	push	r10
    1150:	bf 92       	push	r11
    1152:	cf 92       	push	r12
    1154:	df 92       	push	r13
    1156:	ef 92       	push	r14
    1158:	ff 92       	push	r15
    115a:	0f 93       	push	r16
    115c:	1f 93       	push	r17
    115e:	cf 93       	push	r28
    1160:	df 93       	push	r29
    1162:	ec 01       	movw	r28, r24
    1164:	7a 01       	movw	r14, r20
    1166:	8b 01       	movw	r16, r22
    1168:	48 83       	st	Y, r20
    116a:	59 83       	std	Y+1, r21	; 0x01
    116c:	6a 83       	std	Y+2, r22	; 0x02
    116e:	7b 83       	std	Y+3, r23	; 0x03
    1170:	68 85       	ldd	r22, Y+8	; 0x08
    1172:	79 85       	ldd	r23, Y+9	; 0x09
    1174:	8a 85       	ldd	r24, Y+10	; 0x0a
    1176:	9b 85       	ldd	r25, Y+11	; 0x0b
    1178:	a8 01       	movw	r20, r16
    117a:	97 01       	movw	r18, r14
    117c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__subsf3>
    1180:	28 89       	ldd	r18, Y+16	; 0x10
    1182:	39 89       	ldd	r19, Y+17	; 0x11
    1184:	4a 89       	ldd	r20, Y+18	; 0x12
    1186:	5b 89       	ldd	r21, Y+19	; 0x13
    1188:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
    118c:	5b 01       	movw	r10, r22
    118e:	6c 01       	movw	r12, r24
    1190:	c8 01       	movw	r24, r16
    1192:	b7 01       	movw	r22, r14
    1194:	2c 85       	ldd	r18, Y+12	; 0x0c
    1196:	3d 85       	ldd	r19, Y+13	; 0x0d
    1198:	4e 85       	ldd	r20, Y+14	; 0x0e
    119a:	5f 85       	ldd	r21, Y+15	; 0x0f
    119c:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__subsf3>
    11a0:	2c 89       	ldd	r18, Y+20	; 0x14
    11a2:	3d 89       	ldd	r19, Y+21	; 0x15
    11a4:	4e 89       	ldd	r20, Y+22	; 0x16
    11a6:	5f 89       	ldd	r21, Y+23	; 0x17
    11a8:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
    11ac:	9b 01       	movw	r18, r22
    11ae:	ac 01       	movw	r20, r24
    11b0:	c6 01       	movw	r24, r12
    11b2:	b5 01       	movw	r22, r10
    11b4:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__addsf3>
    11b8:	d6 2e       	mov	r13, r22
    11ba:	c7 2e       	mov	r12, r23
    11bc:	b8 2e       	mov	r11, r24
    11be:	a9 2e       	mov	r10, r25
    11c0:	a6 01       	movw	r20, r12
    11c2:	95 01       	movw	r18, r10
    11c4:	85 2f       	mov	r24, r21
    11c6:	94 2f       	mov	r25, r20
    11c8:	a3 2f       	mov	r26, r19
    11ca:	b2 2f       	mov	r27, r18
    11cc:	8c 83       	std	Y+4, r24	; 0x04
    11ce:	9d 83       	std	Y+5, r25	; 0x05
    11d0:	ae 83       	std	Y+6, r26	; 0x06
    11d2:	bf 83       	std	Y+7, r27	; 0x07
    11d4:	6e 8c       	ldd	r6, Y+30	; 0x1e
    11d6:	7f 8c       	ldd	r7, Y+31	; 0x1f
    11d8:	88 a0       	ldd	r8, Y+32	; 0x20
    11da:	99 a0       	ldd	r9, Y+33	; 0x21
    11dc:	65 2f       	mov	r22, r21
    11de:	74 2f       	mov	r23, r20
    11e0:	83 2f       	mov	r24, r19
    11e2:	92 2f       	mov	r25, r18
    11e4:	a4 01       	movw	r20, r8
    11e6:	93 01       	movw	r18, r6
    11e8:	0e 94 a3 11 	call	0x2346	; 0x2346 <__gtsf2>
    11ec:	18 16       	cp	r1, r24
    11ee:	84 f0       	brlt	.+32     	; 0x1210 <_ZN12PDController7computeEd+0xca>
    11f0:	6a 8c       	ldd	r6, Y+26	; 0x1a
    11f2:	7b 8c       	ldd	r7, Y+27	; 0x1b
    11f4:	8c 8c       	ldd	r8, Y+28	; 0x1c
    11f6:	9d 8c       	ldd	r9, Y+29	; 0x1d
    11f8:	a6 01       	movw	r20, r12
    11fa:	95 01       	movw	r18, r10
    11fc:	65 2f       	mov	r22, r21
    11fe:	74 2f       	mov	r23, r20
    1200:	83 2f       	mov	r24, r19
    1202:	92 2f       	mov	r25, r18
    1204:	a4 01       	movw	r20, r8
    1206:	93 01       	movw	r18, r6
    1208:	0e 94 03 12 	call	0x2406	; 0x2406 <__ltsf2>
    120c:	87 ff       	sbrs	r24, 7
    120e:	04 c0       	rjmp	.+8      	; 0x1218 <_ZN12PDController7computeEd+0xd2>
    1210:	6c 82       	std	Y+4, r6	; 0x04
    1212:	7d 82       	std	Y+5, r7	; 0x05
    1214:	8e 82       	std	Y+6, r8	; 0x06
    1216:	9f 82       	std	Y+7, r9	; 0x07
    1218:	ec 86       	std	Y+12, r14	; 0x0c
    121a:	fd 86       	std	Y+13, r15	; 0x0d
    121c:	0e 87       	std	Y+14, r16	; 0x0e
    121e:	1f 87       	std	Y+15, r17	; 0x0f
    1220:	df 91       	pop	r29
    1222:	cf 91       	pop	r28
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	df 90       	pop	r13
    122e:	cf 90       	pop	r12
    1230:	bf 90       	pop	r11
    1232:	af 90       	pop	r10
    1234:	9f 90       	pop	r9
    1236:	8f 90       	pop	r8
    1238:	7f 90       	pop	r7
    123a:	6f 90       	pop	r6
    123c:	08 95       	ret

0000123e <_ZN12PDController10setTuningsEdd>:
    123e:	af 92       	push	r10
    1240:	bf 92       	push	r11
    1242:	cf 92       	push	r12
    1244:	df 92       	push	r13
    1246:	ef 92       	push	r14
    1248:	ff 92       	push	r15
    124a:	0f 93       	push	r16
    124c:	1f 93       	push	r17
    124e:	cf 93       	push	r28
    1250:	df 93       	push	r29
    1252:	ec 01       	movw	r28, r24
    1254:	5a 01       	movw	r10, r20
    1256:	6b 01       	movw	r12, r22
    1258:	78 01       	movw	r14, r16
    125a:	89 01       	movw	r16, r18
    125c:	68 8d       	ldd	r22, Y+24	; 0x18
    125e:	79 8d       	ldd	r23, Y+25	; 0x19
    1260:	88 27       	eor	r24, r24
    1262:	77 fd       	sbrc	r23, 7
    1264:	80 95       	com	r24
    1266:	98 2f       	mov	r25, r24
    1268:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    126c:	20 e0       	ldi	r18, 0x00	; 0
    126e:	30 e0       	ldi	r19, 0x00	; 0
    1270:	4a e7       	ldi	r20, 0x7A	; 122
    1272:	54 e4       	ldi	r21, 0x44	; 68
    1274:	0e 94 c5 10 	call	0x218a	; 0x218a <__divsf3>
    1278:	56 2f       	mov	r21, r22
    127a:	47 2f       	mov	r20, r23
    127c:	38 2f       	mov	r19, r24
    127e:	29 2f       	mov	r18, r25
    1280:	a8 8a       	std	Y+16, r10	; 0x10
    1282:	b9 8a       	std	Y+17, r11	; 0x11
    1284:	ca 8a       	std	Y+18, r12	; 0x12
    1286:	db 8a       	std	Y+19, r13	; 0x13
    1288:	c8 01       	movw	r24, r16
    128a:	b7 01       	movw	r22, r14
    128c:	da 01       	movw	r26, r20
    128e:	f9 01       	movw	r30, r18
    1290:	2b 2f       	mov	r18, r27
    1292:	3a 2f       	mov	r19, r26
    1294:	4f 2f       	mov	r20, r31
    1296:	5e 2f       	mov	r21, r30
    1298:	0e 94 c5 10 	call	0x218a	; 0x218a <__divsf3>
    129c:	6c 8b       	std	Y+20, r22	; 0x14
    129e:	7d 8b       	std	Y+21, r23	; 0x15
    12a0:	8e 8b       	std	Y+22, r24	; 0x16
    12a2:	9f 8b       	std	Y+23, r25	; 0x17
    12a4:	df 91       	pop	r29
    12a6:	cf 91       	pop	r28
    12a8:	1f 91       	pop	r17
    12aa:	0f 91       	pop	r16
    12ac:	ff 90       	pop	r15
    12ae:	ef 90       	pop	r14
    12b0:	df 90       	pop	r13
    12b2:	cf 90       	pop	r12
    12b4:	bf 90       	pop	r11
    12b6:	af 90       	pop	r10
    12b8:	08 95       	ret

000012ba <_ZN12PDController15setOutputLimitsEdd>:
    12ba:	6f 92       	push	r6
    12bc:	7f 92       	push	r7
    12be:	8f 92       	push	r8
    12c0:	9f 92       	push	r9
    12c2:	af 92       	push	r10
    12c4:	bf 92       	push	r11
    12c6:	cf 92       	push	r12
    12c8:	df 92       	push	r13
    12ca:	ef 92       	push	r14
    12cc:	ff 92       	push	r15
    12ce:	0f 93       	push	r16
    12d0:	1f 93       	push	r17
    12d2:	cf 93       	push	r28
    12d4:	df 93       	push	r29
    12d6:	ec 01       	movw	r28, r24
    12d8:	5a 01       	movw	r10, r20
    12da:	6b 01       	movw	r12, r22
    12dc:	78 01       	movw	r14, r16
    12de:	89 01       	movw	r16, r18
    12e0:	cb 01       	movw	r24, r22
    12e2:	ba 01       	movw	r22, r20
    12e4:	a8 01       	movw	r20, r16
    12e6:	97 01       	movw	r18, r14
    12e8:	0e 94 a3 11 	call	0x2346	; 0x2346 <__gtsf2>
    12ec:	18 16       	cp	r1, r24
    12ee:	2c f1       	brlt	.+74     	; 0x133a <_ZN12PDController15setOutputLimitsEdd+0x80>
    12f0:	aa 8e       	std	Y+26, r10	; 0x1a
    12f2:	bb 8e       	std	Y+27, r11	; 0x1b
    12f4:	cc 8e       	std	Y+28, r12	; 0x1c
    12f6:	dd 8e       	std	Y+29, r13	; 0x1d
    12f8:	ee 8e       	std	Y+30, r14	; 0x1e
    12fa:	ff 8e       	std	Y+31, r15	; 0x1f
    12fc:	08 a3       	std	Y+32, r16	; 0x20
    12fe:	19 a3       	std	Y+33, r17	; 0x21
    1300:	6c 80       	ldd	r6, Y+4	; 0x04
    1302:	7d 80       	ldd	r7, Y+5	; 0x05
    1304:	8e 80       	ldd	r8, Y+6	; 0x06
    1306:	9f 80       	ldd	r9, Y+7	; 0x07
    1308:	c4 01       	movw	r24, r8
    130a:	b3 01       	movw	r22, r6
    130c:	a8 01       	movw	r20, r16
    130e:	97 01       	movw	r18, r14
    1310:	0e 94 a3 11 	call	0x2346	; 0x2346 <__gtsf2>
    1314:	18 16       	cp	r1, r24
    1316:	2c f4       	brge	.+10     	; 0x1322 <_ZN12PDController15setOutputLimitsEdd+0x68>
    1318:	ec 82       	std	Y+4, r14	; 0x04
    131a:	fd 82       	std	Y+5, r15	; 0x05
    131c:	0e 83       	std	Y+6, r16	; 0x06
    131e:	1f 83       	std	Y+7, r17	; 0x07
    1320:	0c c0       	rjmp	.+24     	; 0x133a <_ZN12PDController15setOutputLimitsEdd+0x80>
    1322:	c4 01       	movw	r24, r8
    1324:	b3 01       	movw	r22, r6
    1326:	a6 01       	movw	r20, r12
    1328:	95 01       	movw	r18, r10
    132a:	0e 94 03 12 	call	0x2406	; 0x2406 <__ltsf2>
    132e:	87 ff       	sbrs	r24, 7
    1330:	04 c0       	rjmp	.+8      	; 0x133a <_ZN12PDController15setOutputLimitsEdd+0x80>
    1332:	ac 82       	std	Y+4, r10	; 0x04
    1334:	bd 82       	std	Y+5, r11	; 0x05
    1336:	ce 82       	std	Y+6, r12	; 0x06
    1338:	df 82       	std	Y+7, r13	; 0x07
    133a:	df 91       	pop	r29
    133c:	cf 91       	pop	r28
    133e:	1f 91       	pop	r17
    1340:	0f 91       	pop	r16
    1342:	ff 90       	pop	r15
    1344:	ef 90       	pop	r14
    1346:	df 90       	pop	r13
    1348:	cf 90       	pop	r12
    134a:	bf 90       	pop	r11
    134c:	af 90       	pop	r10
    134e:	9f 90       	pop	r9
    1350:	8f 90       	pop	r8
    1352:	7f 90       	pop	r7
    1354:	6f 90       	pop	r6
    1356:	08 95       	ret

00001358 <_Z17PDController_initv>:
    1358:	f8 94       	cli
    135a:	10 92 80 00 	sts	0x0080, r1
    135e:	e1 e8       	ldi	r30, 0x81	; 129
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	10 82       	st	Z, r1
    1364:	10 92 85 00 	sts	0x0085, r1
    1368:	10 92 84 00 	sts	0x0084, r1
    136c:	89 e0       	ldi	r24, 0x09	; 9
    136e:	9d e3       	ldi	r25, 0x3D	; 61
    1370:	90 93 89 00 	sts	0x0089, r25
    1374:	80 93 88 00 	sts	0x0088, r24
    1378:	80 81       	ld	r24, Z
    137a:	88 60       	ori	r24, 0x08	; 8
    137c:	80 83       	st	Z, r24
    137e:	80 81       	ld	r24, Z
    1380:	84 60       	ori	r24, 0x04	; 4
    1382:	80 83       	st	Z, r24
    1384:	ef e6       	ldi	r30, 0x6F	; 111
    1386:	f0 e0       	ldi	r31, 0x00	; 0
    1388:	80 81       	ld	r24, Z
    138a:	82 60       	ori	r24, 0x02	; 2
    138c:	80 83       	st	Z, r24
    138e:	78 94       	sei
    1390:	08 95       	ret

00001392 <__vector_7>:
    1392:	1f 92       	push	r1
    1394:	0f 92       	push	r0
    1396:	0f b6       	in	r0, 0x3f	; 63
    1398:	0f 92       	push	r0
    139a:	11 24       	eor	r1, r1
    139c:	2f 93       	push	r18
    139e:	3f 93       	push	r19
    13a0:	4f 93       	push	r20
    13a2:	5f 93       	push	r21
    13a4:	6f 93       	push	r22
    13a6:	8f 93       	push	r24
    13a8:	9f 93       	push	r25
    13aa:	af 93       	push	r26
    13ac:	bf 93       	push	r27
    13ae:	ef 93       	push	r30
    13b0:	ff 93       	push	r31
    13b2:	80 91 35 01 	lds	r24, 0x0135
    13b6:	8f 5f       	subi	r24, 0xFF	; 255
    13b8:	80 93 35 01 	sts	0x0135, r24
    13bc:	80 91 35 01 	lds	r24, 0x0135
    13c0:	88 23       	and	r24, r24
    13c2:	19 f0       	breq	.+6      	; 0x13ca <__vector_7+0x38>
    13c4:	e7 e1       	ldi	r30, 0x17	; 23
    13c6:	f3 e0       	ldi	r31, 0x03	; 3
    13c8:	40 c0       	rjmp	.+128    	; 0x144a <__vector_7+0xb8>
    13ca:	e8 e1       	ldi	r30, 0x18	; 24
    13cc:	f3 e0       	ldi	r31, 0x03	; 3
    13ce:	66 81       	ldd	r22, Z+6	; 0x06
    13d0:	66 23       	and	r22, r22
    13d2:	19 f4       	brne	.+6      	; 0x13da <__vector_7+0x48>
    13d4:	87 81       	ldd	r24, Z+7	; 0x07
    13d6:	88 23       	and	r24, r24
    13d8:	f9 f0       	breq	.+62     	; 0x1418 <__vector_7+0x86>
    13da:	84 81       	ldd	r24, Z+4	; 0x04
    13dc:	90 e0       	ldi	r25, 0x00	; 0
    13de:	25 81       	ldd	r18, Z+5	; 0x05
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	ac 01       	movw	r20, r24
    13e4:	42 1b       	sub	r20, r18
    13e6:	53 0b       	sbc	r21, r19
    13e8:	14 16       	cp	r1, r20
    13ea:	15 06       	cpc	r1, r21
    13ec:	44 f4       	brge	.+16     	; 0x13fe <__vector_7+0x6c>
    13ee:	66 23       	and	r22, r22
    13f0:	a1 f0       	breq	.+40     	; 0x141a <__vector_7+0x88>
    13f2:	26 0f       	add	r18, r22
    13f4:	31 1d       	adc	r19, r1
    13f6:	28 17       	cp	r18, r24
    13f8:	39 07       	cpc	r19, r25
    13fa:	7c f4       	brge	.+30     	; 0x141a <__vector_7+0x88>
    13fc:	0b c0       	rjmp	.+22     	; 0x1414 <__vector_7+0x82>
    13fe:	41 15       	cp	r20, r1
    1400:	51 05       	cpc	r21, r1
    1402:	59 f0       	breq	.+22     	; 0x141a <__vector_7+0x88>
    1404:	47 81       	ldd	r20, Z+7	; 0x07
    1406:	44 23       	and	r20, r20
    1408:	41 f0       	breq	.+16     	; 0x141a <__vector_7+0x88>
    140a:	24 1b       	sub	r18, r20
    140c:	31 09       	sbc	r19, r1
    140e:	82 17       	cp	r24, r18
    1410:	93 07       	cpc	r25, r19
    1412:	1c f4       	brge	.+6      	; 0x141a <__vector_7+0x88>
    1414:	c9 01       	movw	r24, r18
    1416:	01 c0       	rjmp	.+2      	; 0x141a <__vector_7+0x88>
    1418:	84 81       	ldd	r24, Z+4	; 0x04
    141a:	85 83       	std	Z+5, r24	; 0x05
    141c:	85 81       	ldd	r24, Z+5	; 0x05
    141e:	88 23       	and	r24, r24
    1420:	71 f0       	breq	.+28     	; 0x143e <__vector_7+0xac>
    1422:	90 81       	ld	r25, Z
    1424:	a1 81       	ldd	r26, Z+1	; 0x01
    1426:	b2 81       	ldd	r27, Z+2	; 0x02
    1428:	83 81       	ldd	r24, Z+3	; 0x03
    142a:	99 23       	and	r25, r25
    142c:	21 f4       	brne	.+8      	; 0x1436 <__vector_7+0xa4>
    142e:	9c 91       	ld	r25, X
    1430:	98 2b       	or	r25, r24
    1432:	9c 93       	st	X, r25
    1434:	04 c0       	rjmp	.+8      	; 0x143e <__vector_7+0xac>
    1436:	9c 91       	ld	r25, X
    1438:	80 95       	com	r24
    143a:	89 23       	and	r24, r25
    143c:	8c 93       	st	X, r24
    143e:	39 96       	adiw	r30, 0x09	; 9
    1440:	83 e0       	ldi	r24, 0x03	; 3
    1442:	ea 32       	cpi	r30, 0x2A	; 42
    1444:	f8 07       	cpc	r31, r24
    1446:	19 f6       	brne	.-122    	; 0x13ce <__vector_7+0x3c>
    1448:	bd cf       	rjmp	.-134    	; 0x13c4 <__vector_7+0x32>
    144a:	80 81       	ld	r24, Z
    144c:	87 fd       	sbrc	r24, 7
    144e:	13 c0       	rjmp	.+38     	; 0x1476 <__vector_7+0xe4>
    1450:	80 91 35 01 	lds	r24, 0x0135
    1454:	96 81       	ldd	r25, Z+6	; 0x06
    1456:	98 17       	cp	r25, r24
    1458:	71 f4       	brne	.+28     	; 0x1476 <__vector_7+0xe4>
    145a:	81 81       	ldd	r24, Z+1	; 0x01
    145c:	a2 81       	ldd	r26, Z+2	; 0x02
    145e:	b3 81       	ldd	r27, Z+3	; 0x03
    1460:	94 81       	ldd	r25, Z+4	; 0x04
    1462:	88 23       	and	r24, r24
    1464:	29 f4       	brne	.+10     	; 0x1470 <__vector_7+0xde>
    1466:	2c 91       	ld	r18, X
    1468:	89 2f       	mov	r24, r25
    146a:	80 95       	com	r24
    146c:	82 23       	and	r24, r18
    146e:	02 c0       	rjmp	.+4      	; 0x1474 <__vector_7+0xe2>
    1470:	8c 91       	ld	r24, X
    1472:	89 2b       	or	r24, r25
    1474:	8c 93       	st	X, r24
    1476:	39 96       	adiw	r30, 0x09	; 9
    1478:	83 e0       	ldi	r24, 0x03	; 3
    147a:	e9 32       	cpi	r30, 0x29	; 41
    147c:	f8 07       	cpc	r31, r24
    147e:	29 f7       	brne	.-54     	; 0x144a <__vector_7+0xb8>
    1480:	ff 91       	pop	r31
    1482:	ef 91       	pop	r30
    1484:	bf 91       	pop	r27
    1486:	af 91       	pop	r26
    1488:	9f 91       	pop	r25
    148a:	8f 91       	pop	r24
    148c:	6f 91       	pop	r22
    148e:	5f 91       	pop	r21
    1490:	4f 91       	pop	r20
    1492:	3f 91       	pop	r19
    1494:	2f 91       	pop	r18
    1496:	0f 90       	pop	r0
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	0f 90       	pop	r0
    149c:	1f 90       	pop	r1
    149e:	18 95       	reti

000014a0 <_Z12SoftPWMBeginh>:
    14a0:	91 e0       	ldi	r25, 0x01	; 1
    14a2:	97 bb       	out	0x17, r25	; 23
    14a4:	92 e0       	ldi	r25, 0x02	; 2
    14a6:	90 93 b1 00 	sts	0x00B1, r25
    14aa:	90 93 b0 00 	sts	0x00B0, r25
    14ae:	22 e8       	ldi	r18, 0x82	; 130
    14b0:	20 93 b3 00 	sts	0x00B3, r18
    14b4:	e0 e7       	ldi	r30, 0x70	; 112
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	90 83       	st	Z, r25
    14ba:	90 81       	ld	r25, Z
    14bc:	9f ef       	ldi	r25, 0xFF	; 255
    14be:	90 93 17 03 	sts	0x0317, r25
    14c2:	10 92 18 03 	sts	0x0318, r1
    14c6:	10 92 1a 03 	sts	0x031A, r1
    14ca:	10 92 19 03 	sts	0x0319, r1
    14ce:	10 92 1e 03 	sts	0x031E, r1
    14d2:	10 92 1f 03 	sts	0x031F, r1
    14d6:	90 93 20 03 	sts	0x0320, r25
    14da:	10 92 21 03 	sts	0x0321, r1
    14de:	10 92 23 03 	sts	0x0323, r1
    14e2:	10 92 22 03 	sts	0x0322, r1
    14e6:	10 92 27 03 	sts	0x0327, r1
    14ea:	10 92 28 03 	sts	0x0328, r1
    14ee:	80 93 16 03 	sts	0x0316, r24
    14f2:	08 95       	ret

000014f4 <_Z18SoftPWMSetPolarityah>:
    14f4:	91 e0       	ldi	r25, 0x01	; 1
    14f6:	66 23       	and	r22, r22
    14f8:	09 f4       	brne	.+2      	; 0x14fc <_Z18SoftPWMSetPolarityah+0x8>
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	30 91 17 03 	lds	r19, 0x0317
    1500:	20 91 20 03 	lds	r18, 0x0320
    1504:	87 ff       	sbrs	r24, 7
    1506:	06 c0       	rjmp	.+12     	; 0x1514 <_Z18SoftPWMSetPolarityah+0x20>
    1508:	08 c0       	rjmp	.+16     	; 0x151a <_Z18SoftPWMSetPolarityah+0x26>
    150a:	90 93 18 03 	sts	0x0318, r25
    150e:	87 ff       	sbrs	r24, 7
    1510:	0a c0       	rjmp	.+20     	; 0x1526 <_Z18SoftPWMSetPolarityah+0x32>
    1512:	0c c0       	rjmp	.+24     	; 0x152c <_Z18SoftPWMSetPolarityah+0x38>
    1514:	38 17       	cp	r19, r24
    1516:	39 f4       	brne	.+14     	; 0x1526 <_Z18SoftPWMSetPolarityah+0x32>
    1518:	f8 cf       	rjmp	.-16     	; 0x150a <_Z18SoftPWMSetPolarityah+0x16>
    151a:	37 ff       	sbrs	r19, 7
    151c:	f6 cf       	rjmp	.-20     	; 0x150a <_Z18SoftPWMSetPolarityah+0x16>
    151e:	06 c0       	rjmp	.+12     	; 0x152c <_Z18SoftPWMSetPolarityah+0x38>
    1520:	90 93 21 03 	sts	0x0321, r25
    1524:	08 95       	ret
    1526:	28 17       	cp	r18, r24
    1528:	19 f4       	brne	.+6      	; 0x1530 <_Z18SoftPWMSetPolarityah+0x3c>
    152a:	fa cf       	rjmp	.-12     	; 0x1520 <_Z18SoftPWMSetPolarityah+0x2c>
    152c:	27 ff       	sbrs	r18, 7
    152e:	f8 cf       	rjmp	.-16     	; 0x1520 <_Z18SoftPWMSetPolarityah+0x2c>
    1530:	08 95       	ret

00001532 <_Z10SoftPWMSetahh>:
    1532:	1f 93       	push	r17
    1534:	18 2f       	mov	r17, r24
    1536:	44 23       	and	r20, r20
    1538:	29 f0       	breq	.+10     	; 0x1544 <_Z10SoftPWMSetahh+0x12>
    153a:	10 92 b2 00 	sts	0x00B2, r1
    153e:	8f ef       	ldi	r24, 0xFF	; 255
    1540:	80 93 35 01 	sts	0x0135, r24
    1544:	e7 e1       	ldi	r30, 0x17	; 23
    1546:	f3 e0       	ldi	r31, 0x03	; 3
    1548:	90 e0       	ldi	r25, 0x00	; 0
    154a:	8f ef       	ldi	r24, 0xFF	; 255
    154c:	20 81       	ld	r18, Z
    154e:	17 ff       	sbrs	r17, 7
    1550:	03 c0       	rjmp	.+6      	; 0x1558 <_Z10SoftPWMSetahh+0x26>
    1552:	27 ff       	sbrs	r18, 7
    1554:	03 c0       	rjmp	.+6      	; 0x155c <_Z10SoftPWMSetahh+0x2a>
    1556:	05 c0       	rjmp	.+10     	; 0x1562 <_Z10SoftPWMSetahh+0x30>
    1558:	21 17       	cp	r18, r17
    155a:	19 f4       	brne	.+6      	; 0x1562 <_Z10SoftPWMSetahh+0x30>
    155c:	65 83       	std	Z+5, r22	; 0x05
    155e:	17 ff       	sbrs	r17, 7
    1560:	4d c0       	rjmp	.+154    	; 0x15fc <_Z10SoftPWMSetahh+0xca>
    1562:	8f 3f       	cpi	r24, 0xFF	; 255
    1564:	19 f4       	brne	.+6      	; 0x156c <_Z10SoftPWMSetahh+0x3a>
    1566:	20 81       	ld	r18, Z
    1568:	27 fd       	sbrc	r18, 7
    156a:	89 2f       	mov	r24, r25
    156c:	9f 5f       	subi	r25, 0xFF	; 255
    156e:	39 96       	adiw	r30, 0x09	; 9
    1570:	92 30       	cpi	r25, 0x02	; 2
    1572:	61 f7       	brne	.-40     	; 0x154c <_Z10SoftPWMSetahh+0x1a>
    1574:	17 fd       	sbrc	r17, 7
    1576:	42 c0       	rjmp	.+132    	; 0x15fc <_Z10SoftPWMSetahh+0xca>
    1578:	8f 3f       	cpi	r24, 0xFF	; 255
    157a:	09 f4       	brne	.+2      	; 0x157e <_Z10SoftPWMSetahh+0x4c>
    157c:	3f c0       	rjmp	.+126    	; 0x15fc <_Z10SoftPWMSetahh+0xca>
    157e:	99 27       	eor	r25, r25
    1580:	87 fd       	sbrc	r24, 7
    1582:	90 95       	com	r25
    1584:	dc 01       	movw	r26, r24
    1586:	23 e0       	ldi	r18, 0x03	; 3
    1588:	aa 0f       	add	r26, r26
    158a:	bb 1f       	adc	r27, r27
    158c:	2a 95       	dec	r18
    158e:	e1 f7       	brne	.-8      	; 0x1588 <_Z10SoftPWMSetahh+0x56>
    1590:	a8 0f       	add	r26, r24
    1592:	b9 1f       	adc	r27, r25
    1594:	a9 5e       	subi	r26, 0xE9	; 233
    1596:	bc 4f       	sbci	r27, 0xFC	; 252
    1598:	1c 93       	st	X, r17
    159a:	80 91 16 03 	lds	r24, 0x0316
    159e:	11 96       	adiw	r26, 0x01	; 1
    15a0:	8c 93       	st	X, r24
    15a2:	11 97       	sbiw	r26, 0x01	; 1
    15a4:	21 2f       	mov	r18, r17
    15a6:	33 27       	eor	r19, r19
    15a8:	27 fd       	sbrc	r18, 7
    15aa:	30 95       	com	r19
    15ac:	f9 01       	movw	r30, r18
    15ae:	ea 57       	subi	r30, 0x7A	; 122
    15b0:	ff 4f       	sbci	r31, 0xFF	; 255
    15b2:	e4 91       	lpm	r30, Z+
    15b4:	f0 e0       	ldi	r31, 0x00	; 0
    15b6:	ee 0f       	add	r30, r30
    15b8:	ff 1f       	adc	r31, r31
    15ba:	ee 58       	subi	r30, 0x8E	; 142
    15bc:	ff 4f       	sbci	r31, 0xFF	; 255
    15be:	45 91       	lpm	r20, Z+
    15c0:	54 91       	lpm	r21, Z+
    15c2:	12 96       	adiw	r26, 0x02	; 2
    15c4:	4c 93       	st	X, r20
    15c6:	12 97       	sbiw	r26, 0x02	; 2
    15c8:	13 96       	adiw	r26, 0x03	; 3
    15ca:	5c 93       	st	X, r21
    15cc:	13 97       	sbiw	r26, 0x03	; 3
    15ce:	26 56       	subi	r18, 0x66	; 102
    15d0:	3f 4f       	sbci	r19, 0xFF	; 255
    15d2:	f9 01       	movw	r30, r18
    15d4:	24 91       	lpm	r18, Z+
    15d6:	14 96       	adiw	r26, 0x04	; 4
    15d8:	2c 93       	st	X, r18
    15da:	14 97       	sbiw	r26, 0x04	; 4
    15dc:	15 96       	adiw	r26, 0x05	; 5
    15de:	6c 93       	st	X, r22
    15e0:	15 97       	sbiw	r26, 0x05	; 5
    15e2:	88 23       	and	r24, r24
    15e4:	19 f4       	brne	.+6      	; 0x15ec <_Z10SoftPWMSetahh+0xba>
    15e6:	81 2f       	mov	r24, r17
    15e8:	60 e0       	ldi	r22, 0x00	; 0
    15ea:	02 c0       	rjmp	.+4      	; 0x15f0 <_Z10SoftPWMSetahh+0xbe>
    15ec:	81 2f       	mov	r24, r17
    15ee:	61 e0       	ldi	r22, 0x01	; 1
    15f0:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
    15f4:	81 2f       	mov	r24, r17
    15f6:	61 e0       	ldi	r22, 0x01	; 1
    15f8:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <pinMode>
    15fc:	1f 91       	pop	r17
    15fe:	08 95       	ret

00001600 <_Z17SoftPWMSetPercentahh>:
    1600:	e8 2f       	mov	r30, r24
    1602:	8f ef       	ldi	r24, 0xFF	; 255
    1604:	68 9f       	mul	r22, r24
    1606:	b0 01       	movw	r22, r0
    1608:	11 24       	eor	r1, r1
    160a:	cb 01       	movw	r24, r22
    160c:	64 e6       	ldi	r22, 0x64	; 100
    160e:	70 e0       	ldi	r23, 0x00	; 0
    1610:	0e 94 24 25 	call	0x4a48	; 0x4a48 <__udivmodhi4>
    1614:	8e 2f       	mov	r24, r30
    1616:	0e 94 99 0a 	call	0x1532	; 0x1532 <_Z10SoftPWMSetahh>
    161a:	08 95       	ret

0000161c <_Z10SoftPWMEnda>:
    161c:	0f 93       	push	r16
    161e:	1f 93       	push	r17
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	18 2f       	mov	r17, r24
    1626:	c7 e1       	ldi	r28, 0x17	; 23
    1628:	d3 e0       	ldi	r29, 0x03	; 3
    162a:	0f ef       	ldi	r16, 0xFF	; 255
    162c:	88 81       	ld	r24, Y
    162e:	17 ff       	sbrs	r17, 7
    1630:	03 c0       	rjmp	.+6      	; 0x1638 <_Z10SoftPWMEnda+0x1c>
    1632:	87 ff       	sbrs	r24, 7
    1634:	03 c0       	rjmp	.+6      	; 0x163c <_Z10SoftPWMEnda+0x20>
    1636:	0b c0       	rjmp	.+22     	; 0x164e <_Z10SoftPWMEnda+0x32>
    1638:	81 17       	cp	r24, r17
    163a:	49 f4       	brne	.+18     	; 0x164e <_Z10SoftPWMEnda+0x32>
    163c:	88 81       	ld	r24, Y
    163e:	61 e0       	ldi	r22, 0x01	; 1
    1640:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
    1644:	88 81       	ld	r24, Y
    1646:	60 e0       	ldi	r22, 0x00	; 0
    1648:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <pinMode>
    164c:	08 83       	st	Y, r16
    164e:	29 96       	adiw	r28, 0x09	; 9
    1650:	83 e0       	ldi	r24, 0x03	; 3
    1652:	c9 32       	cpi	r28, 0x29	; 41
    1654:	d8 07       	cpc	r29, r24
    1656:	51 f7       	brne	.-44     	; 0x162c <_Z10SoftPWMEnda+0x10>
    1658:	df 91       	pop	r29
    165a:	cf 91       	pop	r28
    165c:	1f 91       	pop	r17
    165e:	0f 91       	pop	r16
    1660:	08 95       	ret

00001662 <_Z18SoftPWMSetFadeTimeajj>:
    1662:	2f 92       	push	r2
    1664:	3f 92       	push	r3
    1666:	4f 92       	push	r4
    1668:	5f 92       	push	r5
    166a:	6f 92       	push	r6
    166c:	7f 92       	push	r7
    166e:	8f 92       	push	r8
    1670:	9f 92       	push	r9
    1672:	af 92       	push	r10
    1674:	bf 92       	push	r11
    1676:	cf 92       	push	r12
    1678:	df 92       	push	r13
    167a:	ef 92       	push	r14
    167c:	ff 92       	push	r15
    167e:	1f 93       	push	r17
    1680:	df 93       	push	r29
    1682:	cf 93       	push	r28
    1684:	00 d0       	rcall	.+0      	; 0x1686 <_Z18SoftPWMSetFadeTimeajj+0x24>
    1686:	00 d0       	rcall	.+0      	; 0x1688 <_Z18SoftPWMSetFadeTimeajj+0x26>
    1688:	cd b7       	in	r28, 0x3d	; 61
    168a:	de b7       	in	r29, 0x3e	; 62
    168c:	18 2f       	mov	r17, r24
    168e:	4b 01       	movw	r8, r22
    1690:	5a 01       	movw	r10, r20
    1692:	27 e1       	ldi	r18, 0x17	; 23
    1694:	33 e0       	ldi	r19, 0x03	; 3
    1696:	2a 01       	movw	r4, r20
    1698:	66 24       	eor	r6, r6
    169a:	77 24       	eor	r7, r7
    169c:	40 ef       	ldi	r20, 0xF0	; 240
    169e:	c4 2e       	mov	r12, r20
    16a0:	4f e0       	ldi	r20, 0x0F	; 15
    16a2:	d4 2e       	mov	r13, r20
    16a4:	e1 2c       	mov	r14, r1
    16a6:	f1 2c       	mov	r15, r1
    16a8:	cb 01       	movw	r24, r22
    16aa:	a0 e0       	ldi	r26, 0x00	; 0
    16ac:	b0 e0       	ldi	r27, 0x00	; 0
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	9a 83       	std	Y+2, r25	; 0x02
    16b2:	ab 83       	std	Y+3, r26	; 0x03
    16b4:	bc 83       	std	Y+4, r27	; 0x04
    16b6:	19 01       	movw	r2, r18
    16b8:	d1 01       	movw	r26, r2
    16ba:	8c 91       	ld	r24, X
    16bc:	17 ff       	sbrs	r17, 7
    16be:	03 c0       	rjmp	.+6      	; 0x16c6 <_Z18SoftPWMSetFadeTimeajj+0x64>
    16c0:	87 ff       	sbrs	r24, 7
    16c2:	03 c0       	rjmp	.+6      	; 0x16ca <_Z18SoftPWMSetFadeTimeajj+0x68>
    16c4:	26 c0       	rjmp	.+76     	; 0x1712 <_Z18SoftPWMSetFadeTimeajj+0xb0>
    16c6:	81 17       	cp	r24, r17
    16c8:	21 f5       	brne	.+72     	; 0x1712 <_Z18SoftPWMSetFadeTimeajj+0xb0>
    16ca:	81 14       	cp	r8, r1
    16cc:	91 04       	cpc	r9, r1
    16ce:	51 f0       	breq	.+20     	; 0x16e4 <_Z18SoftPWMSetFadeTimeajj+0x82>
    16d0:	c7 01       	movw	r24, r14
    16d2:	b6 01       	movw	r22, r12
    16d4:	29 81       	ldd	r18, Y+1	; 0x01
    16d6:	3a 81       	ldd	r19, Y+2	; 0x02
    16d8:	4b 81       	ldd	r20, Y+3	; 0x03
    16da:	5c 81       	ldd	r21, Y+4	; 0x04
    16dc:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__udivmodsi4>
    16e0:	c9 01       	movw	r24, r18
    16e2:	02 c0       	rjmp	.+4      	; 0x16e8 <_Z18SoftPWMSetFadeTimeajj+0x86>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	f1 01       	movw	r30, r2
    16ea:	87 83       	std	Z+7, r24	; 0x07
    16ec:	a1 14       	cp	r10, r1
    16ee:	b1 04       	cpc	r11, r1
    16f0:	41 f0       	breq	.+16     	; 0x1702 <_Z18SoftPWMSetFadeTimeajj+0xa0>
    16f2:	c7 01       	movw	r24, r14
    16f4:	b6 01       	movw	r22, r12
    16f6:	a3 01       	movw	r20, r6
    16f8:	92 01       	movw	r18, r4
    16fa:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__udivmodsi4>
    16fe:	c9 01       	movw	r24, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <_Z18SoftPWMSetFadeTimeajj+0xa4>
    1702:	80 e0       	ldi	r24, 0x00	; 0
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	d1 01       	movw	r26, r2
    1708:	18 96       	adiw	r26, 0x08	; 8
    170a:	8c 93       	st	X, r24
    170c:	18 97       	sbiw	r26, 0x08	; 8
    170e:	17 ff       	sbrs	r17, 7
    1710:	09 c0       	rjmp	.+18     	; 0x1724 <_Z18SoftPWMSetFadeTimeajj+0xc2>
    1712:	e9 e0       	ldi	r30, 0x09	; 9
    1714:	f0 e0       	ldi	r31, 0x00	; 0
    1716:	2e 0e       	add	r2, r30
    1718:	3f 1e       	adc	r3, r31
    171a:	f9 e2       	ldi	r31, 0x29	; 41
    171c:	2f 16       	cp	r2, r31
    171e:	f3 e0       	ldi	r31, 0x03	; 3
    1720:	3f 06       	cpc	r3, r31
    1722:	51 f6       	brne	.-108    	; 0x16b8 <_Z18SoftPWMSetFadeTimeajj+0x56>
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	cf 91       	pop	r28
    172e:	df 91       	pop	r29
    1730:	1f 91       	pop	r17
    1732:	ff 90       	pop	r15
    1734:	ef 90       	pop	r14
    1736:	df 90       	pop	r13
    1738:	cf 90       	pop	r12
    173a:	bf 90       	pop	r11
    173c:	af 90       	pop	r10
    173e:	9f 90       	pop	r9
    1740:	8f 90       	pop	r8
    1742:	7f 90       	pop	r7
    1744:	6f 90       	pop	r6
    1746:	5f 90       	pop	r5
    1748:	4f 90       	pop	r4
    174a:	3f 90       	pop	r3
    174c:	2f 90       	pop	r2
    174e:	08 95       	ret

00001750 <_ZN12StepperMotorC1Ehhhhh>:
    1750:	ef 92       	push	r14
    1752:	0f 93       	push	r16
    1754:	cf 93       	push	r28
    1756:	df 93       	push	r29
    1758:	ec 01       	movw	r28, r24
    175a:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN12AccelStepperC1Ehhhhh>
    175e:	8a e3       	ldi	r24, 0x3A	; 58
    1760:	91 e0       	ldi	r25, 0x01	; 1
    1762:	99 83       	std	Y+1, r25	; 0x01
    1764:	88 83       	st	Y, r24
    1766:	df 91       	pop	r29
    1768:	cf 91       	pop	r28
    176a:	0f 91       	pop	r16
    176c:	ef 90       	pop	r14
    176e:	08 95       	ret

00001770 <_ZN12StepperMotor12advanceFrameEi>:
    1770:	ef 92       	push	r14
    1772:	ff 92       	push	r15
    1774:	0f 93       	push	r16
    1776:	1f 93       	push	r17
    1778:	cf 93       	push	r28
    177a:	df 93       	push	r29
    177c:	7c 01       	movw	r14, r24
    177e:	eb 01       	movw	r28, r22
    1780:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN12AccelStepper15currentPositionEv>
    1784:	ab 01       	movw	r20, r22
    1786:	bc 01       	movw	r22, r24
    1788:	8e 01       	movw	r16, r28
    178a:	22 27       	eor	r18, r18
    178c:	17 fd       	sbrc	r17, 7
    178e:	20 95       	com	r18
    1790:	32 2f       	mov	r19, r18
    1792:	40 0f       	add	r20, r16
    1794:	51 1f       	adc	r21, r17
    1796:	62 1f       	adc	r22, r18
    1798:	73 1f       	adc	r23, r19
    179a:	c7 01       	movw	r24, r14
    179c:	0e 94 91 03 	call	0x722	; 0x722 <_ZN12AccelStepper6moveToEl>
    17a0:	df 91       	pop	r29
    17a2:	cf 91       	pop	r28
    17a4:	1f 91       	pop	r17
    17a6:	0f 91       	pop	r16
    17a8:	ff 90       	pop	r15
    17aa:	ef 90       	pop	r14
    17ac:	08 95       	ret

000017ae <_ZN12StepperMotor12reverseFrameEi>:
    17ae:	cf 93       	push	r28
    17b0:	df 93       	push	r29
    17b2:	ec 01       	movw	r28, r24
    17b4:	88 27       	eor	r24, r24
    17b6:	77 fd       	sbrc	r23, 7
    17b8:	80 95       	com	r24
    17ba:	98 2f       	mov	r25, r24
    17bc:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    17c0:	ab 01       	movw	r20, r22
    17c2:	bc 01       	movw	r22, r24
    17c4:	ce 01       	movw	r24, r28
    17c6:	0e 94 18 03 	call	0x630	; 0x630 <_ZN12AccelStepper8setSpeedEf>
    17ca:	df 91       	pop	r29
    17cc:	cf 91       	pop	r28
    17ce:	08 95       	ret

000017d0 <setup>:
    17d0:	8f 92       	push	r8
    17d2:	af 92       	push	r10
    17d4:	cf 92       	push	r12
    17d6:	df 92       	push	r13
    17d8:	ef 92       	push	r14
    17da:	ff 92       	push	r15
    17dc:	0f 93       	push	r16
    17de:	1f 93       	push	r17
    17e0:	cf 93       	push	r28
    17e2:	df 93       	push	r29
    17e4:	c9 ec       	ldi	r28, 0xC9	; 201
    17e6:	d3 e0       	ldi	r29, 0x03	; 3
    17e8:	ce 01       	movw	r24, r28
    17ea:	40 e8       	ldi	r20, 0x80	; 128
    17ec:	55 e2       	ldi	r21, 0x25	; 37
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	70 e0       	ldi	r23, 0x00	; 0
    17f2:	0e 94 12 24 	call	0x4824	; 0x4824 <_ZN14HardwareSerial5beginEm>
    17f6:	64 e6       	ldi	r22, 0x64	; 100
    17f8:	70 e0       	ldi	r23, 0x00	; 0
    17fa:	80 e0       	ldi	r24, 0x00	; 0
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <delay>
    1802:	ce 01       	movw	r24, r28
    1804:	66 e4       	ldi	r22, 0x46	; 70
    1806:	71 e0       	ldi	r23, 0x01	; 1
    1808:	0e 94 70 20 	call	0x40e0	; 0x40e0 <_ZN5Print7printlnEPKc>
    180c:	82 e0       	ldi	r24, 0x02	; 2
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <_Znwj>
    1814:	18 2f       	mov	r17, r24
    1816:	f9 2e       	mov	r15, r25
    1818:	6c e0       	ldi	r22, 0x0C	; 12
    181a:	4b e0       	ldi	r20, 0x0B	; 11
    181c:	25 e0       	ldi	r18, 0x05	; 5
    181e:	04 e0       	ldi	r16, 0x04	; 4
    1820:	f3 e0       	ldi	r31, 0x03	; 3
    1822:	ef 2e       	mov	r14, r31
    1824:	e2 e0       	ldi	r30, 0x02	; 2
    1826:	ce 2e       	mov	r12, r30
    1828:	70 e1       	ldi	r23, 0x10	; 16
    182a:	a7 2e       	mov	r10, r23
    182c:	52 e0       	ldi	r21, 0x02	; 2
    182e:	85 2e       	mov	r8, r21
    1830:	0e 94 a0 04 	call	0x940	; 0x940 <_ZN3LCDC1Ehhhhhhhh>
    1834:	10 93 2d 03 	sts	0x032D, r17
    1838:	f0 92 2e 03 	sts	0x032E, r15
    183c:	64 e6       	ldi	r22, 0x64	; 100
    183e:	70 e0       	ldi	r23, 0x00	; 0
    1840:	80 e0       	ldi	r24, 0x00	; 0
    1842:	90 e0       	ldi	r25, 0x00	; 0
    1844:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <delay>
    1848:	ce 01       	movw	r24, r28
    184a:	65 e5       	ldi	r22, 0x55	; 85
    184c:	71 e0       	ldi	r23, 0x01	; 1
    184e:	0e 94 70 20 	call	0x40e0	; 0x40e0 <_ZN5Print7printlnEPKc>
    1852:	0e 94 9c 04 	call	0x938	; 0x938 <_Z12DCMotor_intiv>
    1856:	64 e6       	ldi	r22, 0x64	; 100
    1858:	70 e0       	ldi	r23, 0x00	; 0
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <delay>
    1862:	ce 01       	movw	r24, r28
    1864:	64 e6       	ldi	r22, 0x64	; 100
    1866:	71 e0       	ldi	r23, 0x01	; 1
    1868:	0e 94 70 20 	call	0x40e0	; 0x40e0 <_ZN5Print7printlnEPKc>
    186c:	84 e0       	ldi	r24, 0x04	; 4
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <_Znwj>
    1874:	8c 01       	movw	r16, r24
    1876:	61 e1       	ldi	r22, 0x11	; 17
    1878:	70 e0       	ldi	r23, 0x00	; 0
    187a:	4e e0       	ldi	r20, 0x0E	; 14
    187c:	50 e0       	ldi	r21, 0x00	; 0
    187e:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN7DCMotorC1Eii>
    1882:	00 93 2f 03 	sts	0x032F, r16
    1886:	10 93 30 03 	sts	0x0330, r17
    188a:	84 e0       	ldi	r24, 0x04	; 4
    188c:	90 e0       	ldi	r25, 0x00	; 0
    188e:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <_Znwj>
    1892:	8c 01       	movw	r16, r24
    1894:	62 e1       	ldi	r22, 0x12	; 18
    1896:	70 e0       	ldi	r23, 0x00	; 0
    1898:	43 e1       	ldi	r20, 0x13	; 19
    189a:	50 e0       	ldi	r21, 0x00	; 0
    189c:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN7DCMotorC1Eii>
    18a0:	00 93 31 03 	sts	0x0331, r16
    18a4:	10 93 32 03 	sts	0x0332, r17
    18a8:	64 e6       	ldi	r22, 0x64	; 100
    18aa:	70 e0       	ldi	r23, 0x00	; 0
    18ac:	80 e0       	ldi	r24, 0x00	; 0
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <delay>
    18b4:	ce 01       	movw	r24, r28
    18b6:	68 e7       	ldi	r22, 0x78	; 120
    18b8:	71 e0       	ldi	r23, 0x01	; 1
    18ba:	0e 94 70 20 	call	0x40e0	; 0x40e0 <_ZN5Print7printlnEPKc>
    18be:	87 e2       	ldi	r24, 0x27	; 39
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <_Znwj>
    18c6:	f8 2e       	mov	r15, r24
    18c8:	19 2f       	mov	r17, r25
    18ca:	64 e0       	ldi	r22, 0x04	; 4
    18cc:	48 e0       	ldi	r20, 0x08	; 8
    18ce:	29 e0       	ldi	r18, 0x09	; 9
    18d0:	06 e0       	ldi	r16, 0x06	; 6
    18d2:	37 e0       	ldi	r19, 0x07	; 7
    18d4:	e3 2e       	mov	r14, r19
    18d6:	0e 94 a8 0b 	call	0x1750	; 0x1750 <_ZN12StepperMotorC1Ehhhhh>
    18da:	f0 92 33 03 	sts	0x0333, r15
    18de:	10 93 34 03 	sts	0x0334, r17
    18e2:	8f 2d       	mov	r24, r15
    18e4:	91 2f       	mov	r25, r17
    18e6:	40 e0       	ldi	r20, 0x00	; 0
    18e8:	50 e0       	ldi	r21, 0x00	; 0
    18ea:	6a ef       	ldi	r22, 0xFA	; 250
    18ec:	73 e4       	ldi	r23, 0x43	; 67
    18ee:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN12AccelStepper11setMaxSpeedEf>
    18f2:	80 91 33 03 	lds	r24, 0x0333
    18f6:	90 91 34 03 	lds	r25, 0x0334
    18fa:	40 e0       	ldi	r20, 0x00	; 0
    18fc:	50 e0       	ldi	r21, 0x00	; 0
    18fe:	68 e4       	ldi	r22, 0x48	; 72
    1900:	73 e4       	ldi	r23, 0x43	; 67
    1902:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN12AccelStepper15setAccelerationEf>
    1906:	64 e6       	ldi	r22, 0x64	; 100
    1908:	70 e0       	ldi	r23, 0x00	; 0
    190a:	80 e0       	ldi	r24, 0x00	; 0
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <delay>
    1912:	ce 01       	movw	r24, r28
    1914:	61 e9       	ldi	r22, 0x91	; 145
    1916:	71 e0       	ldi	r23, 0x01	; 1
    1918:	0e 94 70 20 	call	0x40e0	; 0x40e0 <_ZN5Print7printlnEPKc>
    191c:	82 e2       	ldi	r24, 0x22	; 34
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <_Znwj>
    1924:	8c 01       	movw	r16, r24
    1926:	0e 94 9d 08 	call	0x113a	; 0x113a <_ZN12PDControllerC1Ev>
    192a:	10 93 2a 03 	sts	0x032A, r17
    192e:	00 93 29 03 	sts	0x0329, r16
    1932:	0f 2e       	mov	r0, r31
    1934:	f0 e0       	ldi	r31, 0x00	; 0
    1936:	cf 2e       	mov	r12, r31
    1938:	f0 e0       	ldi	r31, 0x00	; 0
    193a:	df 2e       	mov	r13, r31
    193c:	f0 e7       	ldi	r31, 0x70	; 112
    193e:	ef 2e       	mov	r14, r31
    1940:	f2 e4       	ldi	r31, 0x42	; 66
    1942:	ff 2e       	mov	r15, r31
    1944:	f0 2d       	mov	r31, r0
    1946:	f8 01       	movw	r30, r16
    1948:	c0 86       	std	Z+8, r12	; 0x08
    194a:	d1 86       	std	Z+9, r13	; 0x09
    194c:	e2 86       	std	Z+10, r14	; 0x0a
    194e:	f3 86       	std	Z+11, r15	; 0x0b
    1950:	c8 01       	movw	r24, r16
    1952:	40 e0       	ldi	r20, 0x00	; 0
    1954:	50 e0       	ldi	r21, 0x00	; 0
    1956:	60 ec       	ldi	r22, 0xC0	; 192
    1958:	70 e4       	ldi	r23, 0x40	; 64
    195a:	0a e0       	ldi	r16, 0x0A	; 10
    195c:	17 ed       	ldi	r17, 0xD7	; 215
    195e:	23 ea       	ldi	r18, 0xA3	; 163
    1960:	3b e3       	ldi	r19, 0x3B	; 59
    1962:	0e 94 1f 09 	call	0x123e	; 0x123e <_ZN12PDController10setTuningsEdd>
    1966:	80 91 29 03 	lds	r24, 0x0329
    196a:	90 91 2a 03 	lds	r25, 0x032A
    196e:	40 e0       	ldi	r20, 0x00	; 0
    1970:	50 e0       	ldi	r21, 0x00	; 0
    1972:	6f e7       	ldi	r22, 0x7F	; 127
    1974:	73 ec       	ldi	r23, 0xC3	; 195
    1976:	00 e0       	ldi	r16, 0x00	; 0
    1978:	10 e0       	ldi	r17, 0x00	; 0
    197a:	2f e7       	ldi	r18, 0x7F	; 127
    197c:	33 e4       	ldi	r19, 0x43	; 67
    197e:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN12PDController15setOutputLimitsEdd>
    1982:	64 e6       	ldi	r22, 0x64	; 100
    1984:	70 e0       	ldi	r23, 0x00	; 0
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	90 e0       	ldi	r25, 0x00	; 0
    198a:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <delay>
    198e:	ce 01       	movw	r24, r28
    1990:	65 ea       	ldi	r22, 0xA5	; 165
    1992:	71 e0       	ldi	r23, 0x01	; 1
    1994:	0e 94 70 20 	call	0x40e0	; 0x40e0 <_ZN5Print7printlnEPKc>
    1998:	82 e2       	ldi	r24, 0x22	; 34
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 78 1f 	call	0x3ef0	; 0x3ef0 <_Znwj>
    19a0:	8c 01       	movw	r16, r24
    19a2:	0e 94 9d 08 	call	0x113a	; 0x113a <_ZN12PDControllerC1Ev>
    19a6:	10 93 2c 03 	sts	0x032C, r17
    19aa:	00 93 2b 03 	sts	0x032B, r16
    19ae:	f8 01       	movw	r30, r16
    19b0:	c0 86       	std	Z+8, r12	; 0x08
    19b2:	d1 86       	std	Z+9, r13	; 0x09
    19b4:	e2 86       	std	Z+10, r14	; 0x0a
    19b6:	f3 86       	std	Z+11, r15	; 0x0b
    19b8:	c8 01       	movw	r24, r16
    19ba:	43 e3       	ldi	r20, 0x33	; 51
    19bc:	53 e3       	ldi	r21, 0x33	; 51
    19be:	63 e7       	ldi	r22, 0x73	; 115
    19c0:	70 e4       	ldi	r23, 0x40	; 64
    19c2:	0c ea       	ldi	r16, 0xAC	; 172
    19c4:	15 ec       	ldi	r17, 0xC5	; 197
    19c6:	27 e2       	ldi	r18, 0x27	; 39
    19c8:	37 e3       	ldi	r19, 0x37	; 55
    19ca:	0e 94 1f 09 	call	0x123e	; 0x123e <_ZN12PDController10setTuningsEdd>
    19ce:	80 91 2b 03 	lds	r24, 0x032B
    19d2:	90 91 2c 03 	lds	r25, 0x032C
    19d6:	40 e0       	ldi	r20, 0x00	; 0
    19d8:	50 e0       	ldi	r21, 0x00	; 0
    19da:	6f e7       	ldi	r22, 0x7F	; 127
    19dc:	73 ec       	ldi	r23, 0xC3	; 195
    19de:	00 e0       	ldi	r16, 0x00	; 0
    19e0:	10 e0       	ldi	r17, 0x00	; 0
    19e2:	2f e7       	ldi	r18, 0x7F	; 127
    19e4:	33 e4       	ldi	r19, 0x43	; 67
    19e6:	0e 94 5d 09 	call	0x12ba	; 0x12ba <_ZN12PDController15setOutputLimitsEdd>
    19ea:	64 e6       	ldi	r22, 0x64	; 100
    19ec:	70 e0       	ldi	r23, 0x00	; 0
    19ee:	80 e0       	ldi	r24, 0x00	; 0
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <delay>
    19f6:	ce 01       	movw	r24, r28
    19f8:	6a eb       	ldi	r22, 0xBA	; 186
    19fa:	71 e0       	ldi	r23, 0x01	; 1
    19fc:	0e 94 70 20 	call	0x40e0	; 0x40e0 <_ZN5Print7printlnEPKc>
    1a00:	0e 94 ac 09 	call	0x1358	; 0x1358 <_Z17PDController_initv>
    1a04:	64 e6       	ldi	r22, 0x64	; 100
    1a06:	70 e0       	ldi	r23, 0x00	; 0
    1a08:	80 e0       	ldi	r24, 0x00	; 0
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <delay>
    1a10:	df 91       	pop	r29
    1a12:	cf 91       	pop	r28
    1a14:	1f 91       	pop	r17
    1a16:	0f 91       	pop	r16
    1a18:	ff 90       	pop	r15
    1a1a:	ef 90       	pop	r14
    1a1c:	df 90       	pop	r13
    1a1e:	cf 90       	pop	r12
    1a20:	af 90       	pop	r10
    1a22:	8f 90       	pop	r8
    1a24:	08 95       	ret

00001a26 <__vector_11>:
    1a26:	1f 92       	push	r1
    1a28:	0f 92       	push	r0
    1a2a:	0f b6       	in	r0, 0x3f	; 63
    1a2c:	0f 92       	push	r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	2f 93       	push	r18
    1a32:	3f 93       	push	r19
    1a34:	4f 93       	push	r20
    1a36:	5f 93       	push	r21
    1a38:	6f 93       	push	r22
    1a3a:	7f 93       	push	r23
    1a3c:	8f 93       	push	r24
    1a3e:	9f 93       	push	r25
    1a40:	af 93       	push	r26
    1a42:	bf 93       	push	r27
    1a44:	cf 93       	push	r28
    1a46:	df 93       	push	r29
    1a48:	ef 93       	push	r30
    1a4a:	ff 93       	push	r31
    1a4c:	c0 91 29 03 	lds	r28, 0x0329
    1a50:	d0 91 2a 03 	lds	r29, 0x032A
    1a54:	81 e0       	ldi	r24, 0x01	; 1
    1a56:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <analogRead>
    1a5a:	9c 01       	movw	r18, r24
    1a5c:	b9 01       	movw	r22, r18
    1a5e:	88 27       	eor	r24, r24
    1a60:	77 fd       	sbrc	r23, 7
    1a62:	80 95       	com	r24
    1a64:	98 2f       	mov	r25, r24
    1a66:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    1a6a:	ab 01       	movw	r20, r22
    1a6c:	bc 01       	movw	r22, r24
    1a6e:	ce 01       	movw	r24, r28
    1a70:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN12PDController7computeEd>
    1a74:	c0 91 2b 03 	lds	r28, 0x032B
    1a78:	d0 91 2c 03 	lds	r29, 0x032C
    1a7c:	82 e0       	ldi	r24, 0x02	; 2
    1a7e:	0e 94 4a 15 	call	0x2a94	; 0x2a94 <analogRead>
    1a82:	9c 01       	movw	r18, r24
    1a84:	b9 01       	movw	r22, r18
    1a86:	88 27       	eor	r24, r24
    1a88:	77 fd       	sbrc	r23, 7
    1a8a:	80 95       	com	r24
    1a8c:	98 2f       	mov	r25, r24
    1a8e:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    1a92:	ab 01       	movw	r20, r22
    1a94:	bc 01       	movw	r22, r24
    1a96:	ce 01       	movw	r24, r28
    1a98:	0e 94 a3 08 	call	0x1146	; 0x1146 <_ZN12PDController7computeEd>
    1a9c:	c0 91 2f 03 	lds	r28, 0x032F
    1aa0:	d0 91 30 03 	lds	r29, 0x0330
    1aa4:	e0 91 29 03 	lds	r30, 0x0329
    1aa8:	f0 91 2a 03 	lds	r31, 0x032A
    1aac:	64 81       	ldd	r22, Z+4	; 0x04
    1aae:	75 81       	ldd	r23, Z+5	; 0x05
    1ab0:	86 81       	ldd	r24, Z+6	; 0x06
    1ab2:	97 81       	ldd	r25, Z+7	; 0x07
    1ab4:	90 58       	subi	r25, 0x80	; 128
    1ab6:	0e 94 93 12 	call	0x2526	; 0x2526 <__fixsfsi>
    1aba:	9b 01       	movw	r18, r22
    1abc:	ac 01       	movw	r20, r24
    1abe:	ce 01       	movw	r24, r28
    1ac0:	b9 01       	movw	r22, r18
    1ac2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN7DCMotor13setMotorspeedEi>
    1ac6:	c0 91 31 03 	lds	r28, 0x0331
    1aca:	d0 91 32 03 	lds	r29, 0x0332
    1ace:	e0 91 2b 03 	lds	r30, 0x032B
    1ad2:	f0 91 2c 03 	lds	r31, 0x032C
    1ad6:	64 81       	ldd	r22, Z+4	; 0x04
    1ad8:	75 81       	ldd	r23, Z+5	; 0x05
    1ada:	86 81       	ldd	r24, Z+6	; 0x06
    1adc:	97 81       	ldd	r25, Z+7	; 0x07
    1ade:	0e 94 93 12 	call	0x2526	; 0x2526 <__fixsfsi>
    1ae2:	9b 01       	movw	r18, r22
    1ae4:	ac 01       	movw	r20, r24
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	b9 01       	movw	r22, r18
    1aea:	0e 94 7e 04 	call	0x8fc	; 0x8fc <_ZN7DCMotor13setMotorspeedEi>
    1aee:	ff 91       	pop	r31
    1af0:	ef 91       	pop	r30
    1af2:	df 91       	pop	r29
    1af4:	cf 91       	pop	r28
    1af6:	bf 91       	pop	r27
    1af8:	af 91       	pop	r26
    1afa:	9f 91       	pop	r25
    1afc:	8f 91       	pop	r24
    1afe:	7f 91       	pop	r23
    1b00:	6f 91       	pop	r22
    1b02:	5f 91       	pop	r21
    1b04:	4f 91       	pop	r20
    1b06:	3f 91       	pop	r19
    1b08:	2f 91       	pop	r18
    1b0a:	0f 90       	pop	r0
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	0f 90       	pop	r0
    1b10:	1f 90       	pop	r1
    1b12:	18 95       	reti

00001b14 <_Z10setFilmPosv>:
    1b14:	ef 92       	push	r14
    1b16:	ff 92       	push	r15
    1b18:	0f 93       	push	r16
    1b1a:	1f 93       	push	r17
    1b1c:	df 93       	push	r29
    1b1e:	cf 93       	push	r28
    1b20:	cd b7       	in	r28, 0x3d	; 61
    1b22:	de b7       	in	r29, 0x3e	; 62
    1b24:	27 97       	sbiw	r28, 0x07	; 7
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	f8 94       	cli
    1b2a:	de bf       	out	0x3e, r29	; 62
    1b2c:	0f be       	out	0x3f, r0	; 63
    1b2e:	cd bf       	out	0x3d, r28	; 61
    1b30:	e0 90 2d 03 	lds	r14, 0x032D
    1b34:	f0 90 2e 03 	lds	r15, 0x032E
    1b38:	8e 01       	movw	r16, r28
    1b3a:	0f 5f       	subi	r16, 0xFF	; 255
    1b3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b3e:	c8 01       	movw	r24, r16
    1b40:	6e ec       	ldi	r22, 0xCE	; 206
    1b42:	71 e0       	ldi	r23, 0x01	; 1
    1b44:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZN6StringC1EPKc>
    1b48:	c7 01       	movw	r24, r14
    1b4a:	b8 01       	movw	r22, r16
    1b4c:	0e 94 dc 04 	call	0x9b8	; 0x9b8 <_ZN3LCD5traceE6String>
    1b50:	c8 01       	movw	r24, r16
    1b52:	0e 94 66 17 	call	0x2ecc	; 0x2ecc <_ZN6StringD1Ev>
    1b56:	80 91 33 03 	lds	r24, 0x0333
    1b5a:	90 91 34 03 	lds	r25, 0x0334
    1b5e:	6c e0       	ldi	r22, 0x0C	; 12
    1b60:	7e ef       	ldi	r23, 0xFE	; 254
    1b62:	0e 94 d7 0b 	call	0x17ae	; 0x17ae <_ZN12StepperMotor12reverseFrameEi>
    1b66:	80 91 33 03 	lds	r24, 0x0333
    1b6a:	90 91 34 03 	lds	r25, 0x0334
    1b6e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN12AccelStepper8runSpeedEv>
    1b72:	f9 cf       	rjmp	.-14     	; 0x1b66 <_Z10setFilmPosv+0x52>

00001b74 <_Z13emergencyStopv>:
    1b74:	08 95       	ret

00001b76 <main>:
    1b76:	0f 93       	push	r16
    1b78:	1f 93       	push	r17
    1b7a:	0e 94 78 16 	call	0x2cf0	; 0x2cf0 <init>
    1b7e:	0e 94 e8 0b 	call	0x17d0	; 0x17d0 <setup>
    1b82:	80 91 2d 03 	lds	r24, 0x032D
    1b86:	90 91 2e 03 	lds	r25, 0x032E
    1b8a:	60 e0       	ldi	r22, 0x00	; 0
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	40 e0       	ldi	r20, 0x00	; 0
    1b90:	50 e0       	ldi	r21, 0x00	; 0
    1b92:	20 e0       	ldi	r18, 0x00	; 0
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	00 e0       	ldi	r16, 0x00	; 0
    1b98:	10 e0       	ldi	r17, 0x00	; 0
    1b9a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <_ZN3LCD9updateLCDEiiii>
    1b9e:	80 91 33 03 	lds	r24, 0x0333
    1ba2:	90 91 34 03 	lds	r25, 0x0334
    1ba6:	60 e9       	ldi	r22, 0x90	; 144
    1ba8:	71 e0       	ldi	r23, 0x01	; 1
    1baa:	0e 94 b8 0b 	call	0x1770	; 0x1770 <_ZN12StepperMotor12advanceFrameEi>
    1bae:	80 91 33 03 	lds	r24, 0x0333
    1bb2:	90 91 34 03 	lds	r25, 0x0334
    1bb6:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN12AccelStepper3runEv>
    1bba:	88 23       	and	r24, r24
    1bbc:	c1 f7       	brne	.-16     	; 0x1bae <main+0x38>
    1bbe:	80 91 35 03 	lds	r24, 0x0335
    1bc2:	90 91 36 03 	lds	r25, 0x0336
    1bc6:	01 96       	adiw	r24, 0x01	; 1
    1bc8:	90 93 36 03 	sts	0x0336, r25
    1bcc:	80 93 35 03 	sts	0x0335, r24
    1bd0:	68 ee       	ldi	r22, 0xE8	; 232
    1bd2:	73 e0       	ldi	r23, 0x03	; 3
    1bd4:	80 e0       	ldi	r24, 0x00	; 0
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
    1bd8:	0e 94 47 16 	call	0x2c8e	; 0x2c8e <delay>
    1bdc:	60 91 35 03 	lds	r22, 0x0335
    1be0:	70 91 36 03 	lds	r23, 0x0336
    1be4:	80 91 2d 03 	lds	r24, 0x032D
    1be8:	90 91 2e 03 	lds	r25, 0x032E
    1bec:	d0 cf       	rjmp	.-96     	; 0x1b8e <main+0x18>

00001bee <__fixunssfsi>:
    1bee:	ef 92       	push	r14
    1bf0:	ff 92       	push	r15
    1bf2:	0f 93       	push	r16
    1bf4:	1f 93       	push	r17
    1bf6:	7b 01       	movw	r14, r22
    1bf8:	8c 01       	movw	r16, r24
    1bfa:	20 e0       	ldi	r18, 0x00	; 0
    1bfc:	30 e0       	ldi	r19, 0x00	; 0
    1bfe:	40 e0       	ldi	r20, 0x00	; 0
    1c00:	5f e4       	ldi	r21, 0x4F	; 79
    1c02:	0e 94 d3 11 	call	0x23a6	; 0x23a6 <__gesf2>
    1c06:	87 fd       	sbrc	r24, 7
    1c08:	11 c0       	rjmp	.+34     	; 0x1c2c <__fixunssfsi+0x3e>
    1c0a:	c8 01       	movw	r24, r16
    1c0c:	b7 01       	movw	r22, r14
    1c0e:	20 e0       	ldi	r18, 0x00	; 0
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	40 e0       	ldi	r20, 0x00	; 0
    1c14:	5f e4       	ldi	r21, 0x4F	; 79
    1c16:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__subsf3>
    1c1a:	0e 94 93 12 	call	0x2526	; 0x2526 <__fixsfsi>
    1c1e:	9b 01       	movw	r18, r22
    1c20:	ac 01       	movw	r20, r24
    1c22:	20 50       	subi	r18, 0x00	; 0
    1c24:	30 40       	sbci	r19, 0x00	; 0
    1c26:	40 40       	sbci	r20, 0x00	; 0
    1c28:	50 48       	sbci	r21, 0x80	; 128
    1c2a:	06 c0       	rjmp	.+12     	; 0x1c38 <__fixunssfsi+0x4a>
    1c2c:	c8 01       	movw	r24, r16
    1c2e:	b7 01       	movw	r22, r14
    1c30:	0e 94 93 12 	call	0x2526	; 0x2526 <__fixsfsi>
    1c34:	9b 01       	movw	r18, r22
    1c36:	ac 01       	movw	r20, r24
    1c38:	b9 01       	movw	r22, r18
    1c3a:	ca 01       	movw	r24, r20
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	ef 90       	pop	r14
    1c44:	08 95       	ret

00001c46 <_fpadd_parts>:
    1c46:	a0 e0       	ldi	r26, 0x00	; 0
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	e9 e2       	ldi	r30, 0x29	; 41
    1c4c:	fe e0       	ldi	r31, 0x0E	; 14
    1c4e:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <__prologue_saves__+0x8>
    1c52:	fc 01       	movw	r30, r24
    1c54:	ea 01       	movw	r28, r20
    1c56:	80 81       	ld	r24, Z
    1c58:	82 30       	cpi	r24, 0x02	; 2
    1c5a:	08 f4       	brcc	.+2      	; 0x1c5e <_fpadd_parts+0x18>
    1c5c:	38 c1       	rjmp	.+624    	; 0x1ece <_fpadd_parts+0x288>
    1c5e:	db 01       	movw	r26, r22
    1c60:	9c 91       	ld	r25, X
    1c62:	92 30       	cpi	r25, 0x02	; 2
    1c64:	08 f4       	brcc	.+2      	; 0x1c68 <_fpadd_parts+0x22>
    1c66:	30 c1       	rjmp	.+608    	; 0x1ec8 <_fpadd_parts+0x282>
    1c68:	84 30       	cpi	r24, 0x04	; 4
    1c6a:	59 f4       	brne	.+22     	; 0x1c82 <_fpadd_parts+0x3c>
    1c6c:	94 30       	cpi	r25, 0x04	; 4
    1c6e:	09 f0       	breq	.+2      	; 0x1c72 <_fpadd_parts+0x2c>
    1c70:	2e c1       	rjmp	.+604    	; 0x1ece <_fpadd_parts+0x288>
    1c72:	91 81       	ldd	r25, Z+1	; 0x01
    1c74:	11 96       	adiw	r26, 0x01	; 1
    1c76:	8c 91       	ld	r24, X
    1c78:	11 97       	sbiw	r26, 0x01	; 1
    1c7a:	98 17       	cp	r25, r24
    1c7c:	09 f0       	breq	.+2      	; 0x1c80 <_fpadd_parts+0x3a>
    1c7e:	21 c1       	rjmp	.+578    	; 0x1ec2 <_fpadd_parts+0x27c>
    1c80:	26 c1       	rjmp	.+588    	; 0x1ece <_fpadd_parts+0x288>
    1c82:	94 30       	cpi	r25, 0x04	; 4
    1c84:	09 f4       	brne	.+2      	; 0x1c88 <_fpadd_parts+0x42>
    1c86:	20 c1       	rjmp	.+576    	; 0x1ec8 <_fpadd_parts+0x282>
    1c88:	92 30       	cpi	r25, 0x02	; 2
    1c8a:	b1 f4       	brne	.+44     	; 0x1cb8 <_fpadd_parts+0x72>
    1c8c:	82 30       	cpi	r24, 0x02	; 2
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <_fpadd_parts+0x4c>
    1c90:	1e c1       	rjmp	.+572    	; 0x1ece <_fpadd_parts+0x288>
    1c92:	ca 01       	movw	r24, r20
    1c94:	af 01       	movw	r20, r30
    1c96:	28 e0       	ldi	r18, 0x08	; 8
    1c98:	da 01       	movw	r26, r20
    1c9a:	0d 90       	ld	r0, X+
    1c9c:	ad 01       	movw	r20, r26
    1c9e:	dc 01       	movw	r26, r24
    1ca0:	0d 92       	st	X+, r0
    1ca2:	cd 01       	movw	r24, r26
    1ca4:	21 50       	subi	r18, 0x01	; 1
    1ca6:	c1 f7       	brne	.-16     	; 0x1c98 <_fpadd_parts+0x52>
    1ca8:	db 01       	movw	r26, r22
    1caa:	11 96       	adiw	r26, 0x01	; 1
    1cac:	8c 91       	ld	r24, X
    1cae:	11 97       	sbiw	r26, 0x01	; 1
    1cb0:	91 81       	ldd	r25, Z+1	; 0x01
    1cb2:	89 23       	and	r24, r25
    1cb4:	89 83       	std	Y+1, r24	; 0x01
    1cb6:	0a c1       	rjmp	.+532    	; 0x1ecc <_fpadd_parts+0x286>
    1cb8:	82 30       	cpi	r24, 0x02	; 2
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <_fpadd_parts+0x78>
    1cbc:	05 c1       	rjmp	.+522    	; 0x1ec8 <_fpadd_parts+0x282>
    1cbe:	c2 80       	ldd	r12, Z+2	; 0x02
    1cc0:	d3 80       	ldd	r13, Z+3	; 0x03
    1cc2:	db 01       	movw	r26, r22
    1cc4:	12 96       	adiw	r26, 0x02	; 2
    1cc6:	6d 90       	ld	r6, X+
    1cc8:	7c 90       	ld	r7, X
    1cca:	13 97       	sbiw	r26, 0x03	; 3
    1ccc:	24 81       	ldd	r18, Z+4	; 0x04
    1cce:	35 81       	ldd	r19, Z+5	; 0x05
    1cd0:	46 81       	ldd	r20, Z+6	; 0x06
    1cd2:	57 81       	ldd	r21, Z+7	; 0x07
    1cd4:	14 96       	adiw	r26, 0x04	; 4
    1cd6:	ed 90       	ld	r14, X+
    1cd8:	fd 90       	ld	r15, X+
    1cda:	0d 91       	ld	r16, X+
    1cdc:	1c 91       	ld	r17, X
    1cde:	17 97       	sbiw	r26, 0x07	; 7
    1ce0:	c6 01       	movw	r24, r12
    1ce2:	86 19       	sub	r24, r6
    1ce4:	97 09       	sbc	r25, r7
    1ce6:	5c 01       	movw	r10, r24
    1ce8:	97 ff       	sbrs	r25, 7
    1cea:	04 c0       	rjmp	.+8      	; 0x1cf4 <_fpadd_parts+0xae>
    1cec:	aa 24       	eor	r10, r10
    1cee:	bb 24       	eor	r11, r11
    1cf0:	a8 1a       	sub	r10, r24
    1cf2:	b9 0a       	sbc	r11, r25
    1cf4:	b0 e2       	ldi	r27, 0x20	; 32
    1cf6:	ab 16       	cp	r10, r27
    1cf8:	b1 04       	cpc	r11, r1
    1cfa:	0c f0       	brlt	.+2      	; 0x1cfe <_fpadd_parts+0xb8>
    1cfc:	61 c0       	rjmp	.+194    	; 0x1dc0 <_fpadd_parts+0x17a>
    1cfe:	18 16       	cp	r1, r24
    1d00:	19 06       	cpc	r1, r25
    1d02:	6c f5       	brge	.+90     	; 0x1d5e <_fpadd_parts+0x118>
    1d04:	37 01       	movw	r6, r14
    1d06:	48 01       	movw	r8, r16
    1d08:	0a 2c       	mov	r0, r10
    1d0a:	04 c0       	rjmp	.+8      	; 0x1d14 <_fpadd_parts+0xce>
    1d0c:	96 94       	lsr	r9
    1d0e:	87 94       	ror	r8
    1d10:	77 94       	ror	r7
    1d12:	67 94       	ror	r6
    1d14:	0a 94       	dec	r0
    1d16:	d2 f7       	brpl	.-12     	; 0x1d0c <_fpadd_parts+0xc6>
    1d18:	81 e0       	ldi	r24, 0x01	; 1
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	a0 e0       	ldi	r26, 0x00	; 0
    1d1e:	b0 e0       	ldi	r27, 0x00	; 0
    1d20:	0a 2c       	mov	r0, r10
    1d22:	04 c0       	rjmp	.+8      	; 0x1d2c <_fpadd_parts+0xe6>
    1d24:	88 0f       	add	r24, r24
    1d26:	99 1f       	adc	r25, r25
    1d28:	aa 1f       	adc	r26, r26
    1d2a:	bb 1f       	adc	r27, r27
    1d2c:	0a 94       	dec	r0
    1d2e:	d2 f7       	brpl	.-12     	; 0x1d24 <_fpadd_parts+0xde>
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	a1 09       	sbc	r26, r1
    1d34:	b1 09       	sbc	r27, r1
    1d36:	8e 21       	and	r24, r14
    1d38:	9f 21       	and	r25, r15
    1d3a:	a0 23       	and	r26, r16
    1d3c:	b1 23       	and	r27, r17
    1d3e:	ee 24       	eor	r14, r14
    1d40:	ff 24       	eor	r15, r15
    1d42:	87 01       	movw	r16, r14
    1d44:	e3 94       	inc	r14
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	a1 05       	cpc	r26, r1
    1d4a:	b1 05       	cpc	r27, r1
    1d4c:	19 f4       	brne	.+6      	; 0x1d54 <_fpadd_parts+0x10e>
    1d4e:	ee 24       	eor	r14, r14
    1d50:	ff 24       	eor	r15, r15
    1d52:	87 01       	movw	r16, r14
    1d54:	e6 28       	or	r14, r6
    1d56:	f7 28       	or	r15, r7
    1d58:	08 29       	or	r16, r8
    1d5a:	19 29       	or	r17, r9
    1d5c:	3c c0       	rjmp	.+120    	; 0x1dd6 <_fpadd_parts+0x190>
    1d5e:	00 97       	sbiw	r24, 0x00	; 0
    1d60:	d1 f1       	breq	.+116    	; 0x1dd6 <_fpadd_parts+0x190>
    1d62:	ca 0c       	add	r12, r10
    1d64:	db 1c       	adc	r13, r11
    1d66:	39 01       	movw	r6, r18
    1d68:	4a 01       	movw	r8, r20
    1d6a:	0a 2c       	mov	r0, r10
    1d6c:	04 c0       	rjmp	.+8      	; 0x1d76 <_fpadd_parts+0x130>
    1d6e:	96 94       	lsr	r9
    1d70:	87 94       	ror	r8
    1d72:	77 94       	ror	r7
    1d74:	67 94       	ror	r6
    1d76:	0a 94       	dec	r0
    1d78:	d2 f7       	brpl	.-12     	; 0x1d6e <_fpadd_parts+0x128>
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	90 e0       	ldi	r25, 0x00	; 0
    1d7e:	a0 e0       	ldi	r26, 0x00	; 0
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	0a 2c       	mov	r0, r10
    1d84:	04 c0       	rjmp	.+8      	; 0x1d8e <_fpadd_parts+0x148>
    1d86:	88 0f       	add	r24, r24
    1d88:	99 1f       	adc	r25, r25
    1d8a:	aa 1f       	adc	r26, r26
    1d8c:	bb 1f       	adc	r27, r27
    1d8e:	0a 94       	dec	r0
    1d90:	d2 f7       	brpl	.-12     	; 0x1d86 <_fpadd_parts+0x140>
    1d92:	01 97       	sbiw	r24, 0x01	; 1
    1d94:	a1 09       	sbc	r26, r1
    1d96:	b1 09       	sbc	r27, r1
    1d98:	82 23       	and	r24, r18
    1d9a:	93 23       	and	r25, r19
    1d9c:	a4 23       	and	r26, r20
    1d9e:	b5 23       	and	r27, r21
    1da0:	21 e0       	ldi	r18, 0x01	; 1
    1da2:	30 e0       	ldi	r19, 0x00	; 0
    1da4:	40 e0       	ldi	r20, 0x00	; 0
    1da6:	50 e0       	ldi	r21, 0x00	; 0
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	a1 05       	cpc	r26, r1
    1dac:	b1 05       	cpc	r27, r1
    1dae:	19 f4       	brne	.+6      	; 0x1db6 <_fpadd_parts+0x170>
    1db0:	20 e0       	ldi	r18, 0x00	; 0
    1db2:	30 e0       	ldi	r19, 0x00	; 0
    1db4:	a9 01       	movw	r20, r18
    1db6:	26 29       	or	r18, r6
    1db8:	37 29       	or	r19, r7
    1dba:	48 29       	or	r20, r8
    1dbc:	59 29       	or	r21, r9
    1dbe:	0b c0       	rjmp	.+22     	; 0x1dd6 <_fpadd_parts+0x190>
    1dc0:	6c 14       	cp	r6, r12
    1dc2:	7d 04       	cpc	r7, r13
    1dc4:	24 f4       	brge	.+8      	; 0x1dce <_fpadd_parts+0x188>
    1dc6:	ee 24       	eor	r14, r14
    1dc8:	ff 24       	eor	r15, r15
    1dca:	87 01       	movw	r16, r14
    1dcc:	04 c0       	rjmp	.+8      	; 0x1dd6 <_fpadd_parts+0x190>
    1dce:	63 01       	movw	r12, r6
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	30 e0       	ldi	r19, 0x00	; 0
    1dd4:	a9 01       	movw	r20, r18
    1dd6:	81 81       	ldd	r24, Z+1	; 0x01
    1dd8:	fb 01       	movw	r30, r22
    1dda:	91 81       	ldd	r25, Z+1	; 0x01
    1ddc:	89 17       	cp	r24, r25
    1dde:	09 f4       	brne	.+2      	; 0x1de2 <_fpadd_parts+0x19c>
    1de0:	45 c0       	rjmp	.+138    	; 0x1e6c <_fpadd_parts+0x226>
    1de2:	88 23       	and	r24, r24
    1de4:	49 f0       	breq	.+18     	; 0x1df8 <_fpadd_parts+0x1b2>
    1de6:	d8 01       	movw	r26, r16
    1de8:	c7 01       	movw	r24, r14
    1dea:	82 1b       	sub	r24, r18
    1dec:	93 0b       	sbc	r25, r19
    1dee:	a4 0b       	sbc	r26, r20
    1df0:	b5 0b       	sbc	r27, r21
    1df2:	9c 01       	movw	r18, r24
    1df4:	ad 01       	movw	r20, r26
    1df6:	04 c0       	rjmp	.+8      	; 0x1e00 <_fpadd_parts+0x1ba>
    1df8:	2e 19       	sub	r18, r14
    1dfa:	3f 09       	sbc	r19, r15
    1dfc:	40 0b       	sbc	r20, r16
    1dfe:	51 0b       	sbc	r21, r17
    1e00:	57 fd       	sbrc	r21, 7
    1e02:	04 c0       	rjmp	.+8      	; 0x1e0c <_fpadd_parts+0x1c6>
    1e04:	19 82       	std	Y+1, r1	; 0x01
    1e06:	db 82       	std	Y+3, r13	; 0x03
    1e08:	ca 82       	std	Y+2, r12	; 0x02
    1e0a:	0b c0       	rjmp	.+22     	; 0x1e22 <_fpadd_parts+0x1dc>
    1e0c:	81 e0       	ldi	r24, 0x01	; 1
    1e0e:	89 83       	std	Y+1, r24	; 0x01
    1e10:	db 82       	std	Y+3, r13	; 0x03
    1e12:	ca 82       	std	Y+2, r12	; 0x02
    1e14:	50 95       	com	r21
    1e16:	40 95       	com	r20
    1e18:	30 95       	com	r19
    1e1a:	21 95       	neg	r18
    1e1c:	3f 4f       	sbci	r19, 0xFF	; 255
    1e1e:	4f 4f       	sbci	r20, 0xFF	; 255
    1e20:	5f 4f       	sbci	r21, 0xFF	; 255
    1e22:	2c 83       	std	Y+4, r18	; 0x04
    1e24:	3d 83       	std	Y+5, r19	; 0x05
    1e26:	4e 83       	std	Y+6, r20	; 0x06
    1e28:	5f 83       	std	Y+7, r21	; 0x07
    1e2a:	0d c0       	rjmp	.+26     	; 0x1e46 <_fpadd_parts+0x200>
    1e2c:	88 0f       	add	r24, r24
    1e2e:	99 1f       	adc	r25, r25
    1e30:	aa 1f       	adc	r26, r26
    1e32:	bb 1f       	adc	r27, r27
    1e34:	8c 83       	std	Y+4, r24	; 0x04
    1e36:	9d 83       	std	Y+5, r25	; 0x05
    1e38:	ae 83       	std	Y+6, r26	; 0x06
    1e3a:	bf 83       	std	Y+7, r27	; 0x07
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	9b 81       	ldd	r25, Y+3	; 0x03
    1e40:	01 97       	sbiw	r24, 0x01	; 1
    1e42:	9b 83       	std	Y+3, r25	; 0x03
    1e44:	8a 83       	std	Y+2, r24	; 0x02
    1e46:	8c 81       	ldd	r24, Y+4	; 0x04
    1e48:	9d 81       	ldd	r25, Y+5	; 0x05
    1e4a:	ae 81       	ldd	r26, Y+6	; 0x06
    1e4c:	bf 81       	ldd	r27, Y+7	; 0x07
    1e4e:	9c 01       	movw	r18, r24
    1e50:	ad 01       	movw	r20, r26
    1e52:	21 50       	subi	r18, 0x01	; 1
    1e54:	30 40       	sbci	r19, 0x00	; 0
    1e56:	40 40       	sbci	r20, 0x00	; 0
    1e58:	50 40       	sbci	r21, 0x00	; 0
    1e5a:	2f 3f       	cpi	r18, 0xFF	; 255
    1e5c:	ef ef       	ldi	r30, 0xFF	; 255
    1e5e:	3e 07       	cpc	r19, r30
    1e60:	ef ef       	ldi	r30, 0xFF	; 255
    1e62:	4e 07       	cpc	r20, r30
    1e64:	ef e3       	ldi	r30, 0x3F	; 63
    1e66:	5e 07       	cpc	r21, r30
    1e68:	08 f3       	brcs	.-62     	; 0x1e2c <_fpadd_parts+0x1e6>
    1e6a:	0b c0       	rjmp	.+22     	; 0x1e82 <_fpadd_parts+0x23c>
    1e6c:	89 83       	std	Y+1, r24	; 0x01
    1e6e:	db 82       	std	Y+3, r13	; 0x03
    1e70:	ca 82       	std	Y+2, r12	; 0x02
    1e72:	2e 0d       	add	r18, r14
    1e74:	3f 1d       	adc	r19, r15
    1e76:	40 1f       	adc	r20, r16
    1e78:	51 1f       	adc	r21, r17
    1e7a:	2c 83       	std	Y+4, r18	; 0x04
    1e7c:	3d 83       	std	Y+5, r19	; 0x05
    1e7e:	4e 83       	std	Y+6, r20	; 0x06
    1e80:	5f 83       	std	Y+7, r21	; 0x07
    1e82:	83 e0       	ldi	r24, 0x03	; 3
    1e84:	88 83       	st	Y, r24
    1e86:	2c 81       	ldd	r18, Y+4	; 0x04
    1e88:	3d 81       	ldd	r19, Y+5	; 0x05
    1e8a:	4e 81       	ldd	r20, Y+6	; 0x06
    1e8c:	5f 81       	ldd	r21, Y+7	; 0x07
    1e8e:	57 ff       	sbrs	r21, 7
    1e90:	1d c0       	rjmp	.+58     	; 0x1ecc <_fpadd_parts+0x286>
    1e92:	da 01       	movw	r26, r20
    1e94:	c9 01       	movw	r24, r18
    1e96:	81 70       	andi	r24, 0x01	; 1
    1e98:	90 70       	andi	r25, 0x00	; 0
    1e9a:	a0 70       	andi	r26, 0x00	; 0
    1e9c:	b0 70       	andi	r27, 0x00	; 0
    1e9e:	56 95       	lsr	r21
    1ea0:	47 95       	ror	r20
    1ea2:	37 95       	ror	r19
    1ea4:	27 95       	ror	r18
    1ea6:	82 2b       	or	r24, r18
    1ea8:	93 2b       	or	r25, r19
    1eaa:	a4 2b       	or	r26, r20
    1eac:	b5 2b       	or	r27, r21
    1eae:	8c 83       	std	Y+4, r24	; 0x04
    1eb0:	9d 83       	std	Y+5, r25	; 0x05
    1eb2:	ae 83       	std	Y+6, r26	; 0x06
    1eb4:	bf 83       	std	Y+7, r27	; 0x07
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    1eba:	01 96       	adiw	r24, 0x01	; 1
    1ebc:	9b 83       	std	Y+3, r25	; 0x03
    1ebe:	8a 83       	std	Y+2, r24	; 0x02
    1ec0:	05 c0       	rjmp	.+10     	; 0x1ecc <_fpadd_parts+0x286>
    1ec2:	ee ed       	ldi	r30, 0xDE	; 222
    1ec4:	f1 e0       	ldi	r31, 0x01	; 1
    1ec6:	03 c0       	rjmp	.+6      	; 0x1ece <_fpadd_parts+0x288>
    1ec8:	fb 01       	movw	r30, r22
    1eca:	01 c0       	rjmp	.+2      	; 0x1ece <_fpadd_parts+0x288>
    1ecc:	fe 01       	movw	r30, r28
    1ece:	cf 01       	movw	r24, r30
    1ed0:	cd b7       	in	r28, 0x3d	; 61
    1ed2:	de b7       	in	r29, 0x3e	; 62
    1ed4:	ee e0       	ldi	r30, 0x0E	; 14
    1ed6:	0c 94 8d 25 	jmp	0x4b1a	; 0x4b1a <__epilogue_restores__+0x8>

00001eda <__addsf3>:
    1eda:	a0 e2       	ldi	r26, 0x20	; 32
    1edc:	b0 e0       	ldi	r27, 0x00	; 0
    1ede:	e3 e7       	ldi	r30, 0x73	; 115
    1ee0:	ff e0       	ldi	r31, 0x0F	; 15
    1ee2:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <__prologue_saves__+0x18>
    1ee6:	69 83       	std	Y+1, r22	; 0x01
    1ee8:	7a 83       	std	Y+2, r23	; 0x02
    1eea:	8b 83       	std	Y+3, r24	; 0x03
    1eec:	9c 83       	std	Y+4, r25	; 0x04
    1eee:	2d 83       	std	Y+5, r18	; 0x05
    1ef0:	3e 83       	std	Y+6, r19	; 0x06
    1ef2:	4f 83       	std	Y+7, r20	; 0x07
    1ef4:	58 87       	std	Y+8, r21	; 0x08
    1ef6:	89 e0       	ldi	r24, 0x09	; 9
    1ef8:	e8 2e       	mov	r14, r24
    1efa:	f1 2c       	mov	r15, r1
    1efc:	ec 0e       	add	r14, r28
    1efe:	fd 1e       	adc	r15, r29
    1f00:	ce 01       	movw	r24, r28
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	b7 01       	movw	r22, r14
    1f06:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    1f0a:	8e 01       	movw	r16, r28
    1f0c:	0f 5e       	subi	r16, 0xEF	; 239
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	ce 01       	movw	r24, r28
    1f12:	05 96       	adiw	r24, 0x05	; 5
    1f14:	b8 01       	movw	r22, r16
    1f16:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    1f1a:	c7 01       	movw	r24, r14
    1f1c:	b8 01       	movw	r22, r16
    1f1e:	ae 01       	movw	r20, r28
    1f20:	47 5e       	subi	r20, 0xE7	; 231
    1f22:	5f 4f       	sbci	r21, 0xFF	; 255
    1f24:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <_fpadd_parts>
    1f28:	0e 94 b7 13 	call	0x276e	; 0x276e <__pack_f>
    1f2c:	a0 96       	adiw	r28, 0x20	; 32
    1f2e:	e6 e0       	ldi	r30, 0x06	; 6
    1f30:	0c 94 95 25 	jmp	0x4b2a	; 0x4b2a <__epilogue_restores__+0x18>

00001f34 <__subsf3>:
    1f34:	a0 e2       	ldi	r26, 0x20	; 32
    1f36:	b0 e0       	ldi	r27, 0x00	; 0
    1f38:	e0 ea       	ldi	r30, 0xA0	; 160
    1f3a:	ff e0       	ldi	r31, 0x0F	; 15
    1f3c:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <__prologue_saves__+0x18>
    1f40:	69 83       	std	Y+1, r22	; 0x01
    1f42:	7a 83       	std	Y+2, r23	; 0x02
    1f44:	8b 83       	std	Y+3, r24	; 0x03
    1f46:	9c 83       	std	Y+4, r25	; 0x04
    1f48:	2d 83       	std	Y+5, r18	; 0x05
    1f4a:	3e 83       	std	Y+6, r19	; 0x06
    1f4c:	4f 83       	std	Y+7, r20	; 0x07
    1f4e:	58 87       	std	Y+8, r21	; 0x08
    1f50:	8e 01       	movw	r16, r28
    1f52:	07 5f       	subi	r16, 0xF7	; 247
    1f54:	1f 4f       	sbci	r17, 0xFF	; 255
    1f56:	ce 01       	movw	r24, r28
    1f58:	01 96       	adiw	r24, 0x01	; 1
    1f5a:	b8 01       	movw	r22, r16
    1f5c:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    1f60:	91 e1       	ldi	r25, 0x11	; 17
    1f62:	e9 2e       	mov	r14, r25
    1f64:	f1 2c       	mov	r15, r1
    1f66:	ec 0e       	add	r14, r28
    1f68:	fd 1e       	adc	r15, r29
    1f6a:	ce 01       	movw	r24, r28
    1f6c:	05 96       	adiw	r24, 0x05	; 5
    1f6e:	b7 01       	movw	r22, r14
    1f70:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    1f74:	8a 89       	ldd	r24, Y+18	; 0x12
    1f76:	91 e0       	ldi	r25, 0x01	; 1
    1f78:	89 27       	eor	r24, r25
    1f7a:	8a 8b       	std	Y+18, r24	; 0x12
    1f7c:	c8 01       	movw	r24, r16
    1f7e:	b7 01       	movw	r22, r14
    1f80:	ae 01       	movw	r20, r28
    1f82:	47 5e       	subi	r20, 0xE7	; 231
    1f84:	5f 4f       	sbci	r21, 0xFF	; 255
    1f86:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <_fpadd_parts>
    1f8a:	0e 94 b7 13 	call	0x276e	; 0x276e <__pack_f>
    1f8e:	a0 96       	adiw	r28, 0x20	; 32
    1f90:	e6 e0       	ldi	r30, 0x06	; 6
    1f92:	0c 94 95 25 	jmp	0x4b2a	; 0x4b2a <__epilogue_restores__+0x18>

00001f96 <__mulsf3>:
    1f96:	a0 e2       	ldi	r26, 0x20	; 32
    1f98:	b0 e0       	ldi	r27, 0x00	; 0
    1f9a:	e1 ed       	ldi	r30, 0xD1	; 209
    1f9c:	ff e0       	ldi	r31, 0x0F	; 15
    1f9e:	0c 94 6d 25 	jmp	0x4ada	; 0x4ada <__prologue_saves__>
    1fa2:	69 83       	std	Y+1, r22	; 0x01
    1fa4:	7a 83       	std	Y+2, r23	; 0x02
    1fa6:	8b 83       	std	Y+3, r24	; 0x03
    1fa8:	9c 83       	std	Y+4, r25	; 0x04
    1faa:	2d 83       	std	Y+5, r18	; 0x05
    1fac:	3e 83       	std	Y+6, r19	; 0x06
    1fae:	4f 83       	std	Y+7, r20	; 0x07
    1fb0:	58 87       	std	Y+8, r21	; 0x08
    1fb2:	ce 01       	movw	r24, r28
    1fb4:	01 96       	adiw	r24, 0x01	; 1
    1fb6:	be 01       	movw	r22, r28
    1fb8:	67 5f       	subi	r22, 0xF7	; 247
    1fba:	7f 4f       	sbci	r23, 0xFF	; 255
    1fbc:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    1fc0:	ce 01       	movw	r24, r28
    1fc2:	05 96       	adiw	r24, 0x05	; 5
    1fc4:	be 01       	movw	r22, r28
    1fc6:	6f 5e       	subi	r22, 0xEF	; 239
    1fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    1fca:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    1fce:	99 85       	ldd	r25, Y+9	; 0x09
    1fd0:	92 30       	cpi	r25, 0x02	; 2
    1fd2:	78 f0       	brcs	.+30     	; 0x1ff2 <__mulsf3+0x5c>
    1fd4:	89 89       	ldd	r24, Y+17	; 0x11
    1fd6:	82 30       	cpi	r24, 0x02	; 2
    1fd8:	c0 f0       	brcs	.+48     	; 0x200a <__mulsf3+0x74>
    1fda:	94 30       	cpi	r25, 0x04	; 4
    1fdc:	19 f4       	brne	.+6      	; 0x1fe4 <__mulsf3+0x4e>
    1fde:	82 30       	cpi	r24, 0x02	; 2
    1fe0:	41 f4       	brne	.+16     	; 0x1ff2 <__mulsf3+0x5c>
    1fe2:	cb c0       	rjmp	.+406    	; 0x217a <__mulsf3+0x1e4>
    1fe4:	84 30       	cpi	r24, 0x04	; 4
    1fe6:	19 f4       	brne	.+6      	; 0x1fee <__mulsf3+0x58>
    1fe8:	92 30       	cpi	r25, 0x02	; 2
    1fea:	79 f4       	brne	.+30     	; 0x200a <__mulsf3+0x74>
    1fec:	c6 c0       	rjmp	.+396    	; 0x217a <__mulsf3+0x1e4>
    1fee:	92 30       	cpi	r25, 0x02	; 2
    1ff0:	51 f4       	brne	.+20     	; 0x2006 <__mulsf3+0x70>
    1ff2:	81 e0       	ldi	r24, 0x01	; 1
    1ff4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ff6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ff8:	29 17       	cp	r18, r25
    1ffa:	09 f4       	brne	.+2      	; 0x1ffe <__mulsf3+0x68>
    1ffc:	80 e0       	ldi	r24, 0x00	; 0
    1ffe:	8a 87       	std	Y+10, r24	; 0x0a
    2000:	ce 01       	movw	r24, r28
    2002:	09 96       	adiw	r24, 0x09	; 9
    2004:	bc c0       	rjmp	.+376    	; 0x217e <__mulsf3+0x1e8>
    2006:	82 30       	cpi	r24, 0x02	; 2
    2008:	51 f4       	brne	.+20     	; 0x201e <__mulsf3+0x88>
    200a:	81 e0       	ldi	r24, 0x01	; 1
    200c:	2a 85       	ldd	r18, Y+10	; 0x0a
    200e:	9a 89       	ldd	r25, Y+18	; 0x12
    2010:	29 17       	cp	r18, r25
    2012:	09 f4       	brne	.+2      	; 0x2016 <__mulsf3+0x80>
    2014:	80 e0       	ldi	r24, 0x00	; 0
    2016:	8a 8b       	std	Y+18, r24	; 0x12
    2018:	ce 01       	movw	r24, r28
    201a:	41 96       	adiw	r24, 0x11	; 17
    201c:	b0 c0       	rjmp	.+352    	; 0x217e <__mulsf3+0x1e8>
    201e:	6d 84       	ldd	r6, Y+13	; 0x0d
    2020:	7e 84       	ldd	r7, Y+14	; 0x0e
    2022:	8f 84       	ldd	r8, Y+15	; 0x0f
    2024:	98 88       	ldd	r9, Y+16	; 0x10
    2026:	ed 88       	ldd	r14, Y+21	; 0x15
    2028:	fe 88       	ldd	r15, Y+22	; 0x16
    202a:	0f 89       	ldd	r16, Y+23	; 0x17
    202c:	18 8d       	ldd	r17, Y+24	; 0x18
    202e:	e0 e2       	ldi	r30, 0x20	; 32
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	dc 01       	movw	r26, r24
    2038:	aa 24       	eor	r10, r10
    203a:	bb 24       	eor	r11, r11
    203c:	65 01       	movw	r12, r10
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	a9 01       	movw	r20, r18
    2044:	b3 01       	movw	r22, r6
    2046:	61 70       	andi	r22, 0x01	; 1
    2048:	70 70       	andi	r23, 0x00	; 0
    204a:	61 15       	cp	r22, r1
    204c:	71 05       	cpc	r23, r1
    204e:	d1 f0       	breq	.+52     	; 0x2084 <__mulsf3+0xee>
    2050:	2e 0d       	add	r18, r14
    2052:	3f 1d       	adc	r19, r15
    2054:	40 1f       	adc	r20, r16
    2056:	51 1f       	adc	r21, r17
    2058:	15 01       	movw	r2, r10
    205a:	26 01       	movw	r4, r12
    205c:	28 0e       	add	r2, r24
    205e:	39 1e       	adc	r3, r25
    2060:	4a 1e       	adc	r4, r26
    2062:	5b 1e       	adc	r5, r27
    2064:	81 e0       	ldi	r24, 0x01	; 1
    2066:	90 e0       	ldi	r25, 0x00	; 0
    2068:	a0 e0       	ldi	r26, 0x00	; 0
    206a:	b0 e0       	ldi	r27, 0x00	; 0
    206c:	2e 15       	cp	r18, r14
    206e:	3f 05       	cpc	r19, r15
    2070:	40 07       	cpc	r20, r16
    2072:	51 07       	cpc	r21, r17
    2074:	18 f0       	brcs	.+6      	; 0x207c <__mulsf3+0xe6>
    2076:	80 e0       	ldi	r24, 0x00	; 0
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	dc 01       	movw	r26, r24
    207c:	82 0d       	add	r24, r2
    207e:	93 1d       	adc	r25, r3
    2080:	a4 1d       	adc	r26, r4
    2082:	b5 1d       	adc	r27, r5
    2084:	aa 0c       	add	r10, r10
    2086:	bb 1c       	adc	r11, r11
    2088:	cc 1c       	adc	r12, r12
    208a:	dd 1c       	adc	r13, r13
    208c:	17 ff       	sbrs	r17, 7
    208e:	09 c0       	rjmp	.+18     	; 0x20a2 <__mulsf3+0x10c>
    2090:	61 e0       	ldi	r22, 0x01	; 1
    2092:	26 2e       	mov	r2, r22
    2094:	31 2c       	mov	r3, r1
    2096:	41 2c       	mov	r4, r1
    2098:	51 2c       	mov	r5, r1
    209a:	a2 28       	or	r10, r2
    209c:	b3 28       	or	r11, r3
    209e:	c4 28       	or	r12, r4
    20a0:	d5 28       	or	r13, r5
    20a2:	31 97       	sbiw	r30, 0x01	; 1
    20a4:	49 f0       	breq	.+18     	; 0x20b8 <__mulsf3+0x122>
    20a6:	ee 0c       	add	r14, r14
    20a8:	ff 1c       	adc	r15, r15
    20aa:	00 1f       	adc	r16, r16
    20ac:	11 1f       	adc	r17, r17
    20ae:	96 94       	lsr	r9
    20b0:	87 94       	ror	r8
    20b2:	77 94       	ror	r7
    20b4:	67 94       	ror	r6
    20b6:	c6 cf       	rjmp	.-116    	; 0x2044 <__mulsf3+0xae>
    20b8:	6b 89       	ldd	r22, Y+19	; 0x13
    20ba:	7c 89       	ldd	r23, Y+20	; 0x14
    20bc:	eb 85       	ldd	r30, Y+11	; 0x0b
    20be:	fc 85       	ldd	r31, Y+12	; 0x0c
    20c0:	6e 0f       	add	r22, r30
    20c2:	7f 1f       	adc	r23, r31
    20c4:	6e 5f       	subi	r22, 0xFE	; 254
    20c6:	7f 4f       	sbci	r23, 0xFF	; 255
    20c8:	7c 8f       	std	Y+28, r23	; 0x1c
    20ca:	6b 8f       	std	Y+27, r22	; 0x1b
    20cc:	61 e0       	ldi	r22, 0x01	; 1
    20ce:	ea 85       	ldd	r30, Y+10	; 0x0a
    20d0:	7a 89       	ldd	r23, Y+18	; 0x12
    20d2:	e7 17       	cp	r30, r23
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <__mulsf3+0x142>
    20d6:	60 e0       	ldi	r22, 0x00	; 0
    20d8:	6a 8f       	std	Y+26, r22	; 0x1a
    20da:	6b 8d       	ldd	r22, Y+27	; 0x1b
    20dc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    20de:	10 c0       	rjmp	.+32     	; 0x2100 <__mulsf3+0x16a>
    20e0:	fc 01       	movw	r30, r24
    20e2:	e1 70       	andi	r30, 0x01	; 1
    20e4:	f0 70       	andi	r31, 0x00	; 0
    20e6:	30 97       	sbiw	r30, 0x00	; 0
    20e8:	29 f0       	breq	.+10     	; 0x20f4 <__mulsf3+0x15e>
    20ea:	56 95       	lsr	r21
    20ec:	47 95       	ror	r20
    20ee:	37 95       	ror	r19
    20f0:	27 95       	ror	r18
    20f2:	50 68       	ori	r21, 0x80	; 128
    20f4:	b6 95       	lsr	r27
    20f6:	a7 95       	ror	r26
    20f8:	97 95       	ror	r25
    20fa:	87 95       	ror	r24
    20fc:	6f 5f       	subi	r22, 0xFF	; 255
    20fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2100:	b7 fd       	sbrc	r27, 7
    2102:	ee cf       	rjmp	.-36     	; 0x20e0 <__mulsf3+0x14a>
    2104:	0c c0       	rjmp	.+24     	; 0x211e <__mulsf3+0x188>
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	aa 1f       	adc	r26, r26
    210c:	bb 1f       	adc	r27, r27
    210e:	57 fd       	sbrc	r21, 7
    2110:	81 60       	ori	r24, 0x01	; 1
    2112:	22 0f       	add	r18, r18
    2114:	33 1f       	adc	r19, r19
    2116:	44 1f       	adc	r20, r20
    2118:	55 1f       	adc	r21, r21
    211a:	61 50       	subi	r22, 0x01	; 1
    211c:	70 40       	sbci	r23, 0x00	; 0
    211e:	80 30       	cpi	r24, 0x00	; 0
    2120:	e0 e0       	ldi	r30, 0x00	; 0
    2122:	9e 07       	cpc	r25, r30
    2124:	e0 e0       	ldi	r30, 0x00	; 0
    2126:	ae 07       	cpc	r26, r30
    2128:	e0 e4       	ldi	r30, 0x40	; 64
    212a:	be 07       	cpc	r27, r30
    212c:	60 f3       	brcs	.-40     	; 0x2106 <__mulsf3+0x170>
    212e:	6b 8f       	std	Y+27, r22	; 0x1b
    2130:	7c 8f       	std	Y+28, r23	; 0x1c
    2132:	6f e7       	ldi	r22, 0x7F	; 127
    2134:	e6 2e       	mov	r14, r22
    2136:	f1 2c       	mov	r15, r1
    2138:	01 2d       	mov	r16, r1
    213a:	11 2d       	mov	r17, r1
    213c:	e8 22       	and	r14, r24
    213e:	f9 22       	and	r15, r25
    2140:	0a 23       	and	r16, r26
    2142:	1b 23       	and	r17, r27
    2144:	60 e4       	ldi	r22, 0x40	; 64
    2146:	e6 16       	cp	r14, r22
    2148:	f1 04       	cpc	r15, r1
    214a:	01 05       	cpc	r16, r1
    214c:	11 05       	cpc	r17, r1
    214e:	61 f4       	brne	.+24     	; 0x2168 <__mulsf3+0x1d2>
    2150:	87 fd       	sbrc	r24, 7
    2152:	0a c0       	rjmp	.+20     	; 0x2168 <__mulsf3+0x1d2>
    2154:	21 15       	cp	r18, r1
    2156:	31 05       	cpc	r19, r1
    2158:	41 05       	cpc	r20, r1
    215a:	51 05       	cpc	r21, r1
    215c:	29 f0       	breq	.+10     	; 0x2168 <__mulsf3+0x1d2>
    215e:	80 5c       	subi	r24, 0xC0	; 192
    2160:	9f 4f       	sbci	r25, 0xFF	; 255
    2162:	af 4f       	sbci	r26, 0xFF	; 255
    2164:	bf 4f       	sbci	r27, 0xFF	; 255
    2166:	80 78       	andi	r24, 0x80	; 128
    2168:	8d 8f       	std	Y+29, r24	; 0x1d
    216a:	9e 8f       	std	Y+30, r25	; 0x1e
    216c:	af 8f       	std	Y+31, r26	; 0x1f
    216e:	b8 a3       	std	Y+32, r27	; 0x20
    2170:	83 e0       	ldi	r24, 0x03	; 3
    2172:	89 8f       	std	Y+25, r24	; 0x19
    2174:	ce 01       	movw	r24, r28
    2176:	49 96       	adiw	r24, 0x19	; 25
    2178:	02 c0       	rjmp	.+4      	; 0x217e <__mulsf3+0x1e8>
    217a:	8e ed       	ldi	r24, 0xDE	; 222
    217c:	91 e0       	ldi	r25, 0x01	; 1
    217e:	0e 94 b7 13 	call	0x276e	; 0x276e <__pack_f>
    2182:	a0 96       	adiw	r28, 0x20	; 32
    2184:	e2 e1       	ldi	r30, 0x12	; 18
    2186:	0c 94 89 25 	jmp	0x4b12	; 0x4b12 <__epilogue_restores__>

0000218a <__divsf3>:
    218a:	a8 e1       	ldi	r26, 0x18	; 24
    218c:	b0 e0       	ldi	r27, 0x00	; 0
    218e:	eb ec       	ldi	r30, 0xCB	; 203
    2190:	f0 e1       	ldi	r31, 0x10	; 16
    2192:	0c 94 75 25 	jmp	0x4aea	; 0x4aea <__prologue_saves__+0x10>
    2196:	69 83       	std	Y+1, r22	; 0x01
    2198:	7a 83       	std	Y+2, r23	; 0x02
    219a:	8b 83       	std	Y+3, r24	; 0x03
    219c:	9c 83       	std	Y+4, r25	; 0x04
    219e:	2d 83       	std	Y+5, r18	; 0x05
    21a0:	3e 83       	std	Y+6, r19	; 0x06
    21a2:	4f 83       	std	Y+7, r20	; 0x07
    21a4:	58 87       	std	Y+8, r21	; 0x08
    21a6:	8e 01       	movw	r16, r28
    21a8:	07 5f       	subi	r16, 0xF7	; 247
    21aa:	1f 4f       	sbci	r17, 0xFF	; 255
    21ac:	ce 01       	movw	r24, r28
    21ae:	01 96       	adiw	r24, 0x01	; 1
    21b0:	b8 01       	movw	r22, r16
    21b2:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    21b6:	81 e1       	ldi	r24, 0x11	; 17
    21b8:	e8 2e       	mov	r14, r24
    21ba:	f1 2c       	mov	r15, r1
    21bc:	ec 0e       	add	r14, r28
    21be:	fd 1e       	adc	r15, r29
    21c0:	ce 01       	movw	r24, r28
    21c2:	05 96       	adiw	r24, 0x05	; 5
    21c4:	b7 01       	movw	r22, r14
    21c6:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    21ca:	99 85       	ldd	r25, Y+9	; 0x09
    21cc:	92 30       	cpi	r25, 0x02	; 2
    21ce:	08 f4       	brcc	.+2      	; 0x21d2 <__divsf3+0x48>
    21d0:	83 c0       	rjmp	.+262    	; 0x22d8 <__divsf3+0x14e>
    21d2:	89 89       	ldd	r24, Y+17	; 0x11
    21d4:	82 30       	cpi	r24, 0x02	; 2
    21d6:	08 f4       	brcc	.+2      	; 0x21da <__divsf3+0x50>
    21d8:	7b c0       	rjmp	.+246    	; 0x22d0 <__divsf3+0x146>
    21da:	2a 85       	ldd	r18, Y+10	; 0x0a
    21dc:	3a 89       	ldd	r19, Y+18	; 0x12
    21de:	23 27       	eor	r18, r19
    21e0:	2a 87       	std	Y+10, r18	; 0x0a
    21e2:	94 30       	cpi	r25, 0x04	; 4
    21e4:	11 f0       	breq	.+4      	; 0x21ea <__divsf3+0x60>
    21e6:	92 30       	cpi	r25, 0x02	; 2
    21e8:	21 f4       	brne	.+8      	; 0x21f2 <__divsf3+0x68>
    21ea:	98 17       	cp	r25, r24
    21ec:	09 f0       	breq	.+2      	; 0x21f0 <__divsf3+0x66>
    21ee:	6c c0       	rjmp	.+216    	; 0x22c8 <__divsf3+0x13e>
    21f0:	71 c0       	rjmp	.+226    	; 0x22d4 <__divsf3+0x14a>
    21f2:	84 30       	cpi	r24, 0x04	; 4
    21f4:	39 f4       	brne	.+14     	; 0x2204 <__divsf3+0x7a>
    21f6:	1d 86       	std	Y+13, r1	; 0x0d
    21f8:	1e 86       	std	Y+14, r1	; 0x0e
    21fa:	1f 86       	std	Y+15, r1	; 0x0f
    21fc:	18 8a       	std	Y+16, r1	; 0x10
    21fe:	1c 86       	std	Y+12, r1	; 0x0c
    2200:	1b 86       	std	Y+11, r1	; 0x0b
    2202:	6a c0       	rjmp	.+212    	; 0x22d8 <__divsf3+0x14e>
    2204:	82 30       	cpi	r24, 0x02	; 2
    2206:	19 f4       	brne	.+6      	; 0x220e <__divsf3+0x84>
    2208:	84 e0       	ldi	r24, 0x04	; 4
    220a:	89 87       	std	Y+9, r24	; 0x09
    220c:	65 c0       	rjmp	.+202    	; 0x22d8 <__divsf3+0x14e>
    220e:	8b 85       	ldd	r24, Y+11	; 0x0b
    2210:	9c 85       	ldd	r25, Y+12	; 0x0c
    2212:	2b 89       	ldd	r18, Y+19	; 0x13
    2214:	3c 89       	ldd	r19, Y+20	; 0x14
    2216:	82 1b       	sub	r24, r18
    2218:	93 0b       	sbc	r25, r19
    221a:	9c 87       	std	Y+12, r25	; 0x0c
    221c:	8b 87       	std	Y+11, r24	; 0x0b
    221e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2220:	3e 85       	ldd	r19, Y+14	; 0x0e
    2222:	4f 85       	ldd	r20, Y+15	; 0x0f
    2224:	58 89       	ldd	r21, Y+16	; 0x10
    2226:	ed 88       	ldd	r14, Y+21	; 0x15
    2228:	fe 88       	ldd	r15, Y+22	; 0x16
    222a:	0f 89       	ldd	r16, Y+23	; 0x17
    222c:	18 8d       	ldd	r17, Y+24	; 0x18
    222e:	2e 15       	cp	r18, r14
    2230:	3f 05       	cpc	r19, r15
    2232:	40 07       	cpc	r20, r16
    2234:	51 07       	cpc	r21, r17
    2236:	38 f4       	brcc	.+14     	; 0x2246 <__divsf3+0xbc>
    2238:	22 0f       	add	r18, r18
    223a:	33 1f       	adc	r19, r19
    223c:	44 1f       	adc	r20, r20
    223e:	55 1f       	adc	r21, r21
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	9c 87       	std	Y+12, r25	; 0x0c
    2244:	8b 87       	std	Y+11, r24	; 0x0b
    2246:	6f e1       	ldi	r22, 0x1F	; 31
    2248:	70 e0       	ldi	r23, 0x00	; 0
    224a:	a1 2c       	mov	r10, r1
    224c:	b1 2c       	mov	r11, r1
    224e:	c1 2c       	mov	r12, r1
    2250:	a0 e4       	ldi	r26, 0x40	; 64
    2252:	da 2e       	mov	r13, r26
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	dc 01       	movw	r26, r24
    225a:	2e 15       	cp	r18, r14
    225c:	3f 05       	cpc	r19, r15
    225e:	40 07       	cpc	r20, r16
    2260:	51 07       	cpc	r21, r17
    2262:	40 f0       	brcs	.+16     	; 0x2274 <__divsf3+0xea>
    2264:	8a 29       	or	r24, r10
    2266:	9b 29       	or	r25, r11
    2268:	ac 29       	or	r26, r12
    226a:	bd 29       	or	r27, r13
    226c:	2e 19       	sub	r18, r14
    226e:	3f 09       	sbc	r19, r15
    2270:	40 0b       	sbc	r20, r16
    2272:	51 0b       	sbc	r21, r17
    2274:	d6 94       	lsr	r13
    2276:	c7 94       	ror	r12
    2278:	b7 94       	ror	r11
    227a:	a7 94       	ror	r10
    227c:	22 0f       	add	r18, r18
    227e:	33 1f       	adc	r19, r19
    2280:	44 1f       	adc	r20, r20
    2282:	55 1f       	adc	r21, r21
    2284:	61 50       	subi	r22, 0x01	; 1
    2286:	70 40       	sbci	r23, 0x00	; 0
    2288:	41 f7       	brne	.-48     	; 0x225a <__divsf3+0xd0>
    228a:	6f e7       	ldi	r22, 0x7F	; 127
    228c:	e6 2e       	mov	r14, r22
    228e:	f1 2c       	mov	r15, r1
    2290:	01 2d       	mov	r16, r1
    2292:	11 2d       	mov	r17, r1
    2294:	e8 22       	and	r14, r24
    2296:	f9 22       	and	r15, r25
    2298:	0a 23       	and	r16, r26
    229a:	1b 23       	and	r17, r27
    229c:	60 e4       	ldi	r22, 0x40	; 64
    229e:	e6 16       	cp	r14, r22
    22a0:	f1 04       	cpc	r15, r1
    22a2:	01 05       	cpc	r16, r1
    22a4:	11 05       	cpc	r17, r1
    22a6:	61 f4       	brne	.+24     	; 0x22c0 <__divsf3+0x136>
    22a8:	87 fd       	sbrc	r24, 7
    22aa:	0a c0       	rjmp	.+20     	; 0x22c0 <__divsf3+0x136>
    22ac:	21 15       	cp	r18, r1
    22ae:	31 05       	cpc	r19, r1
    22b0:	41 05       	cpc	r20, r1
    22b2:	51 05       	cpc	r21, r1
    22b4:	29 f0       	breq	.+10     	; 0x22c0 <__divsf3+0x136>
    22b6:	80 5c       	subi	r24, 0xC0	; 192
    22b8:	9f 4f       	sbci	r25, 0xFF	; 255
    22ba:	af 4f       	sbci	r26, 0xFF	; 255
    22bc:	bf 4f       	sbci	r27, 0xFF	; 255
    22be:	80 78       	andi	r24, 0x80	; 128
    22c0:	8d 87       	std	Y+13, r24	; 0x0d
    22c2:	9e 87       	std	Y+14, r25	; 0x0e
    22c4:	af 87       	std	Y+15, r26	; 0x0f
    22c6:	b8 8b       	std	Y+16, r27	; 0x10
    22c8:	8e 01       	movw	r16, r28
    22ca:	07 5f       	subi	r16, 0xF7	; 247
    22cc:	1f 4f       	sbci	r17, 0xFF	; 255
    22ce:	04 c0       	rjmp	.+8      	; 0x22d8 <__divsf3+0x14e>
    22d0:	87 01       	movw	r16, r14
    22d2:	02 c0       	rjmp	.+4      	; 0x22d8 <__divsf3+0x14e>
    22d4:	0e ed       	ldi	r16, 0xDE	; 222
    22d6:	11 e0       	ldi	r17, 0x01	; 1
    22d8:	c8 01       	movw	r24, r16
    22da:	0e 94 b7 13 	call	0x276e	; 0x276e <__pack_f>
    22de:	68 96       	adiw	r28, 0x18	; 24
    22e0:	ea e0       	ldi	r30, 0x0A	; 10
    22e2:	0c 94 91 25 	jmp	0x4b22	; 0x4b22 <__epilogue_restores__+0x10>

000022e6 <__eqsf2>:
    22e6:	a8 e1       	ldi	r26, 0x18	; 24
    22e8:	b0 e0       	ldi	r27, 0x00	; 0
    22ea:	e9 e7       	ldi	r30, 0x79	; 121
    22ec:	f1 e1       	ldi	r31, 0x11	; 17
    22ee:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <__prologue_saves__+0x18>
    22f2:	69 83       	std	Y+1, r22	; 0x01
    22f4:	7a 83       	std	Y+2, r23	; 0x02
    22f6:	8b 83       	std	Y+3, r24	; 0x03
    22f8:	9c 83       	std	Y+4, r25	; 0x04
    22fa:	2d 83       	std	Y+5, r18	; 0x05
    22fc:	3e 83       	std	Y+6, r19	; 0x06
    22fe:	4f 83       	std	Y+7, r20	; 0x07
    2300:	58 87       	std	Y+8, r21	; 0x08
    2302:	8e 01       	movw	r16, r28
    2304:	07 5f       	subi	r16, 0xF7	; 247
    2306:	1f 4f       	sbci	r17, 0xFF	; 255
    2308:	ce 01       	movw	r24, r28
    230a:	01 96       	adiw	r24, 0x01	; 1
    230c:	b8 01       	movw	r22, r16
    230e:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    2312:	81 e1       	ldi	r24, 0x11	; 17
    2314:	e8 2e       	mov	r14, r24
    2316:	f1 2c       	mov	r15, r1
    2318:	ec 0e       	add	r14, r28
    231a:	fd 1e       	adc	r15, r29
    231c:	ce 01       	movw	r24, r28
    231e:	05 96       	adiw	r24, 0x05	; 5
    2320:	b7 01       	movw	r22, r14
    2322:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    2326:	89 85       	ldd	r24, Y+9	; 0x09
    2328:	82 30       	cpi	r24, 0x02	; 2
    232a:	40 f0       	brcs	.+16     	; 0x233c <__eqsf2+0x56>
    232c:	89 89       	ldd	r24, Y+17	; 0x11
    232e:	82 30       	cpi	r24, 0x02	; 2
    2330:	28 f0       	brcs	.+10     	; 0x233c <__eqsf2+0x56>
    2332:	c8 01       	movw	r24, r16
    2334:	b7 01       	movw	r22, r14
    2336:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fpcmp_parts_f>
    233a:	01 c0       	rjmp	.+2      	; 0x233e <__eqsf2+0x58>
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	68 96       	adiw	r28, 0x18	; 24
    2340:	e6 e0       	ldi	r30, 0x06	; 6
    2342:	0c 94 95 25 	jmp	0x4b2a	; 0x4b2a <__epilogue_restores__+0x18>

00002346 <__gtsf2>:
    2346:	a8 e1       	ldi	r26, 0x18	; 24
    2348:	b0 e0       	ldi	r27, 0x00	; 0
    234a:	e9 ea       	ldi	r30, 0xA9	; 169
    234c:	f1 e1       	ldi	r31, 0x11	; 17
    234e:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <__prologue_saves__+0x18>
    2352:	69 83       	std	Y+1, r22	; 0x01
    2354:	7a 83       	std	Y+2, r23	; 0x02
    2356:	8b 83       	std	Y+3, r24	; 0x03
    2358:	9c 83       	std	Y+4, r25	; 0x04
    235a:	2d 83       	std	Y+5, r18	; 0x05
    235c:	3e 83       	std	Y+6, r19	; 0x06
    235e:	4f 83       	std	Y+7, r20	; 0x07
    2360:	58 87       	std	Y+8, r21	; 0x08
    2362:	8e 01       	movw	r16, r28
    2364:	07 5f       	subi	r16, 0xF7	; 247
    2366:	1f 4f       	sbci	r17, 0xFF	; 255
    2368:	ce 01       	movw	r24, r28
    236a:	01 96       	adiw	r24, 0x01	; 1
    236c:	b8 01       	movw	r22, r16
    236e:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    2372:	81 e1       	ldi	r24, 0x11	; 17
    2374:	e8 2e       	mov	r14, r24
    2376:	f1 2c       	mov	r15, r1
    2378:	ec 0e       	add	r14, r28
    237a:	fd 1e       	adc	r15, r29
    237c:	ce 01       	movw	r24, r28
    237e:	05 96       	adiw	r24, 0x05	; 5
    2380:	b7 01       	movw	r22, r14
    2382:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    2386:	89 85       	ldd	r24, Y+9	; 0x09
    2388:	82 30       	cpi	r24, 0x02	; 2
    238a:	40 f0       	brcs	.+16     	; 0x239c <__gtsf2+0x56>
    238c:	89 89       	ldd	r24, Y+17	; 0x11
    238e:	82 30       	cpi	r24, 0x02	; 2
    2390:	28 f0       	brcs	.+10     	; 0x239c <__gtsf2+0x56>
    2392:	c8 01       	movw	r24, r16
    2394:	b7 01       	movw	r22, r14
    2396:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fpcmp_parts_f>
    239a:	01 c0       	rjmp	.+2      	; 0x239e <__gtsf2+0x58>
    239c:	8f ef       	ldi	r24, 0xFF	; 255
    239e:	68 96       	adiw	r28, 0x18	; 24
    23a0:	e6 e0       	ldi	r30, 0x06	; 6
    23a2:	0c 94 95 25 	jmp	0x4b2a	; 0x4b2a <__epilogue_restores__+0x18>

000023a6 <__gesf2>:
    23a6:	a8 e1       	ldi	r26, 0x18	; 24
    23a8:	b0 e0       	ldi	r27, 0x00	; 0
    23aa:	e9 ed       	ldi	r30, 0xD9	; 217
    23ac:	f1 e1       	ldi	r31, 0x11	; 17
    23ae:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <__prologue_saves__+0x18>
    23b2:	69 83       	std	Y+1, r22	; 0x01
    23b4:	7a 83       	std	Y+2, r23	; 0x02
    23b6:	8b 83       	std	Y+3, r24	; 0x03
    23b8:	9c 83       	std	Y+4, r25	; 0x04
    23ba:	2d 83       	std	Y+5, r18	; 0x05
    23bc:	3e 83       	std	Y+6, r19	; 0x06
    23be:	4f 83       	std	Y+7, r20	; 0x07
    23c0:	58 87       	std	Y+8, r21	; 0x08
    23c2:	8e 01       	movw	r16, r28
    23c4:	07 5f       	subi	r16, 0xF7	; 247
    23c6:	1f 4f       	sbci	r17, 0xFF	; 255
    23c8:	ce 01       	movw	r24, r28
    23ca:	01 96       	adiw	r24, 0x01	; 1
    23cc:	b8 01       	movw	r22, r16
    23ce:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    23d2:	81 e1       	ldi	r24, 0x11	; 17
    23d4:	e8 2e       	mov	r14, r24
    23d6:	f1 2c       	mov	r15, r1
    23d8:	ec 0e       	add	r14, r28
    23da:	fd 1e       	adc	r15, r29
    23dc:	ce 01       	movw	r24, r28
    23de:	05 96       	adiw	r24, 0x05	; 5
    23e0:	b7 01       	movw	r22, r14
    23e2:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    23e6:	89 85       	ldd	r24, Y+9	; 0x09
    23e8:	82 30       	cpi	r24, 0x02	; 2
    23ea:	40 f0       	brcs	.+16     	; 0x23fc <__gesf2+0x56>
    23ec:	89 89       	ldd	r24, Y+17	; 0x11
    23ee:	82 30       	cpi	r24, 0x02	; 2
    23f0:	28 f0       	brcs	.+10     	; 0x23fc <__gesf2+0x56>
    23f2:	c8 01       	movw	r24, r16
    23f4:	b7 01       	movw	r22, r14
    23f6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fpcmp_parts_f>
    23fa:	01 c0       	rjmp	.+2      	; 0x23fe <__gesf2+0x58>
    23fc:	8f ef       	ldi	r24, 0xFF	; 255
    23fe:	68 96       	adiw	r28, 0x18	; 24
    2400:	e6 e0       	ldi	r30, 0x06	; 6
    2402:	0c 94 95 25 	jmp	0x4b2a	; 0x4b2a <__epilogue_restores__+0x18>

00002406 <__ltsf2>:
    2406:	a8 e1       	ldi	r26, 0x18	; 24
    2408:	b0 e0       	ldi	r27, 0x00	; 0
    240a:	e9 e0       	ldi	r30, 0x09	; 9
    240c:	f2 e1       	ldi	r31, 0x12	; 18
    240e:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <__prologue_saves__+0x18>
    2412:	69 83       	std	Y+1, r22	; 0x01
    2414:	7a 83       	std	Y+2, r23	; 0x02
    2416:	8b 83       	std	Y+3, r24	; 0x03
    2418:	9c 83       	std	Y+4, r25	; 0x04
    241a:	2d 83       	std	Y+5, r18	; 0x05
    241c:	3e 83       	std	Y+6, r19	; 0x06
    241e:	4f 83       	std	Y+7, r20	; 0x07
    2420:	58 87       	std	Y+8, r21	; 0x08
    2422:	8e 01       	movw	r16, r28
    2424:	07 5f       	subi	r16, 0xF7	; 247
    2426:	1f 4f       	sbci	r17, 0xFF	; 255
    2428:	ce 01       	movw	r24, r28
    242a:	01 96       	adiw	r24, 0x01	; 1
    242c:	b8 01       	movw	r22, r16
    242e:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    2432:	81 e1       	ldi	r24, 0x11	; 17
    2434:	e8 2e       	mov	r14, r24
    2436:	f1 2c       	mov	r15, r1
    2438:	ec 0e       	add	r14, r28
    243a:	fd 1e       	adc	r15, r29
    243c:	ce 01       	movw	r24, r28
    243e:	05 96       	adiw	r24, 0x05	; 5
    2440:	b7 01       	movw	r22, r14
    2442:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    2446:	89 85       	ldd	r24, Y+9	; 0x09
    2448:	82 30       	cpi	r24, 0x02	; 2
    244a:	40 f0       	brcs	.+16     	; 0x245c <__ltsf2+0x56>
    244c:	89 89       	ldd	r24, Y+17	; 0x11
    244e:	82 30       	cpi	r24, 0x02	; 2
    2450:	28 f0       	brcs	.+10     	; 0x245c <__ltsf2+0x56>
    2452:	c8 01       	movw	r24, r16
    2454:	b7 01       	movw	r22, r14
    2456:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fpcmp_parts_f>
    245a:	01 c0       	rjmp	.+2      	; 0x245e <__ltsf2+0x58>
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	68 96       	adiw	r28, 0x18	; 24
    2460:	e6 e0       	ldi	r30, 0x06	; 6
    2462:	0c 94 95 25 	jmp	0x4b2a	; 0x4b2a <__epilogue_restores__+0x18>

00002466 <__floatsisf>:
    2466:	a8 e0       	ldi	r26, 0x08	; 8
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e9 e3       	ldi	r30, 0x39	; 57
    246c:	f2 e1       	ldi	r31, 0x12	; 18
    246e:	0c 94 79 25 	jmp	0x4af2	; 0x4af2 <__prologue_saves__+0x18>
    2472:	7b 01       	movw	r14, r22
    2474:	8c 01       	movw	r16, r24
    2476:	83 e0       	ldi	r24, 0x03	; 3
    2478:	89 83       	std	Y+1, r24	; 0x01
    247a:	d8 01       	movw	r26, r16
    247c:	c7 01       	movw	r24, r14
    247e:	88 27       	eor	r24, r24
    2480:	b7 fd       	sbrc	r27, 7
    2482:	83 95       	inc	r24
    2484:	99 27       	eor	r25, r25
    2486:	aa 27       	eor	r26, r26
    2488:	bb 27       	eor	r27, r27
    248a:	28 2f       	mov	r18, r24
    248c:	8a 83       	std	Y+2, r24	; 0x02
    248e:	e1 14       	cp	r14, r1
    2490:	f1 04       	cpc	r15, r1
    2492:	01 05       	cpc	r16, r1
    2494:	11 05       	cpc	r17, r1
    2496:	19 f4       	brne	.+6      	; 0x249e <__floatsisf+0x38>
    2498:	82 e0       	ldi	r24, 0x02	; 2
    249a:	89 83       	std	Y+1, r24	; 0x01
    249c:	37 c0       	rjmp	.+110    	; 0x250c <__floatsisf+0xa6>
    249e:	8e e1       	ldi	r24, 0x1E	; 30
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	9c 83       	std	Y+4, r25	; 0x04
    24a4:	8b 83       	std	Y+3, r24	; 0x03
    24a6:	22 23       	and	r18, r18
    24a8:	89 f0       	breq	.+34     	; 0x24cc <__floatsisf+0x66>
    24aa:	80 e0       	ldi	r24, 0x00	; 0
    24ac:	e8 16       	cp	r14, r24
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	f8 06       	cpc	r15, r24
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	08 07       	cpc	r16, r24
    24b6:	80 e8       	ldi	r24, 0x80	; 128
    24b8:	18 07       	cpc	r17, r24
    24ba:	69 f1       	breq	.+90     	; 0x2516 <__floatsisf+0xb0>
    24bc:	10 95       	com	r17
    24be:	00 95       	com	r16
    24c0:	f0 94       	com	r15
    24c2:	e0 94       	com	r14
    24c4:	e1 1c       	adc	r14, r1
    24c6:	f1 1c       	adc	r15, r1
    24c8:	01 1d       	adc	r16, r1
    24ca:	11 1d       	adc	r17, r1
    24cc:	ed 82       	std	Y+5, r14	; 0x05
    24ce:	fe 82       	std	Y+6, r15	; 0x06
    24d0:	0f 83       	std	Y+7, r16	; 0x07
    24d2:	18 87       	std	Y+8, r17	; 0x08
    24d4:	c8 01       	movw	r24, r16
    24d6:	b7 01       	movw	r22, r14
    24d8:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__clzsi2>
    24dc:	9c 01       	movw	r18, r24
    24de:	21 50       	subi	r18, 0x01	; 1
    24e0:	30 40       	sbci	r19, 0x00	; 0
    24e2:	12 16       	cp	r1, r18
    24e4:	13 06       	cpc	r1, r19
    24e6:	94 f4       	brge	.+36     	; 0x250c <__floatsisf+0xa6>
    24e8:	02 2e       	mov	r0, r18
    24ea:	04 c0       	rjmp	.+8      	; 0x24f4 <__floatsisf+0x8e>
    24ec:	ee 0c       	add	r14, r14
    24ee:	ff 1c       	adc	r15, r15
    24f0:	00 1f       	adc	r16, r16
    24f2:	11 1f       	adc	r17, r17
    24f4:	0a 94       	dec	r0
    24f6:	d2 f7       	brpl	.-12     	; 0x24ec <__floatsisf+0x86>
    24f8:	ed 82       	std	Y+5, r14	; 0x05
    24fa:	fe 82       	std	Y+6, r15	; 0x06
    24fc:	0f 83       	std	Y+7, r16	; 0x07
    24fe:	18 87       	std	Y+8, r17	; 0x08
    2500:	8e e1       	ldi	r24, 0x1E	; 30
    2502:	90 e0       	ldi	r25, 0x00	; 0
    2504:	82 1b       	sub	r24, r18
    2506:	93 0b       	sbc	r25, r19
    2508:	9c 83       	std	Y+4, r25	; 0x04
    250a:	8b 83       	std	Y+3, r24	; 0x03
    250c:	ce 01       	movw	r24, r28
    250e:	01 96       	adiw	r24, 0x01	; 1
    2510:	0e 94 b7 13 	call	0x276e	; 0x276e <__pack_f>
    2514:	04 c0       	rjmp	.+8      	; 0x251e <__floatsisf+0xb8>
    2516:	60 e0       	ldi	r22, 0x00	; 0
    2518:	70 e0       	ldi	r23, 0x00	; 0
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	9f ec       	ldi	r25, 0xCF	; 207
    251e:	28 96       	adiw	r28, 0x08	; 8
    2520:	e6 e0       	ldi	r30, 0x06	; 6
    2522:	0c 94 95 25 	jmp	0x4b2a	; 0x4b2a <__epilogue_restores__+0x18>

00002526 <__fixsfsi>:
    2526:	ac e0       	ldi	r26, 0x0C	; 12
    2528:	b0 e0       	ldi	r27, 0x00	; 0
    252a:	e9 e9       	ldi	r30, 0x99	; 153
    252c:	f2 e1       	ldi	r31, 0x12	; 18
    252e:	0c 94 7d 25 	jmp	0x4afa	; 0x4afa <__prologue_saves__+0x20>
    2532:	69 83       	std	Y+1, r22	; 0x01
    2534:	7a 83       	std	Y+2, r23	; 0x02
    2536:	8b 83       	std	Y+3, r24	; 0x03
    2538:	9c 83       	std	Y+4, r25	; 0x04
    253a:	ce 01       	movw	r24, r28
    253c:	01 96       	adiw	r24, 0x01	; 1
    253e:	be 01       	movw	r22, r28
    2540:	6b 5f       	subi	r22, 0xFB	; 251
    2542:	7f 4f       	sbci	r23, 0xFF	; 255
    2544:	0e 94 85 14 	call	0x290a	; 0x290a <__unpack_f>
    2548:	8d 81       	ldd	r24, Y+5	; 0x05
    254a:	82 30       	cpi	r24, 0x02	; 2
    254c:	81 f1       	breq	.+96     	; 0x25ae <__fixsfsi+0x88>
    254e:	82 30       	cpi	r24, 0x02	; 2
    2550:	70 f1       	brcs	.+92     	; 0x25ae <__fixsfsi+0x88>
    2552:	84 30       	cpi	r24, 0x04	; 4
    2554:	21 f4       	brne	.+8      	; 0x255e <__fixsfsi+0x38>
    2556:	8e 81       	ldd	r24, Y+6	; 0x06
    2558:	88 23       	and	r24, r24
    255a:	69 f1       	breq	.+90     	; 0x25b6 <__fixsfsi+0x90>
    255c:	0a c0       	rjmp	.+20     	; 0x2572 <__fixsfsi+0x4c>
    255e:	2f 81       	ldd	r18, Y+7	; 0x07
    2560:	38 85       	ldd	r19, Y+8	; 0x08
    2562:	37 fd       	sbrc	r19, 7
    2564:	24 c0       	rjmp	.+72     	; 0x25ae <__fixsfsi+0x88>
    2566:	6e 81       	ldd	r22, Y+6	; 0x06
    2568:	2f 31       	cpi	r18, 0x1F	; 31
    256a:	31 05       	cpc	r19, r1
    256c:	3c f0       	brlt	.+14     	; 0x257c <__fixsfsi+0x56>
    256e:	66 23       	and	r22, r22
    2570:	11 f1       	breq	.+68     	; 0x25b6 <__fixsfsi+0x90>
    2572:	20 e0       	ldi	r18, 0x00	; 0
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	40 e0       	ldi	r20, 0x00	; 0
    2578:	50 e8       	ldi	r21, 0x80	; 128
    257a:	21 c0       	rjmp	.+66     	; 0x25be <__fixsfsi+0x98>
    257c:	8e e1       	ldi	r24, 0x1E	; 30
    257e:	90 e0       	ldi	r25, 0x00	; 0
    2580:	82 1b       	sub	r24, r18
    2582:	93 0b       	sbc	r25, r19
    2584:	29 85       	ldd	r18, Y+9	; 0x09
    2586:	3a 85       	ldd	r19, Y+10	; 0x0a
    2588:	4b 85       	ldd	r20, Y+11	; 0x0b
    258a:	5c 85       	ldd	r21, Y+12	; 0x0c
    258c:	04 c0       	rjmp	.+8      	; 0x2596 <__fixsfsi+0x70>
    258e:	56 95       	lsr	r21
    2590:	47 95       	ror	r20
    2592:	37 95       	ror	r19
    2594:	27 95       	ror	r18
    2596:	8a 95       	dec	r24
    2598:	d2 f7       	brpl	.-12     	; 0x258e <__fixsfsi+0x68>
    259a:	66 23       	and	r22, r22
    259c:	81 f0       	breq	.+32     	; 0x25be <__fixsfsi+0x98>
    259e:	50 95       	com	r21
    25a0:	40 95       	com	r20
    25a2:	30 95       	com	r19
    25a4:	21 95       	neg	r18
    25a6:	3f 4f       	sbci	r19, 0xFF	; 255
    25a8:	4f 4f       	sbci	r20, 0xFF	; 255
    25aa:	5f 4f       	sbci	r21, 0xFF	; 255
    25ac:	08 c0       	rjmp	.+16     	; 0x25be <__fixsfsi+0x98>
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	30 e0       	ldi	r19, 0x00	; 0
    25b2:	a9 01       	movw	r20, r18
    25b4:	04 c0       	rjmp	.+8      	; 0x25be <__fixsfsi+0x98>
    25b6:	2f ef       	ldi	r18, 0xFF	; 255
    25b8:	3f ef       	ldi	r19, 0xFF	; 255
    25ba:	4f ef       	ldi	r20, 0xFF	; 255
    25bc:	5f e7       	ldi	r21, 0x7F	; 127
    25be:	b9 01       	movw	r22, r18
    25c0:	ca 01       	movw	r24, r20
    25c2:	2c 96       	adiw	r28, 0x0c	; 12
    25c4:	e2 e0       	ldi	r30, 0x02	; 2
    25c6:	0c 94 99 25 	jmp	0x4b32	; 0x4b32 <__epilogue_restores__+0x20>

000025ca <__floatunsisf>:
    25ca:	a8 e0       	ldi	r26, 0x08	; 8
    25cc:	b0 e0       	ldi	r27, 0x00	; 0
    25ce:	eb ee       	ldi	r30, 0xEB	; 235
    25d0:	f2 e1       	ldi	r31, 0x12	; 18
    25d2:	0c 94 77 25 	jmp	0x4aee	; 0x4aee <__prologue_saves__+0x14>
    25d6:	7b 01       	movw	r14, r22
    25d8:	8c 01       	movw	r16, r24
    25da:	1a 82       	std	Y+2, r1	; 0x02
    25dc:	61 15       	cp	r22, r1
    25de:	71 05       	cpc	r23, r1
    25e0:	81 05       	cpc	r24, r1
    25e2:	91 05       	cpc	r25, r1
    25e4:	19 f4       	brne	.+6      	; 0x25ec <__floatunsisf+0x22>
    25e6:	82 e0       	ldi	r24, 0x02	; 2
    25e8:	89 83       	std	Y+1, r24	; 0x01
    25ea:	5f c0       	rjmp	.+190    	; 0x26aa <__floatunsisf+0xe0>
    25ec:	83 e0       	ldi	r24, 0x03	; 3
    25ee:	89 83       	std	Y+1, r24	; 0x01
    25f0:	8e e1       	ldi	r24, 0x1E	; 30
    25f2:	c8 2e       	mov	r12, r24
    25f4:	d1 2c       	mov	r13, r1
    25f6:	dc 82       	std	Y+4, r13	; 0x04
    25f8:	cb 82       	std	Y+3, r12	; 0x03
    25fa:	ed 82       	std	Y+5, r14	; 0x05
    25fc:	fe 82       	std	Y+6, r15	; 0x06
    25fe:	0f 83       	std	Y+7, r16	; 0x07
    2600:	18 87       	std	Y+8, r17	; 0x08
    2602:	c8 01       	movw	r24, r16
    2604:	b7 01       	movw	r22, r14
    2606:	0e 94 5d 13 	call	0x26ba	; 0x26ba <__clzsi2>
    260a:	fc 01       	movw	r30, r24
    260c:	31 97       	sbiw	r30, 0x01	; 1
    260e:	f7 ff       	sbrs	r31, 7
    2610:	3a c0       	rjmp	.+116    	; 0x2686 <__floatunsisf+0xbc>
    2612:	aa 27       	eor	r26, r26
    2614:	bb 27       	eor	r27, r27
    2616:	ae 1b       	sub	r26, r30
    2618:	bf 0b       	sbc	r27, r31
    261a:	21 e0       	ldi	r18, 0x01	; 1
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	40 e0       	ldi	r20, 0x00	; 0
    2620:	50 e0       	ldi	r21, 0x00	; 0
    2622:	0a 2e       	mov	r0, r26
    2624:	04 c0       	rjmp	.+8      	; 0x262e <__floatunsisf+0x64>
    2626:	22 0f       	add	r18, r18
    2628:	33 1f       	adc	r19, r19
    262a:	44 1f       	adc	r20, r20
    262c:	55 1f       	adc	r21, r21
    262e:	0a 94       	dec	r0
    2630:	d2 f7       	brpl	.-12     	; 0x2626 <__floatunsisf+0x5c>
    2632:	21 50       	subi	r18, 0x01	; 1
    2634:	30 40       	sbci	r19, 0x00	; 0
    2636:	40 40       	sbci	r20, 0x00	; 0
    2638:	50 40       	sbci	r21, 0x00	; 0
    263a:	2e 21       	and	r18, r14
    263c:	3f 21       	and	r19, r15
    263e:	40 23       	and	r20, r16
    2640:	51 23       	and	r21, r17
    2642:	61 e0       	ldi	r22, 0x01	; 1
    2644:	70 e0       	ldi	r23, 0x00	; 0
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	21 15       	cp	r18, r1
    264c:	31 05       	cpc	r19, r1
    264e:	41 05       	cpc	r20, r1
    2650:	51 05       	cpc	r21, r1
    2652:	19 f4       	brne	.+6      	; 0x265a <__floatunsisf+0x90>
    2654:	60 e0       	ldi	r22, 0x00	; 0
    2656:	70 e0       	ldi	r23, 0x00	; 0
    2658:	cb 01       	movw	r24, r22
    265a:	04 c0       	rjmp	.+8      	; 0x2664 <__floatunsisf+0x9a>
    265c:	16 95       	lsr	r17
    265e:	07 95       	ror	r16
    2660:	f7 94       	ror	r15
    2662:	e7 94       	ror	r14
    2664:	aa 95       	dec	r26
    2666:	d2 f7       	brpl	.-12     	; 0x265c <__floatunsisf+0x92>
    2668:	e6 2a       	or	r14, r22
    266a:	f7 2a       	or	r15, r23
    266c:	08 2b       	or	r16, r24
    266e:	19 2b       	or	r17, r25
    2670:	ed 82       	std	Y+5, r14	; 0x05
    2672:	fe 82       	std	Y+6, r15	; 0x06
    2674:	0f 83       	std	Y+7, r16	; 0x07
    2676:	18 87       	std	Y+8, r17	; 0x08
    2678:	8e e1       	ldi	r24, 0x1E	; 30
    267a:	90 e0       	ldi	r25, 0x00	; 0
    267c:	8e 1b       	sub	r24, r30
    267e:	9f 0b       	sbc	r25, r31
    2680:	9c 83       	std	Y+4, r25	; 0x04
    2682:	8b 83       	std	Y+3, r24	; 0x03
    2684:	12 c0       	rjmp	.+36     	; 0x26aa <__floatunsisf+0xe0>
    2686:	30 97       	sbiw	r30, 0x00	; 0
    2688:	81 f0       	breq	.+32     	; 0x26aa <__floatunsisf+0xe0>
    268a:	0e 2e       	mov	r0, r30
    268c:	04 c0       	rjmp	.+8      	; 0x2696 <__floatunsisf+0xcc>
    268e:	ee 0c       	add	r14, r14
    2690:	ff 1c       	adc	r15, r15
    2692:	00 1f       	adc	r16, r16
    2694:	11 1f       	adc	r17, r17
    2696:	0a 94       	dec	r0
    2698:	d2 f7       	brpl	.-12     	; 0x268e <__floatunsisf+0xc4>
    269a:	ed 82       	std	Y+5, r14	; 0x05
    269c:	fe 82       	std	Y+6, r15	; 0x06
    269e:	0f 83       	std	Y+7, r16	; 0x07
    26a0:	18 87       	std	Y+8, r17	; 0x08
    26a2:	ce 1a       	sub	r12, r30
    26a4:	df 0a       	sbc	r13, r31
    26a6:	dc 82       	std	Y+4, r13	; 0x04
    26a8:	cb 82       	std	Y+3, r12	; 0x03
    26aa:	ce 01       	movw	r24, r28
    26ac:	01 96       	adiw	r24, 0x01	; 1
    26ae:	0e 94 b7 13 	call	0x276e	; 0x276e <__pack_f>
    26b2:	28 96       	adiw	r28, 0x08	; 8
    26b4:	e8 e0       	ldi	r30, 0x08	; 8
    26b6:	0c 94 93 25 	jmp	0x4b26	; 0x4b26 <__epilogue_restores__+0x14>

000026ba <__clzsi2>:
    26ba:	af 92       	push	r10
    26bc:	bf 92       	push	r11
    26be:	cf 92       	push	r12
    26c0:	df 92       	push	r13
    26c2:	ef 92       	push	r14
    26c4:	ff 92       	push	r15
    26c6:	0f 93       	push	r16
    26c8:	1f 93       	push	r17
    26ca:	7b 01       	movw	r14, r22
    26cc:	8c 01       	movw	r16, r24
    26ce:	80 e0       	ldi	r24, 0x00	; 0
    26d0:	e8 16       	cp	r14, r24
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	f8 06       	cpc	r15, r24
    26d6:	81 e0       	ldi	r24, 0x01	; 1
    26d8:	08 07       	cpc	r16, r24
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	18 07       	cpc	r17, r24
    26de:	58 f4       	brcc	.+22     	; 0x26f6 <__clzsi2+0x3c>
    26e0:	ef ef       	ldi	r30, 0xFF	; 255
    26e2:	ee 16       	cp	r14, r30
    26e4:	f1 04       	cpc	r15, r1
    26e6:	01 05       	cpc	r16, r1
    26e8:	11 05       	cpc	r17, r1
    26ea:	09 f0       	breq	.+2      	; 0x26ee <__clzsi2+0x34>
    26ec:	90 f4       	brcc	.+36     	; 0x2712 <__clzsi2+0x58>
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	dc 01       	movw	r26, r24
    26f4:	17 c0       	rjmp	.+46     	; 0x2724 <__clzsi2+0x6a>
    26f6:	f0 e0       	ldi	r31, 0x00	; 0
    26f8:	ef 16       	cp	r14, r31
    26fa:	f0 e0       	ldi	r31, 0x00	; 0
    26fc:	ff 06       	cpc	r15, r31
    26fe:	f0 e0       	ldi	r31, 0x00	; 0
    2700:	0f 07       	cpc	r16, r31
    2702:	f1 e0       	ldi	r31, 0x01	; 1
    2704:	1f 07       	cpc	r17, r31
    2706:	50 f4       	brcc	.+20     	; 0x271c <__clzsi2+0x62>
    2708:	80 e1       	ldi	r24, 0x10	; 16
    270a:	90 e0       	ldi	r25, 0x00	; 0
    270c:	a0 e0       	ldi	r26, 0x00	; 0
    270e:	b0 e0       	ldi	r27, 0x00	; 0
    2710:	09 c0       	rjmp	.+18     	; 0x2724 <__clzsi2+0x6a>
    2712:	88 e0       	ldi	r24, 0x08	; 8
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	a0 e0       	ldi	r26, 0x00	; 0
    2718:	b0 e0       	ldi	r27, 0x00	; 0
    271a:	04 c0       	rjmp	.+8      	; 0x2724 <__clzsi2+0x6a>
    271c:	88 e1       	ldi	r24, 0x18	; 24
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	a0 e0       	ldi	r26, 0x00	; 0
    2722:	b0 e0       	ldi	r27, 0x00	; 0
    2724:	20 e2       	ldi	r18, 0x20	; 32
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	40 e0       	ldi	r20, 0x00	; 0
    272a:	50 e0       	ldi	r21, 0x00	; 0
    272c:	28 1b       	sub	r18, r24
    272e:	39 0b       	sbc	r19, r25
    2730:	4a 0b       	sbc	r20, r26
    2732:	5b 0b       	sbc	r21, r27
    2734:	57 01       	movw	r10, r14
    2736:	68 01       	movw	r12, r16
    2738:	04 c0       	rjmp	.+8      	; 0x2742 <__clzsi2+0x88>
    273a:	d6 94       	lsr	r13
    273c:	c7 94       	ror	r12
    273e:	b7 94       	ror	r11
    2740:	a7 94       	ror	r10
    2742:	8a 95       	dec	r24
    2744:	d2 f7       	brpl	.-12     	; 0x273a <__clzsi2+0x80>
    2746:	d6 01       	movw	r26, r12
    2748:	c5 01       	movw	r24, r10
    274a:	8a 51       	subi	r24, 0x1A	; 26
    274c:	9e 4f       	sbci	r25, 0xFE	; 254
    274e:	fc 01       	movw	r30, r24
    2750:	80 81       	ld	r24, Z
    2752:	28 1b       	sub	r18, r24
    2754:	31 09       	sbc	r19, r1
    2756:	41 09       	sbc	r20, r1
    2758:	51 09       	sbc	r21, r1
    275a:	c9 01       	movw	r24, r18
    275c:	1f 91       	pop	r17
    275e:	0f 91       	pop	r16
    2760:	ff 90       	pop	r15
    2762:	ef 90       	pop	r14
    2764:	df 90       	pop	r13
    2766:	cf 90       	pop	r12
    2768:	bf 90       	pop	r11
    276a:	af 90       	pop	r10
    276c:	08 95       	ret

0000276e <__pack_f>:
    276e:	ef 92       	push	r14
    2770:	ff 92       	push	r15
    2772:	0f 93       	push	r16
    2774:	1f 93       	push	r17
    2776:	cf 93       	push	r28
    2778:	df 93       	push	r29
    277a:	fc 01       	movw	r30, r24
    277c:	24 81       	ldd	r18, Z+4	; 0x04
    277e:	35 81       	ldd	r19, Z+5	; 0x05
    2780:	46 81       	ldd	r20, Z+6	; 0x06
    2782:	57 81       	ldd	r21, Z+7	; 0x07
    2784:	61 81       	ldd	r22, Z+1	; 0x01
    2786:	80 81       	ld	r24, Z
    2788:	82 30       	cpi	r24, 0x02	; 2
    278a:	20 f4       	brcc	.+8      	; 0x2794 <__pack_f+0x26>
    278c:	40 61       	ori	r20, 0x10	; 16
    278e:	ef ef       	ldi	r30, 0xFF	; 255
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	a3 c0       	rjmp	.+326    	; 0x28da <__pack_f+0x16c>
    2794:	84 30       	cpi	r24, 0x04	; 4
    2796:	09 f4       	brne	.+2      	; 0x279a <__pack_f+0x2c>
    2798:	9b c0       	rjmp	.+310    	; 0x28d0 <__pack_f+0x162>
    279a:	82 30       	cpi	r24, 0x02	; 2
    279c:	09 f4       	brne	.+2      	; 0x27a0 <__pack_f+0x32>
    279e:	92 c0       	rjmp	.+292    	; 0x28c4 <__pack_f+0x156>
    27a0:	21 15       	cp	r18, r1
    27a2:	31 05       	cpc	r19, r1
    27a4:	41 05       	cpc	r20, r1
    27a6:	51 05       	cpc	r21, r1
    27a8:	09 f4       	brne	.+2      	; 0x27ac <__pack_f+0x3e>
    27aa:	8f c0       	rjmp	.+286    	; 0x28ca <__pack_f+0x15c>
    27ac:	02 80       	ldd	r0, Z+2	; 0x02
    27ae:	f3 81       	ldd	r31, Z+3	; 0x03
    27b0:	e0 2d       	mov	r30, r0
    27b2:	8f ef       	ldi	r24, 0xFF	; 255
    27b4:	e2 38       	cpi	r30, 0x82	; 130
    27b6:	f8 07       	cpc	r31, r24
    27b8:	0c f0       	brlt	.+2      	; 0x27bc <__pack_f+0x4e>
    27ba:	5a c0       	rjmp	.+180    	; 0x2870 <__pack_f+0x102>
    27bc:	c2 e8       	ldi	r28, 0x82	; 130
    27be:	df ef       	ldi	r29, 0xFF	; 255
    27c0:	ce 1b       	sub	r28, r30
    27c2:	df 0b       	sbc	r29, r31
    27c4:	ca 31       	cpi	r28, 0x1A	; 26
    27c6:	d1 05       	cpc	r29, r1
    27c8:	6c f5       	brge	.+90     	; 0x2824 <__pack_f+0xb6>
    27ca:	79 01       	movw	r14, r18
    27cc:	8a 01       	movw	r16, r20
    27ce:	0c 2e       	mov	r0, r28
    27d0:	04 c0       	rjmp	.+8      	; 0x27da <__pack_f+0x6c>
    27d2:	16 95       	lsr	r17
    27d4:	07 95       	ror	r16
    27d6:	f7 94       	ror	r15
    27d8:	e7 94       	ror	r14
    27da:	0a 94       	dec	r0
    27dc:	d2 f7       	brpl	.-12     	; 0x27d2 <__pack_f+0x64>
    27de:	81 e0       	ldi	r24, 0x01	; 1
    27e0:	90 e0       	ldi	r25, 0x00	; 0
    27e2:	a0 e0       	ldi	r26, 0x00	; 0
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	0c 2e       	mov	r0, r28
    27e8:	04 c0       	rjmp	.+8      	; 0x27f2 <__pack_f+0x84>
    27ea:	88 0f       	add	r24, r24
    27ec:	99 1f       	adc	r25, r25
    27ee:	aa 1f       	adc	r26, r26
    27f0:	bb 1f       	adc	r27, r27
    27f2:	0a 94       	dec	r0
    27f4:	d2 f7       	brpl	.-12     	; 0x27ea <__pack_f+0x7c>
    27f6:	01 97       	sbiw	r24, 0x01	; 1
    27f8:	a1 09       	sbc	r26, r1
    27fa:	b1 09       	sbc	r27, r1
    27fc:	82 23       	and	r24, r18
    27fe:	93 23       	and	r25, r19
    2800:	a4 23       	and	r26, r20
    2802:	b5 23       	and	r27, r21
    2804:	21 e0       	ldi	r18, 0x01	; 1
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	40 e0       	ldi	r20, 0x00	; 0
    280a:	50 e0       	ldi	r21, 0x00	; 0
    280c:	00 97       	sbiw	r24, 0x00	; 0
    280e:	a1 05       	cpc	r26, r1
    2810:	b1 05       	cpc	r27, r1
    2812:	19 f4       	brne	.+6      	; 0x281a <__pack_f+0xac>
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	a9 01       	movw	r20, r18
    281a:	2e 29       	or	r18, r14
    281c:	3f 29       	or	r19, r15
    281e:	40 2b       	or	r20, r16
    2820:	51 2b       	or	r21, r17
    2822:	03 c0       	rjmp	.+6      	; 0x282a <__pack_f+0xbc>
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	a9 01       	movw	r20, r18
    282a:	da 01       	movw	r26, r20
    282c:	c9 01       	movw	r24, r18
    282e:	8f 77       	andi	r24, 0x7F	; 127
    2830:	90 70       	andi	r25, 0x00	; 0
    2832:	a0 70       	andi	r26, 0x00	; 0
    2834:	b0 70       	andi	r27, 0x00	; 0
    2836:	80 34       	cpi	r24, 0x40	; 64
    2838:	91 05       	cpc	r25, r1
    283a:	a1 05       	cpc	r26, r1
    283c:	b1 05       	cpc	r27, r1
    283e:	39 f4       	brne	.+14     	; 0x284e <__pack_f+0xe0>
    2840:	27 ff       	sbrs	r18, 7
    2842:	09 c0       	rjmp	.+18     	; 0x2856 <__pack_f+0xe8>
    2844:	20 5c       	subi	r18, 0xC0	; 192
    2846:	3f 4f       	sbci	r19, 0xFF	; 255
    2848:	4f 4f       	sbci	r20, 0xFF	; 255
    284a:	5f 4f       	sbci	r21, 0xFF	; 255
    284c:	04 c0       	rjmp	.+8      	; 0x2856 <__pack_f+0xe8>
    284e:	21 5c       	subi	r18, 0xC1	; 193
    2850:	3f 4f       	sbci	r19, 0xFF	; 255
    2852:	4f 4f       	sbci	r20, 0xFF	; 255
    2854:	5f 4f       	sbci	r21, 0xFF	; 255
    2856:	e1 e0       	ldi	r30, 0x01	; 1
    2858:	f0 e0       	ldi	r31, 0x00	; 0
    285a:	20 30       	cpi	r18, 0x00	; 0
    285c:	80 e0       	ldi	r24, 0x00	; 0
    285e:	38 07       	cpc	r19, r24
    2860:	80 e0       	ldi	r24, 0x00	; 0
    2862:	48 07       	cpc	r20, r24
    2864:	80 e4       	ldi	r24, 0x40	; 64
    2866:	58 07       	cpc	r21, r24
    2868:	28 f5       	brcc	.+74     	; 0x28b4 <__pack_f+0x146>
    286a:	e0 e0       	ldi	r30, 0x00	; 0
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	22 c0       	rjmp	.+68     	; 0x28b4 <__pack_f+0x146>
    2870:	e0 38       	cpi	r30, 0x80	; 128
    2872:	f1 05       	cpc	r31, r1
    2874:	6c f5       	brge	.+90     	; 0x28d0 <__pack_f+0x162>
    2876:	e1 58       	subi	r30, 0x81	; 129
    2878:	ff 4f       	sbci	r31, 0xFF	; 255
    287a:	da 01       	movw	r26, r20
    287c:	c9 01       	movw	r24, r18
    287e:	8f 77       	andi	r24, 0x7F	; 127
    2880:	90 70       	andi	r25, 0x00	; 0
    2882:	a0 70       	andi	r26, 0x00	; 0
    2884:	b0 70       	andi	r27, 0x00	; 0
    2886:	80 34       	cpi	r24, 0x40	; 64
    2888:	91 05       	cpc	r25, r1
    288a:	a1 05       	cpc	r26, r1
    288c:	b1 05       	cpc	r27, r1
    288e:	39 f4       	brne	.+14     	; 0x289e <__pack_f+0x130>
    2890:	27 ff       	sbrs	r18, 7
    2892:	09 c0       	rjmp	.+18     	; 0x28a6 <__pack_f+0x138>
    2894:	20 5c       	subi	r18, 0xC0	; 192
    2896:	3f 4f       	sbci	r19, 0xFF	; 255
    2898:	4f 4f       	sbci	r20, 0xFF	; 255
    289a:	5f 4f       	sbci	r21, 0xFF	; 255
    289c:	04 c0       	rjmp	.+8      	; 0x28a6 <__pack_f+0x138>
    289e:	21 5c       	subi	r18, 0xC1	; 193
    28a0:	3f 4f       	sbci	r19, 0xFF	; 255
    28a2:	4f 4f       	sbci	r20, 0xFF	; 255
    28a4:	5f 4f       	sbci	r21, 0xFF	; 255
    28a6:	57 ff       	sbrs	r21, 7
    28a8:	05 c0       	rjmp	.+10     	; 0x28b4 <__pack_f+0x146>
    28aa:	56 95       	lsr	r21
    28ac:	47 95       	ror	r20
    28ae:	37 95       	ror	r19
    28b0:	27 95       	ror	r18
    28b2:	31 96       	adiw	r30, 0x01	; 1
    28b4:	87 e0       	ldi	r24, 0x07	; 7
    28b6:	56 95       	lsr	r21
    28b8:	47 95       	ror	r20
    28ba:	37 95       	ror	r19
    28bc:	27 95       	ror	r18
    28be:	8a 95       	dec	r24
    28c0:	d1 f7       	brne	.-12     	; 0x28b6 <__pack_f+0x148>
    28c2:	0b c0       	rjmp	.+22     	; 0x28da <__pack_f+0x16c>
    28c4:	e0 e0       	ldi	r30, 0x00	; 0
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	05 c0       	rjmp	.+10     	; 0x28d4 <__pack_f+0x166>
    28ca:	e0 e0       	ldi	r30, 0x00	; 0
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	05 c0       	rjmp	.+10     	; 0x28da <__pack_f+0x16c>
    28d0:	ef ef       	ldi	r30, 0xFF	; 255
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	20 e0       	ldi	r18, 0x00	; 0
    28d6:	30 e0       	ldi	r19, 0x00	; 0
    28d8:	a9 01       	movw	r20, r18
    28da:	8e 2f       	mov	r24, r30
    28dc:	87 95       	ror	r24
    28de:	88 27       	eor	r24, r24
    28e0:	87 95       	ror	r24
    28e2:	94 2f       	mov	r25, r20
    28e4:	9f 77       	andi	r25, 0x7F	; 127
    28e6:	67 95       	ror	r22
    28e8:	66 27       	eor	r22, r22
    28ea:	67 95       	ror	r22
    28ec:	e6 95       	lsr	r30
    28ee:	e2 2e       	mov	r14, r18
    28f0:	a9 2f       	mov	r26, r25
    28f2:	a8 2b       	or	r26, r24
    28f4:	fe 2f       	mov	r31, r30
    28f6:	f6 2b       	or	r31, r22
    28f8:	62 2f       	mov	r22, r18
    28fa:	73 2f       	mov	r23, r19
    28fc:	8a 2f       	mov	r24, r26
    28fe:	9f 2f       	mov	r25, r31
    2900:	cd b7       	in	r28, 0x3d	; 61
    2902:	de b7       	in	r29, 0x3e	; 62
    2904:	e6 e0       	ldi	r30, 0x06	; 6
    2906:	0c 94 95 25 	jmp	0x4b2a	; 0x4b2a <__epilogue_restores__+0x18>

0000290a <__unpack_f>:
    290a:	dc 01       	movw	r26, r24
    290c:	fb 01       	movw	r30, r22
    290e:	2c 91       	ld	r18, X
    2910:	11 96       	adiw	r26, 0x01	; 1
    2912:	3c 91       	ld	r19, X
    2914:	11 97       	sbiw	r26, 0x01	; 1
    2916:	12 96       	adiw	r26, 0x02	; 2
    2918:	8c 91       	ld	r24, X
    291a:	12 97       	sbiw	r26, 0x02	; 2
    291c:	48 2f       	mov	r20, r24
    291e:	4f 77       	andi	r20, 0x7F	; 127
    2920:	50 e0       	ldi	r21, 0x00	; 0
    2922:	98 2f       	mov	r25, r24
    2924:	99 1f       	adc	r25, r25
    2926:	99 27       	eor	r25, r25
    2928:	99 1f       	adc	r25, r25
    292a:	13 96       	adiw	r26, 0x03	; 3
    292c:	6c 91       	ld	r22, X
    292e:	13 97       	sbiw	r26, 0x03	; 3
    2930:	86 2f       	mov	r24, r22
    2932:	88 0f       	add	r24, r24
    2934:	89 2b       	or	r24, r25
    2936:	90 e0       	ldi	r25, 0x00	; 0
    2938:	66 1f       	adc	r22, r22
    293a:	66 27       	eor	r22, r22
    293c:	66 1f       	adc	r22, r22
    293e:	61 83       	std	Z+1, r22	; 0x01
    2940:	00 97       	sbiw	r24, 0x00	; 0
    2942:	39 f5       	brne	.+78     	; 0x2992 <__unpack_f+0x88>
    2944:	21 15       	cp	r18, r1
    2946:	31 05       	cpc	r19, r1
    2948:	41 05       	cpc	r20, r1
    294a:	51 05       	cpc	r21, r1
    294c:	11 f4       	brne	.+4      	; 0x2952 <__unpack_f+0x48>
    294e:	82 e0       	ldi	r24, 0x02	; 2
    2950:	29 c0       	rjmp	.+82     	; 0x29a4 <__unpack_f+0x9a>
    2952:	82 e8       	ldi	r24, 0x82	; 130
    2954:	9f ef       	ldi	r25, 0xFF	; 255
    2956:	93 83       	std	Z+3, r25	; 0x03
    2958:	82 83       	std	Z+2, r24	; 0x02
    295a:	67 e0       	ldi	r22, 0x07	; 7
    295c:	22 0f       	add	r18, r18
    295e:	33 1f       	adc	r19, r19
    2960:	44 1f       	adc	r20, r20
    2962:	55 1f       	adc	r21, r21
    2964:	6a 95       	dec	r22
    2966:	d1 f7       	brne	.-12     	; 0x295c <__unpack_f+0x52>
    2968:	83 e0       	ldi	r24, 0x03	; 3
    296a:	80 83       	st	Z, r24
    296c:	09 c0       	rjmp	.+18     	; 0x2980 <__unpack_f+0x76>
    296e:	22 0f       	add	r18, r18
    2970:	33 1f       	adc	r19, r19
    2972:	44 1f       	adc	r20, r20
    2974:	55 1f       	adc	r21, r21
    2976:	82 81       	ldd	r24, Z+2	; 0x02
    2978:	93 81       	ldd	r25, Z+3	; 0x03
    297a:	01 97       	sbiw	r24, 0x01	; 1
    297c:	93 83       	std	Z+3, r25	; 0x03
    297e:	82 83       	std	Z+2, r24	; 0x02
    2980:	20 30       	cpi	r18, 0x00	; 0
    2982:	80 e0       	ldi	r24, 0x00	; 0
    2984:	38 07       	cpc	r19, r24
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	48 07       	cpc	r20, r24
    298a:	80 e4       	ldi	r24, 0x40	; 64
    298c:	58 07       	cpc	r21, r24
    298e:	78 f3       	brcs	.-34     	; 0x296e <__unpack_f+0x64>
    2990:	20 c0       	rjmp	.+64     	; 0x29d2 <__unpack_f+0xc8>
    2992:	8f 3f       	cpi	r24, 0xFF	; 255
    2994:	91 05       	cpc	r25, r1
    2996:	79 f4       	brne	.+30     	; 0x29b6 <__unpack_f+0xac>
    2998:	21 15       	cp	r18, r1
    299a:	31 05       	cpc	r19, r1
    299c:	41 05       	cpc	r20, r1
    299e:	51 05       	cpc	r21, r1
    29a0:	19 f4       	brne	.+6      	; 0x29a8 <__unpack_f+0x9e>
    29a2:	84 e0       	ldi	r24, 0x04	; 4
    29a4:	80 83       	st	Z, r24
    29a6:	08 95       	ret
    29a8:	44 ff       	sbrs	r20, 4
    29aa:	03 c0       	rjmp	.+6      	; 0x29b2 <__unpack_f+0xa8>
    29ac:	81 e0       	ldi	r24, 0x01	; 1
    29ae:	80 83       	st	Z, r24
    29b0:	10 c0       	rjmp	.+32     	; 0x29d2 <__unpack_f+0xc8>
    29b2:	10 82       	st	Z, r1
    29b4:	0e c0       	rjmp	.+28     	; 0x29d2 <__unpack_f+0xc8>
    29b6:	8f 57       	subi	r24, 0x7F	; 127
    29b8:	90 40       	sbci	r25, 0x00	; 0
    29ba:	93 83       	std	Z+3, r25	; 0x03
    29bc:	82 83       	std	Z+2, r24	; 0x02
    29be:	83 e0       	ldi	r24, 0x03	; 3
    29c0:	80 83       	st	Z, r24
    29c2:	87 e0       	ldi	r24, 0x07	; 7
    29c4:	22 0f       	add	r18, r18
    29c6:	33 1f       	adc	r19, r19
    29c8:	44 1f       	adc	r20, r20
    29ca:	55 1f       	adc	r21, r21
    29cc:	8a 95       	dec	r24
    29ce:	d1 f7       	brne	.-12     	; 0x29c4 <__unpack_f+0xba>
    29d0:	50 64       	ori	r21, 0x40	; 64
    29d2:	24 83       	std	Z+4, r18	; 0x04
    29d4:	35 83       	std	Z+5, r19	; 0x05
    29d6:	46 83       	std	Z+6, r20	; 0x06
    29d8:	57 83       	std	Z+7, r21	; 0x07
    29da:	08 95       	ret

000029dc <__fpcmp_parts_f>:
    29dc:	fc 01       	movw	r30, r24
    29de:	db 01       	movw	r26, r22
    29e0:	90 81       	ld	r25, Z
    29e2:	92 30       	cpi	r25, 0x02	; 2
    29e4:	08 f4       	brcc	.+2      	; 0x29e8 <__fpcmp_parts_f+0xc>
    29e6:	49 c0       	rjmp	.+146    	; 0x2a7a <__fpcmp_parts_f+0x9e>
    29e8:	8c 91       	ld	r24, X
    29ea:	82 30       	cpi	r24, 0x02	; 2
    29ec:	08 f4       	brcc	.+2      	; 0x29f0 <__fpcmp_parts_f+0x14>
    29ee:	45 c0       	rjmp	.+138    	; 0x2a7a <__fpcmp_parts_f+0x9e>
    29f0:	94 30       	cpi	r25, 0x04	; 4
    29f2:	51 f4       	brne	.+20     	; 0x2a08 <__fpcmp_parts_f+0x2c>
    29f4:	61 81       	ldd	r22, Z+1	; 0x01
    29f6:	84 30       	cpi	r24, 0x04	; 4
    29f8:	b1 f5       	brne	.+108    	; 0x2a66 <__fpcmp_parts_f+0x8a>
    29fa:	11 96       	adiw	r26, 0x01	; 1
    29fc:	2c 91       	ld	r18, X
    29fe:	11 97       	sbiw	r26, 0x01	; 1
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	26 1b       	sub	r18, r22
    2a04:	31 09       	sbc	r19, r1
    2a06:	41 c0       	rjmp	.+130    	; 0x2a8a <__fpcmp_parts_f+0xae>
    2a08:	84 30       	cpi	r24, 0x04	; 4
    2a0a:	21 f0       	breq	.+8      	; 0x2a14 <__fpcmp_parts_f+0x38>
    2a0c:	92 30       	cpi	r25, 0x02	; 2
    2a0e:	41 f4       	brne	.+16     	; 0x2a20 <__fpcmp_parts_f+0x44>
    2a10:	82 30       	cpi	r24, 0x02	; 2
    2a12:	b1 f1       	breq	.+108    	; 0x2a80 <__fpcmp_parts_f+0xa4>
    2a14:	11 96       	adiw	r26, 0x01	; 1
    2a16:	8c 91       	ld	r24, X
    2a18:	11 97       	sbiw	r26, 0x01	; 1
    2a1a:	88 23       	and	r24, r24
    2a1c:	a1 f1       	breq	.+104    	; 0x2a86 <__fpcmp_parts_f+0xaa>
    2a1e:	2d c0       	rjmp	.+90     	; 0x2a7a <__fpcmp_parts_f+0x9e>
    2a20:	61 81       	ldd	r22, Z+1	; 0x01
    2a22:	82 30       	cpi	r24, 0x02	; 2
    2a24:	01 f1       	breq	.+64     	; 0x2a66 <__fpcmp_parts_f+0x8a>
    2a26:	11 96       	adiw	r26, 0x01	; 1
    2a28:	8c 91       	ld	r24, X
    2a2a:	11 97       	sbiw	r26, 0x01	; 1
    2a2c:	68 17       	cp	r22, r24
    2a2e:	d9 f4       	brne	.+54     	; 0x2a66 <__fpcmp_parts_f+0x8a>
    2a30:	22 81       	ldd	r18, Z+2	; 0x02
    2a32:	33 81       	ldd	r19, Z+3	; 0x03
    2a34:	12 96       	adiw	r26, 0x02	; 2
    2a36:	8d 91       	ld	r24, X+
    2a38:	9c 91       	ld	r25, X
    2a3a:	13 97       	sbiw	r26, 0x03	; 3
    2a3c:	82 17       	cp	r24, r18
    2a3e:	93 07       	cpc	r25, r19
    2a40:	94 f0       	brlt	.+36     	; 0x2a66 <__fpcmp_parts_f+0x8a>
    2a42:	28 17       	cp	r18, r24
    2a44:	39 07       	cpc	r19, r25
    2a46:	bc f0       	brlt	.+46     	; 0x2a76 <__fpcmp_parts_f+0x9a>
    2a48:	24 81       	ldd	r18, Z+4	; 0x04
    2a4a:	35 81       	ldd	r19, Z+5	; 0x05
    2a4c:	46 81       	ldd	r20, Z+6	; 0x06
    2a4e:	57 81       	ldd	r21, Z+7	; 0x07
    2a50:	14 96       	adiw	r26, 0x04	; 4
    2a52:	8d 91       	ld	r24, X+
    2a54:	9d 91       	ld	r25, X+
    2a56:	0d 90       	ld	r0, X+
    2a58:	bc 91       	ld	r27, X
    2a5a:	a0 2d       	mov	r26, r0
    2a5c:	82 17       	cp	r24, r18
    2a5e:	93 07       	cpc	r25, r19
    2a60:	a4 07       	cpc	r26, r20
    2a62:	b5 07       	cpc	r27, r21
    2a64:	18 f4       	brcc	.+6      	; 0x2a6c <__fpcmp_parts_f+0x90>
    2a66:	66 23       	and	r22, r22
    2a68:	41 f0       	breq	.+16     	; 0x2a7a <__fpcmp_parts_f+0x9e>
    2a6a:	0d c0       	rjmp	.+26     	; 0x2a86 <__fpcmp_parts_f+0xaa>
    2a6c:	28 17       	cp	r18, r24
    2a6e:	39 07       	cpc	r19, r25
    2a70:	4a 07       	cpc	r20, r26
    2a72:	5b 07       	cpc	r21, r27
    2a74:	28 f4       	brcc	.+10     	; 0x2a80 <__fpcmp_parts_f+0xa4>
    2a76:	66 23       	and	r22, r22
    2a78:	31 f0       	breq	.+12     	; 0x2a86 <__fpcmp_parts_f+0xaa>
    2a7a:	21 e0       	ldi	r18, 0x01	; 1
    2a7c:	30 e0       	ldi	r19, 0x00	; 0
    2a7e:	05 c0       	rjmp	.+10     	; 0x2a8a <__fpcmp_parts_f+0xae>
    2a80:	20 e0       	ldi	r18, 0x00	; 0
    2a82:	30 e0       	ldi	r19, 0x00	; 0
    2a84:	02 c0       	rjmp	.+4      	; 0x2a8a <__fpcmp_parts_f+0xae>
    2a86:	2f ef       	ldi	r18, 0xFF	; 255
    2a88:	3f ef       	ldi	r19, 0xFF	; 255
    2a8a:	c9 01       	movw	r24, r18
    2a8c:	08 95       	ret

00002a8e <analogReference>:
    2a8e:	80 93 ec 02 	sts	0x02EC, r24
    2a92:	08 95       	ret

00002a94 <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2a94:	8e 30       	cpi	r24, 0x0E	; 14
    2a96:	08 f0       	brcs	.+2      	; 0x2a9a <analogRead+0x6>
    2a98:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2a9a:	87 70       	andi	r24, 0x07	; 7
    2a9c:	90 91 ec 02 	lds	r25, 0x02EC
    2aa0:	92 95       	swap	r25
    2aa2:	99 0f       	add	r25, r25
    2aa4:	99 0f       	add	r25, r25
    2aa6:	90 7c       	andi	r25, 0xC0	; 192
    2aa8:	98 2b       	or	r25, r24
    2aaa:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2aae:	80 91 7a 00 	lds	r24, 0x007A
    2ab2:	80 64       	ori	r24, 0x40	; 64
    2ab4:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2ab8:	80 91 7a 00 	lds	r24, 0x007A
    2abc:	86 fd       	sbrc	r24, 6
    2abe:	fc cf       	rjmp	.-8      	; 0x2ab8 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2ac0:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    2ac4:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2ac8:	93 2f       	mov	r25, r19
    2aca:	80 e0       	ldi	r24, 0x00	; 0
    2acc:	30 e0       	ldi	r19, 0x00	; 0
    2ace:	28 2b       	or	r18, r24
    2ad0:	39 2b       	or	r19, r25
}
    2ad2:	c9 01       	movw	r24, r18
    2ad4:	08 95       	ret

00002ad6 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2ad6:	1f 93       	push	r17
    2ad8:	cf 93       	push	r28
    2ada:	df 93       	push	r29
    2adc:	18 2f       	mov	r17, r24
    2ade:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2ae0:	61 e0       	ldi	r22, 0x01	; 1
    2ae2:	0e 94 e0 16 	call	0x2dc0	; 0x2dc0 <pinMode>
	if (val == 0)
    2ae6:	20 97       	sbiw	r28, 0x00	; 0
    2ae8:	09 f4       	brne	.+2      	; 0x2aec <analogWrite+0x16>
    2aea:	4a c0       	rjmp	.+148    	; 0x2b80 <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    2aec:	cf 3f       	cpi	r28, 0xFF	; 255
    2aee:	d1 05       	cpc	r29, r1
    2af0:	09 f4       	brne	.+2      	; 0x2af4 <analogWrite+0x1e>
    2af2:	49 c0       	rjmp	.+146    	; 0x2b86 <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2af4:	e1 2f       	mov	r30, r17
    2af6:	f0 e0       	ldi	r31, 0x00	; 0
    2af8:	e2 55       	subi	r30, 0x52	; 82
    2afa:	ff 4f       	sbci	r31, 0xFF	; 255
    2afc:	e4 91       	lpm	r30, Z+
    2afe:	e3 30       	cpi	r30, 0x03	; 3
    2b00:	c1 f0       	breq	.+48     	; 0x2b32 <analogWrite+0x5c>
    2b02:	e4 30       	cpi	r30, 0x04	; 4
    2b04:	28 f4       	brcc	.+10     	; 0x2b10 <analogWrite+0x3a>
    2b06:	e1 30       	cpi	r30, 0x01	; 1
    2b08:	51 f0       	breq	.+20     	; 0x2b1e <analogWrite+0x48>
    2b0a:	e2 30       	cpi	r30, 0x02	; 2
    2b0c:	b1 f5       	brne	.+108    	; 0x2b7a <analogWrite+0xa4>
    2b0e:	0c c0       	rjmp	.+24     	; 0x2b28 <analogWrite+0x52>
    2b10:	e6 30       	cpi	r30, 0x06	; 6
    2b12:	19 f1       	breq	.+70     	; 0x2b5a <analogWrite+0x84>
    2b14:	e7 30       	cpi	r30, 0x07	; 7
    2b16:	49 f1       	breq	.+82     	; 0x2b6a <analogWrite+0x94>
    2b18:	e4 30       	cpi	r30, 0x04	; 4
    2b1a:	79 f5       	brne	.+94     	; 0x2b7a <analogWrite+0xa4>
    2b1c:	14 c0       	rjmp	.+40     	; 0x2b46 <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2b1e:	84 b5       	in	r24, 0x24	; 36
    2b20:	80 68       	ori	r24, 0x80	; 128
    2b22:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2b24:	c7 bd       	out	0x27, r28	; 39
				break;
    2b26:	33 c0       	rjmp	.+102    	; 0x2b8e <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2b28:	84 b5       	in	r24, 0x24	; 36
    2b2a:	80 62       	ori	r24, 0x20	; 32
    2b2c:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2b2e:	c8 bd       	out	0x28, r28	; 40
				break;
    2b30:	2e c0       	rjmp	.+92     	; 0x2b8e <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2b32:	80 91 80 00 	lds	r24, 0x0080
    2b36:	80 68       	ori	r24, 0x80	; 128
    2b38:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    2b3c:	d0 93 89 00 	sts	0x0089, r29
    2b40:	c0 93 88 00 	sts	0x0088, r28
				break;
    2b44:	24 c0       	rjmp	.+72     	; 0x2b8e <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2b46:	80 91 80 00 	lds	r24, 0x0080
    2b4a:	80 62       	ori	r24, 0x20	; 32
    2b4c:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    2b50:	d0 93 8b 00 	sts	0x008B, r29
    2b54:	c0 93 8a 00 	sts	0x008A, r28
				break;
    2b58:	1a c0       	rjmp	.+52     	; 0x2b8e <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2b5a:	80 91 b0 00 	lds	r24, 0x00B0
    2b5e:	80 68       	ori	r24, 0x80	; 128
    2b60:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    2b64:	c0 93 b3 00 	sts	0x00B3, r28
				break;
    2b68:	12 c0       	rjmp	.+36     	; 0x2b8e <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2b6a:	80 91 b0 00 	lds	r24, 0x00B0
    2b6e:	80 62       	ori	r24, 0x20	; 32
    2b70:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    2b74:	c0 93 b4 00 	sts	0x00B4, r28
				break;
    2b78:	0a c0       	rjmp	.+20     	; 0x2b8e <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2b7a:	c0 38       	cpi	r28, 0x80	; 128
    2b7c:	d1 05       	cpc	r29, r1
    2b7e:	1c f4       	brge	.+6      	; 0x2b86 <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    2b80:	81 2f       	mov	r24, r17
    2b82:	60 e0       	ldi	r22, 0x00	; 0
    2b84:	02 c0       	rjmp	.+4      	; 0x2b8a <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    2b86:	81 2f       	mov	r24, r17
    2b88:	61 e0       	ldi	r22, 0x01	; 1
    2b8a:	0e 94 04 17 	call	0x2e08	; 0x2e08 <digitalWrite>
				}
		}
	}
}
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	1f 91       	pop	r17
    2b94:	08 95       	ret

00002b96 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    2b96:	1f 92       	push	r1
    2b98:	0f 92       	push	r0
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	0f 92       	push	r0
    2b9e:	11 24       	eor	r1, r1
    2ba0:	2f 93       	push	r18
    2ba2:	3f 93       	push	r19
    2ba4:	8f 93       	push	r24
    2ba6:	9f 93       	push	r25
    2ba8:	af 93       	push	r26
    2baa:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2bac:	80 91 3b 03 	lds	r24, 0x033B
    2bb0:	90 91 3c 03 	lds	r25, 0x033C
    2bb4:	a0 91 3d 03 	lds	r26, 0x033D
    2bb8:	b0 91 3e 03 	lds	r27, 0x033E
	unsigned char f = timer0_fract;
    2bbc:	30 91 3f 03 	lds	r19, 0x033F

	m += MILLIS_INC;
    2bc0:	01 96       	adiw	r24, 0x01	; 1
    2bc2:	a1 1d       	adc	r26, r1
    2bc4:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    2bc6:	23 2f       	mov	r18, r19
    2bc8:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2bca:	2d 37       	cpi	r18, 0x7D	; 125
    2bcc:	20 f0       	brcs	.+8      	; 0x2bd6 <__vector_16+0x40>
		f -= FRACT_MAX;
    2bce:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    2bd0:	01 96       	adiw	r24, 0x01	; 1
    2bd2:	a1 1d       	adc	r26, r1
    2bd4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2bd6:	20 93 3f 03 	sts	0x033F, r18
	timer0_millis = m;
    2bda:	80 93 3b 03 	sts	0x033B, r24
    2bde:	90 93 3c 03 	sts	0x033C, r25
    2be2:	a0 93 3d 03 	sts	0x033D, r26
    2be6:	b0 93 3e 03 	sts	0x033E, r27
	timer0_overflow_count++;
    2bea:	80 91 37 03 	lds	r24, 0x0337
    2bee:	90 91 38 03 	lds	r25, 0x0338
    2bf2:	a0 91 39 03 	lds	r26, 0x0339
    2bf6:	b0 91 3a 03 	lds	r27, 0x033A
    2bfa:	01 96       	adiw	r24, 0x01	; 1
    2bfc:	a1 1d       	adc	r26, r1
    2bfe:	b1 1d       	adc	r27, r1
    2c00:	80 93 37 03 	sts	0x0337, r24
    2c04:	90 93 38 03 	sts	0x0338, r25
    2c08:	a0 93 39 03 	sts	0x0339, r26
    2c0c:	b0 93 3a 03 	sts	0x033A, r27
}
    2c10:	bf 91       	pop	r27
    2c12:	af 91       	pop	r26
    2c14:	9f 91       	pop	r25
    2c16:	8f 91       	pop	r24
    2c18:	3f 91       	pop	r19
    2c1a:	2f 91       	pop	r18
    2c1c:	0f 90       	pop	r0
    2c1e:	0f be       	out	0x3f, r0	; 63
    2c20:	0f 90       	pop	r0
    2c22:	1f 90       	pop	r1
    2c24:	18 95       	reti

00002c26 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2c26:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2c28:	f8 94       	cli
	m = timer0_millis;
    2c2a:	20 91 3b 03 	lds	r18, 0x033B
    2c2e:	30 91 3c 03 	lds	r19, 0x033C
    2c32:	40 91 3d 03 	lds	r20, 0x033D
    2c36:	50 91 3e 03 	lds	r21, 0x033E
	SREG = oldSREG;
    2c3a:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    2c3c:	b9 01       	movw	r22, r18
    2c3e:	ca 01       	movw	r24, r20
    2c40:	08 95       	ret

00002c42 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2c42:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    2c44:	f8 94       	cli
	m = timer0_overflow_count;
    2c46:	20 91 37 03 	lds	r18, 0x0337
    2c4a:	30 91 38 03 	lds	r19, 0x0338
    2c4e:	40 91 39 03 	lds	r20, 0x0339
    2c52:	50 91 3a 03 	lds	r21, 0x033A
#if defined(TCNT0)
	t = TCNT0;
    2c56:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2c58:	a8 9b       	sbis	0x15, 0	; 21
    2c5a:	06 c0       	rjmp	.+12     	; 0x2c68 <micros+0x26>
    2c5c:	8f 3f       	cpi	r24, 0xFF	; 255
    2c5e:	21 f0       	breq	.+8      	; 0x2c68 <micros+0x26>
		m++;
    2c60:	2f 5f       	subi	r18, 0xFF	; 255
    2c62:	3f 4f       	sbci	r19, 0xFF	; 255
    2c64:	4f 4f       	sbci	r20, 0xFF	; 255
    2c66:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2c68:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2c6a:	54 2f       	mov	r21, r20
    2c6c:	43 2f       	mov	r20, r19
    2c6e:	32 2f       	mov	r19, r18
    2c70:	22 27       	eor	r18, r18
    2c72:	28 0f       	add	r18, r24
    2c74:	31 1d       	adc	r19, r1
    2c76:	41 1d       	adc	r20, r1
    2c78:	51 1d       	adc	r21, r1
    2c7a:	82 e0       	ldi	r24, 0x02	; 2
    2c7c:	22 0f       	add	r18, r18
    2c7e:	33 1f       	adc	r19, r19
    2c80:	44 1f       	adc	r20, r20
    2c82:	55 1f       	adc	r21, r21
    2c84:	8a 95       	dec	r24
    2c86:	d1 f7       	brne	.-12     	; 0x2c7c <micros+0x3a>
}
    2c88:	b9 01       	movw	r22, r18
    2c8a:	ca 01       	movw	r24, r20
    2c8c:	08 95       	ret

00002c8e <delay>:

void delay(unsigned long ms)
{
    2c8e:	ef 92       	push	r14
    2c90:	ff 92       	push	r15
    2c92:	0f 93       	push	r16
    2c94:	1f 93       	push	r17
    2c96:	cf 93       	push	r28
    2c98:	df 93       	push	r29
    2c9a:	7b 01       	movw	r14, r22
    2c9c:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    2c9e:	0e 94 21 16 	call	0x2c42	; 0x2c42 <micros>
    2ca2:	eb 01       	movw	r28, r22

	while (ms > 0) {
    2ca4:	0f c0       	rjmp	.+30     	; 0x2cc4 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
    2ca6:	0e 94 21 16 	call	0x2c42	; 0x2c42 <micros>
    2caa:	6c 1b       	sub	r22, r28
    2cac:	7d 0b       	sbc	r23, r29
    2cae:	83 e0       	ldi	r24, 0x03	; 3
    2cb0:	68 3e       	cpi	r22, 0xE8	; 232
    2cb2:	78 07       	cpc	r23, r24
    2cb4:	38 f0       	brcs	.+14     	; 0x2cc4 <delay+0x36>
			ms--;
    2cb6:	08 94       	sec
    2cb8:	e1 08       	sbc	r14, r1
    2cba:	f1 08       	sbc	r15, r1
    2cbc:	01 09       	sbc	r16, r1
    2cbe:	11 09       	sbc	r17, r1
			start += 1000;
    2cc0:	c8 51       	subi	r28, 0x18	; 24
    2cc2:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    2cc4:	e1 14       	cp	r14, r1
    2cc6:	f1 04       	cpc	r15, r1
    2cc8:	01 05       	cpc	r16, r1
    2cca:	11 05       	cpc	r17, r1
    2ccc:	61 f7       	brne	.-40     	; 0x2ca6 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2cce:	df 91       	pop	r29
    2cd0:	cf 91       	pop	r28
    2cd2:	1f 91       	pop	r17
    2cd4:	0f 91       	pop	r16
    2cd6:	ff 90       	pop	r15
    2cd8:	ef 90       	pop	r14
    2cda:	08 95       	ret

00002cdc <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    2cdc:	01 97       	sbiw	r24, 0x01	; 1
    2cde:	39 f0       	breq	.+14     	; 0x2cee <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    2ce0:	88 0f       	add	r24, r24
    2ce2:	99 1f       	adc	r25, r25
    2ce4:	88 0f       	add	r24, r24
    2ce6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    2ce8:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    2cea:	01 97       	sbiw	r24, 0x01	; 1
    2cec:	f1 f7       	brne	.-4      	; 0x2cea <delayMicroseconds+0xe>
    2cee:	08 95       	ret

00002cf0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2cf0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2cf2:	84 b5       	in	r24, 0x24	; 36
    2cf4:	82 60       	ori	r24, 0x02	; 2
    2cf6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2cf8:	84 b5       	in	r24, 0x24	; 36
    2cfa:	81 60       	ori	r24, 0x01	; 1
    2cfc:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2cfe:	85 b5       	in	r24, 0x25	; 37
    2d00:	82 60       	ori	r24, 0x02	; 2
    2d02:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2d04:	85 b5       	in	r24, 0x25	; 37
    2d06:	81 60       	ori	r24, 0x01	; 1
    2d08:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2d0a:	ee e6       	ldi	r30, 0x6E	; 110
    2d0c:	f0 e0       	ldi	r31, 0x00	; 0
    2d0e:	80 81       	ld	r24, Z
    2d10:	81 60       	ori	r24, 0x01	; 1
    2d12:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    2d14:	e1 e8       	ldi	r30, 0x81	; 129
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    2d1a:	80 81       	ld	r24, Z
    2d1c:	82 60       	ori	r24, 0x02	; 2
    2d1e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    2d20:	80 81       	ld	r24, Z
    2d22:	81 60       	ori	r24, 0x01	; 1
    2d24:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    2d26:	e0 e8       	ldi	r30, 0x80	; 128
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	81 60       	ori	r24, 0x01	; 1
    2d2e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    2d30:	e1 eb       	ldi	r30, 0xB1	; 177
    2d32:	f0 e0       	ldi	r31, 0x00	; 0
    2d34:	80 81       	ld	r24, Z
    2d36:	84 60       	ori	r24, 0x04	; 4
    2d38:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    2d3a:	e0 eb       	ldi	r30, 0xB0	; 176
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	81 60       	ori	r24, 0x01	; 1
    2d42:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    2d44:	ea e7       	ldi	r30, 0x7A	; 122
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	84 60       	ori	r24, 0x04	; 4
    2d4c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    2d4e:	80 81       	ld	r24, Z
    2d50:	82 60       	ori	r24, 0x02	; 2
    2d52:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    2d54:	80 81       	ld	r24, Z
    2d56:	81 60       	ori	r24, 0x01	; 1
    2d58:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    2d5a:	80 81       	ld	r24, Z
    2d5c:	80 68       	ori	r24, 0x80	; 128
    2d5e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    2d60:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    2d64:	08 95       	ret

00002d66 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    2d66:	83 30       	cpi	r24, 0x03	; 3
    2d68:	71 f0       	breq	.+28     	; 0x2d86 <turnOffPWM+0x20>
    2d6a:	84 30       	cpi	r24, 0x04	; 4
    2d6c:	28 f4       	brcc	.+10     	; 0x2d78 <turnOffPWM+0x12>
    2d6e:	81 30       	cpi	r24, 0x01	; 1
    2d70:	a1 f0       	breq	.+40     	; 0x2d9a <turnOffPWM+0x34>
    2d72:	82 30       	cpi	r24, 0x02	; 2
    2d74:	21 f5       	brne	.+72     	; 0x2dbe <turnOffPWM+0x58>
    2d76:	14 c0       	rjmp	.+40     	; 0x2da0 <turnOffPWM+0x3a>
    2d78:	86 30       	cpi	r24, 0x06	; 6
    2d7a:	b1 f0       	breq	.+44     	; 0x2da8 <turnOffPWM+0x42>
    2d7c:	87 30       	cpi	r24, 0x07	; 7
    2d7e:	d1 f0       	breq	.+52     	; 0x2db4 <turnOffPWM+0x4e>
    2d80:	84 30       	cpi	r24, 0x04	; 4
    2d82:	e9 f4       	brne	.+58     	; 0x2dbe <turnOffPWM+0x58>
    2d84:	04 c0       	rjmp	.+8      	; 0x2d8e <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    2d86:	80 91 80 00 	lds	r24, 0x0080
    2d8a:	8f 77       	andi	r24, 0x7F	; 127
    2d8c:	03 c0       	rjmp	.+6      	; 0x2d94 <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    2d8e:	80 91 80 00 	lds	r24, 0x0080
    2d92:	8f 7d       	andi	r24, 0xDF	; 223
    2d94:	80 93 80 00 	sts	0x0080, r24
    2d98:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    2d9a:	84 b5       	in	r24, 0x24	; 36
    2d9c:	8f 77       	andi	r24, 0x7F	; 127
    2d9e:	02 c0       	rjmp	.+4      	; 0x2da4 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    2da0:	84 b5       	in	r24, 0x24	; 36
    2da2:	8f 7d       	andi	r24, 0xDF	; 223
    2da4:	84 bd       	out	0x24, r24	; 36
    2da6:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    2da8:	80 91 b0 00 	lds	r24, 0x00B0
    2dac:	8f 77       	andi	r24, 0x7F	; 127
    2dae:	80 93 b0 00 	sts	0x00B0, r24
    2db2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    2db4:	80 91 b0 00 	lds	r24, 0x00B0
    2db8:	8f 7d       	andi	r24, 0xDF	; 223
    2dba:	80 93 b0 00 	sts	0x00B0, r24
    2dbe:	08 95       	ret

00002dc0 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    2dc0:	90 e0       	ldi	r25, 0x00	; 0
    2dc2:	fc 01       	movw	r30, r24
    2dc4:	e6 56       	subi	r30, 0x66	; 102
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    2dca:	fc 01       	movw	r30, r24
    2dcc:	ea 57       	subi	r30, 0x7A	; 122
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    2dd2:	ee 23       	and	r30, r30
    2dd4:	c1 f0       	breq	.+48     	; 0x2e06 <pinMode+0x46>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	ee 0f       	add	r30, r30
    2dda:	ff 1f       	adc	r31, r31
    2ddc:	e8 59       	subi	r30, 0x98	; 152
    2dde:	ff 4f       	sbci	r31, 0xFF	; 255
    2de0:	85 91       	lpm	r24, Z+
    2de2:	94 91       	lpm	r25, Z+
    2de4:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
    2de6:	66 23       	and	r22, r22
    2de8:	41 f4       	brne	.+16     	; 0x2dfa <pinMode+0x3a>
		uint8_t oldSREG = SREG;
    2dea:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2dec:	f8 94       	cli
		*reg &= ~bit;
    2dee:	8c 91       	ld	r24, X
    2df0:	20 95       	com	r18
    2df2:	82 23       	and	r24, r18
    2df4:	8c 93       	st	X, r24
		SREG = oldSREG;
    2df6:	9f bf       	out	0x3f, r25	; 63
    2df8:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    2dfa:	9f b7       	in	r25, 0x3f	; 63
                cli();
    2dfc:	f8 94       	cli
		*reg |= bit;
    2dfe:	8c 91       	ld	r24, X
    2e00:	82 2b       	or	r24, r18
    2e02:	8c 93       	st	X, r24
		SREG = oldSREG;
    2e04:	9f bf       	out	0x3f, r25	; 63
    2e06:	08 95       	ret

00002e08 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2e08:	0f 93       	push	r16
    2e0a:	1f 93       	push	r17
    2e0c:	df 93       	push	r29
    2e0e:	cf 93       	push	r28
    2e10:	0f 92       	push	r0
    2e12:	cd b7       	in	r28, 0x3d	; 61
    2e14:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    2e16:	28 2f       	mov	r18, r24
    2e18:	30 e0       	ldi	r19, 0x00	; 0
    2e1a:	f9 01       	movw	r30, r18
    2e1c:	e2 55       	subi	r30, 0x52	; 82
    2e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e20:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2e22:	f9 01       	movw	r30, r18
    2e24:	e6 56       	subi	r30, 0x66	; 102
    2e26:	ff 4f       	sbci	r31, 0xFF	; 255
    2e28:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    2e2a:	2a 57       	subi	r18, 0x7A	; 122
    2e2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2e:	f9 01       	movw	r30, r18
    2e30:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    2e32:	00 23       	and	r16, r16
    2e34:	d9 f0       	breq	.+54     	; 0x2e6c <digitalWrite+0x64>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2e36:	88 23       	and	r24, r24
    2e38:	21 f0       	breq	.+8      	; 0x2e42 <digitalWrite+0x3a>
    2e3a:	69 83       	std	Y+1, r22	; 0x01
    2e3c:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <turnOffPWM>
    2e40:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    2e42:	e0 2f       	mov	r30, r16
    2e44:	f0 e0       	ldi	r31, 0x00	; 0
    2e46:	ee 0f       	add	r30, r30
    2e48:	ff 1f       	adc	r31, r31
    2e4a:	ee 58       	subi	r30, 0x8E	; 142
    2e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4e:	85 91       	lpm	r24, Z+
    2e50:	94 91       	lpm	r25, Z+
    2e52:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    2e54:	9f b7       	in	r25, 0x3f	; 63
	cli();
    2e56:	f8 94       	cli

	if (val == LOW) {
    2e58:	66 23       	and	r22, r22
    2e5a:	21 f4       	brne	.+8      	; 0x2e64 <digitalWrite+0x5c>
		*out &= ~bit;
    2e5c:	8c 91       	ld	r24, X
    2e5e:	10 95       	com	r17
    2e60:	81 23       	and	r24, r17
    2e62:	02 c0       	rjmp	.+4      	; 0x2e68 <digitalWrite+0x60>
	} else {
		*out |= bit;
    2e64:	8c 91       	ld	r24, X
    2e66:	81 2b       	or	r24, r17
    2e68:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    2e6a:	9f bf       	out	0x3f, r25	; 63
}
    2e6c:	0f 90       	pop	r0
    2e6e:	cf 91       	pop	r28
    2e70:	df 91       	pop	r29
    2e72:	1f 91       	pop	r17
    2e74:	0f 91       	pop	r16
    2e76:	08 95       	ret

00002e78 <digitalRead>:

int digitalRead(uint8_t pin)
{
    2e78:	0f 93       	push	r16
    2e7a:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    2e7c:	28 2f       	mov	r18, r24
    2e7e:	30 e0       	ldi	r19, 0x00	; 0
    2e80:	f9 01       	movw	r30, r18
    2e82:	e2 55       	subi	r30, 0x52	; 82
    2e84:	ff 4f       	sbci	r31, 0xFF	; 255
    2e86:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    2e88:	f9 01       	movw	r30, r18
    2e8a:	e6 56       	subi	r30, 0x66	; 102
    2e8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8e:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    2e90:	2a 57       	subi	r18, 0x7A	; 122
    2e92:	3f 4f       	sbci	r19, 0xFF	; 255
    2e94:	f9 01       	movw	r30, r18
    2e96:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    2e98:	11 23       	and	r17, r17
    2e9a:	91 f0       	breq	.+36     	; 0x2ec0 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2e9c:	88 23       	and	r24, r24
    2e9e:	11 f0       	breq	.+4      	; 0x2ea4 <digitalRead+0x2c>
    2ea0:	0e 94 b3 16 	call	0x2d66	; 0x2d66 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    2ea4:	e1 2f       	mov	r30, r17
    2ea6:	f0 e0       	ldi	r31, 0x00	; 0
    2ea8:	ee 0f       	add	r30, r30
    2eaa:	ff 1f       	adc	r31, r31
    2eac:	e4 58       	subi	r30, 0x84	; 132
    2eae:	ff 4f       	sbci	r31, 0xFF	; 255
    2eb0:	85 91       	lpm	r24, Z+
    2eb2:	94 91       	lpm	r25, Z+
    2eb4:	dc 01       	movw	r26, r24
    2eb6:	8c 91       	ld	r24, X
    2eb8:	80 23       	and	r24, r16
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    2eba:	21 e0       	ldi	r18, 0x01	; 1
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	11 f4       	brne	.+4      	; 0x2ec4 <digitalRead+0x4c>
    2ec0:	20 e0       	ldi	r18, 0x00	; 0
    2ec2:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    2ec4:	c9 01       	movw	r24, r18
    2ec6:	1f 91       	pop	r17
    2ec8:	0f 91       	pop	r16
    2eca:	08 95       	ret

00002ecc <_ZN6StringD1Ev>:
	*this = buf;
}

String::~String()
{
	free(buffer);
    2ecc:	fc 01       	movw	r30, r24
    2ece:	80 81       	ld	r24, Z
    2ed0:	91 81       	ldd	r25, Z+1	; 0x01
    2ed2:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <free>
}
    2ed6:	08 95       	ret

00002ed8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
    2ed8:	cf 93       	push	r28
    2eda:	df 93       	push	r29
    2edc:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    2ede:	88 81       	ld	r24, Y
    2ee0:	99 81       	ldd	r25, Y+1	; 0x01
    2ee2:	00 97       	sbiw	r24, 0x00	; 0
    2ee4:	11 f0       	breq	.+4      	; 0x2eea <_ZN6String10invalidateEv+0x12>
    2ee6:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <free>
	buffer = NULL;
    2eea:	19 82       	std	Y+1, r1	; 0x01
    2eec:	18 82       	st	Y, r1
	capacity = len = 0;
    2eee:	1d 82       	std	Y+5, r1	; 0x05
    2ef0:	1c 82       	std	Y+4, r1	; 0x04
    2ef2:	1b 82       	std	Y+3, r1	; 0x03
    2ef4:	1a 82       	std	Y+2, r1	; 0x02
}
    2ef6:	df 91       	pop	r29
    2ef8:	cf 91       	pop	r28
    2efa:	08 95       	ret

00002efc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    2efc:	0f 93       	push	r16
    2efe:	1f 93       	push	r17
    2f00:	cf 93       	push	r28
    2f02:	df 93       	push	r29
    2f04:	ec 01       	movw	r28, r24
    2f06:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    2f08:	6f 5f       	subi	r22, 0xFF	; 255
    2f0a:	7f 4f       	sbci	r23, 0xFF	; 255
    2f0c:	88 81       	ld	r24, Y
    2f0e:	99 81       	ldd	r25, Y+1	; 0x01
    2f10:	0e 94 59 27 	call	0x4eb2	; 0x4eb2 <realloc>
	if (newbuffer) {
    2f14:	00 97       	sbiw	r24, 0x00	; 0
    2f16:	31 f0       	breq	.+12     	; 0x2f24 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    2f18:	99 83       	std	Y+1, r25	; 0x01
    2f1a:	88 83       	st	Y, r24
		capacity = maxStrLen;
    2f1c:	1b 83       	std	Y+3, r17	; 0x03
    2f1e:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    2f20:	81 e0       	ldi	r24, 0x01	; 1
    2f22:	01 c0       	rjmp	.+2      	; 0x2f26 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    2f24:	80 e0       	ldi	r24, 0x00	; 0
}
    2f26:	df 91       	pop	r29
    2f28:	cf 91       	pop	r28
    2f2a:	1f 91       	pop	r17
    2f2c:	0f 91       	pop	r16
    2f2e:	08 95       	ret

00002f30 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    2f36:	88 81       	ld	r24, Y
    2f38:	99 81       	ldd	r25, Y+1	; 0x01
    2f3a:	00 97       	sbiw	r24, 0x00	; 0
    2f3c:	29 f0       	breq	.+10     	; 0x2f48 <_ZN6String7reserveEj+0x18>
    2f3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f40:	9b 81       	ldd	r25, Y+3	; 0x03
    2f42:	86 17       	cp	r24, r22
    2f44:	97 07       	cpc	r25, r23
    2f46:	78 f4       	brcc	.+30     	; 0x2f66 <_ZN6String7reserveEj+0x36>
	if (changeBuffer(size)) {
    2f48:	ce 01       	movw	r24, r28
    2f4a:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6String12changeBufferEj>
    2f4e:	88 23       	and	r24, r24
    2f50:	41 f0       	breq	.+16     	; 0x2f62 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    2f52:	8c 81       	ldd	r24, Y+4	; 0x04
    2f54:	9d 81       	ldd	r25, Y+5	; 0x05
    2f56:	00 97       	sbiw	r24, 0x00	; 0
    2f58:	31 f4       	brne	.+12     	; 0x2f66 <_ZN6String7reserveEj+0x36>
    2f5a:	e8 81       	ld	r30, Y
    2f5c:	f9 81       	ldd	r31, Y+1	; 0x01
    2f5e:	10 82       	st	Z, r1
    2f60:	02 c0       	rjmp	.+4      	; 0x2f66 <_ZN6String7reserveEj+0x36>
		return 1;
	}
	return 0;
    2f62:	80 e0       	ldi	r24, 0x00	; 0
    2f64:	01 c0       	rjmp	.+2      	; 0x2f68 <_ZN6String7reserveEj+0x38>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    2f66:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    2f68:	df 91       	pop	r29
    2f6a:	cf 91       	pop	r28
    2f6c:	08 95       	ret

00002f6e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    2f6e:	ef 92       	push	r14
    2f70:	ff 92       	push	r15
    2f72:	0f 93       	push	r16
    2f74:	1f 93       	push	r17
    2f76:	cf 93       	push	r28
    2f78:	df 93       	push	r29
    2f7a:	ec 01       	movw	r28, r24
    2f7c:	7b 01       	movw	r14, r22
    2f7e:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    2f80:	ba 01       	movw	r22, r20
    2f82:	0e 94 98 17 	call	0x2f30	; 0x2f30 <_ZN6String7reserveEj>
    2f86:	88 23       	and	r24, r24
    2f88:	21 f4       	brne	.+8      	; 0x2f92 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    2f8a:	ce 01       	movw	r24, r28
    2f8c:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <_ZN6String10invalidateEv>
		return *this;
    2f90:	07 c0       	rjmp	.+14     	; 0x2fa0 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    2f92:	1d 83       	std	Y+5, r17	; 0x05
    2f94:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    2f96:	88 81       	ld	r24, Y
    2f98:	99 81       	ldd	r25, Y+1	; 0x01
    2f9a:	b7 01       	movw	r22, r14
    2f9c:	0e 94 92 28 	call	0x5124	; 0x5124 <strcpy>
	return *this;
}
    2fa0:	ce 01       	movw	r24, r28
    2fa2:	df 91       	pop	r29
    2fa4:	cf 91       	pop	r28
    2fa6:	1f 91       	pop	r17
    2fa8:	0f 91       	pop	r16
    2faa:	ff 90       	pop	r15
    2fac:	ef 90       	pop	r14
    2fae:	08 95       	ret

00002fb0 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    2fb0:	cf 93       	push	r28
    2fb2:	df 93       	push	r29
    2fb4:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    2fb6:	11 82       	std	Z+1, r1	; 0x01
    2fb8:	10 82       	st	Z, r1
	capacity = 0;
    2fba:	13 82       	std	Z+3, r1	; 0x03
    2fbc:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    2fbe:	15 82       	std	Z+5, r1	; 0x05
    2fc0:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    2fc2:	16 82       	std	Z+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    2fc4:	61 15       	cp	r22, r1
    2fc6:	71 05       	cpc	r23, r1
    2fc8:	59 f0       	breq	.+22     	; 0x2fe0 <_ZN6StringC1EPKc+0x30>
    2fca:	eb 01       	movw	r28, r22
    2fcc:	09 90       	ld	r0, Y+
    2fce:	00 20       	and	r0, r0
    2fd0:	e9 f7       	brne	.-6      	; 0x2fcc <_ZN6StringC1EPKc+0x1c>
    2fd2:	ae 01       	movw	r20, r28
    2fd4:	41 50       	subi	r20, 0x01	; 1
    2fd6:	50 40       	sbci	r21, 0x00	; 0
    2fd8:	46 1b       	sub	r20, r22
    2fda:	57 0b       	sbc	r21, r23
    2fdc:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <_ZN6String4copyEPKcj>
}
    2fe0:	df 91       	pop	r29
    2fe2:	cf 91       	pop	r28
    2fe4:	08 95       	ret

00002fe6 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    2fe6:	ef 92       	push	r14
    2fe8:	ff 92       	push	r15
    2fea:	cf 93       	push	r28
    2fec:	df 93       	push	r29
    2fee:	ec 01       	movw	r28, r24
    2ff0:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    2ff2:	86 17       	cp	r24, r22
    2ff4:	97 07       	cpc	r25, r23
    2ff6:	61 f0       	breq	.+24     	; 0x3010 <_ZN6StringaSERKS_+0x2a>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    2ff8:	60 81       	ld	r22, Z
    2ffa:	71 81       	ldd	r23, Z+1	; 0x01
    2ffc:	61 15       	cp	r22, r1
    2ffe:	71 05       	cpc	r23, r1
    3000:	29 f0       	breq	.+10     	; 0x300c <_ZN6StringaSERKS_+0x26>
    3002:	44 81       	ldd	r20, Z+4	; 0x04
    3004:	55 81       	ldd	r21, Z+5	; 0x05
    3006:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <_ZN6String4copyEPKcj>
    300a:	02 c0       	rjmp	.+4      	; 0x3010 <_ZN6StringaSERKS_+0x2a>
	else invalidate();
    300c:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <_ZN6String10invalidateEv>
	
	return *this;
}
    3010:	ce 01       	movw	r24, r28
    3012:	df 91       	pop	r29
    3014:	cf 91       	pop	r28
    3016:	ff 90       	pop	r15
    3018:	ef 90       	pop	r14
    301a:	08 95       	ret

0000301c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    301c:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    301e:	11 82       	std	Z+1, r1	; 0x01
    3020:	10 82       	st	Z, r1
	capacity = 0;
    3022:	13 82       	std	Z+3, r1	; 0x03
    3024:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3026:	15 82       	std	Z+5, r1	; 0x05
    3028:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    302a:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    302c:	0e 94 f3 17 	call	0x2fe6	; 0x2fe6 <_ZN6StringaSERKS_>
}
    3030:	08 95       	ret

00003032 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    3032:	0f 93       	push	r16
    3034:	1f 93       	push	r17
    3036:	8c 01       	movw	r16, r24
	if (cstr) copy(cstr, strlen(cstr));
    3038:	61 15       	cp	r22, r1
    303a:	71 05       	cpc	r23, r1
    303c:	61 f0       	breq	.+24     	; 0x3056 <_ZN6StringaSEPKc+0x24>
    303e:	db 01       	movw	r26, r22
    3040:	0d 90       	ld	r0, X+
    3042:	00 20       	and	r0, r0
    3044:	e9 f7       	brne	.-6      	; 0x3040 <_ZN6StringaSEPKc+0xe>
    3046:	ad 01       	movw	r20, r26
    3048:	41 50       	subi	r20, 0x01	; 1
    304a:	50 40       	sbci	r21, 0x00	; 0
    304c:	46 1b       	sub	r20, r22
    304e:	57 0b       	sbc	r21, r23
    3050:	0e 94 b7 17 	call	0x2f6e	; 0x2f6e <_ZN6String4copyEPKcj>
    3054:	02 c0       	rjmp	.+4      	; 0x305a <_ZN6StringaSEPKc+0x28>
	else invalidate();
    3056:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <_ZN6String10invalidateEv>
	
	return *this;
}
    305a:	c8 01       	movw	r24, r16
    305c:	1f 91       	pop	r17
    305e:	0f 91       	pop	r16
    3060:	08 95       	ret

00003062 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    3062:	ef 92       	push	r14
    3064:	ff 92       	push	r15
    3066:	0f 93       	push	r16
    3068:	1f 93       	push	r17
    306a:	df 93       	push	r29
    306c:	cf 93       	push	r28
    306e:	cd b7       	in	r28, 0x3d	; 61
    3070:	de b7       	in	r29, 0x3e	; 62
    3072:	a1 97       	sbiw	r28, 0x21	; 33
    3074:	0f b6       	in	r0, 0x3f	; 63
    3076:	f8 94       	cli
    3078:	de bf       	out	0x3e, r29	; 62
    307a:	0f be       	out	0x3f, r0	; 63
    307c:	cd bf       	out	0x3d, r28	; 61
    307e:	7c 01       	movw	r14, r24
    3080:	cb 01       	movw	r24, r22
    3082:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3084:	f7 01       	movw	r30, r14
    3086:	11 82       	std	Z+1, r1	; 0x01
    3088:	10 82       	st	Z, r1
	capacity = 0;
    308a:	13 82       	std	Z+3, r1	; 0x03
    308c:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    308e:	15 82       	std	Z+5, r1	; 0x05
    3090:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3092:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    3094:	8e 01       	movw	r16, r28
    3096:	0f 5f       	subi	r16, 0xFF	; 255
    3098:	1f 4f       	sbci	r17, 0xFF	; 255
    309a:	a8 01       	movw	r20, r16
    309c:	30 e0       	ldi	r19, 0x00	; 0
    309e:	0e 94 45 29 	call	0x528a	; 0x528a <ultoa>
	*this = buf;
    30a2:	c7 01       	movw	r24, r14
    30a4:	b8 01       	movw	r22, r16
    30a6:	0e 94 19 18 	call	0x3032	; 0x3032 <_ZN6StringaSEPKc>
}
    30aa:	a1 96       	adiw	r28, 0x21	; 33
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	de bf       	out	0x3e, r29	; 62
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	cd bf       	out	0x3d, r28	; 61
    30b6:	cf 91       	pop	r28
    30b8:	df 91       	pop	r29
    30ba:	1f 91       	pop	r17
    30bc:	0f 91       	pop	r16
    30be:	ff 90       	pop	r15
    30c0:	ef 90       	pop	r14
    30c2:	08 95       	ret

000030c4 <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    30c4:	ef 92       	push	r14
    30c6:	ff 92       	push	r15
    30c8:	0f 93       	push	r16
    30ca:	1f 93       	push	r17
    30cc:	df 93       	push	r29
    30ce:	cf 93       	push	r28
    30d0:	cd b7       	in	r28, 0x3d	; 61
    30d2:	de b7       	in	r29, 0x3e	; 62
    30d4:	a2 97       	sbiw	r28, 0x22	; 34
    30d6:	0f b6       	in	r0, 0x3f	; 63
    30d8:	f8 94       	cli
    30da:	de bf       	out	0x3e, r29	; 62
    30dc:	0f be       	out	0x3f, r0	; 63
    30de:	cd bf       	out	0x3d, r28	; 61
    30e0:	7c 01       	movw	r14, r24
    30e2:	cb 01       	movw	r24, r22
    30e4:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    30e6:	f7 01       	movw	r30, r14
    30e8:	11 82       	std	Z+1, r1	; 0x01
    30ea:	10 82       	st	Z, r1
	capacity = 0;
    30ec:	13 82       	std	Z+3, r1	; 0x03
    30ee:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    30f0:	15 82       	std	Z+5, r1	; 0x05
    30f2:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    30f4:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    30f6:	8e 01       	movw	r16, r28
    30f8:	0f 5f       	subi	r16, 0xFF	; 255
    30fa:	1f 4f       	sbci	r17, 0xFF	; 255
    30fc:	a8 01       	movw	r20, r16
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <ltoa>
	*this = buf;
    3104:	c7 01       	movw	r24, r14
    3106:	b8 01       	movw	r22, r16
    3108:	0e 94 19 18 	call	0x3032	; 0x3032 <_ZN6StringaSEPKc>
}
    310c:	a2 96       	adiw	r28, 0x22	; 34
    310e:	0f b6       	in	r0, 0x3f	; 63
    3110:	f8 94       	cli
    3112:	de bf       	out	0x3e, r29	; 62
    3114:	0f be       	out	0x3f, r0	; 63
    3116:	cd bf       	out	0x3d, r28	; 61
    3118:	cf 91       	pop	r28
    311a:	df 91       	pop	r29
    311c:	1f 91       	pop	r17
    311e:	0f 91       	pop	r16
    3120:	ff 90       	pop	r15
    3122:	ef 90       	pop	r14
    3124:	08 95       	ret

00003126 <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    3126:	ef 92       	push	r14
    3128:	ff 92       	push	r15
    312a:	0f 93       	push	r16
    312c:	1f 93       	push	r17
    312e:	df 93       	push	r29
    3130:	cf 93       	push	r28
    3132:	cd b7       	in	r28, 0x3d	; 61
    3134:	de b7       	in	r29, 0x3e	; 62
    3136:	61 97       	sbiw	r28, 0x11	; 17
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	de bf       	out	0x3e, r29	; 62
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	cd bf       	out	0x3d, r28	; 61
    3142:	7c 01       	movw	r14, r24
    3144:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3146:	f7 01       	movw	r30, r14
    3148:	11 82       	std	Z+1, r1	; 0x01
    314a:	10 82       	st	Z, r1
	capacity = 0;
    314c:	13 82       	std	Z+3, r1	; 0x03
    314e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3150:	15 82       	std	Z+5, r1	; 0x05
    3152:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3154:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    3156:	8e 01       	movw	r16, r28
    3158:	0f 5f       	subi	r16, 0xFF	; 255
    315a:	1f 4f       	sbci	r17, 0xFF	; 255
    315c:	b8 01       	movw	r22, r16
    315e:	50 e0       	ldi	r21, 0x00	; 0
    3160:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <utoa>
	*this = buf;
    3164:	c7 01       	movw	r24, r14
    3166:	b8 01       	movw	r22, r16
    3168:	0e 94 19 18 	call	0x3032	; 0x3032 <_ZN6StringaSEPKc>
}
    316c:	61 96       	adiw	r28, 0x11	; 17
    316e:	0f b6       	in	r0, 0x3f	; 63
    3170:	f8 94       	cli
    3172:	de bf       	out	0x3e, r29	; 62
    3174:	0f be       	out	0x3f, r0	; 63
    3176:	cd bf       	out	0x3d, r28	; 61
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	1f 91       	pop	r17
    317e:	0f 91       	pop	r16
    3180:	ff 90       	pop	r15
    3182:	ef 90       	pop	r14
    3184:	08 95       	ret

00003186 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    3186:	ef 92       	push	r14
    3188:	ff 92       	push	r15
    318a:	0f 93       	push	r16
    318c:	1f 93       	push	r17
    318e:	df 93       	push	r29
    3190:	cf 93       	push	r28
    3192:	cd b7       	in	r28, 0x3d	; 61
    3194:	de b7       	in	r29, 0x3e	; 62
    3196:	62 97       	sbiw	r28, 0x12	; 18
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	f8 94       	cli
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	cd bf       	out	0x3d, r28	; 61
    31a2:	7c 01       	movw	r14, r24
    31a4:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    31a6:	f7 01       	movw	r30, r14
    31a8:	11 82       	std	Z+1, r1	; 0x01
    31aa:	10 82       	st	Z, r1
	capacity = 0;
    31ac:	13 82       	std	Z+3, r1	; 0x03
    31ae:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    31b0:	15 82       	std	Z+5, r1	; 0x05
    31b2:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    31b4:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    31b6:	8e 01       	movw	r16, r28
    31b8:	0f 5f       	subi	r16, 0xFF	; 255
    31ba:	1f 4f       	sbci	r17, 0xFF	; 255
    31bc:	b8 01       	movw	r22, r16
    31be:	50 e0       	ldi	r21, 0x00	; 0
    31c0:	0e 94 db 28 	call	0x51b6	; 0x51b6 <itoa>
	*this = buf;
    31c4:	c7 01       	movw	r24, r14
    31c6:	b8 01       	movw	r22, r16
    31c8:	0e 94 19 18 	call	0x3032	; 0x3032 <_ZN6StringaSEPKc>
}
    31cc:	62 96       	adiw	r28, 0x12	; 18
    31ce:	0f b6       	in	r0, 0x3f	; 63
    31d0:	f8 94       	cli
    31d2:	de bf       	out	0x3e, r29	; 62
    31d4:	0f be       	out	0x3f, r0	; 63
    31d6:	cd bf       	out	0x3d, r28	; 61
    31d8:	cf 91       	pop	r28
    31da:	df 91       	pop	r29
    31dc:	1f 91       	pop	r17
    31de:	0f 91       	pop	r16
    31e0:	ff 90       	pop	r15
    31e2:	ef 90       	pop	r14
    31e4:	08 95       	ret

000031e6 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    31e6:	ef 92       	push	r14
    31e8:	ff 92       	push	r15
    31ea:	0f 93       	push	r16
    31ec:	1f 93       	push	r17
    31ee:	df 93       	push	r29
    31f0:	cf 93       	push	r28
    31f2:	cd b7       	in	r28, 0x3d	; 61
    31f4:	de b7       	in	r29, 0x3e	; 62
    31f6:	29 97       	sbiw	r28, 0x09	; 9
    31f8:	0f b6       	in	r0, 0x3f	; 63
    31fa:	f8 94       	cli
    31fc:	de bf       	out	0x3e, r29	; 62
    31fe:	0f be       	out	0x3f, r0	; 63
    3200:	cd bf       	out	0x3d, r28	; 61
    3202:	7c 01       	movw	r14, r24
    3204:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3206:	f7 01       	movw	r30, r14
    3208:	11 82       	std	Z+1, r1	; 0x01
    320a:	10 82       	st	Z, r1
	capacity = 0;
    320c:	13 82       	std	Z+3, r1	; 0x03
    320e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3210:	15 82       	std	Z+5, r1	; 0x05
    3212:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3214:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	8e 01       	movw	r16, r28
    321a:	0f 5f       	subi	r16, 0xFF	; 255
    321c:	1f 4f       	sbci	r17, 0xFF	; 255
    321e:	b8 01       	movw	r22, r16
    3220:	50 e0       	ldi	r21, 0x00	; 0
    3222:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <utoa>
	*this = buf;
    3226:	c7 01       	movw	r24, r14
    3228:	b8 01       	movw	r22, r16
    322a:	0e 94 19 18 	call	0x3032	; 0x3032 <_ZN6StringaSEPKc>
}
    322e:	29 96       	adiw	r28, 0x09	; 9
    3230:	0f b6       	in	r0, 0x3f	; 63
    3232:	f8 94       	cli
    3234:	de bf       	out	0x3e, r29	; 62
    3236:	0f be       	out	0x3f, r0	; 63
    3238:	cd bf       	out	0x3d, r28	; 61
    323a:	cf 91       	pop	r28
    323c:	df 91       	pop	r29
    323e:	1f 91       	pop	r17
    3240:	0f 91       	pop	r16
    3242:	ff 90       	pop	r15
    3244:	ef 90       	pop	r14
    3246:	08 95       	ret

00003248 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    3248:	df 93       	push	r29
    324a:	cf 93       	push	r28
    324c:	00 d0       	rcall	.+0      	; 0x324e <_ZN6StringC1Ec+0x6>
    324e:	cd b7       	in	r28, 0x3d	; 61
    3250:	de b7       	in	r29, 0x3e	; 62
    3252:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3254:	11 82       	std	Z+1, r1	; 0x01
    3256:	10 82       	st	Z, r1
	capacity = 0;
    3258:	13 82       	std	Z+3, r1	; 0x03
    325a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    325c:	15 82       	std	Z+5, r1	; 0x05
    325e:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3260:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    3262:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    3264:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    3266:	be 01       	movw	r22, r28
    3268:	6f 5f       	subi	r22, 0xFF	; 255
    326a:	7f 4f       	sbci	r23, 0xFF	; 255
    326c:	0e 94 19 18 	call	0x3032	; 0x3032 <_ZN6StringaSEPKc>
}
    3270:	0f 90       	pop	r0
    3272:	0f 90       	pop	r0
    3274:	cf 91       	pop	r28
    3276:	df 91       	pop	r29
    3278:	08 95       	ret

0000327a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    327a:	ef 92       	push	r14
    327c:	ff 92       	push	r15
    327e:	0f 93       	push	r16
    3280:	1f 93       	push	r17
    3282:	cf 93       	push	r28
    3284:	df 93       	push	r29
    3286:	ec 01       	movw	r28, r24
    3288:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
    328a:	0c 81       	ldd	r16, Y+4	; 0x04
    328c:	1d 81       	ldd	r17, Y+5	; 0x05
	if (!cstr) return 0;
    328e:	61 15       	cp	r22, r1
    3290:	71 05       	cpc	r23, r1
    3292:	b9 f0       	breq	.+46     	; 0x32c2 <_ZN6String6concatEPKcj+0x48>
	if (length == 0) return 1;
    3294:	41 15       	cp	r20, r1
    3296:	51 05       	cpc	r21, r1
    3298:	91 f0       	breq	.+36     	; 0x32be <_ZN6String6concatEPKcj+0x44>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    329a:	04 0f       	add	r16, r20
    329c:	15 1f       	adc	r17, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    329e:	b8 01       	movw	r22, r16
    32a0:	0e 94 98 17 	call	0x2f30	; 0x2f30 <_ZN6String7reserveEj>
    32a4:	88 23       	and	r24, r24
    32a6:	69 f0       	breq	.+26     	; 0x32c2 <_ZN6String6concatEPKcj+0x48>
	strcpy(buffer + len, cstr);
    32a8:	28 81       	ld	r18, Y
    32aa:	39 81       	ldd	r19, Y+1	; 0x01
    32ac:	8c 81       	ldd	r24, Y+4	; 0x04
    32ae:	9d 81       	ldd	r25, Y+5	; 0x05
    32b0:	82 0f       	add	r24, r18
    32b2:	93 1f       	adc	r25, r19
    32b4:	b7 01       	movw	r22, r14
    32b6:	0e 94 92 28 	call	0x5124	; 0x5124 <strcpy>
	len = newlen;
    32ba:	1d 83       	std	Y+5, r17	; 0x05
    32bc:	0c 83       	std	Y+4, r16	; 0x04

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
    32be:	81 e0       	ldi	r24, 0x01	; 1
    32c0:	01 c0       	rjmp	.+2      	; 0x32c4 <_ZN6String6concatEPKcj+0x4a>
	if (!reserve(newlen)) return 0;
    32c2:	80 e0       	ldi	r24, 0x00	; 0
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    32c4:	df 91       	pop	r29
    32c6:	cf 91       	pop	r28
    32c8:	1f 91       	pop	r17
    32ca:	0f 91       	pop	r16
    32cc:	ff 90       	pop	r15
    32ce:	ef 90       	pop	r14
    32d0:	08 95       	ret

000032d2 <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    32d2:	fb 01       	movw	r30, r22
	return concat(s.buffer, s.len);
    32d4:	60 81       	ld	r22, Z
    32d6:	71 81       	ldd	r23, Z+1	; 0x01
    32d8:	44 81       	ldd	r20, Z+4	; 0x04
    32da:	55 81       	ldd	r21, Z+5	; 0x05
    32dc:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN6String6concatEPKcj>
}
    32e0:	08 95       	ret

000032e2 <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    32e2:	61 15       	cp	r22, r1
    32e4:	71 05       	cpc	r23, r1
    32e6:	61 f0       	breq	.+24     	; 0x3300 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
    32e8:	db 01       	movw	r26, r22
    32ea:	0d 90       	ld	r0, X+
    32ec:	00 20       	and	r0, r0
    32ee:	e9 f7       	brne	.-6      	; 0x32ea <_ZN6String6concatEPKc+0x8>
    32f0:	ad 01       	movw	r20, r26
    32f2:	41 50       	subi	r20, 0x01	; 1
    32f4:	50 40       	sbci	r21, 0x00	; 0
    32f6:	46 1b       	sub	r20, r22
    32f8:	57 0b       	sbc	r21, r23
    32fa:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN6String6concatEPKcj>
    32fe:	08 95       	ret
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    3300:	80 e0       	ldi	r24, 0x00	; 0
	return concat(cstr, strlen(cstr));
}
    3302:	08 95       	ret

00003304 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    3304:	df 93       	push	r29
    3306:	cf 93       	push	r28
    3308:	00 d0       	rcall	.+0      	; 0x330a <_ZN6String6concatEc+0x6>
    330a:	cd b7       	in	r28, 0x3d	; 61
    330c:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    330e:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    3310:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    3312:	be 01       	movw	r22, r28
    3314:	6f 5f       	subi	r22, 0xFF	; 255
    3316:	7f 4f       	sbci	r23, 0xFF	; 255
    3318:	41 e0       	ldi	r20, 0x01	; 1
    331a:	50 e0       	ldi	r21, 0x00	; 0
    331c:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN6String6concatEPKcj>
}
    3320:	0f 90       	pop	r0
    3322:	0f 90       	pop	r0
    3324:	cf 91       	pop	r28
    3326:	df 91       	pop	r29
    3328:	08 95       	ret

0000332a <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    332a:	ef 92       	push	r14
    332c:	ff 92       	push	r15
    332e:	0f 93       	push	r16
    3330:	1f 93       	push	r17
    3332:	df 93       	push	r29
    3334:	cf 93       	push	r28
    3336:	00 d0       	rcall	.+0      	; 0x3338 <_ZN6String6concatEh+0xe>
    3338:	00 d0       	rcall	.+0      	; 0x333a <_ZN6String6concatEh+0x10>
    333a:	cd b7       	in	r28, 0x3d	; 61
    333c:	de b7       	in	r29, 0x3e	; 62
    333e:	7c 01       	movw	r14, r24
    3340:	86 2f       	mov	r24, r22
	char buf[4];
	itoa(num, buf, 10);
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	8e 01       	movw	r16, r28
    3346:	0f 5f       	subi	r16, 0xFF	; 255
    3348:	1f 4f       	sbci	r17, 0xFF	; 255
    334a:	b8 01       	movw	r22, r16
    334c:	4a e0       	ldi	r20, 0x0A	; 10
    334e:	50 e0       	ldi	r21, 0x00	; 0
    3350:	0e 94 db 28 	call	0x51b6	; 0x51b6 <itoa>
	return concat(buf, strlen(buf));
    3354:	f8 01       	movw	r30, r16
    3356:	01 90       	ld	r0, Z+
    3358:	00 20       	and	r0, r0
    335a:	e9 f7       	brne	.-6      	; 0x3356 <_ZN6String6concatEh+0x2c>
    335c:	af 01       	movw	r20, r30
    335e:	41 50       	subi	r20, 0x01	; 1
    3360:	50 40       	sbci	r21, 0x00	; 0
    3362:	40 1b       	sub	r20, r16
    3364:	51 0b       	sbc	r21, r17
    3366:	c7 01       	movw	r24, r14
    3368:	b8 01       	movw	r22, r16
    336a:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN6String6concatEPKcj>
}
    336e:	0f 90       	pop	r0
    3370:	0f 90       	pop	r0
    3372:	0f 90       	pop	r0
    3374:	0f 90       	pop	r0
    3376:	cf 91       	pop	r28
    3378:	df 91       	pop	r29
    337a:	1f 91       	pop	r17
    337c:	0f 91       	pop	r16
    337e:	ff 90       	pop	r15
    3380:	ef 90       	pop	r14
    3382:	08 95       	ret

00003384 <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    3384:	ef 92       	push	r14
    3386:	ff 92       	push	r15
    3388:	0f 93       	push	r16
    338a:	1f 93       	push	r17
    338c:	df 93       	push	r29
    338e:	cf 93       	push	r28
    3390:	cd b7       	in	r28, 0x3d	; 61
    3392:	de b7       	in	r29, 0x3e	; 62
    3394:	27 97       	sbiw	r28, 0x07	; 7
    3396:	0f b6       	in	r0, 0x3f	; 63
    3398:	f8 94       	cli
    339a:	de bf       	out	0x3e, r29	; 62
    339c:	0f be       	out	0x3f, r0	; 63
    339e:	cd bf       	out	0x3d, r28	; 61
    33a0:	7c 01       	movw	r14, r24
    33a2:	cb 01       	movw	r24, r22
	char buf[7];
	itoa(num, buf, 10);
    33a4:	8e 01       	movw	r16, r28
    33a6:	0f 5f       	subi	r16, 0xFF	; 255
    33a8:	1f 4f       	sbci	r17, 0xFF	; 255
    33aa:	b8 01       	movw	r22, r16
    33ac:	4a e0       	ldi	r20, 0x0A	; 10
    33ae:	50 e0       	ldi	r21, 0x00	; 0
    33b0:	0e 94 db 28 	call	0x51b6	; 0x51b6 <itoa>
	return concat(buf, strlen(buf));
    33b4:	f8 01       	movw	r30, r16
    33b6:	01 90       	ld	r0, Z+
    33b8:	00 20       	and	r0, r0
    33ba:	e9 f7       	brne	.-6      	; 0x33b6 <_ZN6String6concatEi+0x32>
    33bc:	af 01       	movw	r20, r30
    33be:	41 50       	subi	r20, 0x01	; 1
    33c0:	50 40       	sbci	r21, 0x00	; 0
    33c2:	40 1b       	sub	r20, r16
    33c4:	51 0b       	sbc	r21, r17
    33c6:	c7 01       	movw	r24, r14
    33c8:	b8 01       	movw	r22, r16
    33ca:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN6String6concatEPKcj>
}
    33ce:	27 96       	adiw	r28, 0x07	; 7
    33d0:	0f b6       	in	r0, 0x3f	; 63
    33d2:	f8 94       	cli
    33d4:	de bf       	out	0x3e, r29	; 62
    33d6:	0f be       	out	0x3f, r0	; 63
    33d8:	cd bf       	out	0x3d, r28	; 61
    33da:	cf 91       	pop	r28
    33dc:	df 91       	pop	r29
    33de:	1f 91       	pop	r17
    33e0:	0f 91       	pop	r16
    33e2:	ff 90       	pop	r15
    33e4:	ef 90       	pop	r14
    33e6:	08 95       	ret

000033e8 <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
    33e8:	ef 92       	push	r14
    33ea:	ff 92       	push	r15
    33ec:	0f 93       	push	r16
    33ee:	1f 93       	push	r17
    33f0:	df 93       	push	r29
    33f2:	cf 93       	push	r28
    33f4:	00 d0       	rcall	.+0      	; 0x33f6 <_ZN6String6concatEj+0xe>
    33f6:	00 d0       	rcall	.+0      	; 0x33f8 <_ZN6String6concatEj+0x10>
    33f8:	00 d0       	rcall	.+0      	; 0x33fa <_ZN6String6concatEj+0x12>
    33fa:	cd b7       	in	r28, 0x3d	; 61
    33fc:	de b7       	in	r29, 0x3e	; 62
    33fe:	7c 01       	movw	r14, r24
    3400:	cb 01       	movw	r24, r22
	char buf[6];
	utoa(num, buf, 10);
    3402:	8e 01       	movw	r16, r28
    3404:	0f 5f       	subi	r16, 0xFF	; 255
    3406:	1f 4f       	sbci	r17, 0xFF	; 255
    3408:	b8 01       	movw	r22, r16
    340a:	4a e0       	ldi	r20, 0x0A	; 10
    340c:	50 e0       	ldi	r21, 0x00	; 0
    340e:	0e 94 6a 29 	call	0x52d4	; 0x52d4 <utoa>
	return concat(buf, strlen(buf));
    3412:	f8 01       	movw	r30, r16
    3414:	01 90       	ld	r0, Z+
    3416:	00 20       	and	r0, r0
    3418:	e9 f7       	brne	.-6      	; 0x3414 <_ZN6String6concatEj+0x2c>
    341a:	af 01       	movw	r20, r30
    341c:	41 50       	subi	r20, 0x01	; 1
    341e:	50 40       	sbci	r21, 0x00	; 0
    3420:	40 1b       	sub	r20, r16
    3422:	51 0b       	sbc	r21, r17
    3424:	c7 01       	movw	r24, r14
    3426:	b8 01       	movw	r22, r16
    3428:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN6String6concatEPKcj>
}
    342c:	26 96       	adiw	r28, 0x06	; 6
    342e:	0f b6       	in	r0, 0x3f	; 63
    3430:	f8 94       	cli
    3432:	de bf       	out	0x3e, r29	; 62
    3434:	0f be       	out	0x3f, r0	; 63
    3436:	cd bf       	out	0x3d, r28	; 61
    3438:	cf 91       	pop	r28
    343a:	df 91       	pop	r29
    343c:	1f 91       	pop	r17
    343e:	0f 91       	pop	r16
    3440:	ff 90       	pop	r15
    3442:	ef 90       	pop	r14
    3444:	08 95       	ret

00003446 <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
    3446:	ef 92       	push	r14
    3448:	ff 92       	push	r15
    344a:	0f 93       	push	r16
    344c:	1f 93       	push	r17
    344e:	df 93       	push	r29
    3450:	cf 93       	push	r28
    3452:	cd b7       	in	r28, 0x3d	; 61
    3454:	de b7       	in	r29, 0x3e	; 62
    3456:	2c 97       	sbiw	r28, 0x0c	; 12
    3458:	0f b6       	in	r0, 0x3f	; 63
    345a:	f8 94       	cli
    345c:	de bf       	out	0x3e, r29	; 62
    345e:	0f be       	out	0x3f, r0	; 63
    3460:	cd bf       	out	0x3d, r28	; 61
    3462:	7c 01       	movw	r14, r24
    3464:	cb 01       	movw	r24, r22
    3466:	ba 01       	movw	r22, r20
	char buf[12];
	ltoa(num, buf, 10);
    3468:	8e 01       	movw	r16, r28
    346a:	0f 5f       	subi	r16, 0xFF	; 255
    346c:	1f 4f       	sbci	r17, 0xFF	; 255
    346e:	a8 01       	movw	r20, r16
    3470:	2a e0       	ldi	r18, 0x0A	; 10
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	0e 94 fc 28 	call	0x51f8	; 0x51f8 <ltoa>
	return concat(buf, strlen(buf));
    3478:	f8 01       	movw	r30, r16
    347a:	01 90       	ld	r0, Z+
    347c:	00 20       	and	r0, r0
    347e:	e9 f7       	brne	.-6      	; 0x347a <_ZN6String6concatEl+0x34>
    3480:	af 01       	movw	r20, r30
    3482:	41 50       	subi	r20, 0x01	; 1
    3484:	50 40       	sbci	r21, 0x00	; 0
    3486:	40 1b       	sub	r20, r16
    3488:	51 0b       	sbc	r21, r17
    348a:	c7 01       	movw	r24, r14
    348c:	b8 01       	movw	r22, r16
    348e:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN6String6concatEPKcj>
}
    3492:	2c 96       	adiw	r28, 0x0c	; 12
    3494:	0f b6       	in	r0, 0x3f	; 63
    3496:	f8 94       	cli
    3498:	de bf       	out	0x3e, r29	; 62
    349a:	0f be       	out	0x3f, r0	; 63
    349c:	cd bf       	out	0x3d, r28	; 61
    349e:	cf 91       	pop	r28
    34a0:	df 91       	pop	r29
    34a2:	1f 91       	pop	r17
    34a4:	0f 91       	pop	r16
    34a6:	ff 90       	pop	r15
    34a8:	ef 90       	pop	r14
    34aa:	08 95       	ret

000034ac <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    34ac:	ef 92       	push	r14
    34ae:	ff 92       	push	r15
    34b0:	0f 93       	push	r16
    34b2:	1f 93       	push	r17
    34b4:	df 93       	push	r29
    34b6:	cf 93       	push	r28
    34b8:	cd b7       	in	r28, 0x3d	; 61
    34ba:	de b7       	in	r29, 0x3e	; 62
    34bc:	2b 97       	sbiw	r28, 0x0b	; 11
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	f8 94       	cli
    34c2:	de bf       	out	0x3e, r29	; 62
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	cd bf       	out	0x3d, r28	; 61
    34c8:	7c 01       	movw	r14, r24
    34ca:	cb 01       	movw	r24, r22
    34cc:	ba 01       	movw	r22, r20
	char buf[11];
	ultoa(num, buf, 10);
    34ce:	8e 01       	movw	r16, r28
    34d0:	0f 5f       	subi	r16, 0xFF	; 255
    34d2:	1f 4f       	sbci	r17, 0xFF	; 255
    34d4:	a8 01       	movw	r20, r16
    34d6:	2a e0       	ldi	r18, 0x0A	; 10
    34d8:	30 e0       	ldi	r19, 0x00	; 0
    34da:	0e 94 45 29 	call	0x528a	; 0x528a <ultoa>
	return concat(buf, strlen(buf));
    34de:	f8 01       	movw	r30, r16
    34e0:	01 90       	ld	r0, Z+
    34e2:	00 20       	and	r0, r0
    34e4:	e9 f7       	brne	.-6      	; 0x34e0 <_ZN6String6concatEm+0x34>
    34e6:	af 01       	movw	r20, r30
    34e8:	41 50       	subi	r20, 0x01	; 1
    34ea:	50 40       	sbci	r21, 0x00	; 0
    34ec:	40 1b       	sub	r20, r16
    34ee:	51 0b       	sbc	r21, r17
    34f0:	c7 01       	movw	r24, r14
    34f2:	b8 01       	movw	r22, r16
    34f4:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN6String6concatEPKcj>
}
    34f8:	2b 96       	adiw	r28, 0x0b	; 11
    34fa:	0f b6       	in	r0, 0x3f	; 63
    34fc:	f8 94       	cli
    34fe:	de bf       	out	0x3e, r29	; 62
    3500:	0f be       	out	0x3f, r0	; 63
    3502:	cd bf       	out	0x3d, r28	; 61
    3504:	cf 91       	pop	r28
    3506:	df 91       	pop	r29
    3508:	1f 91       	pop	r17
    350a:	0f 91       	pop	r16
    350c:	ff 90       	pop	r15
    350e:	ef 90       	pop	r14
    3510:	08 95       	ret

00003512 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    3512:	0f 93       	push	r16
    3514:	1f 93       	push	r17
    3516:	8c 01       	movw	r16, r24
    3518:	fb 01       	movw	r30, r22
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    351a:	60 81       	ld	r22, Z
    351c:	71 81       	ldd	r23, Z+1	; 0x01
    351e:	44 81       	ldd	r20, Z+4	; 0x04
    3520:	55 81       	ldd	r21, Z+5	; 0x05
    3522:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN6String6concatEPKcj>
    3526:	88 23       	and	r24, r24
    3528:	19 f4       	brne	.+6      	; 0x3530 <_ZplRK15StringSumHelperRK6String+0x1e>
    352a:	c8 01       	movw	r24, r16
    352c:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <_ZN6String10invalidateEv>
	return a;
}
    3530:	c8 01       	movw	r24, r16
    3532:	1f 91       	pop	r17
    3534:	0f 91       	pop	r16
    3536:	08 95       	ret

00003538 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    3538:	0f 93       	push	r16
    353a:	1f 93       	push	r17
    353c:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    353e:	61 15       	cp	r22, r1
    3540:	71 05       	cpc	r23, r1
    3542:	69 f0       	breq	.+26     	; 0x355e <_ZplRK15StringSumHelperPKc+0x26>
    3544:	db 01       	movw	r26, r22
    3546:	0d 90       	ld	r0, X+
    3548:	00 20       	and	r0, r0
    354a:	e9 f7       	brne	.-6      	; 0x3546 <_ZplRK15StringSumHelperPKc+0xe>
    354c:	ad 01       	movw	r20, r26
    354e:	41 50       	subi	r20, 0x01	; 1
    3550:	50 40       	sbci	r21, 0x00	; 0
    3552:	46 1b       	sub	r20, r22
    3554:	57 0b       	sbc	r21, r23
    3556:	0e 94 3d 19 	call	0x327a	; 0x327a <_ZN6String6concatEPKcj>
    355a:	88 23       	and	r24, r24
    355c:	19 f4       	brne	.+6      	; 0x3564 <_ZplRK15StringSumHelperPKc+0x2c>
    355e:	c8 01       	movw	r24, r16
    3560:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <_ZN6String10invalidateEv>
	return a;
}
    3564:	c8 01       	movw	r24, r16
    3566:	1f 91       	pop	r17
    3568:	0f 91       	pop	r16
    356a:	08 95       	ret

0000356c <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    356c:	0f 93       	push	r16
    356e:	1f 93       	push	r17
    3570:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    3572:	0e 94 82 19 	call	0x3304	; 0x3304 <_ZN6String6concatEc>
    3576:	88 23       	and	r24, r24
    3578:	19 f4       	brne	.+6      	; 0x3580 <_ZplRK15StringSumHelperc+0x14>
    357a:	c8 01       	movw	r24, r16
    357c:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <_ZN6String10invalidateEv>
	return a;
}
    3580:	c8 01       	movw	r24, r16
    3582:	1f 91       	pop	r17
    3584:	0f 91       	pop	r16
    3586:	08 95       	ret

00003588 <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
    3588:	0f 93       	push	r16
    358a:	1f 93       	push	r17
    358c:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    358e:	0e 94 95 19 	call	0x332a	; 0x332a <_ZN6String6concatEh>
    3592:	88 23       	and	r24, r24
    3594:	19 f4       	brne	.+6      	; 0x359c <_ZplRK15StringSumHelperh+0x14>
    3596:	c8 01       	movw	r24, r16
    3598:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <_ZN6String10invalidateEv>
	return a;
}
    359c:	c8 01       	movw	r24, r16
    359e:	1f 91       	pop	r17
    35a0:	0f 91       	pop	r16
    35a2:	08 95       	ret

000035a4 <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    35a4:	0f 93       	push	r16
    35a6:	1f 93       	push	r17
    35a8:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    35aa:	0e 94 c2 19 	call	0x3384	; 0x3384 <_ZN6String6concatEi>
    35ae:	88 23       	and	r24, r24
    35b0:	19 f4       	brne	.+6      	; 0x35b8 <_ZplRK15StringSumHelperi+0x14>
    35b2:	c8 01       	movw	r24, r16
    35b4:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <_ZN6String10invalidateEv>
	return a;
}
    35b8:	c8 01       	movw	r24, r16
    35ba:	1f 91       	pop	r17
    35bc:	0f 91       	pop	r16
    35be:	08 95       	ret

000035c0 <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    35c0:	0f 93       	push	r16
    35c2:	1f 93       	push	r17
    35c4:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    35c6:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <_ZN6String6concatEj>
    35ca:	88 23       	and	r24, r24
    35cc:	19 f4       	brne	.+6      	; 0x35d4 <_ZplRK15StringSumHelperj+0x14>
    35ce:	c8 01       	movw	r24, r16
    35d0:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <_ZN6String10invalidateEv>
	return a;
}
    35d4:	c8 01       	movw	r24, r16
    35d6:	1f 91       	pop	r17
    35d8:	0f 91       	pop	r16
    35da:	08 95       	ret

000035dc <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    35dc:	0f 93       	push	r16
    35de:	1f 93       	push	r17
    35e0:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    35e2:	0e 94 23 1a 	call	0x3446	; 0x3446 <_ZN6String6concatEl>
    35e6:	88 23       	and	r24, r24
    35e8:	19 f4       	brne	.+6      	; 0x35f0 <_ZplRK15StringSumHelperl+0x14>
    35ea:	c8 01       	movw	r24, r16
    35ec:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <_ZN6String10invalidateEv>
	return a;
}
    35f0:	c8 01       	movw	r24, r16
    35f2:	1f 91       	pop	r17
    35f4:	0f 91       	pop	r16
    35f6:	08 95       	ret

000035f8 <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    35f8:	0f 93       	push	r16
    35fa:	1f 93       	push	r17
    35fc:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    35fe:	0e 94 56 1a 	call	0x34ac	; 0x34ac <_ZN6String6concatEm>
    3602:	88 23       	and	r24, r24
    3604:	19 f4       	brne	.+6      	; 0x360c <_ZplRK15StringSumHelperm+0x14>
    3606:	c8 01       	movw	r24, r16
    3608:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <_ZN6String10invalidateEv>
	return a;
}
    360c:	c8 01       	movw	r24, r16
    360e:	1f 91       	pop	r17
    3610:	0f 91       	pop	r16
    3612:	08 95       	ret

00003614 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    3614:	cf 93       	push	r28
    3616:	df 93       	push	r29
    3618:	fc 01       	movw	r30, r24
    361a:	db 01       	movw	r26, r22
	if (!buffer || !s.buffer) {
    361c:	80 81       	ld	r24, Z
    361e:	91 81       	ldd	r25, Z+1	; 0x01
    3620:	00 97       	sbiw	r24, 0x00	; 0
    3622:	31 f0       	breq	.+12     	; 0x3630 <_ZNK6String9compareToERKS_+0x1c>
    3624:	6d 91       	ld	r22, X+
    3626:	7c 91       	ld	r23, X
    3628:	11 97       	sbiw	r26, 0x01	; 1
    362a:	61 15       	cp	r22, r1
    362c:	71 05       	cpc	r23, r1
    362e:	e9 f4       	brne	.+58     	; 0x366a <_ZNK6String9compareToERKS_+0x56>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    3630:	cd 91       	ld	r28, X+
    3632:	dc 91       	ld	r29, X
    3634:	11 97       	sbiw	r26, 0x01	; 1
    3636:	20 97       	sbiw	r28, 0x00	; 0
    3638:	69 f0       	breq	.+26     	; 0x3654 <_ZNK6String9compareToERKS_+0x40>
    363a:	14 96       	adiw	r26, 0x04	; 4
    363c:	2d 91       	ld	r18, X+
    363e:	3c 91       	ld	r19, X
    3640:	15 97       	sbiw	r26, 0x05	; 5
    3642:	21 15       	cp	r18, r1
    3644:	31 05       	cpc	r19, r1
    3646:	31 f0       	breq	.+12     	; 0x3654 <_ZNK6String9compareToERKS_+0x40>
    3648:	28 81       	ld	r18, Y
    364a:	30 e0       	ldi	r19, 0x00	; 0
    364c:	30 95       	com	r19
    364e:	21 95       	neg	r18
    3650:	3f 4f       	sbci	r19, 0xFF	; 255
    3652:	12 c0       	rjmp	.+36     	; 0x3678 <_ZNK6String9compareToERKS_+0x64>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    3654:	00 97       	sbiw	r24, 0x00	; 0
    3656:	71 f0       	breq	.+28     	; 0x3674 <_ZNK6String9compareToERKS_+0x60>
    3658:	24 81       	ldd	r18, Z+4	; 0x04
    365a:	35 81       	ldd	r19, Z+5	; 0x05
    365c:	21 15       	cp	r18, r1
    365e:	31 05       	cpc	r19, r1
    3660:	49 f0       	breq	.+18     	; 0x3674 <_ZNK6String9compareToERKS_+0x60>
    3662:	fc 01       	movw	r30, r24
    3664:	20 81       	ld	r18, Z
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	07 c0       	rjmp	.+14     	; 0x3678 <_ZNK6String9compareToERKS_+0x64>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    366a:	0e 94 89 28 	call	0x5112	; 0x5112 <strcmp>
    366e:	28 2f       	mov	r18, r24
    3670:	39 2f       	mov	r19, r25
    3672:	02 c0       	rjmp	.+4      	; 0x3678 <_ZNK6String9compareToERKS_+0x64>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    3674:	20 e0       	ldi	r18, 0x00	; 0
    3676:	30 e0       	ldi	r19, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    3678:	c9 01       	movw	r24, r18
    367a:	df 91       	pop	r29
    367c:	cf 91       	pop	r28
    367e:	08 95       	ret

00003680 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    3680:	fc 01       	movw	r30, r24
    3682:	44 81       	ldd	r20, Z+4	; 0x04
    3684:	55 81       	ldd	r21, Z+5	; 0x05
    3686:	fb 01       	movw	r30, r22
    3688:	24 81       	ldd	r18, Z+4	; 0x04
    368a:	35 81       	ldd	r19, Z+5	; 0x05
    368c:	42 17       	cp	r20, r18
    368e:	53 07       	cpc	r21, r19
    3690:	29 f4       	brne	.+10     	; 0x369c <_ZNK6String6equalsERKS_+0x1c>
    3692:	0e 94 0a 1b 	call	0x3614	; 0x3614 <_ZNK6String9compareToERKS_>
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    3696:	21 e0       	ldi	r18, 0x01	; 1
    3698:	00 97       	sbiw	r24, 0x00	; 0
    369a:	09 f0       	breq	.+2      	; 0x369e <_ZNK6String6equalsERKS_+0x1e>
{
	return (len == s2.len && compareTo(s2) == 0);
    369c:	20 e0       	ldi	r18, 0x00	; 0
}
    369e:	82 2f       	mov	r24, r18
    36a0:	08 95       	ret

000036a2 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
    36a2:	fc 01       	movw	r30, r24
	if (len == 0) return (cstr == NULL || *cstr == 0);
    36a4:	84 81       	ldd	r24, Z+4	; 0x04
    36a6:	95 81       	ldd	r25, Z+5	; 0x05
    36a8:	00 97       	sbiw	r24, 0x00	; 0
    36aa:	41 f4       	brne	.+16     	; 0x36bc <_ZNK6String6equalsEPKc+0x1a>
    36ac:	61 15       	cp	r22, r1
    36ae:	71 05       	cpc	r23, r1
    36b0:	19 f0       	breq	.+6      	; 0x36b8 <_ZNK6String6equalsEPKc+0x16>
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    36b2:	81 e0       	ldi	r24, 0x01	; 1
    36b4:	fb 01       	movw	r30, r22
    36b6:	09 c0       	rjmp	.+18     	; 0x36ca <_ZNK6String6equalsEPKc+0x28>
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    36b8:	81 e0       	ldi	r24, 0x01	; 1
    36ba:	08 95       	ret
    36bc:	01 90       	ld	r0, Z+
    36be:	f0 81       	ld	r31, Z
    36c0:	e0 2d       	mov	r30, r0
	if (cstr == NULL) return buffer[0] == 0;
    36c2:	61 15       	cp	r22, r1
    36c4:	71 05       	cpc	r23, r1
    36c6:	31 f4       	brne	.+12     	; 0x36d4 <_ZNK6String6equalsEPKc+0x32>
    36c8:	81 e0       	ldi	r24, 0x01	; 1
    36ca:	90 81       	ld	r25, Z
    36cc:	99 23       	and	r25, r25
    36ce:	59 f0       	breq	.+22     	; 0x36e6 <_ZNK6String6equalsEPKc+0x44>
    36d0:	80 e0       	ldi	r24, 0x00	; 0
    36d2:	08 95       	ret
	return strcmp(buffer, cstr) == 0;
    36d4:	cf 01       	movw	r24, r30
    36d6:	0e 94 89 28 	call	0x5112	; 0x5112 <strcmp>
    36da:	9c 01       	movw	r18, r24
    36dc:	81 e0       	ldi	r24, 0x01	; 1
    36de:	21 15       	cp	r18, r1
    36e0:	31 05       	cpc	r19, r1
    36e2:	09 f0       	breq	.+2      	; 0x36e6 <_ZNK6String6equalsEPKc+0x44>
    36e4:	80 e0       	ldi	r24, 0x00	; 0
}
    36e6:	08 95       	ret

000036e8 <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    36e8:	0e 94 0a 1b 	call	0x3614	; 0x3614 <_ZNK6String9compareToERKS_>
}
    36ec:	89 2f       	mov	r24, r25
    36ee:	88 1f       	adc	r24, r24
    36f0:	88 27       	eor	r24, r24
    36f2:	88 1f       	adc	r24, r24
    36f4:	08 95       	ret

000036f6 <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    36f6:	0e 94 0a 1b 	call	0x3614	; 0x3614 <_ZNK6String9compareToERKS_>
    36fa:	21 e0       	ldi	r18, 0x01	; 1
    36fc:	18 16       	cp	r1, r24
    36fe:	19 06       	cpc	r1, r25
    3700:	0c f0       	brlt	.+2      	; 0x3704 <_ZNK6StringgtERKS_+0xe>
    3702:	20 e0       	ldi	r18, 0x00	; 0
}
    3704:	82 2f       	mov	r24, r18
    3706:	08 95       	ret

00003708 <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    3708:	0e 94 0a 1b 	call	0x3614	; 0x3614 <_ZNK6String9compareToERKS_>
    370c:	21 e0       	ldi	r18, 0x01	; 1
    370e:	18 16       	cp	r1, r24
    3710:	19 06       	cpc	r1, r25
    3712:	0c f4       	brge	.+2      	; 0x3716 <_ZNK6StringleERKS_+0xe>
    3714:	20 e0       	ldi	r18, 0x00	; 0
}
    3716:	82 2f       	mov	r24, r18
    3718:	08 95       	ret

0000371a <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    371a:	0e 94 0a 1b 	call	0x3614	; 0x3614 <_ZNK6String9compareToERKS_>
    371e:	89 2f       	mov	r24, r25
    3720:	80 95       	com	r24
}
    3722:	88 1f       	adc	r24, r24
    3724:	88 27       	eor	r24, r24
    3726:	88 1f       	adc	r24, r24
    3728:	08 95       	ret

0000372a <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    372a:	ef 92       	push	r14
    372c:	ff 92       	push	r15
    372e:	0f 93       	push	r16
    3730:	1f 93       	push	r17
    3732:	cf 93       	push	r28
    3734:	df 93       	push	r29
    3736:	fc 01       	movw	r30, r24
    3738:	db 01       	movw	r26, r22
	if (this == &s2) return 1;
    373a:	86 17       	cp	r24, r22
    373c:	97 07       	cpc	r25, r23
    373e:	29 f1       	breq	.+74     	; 0x378a <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
	if (len != s2.len) return 0;
    3740:	84 81       	ldd	r24, Z+4	; 0x04
    3742:	95 81       	ldd	r25, Z+5	; 0x05
    3744:	14 96       	adiw	r26, 0x04	; 4
    3746:	2d 91       	ld	r18, X+
    3748:	3c 91       	ld	r19, X
    374a:	15 97       	sbiw	r26, 0x05	; 5
    374c:	82 17       	cp	r24, r18
    374e:	93 07       	cpc	r25, r19
    3750:	f1 f4       	brne	.+60     	; 0x378e <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len == 0) return 1;
    3752:	00 97       	sbiw	r24, 0x00	; 0
    3754:	d1 f0       	breq	.+52     	; 0x378a <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
    3756:	00 81       	ld	r16, Z
    3758:	11 81       	ldd	r17, Z+1	; 0x01
    375a:	cd 91       	ld	r28, X+
    375c:	dc 91       	ld	r29, X
    375e:	11 97       	sbiw	r26, 0x01	; 1
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    3760:	0f c0       	rjmp	.+30     	; 0x3780 <_ZNK6String16equalsIgnoreCaseERKS_+0x56>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    3762:	99 27       	eor	r25, r25
    3764:	87 fd       	sbrc	r24, 7
    3766:	90 95       	com	r25
    3768:	0e 94 53 28 	call	0x50a6	; 0x50a6 <tolower>
    376c:	7c 01       	movw	r14, r24
    376e:	89 91       	ld	r24, Y+
    3770:	99 27       	eor	r25, r25
    3772:	87 fd       	sbrc	r24, 7
    3774:	90 95       	com	r25
    3776:	0e 94 53 28 	call	0x50a6	; 0x50a6 <tolower>
    377a:	e8 16       	cp	r14, r24
    377c:	f9 06       	cpc	r15, r25
    377e:	39 f4       	brne	.+14     	; 0x378e <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    3780:	f8 01       	movw	r30, r16
    3782:	81 91       	ld	r24, Z+
    3784:	8f 01       	movw	r16, r30
    3786:	88 23       	and	r24, r24
    3788:	61 f7       	brne	.-40     	; 0x3762 <_ZNK6String16equalsIgnoreCaseERKS_+0x38>

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
    378a:	81 e0       	ldi	r24, 0x01	; 1
    378c:	01 c0       	rjmp	.+2      	; 0x3790 <_ZNK6String16equalsIgnoreCaseERKS_+0x66>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    378e:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return 1;
}
    3790:	df 91       	pop	r29
    3792:	cf 91       	pop	r28
    3794:	1f 91       	pop	r17
    3796:	0f 91       	pop	r16
    3798:	ff 90       	pop	r15
    379a:	ef 90       	pop	r14
    379c:	08 95       	ret

0000379e <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    379e:	fc 01       	movw	r30, r24
    37a0:	db 01       	movw	r26, r22
    37a2:	ca 01       	movw	r24, r20
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    37a4:	14 96       	adiw	r26, 0x04	; 4
    37a6:	4d 91       	ld	r20, X+
    37a8:	5c 91       	ld	r21, X
    37aa:	15 97       	sbiw	r26, 0x05	; 5
    37ac:	24 81       	ldd	r18, Z+4	; 0x04
    37ae:	35 81       	ldd	r19, Z+5	; 0x05
    37b0:	24 1b       	sub	r18, r20
    37b2:	35 0b       	sbc	r19, r21
    37b4:	28 17       	cp	r18, r24
    37b6:	39 07       	cpc	r19, r25
    37b8:	a0 f0       	brcs	.+40     	; 0x37e2 <_ZNK6String10startsWithERKS_j+0x44>
    37ba:	20 81       	ld	r18, Z
    37bc:	31 81       	ldd	r19, Z+1	; 0x01
    37be:	21 15       	cp	r18, r1
    37c0:	31 05       	cpc	r19, r1
    37c2:	79 f0       	breq	.+30     	; 0x37e2 <_ZNK6String10startsWithERKS_j+0x44>
    37c4:	6d 91       	ld	r22, X+
    37c6:	7c 91       	ld	r23, X
    37c8:	11 97       	sbiw	r26, 0x01	; 1
    37ca:	61 15       	cp	r22, r1
    37cc:	71 05       	cpc	r23, r1
    37ce:	59 f0       	breq	.+22     	; 0x37e6 <_ZNK6String10startsWithERKS_j+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    37d0:	82 0f       	add	r24, r18
    37d2:	93 1f       	adc	r25, r19
    37d4:	0e 94 99 28 	call	0x5132	; 0x5132 <strncmp>
    37d8:	9c 01       	movw	r18, r24
    37da:	81 e0       	ldi	r24, 0x01	; 1
    37dc:	21 15       	cp	r18, r1
    37de:	31 05       	cpc	r19, r1
    37e0:	19 f0       	breq	.+6      	; 0x37e8 <_ZNK6String10startsWithERKS_j+0x4a>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    37e2:	80 e0       	ldi	r24, 0x00	; 0
    37e4:	08 95       	ret
    37e6:	80 e0       	ldi	r24, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    37e8:	08 95       	ret

000037ea <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    37ea:	fc 01       	movw	r30, r24
    37ec:	44 81       	ldd	r20, Z+4	; 0x04
    37ee:	55 81       	ldd	r21, Z+5	; 0x05
    37f0:	fb 01       	movw	r30, r22
    37f2:	24 81       	ldd	r18, Z+4	; 0x04
    37f4:	35 81       	ldd	r19, Z+5	; 0x05
    37f6:	42 17       	cp	r20, r18
    37f8:	53 07       	cpc	r21, r19
    37fa:	28 f0       	brcs	.+10     	; 0x3806 <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
    37fc:	40 e0       	ldi	r20, 0x00	; 0
    37fe:	50 e0       	ldi	r21, 0x00	; 0
    3800:	0e 94 cf 1b 	call	0x379e	; 0x379e <_ZNK6String10startsWithERKS_j>
    3804:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    3806:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
    3808:	08 95       	ret

0000380a <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    380a:	fc 01       	movw	r30, r24
    380c:	db 01       	movw	r26, r22
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    380e:	84 81       	ldd	r24, Z+4	; 0x04
    3810:	95 81       	ldd	r25, Z+5	; 0x05
    3812:	14 96       	adiw	r26, 0x04	; 4
    3814:	4d 91       	ld	r20, X+
    3816:	5c 91       	ld	r21, X
    3818:	15 97       	sbiw	r26, 0x05	; 5
    381a:	84 17       	cp	r24, r20
    381c:	95 07       	cpc	r25, r21
    381e:	b0 f0       	brcs	.+44     	; 0x384c <_ZNK6String8endsWithERKS_+0x42>
    3820:	20 81       	ld	r18, Z
    3822:	31 81       	ldd	r19, Z+1	; 0x01
    3824:	21 15       	cp	r18, r1
    3826:	31 05       	cpc	r19, r1
    3828:	89 f0       	breq	.+34     	; 0x384c <_ZNK6String8endsWithERKS_+0x42>
    382a:	6d 91       	ld	r22, X+
    382c:	7c 91       	ld	r23, X
    382e:	11 97       	sbiw	r26, 0x01	; 1
    3830:	61 15       	cp	r22, r1
    3832:	71 05       	cpc	r23, r1
    3834:	69 f0       	breq	.+26     	; 0x3850 <_ZNK6String8endsWithERKS_+0x46>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    3836:	84 1b       	sub	r24, r20
    3838:	95 0b       	sbc	r25, r21
    383a:	82 0f       	add	r24, r18
    383c:	93 1f       	adc	r25, r19
    383e:	0e 94 89 28 	call	0x5112	; 0x5112 <strcmp>
    3842:	9c 01       	movw	r18, r24
    3844:	81 e0       	ldi	r24, 0x01	; 1
    3846:	21 15       	cp	r18, r1
    3848:	31 05       	cpc	r19, r1
    384a:	19 f0       	breq	.+6      	; 0x3852 <_ZNK6String8endsWithERKS_+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    384c:	80 e0       	ldi	r24, 0x00	; 0
    384e:	08 95       	ret
    3850:	80 e0       	ldi	r24, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    3852:	08 95       	ret

00003854 <_ZN6String9setCharAtEjc>:
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
    3854:	fc 01       	movw	r30, r24
	if (loc < len) buffer[loc] = c;
    3856:	84 81       	ldd	r24, Z+4	; 0x04
    3858:	95 81       	ldd	r25, Z+5	; 0x05
    385a:	68 17       	cp	r22, r24
    385c:	79 07       	cpc	r23, r25
    385e:	30 f4       	brcc	.+12     	; 0x386c <_ZN6String9setCharAtEjc+0x18>
    3860:	01 90       	ld	r0, Z+
    3862:	f0 81       	ld	r31, Z
    3864:	e0 2d       	mov	r30, r0
    3866:	e6 0f       	add	r30, r22
    3868:	f7 1f       	adc	r31, r23
    386a:	40 83       	st	Z, r20
    386c:	08 95       	ret

0000386e <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
    386e:	fc 01       	movw	r30, r24
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    3870:	84 81       	ldd	r24, Z+4	; 0x04
    3872:	95 81       	ldd	r25, Z+5	; 0x05
    3874:	68 17       	cp	r22, r24
    3876:	79 07       	cpc	r23, r25
    3878:	20 f4       	brcc	.+8      	; 0x3882 <_ZN6StringixEj+0x14>
    387a:	80 81       	ld	r24, Z
    387c:	91 81       	ldd	r25, Z+1	; 0x01
    387e:	00 97       	sbiw	r24, 0x00	; 0
    3880:	29 f4       	brne	.+10     	; 0x388c <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    3882:	10 92 40 03 	sts	0x0340, r1
		return dummy_writable_char;
    3886:	60 e4       	ldi	r22, 0x40	; 64
    3888:	73 e0       	ldi	r23, 0x03	; 3
    388a:	02 c0       	rjmp	.+4      	; 0x3890 <_ZN6StringixEj+0x22>
	}
	return buffer[index];
    388c:	68 0f       	add	r22, r24
    388e:	79 1f       	adc	r23, r25
}
    3890:	cb 01       	movw	r24, r22
    3892:	08 95       	ret

00003894 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    3894:	fc 01       	movw	r30, r24
	if (index >= len || !buffer) return 0;
    3896:	84 81       	ldd	r24, Z+4	; 0x04
    3898:	95 81       	ldd	r25, Z+5	; 0x05
    389a:	68 17       	cp	r22, r24
    389c:	79 07       	cpc	r23, r25
    389e:	48 f4       	brcc	.+18     	; 0x38b2 <_ZNK6StringixEj+0x1e>
    38a0:	80 81       	ld	r24, Z
    38a2:	91 81       	ldd	r25, Z+1	; 0x01
    38a4:	00 97       	sbiw	r24, 0x00	; 0
    38a6:	39 f0       	breq	.+14     	; 0x38b6 <_ZNK6StringixEj+0x22>
	return buffer[index];
    38a8:	68 0f       	add	r22, r24
    38aa:	79 1f       	adc	r23, r25
    38ac:	fb 01       	movw	r30, r22
    38ae:	80 81       	ld	r24, Z
    38b0:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    38b2:	80 e0       	ldi	r24, 0x00	; 0
    38b4:	08 95       	ret
    38b6:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    38b8:	08 95       	ret

000038ba <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    38ba:	0e 94 4a 1c 	call	0x3894	; 0x3894 <_ZNK6StringixEj>
}
    38be:	08 95       	ret

000038c0 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    38c0:	0f 93       	push	r16
    38c2:	1f 93       	push	r17
    38c4:	cf 93       	push	r28
    38c6:	df 93       	push	r29
    38c8:	fc 01       	movw	r30, r24
    38ca:	8b 01       	movw	r16, r22
	if (!bufsize || !buf) return;
    38cc:	41 15       	cp	r20, r1
    38ce:	51 05       	cpc	r21, r1
    38d0:	f1 f0       	breq	.+60     	; 0x390e <_ZNK6String8getBytesEPhjj+0x4e>
    38d2:	61 15       	cp	r22, r1
    38d4:	71 05       	cpc	r23, r1
    38d6:	d9 f0       	breq	.+54     	; 0x390e <_ZNK6String8getBytesEPhjj+0x4e>
	if (index >= len) {
    38d8:	c4 81       	ldd	r28, Z+4	; 0x04
    38da:	d5 81       	ldd	r29, Z+5	; 0x05
    38dc:	2c 17       	cp	r18, r28
    38de:	3d 07       	cpc	r19, r29
    38e0:	18 f0       	brcs	.+6      	; 0x38e8 <_ZNK6String8getBytesEPhjj+0x28>
		buf[0] = 0;
    38e2:	fb 01       	movw	r30, r22
    38e4:	10 82       	st	Z, r1
		return;
    38e6:	13 c0       	rjmp	.+38     	; 0x390e <_ZNK6String8getBytesEPhjj+0x4e>
	}
	unsigned int n = bufsize - 1;
    38e8:	41 50       	subi	r20, 0x01	; 1
    38ea:	50 40       	sbci	r21, 0x00	; 0
	if (n > len - index) n = len - index;
    38ec:	c2 1b       	sub	r28, r18
    38ee:	d3 0b       	sbc	r29, r19
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    38f0:	4c 17       	cp	r20, r28
    38f2:	5d 07       	cpc	r21, r29
    38f4:	08 f4       	brcc	.+2      	; 0x38f8 <_ZNK6String8getBytesEPhjj+0x38>
    38f6:	ea 01       	movw	r28, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    38f8:	60 81       	ld	r22, Z
    38fa:	71 81       	ldd	r23, Z+1	; 0x01
    38fc:	62 0f       	add	r22, r18
    38fe:	73 1f       	adc	r23, r19
    3900:	c8 01       	movw	r24, r16
    3902:	ae 01       	movw	r20, r28
    3904:	0e 94 a7 28 	call	0x514e	; 0x514e <strncpy>
	buf[n] = 0;
    3908:	c0 0f       	add	r28, r16
    390a:	d1 1f       	adc	r29, r17
    390c:	18 82       	st	Y, r1
}
    390e:	df 91       	pop	r29
    3910:	cf 91       	pop	r28
    3912:	1f 91       	pop	r17
    3914:	0f 91       	pop	r16
    3916:	08 95       	ret

00003918 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    3918:	cf 93       	push	r28
    391a:	df 93       	push	r29
    391c:	fc 01       	movw	r30, r24
    391e:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    3920:	24 81       	ldd	r18, Z+4	; 0x04
    3922:	35 81       	ldd	r19, Z+5	; 0x05
    3924:	42 17       	cp	r20, r18
    3926:	53 07       	cpc	r21, r19
    3928:	78 f4       	brcc	.+30     	; 0x3948 <_ZNK6String7indexOfEcj+0x30>
	const char* temp = strchr(buffer + fromIndex, ch);
    392a:	c0 81       	ld	r28, Z
    392c:	d1 81       	ldd	r29, Z+1	; 0x01
    392e:	77 27       	eor	r23, r23
    3930:	67 fd       	sbrc	r22, 7
    3932:	70 95       	com	r23
    3934:	8c 0f       	add	r24, r28
    3936:	9d 1f       	adc	r25, r29
    3938:	0e 94 7e 28 	call	0x50fc	; 0x50fc <strchr>
	if (temp == NULL) return -1;
    393c:	00 97       	sbiw	r24, 0x00	; 0
    393e:	21 f0       	breq	.+8      	; 0x3948 <_ZNK6String7indexOfEcj+0x30>
	return temp - buffer;
    3940:	9c 01       	movw	r18, r24
    3942:	2c 1b       	sub	r18, r28
    3944:	3d 0b       	sbc	r19, r29
    3946:	02 c0       	rjmp	.+4      	; 0x394c <_ZNK6String7indexOfEcj+0x34>

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
    3948:	2f ef       	ldi	r18, 0xFF	; 255
    394a:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    394c:	c9 01       	movw	r24, r18
    394e:	df 91       	pop	r29
    3950:	cf 91       	pop	r28
    3952:	08 95       	ret

00003954 <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    3954:	40 e0       	ldi	r20, 0x00	; 0
    3956:	50 e0       	ldi	r21, 0x00	; 0
    3958:	0e 94 8c 1c 	call	0x3918	; 0x3918 <_ZNK6String7indexOfEcj>
}
    395c:	08 95       	ret

0000395e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    395e:	cf 93       	push	r28
    3960:	df 93       	push	r29
    3962:	fc 01       	movw	r30, r24
    3964:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    3966:	24 81       	ldd	r18, Z+4	; 0x04
    3968:	35 81       	ldd	r19, Z+5	; 0x05
    396a:	42 17       	cp	r20, r18
    396c:	53 07       	cpc	r21, r19
    396e:	78 f4       	brcc	.+30     	; 0x398e <_ZNK6String7indexOfERKS_j+0x30>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    3970:	c0 81       	ld	r28, Z
    3972:	d1 81       	ldd	r29, Z+1	; 0x01
    3974:	fb 01       	movw	r30, r22
    3976:	60 81       	ld	r22, Z
    3978:	71 81       	ldd	r23, Z+1	; 0x01
    397a:	8c 0f       	add	r24, r28
    397c:	9d 1f       	adc	r25, r29
    397e:	0e 94 c1 28 	call	0x5182	; 0x5182 <strstr>
	if (found == NULL) return -1;
    3982:	00 97       	sbiw	r24, 0x00	; 0
    3984:	21 f0       	breq	.+8      	; 0x398e <_ZNK6String7indexOfERKS_j+0x30>
	return found - buffer;
    3986:	9c 01       	movw	r18, r24
    3988:	2c 1b       	sub	r18, r28
    398a:	3d 0b       	sbc	r19, r29
    398c:	02 c0       	rjmp	.+4      	; 0x3992 <_ZNK6String7indexOfERKS_j+0x34>

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
    398e:	2f ef       	ldi	r18, 0xFF	; 255
    3990:	3f ef       	ldi	r19, 0xFF	; 255
	return found - buffer;
}
    3992:	c9 01       	movw	r24, r18
    3994:	df 91       	pop	r29
    3996:	cf 91       	pop	r28
    3998:	08 95       	ret

0000399a <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    399a:	40 e0       	ldi	r20, 0x00	; 0
    399c:	50 e0       	ldi	r21, 0x00	; 0
    399e:	0e 94 af 1c 	call	0x395e	; 0x395e <_ZNK6String7indexOfERKS_j>
}
    39a2:	08 95       	ret

000039a4 <_ZNK6String11lastIndexOfEcj>:
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    39a4:	df 92       	push	r13
    39a6:	ef 92       	push	r14
    39a8:	ff 92       	push	r15
    39aa:	0f 93       	push	r16
    39ac:	1f 93       	push	r17
    39ae:	cf 93       	push	r28
    39b0:	df 93       	push	r29
    39b2:	ec 01       	movw	r28, r24
	if (fromIndex >= len || fromIndex < 0) return -1;
    39b4:	8c 81       	ldd	r24, Y+4	; 0x04
    39b6:	9d 81       	ldd	r25, Y+5	; 0x05
    39b8:	48 17       	cp	r20, r24
    39ba:	59 07       	cpc	r21, r25
    39bc:	f8 f4       	brcc	.+62     	; 0x39fc <_ZNK6String11lastIndexOfEcj+0x58>
	char tempchar = buffer[fromIndex + 1];
    39be:	7a 01       	movw	r14, r20
    39c0:	08 94       	sec
    39c2:	e1 1c       	adc	r14, r1
    39c4:	f1 1c       	adc	r15, r1
    39c6:	e8 81       	ld	r30, Y
    39c8:	f9 81       	ldd	r31, Y+1	; 0x01
    39ca:	ee 0d       	add	r30, r14
    39cc:	ff 1d       	adc	r31, r15
    39ce:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    39d0:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    39d2:	08 81       	ld	r16, Y
    39d4:	19 81       	ldd	r17, Y+1	; 0x01
    39d6:	77 27       	eor	r23, r23
    39d8:	67 fd       	sbrc	r22, 7
    39da:	70 95       	com	r23
    39dc:	c8 01       	movw	r24, r16
    39de:	0e 94 b6 28 	call	0x516c	; 0x516c <strrchr>
	buffer[fromIndex + 1] = tempchar;
    39e2:	0e 0d       	add	r16, r14
    39e4:	1f 1d       	adc	r17, r15
    39e6:	f8 01       	movw	r30, r16
    39e8:	d0 82       	st	Z, r13
	if (temp == NULL) return -1;
    39ea:	00 97       	sbiw	r24, 0x00	; 0
    39ec:	39 f0       	breq	.+14     	; 0x39fc <_ZNK6String11lastIndexOfEcj+0x58>
	return temp - buffer;
    39ee:	28 81       	ld	r18, Y
    39f0:	39 81       	ldd	r19, Y+1	; 0x01
    39f2:	ac 01       	movw	r20, r24
    39f4:	42 1b       	sub	r20, r18
    39f6:	53 0b       	sbc	r21, r19
    39f8:	9a 01       	movw	r18, r20
    39fa:	02 c0       	rjmp	.+4      	; 0x3a00 <_ZNK6String11lastIndexOfEcj+0x5c>
	if (fromIndex >= len || fromIndex < 0) return -1;
	char tempchar = buffer[fromIndex + 1];
	buffer[fromIndex + 1] = '\0';
	char* temp = strrchr( buffer, ch );
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
    39fc:	2f ef       	ldi	r18, 0xFF	; 255
    39fe:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    3a00:	c9 01       	movw	r24, r18
    3a02:	df 91       	pop	r29
    3a04:	cf 91       	pop	r28
    3a06:	1f 91       	pop	r17
    3a08:	0f 91       	pop	r16
    3a0a:	ff 90       	pop	r15
    3a0c:	ef 90       	pop	r14
    3a0e:	df 90       	pop	r13
    3a10:	08 95       	ret

00003a12 <_ZNK6String11lastIndexOfEc>:
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
    3a12:	fc 01       	movw	r30, r24
    3a14:	44 81       	ldd	r20, Z+4	; 0x04
    3a16:	55 81       	ldd	r21, Z+5	; 0x05
    3a18:	41 50       	subi	r20, 0x01	; 1
    3a1a:	50 40       	sbci	r21, 0x00	; 0
    3a1c:	0e 94 d2 1c 	call	0x39a4	; 0x39a4 <_ZNK6String11lastIndexOfEcj>
}
    3a20:	08 95       	ret

00003a22 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    3a22:	af 92       	push	r10
    3a24:	bf 92       	push	r11
    3a26:	cf 92       	push	r12
    3a28:	df 92       	push	r13
    3a2a:	ef 92       	push	r14
    3a2c:	ff 92       	push	r15
    3a2e:	0f 93       	push	r16
    3a30:	1f 93       	push	r17
    3a32:	cf 93       	push	r28
    3a34:	df 93       	push	r29
    3a36:	fc 01       	movw	r30, r24
    3a38:	6b 01       	movw	r12, r22
    3a3a:	8a 01       	movw	r16, r20
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    3a3c:	db 01       	movw	r26, r22
    3a3e:	14 96       	adiw	r26, 0x04	; 4
    3a40:	2d 91       	ld	r18, X+
    3a42:	3c 91       	ld	r19, X
    3a44:	15 97       	sbiw	r26, 0x05	; 5
    3a46:	21 15       	cp	r18, r1
    3a48:	31 05       	cpc	r19, r1
    3a4a:	51 f1       	breq	.+84     	; 0x3aa0 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    3a4c:	84 81       	ldd	r24, Z+4	; 0x04
    3a4e:	95 81       	ldd	r25, Z+5	; 0x05
    3a50:	00 97       	sbiw	r24, 0x00	; 0
    3a52:	31 f1       	breq	.+76     	; 0x3aa0 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    3a54:	82 17       	cp	r24, r18
    3a56:	93 07       	cpc	r25, r19
    3a58:	18 f1       	brcs	.+70     	; 0x3aa0 <_ZNK6String11lastIndexOfERKS_j+0x7e>
	if (fromIndex >= len) fromIndex = len - 1;
    3a5a:	48 17       	cp	r20, r24
    3a5c:	59 07       	cpc	r21, r25
    3a5e:	18 f0       	brcs	.+6      	; 0x3a66 <_ZNK6String11lastIndexOfERKS_j+0x44>
    3a60:	8c 01       	movw	r16, r24
    3a62:	01 50       	subi	r16, 0x01	; 1
    3a64:	10 40       	sbci	r17, 0x00	; 0
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3a66:	e0 80       	ld	r14, Z
    3a68:	f1 80       	ldd	r15, Z+1	; 0x01
    3a6a:	c7 01       	movw	r24, r14

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    3a6c:	cf ef       	ldi	r28, 0xFF	; 255
    3a6e:	df ef       	ldi	r29, 0xFF	; 255
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3a70:	57 01       	movw	r10, r14
    3a72:	a0 0e       	add	r10, r16
    3a74:	b1 1e       	adc	r11, r17
    3a76:	10 c0       	rjmp	.+32     	; 0x3a98 <_ZNK6String11lastIndexOfERKS_j+0x76>
		p = strstr(p, s2.buffer);
    3a78:	f6 01       	movw	r30, r12
    3a7a:	60 81       	ld	r22, Z
    3a7c:	71 81       	ldd	r23, Z+1	; 0x01
    3a7e:	0e 94 c1 28 	call	0x5182	; 0x5182 <strstr>
		if (!p) break;
    3a82:	00 97       	sbiw	r24, 0x00	; 0
    3a84:	79 f0       	breq	.+30     	; 0x3aa4 <_ZNK6String11lastIndexOfERKS_j+0x82>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    3a86:	9c 01       	movw	r18, r24
    3a88:	2e 19       	sub	r18, r14
    3a8a:	3f 09       	sbc	r19, r15
    3a8c:	02 17       	cp	r16, r18
    3a8e:	13 07       	cpc	r17, r19
    3a90:	08 f4       	brcc	.+2      	; 0x3a94 <_ZNK6String11lastIndexOfERKS_j+0x72>
    3a92:	9e 01       	movw	r18, r28
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3a94:	01 96       	adiw	r24, 0x01	; 1
    3a96:	e9 01       	movw	r28, r18
    3a98:	a8 16       	cp	r10, r24
    3a9a:	b9 06       	cpc	r11, r25
    3a9c:	68 f7       	brcc	.-38     	; 0x3a78 <_ZNK6String11lastIndexOfERKS_j+0x56>
    3a9e:	02 c0       	rjmp	.+4      	; 0x3aa4 <_ZNK6String11lastIndexOfERKS_j+0x82>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    3aa0:	cf ef       	ldi	r28, 0xFF	; 255
    3aa2:	df ef       	ldi	r29, 0xFF	; 255
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    3aa4:	ce 01       	movw	r24, r28
    3aa6:	df 91       	pop	r29
    3aa8:	cf 91       	pop	r28
    3aaa:	1f 91       	pop	r17
    3aac:	0f 91       	pop	r16
    3aae:	ff 90       	pop	r15
    3ab0:	ef 90       	pop	r14
    3ab2:	df 90       	pop	r13
    3ab4:	cf 90       	pop	r12
    3ab6:	bf 90       	pop	r11
    3ab8:	af 90       	pop	r10
    3aba:	08 95       	ret

00003abc <_ZNK6String11lastIndexOfERKS_>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    3abc:	fc 01       	movw	r30, r24
    3abe:	44 81       	ldd	r20, Z+4	; 0x04
    3ac0:	55 81       	ldd	r21, Z+5	; 0x05
    3ac2:	fb 01       	movw	r30, r22
    3ac4:	24 81       	ldd	r18, Z+4	; 0x04
    3ac6:	35 81       	ldd	r19, Z+5	; 0x05
    3ac8:	42 1b       	sub	r20, r18
    3aca:	53 0b       	sbc	r21, r19
    3acc:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <_ZNK6String11lastIndexOfERKS_j>
}
    3ad0:	08 95       	ret

00003ad2 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    3ad2:	af 92       	push	r10
    3ad4:	bf 92       	push	r11
    3ad6:	cf 92       	push	r12
    3ad8:	df 92       	push	r13
    3ada:	ef 92       	push	r14
    3adc:	ff 92       	push	r15
    3ade:	0f 93       	push	r16
    3ae0:	1f 93       	push	r17
    3ae2:	cf 93       	push	r28
    3ae4:	df 93       	push	r29
    3ae6:	f8 2e       	mov	r15, r24
    3ae8:	e9 2e       	mov	r14, r25
    3aea:	6b 01       	movw	r12, r22
    3aec:	8a 01       	movw	r16, r20
    3aee:	e9 01       	movw	r28, r18
	if (left > right) {
    3af0:	24 17       	cp	r18, r20
    3af2:	35 07       	cpc	r19, r21
    3af4:	48 f4       	brcc	.+18     	; 0x3b08 <_ZNK6String9substringEjj+0x36>
    3af6:	34 2f       	mov	r19, r20
    3af8:	21 2f       	mov	r18, r17
    3afa:	8e 01       	movw	r16, r28
    3afc:	c9 01       	movw	r24, r18
    3afe:	a9 2e       	mov	r10, r25
    3b00:	e5 01       	movw	r28, r10
    3b02:	5e 01       	movw	r10, r28
    3b04:	b2 2e       	mov	r11, r18
    3b06:	e5 01       	movw	r28, r10
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    3b08:	8f 2d       	mov	r24, r15
    3b0a:	9e 2d       	mov	r25, r14
    3b0c:	6b ed       	ldi	r22, 0xDB	; 219
    3b0e:	71 e0       	ldi	r23, 0x01	; 1
    3b10:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <_ZN6StringC1EPKc>
	if (left > len) return out;
    3b14:	d6 01       	movw	r26, r12
    3b16:	14 96       	adiw	r26, 0x04	; 4
    3b18:	8d 91       	ld	r24, X+
    3b1a:	9c 91       	ld	r25, X
    3b1c:	15 97       	sbiw	r26, 0x05	; 5
    3b1e:	80 17       	cp	r24, r16
    3b20:	91 07       	cpc	r25, r17
    3b22:	d8 f0       	brcs	.+54     	; 0x3b5a <_ZNK6String9substringEjj+0x88>
    3b24:	8c 17       	cp	r24, r28
    3b26:	9d 07       	cpc	r25, r29
    3b28:	08 f4       	brcc	.+2      	; 0x3b2c <_ZNK6String9substringEjj+0x5a>
    3b2a:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    3b2c:	d6 01       	movw	r26, r12
    3b2e:	ed 91       	ld	r30, X+
    3b30:	fc 91       	ld	r31, X
    3b32:	11 97       	sbiw	r26, 0x01	; 1
    3b34:	ec 0f       	add	r30, r28
    3b36:	fd 1f       	adc	r31, r29
    3b38:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    3b3a:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    3b3c:	6d 91       	ld	r22, X+
    3b3e:	7c 91       	ld	r23, X
    3b40:	60 0f       	add	r22, r16
    3b42:	71 1f       	adc	r23, r17
    3b44:	8f 2d       	mov	r24, r15
    3b46:	9e 2d       	mov	r25, r14
    3b48:	0e 94 19 18 	call	0x3032	; 0x3032 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    3b4c:	d6 01       	movw	r26, r12
    3b4e:	ed 91       	ld	r30, X+
    3b50:	fc 91       	ld	r31, X
    3b52:	11 97       	sbiw	r26, 0x01	; 1
    3b54:	ec 0f       	add	r30, r28
    3b56:	fd 1f       	adc	r31, r29
    3b58:	b0 82       	st	Z, r11
	return out;
}
    3b5a:	8f 2d       	mov	r24, r15
    3b5c:	9e 2d       	mov	r25, r14
    3b5e:	df 91       	pop	r29
    3b60:	cf 91       	pop	r28
    3b62:	1f 91       	pop	r17
    3b64:	0f 91       	pop	r16
    3b66:	ff 90       	pop	r15
    3b68:	ef 90       	pop	r14
    3b6a:	df 90       	pop	r13
    3b6c:	cf 90       	pop	r12
    3b6e:	bf 90       	pop	r11
    3b70:	af 90       	pop	r10
    3b72:	08 95       	ret

00003b74 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    3b74:	cf 93       	push	r28
    3b76:	df 93       	push	r29
    3b78:	ec 01       	movw	r28, r24
	return substring(left, len);
    3b7a:	fb 01       	movw	r30, r22
    3b7c:	24 81       	ldd	r18, Z+4	; 0x04
    3b7e:	35 81       	ldd	r19, Z+5	; 0x05
    3b80:	0e 94 69 1d 	call	0x3ad2	; 0x3ad2 <_ZNK6String9substringEjj>
}
    3b84:	ce 01       	movw	r24, r28
    3b86:	df 91       	pop	r29
    3b88:	cf 91       	pop	r28
    3b8a:	08 95       	ret

00003b8c <_ZN6String7replaceEcc>:
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	ed 91       	ld	r30, X+
    3b90:	fc 91       	ld	r31, X
    3b92:	11 97       	sbiw	r26, 0x01	; 1
    3b94:	30 97       	sbiw	r30, 0x00	; 0
    3b96:	29 f4       	brne	.+10     	; 0x3ba2 <_ZN6String7replaceEcc+0x16>
    3b98:	08 95       	ret
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    3b9a:	86 17       	cp	r24, r22
    3b9c:	09 f4       	brne	.+2      	; 0x3ba0 <_ZN6String7replaceEcc+0x14>
    3b9e:	40 83       	st	Z, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3ba0:	31 96       	adiw	r30, 0x01	; 1
    3ba2:	80 81       	ld	r24, Z
    3ba4:	88 23       	and	r24, r24
    3ba6:	c9 f7       	brne	.-14     	; 0x3b9a <_ZN6String7replaceEcc+0xe>
    3ba8:	08 95       	ret

00003baa <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    3baa:	2f 92       	push	r2
    3bac:	3f 92       	push	r3
    3bae:	4f 92       	push	r4
    3bb0:	5f 92       	push	r5
    3bb2:	6f 92       	push	r6
    3bb4:	7f 92       	push	r7
    3bb6:	8f 92       	push	r8
    3bb8:	9f 92       	push	r9
    3bba:	af 92       	push	r10
    3bbc:	bf 92       	push	r11
    3bbe:	cf 92       	push	r12
    3bc0:	df 92       	push	r13
    3bc2:	ef 92       	push	r14
    3bc4:	ff 92       	push	r15
    3bc6:	0f 93       	push	r16
    3bc8:	1f 93       	push	r17
    3bca:	cf 93       	push	r28
    3bcc:	df 93       	push	r29
    3bce:	7c 01       	movw	r14, r24
    3bd0:	2b 01       	movw	r4, r22
    3bd2:	6a 01       	movw	r12, r20
	if (len == 0 || find.len == 0) return;
    3bd4:	dc 01       	movw	r26, r24
    3bd6:	14 96       	adiw	r26, 0x04	; 4
    3bd8:	6d 90       	ld	r6, X+
    3bda:	7c 90       	ld	r7, X
    3bdc:	15 97       	sbiw	r26, 0x05	; 5
    3bde:	61 14       	cp	r6, r1
    3be0:	71 04       	cpc	r7, r1
    3be2:	09 f4       	brne	.+2      	; 0x3be6 <_ZN6String7replaceERKS_S1_+0x3c>
    3be4:	d9 c0       	rjmp	.+434    	; 0x3d98 <_ZN6String7replaceERKS_S1_+0x1ee>
    3be6:	fb 01       	movw	r30, r22
    3be8:	84 80       	ldd	r8, Z+4	; 0x04
    3bea:	95 80       	ldd	r9, Z+5	; 0x05
    3bec:	81 14       	cp	r8, r1
    3bee:	91 04       	cpc	r9, r1
    3bf0:	09 f4       	brne	.+2      	; 0x3bf4 <_ZN6String7replaceERKS_S1_+0x4a>
    3bf2:	d2 c0       	rjmp	.+420    	; 0x3d98 <_ZN6String7replaceERKS_S1_+0x1ee>
	int diff = replace.len - find.len;
    3bf4:	da 01       	movw	r26, r20
    3bf6:	14 96       	adiw	r26, 0x04	; 4
    3bf8:	ad 90       	ld	r10, X+
    3bfa:	bc 90       	ld	r11, X
    3bfc:	15 97       	sbiw	r26, 0x05	; 5
    3bfe:	a8 18       	sub	r10, r8
    3c00:	b9 08       	sbc	r11, r9
	char *readFrom = buffer;
    3c02:	fc 01       	movw	r30, r24
    3c04:	00 81       	ld	r16, Z
    3c06:	11 81       	ldd	r17, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    3c08:	a1 14       	cp	r10, r1
    3c0a:	b1 04       	cpc	r11, r1
    3c0c:	f1 f4       	brne	.+60     	; 0x3c4a <_ZN6String7replaceERKS_S1_+0xa0>
    3c0e:	13 c0       	rjmp	.+38     	; 0x3c36 <_ZN6String7replaceERKS_S1_+0x8c>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    3c10:	d6 01       	movw	r26, r12
    3c12:	6c 91       	ld	r22, X
    3c14:	11 96       	adiw	r26, 0x01	; 1
    3c16:	7c 91       	ld	r23, X
    3c18:	11 97       	sbiw	r26, 0x01	; 1
    3c1a:	14 96       	adiw	r26, 0x04	; 4
    3c1c:	4d 91       	ld	r20, X+
    3c1e:	5c 91       	ld	r21, X
    3c20:	15 97       	sbiw	r26, 0x05	; 5
    3c22:	ce 01       	movw	r24, r28
    3c24:	0e 94 63 28 	call	0x50c6	; 0x50c6 <memcpy>
			readFrom = foundAt + replace.len;
    3c28:	d6 01       	movw	r26, r12
    3c2a:	14 96       	adiw	r26, 0x04	; 4
    3c2c:	0d 91       	ld	r16, X+
    3c2e:	1c 91       	ld	r17, X
    3c30:	15 97       	sbiw	r26, 0x05	; 5
    3c32:	0c 0f       	add	r16, r28
    3c34:	1d 1f       	adc	r17, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3c36:	f2 01       	movw	r30, r4
    3c38:	60 81       	ld	r22, Z
    3c3a:	71 81       	ldd	r23, Z+1	; 0x01
    3c3c:	c8 01       	movw	r24, r16
    3c3e:	0e 94 c1 28 	call	0x5182	; 0x5182 <strstr>
    3c42:	ec 01       	movw	r28, r24
    3c44:	00 97       	sbiw	r24, 0x00	; 0
    3c46:	21 f7       	brne	.-56     	; 0x3c10 <_ZN6String7replaceERKS_S1_+0x66>
    3c48:	a7 c0       	rjmp	.+334    	; 0x3d98 <_ZN6String7replaceERKS_S1_+0x1ee>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    3c4a:	b7 fc       	sbrc	r11, 7
    3c4c:	02 c0       	rjmp	.+4      	; 0x3c52 <_ZN6String7replaceERKS_S1_+0xa8>
    3c4e:	e3 01       	movw	r28, r6
    3c50:	42 c0       	rjmp	.+132    	; 0x3cd6 <_ZN6String7replaceERKS_S1_+0x12c>
    3c52:	48 01       	movw	r8, r16
    3c54:	2d c0       	rjmp	.+90     	; 0x3cb0 <_ZN6String7replaceERKS_S1_+0x106>
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    3c56:	e3 01       	movw	r28, r6
    3c58:	c0 1b       	sub	r28, r16
    3c5a:	d1 0b       	sbc	r29, r17
			memcpy(writeTo, readFrom, n);
    3c5c:	c4 01       	movw	r24, r8
    3c5e:	b8 01       	movw	r22, r16
    3c60:	ae 01       	movw	r20, r28
    3c62:	0e 94 63 28 	call	0x50c6	; 0x50c6 <memcpy>
			writeTo += n;
    3c66:	c8 0d       	add	r28, r8
    3c68:	d9 1d       	adc	r29, r9
			memcpy(writeTo, replace.buffer, replace.len);
    3c6a:	d6 01       	movw	r26, r12
    3c6c:	6c 91       	ld	r22, X
    3c6e:	11 96       	adiw	r26, 0x01	; 1
    3c70:	7c 91       	ld	r23, X
    3c72:	11 97       	sbiw	r26, 0x01	; 1
    3c74:	14 96       	adiw	r26, 0x04	; 4
    3c76:	4d 91       	ld	r20, X+
    3c78:	5c 91       	ld	r21, X
    3c7a:	15 97       	sbiw	r26, 0x05	; 5
    3c7c:	ce 01       	movw	r24, r28
    3c7e:	0e 94 63 28 	call	0x50c6	; 0x50c6 <memcpy>
			writeTo += replace.len;
    3c82:	d6 01       	movw	r26, r12
    3c84:	14 96       	adiw	r26, 0x04	; 4
    3c86:	8d 90       	ld	r8, X+
    3c88:	9c 90       	ld	r9, X
    3c8a:	15 97       	sbiw	r26, 0x05	; 5
    3c8c:	8c 0e       	add	r8, r28
    3c8e:	9d 1e       	adc	r9, r29
			readFrom = foundAt + find.len;
    3c90:	f2 01       	movw	r30, r4
    3c92:	04 81       	ldd	r16, Z+4	; 0x04
    3c94:	15 81       	ldd	r17, Z+5	; 0x05
    3c96:	06 0d       	add	r16, r6
    3c98:	17 1d       	adc	r17, r7
			len += diff;
    3c9a:	d7 01       	movw	r26, r14
    3c9c:	14 96       	adiw	r26, 0x04	; 4
    3c9e:	8d 91       	ld	r24, X+
    3ca0:	9c 91       	ld	r25, X
    3ca2:	15 97       	sbiw	r26, 0x05	; 5
    3ca4:	8a 0d       	add	r24, r10
    3ca6:	9b 1d       	adc	r25, r11
    3ca8:	15 96       	adiw	r26, 0x05	; 5
    3caa:	9c 93       	st	X, r25
    3cac:	8e 93       	st	-X, r24
    3cae:	14 97       	sbiw	r26, 0x04	; 4
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3cb0:	f2 01       	movw	r30, r4
    3cb2:	60 81       	ld	r22, Z
    3cb4:	71 81       	ldd	r23, Z+1	; 0x01
    3cb6:	c8 01       	movw	r24, r16
    3cb8:	0e 94 c1 28 	call	0x5182	; 0x5182 <strstr>
    3cbc:	3c 01       	movw	r6, r24
    3cbe:	00 97       	sbiw	r24, 0x00	; 0
    3cc0:	51 f6       	brne	.-108    	; 0x3c56 <_ZN6String7replaceERKS_S1_+0xac>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    3cc2:	c4 01       	movw	r24, r8
    3cc4:	b8 01       	movw	r22, r16
    3cc6:	0e 94 92 28 	call	0x5124	; 0x5124 <strcpy>
    3cca:	66 c0       	rjmp	.+204    	; 0x3d98 <_ZN6String7replaceERKS_S1_+0x1ee>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    3ccc:	8c 01       	movw	r16, r24
    3cce:	08 0d       	add	r16, r8
    3cd0:	19 1d       	adc	r17, r9
			size += diff;
    3cd2:	ca 0d       	add	r28, r10
    3cd4:	db 1d       	adc	r29, r11
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3cd6:	d2 01       	movw	r26, r4
    3cd8:	6d 91       	ld	r22, X+
    3cda:	7c 91       	ld	r23, X
    3cdc:	c8 01       	movw	r24, r16
    3cde:	0e 94 c1 28 	call	0x5182	; 0x5182 <strstr>
    3ce2:	00 97       	sbiw	r24, 0x00	; 0
    3ce4:	99 f7       	brne	.-26     	; 0x3ccc <_ZN6String7replaceERKS_S1_+0x122>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    3ce6:	c6 15       	cp	r28, r6
    3ce8:	d7 05       	cpc	r29, r7
    3cea:	09 f4       	brne	.+2      	; 0x3cee <_ZN6String7replaceERKS_S1_+0x144>
    3cec:	55 c0       	rjmp	.+170    	; 0x3d98 <_ZN6String7replaceERKS_S1_+0x1ee>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    3cee:	f7 01       	movw	r30, r14
    3cf0:	82 81       	ldd	r24, Z+2	; 0x02
    3cf2:	93 81       	ldd	r25, Z+3	; 0x03
    3cf4:	8c 17       	cp	r24, r28
    3cf6:	9d 07       	cpc	r25, r29
    3cf8:	08 f0       	brcs	.+2      	; 0x3cfc <_ZN6String7replaceERKS_S1_+0x152>
    3cfa:	45 c0       	rjmp	.+138    	; 0x3d86 <_ZN6String7replaceERKS_S1_+0x1dc>
    3cfc:	c7 01       	movw	r24, r14
    3cfe:	be 01       	movw	r22, r28
    3d00:	0e 94 7e 17 	call	0x2efc	; 0x2efc <_ZN6String12changeBufferEj>
    3d04:	88 23       	and	r24, r24
    3d06:	09 f4       	brne	.+2      	; 0x3d0a <_ZN6String7replaceERKS_S1_+0x160>
    3d08:	47 c0       	rjmp	.+142    	; 0x3d98 <_ZN6String7replaceERKS_S1_+0x1ee>
    3d0a:	3d c0       	rjmp	.+122    	; 0x3d86 <_ZN6String7replaceERKS_S1_+0x1dc>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    3d0c:	c7 01       	movw	r24, r14
    3d0e:	b2 01       	movw	r22, r4
    3d10:	a9 01       	movw	r20, r18
    3d12:	0e 94 11 1d 	call	0x3a22	; 0x3a22 <_ZNK6String11lastIndexOfERKS_j>
    3d16:	ec 01       	movw	r28, r24
    3d18:	97 fd       	sbrc	r25, 7
    3d1a:	3e c0       	rjmp	.+124    	; 0x3d98 <_ZN6String7replaceERKS_S1_+0x1ee>
			readFrom = buffer + index + find.len;
    3d1c:	d7 01       	movw	r26, r14
    3d1e:	6d 91       	ld	r22, X+
    3d20:	7c 91       	ld	r23, X
    3d22:	11 97       	sbiw	r26, 0x01	; 1
    3d24:	f2 01       	movw	r30, r4
    3d26:	84 81       	ldd	r24, Z+4	; 0x04
    3d28:	95 81       	ldd	r25, Z+5	; 0x05
    3d2a:	8c 0f       	add	r24, r28
    3d2c:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    3d2e:	68 0f       	add	r22, r24
    3d30:	79 1f       	adc	r23, r25
    3d32:	14 96       	adiw	r26, 0x04	; 4
    3d34:	4d 91       	ld	r20, X+
    3d36:	5c 91       	ld	r21, X
    3d38:	15 97       	sbiw	r26, 0x05	; 5
    3d3a:	48 1b       	sub	r20, r24
    3d3c:	59 0b       	sbc	r21, r25
    3d3e:	cb 01       	movw	r24, r22
    3d40:	8a 0d       	add	r24, r10
    3d42:	9b 1d       	adc	r25, r11
    3d44:	0e 94 6c 28 	call	0x50d8	; 0x50d8 <memmove>
			len += diff;
    3d48:	d7 01       	movw	r26, r14
    3d4a:	14 96       	adiw	r26, 0x04	; 4
    3d4c:	8d 91       	ld	r24, X+
    3d4e:	9c 91       	ld	r25, X
    3d50:	15 97       	sbiw	r26, 0x05	; 5
    3d52:	8a 0d       	add	r24, r10
    3d54:	9b 1d       	adc	r25, r11
    3d56:	15 96       	adiw	r26, 0x05	; 5
    3d58:	9c 93       	st	X, r25
    3d5a:	8e 93       	st	-X, r24
    3d5c:	14 97       	sbiw	r26, 0x04	; 4
			buffer[len] = 0;
    3d5e:	ed 91       	ld	r30, X+
    3d60:	fc 91       	ld	r31, X
    3d62:	11 97       	sbiw	r26, 0x01	; 1
    3d64:	e8 0f       	add	r30, r24
    3d66:	f9 1f       	adc	r31, r25
    3d68:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    3d6a:	2d 91       	ld	r18, X+
    3d6c:	3c 91       	ld	r19, X
    3d6e:	2c 0f       	add	r18, r28
    3d70:	3d 1f       	adc	r19, r29
    3d72:	f6 01       	movw	r30, r12
    3d74:	60 81       	ld	r22, Z
    3d76:	71 81       	ldd	r23, Z+1	; 0x01
    3d78:	44 81       	ldd	r20, Z+4	; 0x04
    3d7a:	55 81       	ldd	r21, Z+5	; 0x05
    3d7c:	c9 01       	movw	r24, r18
    3d7e:	0e 94 63 28 	call	0x50c6	; 0x50c6 <memcpy>
			index--;
    3d82:	9e 01       	movw	r18, r28
    3d84:	05 c0       	rjmp	.+10     	; 0x3d90 <_ZN6String7replaceERKS_S1_+0x1e6>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    3d86:	d7 01       	movw	r26, r14
    3d88:	14 96       	adiw	r26, 0x04	; 4
    3d8a:	2d 91       	ld	r18, X+
    3d8c:	3c 91       	ld	r19, X
    3d8e:	15 97       	sbiw	r26, 0x05	; 5
    3d90:	21 50       	subi	r18, 0x01	; 1
    3d92:	30 40       	sbci	r19, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    3d94:	37 ff       	sbrs	r19, 7
    3d96:	ba cf       	rjmp	.-140    	; 0x3d0c <_ZN6String7replaceERKS_S1_+0x162>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    3d98:	df 91       	pop	r29
    3d9a:	cf 91       	pop	r28
    3d9c:	1f 91       	pop	r17
    3d9e:	0f 91       	pop	r16
    3da0:	ff 90       	pop	r15
    3da2:	ef 90       	pop	r14
    3da4:	df 90       	pop	r13
    3da6:	cf 90       	pop	r12
    3da8:	bf 90       	pop	r11
    3daa:	af 90       	pop	r10
    3dac:	9f 90       	pop	r9
    3dae:	8f 90       	pop	r8
    3db0:	7f 90       	pop	r7
    3db2:	6f 90       	pop	r6
    3db4:	5f 90       	pop	r5
    3db6:	4f 90       	pop	r4
    3db8:	3f 90       	pop	r3
    3dba:	2f 90       	pop	r2
    3dbc:	08 95       	ret

00003dbe <_ZN6String11toLowerCaseEv>:

void String::toLowerCase(void)
{
    3dbe:	cf 93       	push	r28
    3dc0:	df 93       	push	r29
	if (!buffer) return;
    3dc2:	fc 01       	movw	r30, r24
    3dc4:	c0 81       	ld	r28, Z
    3dc6:	d1 81       	ldd	r29, Z+1	; 0x01
    3dc8:	20 97       	sbiw	r28, 0x00	; 0
    3dca:	39 f4       	brne	.+14     	; 0x3dda <_ZN6String11toLowerCaseEv+0x1c>
    3dcc:	09 c0       	rjmp	.+18     	; 0x3de0 <_ZN6String11toLowerCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
    3dce:	99 27       	eor	r25, r25
    3dd0:	87 fd       	sbrc	r24, 7
    3dd2:	90 95       	com	r25
    3dd4:	0e 94 53 28 	call	0x50a6	; 0x50a6 <tolower>
    3dd8:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3dda:	88 81       	ld	r24, Y
    3ddc:	88 23       	and	r24, r24
    3dde:	b9 f7       	brne	.-18     	; 0x3dce <_ZN6String11toLowerCaseEv+0x10>
		*p = tolower(*p);
	}
}
    3de0:	df 91       	pop	r29
    3de2:	cf 91       	pop	r28
    3de4:	08 95       	ret

00003de6 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
	if (!buffer) return;
    3dea:	fc 01       	movw	r30, r24
    3dec:	c0 81       	ld	r28, Z
    3dee:	d1 81       	ldd	r29, Z+1	; 0x01
    3df0:	20 97       	sbiw	r28, 0x00	; 0
    3df2:	39 f4       	brne	.+14     	; 0x3e02 <_ZN6String11toUpperCaseEv+0x1c>
    3df4:	09 c0       	rjmp	.+18     	; 0x3e08 <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    3df6:	99 27       	eor	r25, r25
    3df8:	87 fd       	sbrc	r24, 7
    3dfa:	90 95       	com	r25
    3dfc:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <toupper>
    3e00:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3e02:	88 81       	ld	r24, Y
    3e04:	88 23       	and	r24, r24
    3e06:	b9 f7       	brne	.-18     	; 0x3df6 <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    3e08:	df 91       	pop	r29
    3e0a:	cf 91       	pop	r28
    3e0c:	08 95       	ret

00003e0e <_ZN6String4trimEv>:

void String::trim(void)
{
    3e0e:	af 92       	push	r10
    3e10:	bf 92       	push	r11
    3e12:	cf 92       	push	r12
    3e14:	df 92       	push	r13
    3e16:	ef 92       	push	r14
    3e18:	ff 92       	push	r15
    3e1a:	0f 93       	push	r16
    3e1c:	1f 93       	push	r17
    3e1e:	cf 93       	push	r28
    3e20:	df 93       	push	r29
    3e22:	6c 01       	movw	r12, r24
	if (!buffer || len == 0) return;
    3e24:	dc 01       	movw	r26, r24
    3e26:	ed 90       	ld	r14, X+
    3e28:	fc 90       	ld	r15, X
    3e2a:	11 97       	sbiw	r26, 0x01	; 1
    3e2c:	e1 14       	cp	r14, r1
    3e2e:	f1 04       	cpc	r15, r1
    3e30:	09 f4       	brne	.+2      	; 0x3e34 <_ZN6String4trimEv+0x26>
    3e32:	43 c0       	rjmp	.+134    	; 0x3eba <_ZN6String4trimEv+0xac>
    3e34:	14 96       	adiw	r26, 0x04	; 4
    3e36:	ad 90       	ld	r10, X+
    3e38:	bc 90       	ld	r11, X
    3e3a:	15 97       	sbiw	r26, 0x05	; 5
    3e3c:	a1 14       	cp	r10, r1
    3e3e:	b1 04       	cpc	r11, r1
    3e40:	e1 f1       	breq	.+120    	; 0x3eba <_ZN6String4trimEv+0xac>
    3e42:	87 01       	movw	r16, r14
    3e44:	e8 01       	movw	r28, r16
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    3e46:	88 81       	ld	r24, Y
    3e48:	0f 5f       	subi	r16, 0xFF	; 255
    3e4a:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4c:	99 27       	eor	r25, r25
    3e4e:	87 fd       	sbrc	r24, 7
    3e50:	90 95       	com	r25
    3e52:	0e 94 4b 28 	call	0x5096	; 0x5096 <isspace>
    3e56:	00 97       	sbiw	r24, 0x00	; 0
    3e58:	a9 f7       	brne	.-22     	; 0x3e44 <_ZN6String4trimEv+0x36>
	char *end = buffer + len - 1;
    3e5a:	85 01       	movw	r16, r10
    3e5c:	01 50       	subi	r16, 0x01	; 1
    3e5e:	10 40       	sbci	r17, 0x00	; 0
    3e60:	0e 0d       	add	r16, r14
    3e62:	1f 1d       	adc	r17, r15
	while (isspace(*end) && end >= begin) end--;
    3e64:	f8 01       	movw	r30, r16
    3e66:	80 81       	ld	r24, Z
    3e68:	99 27       	eor	r25, r25
    3e6a:	87 fd       	sbrc	r24, 7
    3e6c:	90 95       	com	r25
    3e6e:	0e 94 4b 28 	call	0x5096	; 0x5096 <isspace>
    3e72:	00 97       	sbiw	r24, 0x00	; 0
    3e74:	31 f0       	breq	.+12     	; 0x3e82 <_ZN6String4trimEv+0x74>
    3e76:	0c 17       	cp	r16, r28
    3e78:	1d 07       	cpc	r17, r29
    3e7a:	18 f0       	brcs	.+6      	; 0x3e82 <_ZN6String4trimEv+0x74>
    3e7c:	01 50       	subi	r16, 0x01	; 1
    3e7e:	10 40       	sbci	r17, 0x00	; 0
    3e80:	f1 cf       	rjmp	.-30     	; 0x3e64 <_ZN6String4trimEv+0x56>
	len = end + 1 - begin;
    3e82:	0f 5f       	subi	r16, 0xFF	; 255
    3e84:	1f 4f       	sbci	r17, 0xFF	; 255
    3e86:	0c 1b       	sub	r16, r28
    3e88:	1d 0b       	sbc	r17, r29
    3e8a:	d6 01       	movw	r26, r12
    3e8c:	15 96       	adiw	r26, 0x05	; 5
    3e8e:	1c 93       	st	X, r17
    3e90:	0e 93       	st	-X, r16
    3e92:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    3e94:	ec 16       	cp	r14, r28
    3e96:	fd 06       	cpc	r15, r29
    3e98:	28 f4       	brcc	.+10     	; 0x3ea4 <_ZN6String4trimEv+0x96>
    3e9a:	c7 01       	movw	r24, r14
    3e9c:	be 01       	movw	r22, r28
    3e9e:	a8 01       	movw	r20, r16
    3ea0:	0e 94 63 28 	call	0x50c6	; 0x50c6 <memcpy>
	buffer[len] = 0;
    3ea4:	d6 01       	movw	r26, r12
    3ea6:	ed 91       	ld	r30, X+
    3ea8:	fc 91       	ld	r31, X
    3eaa:	11 97       	sbiw	r26, 0x01	; 1
    3eac:	14 96       	adiw	r26, 0x04	; 4
    3eae:	8d 91       	ld	r24, X+
    3eb0:	9c 91       	ld	r25, X
    3eb2:	15 97       	sbiw	r26, 0x05	; 5
    3eb4:	e8 0f       	add	r30, r24
    3eb6:	f9 1f       	adc	r31, r25
    3eb8:	10 82       	st	Z, r1
}
    3eba:	df 91       	pop	r29
    3ebc:	cf 91       	pop	r28
    3ebe:	1f 91       	pop	r17
    3ec0:	0f 91       	pop	r16
    3ec2:	ff 90       	pop	r15
    3ec4:	ef 90       	pop	r14
    3ec6:	df 90       	pop	r13
    3ec8:	cf 90       	pop	r12
    3eca:	bf 90       	pop	r11
    3ecc:	af 90       	pop	r10
    3ece:	08 95       	ret

00003ed0 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    3ed0:	fc 01       	movw	r30, r24
    3ed2:	80 81       	ld	r24, Z
    3ed4:	91 81       	ldd	r25, Z+1	; 0x01
    3ed6:	00 97       	sbiw	r24, 0x00	; 0
    3ed8:	29 f0       	breq	.+10     	; 0x3ee4 <_ZNK6String5toIntEv+0x14>
    3eda:	0e 94 24 28 	call	0x5048	; 0x5048 <atol>
    3ede:	9b 01       	movw	r18, r22
    3ee0:	ac 01       	movw	r20, r24
    3ee2:	03 c0       	rjmp	.+6      	; 0x3eea <_ZNK6String5toIntEv+0x1a>
	return 0;
    3ee4:	20 e0       	ldi	r18, 0x00	; 0
    3ee6:	30 e0       	ldi	r19, 0x00	; 0
    3ee8:	a9 01       	movw	r20, r18
}
    3eea:	b9 01       	movw	r22, r18
    3eec:	ca 01       	movw	r24, r20
    3eee:	08 95       	ret

00003ef0 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    3ef0:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <malloc>
}
    3ef4:	08 95       	ret

00003ef6 <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    3ef6:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <free>
} 
    3efa:	08 95       	ret

00003efc <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    3efc:	21 e0       	ldi	r18, 0x01	; 1
    3efe:	30 e0       	ldi	r19, 0x00	; 0
    3f00:	fc 01       	movw	r30, r24
    3f02:	80 81       	ld	r24, Z
    3f04:	88 23       	and	r24, r24
    3f06:	11 f0       	breq	.+4      	; 0x3f0c <__cxa_guard_acquire+0x10>
    3f08:	20 e0       	ldi	r18, 0x00	; 0
    3f0a:	30 e0       	ldi	r19, 0x00	; 0
    3f0c:	c9 01       	movw	r24, r18
    3f0e:	08 95       	ret

00003f10 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    3f10:	21 e0       	ldi	r18, 0x01	; 1
    3f12:	fc 01       	movw	r30, r24
    3f14:	20 83       	st	Z, r18
    3f16:	08 95       	ret

00003f18 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    3f18:	08 95       	ret

00003f1a <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    3f1a:	08 95       	ret

00003f1c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    3f1c:	cf 92       	push	r12
    3f1e:	df 92       	push	r13
    3f20:	ef 92       	push	r14
    3f22:	ff 92       	push	r15
    3f24:	0f 93       	push	r16
    3f26:	1f 93       	push	r17
    3f28:	cf 93       	push	r28
    3f2a:	df 93       	push	r29
    3f2c:	6c 01       	movw	r12, r24
    3f2e:	7b 01       	movw	r14, r22
    3f30:	8a 01       	movw	r16, r20
  size_t n = 0;
    3f32:	c0 e0       	ldi	r28, 0x00	; 0
    3f34:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    3f36:	0f c0       	rjmp	.+30     	; 0x3f56 <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
    3f38:	d7 01       	movw	r26, r14
    3f3a:	6d 91       	ld	r22, X+
    3f3c:	7d 01       	movw	r14, r26
    3f3e:	d6 01       	movw	r26, r12
    3f40:	ed 91       	ld	r30, X+
    3f42:	fc 91       	ld	r31, X
    3f44:	01 90       	ld	r0, Z+
    3f46:	f0 81       	ld	r31, Z
    3f48:	e0 2d       	mov	r30, r0
    3f4a:	c6 01       	movw	r24, r12
    3f4c:	09 95       	icall
    3f4e:	c8 0f       	add	r28, r24
    3f50:	d9 1f       	adc	r29, r25
    3f52:	01 50       	subi	r16, 0x01	; 1
    3f54:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    3f56:	01 15       	cp	r16, r1
    3f58:	11 05       	cpc	r17, r1
    3f5a:	71 f7       	brne	.-36     	; 0x3f38 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    3f5c:	ce 01       	movw	r24, r28
    3f5e:	df 91       	pop	r29
    3f60:	cf 91       	pop	r28
    3f62:	1f 91       	pop	r17
    3f64:	0f 91       	pop	r16
    3f66:	ff 90       	pop	r15
    3f68:	ef 90       	pop	r14
    3f6a:	df 90       	pop	r13
    3f6c:	cf 90       	pop	r12
    3f6e:	08 95       	ret

00003f70 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    3f70:	db 01       	movw	r26, r22
    3f72:	0d 90       	ld	r0, X+
    3f74:	00 20       	and	r0, r0
    3f76:	e9 f7       	brne	.-6      	; 0x3f72 <_ZN5Print5writeEPKc+0x2>
    3f78:	ad 01       	movw	r20, r26
    3f7a:	41 50       	subi	r20, 0x01	; 1
    3f7c:	50 40       	sbci	r21, 0x00	; 0
    3f7e:	46 1b       	sub	r20, r22
    3f80:	57 0b       	sbc	r21, r23
    3f82:	dc 01       	movw	r26, r24
    3f84:	ed 91       	ld	r30, X+
    3f86:	fc 91       	ld	r31, X
    3f88:	02 80       	ldd	r0, Z+2	; 0x02
    3f8a:	f3 81       	ldd	r31, Z+3	; 0x03
    3f8c:	e0 2d       	mov	r30, r0
    3f8e:	09 95       	icall
    3f90:	08 95       	ret

00003f92 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    3f92:	ef 92       	push	r14
    3f94:	ff 92       	push	r15
    3f96:	0f 93       	push	r16
    3f98:	1f 93       	push	r17
    3f9a:	cf 93       	push	r28
    3f9c:	df 93       	push	r29
    3f9e:	7c 01       	movw	r14, r24
  const prog_char *p = (const prog_char *)ifsh;
    3fa0:	06 2f       	mov	r16, r22
    3fa2:	17 2f       	mov	r17, r23
  size_t n = 0;
    3fa4:	c0 e0       	ldi	r28, 0x00	; 0
    3fa6:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
    3fa8:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    3faa:	0f 5f       	subi	r16, 0xFF	; 255
    3fac:	1f 4f       	sbci	r17, 0xFF	; 255
    3fae:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    3fb0:	66 23       	and	r22, r22
    3fb2:	51 f0       	breq	.+20     	; 0x3fc8 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    3fb4:	f7 01       	movw	r30, r14
    3fb6:	a0 81       	ld	r26, Z
    3fb8:	b1 81       	ldd	r27, Z+1	; 0x01
    3fba:	ed 91       	ld	r30, X+
    3fbc:	fc 91       	ld	r31, X
    3fbe:	c7 01       	movw	r24, r14
    3fc0:	09 95       	icall
    3fc2:	c8 0f       	add	r28, r24
    3fc4:	d9 1f       	adc	r29, r25

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
  size_t n = 0;
  while (1) {
    3fc6:	f0 cf       	rjmp	.-32     	; 0x3fa8 <_ZN5Print5printEPK19__FlashStringHelper+0x16>
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    3fc8:	ce 01       	movw	r24, r28
    3fca:	df 91       	pop	r29
    3fcc:	cf 91       	pop	r28
    3fce:	1f 91       	pop	r17
    3fd0:	0f 91       	pop	r16
    3fd2:	ff 90       	pop	r15
    3fd4:	ef 90       	pop	r14
    3fd6:	08 95       	ret

00003fd8 <_ZN5Print5printERK6String>:

size_t Print::print(const String &s)
{
    3fd8:	af 92       	push	r10
    3fda:	bf 92       	push	r11
    3fdc:	cf 92       	push	r12
    3fde:	df 92       	push	r13
    3fe0:	ef 92       	push	r14
    3fe2:	ff 92       	push	r15
    3fe4:	0f 93       	push	r16
    3fe6:	1f 93       	push	r17
    3fe8:	cf 93       	push	r28
    3fea:	df 93       	push	r29
    3fec:	7c 01       	movw	r14, r24
    3fee:	6b 01       	movw	r12, r22
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    3ff0:	c0 e0       	ldi	r28, 0x00	; 0
    3ff2:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    3ff4:	00 e0       	ldi	r16, 0x00	; 0
    3ff6:	10 e0       	ldi	r17, 0x00	; 0
  for (uint16_t i = 0; i < s.length(); i++) {
    3ff8:	10 c0       	rjmp	.+32     	; 0x401a <_ZN5Print5printERK6String+0x42>
    n += write(s[i]);
    3ffa:	d7 01       	movw	r26, r14
    3ffc:	ed 91       	ld	r30, X+
    3ffe:	fc 91       	ld	r31, X
    4000:	a0 80       	ld	r10, Z
    4002:	b1 80       	ldd	r11, Z+1	; 0x01
    4004:	c6 01       	movw	r24, r12
    4006:	be 01       	movw	r22, r28
    4008:	0e 94 4a 1c 	call	0x3894	; 0x3894 <_ZNK6StringixEj>
    400c:	68 2f       	mov	r22, r24
    400e:	c7 01       	movw	r24, r14
    4010:	f5 01       	movw	r30, r10
    4012:	09 95       	icall
    4014:	08 0f       	add	r16, r24
    4016:	19 1f       	adc	r17, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    4018:	21 96       	adiw	r28, 0x01	; 1
    401a:	f6 01       	movw	r30, r12
    401c:	84 81       	ldd	r24, Z+4	; 0x04
    401e:	95 81       	ldd	r25, Z+5	; 0x05
    4020:	c8 17       	cp	r28, r24
    4022:	d9 07       	cpc	r29, r25
    4024:	50 f3       	brcs	.-44     	; 0x3ffa <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    4026:	c8 01       	movw	r24, r16
    4028:	df 91       	pop	r29
    402a:	cf 91       	pop	r28
    402c:	1f 91       	pop	r17
    402e:	0f 91       	pop	r16
    4030:	ff 90       	pop	r15
    4032:	ef 90       	pop	r14
    4034:	df 90       	pop	r13
    4036:	cf 90       	pop	r12
    4038:	bf 90       	pop	r11
    403a:	af 90       	pop	r10
    403c:	08 95       	ret

0000403e <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
  return write(str);
    403e:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <_ZN5Print5writeEPKc>
}
    4042:	08 95       	ret

00004044 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    4044:	dc 01       	movw	r26, r24
    4046:	ed 91       	ld	r30, X+
    4048:	fc 91       	ld	r31, X
    404a:	01 90       	ld	r0, Z+
    404c:	f0 81       	ld	r31, Z
    404e:	e0 2d       	mov	r30, r0
    4050:	09 95       	icall
}
    4052:	08 95       	ret

00004054 <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
{
    4054:	9c 01       	movw	r18, r24
    4056:	cb 01       	movw	r24, r22
  return x.printTo(*this);
    4058:	db 01       	movw	r26, r22
    405a:	ed 91       	ld	r30, X+
    405c:	fc 91       	ld	r31, X
    405e:	01 90       	ld	r0, Z+
    4060:	f0 81       	ld	r31, Z
    4062:	e0 2d       	mov	r30, r0
    4064:	b9 01       	movw	r22, r18
    4066:	09 95       	icall
}
    4068:	08 95       	ret

0000406a <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
    406a:	0f 93       	push	r16
    406c:	1f 93       	push	r17
    406e:	cf 93       	push	r28
    4070:	df 93       	push	r29
    4072:	ec 01       	movw	r28, r24
  size_t n = print('\r');
    4074:	6d e0       	ldi	r22, 0x0D	; 13
    4076:	0e 94 22 20 	call	0x4044	; 0x4044 <_ZN5Print5printEc>
    407a:	8c 01       	movw	r16, r24
  n += print('\n');
    407c:	ce 01       	movw	r24, r28
    407e:	6a e0       	ldi	r22, 0x0A	; 10
    4080:	0e 94 22 20 	call	0x4044	; 0x4044 <_ZN5Print5printEc>
    4084:	08 0f       	add	r16, r24
    4086:	19 1f       	adc	r17, r25
  return n;
}
    4088:	c8 01       	movw	r24, r16
    408a:	df 91       	pop	r29
    408c:	cf 91       	pop	r28
    408e:	1f 91       	pop	r17
    4090:	0f 91       	pop	r16
    4092:	08 95       	ret

00004094 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    4094:	0f 93       	push	r16
    4096:	1f 93       	push	r17
    4098:	cf 93       	push	r28
    409a:	df 93       	push	r29
    409c:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
    409e:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <_ZN5Print5printEPK19__FlashStringHelper>
    40a2:	8c 01       	movw	r16, r24
  n += println();
    40a4:	ce 01       	movw	r24, r28
    40a6:	0e 94 35 20 	call	0x406a	; 0x406a <_ZN5Print7printlnEv>
    40aa:	08 0f       	add	r16, r24
    40ac:	19 1f       	adc	r17, r25
  return n;
}
    40ae:	c8 01       	movw	r24, r16
    40b0:	df 91       	pop	r29
    40b2:	cf 91       	pop	r28
    40b4:	1f 91       	pop	r17
    40b6:	0f 91       	pop	r16
    40b8:	08 95       	ret

000040ba <_ZN5Print7printlnERK6String>:
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
{
    40ba:	0f 93       	push	r16
    40bc:	1f 93       	push	r17
    40be:	cf 93       	push	r28
    40c0:	df 93       	push	r29
    40c2:	ec 01       	movw	r28, r24
  size_t n = print(s);
    40c4:	0e 94 ec 1f 	call	0x3fd8	; 0x3fd8 <_ZN5Print5printERK6String>
    40c8:	8c 01       	movw	r16, r24
  n += println();
    40ca:	ce 01       	movw	r24, r28
    40cc:	0e 94 35 20 	call	0x406a	; 0x406a <_ZN5Print7printlnEv>
    40d0:	08 0f       	add	r16, r24
    40d2:	19 1f       	adc	r17, r25
  return n;
}
    40d4:	c8 01       	movw	r24, r16
    40d6:	df 91       	pop	r29
    40d8:	cf 91       	pop	r28
    40da:	1f 91       	pop	r17
    40dc:	0f 91       	pop	r16
    40de:	08 95       	ret

000040e0 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    40e0:	0f 93       	push	r16
    40e2:	1f 93       	push	r17
    40e4:	cf 93       	push	r28
    40e6:	df 93       	push	r29
    40e8:	ec 01       	movw	r28, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    40ea:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <_ZN5Print5writeEPKc>
    40ee:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    40f0:	ce 01       	movw	r24, r28
    40f2:	0e 94 35 20 	call	0x406a	; 0x406a <_ZN5Print7printlnEv>
    40f6:	08 0f       	add	r16, r24
    40f8:	19 1f       	adc	r17, r25
  return n;
}
    40fa:	c8 01       	movw	r24, r16
    40fc:	df 91       	pop	r29
    40fe:	cf 91       	pop	r28
    4100:	1f 91       	pop	r17
    4102:	0f 91       	pop	r16
    4104:	08 95       	ret

00004106 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    4106:	0f 93       	push	r16
    4108:	1f 93       	push	r17
    410a:	cf 93       	push	r28
    410c:	df 93       	push	r29
    410e:	ec 01       	movw	r28, r24
  size_t n = print(c);
    4110:	0e 94 22 20 	call	0x4044	; 0x4044 <_ZN5Print5printEc>
    4114:	8c 01       	movw	r16, r24
  n += println();
    4116:	ce 01       	movw	r24, r28
    4118:	0e 94 35 20 	call	0x406a	; 0x406a <_ZN5Print7printlnEv>
    411c:	08 0f       	add	r16, r24
    411e:	19 1f       	adc	r17, r25
  return n;
}
    4120:	c8 01       	movw	r24, r16
    4122:	df 91       	pop	r29
    4124:	cf 91       	pop	r28
    4126:	1f 91       	pop	r17
    4128:	0f 91       	pop	r16
    412a:	08 95       	ret

0000412c <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
{
    412c:	0f 93       	push	r16
    412e:	1f 93       	push	r17
    4130:	cf 93       	push	r28
    4132:	df 93       	push	r29
    4134:	ec 01       	movw	r28, r24
  size_t n = print(x);
    4136:	0e 94 2a 20 	call	0x4054	; 0x4054 <_ZN5Print5printERK9Printable>
    413a:	8c 01       	movw	r16, r24
  n += println();
    413c:	ce 01       	movw	r24, r28
    413e:	0e 94 35 20 	call	0x406a	; 0x406a <_ZN5Print7printlnEv>
    4142:	08 0f       	add	r16, r24
    4144:	19 1f       	adc	r17, r25
  return n;
}
    4146:	c8 01       	movw	r24, r16
    4148:	df 91       	pop	r29
    414a:	cf 91       	pop	r28
    414c:	1f 91       	pop	r17
    414e:	0f 91       	pop	r16
    4150:	08 95       	ret

00004152 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    4152:	8f 92       	push	r8
    4154:	9f 92       	push	r9
    4156:	af 92       	push	r10
    4158:	bf 92       	push	r11
    415a:	cf 92       	push	r12
    415c:	df 92       	push	r13
    415e:	ef 92       	push	r14
    4160:	ff 92       	push	r15
    4162:	0f 93       	push	r16
    4164:	1f 93       	push	r17
    4166:	df 93       	push	r29
    4168:	cf 93       	push	r28
    416a:	cd b7       	in	r28, 0x3d	; 61
    416c:	de b7       	in	r29, 0x3e	; 62
    416e:	a1 97       	sbiw	r28, 0x21	; 33
    4170:	0f b6       	in	r0, 0x3f	; 63
    4172:	f8 94       	cli
    4174:	de bf       	out	0x3e, r29	; 62
    4176:	0f be       	out	0x3f, r0	; 63
    4178:	cd bf       	out	0x3d, r28	; 61
    417a:	6c 01       	movw	r12, r24
    417c:	04 2f       	mov	r16, r20
    417e:	e5 2f       	mov	r30, r21
    4180:	cb 01       	movw	r24, r22
    4182:	12 2f       	mov	r17, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4184:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4186:	22 30       	cpi	r18, 0x02	; 2
    4188:	08 f4       	brcc	.+2      	; 0x418c <_ZN5Print11printNumberEmh+0x3a>
    418a:	1a e0       	ldi	r17, 0x0A	; 10
    418c:	21 e2       	ldi	r18, 0x21	; 33
    418e:	e2 2e       	mov	r14, r18
    4190:	f1 2c       	mov	r15, r1
    4192:	ec 0e       	add	r14, r28
    4194:	fd 1e       	adc	r15, r29

  do {
    unsigned long m = n;
    n /= base;
    4196:	81 2e       	mov	r8, r17
    4198:	99 24       	eor	r9, r9
    419a:	aa 24       	eor	r10, r10
    419c:	bb 24       	eor	r11, r11
    419e:	03 c0       	rjmp	.+6      	; 0x41a6 <_ZN5Print11printNumberEmh+0x54>
    41a0:	02 2f       	mov	r16, r18
    41a2:	e3 2f       	mov	r30, r19
    41a4:	ca 01       	movw	r24, r20
    41a6:	60 2f       	mov	r22, r16
    41a8:	7e 2f       	mov	r23, r30
    41aa:	a5 01       	movw	r20, r10
    41ac:	94 01       	movw	r18, r8
    41ae:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__udivmodsi4>
    char c = m - base * n;
    41b2:	12 9f       	mul	r17, r18
    41b4:	80 2d       	mov	r24, r0
    41b6:	11 24       	eor	r1, r1
    41b8:	08 1b       	sub	r16, r24
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    41ba:	08 94       	sec
    41bc:	e1 08       	sbc	r14, r1
    41be:	f1 08       	sbc	r15, r1
    41c0:	0a 30       	cpi	r16, 0x0A	; 10
    41c2:	14 f4       	brge	.+4      	; 0x41c8 <_ZN5Print11printNumberEmh+0x76>
    41c4:	00 5d       	subi	r16, 0xD0	; 208
    41c6:	01 c0       	rjmp	.+2      	; 0x41ca <_ZN5Print11printNumberEmh+0x78>
    41c8:	09 5c       	subi	r16, 0xC9	; 201
    41ca:	f7 01       	movw	r30, r14
    41cc:	00 83       	st	Z, r16
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    41ce:	21 15       	cp	r18, r1
    41d0:	31 05       	cpc	r19, r1
    41d2:	41 05       	cpc	r20, r1
    41d4:	51 05       	cpc	r21, r1
    41d6:	21 f7       	brne	.-56     	; 0x41a0 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    41d8:	c6 01       	movw	r24, r12
    41da:	b7 01       	movw	r22, r14
    41dc:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <_ZN5Print5writeEPKc>
}
    41e0:	a1 96       	adiw	r28, 0x21	; 33
    41e2:	0f b6       	in	r0, 0x3f	; 63
    41e4:	f8 94       	cli
    41e6:	de bf       	out	0x3e, r29	; 62
    41e8:	0f be       	out	0x3f, r0	; 63
    41ea:	cd bf       	out	0x3d, r28	; 61
    41ec:	cf 91       	pop	r28
    41ee:	df 91       	pop	r29
    41f0:	1f 91       	pop	r17
    41f2:	0f 91       	pop	r16
    41f4:	ff 90       	pop	r15
    41f6:	ef 90       	pop	r14
    41f8:	df 90       	pop	r13
    41fa:	cf 90       	pop	r12
    41fc:	bf 90       	pop	r11
    41fe:	af 90       	pop	r10
    4200:	9f 90       	pop	r9
    4202:	8f 90       	pop	r8
    4204:	08 95       	ret

00004206 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    4206:	21 15       	cp	r18, r1
    4208:	31 05       	cpc	r19, r1
    420a:	49 f4       	brne	.+18     	; 0x421e <_ZN5Print5printEmi+0x18>
    420c:	dc 01       	movw	r26, r24
    420e:	ed 91       	ld	r30, X+
    4210:	fc 91       	ld	r31, X
    4212:	01 90       	ld	r0, Z+
    4214:	f0 81       	ld	r31, Z
    4216:	e0 2d       	mov	r30, r0
    4218:	64 2f       	mov	r22, r20
    421a:	09 95       	icall
    421c:	08 95       	ret
  else return printNumber(n, base);
    421e:	0e 94 a9 20 	call	0x4152	; 0x4152 <_ZN5Print11printNumberEmh>
}
    4222:	08 95       	ret

00004224 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    4224:	0f 93       	push	r16
    4226:	1f 93       	push	r17
    4228:	cf 93       	push	r28
    422a:	df 93       	push	r29
    422c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    422e:	0e 94 03 21 	call	0x4206	; 0x4206 <_ZN5Print5printEmi>
    4232:	8c 01       	movw	r16, r24
  n += println();
    4234:	ce 01       	movw	r24, r28
    4236:	0e 94 35 20 	call	0x406a	; 0x406a <_ZN5Print7printlnEv>
    423a:	08 0f       	add	r16, r24
    423c:	19 1f       	adc	r17, r25
  return n;
}
    423e:	c8 01       	movw	r24, r16
    4240:	df 91       	pop	r29
    4242:	cf 91       	pop	r28
    4244:	1f 91       	pop	r17
    4246:	0f 91       	pop	r16
    4248:	08 95       	ret

0000424a <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    424a:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    424c:	ab 01       	movw	r20, r22
    424e:	60 e0       	ldi	r22, 0x00	; 0
    4250:	70 e0       	ldi	r23, 0x00	; 0
    4252:	0e 94 03 21 	call	0x4206	; 0x4206 <_ZN5Print5printEmi>
}
    4256:	08 95       	ret

00004258 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    4258:	0f 93       	push	r16
    425a:	1f 93       	push	r17
    425c:	cf 93       	push	r28
    425e:	df 93       	push	r29
    4260:	ec 01       	movw	r28, r24
    4262:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    4264:	ab 01       	movw	r20, r22
    4266:	60 e0       	ldi	r22, 0x00	; 0
    4268:	70 e0       	ldi	r23, 0x00	; 0
    426a:	0e 94 03 21 	call	0x4206	; 0x4206 <_ZN5Print5printEmi>
    426e:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    4270:	ce 01       	movw	r24, r28
    4272:	0e 94 35 20 	call	0x406a	; 0x406a <_ZN5Print7printlnEv>
    4276:	08 0f       	add	r16, r24
    4278:	19 1f       	adc	r17, r25
  return n;
}
    427a:	c8 01       	movw	r24, r16
    427c:	df 91       	pop	r29
    427e:	cf 91       	pop	r28
    4280:	1f 91       	pop	r17
    4282:	0f 91       	pop	r16
    4284:	08 95       	ret

00004286 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    4286:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    4288:	46 2f       	mov	r20, r22
    428a:	50 e0       	ldi	r21, 0x00	; 0
    428c:	60 e0       	ldi	r22, 0x00	; 0
    428e:	70 e0       	ldi	r23, 0x00	; 0
    4290:	0e 94 03 21 	call	0x4206	; 0x4206 <_ZN5Print5printEmi>
}
    4294:	08 95       	ret

00004296 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    4296:	0f 93       	push	r16
    4298:	1f 93       	push	r17
    429a:	cf 93       	push	r28
    429c:	df 93       	push	r29
    429e:	ec 01       	movw	r28, r24
    42a0:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    42a2:	46 2f       	mov	r20, r22
    42a4:	50 e0       	ldi	r21, 0x00	; 0
    42a6:	60 e0       	ldi	r22, 0x00	; 0
    42a8:	70 e0       	ldi	r23, 0x00	; 0
    42aa:	0e 94 03 21 	call	0x4206	; 0x4206 <_ZN5Print5printEmi>
    42ae:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    42b0:	ce 01       	movw	r24, r28
    42b2:	0e 94 35 20 	call	0x406a	; 0x406a <_ZN5Print7printlnEv>
    42b6:	08 0f       	add	r16, r24
    42b8:	19 1f       	adc	r17, r25
  return n;
}
    42ba:	c8 01       	movw	r24, r16
    42bc:	df 91       	pop	r29
    42be:	cf 91       	pop	r28
    42c0:	1f 91       	pop	r17
    42c2:	0f 91       	pop	r16
    42c4:	08 95       	ret

000042c6 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    42c6:	cf 92       	push	r12
    42c8:	df 92       	push	r13
    42ca:	ef 92       	push	r14
    42cc:	ff 92       	push	r15
    42ce:	0f 93       	push	r16
    42d0:	1f 93       	push	r17
    42d2:	cf 93       	push	r28
    42d4:	df 93       	push	r29
    42d6:	ec 01       	movw	r28, r24
    42d8:	7a 01       	movw	r14, r20
    42da:	8b 01       	movw	r16, r22
  if (base == 0) {
    42dc:	21 15       	cp	r18, r1
    42de:	31 05       	cpc	r19, r1
    42e0:	41 f4       	brne	.+16     	; 0x42f2 <_ZN5Print5printEli+0x2c>
    return write(n);
    42e2:	e8 81       	ld	r30, Y
    42e4:	f9 81       	ldd	r31, Y+1	; 0x01
    42e6:	01 90       	ld	r0, Z+
    42e8:	f0 81       	ld	r31, Z
    42ea:	e0 2d       	mov	r30, r0
    42ec:	64 2f       	mov	r22, r20
    42ee:	09 95       	icall
    42f0:	1a c0       	rjmp	.+52     	; 0x4326 <_ZN5Print5printEli+0x60>
  } else if (base == 10) {
    42f2:	2a 30       	cpi	r18, 0x0A	; 10
    42f4:	31 05       	cpc	r19, r1
    42f6:	a9 f4       	brne	.+42     	; 0x4322 <_ZN5Print5printEli+0x5c>
    if (n < 0) {
    42f8:	77 ff       	sbrs	r23, 7
    42fa:	12 c0       	rjmp	.+36     	; 0x4320 <_ZN5Print5printEli+0x5a>
      int t = print('-');
    42fc:	6d e2       	ldi	r22, 0x2D	; 45
    42fe:	0e 94 22 20 	call	0x4044	; 0x4044 <_ZN5Print5printEc>
    4302:	6c 01       	movw	r12, r24
      n = -n;
    4304:	44 27       	eor	r20, r20
    4306:	55 27       	eor	r21, r21
    4308:	ba 01       	movw	r22, r20
    430a:	4e 19       	sub	r20, r14
    430c:	5f 09       	sbc	r21, r15
    430e:	60 0b       	sbc	r22, r16
    4310:	71 0b       	sbc	r23, r17
      return printNumber(n, 10) + t;
    4312:	ce 01       	movw	r24, r28
    4314:	2a e0       	ldi	r18, 0x0A	; 10
    4316:	0e 94 a9 20 	call	0x4152	; 0x4152 <_ZN5Print11printNumberEmh>
    431a:	c8 0e       	add	r12, r24
    431c:	d9 1e       	adc	r13, r25
    431e:	04 c0       	rjmp	.+8      	; 0x4328 <_ZN5Print5printEli+0x62>
    }
    return printNumber(n, 10);
    4320:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    4322:	0e 94 a9 20 	call	0x4152	; 0x4152 <_ZN5Print11printNumberEmh>
    4326:	6c 01       	movw	r12, r24
  }
}
    4328:	c6 01       	movw	r24, r12
    432a:	df 91       	pop	r29
    432c:	cf 91       	pop	r28
    432e:	1f 91       	pop	r17
    4330:	0f 91       	pop	r16
    4332:	ff 90       	pop	r15
    4334:	ef 90       	pop	r14
    4336:	df 90       	pop	r13
    4338:	cf 90       	pop	r12
    433a:	08 95       	ret

0000433c <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    433c:	0f 93       	push	r16
    433e:	1f 93       	push	r17
    4340:	cf 93       	push	r28
    4342:	df 93       	push	r29
    4344:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    4346:	0e 94 63 21 	call	0x42c6	; 0x42c6 <_ZN5Print5printEli>
    434a:	8c 01       	movw	r16, r24
  n += println();
    434c:	ce 01       	movw	r24, r28
    434e:	0e 94 35 20 	call	0x406a	; 0x406a <_ZN5Print7printlnEv>
    4352:	08 0f       	add	r16, r24
    4354:	19 1f       	adc	r17, r25
  return n;
}
    4356:	c8 01       	movw	r24, r16
    4358:	df 91       	pop	r29
    435a:	cf 91       	pop	r28
    435c:	1f 91       	pop	r17
    435e:	0f 91       	pop	r16
    4360:	08 95       	ret

00004362 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    4362:	9a 01       	movw	r18, r20
  return print((long) n, base);
    4364:	fb 01       	movw	r30, r22
    4366:	af 01       	movw	r20, r30
    4368:	66 27       	eor	r22, r22
    436a:	57 fd       	sbrc	r21, 7
    436c:	60 95       	com	r22
    436e:	76 2f       	mov	r23, r22
    4370:	0e 94 63 21 	call	0x42c6	; 0x42c6 <_ZN5Print5printEli>
}
    4374:	08 95       	ret

00004376 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    4376:	0f 93       	push	r16
    4378:	1f 93       	push	r17
    437a:	cf 93       	push	r28
    437c:	df 93       	push	r29
    437e:	ec 01       	movw	r28, r24
    4380:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    4382:	cb 01       	movw	r24, r22
    4384:	ac 01       	movw	r20, r24
    4386:	66 27       	eor	r22, r22
    4388:	57 fd       	sbrc	r21, 7
    438a:	60 95       	com	r22
    438c:	76 2f       	mov	r23, r22
    438e:	ce 01       	movw	r24, r28
    4390:	0e 94 63 21 	call	0x42c6	; 0x42c6 <_ZN5Print5printEli>
    4394:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    4396:	ce 01       	movw	r24, r28
    4398:	0e 94 35 20 	call	0x406a	; 0x406a <_ZN5Print7printlnEv>
    439c:	08 0f       	add	r16, r24
    439e:	19 1f       	adc	r17, r25
  return n;
}
    43a0:	c8 01       	movw	r24, r16
    43a2:	df 91       	pop	r29
    43a4:	cf 91       	pop	r28
    43a6:	1f 91       	pop	r17
    43a8:	0f 91       	pop	r16
    43aa:	08 95       	ret

000043ac <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    43ac:	6f 92       	push	r6
    43ae:	7f 92       	push	r7
    43b0:	9f 92       	push	r9
    43b2:	af 92       	push	r10
    43b4:	bf 92       	push	r11
    43b6:	cf 92       	push	r12
    43b8:	df 92       	push	r13
    43ba:	ef 92       	push	r14
    43bc:	ff 92       	push	r15
    43be:	0f 93       	push	r16
    43c0:	1f 93       	push	r17
    43c2:	cf 93       	push	r28
    43c4:	df 93       	push	r29
    43c6:	3c 01       	movw	r6, r24
    43c8:	7a 01       	movw	r14, r20
    43ca:	8b 01       	movw	r16, r22
    43cc:	c2 2e       	mov	r12, r18
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    43ce:	cb 01       	movw	r24, r22
    43d0:	ba 01       	movw	r22, r20
    43d2:	20 e0       	ldi	r18, 0x00	; 0
    43d4:	30 e0       	ldi	r19, 0x00	; 0
    43d6:	a9 01       	movw	r20, r18
    43d8:	0e 94 03 12 	call	0x2406	; 0x2406 <__ltsf2>
    43dc:	87 ff       	sbrs	r24, 7
    43de:	0a c0       	rjmp	.+20     	; 0x43f4 <_ZN5Print10printFloatEdh+0x48>
  {
     n += print('-');
    43e0:	c3 01       	movw	r24, r6
    43e2:	6d e2       	ldi	r22, 0x2D	; 45
    43e4:	0e 94 22 20 	call	0x4044	; 0x4044 <_ZN5Print5printEc>
    43e8:	ec 01       	movw	r28, r24
     number = -number;
    43ea:	17 fb       	bst	r17, 7
    43ec:	10 95       	com	r17
    43ee:	17 f9       	bld	r17, 7
    43f0:	10 95       	com	r17
    43f2:	02 c0       	rjmp	.+4      	; 0x43f8 <_ZN5Print10printFloatEdh+0x4c>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    43f4:	c0 e0       	ldi	r28, 0x00	; 0
    43f6:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    43f8:	dd 24       	eor	r13, r13
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    43fa:	50 e0       	ldi	r21, 0x00	; 0
    43fc:	40 e0       	ldi	r20, 0x00	; 0
    43fe:	30 e0       	ldi	r19, 0x00	; 0
    4400:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    4402:	11 c0       	rjmp	.+34     	; 0x4426 <_ZN5Print10printFloatEdh+0x7a>
    rounding /= 10.0;
    4404:	da 01       	movw	r26, r20
    4406:	f9 01       	movw	r30, r18
    4408:	6b 2f       	mov	r22, r27
    440a:	74 2f       	mov	r23, r20
    440c:	8f 2f       	mov	r24, r31
    440e:	92 2f       	mov	r25, r18
    4410:	20 e0       	ldi	r18, 0x00	; 0
    4412:	30 e0       	ldi	r19, 0x00	; 0
    4414:	40 e2       	ldi	r20, 0x20	; 32
    4416:	51 e4       	ldi	r21, 0x41	; 65
    4418:	0e 94 c5 10 	call	0x218a	; 0x218a <__divsf3>
    441c:	56 2f       	mov	r21, r22
    441e:	47 2f       	mov	r20, r23
    4420:	38 2f       	mov	r19, r24
    4422:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4424:	d3 94       	inc	r13
    4426:	dc 14       	cp	r13, r12
    4428:	68 f3       	brcs	.-38     	; 0x4404 <_ZN5Print10printFloatEdh+0x58>
    rounding /= 10.0;
  
  number += rounding;
    442a:	c8 01       	movw	r24, r16
    442c:	b7 01       	movw	r22, r14
    442e:	da 01       	movw	r26, r20
    4430:	f9 01       	movw	r30, r18
    4432:	2b 2f       	mov	r18, r27
    4434:	34 2f       	mov	r19, r20
    4436:	4f 2f       	mov	r20, r31
    4438:	5e 2f       	mov	r21, r30
    443a:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <__addsf3>
    443e:	5b 01       	movw	r10, r22
    4440:	f8 2e       	mov	r15, r24
    4442:	99 2e       	mov	r9, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4444:	7b 2d       	mov	r23, r11
    4446:	0e 94 f7 0d 	call	0x1bee	; 0x1bee <__fixunssfsi>
    444a:	16 2f       	mov	r17, r22
    444c:	d7 2e       	mov	r13, r23
    444e:	e8 2e       	mov	r14, r24
    4450:	09 2f       	mov	r16, r25
  double remainder = number - (double)int_part;
    4452:	0e 94 e5 12 	call	0x25ca	; 0x25ca <__floatunsisf>
    4456:	9b 01       	movw	r18, r22
    4458:	ac 01       	movw	r20, r24
    445a:	6a 2d       	mov	r22, r10
    445c:	7b 2d       	mov	r23, r11
    445e:	8f 2d       	mov	r24, r15
    4460:	99 2d       	mov	r25, r9
    4462:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__subsf3>
    4466:	96 2e       	mov	r9, r22
    4468:	a7 2e       	mov	r10, r23
    446a:	b8 2e       	mov	r11, r24
    446c:	f9 2e       	mov	r15, r25
  n += print(int_part);
    446e:	c3 01       	movw	r24, r6
    4470:	41 2f       	mov	r20, r17
    4472:	5d 2d       	mov	r21, r13
    4474:	6e 2d       	mov	r22, r14
    4476:	70 2f       	mov	r23, r16
    4478:	2a e0       	ldi	r18, 0x0A	; 10
    447a:	30 e0       	ldi	r19, 0x00	; 0
    447c:	0e 94 03 21 	call	0x4206	; 0x4206 <_ZN5Print5printEmi>
    4480:	c8 0f       	add	r28, r24
    4482:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    4484:	cc 20       	and	r12, r12
    4486:	b9 f1       	breq	.+110    	; 0x44f6 <_ZN5Print10printFloatEdh+0x14a>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4488:	c3 01       	movw	r24, r6
    448a:	6c ed       	ldi	r22, 0xDC	; 220
    448c:	71 e0       	ldi	r23, 0x01	; 1
    448e:	0e 94 b8 1f 	call	0x3f70	; 0x3f70 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    4492:	c8 0f       	add	r28, r24
    4494:	d9 1f       	adc	r29, r25
    4496:	2f c0       	rjmp	.+94     	; 0x44f6 <_ZN5Print10printFloatEdh+0x14a>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4498:	69 2d       	mov	r22, r9
    449a:	7a 2d       	mov	r23, r10
    449c:	8b 2d       	mov	r24, r11
    449e:	9f 2d       	mov	r25, r15
    44a0:	20 e0       	ldi	r18, 0x00	; 0
    44a2:	30 e0       	ldi	r19, 0x00	; 0
    44a4:	40 e2       	ldi	r20, 0x20	; 32
    44a6:	51 e4       	ldi	r21, 0x41	; 65
    44a8:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <__mulsf3>
    44ac:	d6 2e       	mov	r13, r22
    44ae:	b7 2e       	mov	r11, r23
    44b0:	a8 2e       	mov	r10, r24
    44b2:	99 2e       	mov	r9, r25
    int toPrint = int(remainder);
    44b4:	0e 94 93 12 	call	0x2526	; 0x2526 <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    44b8:	7b 01       	movw	r14, r22
    44ba:	00 27       	eor	r16, r16
    44bc:	f7 fc       	sbrc	r15, 7
    44be:	00 95       	com	r16
    44c0:	10 2f       	mov	r17, r16
    44c2:	c3 01       	movw	r24, r6
    44c4:	b8 01       	movw	r22, r16
    44c6:	a7 01       	movw	r20, r14
    44c8:	2a e0       	ldi	r18, 0x0A	; 10
    44ca:	30 e0       	ldi	r19, 0x00	; 0
    44cc:	0e 94 63 21 	call	0x42c6	; 0x42c6 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    44d0:	c8 0f       	add	r28, r24
    44d2:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    44d4:	c8 01       	movw	r24, r16
    44d6:	b7 01       	movw	r22, r14
    44d8:	0e 94 33 12 	call	0x2466	; 0x2466 <__floatsisf>
    44dc:	9b 01       	movw	r18, r22
    44de:	ac 01       	movw	r20, r24
    44e0:	6d 2d       	mov	r22, r13
    44e2:	7b 2d       	mov	r23, r11
    44e4:	8a 2d       	mov	r24, r10
    44e6:	99 2d       	mov	r25, r9
    44e8:	0e 94 9a 0f 	call	0x1f34	; 0x1f34 <__subsf3>
    44ec:	96 2e       	mov	r9, r22
    44ee:	a7 2e       	mov	r10, r23
    44f0:	b8 2e       	mov	r11, r24
    44f2:	f9 2e       	mov	r15, r25
    44f4:	ca 94       	dec	r12
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    44f6:	cc 20       	and	r12, r12
    44f8:	79 f6       	brne	.-98     	; 0x4498 <_ZN5Print10printFloatEdh+0xec>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    44fa:	ce 01       	movw	r24, r28
    44fc:	df 91       	pop	r29
    44fe:	cf 91       	pop	r28
    4500:	1f 91       	pop	r17
    4502:	0f 91       	pop	r16
    4504:	ff 90       	pop	r15
    4506:	ef 90       	pop	r14
    4508:	df 90       	pop	r13
    450a:	cf 90       	pop	r12
    450c:	bf 90       	pop	r11
    450e:	af 90       	pop	r10
    4510:	9f 90       	pop	r9
    4512:	7f 90       	pop	r7
    4514:	6f 90       	pop	r6
    4516:	08 95       	ret

00004518 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4518:	0e 94 d6 21 	call	0x43ac	; 0x43ac <_ZN5Print10printFloatEdh>
}
    451c:	08 95       	ret

0000451e <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    451e:	0f 93       	push	r16
    4520:	1f 93       	push	r17
    4522:	cf 93       	push	r28
    4524:	df 93       	push	r29
    4526:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4528:	0e 94 d6 21 	call	0x43ac	; 0x43ac <_ZN5Print10printFloatEdh>
    452c:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    452e:	ce 01       	movw	r24, r28
    4530:	0e 94 35 20 	call	0x406a	; 0x406a <_ZN5Print7printlnEv>
    4534:	08 0f       	add	r16, r24
    4536:	19 1f       	adc	r17, r25
  return n;
}
    4538:	c8 01       	movw	r24, r16
    453a:	df 91       	pop	r29
    453c:	cf 91       	pop	r28
    453e:	1f 91       	pop	r17
    4540:	0f 91       	pop	r16
    4542:	08 95       	ret

00004544 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    4544:	fc 01       	movw	r30, r24
    4546:	84 85       	ldd	r24, Z+12	; 0x0c
    4548:	95 85       	ldd	r25, Z+13	; 0x0d
    454a:	fc 01       	movw	r30, r24
    454c:	e0 5c       	subi	r30, 0xC0	; 192
    454e:	ff 4f       	sbci	r31, 0xFF	; 255
    4550:	20 81       	ld	r18, Z
    4552:	31 81       	ldd	r19, Z+1	; 0x01
    4554:	8e 5b       	subi	r24, 0xBE	; 190
    4556:	9f 4f       	sbci	r25, 0xFF	; 255
    4558:	fc 01       	movw	r30, r24
    455a:	80 81       	ld	r24, Z
    455c:	91 81       	ldd	r25, Z+1	; 0x01
    455e:	28 1b       	sub	r18, r24
    4560:	39 0b       	sbc	r19, r25
    4562:	2f 73       	andi	r18, 0x3F	; 63
    4564:	30 70       	andi	r19, 0x00	; 0
}
    4566:	c9 01       	movw	r24, r18
    4568:	08 95       	ret

0000456a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    456a:	fc 01       	movw	r30, r24
    456c:	84 85       	ldd	r24, Z+12	; 0x0c
    456e:	95 85       	ldd	r25, Z+13	; 0x0d
    4570:	fc 01       	movw	r30, r24
    4572:	e0 5c       	subi	r30, 0xC0	; 192
    4574:	ff 4f       	sbci	r31, 0xFF	; 255
    4576:	40 81       	ld	r20, Z
    4578:	51 81       	ldd	r21, Z+1	; 0x01
    457a:	fc 01       	movw	r30, r24
    457c:	ee 5b       	subi	r30, 0xBE	; 190
    457e:	ff 4f       	sbci	r31, 0xFF	; 255
    4580:	20 81       	ld	r18, Z
    4582:	31 81       	ldd	r19, Z+1	; 0x01
    4584:	42 17       	cp	r20, r18
    4586:	53 07       	cpc	r21, r19
    4588:	41 f0       	breq	.+16     	; 0x459a <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    458a:	01 90       	ld	r0, Z+
    458c:	f0 81       	ld	r31, Z
    458e:	e0 2d       	mov	r30, r0
    4590:	e8 0f       	add	r30, r24
    4592:	f9 1f       	adc	r31, r25
    4594:	20 81       	ld	r18, Z
    4596:	30 e0       	ldi	r19, 0x00	; 0
    4598:	02 c0       	rjmp	.+4      	; 0x459e <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    459a:	2f ef       	ldi	r18, 0xFF	; 255
    459c:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    459e:	c9 01       	movw	r24, r18
    45a0:	08 95       	ret

000045a2 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    45a2:	fc 01       	movw	r30, r24
    45a4:	84 85       	ldd	r24, Z+12	; 0x0c
    45a6:	95 85       	ldd	r25, Z+13	; 0x0d
    45a8:	fc 01       	movw	r30, r24
    45aa:	e0 5c       	subi	r30, 0xC0	; 192
    45ac:	ff 4f       	sbci	r31, 0xFF	; 255
    45ae:	40 81       	ld	r20, Z
    45b0:	51 81       	ldd	r21, Z+1	; 0x01
    45b2:	fc 01       	movw	r30, r24
    45b4:	ee 5b       	subi	r30, 0xBE	; 190
    45b6:	ff 4f       	sbci	r31, 0xFF	; 255
    45b8:	20 81       	ld	r18, Z
    45ba:	31 81       	ldd	r19, Z+1	; 0x01
    45bc:	42 17       	cp	r20, r18
    45be:	53 07       	cpc	r21, r19
    45c0:	71 f0       	breq	.+28     	; 0x45de <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    45c2:	a0 81       	ld	r26, Z
    45c4:	b1 81       	ldd	r27, Z+1	; 0x01
    45c6:	a8 0f       	add	r26, r24
    45c8:	b9 1f       	adc	r27, r25
    45ca:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    45cc:	80 81       	ld	r24, Z
    45ce:	91 81       	ldd	r25, Z+1	; 0x01
    45d0:	01 96       	adiw	r24, 0x01	; 1
    45d2:	8f 73       	andi	r24, 0x3F	; 63
    45d4:	90 70       	andi	r25, 0x00	; 0
    45d6:	91 83       	std	Z+1, r25	; 0x01
    45d8:	80 83       	st	Z, r24
    return c;
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	02 c0       	rjmp	.+4      	; 0x45e2 <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    45de:	2f ef       	ldi	r18, 0xFF	; 255
    45e0:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    45e2:	c9 01       	movw	r24, r18
    45e4:	08 95       	ret

000045e6 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    45e6:	dc 01       	movw	r26, r24
    45e8:	1e 96       	adiw	r26, 0x0e	; 14
    45ea:	8d 91       	ld	r24, X+
    45ec:	9c 91       	ld	r25, X
    45ee:	1f 97       	sbiw	r26, 0x0f	; 15
    45f0:	fc 01       	movw	r30, r24
    45f2:	e0 5c       	subi	r30, 0xC0	; 192
    45f4:	ff 4f       	sbci	r31, 0xFF	; 255
    45f6:	8e 5b       	subi	r24, 0xBE	; 190
    45f8:	9f 4f       	sbci	r25, 0xFF	; 255
    45fa:	40 81       	ld	r20, Z
    45fc:	51 81       	ldd	r21, Z+1	; 0x01
    45fe:	dc 01       	movw	r26, r24
    4600:	2d 91       	ld	r18, X+
    4602:	3c 91       	ld	r19, X
    4604:	11 97       	sbiw	r26, 0x01	; 1
    4606:	42 17       	cp	r20, r18
    4608:	53 07       	cpc	r21, r19
    460a:	b9 f7       	brne	.-18     	; 0x45fa <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    460c:	08 95       	ret

0000460e <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    460e:	1f 93       	push	r17
    4610:	fc 01       	movw	r30, r24
    4612:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4614:	26 85       	ldd	r18, Z+14	; 0x0e
    4616:	37 85       	ldd	r19, Z+15	; 0x0f
    4618:	d9 01       	movw	r26, r18
    461a:	a0 5c       	subi	r26, 0xC0	; 192
    461c:	bf 4f       	sbci	r27, 0xFF	; 255
    461e:	8d 91       	ld	r24, X+
    4620:	9c 91       	ld	r25, X
    4622:	01 96       	adiw	r24, 0x01	; 1
    4624:	60 e4       	ldi	r22, 0x40	; 64
    4626:	70 e0       	ldi	r23, 0x00	; 0
    4628:	0e 94 38 25 	call	0x4a70	; 0x4a70 <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    462c:	d9 01       	movw	r26, r18
    462e:	ae 5b       	subi	r26, 0xBE	; 190
    4630:	bf 4f       	sbci	r27, 0xFF	; 255
    4632:	4d 91       	ld	r20, X+
    4634:	5c 91       	ld	r21, X
    4636:	11 97       	sbiw	r26, 0x01	; 1
    4638:	84 17       	cp	r24, r20
    463a:	95 07       	cpc	r25, r21
    463c:	d1 f3       	breq	.-12     	; 0x4632 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    463e:	d9 01       	movw	r26, r18
    4640:	a0 5c       	subi	r26, 0xC0	; 192
    4642:	bf 4f       	sbci	r27, 0xFF	; 255
    4644:	0d 90       	ld	r0, X+
    4646:	bc 91       	ld	r27, X
    4648:	a0 2d       	mov	r26, r0
    464a:	a2 0f       	add	r26, r18
    464c:	b3 1f       	adc	r27, r19
    464e:	1c 93       	st	X, r17
  _tx_buffer->head = i;
    4650:	a6 85       	ldd	r26, Z+14	; 0x0e
    4652:	b7 85       	ldd	r27, Z+15	; 0x0f
    4654:	a0 5c       	subi	r26, 0xC0	; 192
    4656:	bf 4f       	sbci	r27, 0xFF	; 255
    4658:	11 96       	adiw	r26, 0x01	; 1
    465a:	9c 93       	st	X, r25
    465c:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
    465e:	a6 89       	ldd	r26, Z+22	; 0x16
    4660:	b7 89       	ldd	r27, Z+23	; 0x17
    4662:	2c 91       	ld	r18, X
    4664:	81 e0       	ldi	r24, 0x01	; 1
    4666:	90 e0       	ldi	r25, 0x00	; 0
    4668:	05 8c       	ldd	r0, Z+29	; 0x1d
    466a:	02 c0       	rjmp	.+4      	; 0x4670 <_ZN14HardwareSerial5writeEh+0x62>
    466c:	88 0f       	add	r24, r24
    466e:	99 1f       	adc	r25, r25
    4670:	0a 94       	dec	r0
    4672:	e2 f7       	brpl	.-8      	; 0x466c <_ZN14HardwareSerial5writeEh+0x5e>
    4674:	28 2b       	or	r18, r24
    4676:	2c 93       	st	X, r18
  
  return 1;
}
    4678:	81 e0       	ldi	r24, 0x01	; 1
    467a:	90 e0       	ldi	r25, 0x00	; 0
    467c:	1f 91       	pop	r17
    467e:	08 95       	ret

00004680 <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4680:	fb 01       	movw	r30, r22
    4682:	e0 5c       	subi	r30, 0xC0	; 192
    4684:	ff 4f       	sbci	r31, 0xFF	; 255
    4686:	20 81       	ld	r18, Z
    4688:	31 81       	ldd	r19, Z+1	; 0x01
    468a:	2f 5f       	subi	r18, 0xFF	; 255
    468c:	3f 4f       	sbci	r19, 0xFF	; 255
    468e:	2f 73       	andi	r18, 0x3F	; 63
    4690:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    4692:	db 01       	movw	r26, r22
    4694:	ae 5b       	subi	r26, 0xBE	; 190
    4696:	bf 4f       	sbci	r27, 0xFF	; 255
    4698:	4d 91       	ld	r20, X+
    469a:	5c 91       	ld	r21, X
    469c:	11 97       	sbiw	r26, 0x01	; 1
    469e:	24 17       	cp	r18, r20
    46a0:	35 07       	cpc	r19, r21
    46a2:	39 f0       	breq	.+14     	; 0x46b2 <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
    46a4:	a0 81       	ld	r26, Z
    46a6:	b1 81       	ldd	r27, Z+1	; 0x01
    46a8:	a6 0f       	add	r26, r22
    46aa:	b7 1f       	adc	r27, r23
    46ac:	8c 93       	st	X, r24
    buffer->head = i;
    46ae:	31 83       	std	Z+1, r19	; 0x01
    46b0:	20 83       	st	Z, r18
    46b2:	08 95       	ret

000046b4 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    46b4:	08 95       	ret

000046b6 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    46b6:	1f 92       	push	r1
    46b8:	0f 92       	push	r0
    46ba:	0f b6       	in	r0, 0x3f	; 63
    46bc:	0f 92       	push	r0
    46be:	11 24       	eor	r1, r1
    46c0:	2f 93       	push	r18
    46c2:	3f 93       	push	r19
    46c4:	4f 93       	push	r20
    46c6:	5f 93       	push	r21
    46c8:	6f 93       	push	r22
    46ca:	7f 93       	push	r23
    46cc:	8f 93       	push	r24
    46ce:	9f 93       	push	r25
    46d0:	af 93       	push	r26
    46d2:	bf 93       	push	r27
    46d4:	ef 93       	push	r30
    46d6:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    46d8:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
    46dc:	61 e4       	ldi	r22, 0x41	; 65
    46de:	73 e0       	ldi	r23, 0x03	; 3
    46e0:	0e 94 40 23 	call	0x4680	; 0x4680 <_Z10store_charhP11ring_buffer>
  }
    46e4:	ff 91       	pop	r31
    46e6:	ef 91       	pop	r30
    46e8:	bf 91       	pop	r27
    46ea:	af 91       	pop	r26
    46ec:	9f 91       	pop	r25
    46ee:	8f 91       	pop	r24
    46f0:	7f 91       	pop	r23
    46f2:	6f 91       	pop	r22
    46f4:	5f 91       	pop	r21
    46f6:	4f 91       	pop	r20
    46f8:	3f 91       	pop	r19
    46fa:	2f 91       	pop	r18
    46fc:	0f 90       	pop	r0
    46fe:	0f be       	out	0x3f, r0	; 63
    4700:	0f 90       	pop	r0
    4702:	1f 90       	pop	r1
    4704:	18 95       	reti

00004706 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    4706:	89 ec       	ldi	r24, 0xC9	; 201
    4708:	93 e0       	ldi	r25, 0x03	; 3
    470a:	0e 94 a2 22 	call	0x4544	; 0x4544 <_ZN14HardwareSerial9availableEv>
    470e:	00 97       	sbiw	r24, 0x00	; 0
    4710:	11 f0       	breq	.+4      	; 0x4716 <_Z14serialEventRunv+0x10>
    4712:	0e 94 5a 23 	call	0x46b4	; 0x46b4 <_Z11serialEventv>
    4716:	08 95       	ret

00004718 <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    4718:	1f 92       	push	r1
    471a:	0f 92       	push	r0
    471c:	0f b6       	in	r0, 0x3f	; 63
    471e:	0f 92       	push	r0
    4720:	11 24       	eor	r1, r1
    4722:	2f 93       	push	r18
    4724:	3f 93       	push	r19
    4726:	5f 93       	push	r21
    4728:	6f 93       	push	r22
    472a:	7f 93       	push	r23
    472c:	8f 93       	push	r24
    472e:	9f 93       	push	r25
    4730:	af 93       	push	r26
    4732:	bf 93       	push	r27
    4734:	ef 93       	push	r30
    4736:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    4738:	20 91 c5 03 	lds	r18, 0x03C5
    473c:	30 91 c6 03 	lds	r19, 0x03C6
    4740:	80 91 c7 03 	lds	r24, 0x03C7
    4744:	90 91 c8 03 	lds	r25, 0x03C8
    4748:	28 17       	cp	r18, r24
    474a:	39 07       	cpc	r19, r25
    474c:	31 f4       	brne	.+12     	; 0x475a <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    474e:	80 91 c1 00 	lds	r24, 0x00C1
    4752:	8f 7d       	andi	r24, 0xDF	; 223
    4754:	80 93 c1 00 	sts	0x00C1, r24
    4758:	16 c0       	rjmp	.+44     	; 0x4786 <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    475a:	e0 91 c7 03 	lds	r30, 0x03C7
    475e:	f0 91 c8 03 	lds	r31, 0x03C8
    4762:	eb 57       	subi	r30, 0x7B	; 123
    4764:	fc 4f       	sbci	r31, 0xFC	; 252
    4766:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    4768:	80 91 c7 03 	lds	r24, 0x03C7
    476c:	90 91 c8 03 	lds	r25, 0x03C8
    4770:	01 96       	adiw	r24, 0x01	; 1
    4772:	60 e4       	ldi	r22, 0x40	; 64
    4774:	70 e0       	ldi	r23, 0x00	; 0
    4776:	0e 94 38 25 	call	0x4a70	; 0x4a70 <__divmodhi4>
    477a:	90 93 c8 03 	sts	0x03C8, r25
    477e:	80 93 c7 03 	sts	0x03C7, r24
	
  #if defined(UDR0)
    UDR0 = c;
    4782:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    4786:	ff 91       	pop	r31
    4788:	ef 91       	pop	r30
    478a:	bf 91       	pop	r27
    478c:	af 91       	pop	r26
    478e:	9f 91       	pop	r25
    4790:	8f 91       	pop	r24
    4792:	7f 91       	pop	r23
    4794:	6f 91       	pop	r22
    4796:	5f 91       	pop	r21
    4798:	3f 91       	pop	r19
    479a:	2f 91       	pop	r18
    479c:	0f 90       	pop	r0
    479e:	0f be       	out	0x3f, r0	; 63
    47a0:	0f 90       	pop	r0
    47a2:	1f 90       	pop	r1
    47a4:	18 95       	reti

000047a6 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:
#endif


// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
    47a6:	8f 92       	push	r8
    47a8:	af 92       	push	r10
    47aa:	bf 92       	push	r11
    47ac:	cf 92       	push	r12
    47ae:	df 92       	push	r13
    47b0:	ef 92       	push	r14
    47b2:	ff 92       	push	r15
    47b4:	0f 93       	push	r16
    47b6:	1f 93       	push	r17
    47b8:	df 93       	push	r29
    47ba:	cf 93       	push	r28
    47bc:	cd b7       	in	r28, 0x3d	; 61
    47be:	de b7       	in	r29, 0x3e	; 62
    47c0:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    47c2:	13 82       	std	Z+3, r1	; 0x03
    47c4:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    47c6:	88 ee       	ldi	r24, 0xE8	; 232
    47c8:	93 e0       	ldi	r25, 0x03	; 3
    47ca:	a0 e0       	ldi	r26, 0x00	; 0
    47cc:	b0 e0       	ldi	r27, 0x00	; 0
    47ce:	84 83       	std	Z+4, r24	; 0x04
    47d0:	95 83       	std	Z+5, r25	; 0x05
    47d2:	a6 83       	std	Z+6, r26	; 0x06
    47d4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    47d6:	89 ef       	ldi	r24, 0xF9	; 249
    47d8:	92 e0       	ldi	r25, 0x02	; 2
    47da:	91 83       	std	Z+1, r25	; 0x01
    47dc:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    47de:	75 87       	std	Z+13, r23	; 0x0d
    47e0:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
    47e2:	57 87       	std	Z+15, r21	; 0x0f
    47e4:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
    47e6:	31 8b       	std	Z+17, r19	; 0x11
    47e8:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
    47ea:	13 8b       	std	Z+19, r17	; 0x13
    47ec:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
    47ee:	f5 8a       	std	Z+21, r15	; 0x15
    47f0:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
    47f2:	d7 8a       	std	Z+23, r13	; 0x17
    47f4:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
    47f6:	b1 8e       	std	Z+25, r11	; 0x19
    47f8:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
    47fa:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
    47fc:	8e 85       	ldd	r24, Y+14	; 0x0e
    47fe:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    4800:	8f 85       	ldd	r24, Y+15	; 0x0f
    4802:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    4804:	88 89       	ldd	r24, Y+16	; 0x10
    4806:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    4808:	89 89       	ldd	r24, Y+17	; 0x11
    480a:	86 8f       	std	Z+30, r24	; 0x1e
}
    480c:	cf 91       	pop	r28
    480e:	df 91       	pop	r29
    4810:	1f 91       	pop	r17
    4812:	0f 91       	pop	r16
    4814:	ff 90       	pop	r15
    4816:	ef 90       	pop	r14
    4818:	df 90       	pop	r13
    481a:	cf 90       	pop	r12
    481c:	bf 90       	pop	r11
    481e:	af 90       	pop	r10
    4820:	8f 90       	pop	r8
    4822:	08 95       	ret

00004824 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    4824:	df 92       	push	r13
    4826:	ef 92       	push	r14
    4828:	ff 92       	push	r15
    482a:	0f 93       	push	r16
    482c:	1f 93       	push	r17
    482e:	cf 93       	push	r28
    4830:	df 93       	push	r29
    4832:	ec 01       	movw	r28, r24
    4834:	7a 01       	movw	r14, r20
    4836:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    4838:	dd 24       	eor	r13, r13
    483a:	d3 94       	inc	r13
    483c:	40 30       	cpi	r20, 0x00	; 0
    483e:	81 ee       	ldi	r24, 0xE1	; 225
    4840:	58 07       	cpc	r21, r24
    4842:	80 e0       	ldi	r24, 0x00	; 0
    4844:	68 07       	cpc	r22, r24
    4846:	80 e0       	ldi	r24, 0x00	; 0
    4848:	78 07       	cpc	r23, r24
    484a:	49 f4       	brne	.+18     	; 0x485e <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    484c:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    484e:	ec 89       	ldd	r30, Y+20	; 0x14
    4850:	fd 89       	ldd	r31, Y+21	; 0x15
    4852:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4854:	60 e8       	ldi	r22, 0x80	; 128
    4856:	74 e8       	ldi	r23, 0x84	; 132
    4858:	8e e1       	ldi	r24, 0x1E	; 30
    485a:	90 e0       	ldi	r25, 0x00	; 0
    485c:	0f c0       	rjmp	.+30     	; 0x487c <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    485e:	ec 89       	ldd	r30, Y+20	; 0x14
    4860:	fd 89       	ldd	r31, Y+21	; 0x15
    4862:	81 e0       	ldi	r24, 0x01	; 1
    4864:	90 e0       	ldi	r25, 0x00	; 0
    4866:	0e 8c       	ldd	r0, Y+30	; 0x1e
    4868:	02 c0       	rjmp	.+4      	; 0x486e <_ZN14HardwareSerial5beginEm+0x4a>
    486a:	88 0f       	add	r24, r24
    486c:	99 1f       	adc	r25, r25
    486e:	0a 94       	dec	r0
    4870:	e2 f7       	brpl	.-8      	; 0x486a <_ZN14HardwareSerial5beginEm+0x46>
    4872:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4874:	60 e0       	ldi	r22, 0x00	; 0
    4876:	79 e0       	ldi	r23, 0x09	; 9
    4878:	8d e3       	ldi	r24, 0x3D	; 61
    487a:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    487c:	a8 01       	movw	r20, r16
    487e:	97 01       	movw	r18, r14
    4880:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__udivmodsi4>
    4884:	21 50       	subi	r18, 0x01	; 1
    4886:	30 40       	sbci	r19, 0x00	; 0
    4888:	40 40       	sbci	r20, 0x00	; 0
    488a:	50 40       	sbci	r21, 0x00	; 0
    488c:	56 95       	lsr	r21
    488e:	47 95       	ror	r20
    4890:	37 95       	ror	r19
    4892:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    4894:	80 e1       	ldi	r24, 0x10	; 16
    4896:	20 30       	cpi	r18, 0x00	; 0
    4898:	38 07       	cpc	r19, r24
    489a:	10 f0       	brcs	.+4      	; 0x48a0 <_ZN14HardwareSerial5beginEm+0x7c>
    489c:	dd 20       	and	r13, r13
    489e:	b1 f6       	brne	.-84     	; 0x484c <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    48a0:	e8 89       	ldd	r30, Y+16	; 0x10
    48a2:	f9 89       	ldd	r31, Y+17	; 0x11
    48a4:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    48a6:	ea 89       	ldd	r30, Y+18	; 0x12
    48a8:	fb 89       	ldd	r31, Y+19	; 0x13
    48aa:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    48ac:	ee 89       	ldd	r30, Y+22	; 0x16
    48ae:	ff 89       	ldd	r31, Y+23	; 0x17
    48b0:	40 81       	ld	r20, Z
    48b2:	81 e0       	ldi	r24, 0x01	; 1
    48b4:	90 e0       	ldi	r25, 0x00	; 0
    48b6:	9c 01       	movw	r18, r24
    48b8:	0a 8c       	ldd	r0, Y+26	; 0x1a
    48ba:	02 c0       	rjmp	.+4      	; 0x48c0 <_ZN14HardwareSerial5beginEm+0x9c>
    48bc:	22 0f       	add	r18, r18
    48be:	33 1f       	adc	r19, r19
    48c0:	0a 94       	dec	r0
    48c2:	e2 f7       	brpl	.-8      	; 0x48bc <_ZN14HardwareSerial5beginEm+0x98>
    48c4:	42 2b       	or	r20, r18
    48c6:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    48c8:	ee 89       	ldd	r30, Y+22	; 0x16
    48ca:	ff 89       	ldd	r31, Y+23	; 0x17
    48cc:	40 81       	ld	r20, Z
    48ce:	9c 01       	movw	r18, r24
    48d0:	0b 8c       	ldd	r0, Y+27	; 0x1b
    48d2:	02 c0       	rjmp	.+4      	; 0x48d8 <_ZN14HardwareSerial5beginEm+0xb4>
    48d4:	22 0f       	add	r18, r18
    48d6:	33 1f       	adc	r19, r19
    48d8:	0a 94       	dec	r0
    48da:	e2 f7       	brpl	.-8      	; 0x48d4 <_ZN14HardwareSerial5beginEm+0xb0>
    48dc:	42 2b       	or	r20, r18
    48de:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    48e0:	ee 89       	ldd	r30, Y+22	; 0x16
    48e2:	ff 89       	ldd	r31, Y+23	; 0x17
    48e4:	40 81       	ld	r20, Z
    48e6:	9c 01       	movw	r18, r24
    48e8:	0c 8c       	ldd	r0, Y+28	; 0x1c
    48ea:	02 c0       	rjmp	.+4      	; 0x48f0 <_ZN14HardwareSerial5beginEm+0xcc>
    48ec:	22 0f       	add	r18, r18
    48ee:	33 1f       	adc	r19, r19
    48f0:	0a 94       	dec	r0
    48f2:	e2 f7       	brpl	.-8      	; 0x48ec <_ZN14HardwareSerial5beginEm+0xc8>
    48f4:	42 2b       	or	r20, r18
    48f6:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    48f8:	ee 89       	ldd	r30, Y+22	; 0x16
    48fa:	ff 89       	ldd	r31, Y+23	; 0x17
    48fc:	20 81       	ld	r18, Z
    48fe:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4900:	02 c0       	rjmp	.+4      	; 0x4906 <_ZN14HardwareSerial5beginEm+0xe2>
    4902:	88 0f       	add	r24, r24
    4904:	99 1f       	adc	r25, r25
    4906:	0a 94       	dec	r0
    4908:	e2 f7       	brpl	.-8      	; 0x4902 <_ZN14HardwareSerial5beginEm+0xde>
    490a:	80 95       	com	r24
    490c:	82 23       	and	r24, r18
    490e:	80 83       	st	Z, r24
}
    4910:	df 91       	pop	r29
    4912:	cf 91       	pop	r28
    4914:	1f 91       	pop	r17
    4916:	0f 91       	pop	r16
    4918:	ff 90       	pop	r15
    491a:	ef 90       	pop	r14
    491c:	df 90       	pop	r13
    491e:	08 95       	ret

00004920 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    4920:	cf 93       	push	r28
    4922:	df 93       	push	r29
    4924:	fc 01       	movw	r30, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    4926:	86 85       	ldd	r24, Z+14	; 0x0e
    4928:	97 85       	ldd	r25, Z+15	; 0x0f
    492a:	dc 01       	movw	r26, r24
    492c:	a0 5c       	subi	r26, 0xC0	; 192
    492e:	bf 4f       	sbci	r27, 0xFF	; 255
    4930:	8e 5b       	subi	r24, 0xBE	; 190
    4932:	9f 4f       	sbci	r25, 0xFF	; 255
    4934:	4d 91       	ld	r20, X+
    4936:	5c 91       	ld	r21, X
    4938:	11 97       	sbiw	r26, 0x01	; 1
    493a:	ec 01       	movw	r28, r24
    493c:	28 81       	ld	r18, Y
    493e:	39 81       	ldd	r19, Y+1	; 0x01
    4940:	42 17       	cp	r20, r18
    4942:	53 07       	cpc	r21, r19
    4944:	b9 f7       	brne	.-18     	; 0x4934 <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
    4946:	a6 89       	ldd	r26, Z+22	; 0x16
    4948:	b7 89       	ldd	r27, Z+23	; 0x17
    494a:	4c 91       	ld	r20, X
    494c:	81 e0       	ldi	r24, 0x01	; 1
    494e:	90 e0       	ldi	r25, 0x00	; 0
    4950:	9c 01       	movw	r18, r24
    4952:	02 8c       	ldd	r0, Z+26	; 0x1a
    4954:	02 c0       	rjmp	.+4      	; 0x495a <_ZN14HardwareSerial3endEv+0x3a>
    4956:	22 0f       	add	r18, r18
    4958:	33 1f       	adc	r19, r19
    495a:	0a 94       	dec	r0
    495c:	e2 f7       	brpl	.-8      	; 0x4956 <_ZN14HardwareSerial3endEv+0x36>
    495e:	20 95       	com	r18
    4960:	24 23       	and	r18, r20
    4962:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    4964:	a6 89       	ldd	r26, Z+22	; 0x16
    4966:	b7 89       	ldd	r27, Z+23	; 0x17
    4968:	4c 91       	ld	r20, X
    496a:	9c 01       	movw	r18, r24
    496c:	03 8c       	ldd	r0, Z+27	; 0x1b
    496e:	02 c0       	rjmp	.+4      	; 0x4974 <_ZN14HardwareSerial3endEv+0x54>
    4970:	22 0f       	add	r18, r18
    4972:	33 1f       	adc	r19, r19
    4974:	0a 94       	dec	r0
    4976:	e2 f7       	brpl	.-8      	; 0x4970 <_ZN14HardwareSerial3endEv+0x50>
    4978:	20 95       	com	r18
    497a:	24 23       	and	r18, r20
    497c:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    497e:	a6 89       	ldd	r26, Z+22	; 0x16
    4980:	b7 89       	ldd	r27, Z+23	; 0x17
    4982:	4c 91       	ld	r20, X
    4984:	9c 01       	movw	r18, r24
    4986:	04 8c       	ldd	r0, Z+28	; 0x1c
    4988:	02 c0       	rjmp	.+4      	; 0x498e <_ZN14HardwareSerial3endEv+0x6e>
    498a:	22 0f       	add	r18, r18
    498c:	33 1f       	adc	r19, r19
    498e:	0a 94       	dec	r0
    4990:	e2 f7       	brpl	.-8      	; 0x498a <_ZN14HardwareSerial3endEv+0x6a>
    4992:	20 95       	com	r18
    4994:	24 23       	and	r18, r20
    4996:	2c 93       	st	X, r18
  cbi(*_ucsrb, _udrie);
    4998:	a6 89       	ldd	r26, Z+22	; 0x16
    499a:	b7 89       	ldd	r27, Z+23	; 0x17
    499c:	2c 91       	ld	r18, X
    499e:	05 8c       	ldd	r0, Z+29	; 0x1d
    49a0:	02 c0       	rjmp	.+4      	; 0x49a6 <_ZN14HardwareSerial3endEv+0x86>
    49a2:	88 0f       	add	r24, r24
    49a4:	99 1f       	adc	r25, r25
    49a6:	0a 94       	dec	r0
    49a8:	e2 f7       	brpl	.-8      	; 0x49a2 <_ZN14HardwareSerial3endEv+0x82>
    49aa:	80 95       	com	r24
    49ac:	82 23       	and	r24, r18
    49ae:	8c 93       	st	X, r24
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    49b0:	84 85       	ldd	r24, Z+12	; 0x0c
    49b2:	95 85       	ldd	r25, Z+13	; 0x0d
    49b4:	fc 01       	movw	r30, r24
    49b6:	ee 5b       	subi	r30, 0xBE	; 190
    49b8:	ff 4f       	sbci	r31, 0xFF	; 255
    49ba:	20 81       	ld	r18, Z
    49bc:	31 81       	ldd	r19, Z+1	; 0x01
    49be:	80 5c       	subi	r24, 0xC0	; 192
    49c0:	9f 4f       	sbci	r25, 0xFF	; 255
    49c2:	fc 01       	movw	r30, r24
    49c4:	31 83       	std	Z+1, r19	; 0x01
    49c6:	20 83       	st	Z, r18
}
    49c8:	df 91       	pop	r29
    49ca:	cf 91       	pop	r28
    49cc:	08 95       	ret

000049ce <_GLOBAL__I_rx_buffer>:
    49ce:	10 92 cc 03 	sts	0x03CC, r1
    49d2:	10 92 cb 03 	sts	0x03CB, r1
    49d6:	88 ee       	ldi	r24, 0xE8	; 232
    49d8:	93 e0       	ldi	r25, 0x03	; 3
    49da:	a0 e0       	ldi	r26, 0x00	; 0
    49dc:	b0 e0       	ldi	r27, 0x00	; 0
    49de:	80 93 cd 03 	sts	0x03CD, r24
    49e2:	90 93 ce 03 	sts	0x03CE, r25
    49e6:	a0 93 cf 03 	sts	0x03CF, r26
    49ea:	b0 93 d0 03 	sts	0x03D0, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    49ee:	eb ec       	ldi	r30, 0xCB	; 203
    49f0:	f3 e0       	ldi	r31, 0x03	; 3
    49f2:	89 ef       	ldi	r24, 0xF9	; 249
    49f4:	92 e0       	ldi	r25, 0x02	; 2
    49f6:	92 93       	st	-Z, r25
    49f8:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
    49fa:	81 e4       	ldi	r24, 0x41	; 65
    49fc:	93 e0       	ldi	r25, 0x03	; 3
    49fe:	95 87       	std	Z+13, r25	; 0x0d
    4a00:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    4a02:	85 e8       	ldi	r24, 0x85	; 133
    4a04:	93 e0       	ldi	r25, 0x03	; 3
    4a06:	97 87       	std	Z+15, r25	; 0x0f
    4a08:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    4a0a:	85 ec       	ldi	r24, 0xC5	; 197
    4a0c:	90 e0       	ldi	r25, 0x00	; 0
    4a0e:	91 8b       	std	Z+17, r25	; 0x11
    4a10:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    4a12:	84 ec       	ldi	r24, 0xC4	; 196
    4a14:	90 e0       	ldi	r25, 0x00	; 0
    4a16:	93 8b       	std	Z+19, r25	; 0x13
    4a18:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    4a1a:	80 ec       	ldi	r24, 0xC0	; 192
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	95 8b       	std	Z+21, r25	; 0x15
    4a20:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    4a22:	81 ec       	ldi	r24, 0xC1	; 193
    4a24:	90 e0       	ldi	r25, 0x00	; 0
    4a26:	97 8b       	std	Z+23, r25	; 0x17
    4a28:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
    4a2a:	86 ec       	ldi	r24, 0xC6	; 198
    4a2c:	90 e0       	ldi	r25, 0x00	; 0
    4a2e:	91 8f       	std	Z+25, r25	; 0x19
    4a30:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
    4a32:	84 e0       	ldi	r24, 0x04	; 4
    4a34:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    4a36:	83 e0       	ldi	r24, 0x03	; 3
    4a38:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    4a3a:	87 e0       	ldi	r24, 0x07	; 7
    4a3c:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    4a3e:	85 e0       	ldi	r24, 0x05	; 5
    4a40:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    4a42:	81 e0       	ldi	r24, 0x01	; 1
    4a44:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    4a46:	08 95       	ret

00004a48 <__udivmodhi4>:
    4a48:	aa 1b       	sub	r26, r26
    4a4a:	bb 1b       	sub	r27, r27
    4a4c:	51 e1       	ldi	r21, 0x11	; 17
    4a4e:	07 c0       	rjmp	.+14     	; 0x4a5e <__udivmodhi4_ep>

00004a50 <__udivmodhi4_loop>:
    4a50:	aa 1f       	adc	r26, r26
    4a52:	bb 1f       	adc	r27, r27
    4a54:	a6 17       	cp	r26, r22
    4a56:	b7 07       	cpc	r27, r23
    4a58:	10 f0       	brcs	.+4      	; 0x4a5e <__udivmodhi4_ep>
    4a5a:	a6 1b       	sub	r26, r22
    4a5c:	b7 0b       	sbc	r27, r23

00004a5e <__udivmodhi4_ep>:
    4a5e:	88 1f       	adc	r24, r24
    4a60:	99 1f       	adc	r25, r25
    4a62:	5a 95       	dec	r21
    4a64:	a9 f7       	brne	.-22     	; 0x4a50 <__udivmodhi4_loop>
    4a66:	80 95       	com	r24
    4a68:	90 95       	com	r25
    4a6a:	bc 01       	movw	r22, r24
    4a6c:	cd 01       	movw	r24, r26
    4a6e:	08 95       	ret

00004a70 <__divmodhi4>:
    4a70:	97 fb       	bst	r25, 7
    4a72:	09 2e       	mov	r0, r25
    4a74:	07 26       	eor	r0, r23
    4a76:	0a d0       	rcall	.+20     	; 0x4a8c <__divmodhi4_neg1>
    4a78:	77 fd       	sbrc	r23, 7
    4a7a:	04 d0       	rcall	.+8      	; 0x4a84 <__divmodhi4_neg2>
    4a7c:	e5 df       	rcall	.-54     	; 0x4a48 <__udivmodhi4>
    4a7e:	06 d0       	rcall	.+12     	; 0x4a8c <__divmodhi4_neg1>
    4a80:	00 20       	and	r0, r0
    4a82:	1a f4       	brpl	.+6      	; 0x4a8a <__divmodhi4_exit>

00004a84 <__divmodhi4_neg2>:
    4a84:	70 95       	com	r23
    4a86:	61 95       	neg	r22
    4a88:	7f 4f       	sbci	r23, 0xFF	; 255

00004a8a <__divmodhi4_exit>:
    4a8a:	08 95       	ret

00004a8c <__divmodhi4_neg1>:
    4a8c:	f6 f7       	brtc	.-4      	; 0x4a8a <__divmodhi4_exit>
    4a8e:	90 95       	com	r25
    4a90:	81 95       	neg	r24
    4a92:	9f 4f       	sbci	r25, 0xFF	; 255
    4a94:	08 95       	ret

00004a96 <__udivmodsi4>:
    4a96:	a1 e2       	ldi	r26, 0x21	; 33
    4a98:	1a 2e       	mov	r1, r26
    4a9a:	aa 1b       	sub	r26, r26
    4a9c:	bb 1b       	sub	r27, r27
    4a9e:	fd 01       	movw	r30, r26
    4aa0:	0d c0       	rjmp	.+26     	; 0x4abc <__udivmodsi4_ep>

00004aa2 <__udivmodsi4_loop>:
    4aa2:	aa 1f       	adc	r26, r26
    4aa4:	bb 1f       	adc	r27, r27
    4aa6:	ee 1f       	adc	r30, r30
    4aa8:	ff 1f       	adc	r31, r31
    4aaa:	a2 17       	cp	r26, r18
    4aac:	b3 07       	cpc	r27, r19
    4aae:	e4 07       	cpc	r30, r20
    4ab0:	f5 07       	cpc	r31, r21
    4ab2:	20 f0       	brcs	.+8      	; 0x4abc <__udivmodsi4_ep>
    4ab4:	a2 1b       	sub	r26, r18
    4ab6:	b3 0b       	sbc	r27, r19
    4ab8:	e4 0b       	sbc	r30, r20
    4aba:	f5 0b       	sbc	r31, r21

00004abc <__udivmodsi4_ep>:
    4abc:	66 1f       	adc	r22, r22
    4abe:	77 1f       	adc	r23, r23
    4ac0:	88 1f       	adc	r24, r24
    4ac2:	99 1f       	adc	r25, r25
    4ac4:	1a 94       	dec	r1
    4ac6:	69 f7       	brne	.-38     	; 0x4aa2 <__udivmodsi4_loop>
    4ac8:	60 95       	com	r22
    4aca:	70 95       	com	r23
    4acc:	80 95       	com	r24
    4ace:	90 95       	com	r25
    4ad0:	9b 01       	movw	r18, r22
    4ad2:	ac 01       	movw	r20, r24
    4ad4:	bd 01       	movw	r22, r26
    4ad6:	cf 01       	movw	r24, r30
    4ad8:	08 95       	ret

00004ada <__prologue_saves__>:
    4ada:	2f 92       	push	r2
    4adc:	3f 92       	push	r3
    4ade:	4f 92       	push	r4
    4ae0:	5f 92       	push	r5
    4ae2:	6f 92       	push	r6
    4ae4:	7f 92       	push	r7
    4ae6:	8f 92       	push	r8
    4ae8:	9f 92       	push	r9
    4aea:	af 92       	push	r10
    4aec:	bf 92       	push	r11
    4aee:	cf 92       	push	r12
    4af0:	df 92       	push	r13
    4af2:	ef 92       	push	r14
    4af4:	ff 92       	push	r15
    4af6:	0f 93       	push	r16
    4af8:	1f 93       	push	r17
    4afa:	cf 93       	push	r28
    4afc:	df 93       	push	r29
    4afe:	cd b7       	in	r28, 0x3d	; 61
    4b00:	de b7       	in	r29, 0x3e	; 62
    4b02:	ca 1b       	sub	r28, r26
    4b04:	db 0b       	sbc	r29, r27
    4b06:	0f b6       	in	r0, 0x3f	; 63
    4b08:	f8 94       	cli
    4b0a:	de bf       	out	0x3e, r29	; 62
    4b0c:	0f be       	out	0x3f, r0	; 63
    4b0e:	cd bf       	out	0x3d, r28	; 61
    4b10:	09 94       	ijmp

00004b12 <__epilogue_restores__>:
    4b12:	2a 88       	ldd	r2, Y+18	; 0x12
    4b14:	39 88       	ldd	r3, Y+17	; 0x11
    4b16:	48 88       	ldd	r4, Y+16	; 0x10
    4b18:	5f 84       	ldd	r5, Y+15	; 0x0f
    4b1a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4b1c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4b1e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4b20:	9b 84       	ldd	r9, Y+11	; 0x0b
    4b22:	aa 84       	ldd	r10, Y+10	; 0x0a
    4b24:	b9 84       	ldd	r11, Y+9	; 0x09
    4b26:	c8 84       	ldd	r12, Y+8	; 0x08
    4b28:	df 80       	ldd	r13, Y+7	; 0x07
    4b2a:	ee 80       	ldd	r14, Y+6	; 0x06
    4b2c:	fd 80       	ldd	r15, Y+5	; 0x05
    4b2e:	0c 81       	ldd	r16, Y+4	; 0x04
    4b30:	1b 81       	ldd	r17, Y+3	; 0x03
    4b32:	aa 81       	ldd	r26, Y+2	; 0x02
    4b34:	b9 81       	ldd	r27, Y+1	; 0x01
    4b36:	ce 0f       	add	r28, r30
    4b38:	d1 1d       	adc	r29, r1
    4b3a:	0f b6       	in	r0, 0x3f	; 63
    4b3c:	f8 94       	cli
    4b3e:	de bf       	out	0x3e, r29	; 62
    4b40:	0f be       	out	0x3f, r0	; 63
    4b42:	cd bf       	out	0x3d, r28	; 61
    4b44:	ed 01       	movw	r28, r26
    4b46:	08 95       	ret

00004b48 <__tablejump2__>:
    4b48:	ee 0f       	add	r30, r30
    4b4a:	ff 1f       	adc	r31, r31

00004b4c <__tablejump__>:
    4b4c:	05 90       	lpm	r0, Z+
    4b4e:	f4 91       	lpm	r31, Z+
    4b50:	e0 2d       	mov	r30, r0
    4b52:	09 94       	ijmp
    4b54:	11 f4       	brne	.+4      	; 0x4b5a <__tablejump__+0xe>
    4b56:	0e f4       	brtc	.+2      	; 0x4b5a <__tablejump__+0xe>
    4b58:	4d c0       	rjmp	.+154    	; 0x4bf4 <__fp_nan>
    4b5a:	3e c0       	rjmp	.+124    	; 0x4bd8 <__fp_mpack>

00004b5c <sqrt>:
    4b5c:	5d d0       	rcall	.+186    	; 0x4c18 <__fp_splitA>
    4b5e:	d0 f3       	brcs	.-12     	; 0x4b54 <__tablejump__+0x8>
    4b60:	99 23       	and	r25, r25
    4b62:	d9 f3       	breq	.-10     	; 0x4b5a <__tablejump__+0xe>
    4b64:	ce f3       	brts	.-14     	; 0x4b58 <__tablejump__+0xc>
    4b66:	9f 57       	subi	r25, 0x7F	; 127
    4b68:	55 0b       	sbc	r21, r21
    4b6a:	87 ff       	sbrs	r24, 7
    4b6c:	46 d0       	rcall	.+140    	; 0x4bfa <__fp_norm2>
    4b6e:	00 24       	eor	r0, r0
    4b70:	a0 e6       	ldi	r26, 0x60	; 96
    4b72:	40 ea       	ldi	r20, 0xA0	; 160
    4b74:	90 01       	movw	r18, r0
    4b76:	80 58       	subi	r24, 0x80	; 128
    4b78:	56 95       	lsr	r21
    4b7a:	97 95       	ror	r25
    4b7c:	28 f4       	brcc	.+10     	; 0x4b88 <sqrt+0x2c>
    4b7e:	80 5c       	subi	r24, 0xC0	; 192
    4b80:	66 0f       	add	r22, r22
    4b82:	77 1f       	adc	r23, r23
    4b84:	88 1f       	adc	r24, r24
    4b86:	20 f0       	brcs	.+8      	; 0x4b90 <sqrt+0x34>
    4b88:	26 17       	cp	r18, r22
    4b8a:	37 07       	cpc	r19, r23
    4b8c:	48 07       	cpc	r20, r24
    4b8e:	30 f4       	brcc	.+12     	; 0x4b9c <sqrt+0x40>
    4b90:	62 1b       	sub	r22, r18
    4b92:	73 0b       	sbc	r23, r19
    4b94:	84 0b       	sbc	r24, r20
    4b96:	20 29       	or	r18, r0
    4b98:	31 29       	or	r19, r1
    4b9a:	4a 2b       	or	r20, r26
    4b9c:	a6 95       	lsr	r26
    4b9e:	17 94       	ror	r1
    4ba0:	07 94       	ror	r0
    4ba2:	20 25       	eor	r18, r0
    4ba4:	31 25       	eor	r19, r1
    4ba6:	4a 27       	eor	r20, r26
    4ba8:	58 f7       	brcc	.-42     	; 0x4b80 <sqrt+0x24>
    4baa:	66 0f       	add	r22, r22
    4bac:	77 1f       	adc	r23, r23
    4bae:	88 1f       	adc	r24, r24
    4bb0:	20 f0       	brcs	.+8      	; 0x4bba <sqrt+0x5e>
    4bb2:	26 17       	cp	r18, r22
    4bb4:	37 07       	cpc	r19, r23
    4bb6:	48 07       	cpc	r20, r24
    4bb8:	30 f4       	brcc	.+12     	; 0x4bc6 <sqrt+0x6a>
    4bba:	62 0b       	sbc	r22, r18
    4bbc:	73 0b       	sbc	r23, r19
    4bbe:	84 0b       	sbc	r24, r20
    4bc0:	20 0d       	add	r18, r0
    4bc2:	31 1d       	adc	r19, r1
    4bc4:	41 1d       	adc	r20, r1
    4bc6:	a0 95       	com	r26
    4bc8:	81 f7       	brne	.-32     	; 0x4baa <sqrt+0x4e>
    4bca:	b9 01       	movw	r22, r18
    4bcc:	84 2f       	mov	r24, r20
    4bce:	91 58       	subi	r25, 0x81	; 129
    4bd0:	88 0f       	add	r24, r24
    4bd2:	96 95       	lsr	r25
    4bd4:	87 95       	ror	r24
    4bd6:	08 95       	ret

00004bd8 <__fp_mpack>:
    4bd8:	9f 3f       	cpi	r25, 0xFF	; 255
    4bda:	31 f0       	breq	.+12     	; 0x4be8 <__fp_mpack_finite+0xc>

00004bdc <__fp_mpack_finite>:
    4bdc:	91 50       	subi	r25, 0x01	; 1
    4bde:	20 f4       	brcc	.+8      	; 0x4be8 <__fp_mpack_finite+0xc>
    4be0:	87 95       	ror	r24
    4be2:	77 95       	ror	r23
    4be4:	67 95       	ror	r22
    4be6:	b7 95       	ror	r27
    4be8:	88 0f       	add	r24, r24
    4bea:	91 1d       	adc	r25, r1
    4bec:	96 95       	lsr	r25
    4bee:	87 95       	ror	r24
    4bf0:	97 f9       	bld	r25, 7
    4bf2:	08 95       	ret

00004bf4 <__fp_nan>:
    4bf4:	9f ef       	ldi	r25, 0xFF	; 255
    4bf6:	80 ec       	ldi	r24, 0xC0	; 192
    4bf8:	08 95       	ret

00004bfa <__fp_norm2>:
    4bfa:	91 50       	subi	r25, 0x01	; 1
    4bfc:	50 40       	sbci	r21, 0x00	; 0
    4bfe:	66 0f       	add	r22, r22
    4c00:	77 1f       	adc	r23, r23
    4c02:	88 1f       	adc	r24, r24
    4c04:	d2 f7       	brpl	.-12     	; 0x4bfa <__fp_norm2>
    4c06:	08 95       	ret

00004c08 <__fp_split3>:
    4c08:	57 fd       	sbrc	r21, 7
    4c0a:	90 58       	subi	r25, 0x80	; 128
    4c0c:	44 0f       	add	r20, r20
    4c0e:	55 1f       	adc	r21, r21
    4c10:	59 f0       	breq	.+22     	; 0x4c28 <__fp_splitA+0x10>
    4c12:	5f 3f       	cpi	r21, 0xFF	; 255
    4c14:	71 f0       	breq	.+28     	; 0x4c32 <__fp_splitA+0x1a>
    4c16:	47 95       	ror	r20

00004c18 <__fp_splitA>:
    4c18:	88 0f       	add	r24, r24
    4c1a:	97 fb       	bst	r25, 7
    4c1c:	99 1f       	adc	r25, r25
    4c1e:	61 f0       	breq	.+24     	; 0x4c38 <__fp_splitA+0x20>
    4c20:	9f 3f       	cpi	r25, 0xFF	; 255
    4c22:	79 f0       	breq	.+30     	; 0x4c42 <__fp_splitA+0x2a>
    4c24:	87 95       	ror	r24
    4c26:	08 95       	ret
    4c28:	12 16       	cp	r1, r18
    4c2a:	13 06       	cpc	r1, r19
    4c2c:	14 06       	cpc	r1, r20
    4c2e:	55 1f       	adc	r21, r21
    4c30:	f2 cf       	rjmp	.-28     	; 0x4c16 <__fp_split3+0xe>
    4c32:	46 95       	lsr	r20
    4c34:	f1 df       	rcall	.-30     	; 0x4c18 <__fp_splitA>
    4c36:	08 c0       	rjmp	.+16     	; 0x4c48 <__fp_splitA+0x30>
    4c38:	16 16       	cp	r1, r22
    4c3a:	17 06       	cpc	r1, r23
    4c3c:	18 06       	cpc	r1, r24
    4c3e:	99 1f       	adc	r25, r25
    4c40:	f1 cf       	rjmp	.-30     	; 0x4c24 <__fp_splitA+0xc>
    4c42:	86 95       	lsr	r24
    4c44:	71 05       	cpc	r23, r1
    4c46:	61 05       	cpc	r22, r1
    4c48:	08 94       	sec
    4c4a:	08 95       	ret

00004c4c <malloc>:
    4c4c:	cf 93       	push	r28
    4c4e:	df 93       	push	r29
    4c50:	82 30       	cpi	r24, 0x02	; 2
    4c52:	91 05       	cpc	r25, r1
    4c54:	10 f4       	brcc	.+4      	; 0x4c5a <malloc+0xe>
    4c56:	82 e0       	ldi	r24, 0x02	; 2
    4c58:	90 e0       	ldi	r25, 0x00	; 0
    4c5a:	e0 91 ea 03 	lds	r30, 0x03EA
    4c5e:	f0 91 eb 03 	lds	r31, 0x03EB
    4c62:	40 e0       	ldi	r20, 0x00	; 0
    4c64:	50 e0       	ldi	r21, 0x00	; 0
    4c66:	20 e0       	ldi	r18, 0x00	; 0
    4c68:	30 e0       	ldi	r19, 0x00	; 0
    4c6a:	26 c0       	rjmp	.+76     	; 0x4cb8 <malloc+0x6c>
    4c6c:	60 81       	ld	r22, Z
    4c6e:	71 81       	ldd	r23, Z+1	; 0x01
    4c70:	68 17       	cp	r22, r24
    4c72:	79 07       	cpc	r23, r25
    4c74:	e0 f0       	brcs	.+56     	; 0x4cae <malloc+0x62>
    4c76:	68 17       	cp	r22, r24
    4c78:	79 07       	cpc	r23, r25
    4c7a:	81 f4       	brne	.+32     	; 0x4c9c <malloc+0x50>
    4c7c:	82 81       	ldd	r24, Z+2	; 0x02
    4c7e:	93 81       	ldd	r25, Z+3	; 0x03
    4c80:	21 15       	cp	r18, r1
    4c82:	31 05       	cpc	r19, r1
    4c84:	31 f0       	breq	.+12     	; 0x4c92 <malloc+0x46>
    4c86:	d9 01       	movw	r26, r18
    4c88:	13 96       	adiw	r26, 0x03	; 3
    4c8a:	9c 93       	st	X, r25
    4c8c:	8e 93       	st	-X, r24
    4c8e:	12 97       	sbiw	r26, 0x02	; 2
    4c90:	2b c0       	rjmp	.+86     	; 0x4ce8 <malloc+0x9c>
    4c92:	90 93 eb 03 	sts	0x03EB, r25
    4c96:	80 93 ea 03 	sts	0x03EA, r24
    4c9a:	26 c0       	rjmp	.+76     	; 0x4ce8 <malloc+0x9c>
    4c9c:	41 15       	cp	r20, r1
    4c9e:	51 05       	cpc	r21, r1
    4ca0:	19 f0       	breq	.+6      	; 0x4ca8 <malloc+0x5c>
    4ca2:	64 17       	cp	r22, r20
    4ca4:	75 07       	cpc	r23, r21
    4ca6:	18 f4       	brcc	.+6      	; 0x4cae <malloc+0x62>
    4ca8:	ab 01       	movw	r20, r22
    4caa:	e9 01       	movw	r28, r18
    4cac:	df 01       	movw	r26, r30
    4cae:	9f 01       	movw	r18, r30
    4cb0:	72 81       	ldd	r23, Z+2	; 0x02
    4cb2:	63 81       	ldd	r22, Z+3	; 0x03
    4cb4:	e7 2f       	mov	r30, r23
    4cb6:	f6 2f       	mov	r31, r22
    4cb8:	30 97       	sbiw	r30, 0x00	; 0
    4cba:	c1 f6       	brne	.-80     	; 0x4c6c <malloc+0x20>
    4cbc:	41 15       	cp	r20, r1
    4cbe:	51 05       	cpc	r21, r1
    4cc0:	01 f1       	breq	.+64     	; 0x4d02 <malloc+0xb6>
    4cc2:	48 1b       	sub	r20, r24
    4cc4:	59 0b       	sbc	r21, r25
    4cc6:	44 30       	cpi	r20, 0x04	; 4
    4cc8:	51 05       	cpc	r21, r1
    4cca:	80 f4       	brcc	.+32     	; 0x4cec <malloc+0xa0>
    4ccc:	12 96       	adiw	r26, 0x02	; 2
    4cce:	8d 91       	ld	r24, X+
    4cd0:	9c 91       	ld	r25, X
    4cd2:	13 97       	sbiw	r26, 0x03	; 3
    4cd4:	20 97       	sbiw	r28, 0x00	; 0
    4cd6:	19 f0       	breq	.+6      	; 0x4cde <malloc+0x92>
    4cd8:	9b 83       	std	Y+3, r25	; 0x03
    4cda:	8a 83       	std	Y+2, r24	; 0x02
    4cdc:	04 c0       	rjmp	.+8      	; 0x4ce6 <malloc+0x9a>
    4cde:	90 93 eb 03 	sts	0x03EB, r25
    4ce2:	80 93 ea 03 	sts	0x03EA, r24
    4ce6:	fd 01       	movw	r30, r26
    4ce8:	32 96       	adiw	r30, 0x02	; 2
    4cea:	46 c0       	rjmp	.+140    	; 0x4d78 <malloc+0x12c>
    4cec:	fd 01       	movw	r30, r26
    4cee:	e4 0f       	add	r30, r20
    4cf0:	f5 1f       	adc	r31, r21
    4cf2:	81 93       	st	Z+, r24
    4cf4:	91 93       	st	Z+, r25
    4cf6:	42 50       	subi	r20, 0x02	; 2
    4cf8:	50 40       	sbci	r21, 0x00	; 0
    4cfa:	11 96       	adiw	r26, 0x01	; 1
    4cfc:	5c 93       	st	X, r21
    4cfe:	4e 93       	st	-X, r20
    4d00:	3b c0       	rjmp	.+118    	; 0x4d78 <malloc+0x12c>
    4d02:	20 91 e8 03 	lds	r18, 0x03E8
    4d06:	30 91 e9 03 	lds	r19, 0x03E9
    4d0a:	21 15       	cp	r18, r1
    4d0c:	31 05       	cpc	r19, r1
    4d0e:	41 f4       	brne	.+16     	; 0x4d20 <malloc+0xd4>
    4d10:	20 91 e8 02 	lds	r18, 0x02E8
    4d14:	30 91 e9 02 	lds	r19, 0x02E9
    4d18:	30 93 e9 03 	sts	0x03E9, r19
    4d1c:	20 93 e8 03 	sts	0x03E8, r18
    4d20:	20 91 ea 02 	lds	r18, 0x02EA
    4d24:	30 91 eb 02 	lds	r19, 0x02EB
    4d28:	21 15       	cp	r18, r1
    4d2a:	31 05       	cpc	r19, r1
    4d2c:	41 f4       	brne	.+16     	; 0x4d3e <malloc+0xf2>
    4d2e:	2d b7       	in	r18, 0x3d	; 61
    4d30:	3e b7       	in	r19, 0x3e	; 62
    4d32:	40 91 e6 02 	lds	r20, 0x02E6
    4d36:	50 91 e7 02 	lds	r21, 0x02E7
    4d3a:	24 1b       	sub	r18, r20
    4d3c:	35 0b       	sbc	r19, r21
    4d3e:	e0 91 e8 03 	lds	r30, 0x03E8
    4d42:	f0 91 e9 03 	lds	r31, 0x03E9
    4d46:	e2 17       	cp	r30, r18
    4d48:	f3 07       	cpc	r31, r19
    4d4a:	a0 f4       	brcc	.+40     	; 0x4d74 <malloc+0x128>
    4d4c:	2e 1b       	sub	r18, r30
    4d4e:	3f 0b       	sbc	r19, r31
    4d50:	28 17       	cp	r18, r24
    4d52:	39 07       	cpc	r19, r25
    4d54:	78 f0       	brcs	.+30     	; 0x4d74 <malloc+0x128>
    4d56:	ac 01       	movw	r20, r24
    4d58:	4e 5f       	subi	r20, 0xFE	; 254
    4d5a:	5f 4f       	sbci	r21, 0xFF	; 255
    4d5c:	24 17       	cp	r18, r20
    4d5e:	35 07       	cpc	r19, r21
    4d60:	48 f0       	brcs	.+18     	; 0x4d74 <malloc+0x128>
    4d62:	4e 0f       	add	r20, r30
    4d64:	5f 1f       	adc	r21, r31
    4d66:	50 93 e9 03 	sts	0x03E9, r21
    4d6a:	40 93 e8 03 	sts	0x03E8, r20
    4d6e:	81 93       	st	Z+, r24
    4d70:	91 93       	st	Z+, r25
    4d72:	02 c0       	rjmp	.+4      	; 0x4d78 <malloc+0x12c>
    4d74:	e0 e0       	ldi	r30, 0x00	; 0
    4d76:	f0 e0       	ldi	r31, 0x00	; 0
    4d78:	cf 01       	movw	r24, r30
    4d7a:	df 91       	pop	r29
    4d7c:	cf 91       	pop	r28
    4d7e:	08 95       	ret

00004d80 <free>:
    4d80:	cf 93       	push	r28
    4d82:	df 93       	push	r29
    4d84:	00 97       	sbiw	r24, 0x00	; 0
    4d86:	09 f4       	brne	.+2      	; 0x4d8a <free+0xa>
    4d88:	91 c0       	rjmp	.+290    	; 0x4eac <free+0x12c>
    4d8a:	fc 01       	movw	r30, r24
    4d8c:	32 97       	sbiw	r30, 0x02	; 2
    4d8e:	13 82       	std	Z+3, r1	; 0x03
    4d90:	12 82       	std	Z+2, r1	; 0x02
    4d92:	60 91 ea 03 	lds	r22, 0x03EA
    4d96:	70 91 eb 03 	lds	r23, 0x03EB
    4d9a:	61 15       	cp	r22, r1
    4d9c:	71 05       	cpc	r23, r1
    4d9e:	81 f4       	brne	.+32     	; 0x4dc0 <free+0x40>
    4da0:	20 81       	ld	r18, Z
    4da2:	31 81       	ldd	r19, Z+1	; 0x01
    4da4:	28 0f       	add	r18, r24
    4da6:	39 1f       	adc	r19, r25
    4da8:	80 91 e8 03 	lds	r24, 0x03E8
    4dac:	90 91 e9 03 	lds	r25, 0x03E9
    4db0:	82 17       	cp	r24, r18
    4db2:	93 07       	cpc	r25, r19
    4db4:	99 f5       	brne	.+102    	; 0x4e1c <free+0x9c>
    4db6:	f0 93 e9 03 	sts	0x03E9, r31
    4dba:	e0 93 e8 03 	sts	0x03E8, r30
    4dbe:	76 c0       	rjmp	.+236    	; 0x4eac <free+0x12c>
    4dc0:	db 01       	movw	r26, r22
    4dc2:	80 e0       	ldi	r24, 0x00	; 0
    4dc4:	90 e0       	ldi	r25, 0x00	; 0
    4dc6:	02 c0       	rjmp	.+4      	; 0x4dcc <free+0x4c>
    4dc8:	cd 01       	movw	r24, r26
    4dca:	d9 01       	movw	r26, r18
    4dcc:	ae 17       	cp	r26, r30
    4dce:	bf 07       	cpc	r27, r31
    4dd0:	48 f4       	brcc	.+18     	; 0x4de4 <free+0x64>
    4dd2:	12 96       	adiw	r26, 0x02	; 2
    4dd4:	2d 91       	ld	r18, X+
    4dd6:	3c 91       	ld	r19, X
    4dd8:	13 97       	sbiw	r26, 0x03	; 3
    4dda:	21 15       	cp	r18, r1
    4ddc:	31 05       	cpc	r19, r1
    4dde:	a1 f7       	brne	.-24     	; 0x4dc8 <free+0x48>
    4de0:	cd 01       	movw	r24, r26
    4de2:	21 c0       	rjmp	.+66     	; 0x4e26 <free+0xa6>
    4de4:	b3 83       	std	Z+3, r27	; 0x03
    4de6:	a2 83       	std	Z+2, r26	; 0x02
    4de8:	ef 01       	movw	r28, r30
    4dea:	49 91       	ld	r20, Y+
    4dec:	59 91       	ld	r21, Y+
    4dee:	9e 01       	movw	r18, r28
    4df0:	24 0f       	add	r18, r20
    4df2:	35 1f       	adc	r19, r21
    4df4:	a2 17       	cp	r26, r18
    4df6:	b3 07       	cpc	r27, r19
    4df8:	79 f4       	brne	.+30     	; 0x4e18 <free+0x98>
    4dfa:	2d 91       	ld	r18, X+
    4dfc:	3c 91       	ld	r19, X
    4dfe:	11 97       	sbiw	r26, 0x01	; 1
    4e00:	24 0f       	add	r18, r20
    4e02:	35 1f       	adc	r19, r21
    4e04:	2e 5f       	subi	r18, 0xFE	; 254
    4e06:	3f 4f       	sbci	r19, 0xFF	; 255
    4e08:	31 83       	std	Z+1, r19	; 0x01
    4e0a:	20 83       	st	Z, r18
    4e0c:	12 96       	adiw	r26, 0x02	; 2
    4e0e:	2d 91       	ld	r18, X+
    4e10:	3c 91       	ld	r19, X
    4e12:	13 97       	sbiw	r26, 0x03	; 3
    4e14:	33 83       	std	Z+3, r19	; 0x03
    4e16:	22 83       	std	Z+2, r18	; 0x02
    4e18:	00 97       	sbiw	r24, 0x00	; 0
    4e1a:	29 f4       	brne	.+10     	; 0x4e26 <free+0xa6>
    4e1c:	f0 93 eb 03 	sts	0x03EB, r31
    4e20:	e0 93 ea 03 	sts	0x03EA, r30
    4e24:	43 c0       	rjmp	.+134    	; 0x4eac <free+0x12c>
    4e26:	dc 01       	movw	r26, r24
    4e28:	13 96       	adiw	r26, 0x03	; 3
    4e2a:	fc 93       	st	X, r31
    4e2c:	ee 93       	st	-X, r30
    4e2e:	12 97       	sbiw	r26, 0x02	; 2
    4e30:	4d 91       	ld	r20, X+
    4e32:	5d 91       	ld	r21, X+
    4e34:	a4 0f       	add	r26, r20
    4e36:	b5 1f       	adc	r27, r21
    4e38:	ea 17       	cp	r30, r26
    4e3a:	fb 07       	cpc	r31, r27
    4e3c:	69 f4       	brne	.+26     	; 0x4e58 <free+0xd8>
    4e3e:	20 81       	ld	r18, Z
    4e40:	31 81       	ldd	r19, Z+1	; 0x01
    4e42:	24 0f       	add	r18, r20
    4e44:	35 1f       	adc	r19, r21
    4e46:	2e 5f       	subi	r18, 0xFE	; 254
    4e48:	3f 4f       	sbci	r19, 0xFF	; 255
    4e4a:	ec 01       	movw	r28, r24
    4e4c:	39 83       	std	Y+1, r19	; 0x01
    4e4e:	28 83       	st	Y, r18
    4e50:	22 81       	ldd	r18, Z+2	; 0x02
    4e52:	33 81       	ldd	r19, Z+3	; 0x03
    4e54:	3b 83       	std	Y+3, r19	; 0x03
    4e56:	2a 83       	std	Y+2, r18	; 0x02
    4e58:	e0 e0       	ldi	r30, 0x00	; 0
    4e5a:	f0 e0       	ldi	r31, 0x00	; 0
    4e5c:	02 c0       	rjmp	.+4      	; 0x4e62 <free+0xe2>
    4e5e:	fb 01       	movw	r30, r22
    4e60:	bc 01       	movw	r22, r24
    4e62:	db 01       	movw	r26, r22
    4e64:	12 96       	adiw	r26, 0x02	; 2
    4e66:	8d 91       	ld	r24, X+
    4e68:	9c 91       	ld	r25, X
    4e6a:	13 97       	sbiw	r26, 0x03	; 3
    4e6c:	00 97       	sbiw	r24, 0x00	; 0
    4e6e:	b9 f7       	brne	.-18     	; 0x4e5e <free+0xde>
    4e70:	9b 01       	movw	r18, r22
    4e72:	2e 5f       	subi	r18, 0xFE	; 254
    4e74:	3f 4f       	sbci	r19, 0xFF	; 255
    4e76:	8d 91       	ld	r24, X+
    4e78:	9c 91       	ld	r25, X
    4e7a:	11 97       	sbiw	r26, 0x01	; 1
    4e7c:	82 0f       	add	r24, r18
    4e7e:	93 1f       	adc	r25, r19
    4e80:	40 91 e8 03 	lds	r20, 0x03E8
    4e84:	50 91 e9 03 	lds	r21, 0x03E9
    4e88:	48 17       	cp	r20, r24
    4e8a:	59 07       	cpc	r21, r25
    4e8c:	79 f4       	brne	.+30     	; 0x4eac <free+0x12c>
    4e8e:	30 97       	sbiw	r30, 0x00	; 0
    4e90:	29 f4       	brne	.+10     	; 0x4e9c <free+0x11c>
    4e92:	10 92 eb 03 	sts	0x03EB, r1
    4e96:	10 92 ea 03 	sts	0x03EA, r1
    4e9a:	02 c0       	rjmp	.+4      	; 0x4ea0 <free+0x120>
    4e9c:	13 82       	std	Z+3, r1	; 0x03
    4e9e:	12 82       	std	Z+2, r1	; 0x02
    4ea0:	22 50       	subi	r18, 0x02	; 2
    4ea2:	30 40       	sbci	r19, 0x00	; 0
    4ea4:	30 93 e9 03 	sts	0x03E9, r19
    4ea8:	20 93 e8 03 	sts	0x03E8, r18
    4eac:	df 91       	pop	r29
    4eae:	cf 91       	pop	r28
    4eb0:	08 95       	ret

00004eb2 <realloc>:
    4eb2:	a0 e0       	ldi	r26, 0x00	; 0
    4eb4:	b0 e0       	ldi	r27, 0x00	; 0
    4eb6:	ef e5       	ldi	r30, 0x5F	; 95
    4eb8:	f7 e2       	ldi	r31, 0x27	; 39
    4eba:	0c 94 73 25 	jmp	0x4ae6	; 0x4ae6 <__prologue_saves__+0xc>
    4ebe:	8c 01       	movw	r16, r24
    4ec0:	cb 01       	movw	r24, r22
    4ec2:	01 15       	cp	r16, r1
    4ec4:	11 05       	cpc	r17, r1
    4ec6:	29 f4       	brne	.+10     	; 0x4ed2 <realloc+0x20>
    4ec8:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <malloc>
    4ecc:	08 2f       	mov	r16, r24
    4ece:	19 2f       	mov	r17, r25
    4ed0:	b5 c0       	rjmp	.+362    	; 0x503c <realloc+0x18a>
    4ed2:	d8 01       	movw	r26, r16
    4ed4:	12 97       	sbiw	r26, 0x02	; 2
    4ed6:	98 01       	movw	r18, r16
    4ed8:	26 0f       	add	r18, r22
    4eda:	37 1f       	adc	r19, r23
    4edc:	2a 17       	cp	r18, r26
    4ede:	3b 07       	cpc	r19, r27
    4ee0:	08 f4       	brcc	.+2      	; 0x4ee4 <realloc+0x32>
    4ee2:	aa c0       	rjmp	.+340    	; 0x5038 <realloc+0x186>
    4ee4:	ed 90       	ld	r14, X+
    4ee6:	fc 90       	ld	r15, X
    4ee8:	11 97       	sbiw	r26, 0x01	; 1
    4eea:	e6 16       	cp	r14, r22
    4eec:	f7 06       	cpc	r15, r23
    4eee:	d0 f0       	brcs	.+52     	; 0x4f24 <realloc+0x72>
    4ef0:	45 e0       	ldi	r20, 0x05	; 5
    4ef2:	e4 16       	cp	r14, r20
    4ef4:	f1 04       	cpc	r15, r1
    4ef6:	08 f4       	brcc	.+2      	; 0x4efa <realloc+0x48>
    4ef8:	a1 c0       	rjmp	.+322    	; 0x503c <realloc+0x18a>
    4efa:	a7 01       	movw	r20, r14
    4efc:	44 50       	subi	r20, 0x04	; 4
    4efe:	50 40       	sbci	r21, 0x00	; 0
    4f00:	46 17       	cp	r20, r22
    4f02:	57 07       	cpc	r21, r23
    4f04:	08 f4       	brcc	.+2      	; 0x4f08 <realloc+0x56>
    4f06:	9a c0       	rjmp	.+308    	; 0x503c <realloc+0x18a>
    4f08:	a7 01       	movw	r20, r14
    4f0a:	42 50       	subi	r20, 0x02	; 2
    4f0c:	50 40       	sbci	r21, 0x00	; 0
    4f0e:	46 1b       	sub	r20, r22
    4f10:	57 0b       	sbc	r21, r23
    4f12:	f9 01       	movw	r30, r18
    4f14:	41 93       	st	Z+, r20
    4f16:	51 93       	st	Z+, r21
    4f18:	6d 93       	st	X+, r22
    4f1a:	7c 93       	st	X, r23
    4f1c:	cf 01       	movw	r24, r30
    4f1e:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <free>
    4f22:	8c c0       	rjmp	.+280    	; 0x503c <realloc+0x18a>
    4f24:	5b 01       	movw	r10, r22
    4f26:	ae 18       	sub	r10, r14
    4f28:	bf 08       	sbc	r11, r15
    4f2a:	48 01       	movw	r8, r16
    4f2c:	8e 0c       	add	r8, r14
    4f2e:	9f 1c       	adc	r9, r15
    4f30:	e0 91 ea 03 	lds	r30, 0x03EA
    4f34:	f0 91 eb 03 	lds	r31, 0x03EB
    4f38:	cc 24       	eor	r12, r12
    4f3a:	dd 24       	eor	r13, r13
    4f3c:	c0 e0       	ldi	r28, 0x00	; 0
    4f3e:	d0 e0       	ldi	r29, 0x00	; 0
    4f40:	41 c0       	rjmp	.+130    	; 0x4fc4 <realloc+0x112>
    4f42:	e8 15       	cp	r30, r8
    4f44:	f9 05       	cpc	r31, r9
    4f46:	99 f5       	brne	.+102    	; 0x4fae <realloc+0xfc>
    4f48:	60 81       	ld	r22, Z
    4f4a:	71 81       	ldd	r23, Z+1	; 0x01
    4f4c:	ab 01       	movw	r20, r22
    4f4e:	4e 5f       	subi	r20, 0xFE	; 254
    4f50:	5f 4f       	sbci	r21, 0xFF	; 255
    4f52:	4a 15       	cp	r20, r10
    4f54:	5b 05       	cpc	r21, r11
    4f56:	58 f1       	brcs	.+86     	; 0x4fae <realloc+0xfc>
    4f58:	ab 01       	movw	r20, r22
    4f5a:	4a 19       	sub	r20, r10
    4f5c:	5b 09       	sbc	r21, r11
    4f5e:	cc 24       	eor	r12, r12
    4f60:	dd 24       	eor	r13, r13
    4f62:	68 94       	set
    4f64:	c1 f8       	bld	r12, 1
    4f66:	c4 0e       	add	r12, r20
    4f68:	d5 1e       	adc	r13, r21
    4f6a:	82 80       	ldd	r8, Z+2	; 0x02
    4f6c:	a3 80       	ldd	r10, Z+3	; 0x03
    4f6e:	e5 e0       	ldi	r30, 0x05	; 5
    4f70:	ce 16       	cp	r12, r30
    4f72:	d1 04       	cpc	r13, r1
    4f74:	48 f0       	brcs	.+18     	; 0x4f88 <realloc+0xd6>
    4f76:	f9 01       	movw	r30, r18
    4f78:	82 82       	std	Z+2, r8	; 0x02
    4f7a:	a3 82       	std	Z+3, r10	; 0x03
    4f7c:	51 83       	std	Z+1, r21	; 0x01
    4f7e:	40 83       	st	Z, r20
    4f80:	11 96       	adiw	r26, 0x01	; 1
    4f82:	9c 93       	st	X, r25
    4f84:	8e 93       	st	-X, r24
    4f86:	09 c0       	rjmp	.+18     	; 0x4f9a <realloc+0xe8>
    4f88:	c7 01       	movw	r24, r14
    4f8a:	02 96       	adiw	r24, 0x02	; 2
    4f8c:	86 0f       	add	r24, r22
    4f8e:	97 1f       	adc	r25, r23
    4f90:	11 96       	adiw	r26, 0x01	; 1
    4f92:	9c 93       	st	X, r25
    4f94:	8e 93       	st	-X, r24
    4f96:	e8 2d       	mov	r30, r8
    4f98:	fa 2d       	mov	r31, r10
    4f9a:	20 97       	sbiw	r28, 0x00	; 0
    4f9c:	19 f0       	breq	.+6      	; 0x4fa4 <realloc+0xf2>
    4f9e:	fb 83       	std	Y+3, r31	; 0x03
    4fa0:	ea 83       	std	Y+2, r30	; 0x02
    4fa2:	4c c0       	rjmp	.+152    	; 0x503c <realloc+0x18a>
    4fa4:	f0 93 eb 03 	sts	0x03EB, r31
    4fa8:	e0 93 ea 03 	sts	0x03EA, r30
    4fac:	47 c0       	rjmp	.+142    	; 0x503c <realloc+0x18a>
    4fae:	40 81       	ld	r20, Z
    4fb0:	51 81       	ldd	r21, Z+1	; 0x01
    4fb2:	c4 16       	cp	r12, r20
    4fb4:	d5 06       	cpc	r13, r21
    4fb6:	08 f4       	brcc	.+2      	; 0x4fba <realloc+0x108>
    4fb8:	6a 01       	movw	r12, r20
    4fba:	ef 01       	movw	r28, r30
    4fbc:	52 81       	ldd	r21, Z+2	; 0x02
    4fbe:	43 81       	ldd	r20, Z+3	; 0x03
    4fc0:	e5 2f       	mov	r30, r21
    4fc2:	f4 2f       	mov	r31, r20
    4fc4:	30 97       	sbiw	r30, 0x00	; 0
    4fc6:	09 f0       	breq	.+2      	; 0x4fca <realloc+0x118>
    4fc8:	bc cf       	rjmp	.-136    	; 0x4f42 <realloc+0x90>
    4fca:	40 91 e8 03 	lds	r20, 0x03E8
    4fce:	50 91 e9 03 	lds	r21, 0x03E9
    4fd2:	48 15       	cp	r20, r8
    4fd4:	59 05       	cpc	r21, r9
    4fd6:	e9 f4       	brne	.+58     	; 0x5012 <realloc+0x160>
    4fd8:	c8 16       	cp	r12, r24
    4fda:	d9 06       	cpc	r13, r25
    4fdc:	d0 f4       	brcc	.+52     	; 0x5012 <realloc+0x160>
    4fde:	40 91 ea 02 	lds	r20, 0x02EA
    4fe2:	50 91 eb 02 	lds	r21, 0x02EB
    4fe6:	41 15       	cp	r20, r1
    4fe8:	51 05       	cpc	r21, r1
    4fea:	41 f4       	brne	.+16     	; 0x4ffc <realloc+0x14a>
    4fec:	4d b7       	in	r20, 0x3d	; 61
    4fee:	5e b7       	in	r21, 0x3e	; 62
    4ff0:	60 91 e6 02 	lds	r22, 0x02E6
    4ff4:	70 91 e7 02 	lds	r23, 0x02E7
    4ff8:	46 1b       	sub	r20, r22
    4ffa:	57 0b       	sbc	r21, r23
    4ffc:	24 17       	cp	r18, r20
    4ffe:	35 07       	cpc	r19, r21
    5000:	d8 f4       	brcc	.+54     	; 0x5038 <realloc+0x186>
    5002:	30 93 e9 03 	sts	0x03E9, r19
    5006:	20 93 e8 03 	sts	0x03E8, r18
    500a:	11 96       	adiw	r26, 0x01	; 1
    500c:	9c 93       	st	X, r25
    500e:	8e 93       	st	-X, r24
    5010:	15 c0       	rjmp	.+42     	; 0x503c <realloc+0x18a>
    5012:	0e 94 26 26 	call	0x4c4c	; 0x4c4c <malloc>
    5016:	c8 2e       	mov	r12, r24
    5018:	e6 01       	movw	r28, r12
    501a:	6e 01       	movw	r12, r28
    501c:	d9 2e       	mov	r13, r25
    501e:	e6 01       	movw	r28, r12
    5020:	20 97       	sbiw	r28, 0x00	; 0
    5022:	51 f0       	breq	.+20     	; 0x5038 <realloc+0x186>
    5024:	8c 2d       	mov	r24, r12
    5026:	b8 01       	movw	r22, r16
    5028:	a7 01       	movw	r20, r14
    502a:	0e 94 63 28 	call	0x50c6	; 0x50c6 <memcpy>
    502e:	c8 01       	movw	r24, r16
    5030:	0e 94 c0 26 	call	0x4d80	; 0x4d80 <free>
    5034:	86 01       	movw	r16, r12
    5036:	02 c0       	rjmp	.+4      	; 0x503c <realloc+0x18a>
    5038:	00 e0       	ldi	r16, 0x00	; 0
    503a:	10 e0       	ldi	r17, 0x00	; 0
    503c:	c8 01       	movw	r24, r16
    503e:	cd b7       	in	r28, 0x3d	; 61
    5040:	de b7       	in	r29, 0x3e	; 62
    5042:	ec e0       	ldi	r30, 0x0C	; 12
    5044:	0c 94 8f 25 	jmp	0x4b1e	; 0x4b1e <__epilogue_restores__+0xc>

00005048 <atol>:
    5048:	1f 93       	push	r17
    504a:	fc 01       	movw	r30, r24
    504c:	99 27       	eor	r25, r25
    504e:	88 27       	eor	r24, r24
    5050:	bc 01       	movw	r22, r24
    5052:	e8 94       	clt
    5054:	11 91       	ld	r17, Z+
    5056:	10 32       	cpi	r17, 0x20	; 32
    5058:	e9 f3       	breq	.-6      	; 0x5054 <atol+0xc>
    505a:	19 30       	cpi	r17, 0x09	; 9
    505c:	10 f0       	brcs	.+4      	; 0x5062 <atol+0x1a>
    505e:	1e 30       	cpi	r17, 0x0E	; 14
    5060:	c8 f3       	brcs	.-14     	; 0x5054 <atol+0xc>
    5062:	1b 32       	cpi	r17, 0x2B	; 43
    5064:	51 f0       	breq	.+20     	; 0x507a <atol+0x32>
    5066:	1d 32       	cpi	r17, 0x2D	; 45
    5068:	49 f4       	brne	.+18     	; 0x507c <atol+0x34>
    506a:	68 94       	set
    506c:	06 c0       	rjmp	.+12     	; 0x507a <atol+0x32>
    506e:	0e 94 30 29 	call	0x5260	; 0x5260 <__mulsi_const_10>
    5072:	61 0f       	add	r22, r17
    5074:	71 1d       	adc	r23, r1
    5076:	81 1d       	adc	r24, r1
    5078:	91 1d       	adc	r25, r1
    507a:	11 91       	ld	r17, Z+
    507c:	10 53       	subi	r17, 0x30	; 48
    507e:	1a 30       	cpi	r17, 0x0A	; 10
    5080:	b0 f3       	brcs	.-20     	; 0x506e <atol+0x26>
    5082:	3e f4       	brtc	.+14     	; 0x5092 <atol+0x4a>
    5084:	90 95       	com	r25
    5086:	80 95       	com	r24
    5088:	70 95       	com	r23
    508a:	61 95       	neg	r22
    508c:	7f 4f       	sbci	r23, 0xFF	; 255
    508e:	8f 4f       	sbci	r24, 0xFF	; 255
    5090:	9f 4f       	sbci	r25, 0xFF	; 255
    5092:	1f 91       	pop	r17
    5094:	08 95       	ret

00005096 <isspace>:
    5096:	91 11       	cpse	r25, r1
    5098:	33 c1       	rjmp	.+614    	; 0x5300 <__ctype_isfalse>
    509a:	80 32       	cpi	r24, 0x20	; 32
    509c:	19 f0       	breq	.+6      	; 0x50a4 <isspace+0xe>
    509e:	89 50       	subi	r24, 0x09	; 9
    50a0:	85 50       	subi	r24, 0x05	; 5
    50a2:	d0 f7       	brcc	.-12     	; 0x5098 <isspace+0x2>
    50a4:	08 95       	ret

000050a6 <tolower>:
    50a6:	91 11       	cpse	r25, r1
    50a8:	08 95       	ret
    50aa:	81 54       	subi	r24, 0x41	; 65
    50ac:	8a 51       	subi	r24, 0x1A	; 26
    50ae:	08 f4       	brcc	.+2      	; 0x50b2 <tolower+0xc>
    50b0:	80 5e       	subi	r24, 0xE0	; 224
    50b2:	85 5a       	subi	r24, 0xA5	; 165
    50b4:	08 95       	ret

000050b6 <toupper>:
    50b6:	91 11       	cpse	r25, r1
    50b8:	08 95       	ret
    50ba:	81 56       	subi	r24, 0x61	; 97
    50bc:	8a 51       	subi	r24, 0x1A	; 26
    50be:	08 f4       	brcc	.+2      	; 0x50c2 <toupper+0xc>
    50c0:	80 52       	subi	r24, 0x20	; 32
    50c2:	85 58       	subi	r24, 0x85	; 133
    50c4:	08 95       	ret

000050c6 <memcpy>:
    50c6:	fb 01       	movw	r30, r22
    50c8:	dc 01       	movw	r26, r24
    50ca:	02 c0       	rjmp	.+4      	; 0x50d0 <memcpy+0xa>
    50cc:	01 90       	ld	r0, Z+
    50ce:	0d 92       	st	X+, r0
    50d0:	41 50       	subi	r20, 0x01	; 1
    50d2:	50 40       	sbci	r21, 0x00	; 0
    50d4:	d8 f7       	brcc	.-10     	; 0x50cc <memcpy+0x6>
    50d6:	08 95       	ret

000050d8 <memmove>:
    50d8:	68 17       	cp	r22, r24
    50da:	79 07       	cpc	r23, r25
    50dc:	68 f4       	brcc	.+26     	; 0x50f8 <memmove+0x20>
    50de:	fb 01       	movw	r30, r22
    50e0:	dc 01       	movw	r26, r24
    50e2:	e4 0f       	add	r30, r20
    50e4:	f5 1f       	adc	r31, r21
    50e6:	a4 0f       	add	r26, r20
    50e8:	b5 1f       	adc	r27, r21
    50ea:	02 c0       	rjmp	.+4      	; 0x50f0 <memmove+0x18>
    50ec:	02 90       	ld	r0, -Z
    50ee:	0e 92       	st	-X, r0
    50f0:	41 50       	subi	r20, 0x01	; 1
    50f2:	50 40       	sbci	r21, 0x00	; 0
    50f4:	d8 f7       	brcc	.-10     	; 0x50ec <memmove+0x14>
    50f6:	08 95       	ret
    50f8:	0c 94 63 28 	jmp	0x50c6	; 0x50c6 <memcpy>

000050fc <strchr>:
    50fc:	fc 01       	movw	r30, r24
    50fe:	81 91       	ld	r24, Z+
    5100:	86 17       	cp	r24, r22
    5102:	21 f0       	breq	.+8      	; 0x510c <strchr+0x10>
    5104:	88 23       	and	r24, r24
    5106:	d9 f7       	brne	.-10     	; 0x50fe <strchr+0x2>
    5108:	99 27       	eor	r25, r25
    510a:	08 95       	ret
    510c:	31 97       	sbiw	r30, 0x01	; 1
    510e:	cf 01       	movw	r24, r30
    5110:	08 95       	ret

00005112 <strcmp>:
    5112:	fb 01       	movw	r30, r22
    5114:	dc 01       	movw	r26, r24
    5116:	8d 91       	ld	r24, X+
    5118:	01 90       	ld	r0, Z+
    511a:	80 19       	sub	r24, r0
    511c:	01 10       	cpse	r0, r1
    511e:	d9 f3       	breq	.-10     	; 0x5116 <strcmp+0x4>
    5120:	99 0b       	sbc	r25, r25
    5122:	08 95       	ret

00005124 <strcpy>:
    5124:	fb 01       	movw	r30, r22
    5126:	dc 01       	movw	r26, r24
    5128:	01 90       	ld	r0, Z+
    512a:	0d 92       	st	X+, r0
    512c:	00 20       	and	r0, r0
    512e:	e1 f7       	brne	.-8      	; 0x5128 <strcpy+0x4>
    5130:	08 95       	ret

00005132 <strncmp>:
    5132:	fb 01       	movw	r30, r22
    5134:	dc 01       	movw	r26, r24
    5136:	41 50       	subi	r20, 0x01	; 1
    5138:	50 40       	sbci	r21, 0x00	; 0
    513a:	30 f0       	brcs	.+12     	; 0x5148 <strncmp+0x16>
    513c:	8d 91       	ld	r24, X+
    513e:	01 90       	ld	r0, Z+
    5140:	80 19       	sub	r24, r0
    5142:	19 f4       	brne	.+6      	; 0x514a <strncmp+0x18>
    5144:	00 20       	and	r0, r0
    5146:	b9 f7       	brne	.-18     	; 0x5136 <strncmp+0x4>
    5148:	88 1b       	sub	r24, r24
    514a:	99 0b       	sbc	r25, r25
    514c:	08 95       	ret

0000514e <strncpy>:
    514e:	fb 01       	movw	r30, r22
    5150:	dc 01       	movw	r26, r24
    5152:	41 50       	subi	r20, 0x01	; 1
    5154:	50 40       	sbci	r21, 0x00	; 0
    5156:	48 f0       	brcs	.+18     	; 0x516a <strncpy+0x1c>
    5158:	01 90       	ld	r0, Z+
    515a:	0d 92       	st	X+, r0
    515c:	00 20       	and	r0, r0
    515e:	c9 f7       	brne	.-14     	; 0x5152 <strncpy+0x4>
    5160:	01 c0       	rjmp	.+2      	; 0x5164 <strncpy+0x16>
    5162:	1d 92       	st	X+, r1
    5164:	41 50       	subi	r20, 0x01	; 1
    5166:	50 40       	sbci	r21, 0x00	; 0
    5168:	e0 f7       	brcc	.-8      	; 0x5162 <strncpy+0x14>
    516a:	08 95       	ret

0000516c <strrchr>:
    516c:	fc 01       	movw	r30, r24
    516e:	81 e0       	ldi	r24, 0x01	; 1
    5170:	90 e0       	ldi	r25, 0x00	; 0
    5172:	01 90       	ld	r0, Z+
    5174:	06 16       	cp	r0, r22
    5176:	09 f4       	brne	.+2      	; 0x517a <strrchr+0xe>
    5178:	cf 01       	movw	r24, r30
    517a:	00 20       	and	r0, r0
    517c:	d1 f7       	brne	.-12     	; 0x5172 <strrchr+0x6>
    517e:	01 97       	sbiw	r24, 0x01	; 1
    5180:	08 95       	ret

00005182 <strstr>:
    5182:	fb 01       	movw	r30, r22
    5184:	51 91       	ld	r21, Z+
    5186:	55 23       	and	r21, r21
    5188:	a9 f0       	breq	.+42     	; 0x51b4 <strstr+0x32>
    518a:	bf 01       	movw	r22, r30
    518c:	dc 01       	movw	r26, r24
    518e:	4d 91       	ld	r20, X+
    5190:	45 17       	cp	r20, r21
    5192:	41 11       	cpse	r20, r1
    5194:	e1 f7       	brne	.-8      	; 0x518e <strstr+0xc>
    5196:	59 f4       	brne	.+22     	; 0x51ae <strstr+0x2c>
    5198:	cd 01       	movw	r24, r26
    519a:	01 90       	ld	r0, Z+
    519c:	00 20       	and	r0, r0
    519e:	49 f0       	breq	.+18     	; 0x51b2 <strstr+0x30>
    51a0:	4d 91       	ld	r20, X+
    51a2:	40 15       	cp	r20, r0
    51a4:	41 11       	cpse	r20, r1
    51a6:	c9 f3       	breq	.-14     	; 0x519a <strstr+0x18>
    51a8:	fb 01       	movw	r30, r22
    51aa:	41 11       	cpse	r20, r1
    51ac:	ef cf       	rjmp	.-34     	; 0x518c <strstr+0xa>
    51ae:	81 e0       	ldi	r24, 0x01	; 1
    51b0:	90 e0       	ldi	r25, 0x00	; 0
    51b2:	01 97       	sbiw	r24, 0x01	; 1
    51b4:	08 95       	ret

000051b6 <itoa>:
    51b6:	fb 01       	movw	r30, r22
    51b8:	9f 01       	movw	r18, r30
    51ba:	e8 94       	clt
    51bc:	42 30       	cpi	r20, 0x02	; 2
    51be:	c4 f0       	brlt	.+48     	; 0x51f0 <itoa+0x3a>
    51c0:	45 32       	cpi	r20, 0x25	; 37
    51c2:	b4 f4       	brge	.+44     	; 0x51f0 <itoa+0x3a>
    51c4:	4a 30       	cpi	r20, 0x0A	; 10
    51c6:	29 f4       	brne	.+10     	; 0x51d2 <itoa+0x1c>
    51c8:	97 fb       	bst	r25, 7
    51ca:	1e f4       	brtc	.+6      	; 0x51d2 <itoa+0x1c>
    51cc:	90 95       	com	r25
    51ce:	81 95       	neg	r24
    51d0:	9f 4f       	sbci	r25, 0xFF	; 255
    51d2:	64 2f       	mov	r22, r20
    51d4:	77 27       	eor	r23, r23
    51d6:	0e 94 24 25 	call	0x4a48	; 0x4a48 <__udivmodhi4>
    51da:	80 5d       	subi	r24, 0xD0	; 208
    51dc:	8a 33       	cpi	r24, 0x3A	; 58
    51de:	0c f0       	brlt	.+2      	; 0x51e2 <itoa+0x2c>
    51e0:	89 5d       	subi	r24, 0xD9	; 217
    51e2:	81 93       	st	Z+, r24
    51e4:	cb 01       	movw	r24, r22
    51e6:	00 97       	sbiw	r24, 0x00	; 0
    51e8:	a1 f7       	brne	.-24     	; 0x51d2 <itoa+0x1c>
    51ea:	16 f4       	brtc	.+4      	; 0x51f0 <itoa+0x3a>
    51ec:	5d e2       	ldi	r21, 0x2D	; 45
    51ee:	51 93       	st	Z+, r21
    51f0:	10 82       	st	Z, r1
    51f2:	c9 01       	movw	r24, r18
    51f4:	0c 94 83 29 	jmp	0x5306	; 0x5306 <strrev>

000051f8 <ltoa>:
    51f8:	fa 01       	movw	r30, r20
    51fa:	cf 93       	push	r28
    51fc:	ff 93       	push	r31
    51fe:	ef 93       	push	r30
    5200:	22 30       	cpi	r18, 0x02	; 2
    5202:	44 f1       	brlt	.+80     	; 0x5254 <ltoa+0x5c>
    5204:	25 32       	cpi	r18, 0x25	; 37
    5206:	34 f5       	brge	.+76     	; 0x5254 <ltoa+0x5c>
    5208:	c2 2f       	mov	r28, r18
    520a:	e8 94       	clt
    520c:	ca 30       	cpi	r28, 0x0A	; 10
    520e:	49 f4       	brne	.+18     	; 0x5222 <ltoa+0x2a>
    5210:	97 fb       	bst	r25, 7
    5212:	3e f4       	brtc	.+14     	; 0x5222 <ltoa+0x2a>
    5214:	90 95       	com	r25
    5216:	80 95       	com	r24
    5218:	70 95       	com	r23
    521a:	61 95       	neg	r22
    521c:	7f 4f       	sbci	r23, 0xFF	; 255
    521e:	8f 4f       	sbci	r24, 0xFF	; 255
    5220:	9f 4f       	sbci	r25, 0xFF	; 255
    5222:	2c 2f       	mov	r18, r28
    5224:	33 27       	eor	r19, r19
    5226:	44 27       	eor	r20, r20
    5228:	55 27       	eor	r21, r21
    522a:	ff 93       	push	r31
    522c:	ef 93       	push	r30
    522e:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__udivmodsi4>
    5232:	ef 91       	pop	r30
    5234:	ff 91       	pop	r31
    5236:	60 5d       	subi	r22, 0xD0	; 208
    5238:	6a 33       	cpi	r22, 0x3A	; 58
    523a:	0c f0       	brlt	.+2      	; 0x523e <ltoa+0x46>
    523c:	69 5d       	subi	r22, 0xD9	; 217
    523e:	61 93       	st	Z+, r22
    5240:	b9 01       	movw	r22, r18
    5242:	ca 01       	movw	r24, r20
    5244:	60 50       	subi	r22, 0x00	; 0
    5246:	70 40       	sbci	r23, 0x00	; 0
    5248:	80 40       	sbci	r24, 0x00	; 0
    524a:	90 40       	sbci	r25, 0x00	; 0
    524c:	51 f7       	brne	.-44     	; 0x5222 <ltoa+0x2a>
    524e:	16 f4       	brtc	.+4      	; 0x5254 <ltoa+0x5c>
    5250:	cd e2       	ldi	r28, 0x2D	; 45
    5252:	c1 93       	st	Z+, r28
    5254:	10 82       	st	Z, r1
    5256:	8f 91       	pop	r24
    5258:	9f 91       	pop	r25
    525a:	cf 91       	pop	r28
    525c:	0c 94 83 29 	jmp	0x5306	; 0x5306 <strrev>

00005260 <__mulsi_const_10>:
    5260:	59 2f       	mov	r21, r25
    5262:	48 2f       	mov	r20, r24
    5264:	37 2f       	mov	r19, r23
    5266:	26 2f       	mov	r18, r22
    5268:	66 0f       	add	r22, r22
    526a:	77 1f       	adc	r23, r23
    526c:	88 1f       	adc	r24, r24
    526e:	99 1f       	adc	r25, r25
    5270:	66 0f       	add	r22, r22
    5272:	77 1f       	adc	r23, r23
    5274:	88 1f       	adc	r24, r24
    5276:	99 1f       	adc	r25, r25
    5278:	62 0f       	add	r22, r18
    527a:	73 1f       	adc	r23, r19
    527c:	84 1f       	adc	r24, r20
    527e:	95 1f       	adc	r25, r21
    5280:	66 0f       	add	r22, r22
    5282:	77 1f       	adc	r23, r23
    5284:	88 1f       	adc	r24, r24
    5286:	99 1f       	adc	r25, r25
    5288:	08 95       	ret

0000528a <ultoa>:
    528a:	fa 01       	movw	r30, r20
    528c:	cf 93       	push	r28
    528e:	ff 93       	push	r31
    5290:	ef 93       	push	r30
    5292:	22 30       	cpi	r18, 0x02	; 2
    5294:	cc f0       	brlt	.+50     	; 0x52c8 <ultoa+0x3e>
    5296:	25 32       	cpi	r18, 0x25	; 37
    5298:	bc f4       	brge	.+46     	; 0x52c8 <ultoa+0x3e>
    529a:	c2 2f       	mov	r28, r18
    529c:	2c 2f       	mov	r18, r28
    529e:	33 27       	eor	r19, r19
    52a0:	44 27       	eor	r20, r20
    52a2:	55 27       	eor	r21, r21
    52a4:	ff 93       	push	r31
    52a6:	ef 93       	push	r30
    52a8:	0e 94 4b 25 	call	0x4a96	; 0x4a96 <__udivmodsi4>
    52ac:	ef 91       	pop	r30
    52ae:	ff 91       	pop	r31
    52b0:	60 5d       	subi	r22, 0xD0	; 208
    52b2:	6a 33       	cpi	r22, 0x3A	; 58
    52b4:	0c f0       	brlt	.+2      	; 0x52b8 <ultoa+0x2e>
    52b6:	69 5d       	subi	r22, 0xD9	; 217
    52b8:	61 93       	st	Z+, r22
    52ba:	b9 01       	movw	r22, r18
    52bc:	ca 01       	movw	r24, r20
    52be:	60 50       	subi	r22, 0x00	; 0
    52c0:	70 40       	sbci	r23, 0x00	; 0
    52c2:	80 40       	sbci	r24, 0x00	; 0
    52c4:	90 40       	sbci	r25, 0x00	; 0
    52c6:	51 f7       	brne	.-44     	; 0x529c <ultoa+0x12>
    52c8:	10 82       	st	Z, r1
    52ca:	8f 91       	pop	r24
    52cc:	9f 91       	pop	r25
    52ce:	cf 91       	pop	r28
    52d0:	0c 94 83 29 	jmp	0x5306	; 0x5306 <strrev>

000052d4 <utoa>:
    52d4:	fb 01       	movw	r30, r22
    52d6:	9f 01       	movw	r18, r30
    52d8:	42 30       	cpi	r20, 0x02	; 2
    52da:	74 f0       	brlt	.+28     	; 0x52f8 <utoa+0x24>
    52dc:	45 32       	cpi	r20, 0x25	; 37
    52de:	64 f4       	brge	.+24     	; 0x52f8 <utoa+0x24>
    52e0:	64 2f       	mov	r22, r20
    52e2:	77 27       	eor	r23, r23
    52e4:	0e 94 24 25 	call	0x4a48	; 0x4a48 <__udivmodhi4>
    52e8:	80 5d       	subi	r24, 0xD0	; 208
    52ea:	8a 33       	cpi	r24, 0x3A	; 58
    52ec:	0c f0       	brlt	.+2      	; 0x52f0 <utoa+0x1c>
    52ee:	89 5d       	subi	r24, 0xD9	; 217
    52f0:	81 93       	st	Z+, r24
    52f2:	cb 01       	movw	r24, r22
    52f4:	00 97       	sbiw	r24, 0x00	; 0
    52f6:	a1 f7       	brne	.-24     	; 0x52e0 <utoa+0xc>
    52f8:	10 82       	st	Z, r1
    52fa:	c9 01       	movw	r24, r18
    52fc:	0c 94 83 29 	jmp	0x5306	; 0x5306 <strrev>

00005300 <__ctype_isfalse>:
    5300:	99 27       	eor	r25, r25
    5302:	88 27       	eor	r24, r24

00005304 <__ctype_istrue>:
    5304:	08 95       	ret

00005306 <strrev>:
    5306:	dc 01       	movw	r26, r24
    5308:	fc 01       	movw	r30, r24
    530a:	67 2f       	mov	r22, r23
    530c:	71 91       	ld	r23, Z+
    530e:	77 23       	and	r23, r23
    5310:	e1 f7       	brne	.-8      	; 0x530a <strrev+0x4>
    5312:	32 97       	sbiw	r30, 0x02	; 2
    5314:	04 c0       	rjmp	.+8      	; 0x531e <strrev+0x18>
    5316:	7c 91       	ld	r23, X
    5318:	6d 93       	st	X+, r22
    531a:	70 83       	st	Z, r23
    531c:	62 91       	ld	r22, -Z
    531e:	ae 17       	cp	r26, r30
    5320:	bf 07       	cpc	r27, r31
    5322:	c8 f3       	brcs	.-14     	; 0x5316 <strrev+0x10>
    5324:	08 95       	ret

00005326 <_exit>:
    5326:	f8 94       	cli

00005328 <__stop_program>:
    5328:	ff cf       	rjmp	.-2      	; 0x5328 <__stop_program>
