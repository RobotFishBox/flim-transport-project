
ProjectController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000222  00800100  0000561a  000056ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000561a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dd  00800322  00800322  000058d0  2**0
                  ALLOC
  3 .stab         000097f8  00000000  00000000  000058d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008d69  00000000  00000000  0000f0c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__vector_7>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 eb 0d 	jmp	0x1bd6	; 0x1bd6 <__vector_11>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 d3 24 	jmp	0x49a6	; 0x49a6 <__vector_18>
      4c:	0c 94 04 25 	jmp	0x4a08	; 0x4a08 <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	5f 26       	eor	r5, r31

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	13 e0       	ldi	r17, 0x03	; 3
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	ea e1       	ldi	r30, 0x1A	; 26
      d8:	f6 e5       	ldi	r31, 0x56	; 86
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a2 32       	cpi	r26, 0x22	; 34
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	13 e0       	ldi	r17, 0x03	; 3
      e8:	a2 e2       	ldi	r26, 0x22	; 34
      ea:	b3 e0       	ldi	r27, 0x03	; 3
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	af 3f       	cpi	r26, 0xFF	; 255
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c4 ec       	ldi	r28, 0xC4	; 196
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	22 97       	sbiw	r28, 0x02	; 2
     100:	fe 01       	movw	r30, r28
     102:	0e 94 1e 27 	call	0x4e3c	; 0x4e3c <__tablejump__>
     106:	c2 3c       	cpi	r28, 0xC2	; 194
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <main>
     110:	0c 94 0b 2b 	jmp	0x5616	; 0x5616 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_ZN12AccelStepper4stepEh>:
     118:	dc 01       	movw	r26, r24
     11a:	12 96       	adiw	r26, 0x02	; 2
     11c:	2c 91       	ld	r18, X
     11e:	12 97       	sbiw	r26, 0x02	; 2
     120:	21 30       	cpi	r18, 0x01	; 1
     122:	79 f0       	breq	.+30     	; 0x142 <_ZN12AccelStepper4stepEh+0x2a>
     124:	21 30       	cpi	r18, 0x01	; 1
     126:	28 f0       	brcs	.+10     	; 0x132 <_ZN12AccelStepper4stepEh+0x1a>
     128:	22 30       	cpi	r18, 0x02	; 2
     12a:	99 f0       	breq	.+38     	; 0x152 <_ZN12AccelStepper4stepEh+0x3a>
     12c:	24 30       	cpi	r18, 0x04	; 4
     12e:	01 f5       	brne	.+64     	; 0x170 <_ZN12AccelStepper4stepEh+0x58>
     130:	18 c0       	rjmp	.+48     	; 0x162 <_ZN12AccelStepper4stepEh+0x4a>
     132:	dc 01       	movw	r26, r24
     134:	ed 91       	ld	r30, X+
     136:	fc 91       	ld	r31, X
     138:	02 80       	ldd	r0, Z+2	; 0x02
     13a:	f3 81       	ldd	r31, Z+3	; 0x03
     13c:	e0 2d       	mov	r30, r0
     13e:	09 95       	icall
     140:	08 95       	ret
     142:	dc 01       	movw	r26, r24
     144:	ed 91       	ld	r30, X+
     146:	fc 91       	ld	r31, X
     148:	11 97       	sbiw	r26, 0x01	; 1
     14a:	04 80       	ldd	r0, Z+4	; 0x04
     14c:	f5 81       	ldd	r31, Z+5	; 0x05
     14e:	e0 2d       	mov	r30, r0
     150:	06 c0       	rjmp	.+12     	; 0x15e <_ZN12AccelStepper4stepEh+0x46>
     152:	dc 01       	movw	r26, r24
     154:	ed 91       	ld	r30, X+
     156:	fc 91       	ld	r31, X
     158:	06 80       	ldd	r0, Z+6	; 0x06
     15a:	f7 81       	ldd	r31, Z+7	; 0x07
     15c:	e0 2d       	mov	r30, r0
     15e:	09 95       	icall
     160:	08 95       	ret
     162:	dc 01       	movw	r26, r24
     164:	ed 91       	ld	r30, X+
     166:	fc 91       	ld	r31, X
     168:	00 84       	ldd	r0, Z+8	; 0x08
     16a:	f1 85       	ldd	r31, Z+9	; 0x09
     16c:	e0 2d       	mov	r30, r0
     16e:	09 95       	icall
     170:	08 95       	ret

00000172 <_ZN12AccelStepper5step0Ev>:
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	ec 01       	movw	r28, r24
     178:	6f 85       	ldd	r22, Y+15	; 0x0f
     17a:	78 89       	ldd	r23, Y+16	; 0x10
     17c:	89 89       	ldd	r24, Y+17	; 0x11
     17e:	9a 89       	ldd	r25, Y+18	; 0x12
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	a9 01       	movw	r20, r18
     186:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gtsf2>
     18a:	18 16       	cp	r1, r24
     18c:	1c f4       	brge	.+6      	; 0x194 <_ZN12AccelStepper5step0Ev+0x22>
     18e:	eb a1       	ldd	r30, Y+35	; 0x23
     190:	fc a1       	ldd	r31, Y+36	; 0x24
     192:	02 c0       	rjmp	.+4      	; 0x198 <_ZN12AccelStepper5step0Ev+0x26>
     194:	ed a1       	ldd	r30, Y+37	; 0x25
     196:	fe a1       	ldd	r31, Y+38	; 0x26
     198:	09 95       	icall
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	08 95       	ret

000001a0 <_ZN12AccelStepper5step4Eh>:
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	ec 01       	movw	r28, r24
     1a6:	61 30       	cpi	r22, 0x01	; 1
     1a8:	71 f0       	breq	.+28     	; 0x1c6 <_ZN12AccelStepper5step4Eh+0x26>
     1aa:	61 30       	cpi	r22, 0x01	; 1
     1ac:	28 f0       	brcs	.+10     	; 0x1b8 <_ZN12AccelStepper5step4Eh+0x18>
     1ae:	62 30       	cpi	r22, 0x02	; 2
     1b0:	c9 f0       	breq	.+50     	; 0x1e4 <_ZN12AccelStepper5step4Eh+0x44>
     1b2:	63 30       	cpi	r22, 0x03	; 3
     1b4:	71 f5       	brne	.+92     	; 0x212 <_ZN12AccelStepper5step4Eh+0x72>
     1b6:	1d c0       	rjmp	.+58     	; 0x1f2 <_ZN12AccelStepper5step4Eh+0x52>
     1b8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ba:	61 e0       	ldi	r22, 0x01	; 1
     1bc:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     1c0:	8c 81       	ldd	r24, Y+4	; 0x04
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	06 c0       	rjmp	.+12     	; 0x1d2 <_ZN12AccelStepper5step4Eh+0x32>
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     1ce:	8c 81       	ldd	r24, Y+4	; 0x04
     1d0:	61 e0       	ldi	r22, 0x01	; 1
     1d2:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     1d6:	8d 81       	ldd	r24, Y+5	; 0x05
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     1de:	8e 81       	ldd	r24, Y+6	; 0x06
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	15 c0       	rjmp	.+42     	; 0x20e <_ZN12AccelStepper5step4Eh+0x6e>
     1e4:	8b 81       	ldd	r24, Y+3	; 0x03
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     1ec:	8c 81       	ldd	r24, Y+4	; 0x04
     1ee:	61 e0       	ldi	r22, 0x01	; 1
     1f0:	06 c0       	rjmp	.+12     	; 0x1fe <_ZN12AccelStepper5step4Eh+0x5e>
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     1fa:	8c 81       	ldd	r24, Y+4	; 0x04
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     202:	8d 81       	ldd	r24, Y+5	; 0x05
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     20a:	8e 81       	ldd	r24, Y+6	; 0x06
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <_ZN12AccelStepper5step2Eh>:
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	ec 01       	movw	r28, r24
     21e:	61 30       	cpi	r22, 0x01	; 1
     220:	51 f0       	breq	.+20     	; 0x236 <_ZN12AccelStepper5step2Eh+0x1e>
     222:	61 30       	cpi	r22, 0x01	; 1
     224:	28 f0       	brcs	.+10     	; 0x230 <_ZN12AccelStepper5step2Eh+0x18>
     226:	62 30       	cpi	r22, 0x02	; 2
     228:	69 f0       	breq	.+26     	; 0x244 <_ZN12AccelStepper5step2Eh+0x2c>
     22a:	63 30       	cpi	r22, 0x03	; 3
     22c:	b1 f4       	brne	.+44     	; 0x25a <_ZN12AccelStepper5step2Eh+0x42>
     22e:	0d c0       	rjmp	.+26     	; 0x24a <_ZN12AccelStepper5step2Eh+0x32>
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	02 c0       	rjmp	.+4      	; 0x23a <_ZN12AccelStepper5step2Eh+0x22>
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	61 e0       	ldi	r22, 0x01	; 1
     23a:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     23e:	8c 81       	ldd	r24, Y+4	; 0x04
     240:	61 e0       	ldi	r22, 0x01	; 1
     242:	09 c0       	rjmp	.+18     	; 0x256 <_ZN12AccelStepper5step2Eh+0x3e>
     244:	8b 81       	ldd	r24, Y+3	; 0x03
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	02 c0       	rjmp	.+4      	; 0x24e <_ZN12AccelStepper5step2Eh+0x36>
     24a:	8b 81       	ldd	r24, Y+3	; 0x03
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     252:	8c 81       	ldd	r24, Y+4	; 0x04
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <_ZN12AccelStepper5step1Eh>:
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	6f 85       	ldd	r22, Y+15	; 0x0f
     26c:	78 89       	ldd	r23, Y+16	; 0x10
     26e:	89 89       	ldd	r24, Y+17	; 0x11
     270:	9a 89       	ldd	r25, Y+18	; 0x12
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	a9 01       	movw	r20, r18
     278:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gtsf2>
     27c:	18 16       	cp	r1, r24
     27e:	0c f0       	brlt	.+2      	; 0x282 <_ZN12AccelStepper5step1Eh+0x22>
     280:	10 e0       	ldi	r17, 0x00	; 0
     282:	8c 81       	ldd	r24, Y+4	; 0x04
     284:	61 2f       	mov	r22, r17
     286:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     28a:	8b 81       	ldd	r24, Y+3	; 0x03
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <delayMicroseconds>
     29a:	8b 81       	ldd	r24, Y+3	; 0x03
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	08 95       	ret

000002aa <_ZN12AccelStepper12desiredSpeedEv>:
     2aa:	af 92       	push	r10
     2ac:	bf 92       	push	r11
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
     2c0:	6b 85       	ldd	r22, Y+11	; 0x0b
     2c2:	7c 85       	ldd	r23, Y+12	; 0x0c
     2c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     2c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     2c8:	2f 81       	ldd	r18, Y+7	; 0x07
     2ca:	38 85       	ldd	r19, Y+8	; 0x08
     2cc:	49 85       	ldd	r20, Y+9	; 0x09
     2ce:	5a 85       	ldd	r21, Y+10	; 0x0a
     2d0:	62 1b       	sub	r22, r18
     2d2:	73 0b       	sbc	r23, r19
     2d4:	84 0b       	sbc	r24, r20
     2d6:	95 0b       	sbc	r25, r21
     2d8:	09 f4       	brne	.+2      	; 0x2dc <_ZN12AccelStepper12desiredSpeedEv+0x32>
     2da:	d9 c0       	rjmp	.+434    	; 0x48e <_ZN12AccelStepper12desiredSpeedEv+0x1e4>
     2dc:	16 16       	cp	r1, r22
     2de:	17 06       	cpc	r1, r23
     2e0:	18 06       	cpc	r1, r24
     2e2:	19 06       	cpc	r1, r25
     2e4:	8c f4       	brge	.+34     	; 0x308 <_ZN12AccelStepper12desiredSpeedEv+0x5e>
     2e6:	0e 94 ab 13 	call	0x2756	; 0x2756 <__floatsisf>
     2ea:	9b 01       	movw	r18, r22
     2ec:	ac 01       	movw	r20, r24
     2ee:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__addsf3>
     2f2:	2f 89       	ldd	r18, Y+23	; 0x17
     2f4:	38 8d       	ldd	r19, Y+24	; 0x18
     2f6:	49 8d       	ldd	r20, Y+25	; 0x19
     2f8:	5a 8d       	ldd	r21, Y+26	; 0x1a
     2fa:	0e 94 43 11 	call	0x2286	; 0x2286 <__mulsf3>
     2fe:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <sqrt>
     302:	7b 01       	movw	r14, r22
     304:	8c 01       	movw	r16, r24
     306:	1b c0       	rjmp	.+54     	; 0x33e <_ZN12AccelStepper12desiredSpeedEv+0x94>
     308:	90 95       	com	r25
     30a:	80 95       	com	r24
     30c:	70 95       	com	r23
     30e:	61 95       	neg	r22
     310:	7f 4f       	sbci	r23, 0xFF	; 255
     312:	8f 4f       	sbci	r24, 0xFF	; 255
     314:	9f 4f       	sbci	r25, 0xFF	; 255
     316:	0e 94 ab 13 	call	0x2756	; 0x2756 <__floatsisf>
     31a:	9b 01       	movw	r18, r22
     31c:	ac 01       	movw	r20, r24
     31e:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__addsf3>
     322:	2f 89       	ldd	r18, Y+23	; 0x17
     324:	38 8d       	ldd	r19, Y+24	; 0x18
     326:	49 8d       	ldd	r20, Y+25	; 0x19
     328:	5a 8d       	ldd	r21, Y+26	; 0x1a
     32a:	0e 94 43 11 	call	0x2286	; 0x2286 <__mulsf3>
     32e:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <sqrt>
     332:	7b 01       	movw	r14, r22
     334:	8c 01       	movw	r16, r24
     336:	17 fb       	bst	r17, 7
     338:	10 95       	com	r17
     33a:	17 f9       	bld	r17, 7
     33c:	10 95       	com	r17
     33e:	af 84       	ldd	r10, Y+15	; 0x0f
     340:	b8 88       	ldd	r11, Y+16	; 0x10
     342:	c9 88       	ldd	r12, Y+17	; 0x11
     344:	da 88       	ldd	r13, Y+18	; 0x12
     346:	c8 01       	movw	r24, r16
     348:	b7 01       	movw	r22, r14
     34a:	a6 01       	movw	r20, r12
     34c:	95 01       	movw	r18, r10
     34e:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gtsf2>
     352:	18 16       	cp	r1, r24
     354:	0c f0       	brlt	.+2      	; 0x358 <_ZN12AccelStepper12desiredSpeedEv+0xae>
     356:	45 c0       	rjmp	.+138    	; 0x3e2 <_ZN12AccelStepper12desiredSpeedEv+0x138>
     358:	c6 01       	movw	r24, r12
     35a:	b5 01       	movw	r22, r10
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	a9 01       	movw	r20, r18
     362:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__eqsf2>
     366:	88 23       	and	r24, r24
     368:	59 f4       	brne	.+22     	; 0x380 <_ZN12AccelStepper12desiredSpeedEv+0xd6>
     36a:	2f 89       	ldd	r18, Y+23	; 0x17
     36c:	38 8d       	ldd	r19, Y+24	; 0x18
     36e:	49 8d       	ldd	r20, Y+25	; 0x19
     370:	5a 8d       	ldd	r21, Y+26	; 0x1a
     372:	ca 01       	movw	r24, r20
     374:	b9 01       	movw	r22, r18
     376:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__addsf3>
     37a:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <sqrt>
     37e:	1d c0       	rjmp	.+58     	; 0x3ba <_ZN12AccelStepper12desiredSpeedEv+0x110>
     380:	6f 89       	ldd	r22, Y+23	; 0x17
     382:	78 8d       	ldd	r23, Y+24	; 0x18
     384:	89 8d       	ldd	r24, Y+25	; 0x19
     386:	9a 8d       	ldd	r25, Y+26	; 0x1a
     388:	a6 01       	movw	r20, r12
     38a:	95 01       	movw	r18, r10
     38c:	0e 94 3d 12 	call	0x247a	; 0x247a <__divsf3>
     390:	e6 2e       	mov	r14, r22
     392:	f7 2e       	mov	r15, r23
     394:	08 2f       	mov	r16, r24
     396:	19 2f       	mov	r17, r25
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	a9 01       	movw	r20, r18
     39e:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gtsf2>
     3a2:	18 16       	cp	r1, r24
     3a4:	24 f0       	brlt	.+8      	; 0x3ae <_ZN12AccelStepper12desiredSpeedEv+0x104>
     3a6:	17 fb       	bst	r17, 7
     3a8:	10 95       	com	r17
     3aa:	17 f9       	bld	r17, 7
     3ac:	10 95       	com	r17
     3ae:	c6 01       	movw	r24, r12
     3b0:	b5 01       	movw	r22, r10
     3b2:	a8 01       	movw	r20, r16
     3b4:	97 01       	movw	r18, r14
     3b6:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__addsf3>
     3ba:	c6 2e       	mov	r12, r22
     3bc:	b7 2e       	mov	r11, r23
     3be:	a8 2e       	mov	r10, r24
     3c0:	d9 2e       	mov	r13, r25
     3c2:	eb 88       	ldd	r14, Y+19	; 0x13
     3c4:	fc 88       	ldd	r15, Y+20	; 0x14
     3c6:	0d 89       	ldd	r16, Y+21	; 0x15
     3c8:	1e 89       	ldd	r17, Y+22	; 0x16
     3ca:	a8 01       	movw	r20, r16
     3cc:	97 01       	movw	r18, r14
     3ce:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gtsf2>
     3d2:	18 16       	cp	r1, r24
     3d4:	0c f4       	brge	.+2      	; 0x3d8 <_ZN12AccelStepper12desiredSpeedEv+0x12e>
     3d6:	65 c0       	rjmp	.+202    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3d8:	ec 2c       	mov	r14, r12
     3da:	fb 2c       	mov	r15, r11
     3dc:	0a 2d       	mov	r16, r10
     3de:	1d 2d       	mov	r17, r13
     3e0:	60 c0       	rjmp	.+192    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3e2:	c8 01       	movw	r24, r16
     3e4:	b7 01       	movw	r22, r14
     3e6:	a6 01       	movw	r20, r12
     3e8:	95 01       	movw	r18, r10
     3ea:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__ltsf2>
     3ee:	87 ff       	sbrs	r24, 7
     3f0:	58 c0       	rjmp	.+176    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3f2:	c6 01       	movw	r24, r12
     3f4:	b5 01       	movw	r22, r10
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	a9 01       	movw	r20, r18
     3fc:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <__eqsf2>
     400:	88 23       	and	r24, r24
     402:	89 f4       	brne	.+34     	; 0x426 <_ZN12AccelStepper12desiredSpeedEv+0x17c>
     404:	2f 89       	ldd	r18, Y+23	; 0x17
     406:	38 8d       	ldd	r19, Y+24	; 0x18
     408:	49 8d       	ldd	r20, Y+25	; 0x19
     40a:	5a 8d       	ldd	r21, Y+26	; 0x1a
     40c:	ca 01       	movw	r24, r20
     40e:	b9 01       	movw	r22, r18
     410:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__addsf3>
     414:	0e 94 26 27 	call	0x4e4c	; 0x4e4c <sqrt>
     418:	5b 01       	movw	r10, r22
     41a:	6c 01       	movw	r12, r24
     41c:	d7 fa       	bst	r13, 7
     41e:	d0 94       	com	r13
     420:	d7 f8       	bld	r13, 7
     422:	d0 94       	com	r13
     424:	21 c0       	rjmp	.+66     	; 0x468 <_ZN12AccelStepper12desiredSpeedEv+0x1be>
     426:	6f 89       	ldd	r22, Y+23	; 0x17
     428:	78 8d       	ldd	r23, Y+24	; 0x18
     42a:	89 8d       	ldd	r24, Y+25	; 0x19
     42c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     42e:	a6 01       	movw	r20, r12
     430:	95 01       	movw	r18, r10
     432:	0e 94 3d 12 	call	0x247a	; 0x247a <__divsf3>
     436:	e6 2e       	mov	r14, r22
     438:	f7 2e       	mov	r15, r23
     43a:	08 2f       	mov	r16, r24
     43c:	19 2f       	mov	r17, r25
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	a9 01       	movw	r20, r18
     444:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gtsf2>
     448:	18 16       	cp	r1, r24
     44a:	24 f0       	brlt	.+8      	; 0x454 <_ZN12AccelStepper12desiredSpeedEv+0x1aa>
     44c:	17 fb       	bst	r17, 7
     44e:	10 95       	com	r17
     450:	17 f9       	bld	r17, 7
     452:	10 95       	com	r17
     454:	c6 01       	movw	r24, r12
     456:	b5 01       	movw	r22, r10
     458:	a8 01       	movw	r20, r16
     45a:	97 01       	movw	r18, r14
     45c:	0e 94 12 11 	call	0x2224	; 0x2224 <__subsf3>
     460:	a6 2e       	mov	r10, r22
     462:	b7 2e       	mov	r11, r23
     464:	c8 2e       	mov	r12, r24
     466:	d9 2e       	mov	r13, r25
     468:	eb 88       	ldd	r14, Y+19	; 0x13
     46a:	fc 88       	ldd	r15, Y+20	; 0x14
     46c:	0d 89       	ldd	r16, Y+21	; 0x15
     46e:	1e 89       	ldd	r17, Y+22	; 0x16
     470:	17 fb       	bst	r17, 7
     472:	10 95       	com	r17
     474:	17 f9       	bld	r17, 7
     476:	10 95       	com	r17
     478:	c6 01       	movw	r24, r12
     47a:	b5 01       	movw	r22, r10
     47c:	a8 01       	movw	r20, r16
     47e:	97 01       	movw	r18, r14
     480:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__ltsf2>
     484:	87 fd       	sbrc	r24, 7
     486:	0d c0       	rjmp	.+26     	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     488:	86 01       	movw	r16, r12
     48a:	75 01       	movw	r14, r10
     48c:	0a c0       	rjmp	.+20     	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     48e:	0f 2e       	mov	r0, r31
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	ef 2e       	mov	r14, r31
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	ff 2e       	mov	r15, r31
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	0f 2f       	mov	r16, r31
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	1f 2f       	mov	r17, r31
     4a0:	f0 2d       	mov	r31, r0
     4a2:	6e 2d       	mov	r22, r14
     4a4:	7f 2d       	mov	r23, r15
     4a6:	80 2f       	mov	r24, r16
     4a8:	91 2f       	mov	r25, r17
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	df 90       	pop	r13
     4b8:	cf 90       	pop	r12
     4ba:	bf 90       	pop	r11
     4bc:	af 90       	pop	r10
     4be:	08 95       	ret

000004c0 <_ZN12AccelStepper8runSpeedEv>:
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	ec 01       	movw	r28, r24
     4d6:	0e 94 8b 17 	call	0x2f16	; 0x2f16 <millis>
     4da:	5b 01       	movw	r10, r22
     4dc:	6c 01       	movw	r12, r24
     4de:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4e2:	ad 8d       	ldd	r26, Y+29	; 0x1d
     4e4:	be 8d       	ldd	r27, Y+30	; 0x1e
     4e6:	2f 8d       	ldd	r18, Y+31	; 0x1f
     4e8:	38 a1       	ldd	r19, Y+32	; 0x20
     4ea:	49 a1       	ldd	r20, Y+33	; 0x21
     4ec:	5a a1       	ldd	r21, Y+34	; 0x22
     4ee:	82 0f       	add	r24, r18
     4f0:	93 1f       	adc	r25, r19
     4f2:	a4 1f       	adc	r26, r20
     4f4:	b5 1f       	adc	r27, r21
     4f6:	8a 15       	cp	r24, r10
     4f8:	9b 05       	cpc	r25, r11
     4fa:	ac 05       	cpc	r26, r12
     4fc:	bd 05       	cpc	r27, r13
     4fe:	c0 f5       	brcc	.+112    	; 0x570 <_ZN12AccelStepper8runSpeedEv+0xb0>
     500:	ef 84       	ldd	r14, Y+15	; 0x0f
     502:	f8 88       	ldd	r15, Y+16	; 0x10
     504:	09 89       	ldd	r16, Y+17	; 0x11
     506:	1a 89       	ldd	r17, Y+18	; 0x12
     508:	c8 01       	movw	r24, r16
     50a:	b7 01       	movw	r22, r14
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	a9 01       	movw	r20, r18
     512:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gtsf2>
     516:	18 16       	cp	r1, r24
     518:	44 f4       	brge	.+16     	; 0x52a <_ZN12AccelStepper8runSpeedEv+0x6a>
     51a:	8f 81       	ldd	r24, Y+7	; 0x07
     51c:	98 85       	ldd	r25, Y+8	; 0x08
     51e:	a9 85       	ldd	r26, Y+9	; 0x09
     520:	ba 85       	ldd	r27, Y+10	; 0x0a
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	a1 1d       	adc	r26, r1
     526:	b1 1d       	adc	r27, r1
     528:	10 c0       	rjmp	.+32     	; 0x54a <_ZN12AccelStepper8runSpeedEv+0x8a>
     52a:	c8 01       	movw	r24, r16
     52c:	b7 01       	movw	r22, r14
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	a9 01       	movw	r20, r18
     534:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__ltsf2>
     538:	87 ff       	sbrs	r24, 7
     53a:	0b c0       	rjmp	.+22     	; 0x552 <_ZN12AccelStepper8runSpeedEv+0x92>
     53c:	8f 81       	ldd	r24, Y+7	; 0x07
     53e:	98 85       	ldd	r25, Y+8	; 0x08
     540:	a9 85       	ldd	r26, Y+9	; 0x09
     542:	ba 85       	ldd	r27, Y+10	; 0x0a
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	a1 09       	sbc	r26, r1
     548:	b1 09       	sbc	r27, r1
     54a:	8f 83       	std	Y+7, r24	; 0x07
     54c:	98 87       	std	Y+8, r25	; 0x08
     54e:	a9 87       	std	Y+9, r26	; 0x09
     550:	ba 87       	std	Y+10, r27	; 0x0a
     552:	e8 81       	ld	r30, Y
     554:	f9 81       	ldd	r31, Y+1	; 0x01
     556:	6f 81       	ldd	r22, Y+7	; 0x07
     558:	63 70       	andi	r22, 0x03	; 3
     55a:	01 90       	ld	r0, Z+
     55c:	f0 81       	ld	r31, Z
     55e:	e0 2d       	mov	r30, r0
     560:	ce 01       	movw	r24, r28
     562:	09 95       	icall
     564:	af 8e       	std	Y+31, r10	; 0x1f
     566:	b8 a2       	std	Y+32, r11	; 0x20
     568:	c9 a2       	std	Y+33, r12	; 0x21
     56a:	da a2       	std	Y+34, r13	; 0x22
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	01 c0       	rjmp	.+2      	; 0x572 <_ZN12AccelStepper8runSpeedEv+0xb2>
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	bf 90       	pop	r11
     584:	af 90       	pop	r10
     586:	08 95       	ret

00000588 <_ZN12AccelStepper12distanceToGoEv>:
     588:	fc 01       	movw	r30, r24
     58a:	23 85       	ldd	r18, Z+11	; 0x0b
     58c:	34 85       	ldd	r19, Z+12	; 0x0c
     58e:	45 85       	ldd	r20, Z+13	; 0x0d
     590:	56 85       	ldd	r21, Z+14	; 0x0e
     592:	87 81       	ldd	r24, Z+7	; 0x07
     594:	90 85       	ldd	r25, Z+8	; 0x08
     596:	a1 85       	ldd	r26, Z+9	; 0x09
     598:	b2 85       	ldd	r27, Z+10	; 0x0a
     59a:	28 1b       	sub	r18, r24
     59c:	39 0b       	sbc	r19, r25
     59e:	4a 0b       	sbc	r20, r26
     5a0:	5b 0b       	sbc	r21, r27
     5a2:	b9 01       	movw	r22, r18
     5a4:	ca 01       	movw	r24, r20
     5a6:	08 95       	ret

000005a8 <_ZN12AccelStepper14targetPositionEv>:
     5a8:	fc 01       	movw	r30, r24
     5aa:	63 85       	ldd	r22, Z+11	; 0x0b
     5ac:	74 85       	ldd	r23, Z+12	; 0x0c
     5ae:	85 85       	ldd	r24, Z+13	; 0x0d
     5b0:	96 85       	ldd	r25, Z+14	; 0x0e
     5b2:	08 95       	ret

000005b4 <_ZN12AccelStepper15currentPositionEv>:
     5b4:	fc 01       	movw	r30, r24
     5b6:	67 81       	ldd	r22, Z+7	; 0x07
     5b8:	70 85       	ldd	r23, Z+8	; 0x08
     5ba:	81 85       	ldd	r24, Z+9	; 0x09
     5bc:	92 85       	ldd	r25, Z+10	; 0x0a
     5be:	08 95       	ret

000005c0 <_ZN12AccelStepper18setCurrentPositionEl>:
     5c0:	fc 01       	movw	r30, r24
     5c2:	47 83       	std	Z+7, r20	; 0x07
     5c4:	50 87       	std	Z+8, r21	; 0x08
     5c6:	61 87       	std	Z+9, r22	; 0x09
     5c8:	72 87       	std	Z+10, r23	; 0x0a
     5ca:	08 95       	ret

000005cc <_ZN12AccelStepperC1EPFvvES1_>:
     5cc:	fc 01       	movw	r30, r24
     5ce:	84 e0       	ldi	r24, 0x04	; 4
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	91 83       	std	Z+1, r25	; 0x01
     5d4:	80 83       	st	Z, r24
     5d6:	12 82       	std	Z+2, r1	; 0x02
     5d8:	17 82       	std	Z+7, r1	; 0x07
     5da:	10 86       	std	Z+8, r1	; 0x08
     5dc:	11 86       	std	Z+9, r1	; 0x09
     5de:	12 86       	std	Z+10, r1	; 0x0a
     5e0:	13 86       	std	Z+11, r1	; 0x0b
     5e2:	14 86       	std	Z+12, r1	; 0x0c
     5e4:	15 86       	std	Z+13, r1	; 0x0d
     5e6:	16 86       	std	Z+14, r1	; 0x0e
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	dc 01       	movw	r26, r24
     5ee:	87 87       	std	Z+15, r24	; 0x0f
     5f0:	90 8b       	std	Z+16, r25	; 0x10
     5f2:	a1 8b       	std	Z+17, r26	; 0x11
     5f4:	b2 8b       	std	Z+18, r27	; 0x12
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e8       	ldi	r26, 0x80	; 128
     5fc:	bf e3       	ldi	r27, 0x3F	; 63
     5fe:	83 8b       	std	Z+19, r24	; 0x13
     600:	94 8b       	std	Z+20, r25	; 0x14
     602:	a5 8b       	std	Z+21, r26	; 0x15
     604:	b6 8b       	std	Z+22, r27	; 0x16
     606:	87 8b       	std	Z+23, r24	; 0x17
     608:	90 8f       	std	Z+24, r25	; 0x18
     60a:	a1 8f       	std	Z+25, r26	; 0x19
     60c:	b2 8f       	std	Z+26, r27	; 0x1a
     60e:	13 8e       	std	Z+27, r1	; 0x1b
     610:	14 8e       	std	Z+28, r1	; 0x1c
     612:	15 8e       	std	Z+29, r1	; 0x1d
     614:	16 8e       	std	Z+30, r1	; 0x1e
     616:	17 8e       	std	Z+31, r1	; 0x1f
     618:	10 a2       	std	Z+32, r1	; 0x20
     61a:	11 a2       	std	Z+33, r1	; 0x21
     61c:	12 a2       	std	Z+34, r1	; 0x22
     61e:	13 82       	std	Z+3, r1	; 0x03
     620:	14 82       	std	Z+4, r1	; 0x04
     622:	15 82       	std	Z+5, r1	; 0x05
     624:	16 82       	std	Z+6, r1	; 0x06
     626:	74 a3       	std	Z+36, r23	; 0x24
     628:	63 a3       	std	Z+35, r22	; 0x23
     62a:	56 a3       	std	Z+38, r21	; 0x26
     62c:	45 a3       	std	Z+37, r20	; 0x25
     62e:	08 95       	ret

00000630 <_ZN12AccelStepper8setSpeedEf>:
     630:	af 92       	push	r10
     632:	bf 92       	push	r11
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	ec 01       	movw	r28, r24
     646:	9a 01       	movw	r18, r20
     648:	ab 01       	movw	r20, r22
     64a:	2f 87       	std	Y+15, r18	; 0x0f
     64c:	38 8b       	std	Y+16, r19	; 0x10
     64e:	49 8b       	std	Y+17, r20	; 0x11
     650:	5a 8b       	std	Y+18, r21	; 0x12
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	8a e7       	ldi	r24, 0x7A	; 122
     658:	94 e4       	ldi	r25, 0x44	; 68
     65a:	0e 94 3d 12 	call	0x247a	; 0x247a <__divsf3>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	5b 01       	movw	r10, r22
     664:	6c 01       	movw	r12, r24
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	a9 01       	movw	r20, r18
     66c:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gtsf2>
     670:	18 16       	cp	r1, r24
     672:	1c f4       	brge	.+6      	; 0x67a <_ZN12AccelStepper8setSpeedEf+0x4a>
     674:	b7 01       	movw	r22, r14
     676:	c8 01       	movw	r24, r16
     678:	03 c0       	rjmp	.+6      	; 0x680 <_ZN12AccelStepper8setSpeedEf+0x50>
     67a:	c6 01       	movw	r24, r12
     67c:	b5 01       	movw	r22, r10
     67e:	90 58       	subi	r25, 0x80	; 128
     680:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__fixunssfsi>
     684:	6b 8f       	std	Y+27, r22	; 0x1b
     686:	7c 8f       	std	Y+28, r23	; 0x1c
     688:	8d 8f       	std	Y+29, r24	; 0x1d
     68a:	9e 8f       	std	Y+30, r25	; 0x1e
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	df 90       	pop	r13
     69a:	cf 90       	pop	r12
     69c:	bf 90       	pop	r11
     69e:	af 90       	pop	r10
     6a0:	08 95       	ret

000006a2 <_ZN12AccelStepper15computeNewSpeedEv>:
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
     6a8:	e8 81       	ld	r30, Y
     6aa:	f9 81       	ldd	r31, Y+1	; 0x01
     6ac:	02 84       	ldd	r0, Z+10	; 0x0a
     6ae:	f3 85       	ldd	r31, Z+11	; 0x0b
     6b0:	e0 2d       	mov	r30, r0
     6b2:	09 95       	icall
     6b4:	ab 01       	movw	r20, r22
     6b6:	bc 01       	movw	r22, r24
     6b8:	ce 01       	movw	r24, r28
     6ba:	0e 94 18 03 	call	0x630	; 0x630 <_ZN12AccelStepper8setSpeedEf>
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <_ZN12AccelStepper15setAccelerationEf>:
     6c4:	fc 01       	movw	r30, r24
     6c6:	47 8b       	std	Z+23, r20	; 0x17
     6c8:	50 8f       	std	Z+24, r21	; 0x18
     6ca:	61 8f       	std	Z+25, r22	; 0x19
     6cc:	72 8f       	std	Z+26, r23	; 0x1a
     6ce:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     6d2:	08 95       	ret

000006d4 <_ZN12AccelStepper11setMaxSpeedEf>:
     6d4:	fc 01       	movw	r30, r24
     6d6:	43 8b       	std	Z+19, r20	; 0x13
     6d8:	54 8b       	std	Z+20, r21	; 0x14
     6da:	65 8b       	std	Z+21, r22	; 0x15
     6dc:	76 8b       	std	Z+22, r23	; 0x16
     6de:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     6e2:	08 95       	ret

000006e4 <_ZN12AccelStepper3runEv>:
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	ec 01       	movw	r28, r24
     6ea:	2b 85       	ldd	r18, Y+11	; 0x0b
     6ec:	3c 85       	ldd	r19, Y+12	; 0x0c
     6ee:	4d 85       	ldd	r20, Y+13	; 0x0d
     6f0:	5e 85       	ldd	r21, Y+14	; 0x0e
     6f2:	8f 81       	ldd	r24, Y+7	; 0x07
     6f4:	98 85       	ldd	r25, Y+8	; 0x08
     6f6:	a9 85       	ldd	r26, Y+9	; 0x09
     6f8:	ba 85       	ldd	r27, Y+10	; 0x0a
     6fa:	28 17       	cp	r18, r24
     6fc:	39 07       	cpc	r19, r25
     6fe:	4a 07       	cpc	r20, r26
     700:	5b 07       	cpc	r21, r27
     702:	49 f0       	breq	.+18     	; 0x716 <_ZN12AccelStepper3runEv+0x32>
     704:	ce 01       	movw	r24, r28
     706:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN12AccelStepper8runSpeedEv>
     70a:	88 23       	and	r24, r24
     70c:	31 f0       	breq	.+12     	; 0x71a <_ZN12AccelStepper3runEv+0x36>
     70e:	ce 01       	movw	r24, r28
     710:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     714:	02 c0       	rjmp	.+4      	; 0x71a <_ZN12AccelStepper3runEv+0x36>
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	01 c0       	rjmp	.+2      	; 0x71c <_ZN12AccelStepper3runEv+0x38>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <_ZN12AccelStepper6moveToEl>:
     722:	fc 01       	movw	r30, r24
     724:	43 87       	std	Z+11, r20	; 0x0b
     726:	54 87       	std	Z+12, r21	; 0x0c
     728:	65 87       	std	Z+13, r22	; 0x0d
     72a:	76 87       	std	Z+14, r23	; 0x0e
     72c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     730:	08 95       	ret

00000732 <_ZN12AccelStepper4moveEl>:
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	fc 01       	movw	r30, r24
     738:	07 81       	ldd	r16, Z+7	; 0x07
     73a:	10 85       	ldd	r17, Z+8	; 0x08
     73c:	21 85       	ldd	r18, Z+9	; 0x09
     73e:	32 85       	ldd	r19, Z+10	; 0x0a
     740:	40 0f       	add	r20, r16
     742:	51 1f       	adc	r21, r17
     744:	62 1f       	adc	r22, r18
     746:	73 1f       	adc	r23, r19
     748:	43 87       	std	Z+11, r20	; 0x0b
     74a:	54 87       	std	Z+12, r21	; 0x0c
     74c:	65 87       	std	Z+13, r22	; 0x0d
     74e:	76 87       	std	Z+14, r23	; 0x0e
     750:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	08 95       	ret

0000075a <_ZN12AccelStepper5speedEv>:
     75a:	fc 01       	movw	r30, r24
     75c:	57 85       	ldd	r21, Z+15	; 0x0f
     75e:	40 89       	ldd	r20, Z+16	; 0x10
     760:	31 89       	ldd	r19, Z+17	; 0x11
     762:	22 89       	ldd	r18, Z+18	; 0x12
     764:	65 2f       	mov	r22, r21
     766:	74 2f       	mov	r23, r20
     768:	83 2f       	mov	r24, r19
     76a:	92 2f       	mov	r25, r18
     76c:	08 95       	ret

0000076e <_ZN12AccelStepper14disableOutputsEv>:
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	ec 01       	movw	r28, r24
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	88 23       	and	r24, r24
     778:	99 f0       	breq	.+38     	; 0x7a0 <_ZN12AccelStepper14disableOutputsEv+0x32>
     77a:	8b 81       	ldd	r24, Y+3	; 0x03
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     78a:	8a 81       	ldd	r24, Y+2	; 0x02
     78c:	84 30       	cpi	r24, 0x04	; 4
     78e:	41 f4       	brne	.+16     	; 0x7a0 <_ZN12AccelStepper14disableOutputsEv+0x32>
     790:	8d 81       	ldd	r24, Y+5	; 0x05
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     798:	8e 81       	ldd	r24, Y+6	; 0x06
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <_ZN12AccelStepper13enableOutputsEv>:
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	ec 01       	movw	r28, r24
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	88 23       	and	r24, r24
     7b0:	99 f0       	breq	.+38     	; 0x7d8 <_ZN12AccelStepper13enableOutputsEv+0x32>
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
     7ba:	8c 81       	ldd	r24, Y+4	; 0x04
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
     7c2:	8a 81       	ldd	r24, Y+2	; 0x02
     7c4:	84 30       	cpi	r24, 0x04	; 4
     7c6:	41 f4       	brne	.+16     	; 0x7d8 <_ZN12AccelStepper13enableOutputsEv+0x32>
     7c8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
     7d0:	8e 81       	ldd	r24, Y+6	; 0x06
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <_ZN12AccelStepperC1Ehhhhh>:
     7de:	ef 92       	push	r14
     7e0:	0f 93       	push	r16
     7e2:	fc 01       	movw	r30, r24
     7e4:	84 e0       	ldi	r24, 0x04	; 4
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	91 83       	std	Z+1, r25	; 0x01
     7ea:	80 83       	st	Z, r24
     7ec:	62 83       	std	Z+2, r22	; 0x02
     7ee:	17 82       	std	Z+7, r1	; 0x07
     7f0:	10 86       	std	Z+8, r1	; 0x08
     7f2:	11 86       	std	Z+9, r1	; 0x09
     7f4:	12 86       	std	Z+10, r1	; 0x0a
     7f6:	13 86       	std	Z+11, r1	; 0x0b
     7f8:	14 86       	std	Z+12, r1	; 0x0c
     7fa:	15 86       	std	Z+13, r1	; 0x0d
     7fc:	16 86       	std	Z+14, r1	; 0x0e
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	dc 01       	movw	r26, r24
     804:	87 87       	std	Z+15, r24	; 0x0f
     806:	90 8b       	std	Z+16, r25	; 0x10
     808:	a1 8b       	std	Z+17, r26	; 0x11
     80a:	b2 8b       	std	Z+18, r27	; 0x12
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	a0 e8       	ldi	r26, 0x80	; 128
     812:	bf e3       	ldi	r27, 0x3F	; 63
     814:	83 8b       	std	Z+19, r24	; 0x13
     816:	94 8b       	std	Z+20, r25	; 0x14
     818:	a5 8b       	std	Z+21, r26	; 0x15
     81a:	b6 8b       	std	Z+22, r27	; 0x16
     81c:	87 8b       	std	Z+23, r24	; 0x17
     81e:	90 8f       	std	Z+24, r25	; 0x18
     820:	a1 8f       	std	Z+25, r26	; 0x19
     822:	b2 8f       	std	Z+26, r27	; 0x1a
     824:	13 8e       	std	Z+27, r1	; 0x1b
     826:	14 8e       	std	Z+28, r1	; 0x1c
     828:	15 8e       	std	Z+29, r1	; 0x1d
     82a:	16 8e       	std	Z+30, r1	; 0x1e
     82c:	17 8e       	std	Z+31, r1	; 0x1f
     82e:	10 a2       	std	Z+32, r1	; 0x20
     830:	11 a2       	std	Z+33, r1	; 0x21
     832:	12 a2       	std	Z+34, r1	; 0x22
     834:	43 83       	std	Z+3, r20	; 0x03
     836:	24 83       	std	Z+4, r18	; 0x04
     838:	05 83       	std	Z+5, r16	; 0x05
     83a:	e6 82       	std	Z+6, r14	; 0x06
     83c:	cf 01       	movw	r24, r30
     83e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_ZN12AccelStepper13enableOutputsEv>
     842:	0f 91       	pop	r16
     844:	ef 90       	pop	r14
     846:	08 95       	ret

00000848 <_ZN12AccelStepper13runToPositionEv>:
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
     84e:	ce 01       	movw	r24, r28
     850:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN12AccelStepper3runEv>
     854:	88 23       	and	r24, r24
     856:	d9 f7       	brne	.-10     	; 0x84e <_ZN12AccelStepper13runToPositionEv+0x6>
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_ZN12AccelStepper18runSpeedToPositionEv>:
     85e:	fc 01       	movw	r30, r24
     860:	63 85       	ldd	r22, Z+11	; 0x0b
     862:	74 85       	ldd	r23, Z+12	; 0x0c
     864:	85 85       	ldd	r24, Z+13	; 0x0d
     866:	96 85       	ldd	r25, Z+14	; 0x0e
     868:	27 81       	ldd	r18, Z+7	; 0x07
     86a:	30 85       	ldd	r19, Z+8	; 0x08
     86c:	41 85       	ldd	r20, Z+9	; 0x09
     86e:	52 85       	ldd	r21, Z+10	; 0x0a
     870:	62 17       	cp	r22, r18
     872:	73 07       	cpc	r23, r19
     874:	84 07       	cpc	r24, r20
     876:	95 07       	cpc	r25, r21
     878:	21 f0       	breq	.+8      	; 0x882 <_ZN12AccelStepper18runSpeedToPositionEv+0x24>
     87a:	cf 01       	movw	r24, r30
     87c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN12AccelStepper8runSpeedEv>
     880:	08 95       	ret
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	08 95       	ret

00000886 <_ZN12AccelStepper16runToNewPositionEl>:
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	ec 01       	movw	r28, r24
     88c:	4b 87       	std	Y+11, r20	; 0x0b
     88e:	5c 87       	std	Y+12, r21	; 0x0c
     890:	6d 87       	std	Y+13, r22	; 0x0d
     892:	7e 87       	std	Y+14, r23	; 0x0e
     894:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     898:	ce 01       	movw	r24, r28
     89a:	0e 94 24 04 	call	0x848	; 0x848 <_ZN12AccelStepper13runToPositionEv>
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <_ZN7DCMotorC1Eii>:
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	df 93       	push	r29
     8ae:	cf 93       	push	r28
     8b0:	0f 92       	push	r0
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	7c 01       	movw	r14, r24
     8b8:	16 2f       	mov	r17, r22
     8ba:	04 2f       	mov	r16, r20
     8bc:	fc 01       	movw	r30, r24
     8be:	60 83       	st	Z, r22
     8c0:	71 83       	std	Z+1, r23	; 0x01
     8c2:	86 2f       	mov	r24, r22
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	59 83       	std	Y+1, r21	; 0x01
     8c8:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
     8cc:	81 2f       	mov	r24, r17
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     8d4:	f7 01       	movw	r30, r14
     8d6:	02 83       	std	Z+2, r16	; 0x02
     8d8:	59 81       	ldd	r21, Y+1	; 0x01
     8da:	53 83       	std	Z+3, r21	; 0x03
     8dc:	80 2f       	mov	r24, r16
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
     8e4:	80 2f       	mov	r24, r16
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	f7 01       	movw	r30, r14
     8f0:	84 83       	std	Z+4, r24	; 0x04
     8f2:	0f 90       	pop	r0
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	08 95       	ret

00000902 <_ZN7DCMotor4stopEv>:
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
     908:	88 81       	ld	r24, Y
     90a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_Z10SoftPWMEnda>
     90e:	88 81       	ld	r24, Y
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     916:	8a 81       	ldd	r24, Y+2	; 0x02
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     91e:	1c 82       	std	Y+4, r1	; 0x04
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <_ZN7DCMotor13setMotorspeedEi>:
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	ec 01       	movw	r28, r24
     930:	8b 01       	movw	r16, r22
     932:	8c 81       	ldd	r24, Y+4	; 0x04
     934:	88 23       	and	r24, r24
     936:	99 f0       	breq	.+38     	; 0x95e <_ZN7DCMotor13setMotorspeedEi+0x38>
     938:	77 fd       	sbrc	r23, 7
     93a:	07 c0       	rjmp	.+14     	; 0x94a <_ZN7DCMotor13setMotorspeedEi+0x24>
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     944:	88 81       	ld	r24, Y
     946:	60 2f       	mov	r22, r16
     948:	07 c0       	rjmp	.+14     	; 0x958 <_ZN7DCMotor13setMotorspeedEi+0x32>
     94a:	8a 81       	ldd	r24, Y+2	; 0x02
     94c:	61 e0       	ldi	r22, 0x01	; 1
     94e:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     952:	60 2f       	mov	r22, r16
     954:	61 50       	subi	r22, 0x01	; 1
     956:	88 81       	ld	r24, Y
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <_Z10SoftPWMSetahh>
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	08 95       	ret

00000968 <_Z12DCMotor_intiv>:
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_Z12SoftPWMBeginh>
     96e:	08 95       	ret

00000970 <_ZN3LCDC1Ehhhhhhhh>:
     970:	6f 92       	push	r6
     972:	7f 92       	push	r7
     974:	8f 92       	push	r8
     976:	af 92       	push	r10
     978:	cf 92       	push	r12
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	df 93       	push	r29
     984:	cf 93       	push	r28
     986:	00 d0       	rcall	.+0      	; 0x988 <_ZN3LCDC1Ehhhhhhhh+0x18>
     988:	0f 92       	push	r0
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	3c 01       	movw	r6, r24
     990:	85 e1       	ldi	r24, 0x15	; 21
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	2b 83       	std	Y+3, r18	; 0x03
     996:	4a 83       	std	Y+2, r20	; 0x02
     998:	69 83       	std	Y+1, r22	; 0x01
     99a:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <_Znwj>
     99e:	f8 2e       	mov	r15, r24
     9a0:	19 2f       	mov	r17, r25
     9a2:	69 81       	ldd	r22, Y+1	; 0x01
     9a4:	4a 81       	ldd	r20, Y+2	; 0x02
     9a6:	2b 81       	ldd	r18, Y+3	; 0x03
     9a8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN13LiquidCrystalC1Ehhhhhh>
     9ac:	f3 01       	movw	r30, r6
     9ae:	f0 82       	st	Z, r15
     9b0:	11 83       	std	Z+1, r17	; 0x01
     9b2:	8f 2d       	mov	r24, r15
     9b4:	91 2f       	mov	r25, r17
     9b6:	6a 2d       	mov	r22, r10
     9b8:	48 2d       	mov	r20, r8
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN13LiquidCrystal5beginEhhh>
     9c0:	f3 01       	movw	r30, r6
     9c2:	80 81       	ld	r24, Z
     9c4:	91 81       	ldd	r25, Z+1	; 0x01
     9c6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <_ZN13LiquidCrystal5clearEv>
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	cf 91       	pop	r28
     9d2:	df 91       	pop	r29
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	cf 90       	pop	r12
     9de:	af 90       	pop	r10
     9e0:	8f 90       	pop	r8
     9e2:	7f 90       	pop	r7
     9e4:	6f 90       	pop	r6
     9e6:	08 95       	ret

000009e8 <_ZN3LCD5traceE6String>:
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	ec 01       	movw	r28, r24
     9f2:	8b 01       	movw	r16, r22
     9f4:	88 81       	ld	r24, Y
     9f6:	99 81       	ldd	r25, Y+1	; 0x01
     9f8:	0e 94 cf 06 	call	0xd9e	; 0xd9e <_ZN13LiquidCrystal5clearEv>
     9fc:	88 81       	ld	r24, Y
     9fe:	99 81       	ldd	r25, Y+1	; 0x01
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN13LiquidCrystal9setCursorEhh>
     a08:	88 81       	ld	r24, Y
     a0a:	99 81       	ldd	r25, Y+1	; 0x01
     a0c:	b8 01       	movw	r22, r16
     a0e:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_ZN5Print5printERK6String>
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	08 95       	ret

00000a1c <_ZN3LCD9updateLCDE6Stringi>:
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	ec 01       	movw	r28, r24
     a2a:	7b 01       	movw	r14, r22
     a2c:	8a 01       	movw	r16, r20
     a2e:	88 81       	ld	r24, Y
     a30:	99 81       	ldd	r25, Y+1	; 0x01
     a32:	0e 94 cf 06 	call	0xd9e	; 0xd9e <_ZN13LiquidCrystal5clearEv>
     a36:	88 81       	ld	r24, Y
     a38:	99 81       	ldd	r25, Y+1	; 0x01
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN13LiquidCrystal9setCursorEhh>
     a42:	88 81       	ld	r24, Y
     a44:	99 81       	ldd	r25, Y+1	; 0x01
     a46:	60 e1       	ldi	r22, 0x10	; 16
     a48:	71 e0       	ldi	r23, 0x01	; 1
     a4a:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN5Print5printEPKc>
     a4e:	88 81       	ld	r24, Y
     a50:	99 81       	ldd	r25, Y+1	; 0x01
     a52:	b7 01       	movw	r22, r14
     a54:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_ZN5Print5printERK6String>
     a58:	88 81       	ld	r24, Y
     a5a:	99 81       	ldd	r25, Y+1	; 0x01
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	41 e0       	ldi	r20, 0x01	; 1
     a60:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN13LiquidCrystal9setCursorEhh>
     a64:	88 81       	ld	r24, Y
     a66:	99 81       	ldd	r25, Y+1	; 0x01
     a68:	66 e1       	ldi	r22, 0x16	; 22
     a6a:	71 e0       	ldi	r23, 0x01	; 1
     a6c:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN5Print5printEPKc>
     a70:	88 81       	ld	r24, Y
     a72:	99 81       	ldd	r25, Y+1	; 0x01
     a74:	b8 01       	movw	r22, r16
     a76:	4a e0       	ldi	r20, 0x0A	; 10
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	0e 94 29 23 	call	0x4652	; 0x4652 <_ZN5Print5printEii>
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	08 95       	ret

00000a8c <_ZN13LiquidCrystal11pulseEnableEv>:
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	ec 01       	movw	r28, r24
     a92:	8e 81       	ldd	r24, Y+6	; 0x06
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <delayMicroseconds>
     aa2:	8e 81       	ldd	r24, Y+6	; 0x06
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <delayMicroseconds>
     ab2:	8e 81       	ldd	r24, Y+6	; 0x06
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     aba:	84 e6       	ldi	r24, 0x64	; 100
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <delayMicroseconds>
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <_ZN13LiquidCrystal10write4bitsEh>:
     ac8:	af 92       	push	r10
     aca:	bf 92       	push	r11
     acc:	cf 92       	push	r12
     ace:	df 92       	push	r13
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	7c 01       	movw	r14, r24
     ade:	8c 01       	movw	r16, r24
     ae0:	09 5f       	subi	r16, 0xF9	; 249
     ae2:	1f 4f       	sbci	r17, 0xFF	; 255
     ae4:	c0 e0       	ldi	r28, 0x00	; 0
     ae6:	d0 e0       	ldi	r29, 0x00	; 0
     ae8:	a6 2e       	mov	r10, r22
     aea:	bb 24       	eor	r11, r11
     aec:	68 01       	movw	r12, r16
     aee:	f8 01       	movw	r30, r16
     af0:	81 91       	ld	r24, Z+
     af2:	8f 01       	movw	r16, r30
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
     afa:	b5 01       	movw	r22, r10
     afc:	0c 2e       	mov	r0, r28
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <_ZN13LiquidCrystal10write4bitsEh+0x3c>
     b00:	75 95       	asr	r23
     b02:	67 95       	ror	r22
     b04:	0a 94       	dec	r0
     b06:	e2 f7       	brpl	.-8      	; 0xb00 <_ZN13LiquidCrystal10write4bitsEh+0x38>
     b08:	61 70       	andi	r22, 0x01	; 1
     b0a:	f6 01       	movw	r30, r12
     b0c:	80 81       	ld	r24, Z
     b0e:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     b12:	21 96       	adiw	r28, 0x01	; 1
     b14:	c4 30       	cpi	r28, 0x04	; 4
     b16:	d1 05       	cpc	r29, r1
     b18:	49 f7       	brne	.-46     	; 0xaec <_ZN13LiquidCrystal10write4bitsEh+0x24>
     b1a:	c7 01       	movw	r24, r14
     b1c:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13LiquidCrystal11pulseEnableEv>
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	df 90       	pop	r13
     b2e:	cf 90       	pop	r12
     b30:	bf 90       	pop	r11
     b32:	af 90       	pop	r10
     b34:	08 95       	ret

00000b36 <_ZN13LiquidCrystal10write8bitsEh>:
     b36:	af 92       	push	r10
     b38:	bf 92       	push	r11
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	7c 01       	movw	r14, r24
     b4c:	8c 01       	movw	r16, r24
     b4e:	09 5f       	subi	r16, 0xF9	; 249
     b50:	1f 4f       	sbci	r17, 0xFF	; 255
     b52:	c0 e0       	ldi	r28, 0x00	; 0
     b54:	d0 e0       	ldi	r29, 0x00	; 0
     b56:	a6 2e       	mov	r10, r22
     b58:	bb 24       	eor	r11, r11
     b5a:	68 01       	movw	r12, r16
     b5c:	f8 01       	movw	r30, r16
     b5e:	81 91       	ld	r24, Z+
     b60:	8f 01       	movw	r16, r30
     b62:	61 e0       	ldi	r22, 0x01	; 1
     b64:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
     b68:	b5 01       	movw	r22, r10
     b6a:	0c 2e       	mov	r0, r28
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <_ZN13LiquidCrystal10write8bitsEh+0x3c>
     b6e:	75 95       	asr	r23
     b70:	67 95       	ror	r22
     b72:	0a 94       	dec	r0
     b74:	e2 f7       	brpl	.-8      	; 0xb6e <_ZN13LiquidCrystal10write8bitsEh+0x38>
     b76:	61 70       	andi	r22, 0x01	; 1
     b78:	f6 01       	movw	r30, r12
     b7a:	80 81       	ld	r24, Z
     b7c:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     b80:	21 96       	adiw	r28, 0x01	; 1
     b82:	c8 30       	cpi	r28, 0x08	; 8
     b84:	d1 05       	cpc	r29, r1
     b86:	49 f7       	brne	.-46     	; 0xb5a <_ZN13LiquidCrystal10write8bitsEh+0x24>
     b88:	c7 01       	movw	r24, r14
     b8a:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13LiquidCrystal11pulseEnableEv>
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	08 95       	ret

00000ba4 <_ZN13LiquidCrystal4sendEhh>:
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	ec 01       	movw	r28, r24
     bac:	16 2f       	mov	r17, r22
     bae:	8c 81       	ldd	r24, Y+4	; 0x04
     bb0:	64 2f       	mov	r22, r20
     bb2:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     bb6:	8d 81       	ldd	r24, Y+5	; 0x05
     bb8:	8f 3f       	cpi	r24, 0xFF	; 255
     bba:	19 f0       	breq	.+6      	; 0xbc2 <_ZN13LiquidCrystal4sendEhh+0x1e>
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     bc2:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc4:	84 ff       	sbrs	r24, 4
     bc6:	05 c0       	rjmp	.+10     	; 0xbd2 <_ZN13LiquidCrystal4sendEhh+0x2e>
     bc8:	ce 01       	movw	r24, r28
     bca:	61 2f       	mov	r22, r17
     bcc:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZN13LiquidCrystal10write8bitsEh>
     bd0:	0f c0       	rjmp	.+30     	; 0xbf0 <_ZN13LiquidCrystal4sendEhh+0x4c>
     bd2:	21 2f       	mov	r18, r17
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	84 e0       	ldi	r24, 0x04	; 4
     bd8:	35 95       	asr	r19
     bda:	27 95       	ror	r18
     bdc:	8a 95       	dec	r24
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <_ZN13LiquidCrystal4sendEhh+0x34>
     be0:	ce 01       	movw	r24, r28
     be2:	62 2f       	mov	r22, r18
     be4:	0e 94 64 05 	call	0xac8	; 0xac8 <_ZN13LiquidCrystal10write4bitsEh>
     be8:	ce 01       	movw	r24, r28
     bea:	61 2f       	mov	r22, r17
     bec:	0e 94 64 05 	call	0xac8	; 0xac8 <_ZN13LiquidCrystal10write4bitsEh>
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	08 95       	ret

00000bf8 <_ZN13LiquidCrystal5writeEh>:
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	0e 94 d2 05 	call	0xba4	; 0xba4 <_ZN13LiquidCrystal4sendEhh>
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	08 95       	ret

00000c04 <_ZN13LiquidCrystal7commandEh>:
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	0e 94 d2 05 	call	0xba4	; 0xba4 <_ZN13LiquidCrystal4sendEhh>
     c0a:	08 95       	ret

00000c0c <_ZN13LiquidCrystal10createCharEhPh>:
     c0c:	cf 92       	push	r12
     c0e:	df 92       	push	r13
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <_ZN13LiquidCrystal10createCharEhPh+0x12>
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	6c 01       	movw	r12, r24
     c24:	67 70       	andi	r22, 0x07	; 7
     c26:	66 0f       	add	r22, r22
     c28:	66 0f       	add	r22, r22
     c2a:	66 0f       	add	r22, r22
     c2c:	60 64       	ori	r22, 0x40	; 64
     c2e:	49 83       	std	Y+1, r20	; 0x01
     c30:	5a 83       	std	Y+2, r21	; 0x02
     c32:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     c36:	49 81       	ldd	r20, Y+1	; 0x01
     c38:	5a 81       	ldd	r21, Y+2	; 0x02
     c3a:	e4 2e       	mov	r14, r20
     c3c:	f5 2e       	mov	r15, r21
     c3e:	00 e0       	ldi	r16, 0x00	; 0
     c40:	10 e0       	ldi	r17, 0x00	; 0
     c42:	d7 01       	movw	r26, r14
     c44:	6d 91       	ld	r22, X+
     c46:	7d 01       	movw	r14, r26
     c48:	d6 01       	movw	r26, r12
     c4a:	ed 91       	ld	r30, X+
     c4c:	fc 91       	ld	r31, X
     c4e:	01 90       	ld	r0, Z+
     c50:	f0 81       	ld	r31, Z
     c52:	e0 2d       	mov	r30, r0
     c54:	c6 01       	movw	r24, r12
     c56:	09 95       	icall
     c58:	0f 5f       	subi	r16, 0xFF	; 255
     c5a:	1f 4f       	sbci	r17, 0xFF	; 255
     c5c:	08 30       	cpi	r16, 0x08	; 8
     c5e:	11 05       	cpc	r17, r1
     c60:	81 f7       	brne	.-32     	; 0xc42 <_ZN13LiquidCrystal10createCharEhPh+0x36>
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	df 90       	pop	r13
     c74:	cf 90       	pop	r12
     c76:	08 95       	ret

00000c78 <_ZN13LiquidCrystal12noAutoscrollEv>:
     c78:	fc 01       	movw	r30, r24
     c7a:	61 89       	ldd	r22, Z+17	; 0x11
     c7c:	6e 7f       	andi	r22, 0xFE	; 254
     c7e:	61 8b       	std	Z+17, r22	; 0x11
     c80:	64 60       	ori	r22, 0x04	; 4
     c82:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     c86:	08 95       	ret

00000c88 <_ZN13LiquidCrystal10autoscrollEv>:
     c88:	fc 01       	movw	r30, r24
     c8a:	61 89       	ldd	r22, Z+17	; 0x11
     c8c:	26 2f       	mov	r18, r22
     c8e:	21 60       	ori	r18, 0x01	; 1
     c90:	21 8b       	std	Z+17, r18	; 0x11
     c92:	65 60       	ori	r22, 0x05	; 5
     c94:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     c98:	08 95       	ret

00000c9a <_ZN13LiquidCrystal11rightToLeftEv>:
     c9a:	fc 01       	movw	r30, r24
     c9c:	61 89       	ldd	r22, Z+17	; 0x11
     c9e:	6d 7f       	andi	r22, 0xFD	; 253
     ca0:	61 8b       	std	Z+17, r22	; 0x11
     ca2:	64 60       	ori	r22, 0x04	; 4
     ca4:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     ca8:	08 95       	ret

00000caa <_ZN13LiquidCrystal11leftToRightEv>:
     caa:	fc 01       	movw	r30, r24
     cac:	61 89       	ldd	r22, Z+17	; 0x11
     cae:	26 2f       	mov	r18, r22
     cb0:	22 60       	ori	r18, 0x02	; 2
     cb2:	21 8b       	std	Z+17, r18	; 0x11
     cb4:	66 60       	ori	r22, 0x06	; 6
     cb6:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     cba:	08 95       	ret

00000cbc <_ZN13LiquidCrystal18scrollDisplayRightEv>:
     cbc:	6c e1       	ldi	r22, 0x1C	; 28
     cbe:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     cc2:	08 95       	ret

00000cc4 <_ZN13LiquidCrystal17scrollDisplayLeftEv>:
     cc4:	68 e1       	ldi	r22, 0x18	; 24
     cc6:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     cca:	08 95       	ret

00000ccc <_ZN13LiquidCrystal5blinkEv>:
     ccc:	fc 01       	movw	r30, r24
     cce:	60 89       	ldd	r22, Z+16	; 0x10
     cd0:	26 2f       	mov	r18, r22
     cd2:	21 60       	ori	r18, 0x01	; 1
     cd4:	20 8b       	std	Z+16, r18	; 0x10
     cd6:	69 60       	ori	r22, 0x09	; 9
     cd8:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     cdc:	08 95       	ret

00000cde <_ZN13LiquidCrystal7noBlinkEv>:
     cde:	fc 01       	movw	r30, r24
     ce0:	60 89       	ldd	r22, Z+16	; 0x10
     ce2:	6e 7f       	andi	r22, 0xFE	; 254
     ce4:	60 8b       	std	Z+16, r22	; 0x10
     ce6:	68 60       	ori	r22, 0x08	; 8
     ce8:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     cec:	08 95       	ret

00000cee <_ZN13LiquidCrystal6cursorEv>:
     cee:	fc 01       	movw	r30, r24
     cf0:	60 89       	ldd	r22, Z+16	; 0x10
     cf2:	26 2f       	mov	r18, r22
     cf4:	22 60       	ori	r18, 0x02	; 2
     cf6:	20 8b       	std	Z+16, r18	; 0x10
     cf8:	6a 60       	ori	r22, 0x0A	; 10
     cfa:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     cfe:	08 95       	ret

00000d00 <_ZN13LiquidCrystal8noCursorEv>:
     d00:	fc 01       	movw	r30, r24
     d02:	60 89       	ldd	r22, Z+16	; 0x10
     d04:	6d 7f       	andi	r22, 0xFD	; 253
     d06:	60 8b       	std	Z+16, r22	; 0x10
     d08:	68 60       	ori	r22, 0x08	; 8
     d0a:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     d0e:	08 95       	ret

00000d10 <_ZN13LiquidCrystal7displayEv>:
     d10:	fc 01       	movw	r30, r24
     d12:	60 89       	ldd	r22, Z+16	; 0x10
     d14:	26 2f       	mov	r18, r22
     d16:	24 60       	ori	r18, 0x04	; 4
     d18:	20 8b       	std	Z+16, r18	; 0x10
     d1a:	6c 60       	ori	r22, 0x0C	; 12
     d1c:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     d20:	08 95       	ret

00000d22 <_ZN13LiquidCrystal9noDisplayEv>:
     d22:	fc 01       	movw	r30, r24
     d24:	60 89       	ldd	r22, Z+16	; 0x10
     d26:	6b 7f       	andi	r22, 0xFB	; 251
     d28:	60 8b       	std	Z+16, r22	; 0x10
     d2a:	68 60       	ori	r22, 0x08	; 8
     d2c:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     d30:	08 95       	ret

00000d32 <_ZN13LiquidCrystal9setCursorEhh>:
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	28 97       	sbiw	r28, 0x08	; 8
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	fe 01       	movw	r30, r28
     d48:	31 96       	adiw	r30, 0x01	; 1
     d4a:	a6 e2       	ldi	r26, 0x26	; 38
     d4c:	b1 e0       	ldi	r27, 0x01	; 1
     d4e:	28 e0       	ldi	r18, 0x08	; 8
     d50:	0d 90       	ld	r0, X+
     d52:	01 92       	st	Z+, r0
     d54:	21 50       	subi	r18, 0x01	; 1
     d56:	e1 f7       	brne	.-8      	; 0xd50 <_ZN13LiquidCrystal9setCursorEhh+0x1e>
     d58:	fc 01       	movw	r30, r24
     d5a:	23 89       	ldd	r18, Z+19	; 0x13
     d5c:	42 17       	cp	r20, r18
     d5e:	10 f0       	brcs	.+4      	; 0xd64 <_ZN13LiquidCrystal9setCursorEhh+0x32>
     d60:	42 2f       	mov	r20, r18
     d62:	41 50       	subi	r20, 0x01	; 1
     d64:	e4 2f       	mov	r30, r20
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	ee 0f       	add	r30, r30
     d6a:	ff 1f       	adc	r31, r31
     d6c:	ec 0f       	add	r30, r28
     d6e:	fd 1f       	adc	r31, r29
     d70:	21 81       	ldd	r18, Z+1	; 0x01
     d72:	26 0f       	add	r18, r22
     d74:	20 68       	ori	r18, 0x80	; 128
     d76:	62 2f       	mov	r22, r18
     d78:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     d7c:	28 96       	adiw	r28, 0x08	; 8
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <_ZN13LiquidCrystal4homeEv>:
     d8e:	62 e0       	ldi	r22, 0x02	; 2
     d90:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     d94:	80 ed       	ldi	r24, 0xD0	; 208
     d96:	97 e0       	ldi	r25, 0x07	; 7
     d98:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <delayMicroseconds>
     d9c:	08 95       	ret

00000d9e <_ZN13LiquidCrystal5clearEv>:
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     da4:	80 ed       	ldi	r24, 0xD0	; 208
     da6:	97 e0       	ldi	r25, 0x07	; 7
     da8:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <delayMicroseconds>
     dac:	08 95       	ret

00000dae <_ZN13LiquidCrystal5beginEhhh>:
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	ec 01       	movw	r28, r24
     db4:	42 30       	cpi	r20, 0x02	; 2
     db6:	18 f0       	brcs	.+6      	; 0xdbe <_ZN13LiquidCrystal5beginEhhh+0x10>
     db8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dba:	88 60       	ori	r24, 0x08	; 8
     dbc:	8f 87       	std	Y+15, r24	; 0x0f
     dbe:	4b 8b       	std	Y+19, r20	; 0x13
     dc0:	1c 8a       	std	Y+20, r1	; 0x14
     dc2:	22 23       	and	r18, r18
     dc4:	29 f0       	breq	.+10     	; 0xdd0 <_ZN13LiquidCrystal5beginEhhh+0x22>
     dc6:	41 30       	cpi	r20, 0x01	; 1
     dc8:	19 f4       	brne	.+6      	; 0xdd0 <_ZN13LiquidCrystal5beginEhhh+0x22>
     dca:	8f 85       	ldd	r24, Y+15	; 0x0f
     dcc:	84 60       	ori	r24, 0x04	; 4
     dce:	8f 87       	std	Y+15, r24	; 0x0f
     dd0:	80 e5       	ldi	r24, 0x50	; 80
     dd2:	93 ec       	ldi	r25, 0xC3	; 195
     dd4:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <delayMicroseconds>
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     de0:	8e 81       	ldd	r24, Y+6	; 0x06
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	8f 3f       	cpi	r24, 0xFF	; 255
     dec:	19 f0       	breq	.+6      	; 0xdf4 <_ZN13LiquidCrystal5beginEhhh+0x46>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
     df4:	6f 85       	ldd	r22, Y+15	; 0x0f
     df6:	64 fd       	sbrc	r22, 4
     df8:	1d c0       	rjmp	.+58     	; 0xe34 <_ZN13LiquidCrystal5beginEhhh+0x86>
     dfa:	ce 01       	movw	r24, r28
     dfc:	63 e0       	ldi	r22, 0x03	; 3
     dfe:	0e 94 64 05 	call	0xac8	; 0xac8 <_ZN13LiquidCrystal10write4bitsEh>
     e02:	84 e9       	ldi	r24, 0x94	; 148
     e04:	91 e1       	ldi	r25, 0x11	; 17
     e06:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <delayMicroseconds>
     e0a:	ce 01       	movw	r24, r28
     e0c:	63 e0       	ldi	r22, 0x03	; 3
     e0e:	0e 94 64 05 	call	0xac8	; 0xac8 <_ZN13LiquidCrystal10write4bitsEh>
     e12:	84 e9       	ldi	r24, 0x94	; 148
     e14:	91 e1       	ldi	r25, 0x11	; 17
     e16:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <delayMicroseconds>
     e1a:	ce 01       	movw	r24, r28
     e1c:	63 e0       	ldi	r22, 0x03	; 3
     e1e:	0e 94 64 05 	call	0xac8	; 0xac8 <_ZN13LiquidCrystal10write4bitsEh>
     e22:	86 e9       	ldi	r24, 0x96	; 150
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <delayMicroseconds>
     e2a:	ce 01       	movw	r24, r28
     e2c:	62 e0       	ldi	r22, 0x02	; 2
     e2e:	0e 94 64 05 	call	0xac8	; 0xac8 <_ZN13LiquidCrystal10write4bitsEh>
     e32:	16 c0       	rjmp	.+44     	; 0xe60 <_ZN13LiquidCrystal5beginEhhh+0xb2>
     e34:	60 62       	ori	r22, 0x20	; 32
     e36:	ce 01       	movw	r24, r28
     e38:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     e3c:	84 e9       	ldi	r24, 0x94	; 148
     e3e:	91 e1       	ldi	r25, 0x11	; 17
     e40:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <delayMicroseconds>
     e44:	6f 85       	ldd	r22, Y+15	; 0x0f
     e46:	60 62       	ori	r22, 0x20	; 32
     e48:	ce 01       	movw	r24, r28
     e4a:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     e4e:	86 e9       	ldi	r24, 0x96	; 150
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 e6 17 	call	0x2fcc	; 0x2fcc <delayMicroseconds>
     e56:	6f 85       	ldd	r22, Y+15	; 0x0f
     e58:	60 62       	ori	r22, 0x20	; 32
     e5a:	ce 01       	movw	r24, r28
     e5c:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     e60:	6f 85       	ldd	r22, Y+15	; 0x0f
     e62:	60 62       	ori	r22, 0x20	; 32
     e64:	ce 01       	movw	r24, r28
     e66:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     e6a:	84 e0       	ldi	r24, 0x04	; 4
     e6c:	88 8b       	std	Y+16, r24	; 0x10
     e6e:	ce 01       	movw	r24, r28
     e70:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN13LiquidCrystal7displayEv>
     e74:	ce 01       	movw	r24, r28
     e76:	0e 94 cf 06 	call	0xd9e	; 0xd9e <_ZN13LiquidCrystal5clearEv>
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	89 8b       	std	Y+17, r24	; 0x11
     e7e:	ce 01       	movw	r24, r28
     e80:	66 e0       	ldi	r22, 0x06	; 6
     e82:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	08 95       	ret

00000e8c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
     e8c:	6f 92       	push	r6
     e8e:	7f 92       	push	r7
     e90:	8f 92       	push	r8
     e92:	af 92       	push	r10
     e94:	cf 92       	push	r12
     e96:	ef 92       	push	r14
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	3c 01       	movw	r6, r24
     ea6:	16 2f       	mov	r17, r22
     ea8:	84 2f       	mov	r24, r20
     eaa:	f3 01       	movw	r30, r6
     eac:	44 83       	std	Z+4, r20	; 0x04
     eae:	25 83       	std	Z+5, r18	; 0x05
     eb0:	06 83       	std	Z+6, r16	; 0x06
     eb2:	e7 82       	std	Z+7, r14	; 0x07
     eb4:	c0 86       	std	Z+8, r12	; 0x08
     eb6:	a1 86       	std	Z+9, r10	; 0x09
     eb8:	82 86       	std	Z+10, r8	; 0x0a
     eba:	9d 85       	ldd	r25, Y+13	; 0x0d
     ebc:	93 87       	std	Z+11, r25	; 0x0b
     ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec0:	94 87       	std	Z+12, r25	; 0x0c
     ec2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ec4:	95 87       	std	Z+13, r25	; 0x0d
     ec6:	98 89       	ldd	r25, Y+16	; 0x10
     ec8:	96 87       	std	Z+14, r25	; 0x0e
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
     ed0:	f3 01       	movw	r30, r6
     ed2:	85 81       	ldd	r24, Z+5	; 0x05
     ed4:	8f 3f       	cpi	r24, 0xFF	; 255
     ed6:	19 f0       	breq	.+6      	; 0xede <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x52>
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
     ede:	f3 01       	movw	r30, r6
     ee0:	86 81       	ldd	r24, Z+6	; 0x06
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
     ee8:	11 23       	and	r17, r17
     eea:	19 f0       	breq	.+6      	; 0xef2 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x66>
     eec:	f3 01       	movw	r30, r6
     eee:	17 86       	std	Z+15, r1	; 0x0f
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x6c>
     ef2:	80 e1       	ldi	r24, 0x10	; 16
     ef4:	f3 01       	movw	r30, r6
     ef6:	87 87       	std	Z+15, r24	; 0x0f
     ef8:	c3 01       	movw	r24, r6
     efa:	60 e1       	ldi	r22, 0x10	; 16
     efc:	41 e0       	ldi	r20, 0x01	; 1
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN13LiquidCrystal5beginEhhh>
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ef 90       	pop	r14
     f0e:	cf 90       	pop	r12
     f10:	af 90       	pop	r10
     f12:	8f 90       	pop	r8
     f14:	7f 90       	pop	r7
     f16:	6f 90       	pop	r6
     f18:	08 95       	ret

00000f1a <_ZN13LiquidCrystalC1Ehhhhhh>:
     f1a:	8f 92       	push	r8
     f1c:	af 92       	push	r10
     f1e:	cf 92       	push	r12
     f20:	ef 92       	push	r14
     f22:	0f 93       	push	r16
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	a6 2f       	mov	r26, r22
     f2a:	74 2f       	mov	r23, r20
     f2c:	52 2f       	mov	r21, r18
     f2e:	30 2f       	mov	r19, r16
     f30:	ae 2c       	mov	r10, r14
     f32:	8c 2c       	mov	r8, r12
     f34:	ec 01       	movw	r28, r24
     f36:	1b 82       	std	Y+3, r1	; 0x03
     f38:	1a 82       	std	Y+2, r1	; 0x02
     f3a:	e2 e2       	ldi	r30, 0x22	; 34
     f3c:	f1 e0       	ldi	r31, 0x01	; 1
     f3e:	f9 83       	std	Y+1, r31	; 0x01
     f40:	e8 83       	st	Y, r30
     f42:	00 d0       	rcall	.+0      	; 0xf44 <_ZN13LiquidCrystalC1Ehhhhhh+0x2a>
     f44:	00 d0       	rcall	.+0      	; 0xf46 <_ZN13LiquidCrystalC1Ehhhhhh+0x2c>
     f46:	ed b7       	in	r30, 0x3d	; 61
     f48:	fe b7       	in	r31, 0x3e	; 62
     f4a:	31 96       	adiw	r30, 0x01	; 1
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	19 82       	std	Y+1, r1	; 0x01
     f52:	11 82       	std	Z+1, r1	; 0x01
     f54:	12 82       	std	Z+2, r1	; 0x02
     f56:	13 82       	std	Z+3, r1	; 0x03
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	4a 2f       	mov	r20, r26
     f5c:	2f ef       	ldi	r18, 0xFF	; 255
     f5e:	07 2f       	mov	r16, r23
     f60:	e5 2e       	mov	r14, r21
     f62:	c3 2e       	mov	r12, r19
     f64:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	0f 91       	pop	r16
     f76:	ef 90       	pop	r14
     f78:	cf 90       	pop	r12
     f7a:	af 90       	pop	r10
     f7c:	8f 90       	pop	r8
     f7e:	08 95       	ret

00000f80 <_ZN13LiquidCrystalC1Ehhhhhhh>:
     f80:	8f 92       	push	r8
     f82:	af 92       	push	r10
     f84:	cf 92       	push	r12
     f86:	ef 92       	push	r14
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	16 2f       	mov	r17, r22
     f92:	f4 2f       	mov	r31, r20
     f94:	e2 2f       	mov	r30, r18
     f96:	70 2f       	mov	r23, r16
     f98:	5e 2d       	mov	r21, r14
     f9a:	3c 2d       	mov	r19, r12
     f9c:	8a 2c       	mov	r8, r10
     f9e:	dc 01       	movw	r26, r24
     fa0:	13 96       	adiw	r26, 0x03	; 3
     fa2:	1c 92       	st	X, r1
     fa4:	1e 92       	st	-X, r1
     fa6:	12 97       	sbiw	r26, 0x02	; 2
     fa8:	c2 e2       	ldi	r28, 0x22	; 34
     faa:	d1 e0       	ldi	r29, 0x01	; 1
     fac:	cd 93       	st	X+, r28
     fae:	dc 93       	st	X, r29
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <_ZN13LiquidCrystalC1Ehhhhhhh+0x32>
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <_ZN13LiquidCrystalC1Ehhhhhhh+0x34>
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	21 96       	adiw	r28, 0x01	; 1
     fba:	ad b7       	in	r26, 0x3d	; 61
     fbc:	be b7       	in	r27, 0x3e	; 62
     fbe:	11 96       	adiw	r26, 0x01	; 1
     fc0:	1c 92       	st	X, r1
     fc2:	19 82       	std	Y+1, r1	; 0x01
     fc4:	1a 82       	std	Y+2, r1	; 0x02
     fc6:	1b 82       	std	Y+3, r1	; 0x03
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	41 2f       	mov	r20, r17
     fcc:	2f 2f       	mov	r18, r31
     fce:	0e 2f       	mov	r16, r30
     fd0:	e7 2e       	mov	r14, r23
     fd2:	c5 2e       	mov	r12, r21
     fd4:	a3 2e       	mov	r10, r19
     fd6:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	ef 90       	pop	r14
     fec:	cf 90       	pop	r12
     fee:	af 90       	pop	r10
     ff0:	8f 90       	pop	r8
     ff2:	08 95       	ret

00000ff4 <_ZN13LiquidCrystalC1Ehhhhhhhhhh>:
     ff4:	8f 92       	push	r8
     ff6:	af 92       	push	r10
     ff8:	cf 92       	push	r12
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	f6 2e       	mov	r15, r22
    100c:	f4 2f       	mov	r31, r20
    100e:	e2 2f       	mov	r30, r18
    1010:	70 2f       	mov	r23, r16
    1012:	5e 2d       	mov	r21, r14
    1014:	3c 2d       	mov	r19, r12
    1016:	dc 01       	movw	r26, r24
    1018:	13 96       	adiw	r26, 0x03	; 3
    101a:	1c 92       	st	X, r1
    101c:	1e 92       	st	-X, r1
    101e:	12 97       	sbiw	r26, 0x02	; 2
    1020:	02 e2       	ldi	r16, 0x22	; 34
    1022:	11 e0       	ldi	r17, 0x01	; 1
    1024:	0d 93       	st	X+, r16
    1026:	1c 93       	st	X, r17
    1028:	00 d0       	rcall	.+0      	; 0x102a <_ZN13LiquidCrystalC1Ehhhhhhhhhh+0x36>
    102a:	00 d0       	rcall	.+0      	; 0x102c <_ZN13LiquidCrystalC1Ehhhhhhhhhh+0x38>
    102c:	0d b7       	in	r16, 0x3d	; 61
    102e:	1e b7       	in	r17, 0x3e	; 62
    1030:	0f 5f       	subi	r16, 0xFF	; 255
    1032:	1f 4f       	sbci	r17, 0xFF	; 255
    1034:	ad b7       	in	r26, 0x3d	; 61
    1036:	be b7       	in	r27, 0x3e	; 62
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	ac 92       	st	X, r10
    103c:	d8 01       	movw	r26, r16
    103e:	11 96       	adiw	r26, 0x01	; 1
    1040:	8c 92       	st	X, r8
    1042:	11 97       	sbiw	r26, 0x01	; 1
    1044:	2c 85       	ldd	r18, Y+12	; 0x0c
    1046:	12 96       	adiw	r26, 0x02	; 2
    1048:	2c 93       	st	X, r18
    104a:	12 97       	sbiw	r26, 0x02	; 2
    104c:	2d 85       	ldd	r18, Y+13	; 0x0d
    104e:	13 96       	adiw	r26, 0x03	; 3
    1050:	2c 93       	st	X, r18
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	4f 2d       	mov	r20, r15
    1056:	2f ef       	ldi	r18, 0xFF	; 255
    1058:	0f 2f       	mov	r16, r31
    105a:	ee 2e       	mov	r14, r30
    105c:	c7 2e       	mov	r12, r23
    105e:	a5 2e       	mov	r10, r21
    1060:	83 2e       	mov	r8, r19
    1062:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	cf 90       	pop	r12
    107c:	af 90       	pop	r10
    107e:	8f 90       	pop	r8
    1080:	08 95       	ret

00001082 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh>:
    1082:	8f 92       	push	r8
    1084:	af 92       	push	r10
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	a6 2f       	mov	r26, r22
    109c:	f4 2e       	mov	r15, r20
    109e:	d2 2e       	mov	r13, r18
    10a0:	70 2f       	mov	r23, r16
    10a2:	5e 2d       	mov	r21, r14
    10a4:	3c 2d       	mov	r19, r12
    10a6:	ba 2d       	mov	r27, r10
    10a8:	fc 01       	movw	r30, r24
    10aa:	13 82       	std	Z+3, r1	; 0x03
    10ac:	12 82       	std	Z+2, r1	; 0x02
    10ae:	02 e2       	ldi	r16, 0x22	; 34
    10b0:	11 e0       	ldi	r17, 0x01	; 1
    10b2:	11 83       	std	Z+1, r17	; 0x01
    10b4:	00 83       	st	Z, r16
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh+0x36>
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <_ZN13LiquidCrystalC1Ehhhhhhhhhhh+0x38>
    10ba:	0d b7       	in	r16, 0x3d	; 61
    10bc:	1e b7       	in	r17, 0x3e	; 62
    10be:	0f 5f       	subi	r16, 0xFF	; 255
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
    10c2:	ed b7       	in	r30, 0x3d	; 61
    10c4:	fe b7       	in	r31, 0x3e	; 62
    10c6:	81 82       	std	Z+1, r8	; 0x01
    10c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    10ca:	f8 01       	movw	r30, r16
    10cc:	21 83       	std	Z+1, r18	; 0x01
    10ce:	2e 85       	ldd	r18, Y+14	; 0x0e
    10d0:	22 83       	std	Z+2, r18	; 0x02
    10d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    10d4:	23 83       	std	Z+3, r18	; 0x03
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	4a 2f       	mov	r20, r26
    10da:	2f 2d       	mov	r18, r15
    10dc:	0d 2d       	mov	r16, r13
    10de:	e7 2e       	mov	r14, r23
    10e0:	c5 2e       	mov	r12, r21
    10e2:	a3 2e       	mov	r10, r19
    10e4:	8b 2e       	mov	r8, r27
    10e6:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	df 90       	pop	r13
    1100:	cf 90       	pop	r12
    1102:	af 90       	pop	r10
    1104:	8f 90       	pop	r8
    1106:	08 95       	ret

00001108 <_ZN12PDControllerC1Ev>:
    1108:	2a ef       	ldi	r18, 0xFA	; 250
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	fc 01       	movw	r30, r24
    110e:	31 8f       	std	Z+25, r19	; 0x19
    1110:	20 8f       	std	Z+24, r18	; 0x18
    1112:	08 95       	ret

00001114 <_ZN12PDController7computeEd>:
    1114:	6f 92       	push	r6
    1116:	7f 92       	push	r7
    1118:	8f 92       	push	r8
    111a:	9f 92       	push	r9
    111c:	af 92       	push	r10
    111e:	bf 92       	push	r11
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	ec 01       	movw	r28, r24
    1132:	7a 01       	movw	r14, r20
    1134:	8b 01       	movw	r16, r22
    1136:	48 83       	st	Y, r20
    1138:	59 83       	std	Y+1, r21	; 0x01
    113a:	6a 83       	std	Y+2, r22	; 0x02
    113c:	7b 83       	std	Y+3, r23	; 0x03
    113e:	68 85       	ldd	r22, Y+8	; 0x08
    1140:	79 85       	ldd	r23, Y+9	; 0x09
    1142:	8a 85       	ldd	r24, Y+10	; 0x0a
    1144:	9b 85       	ldd	r25, Y+11	; 0x0b
    1146:	a8 01       	movw	r20, r16
    1148:	97 01       	movw	r18, r14
    114a:	0e 94 12 11 	call	0x2224	; 0x2224 <__subsf3>
    114e:	28 89       	ldd	r18, Y+16	; 0x10
    1150:	39 89       	ldd	r19, Y+17	; 0x11
    1152:	4a 89       	ldd	r20, Y+18	; 0x12
    1154:	5b 89       	ldd	r21, Y+19	; 0x13
    1156:	0e 94 43 11 	call	0x2286	; 0x2286 <__mulsf3>
    115a:	5b 01       	movw	r10, r22
    115c:	6c 01       	movw	r12, r24
    115e:	c8 01       	movw	r24, r16
    1160:	b7 01       	movw	r22, r14
    1162:	2c 85       	ldd	r18, Y+12	; 0x0c
    1164:	3d 85       	ldd	r19, Y+13	; 0x0d
    1166:	4e 85       	ldd	r20, Y+14	; 0x0e
    1168:	5f 85       	ldd	r21, Y+15	; 0x0f
    116a:	0e 94 12 11 	call	0x2224	; 0x2224 <__subsf3>
    116e:	2c 89       	ldd	r18, Y+20	; 0x14
    1170:	3d 89       	ldd	r19, Y+21	; 0x15
    1172:	4e 89       	ldd	r20, Y+22	; 0x16
    1174:	5f 89       	ldd	r21, Y+23	; 0x17
    1176:	0e 94 43 11 	call	0x2286	; 0x2286 <__mulsf3>
    117a:	9b 01       	movw	r18, r22
    117c:	ac 01       	movw	r20, r24
    117e:	c6 01       	movw	r24, r12
    1180:	b5 01       	movw	r22, r10
    1182:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__addsf3>
    1186:	d6 2e       	mov	r13, r22
    1188:	c7 2e       	mov	r12, r23
    118a:	b8 2e       	mov	r11, r24
    118c:	a9 2e       	mov	r10, r25
    118e:	a6 01       	movw	r20, r12
    1190:	95 01       	movw	r18, r10
    1192:	85 2f       	mov	r24, r21
    1194:	94 2f       	mov	r25, r20
    1196:	a3 2f       	mov	r26, r19
    1198:	b2 2f       	mov	r27, r18
    119a:	8c 83       	std	Y+4, r24	; 0x04
    119c:	9d 83       	std	Y+5, r25	; 0x05
    119e:	ae 83       	std	Y+6, r26	; 0x06
    11a0:	bf 83       	std	Y+7, r27	; 0x07
    11a2:	6e 8c       	ldd	r6, Y+30	; 0x1e
    11a4:	7f 8c       	ldd	r7, Y+31	; 0x1f
    11a6:	88 a0       	ldd	r8, Y+32	; 0x20
    11a8:	99 a0       	ldd	r9, Y+33	; 0x21
    11aa:	65 2f       	mov	r22, r21
    11ac:	74 2f       	mov	r23, r20
    11ae:	83 2f       	mov	r24, r19
    11b0:	92 2f       	mov	r25, r18
    11b2:	a4 01       	movw	r20, r8
    11b4:	93 01       	movw	r18, r6
    11b6:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gtsf2>
    11ba:	18 16       	cp	r1, r24
    11bc:	84 f0       	brlt	.+32     	; 0x11de <_ZN12PDController7computeEd+0xca>
    11be:	6a 8c       	ldd	r6, Y+26	; 0x1a
    11c0:	7b 8c       	ldd	r7, Y+27	; 0x1b
    11c2:	8c 8c       	ldd	r8, Y+28	; 0x1c
    11c4:	9d 8c       	ldd	r9, Y+29	; 0x1d
    11c6:	a6 01       	movw	r20, r12
    11c8:	95 01       	movw	r18, r10
    11ca:	65 2f       	mov	r22, r21
    11cc:	74 2f       	mov	r23, r20
    11ce:	83 2f       	mov	r24, r19
    11d0:	92 2f       	mov	r25, r18
    11d2:	a4 01       	movw	r20, r8
    11d4:	93 01       	movw	r18, r6
    11d6:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__ltsf2>
    11da:	87 ff       	sbrs	r24, 7
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <_ZN12PDController7computeEd+0xd2>
    11de:	6c 82       	std	Y+4, r6	; 0x04
    11e0:	7d 82       	std	Y+5, r7	; 0x05
    11e2:	8e 82       	std	Y+6, r8	; 0x06
    11e4:	9f 82       	std	Y+7, r9	; 0x07
    11e6:	ec 86       	std	Y+12, r14	; 0x0c
    11e8:	fd 86       	std	Y+13, r15	; 0x0d
    11ea:	0e 87       	std	Y+14, r16	; 0x0e
    11ec:	1f 87       	std	Y+15, r17	; 0x0f
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	df 90       	pop	r13
    11fc:	cf 90       	pop	r12
    11fe:	bf 90       	pop	r11
    1200:	af 90       	pop	r10
    1202:	9f 90       	pop	r9
    1204:	8f 90       	pop	r8
    1206:	7f 90       	pop	r7
    1208:	6f 90       	pop	r6
    120a:	08 95       	ret

0000120c <_ZN12PDController8autoTuneEdd>:
    120c:	4f 92       	push	r4
    120e:	5f 92       	push	r5
    1210:	6f 92       	push	r6
    1212:	7f 92       	push	r7
    1214:	8f 92       	push	r8
    1216:	9f 92       	push	r9
    1218:	af 92       	push	r10
    121a:	bf 92       	push	r11
    121c:	cf 92       	push	r12
    121e:	df 92       	push	r13
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	ec 01       	movw	r28, r24
    122e:	6a 01       	movw	r12, r20
    1230:	7b 01       	movw	r14, r22
    1232:	28 01       	movw	r4, r16
    1234:	39 01       	movw	r6, r18
    1236:	88 80       	ld	r8, Y
    1238:	99 80       	ldd	r9, Y+1	; 0x01
    123a:	aa 80       	ldd	r10, Y+2	; 0x02
    123c:	bb 80       	ldd	r11, Y+3	; 0x03
    123e:	c5 01       	movw	r24, r10
    1240:	b4 01       	movw	r22, r8
    1242:	a7 01       	movw	r20, r14
    1244:	96 01       	movw	r18, r12
    1246:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gtsf2>
    124a:	18 16       	cp	r1, r24
    124c:	bc f4       	brge	.+46     	; 0x127c <_ZN12PDController8autoTuneEdd+0x70>
    124e:	c8 88       	ldd	r12, Y+16	; 0x10
    1250:	d9 88       	ldd	r13, Y+17	; 0x11
    1252:	ea 88       	ldd	r14, Y+18	; 0x12
    1254:	fb 88       	ldd	r15, Y+19	; 0x13
    1256:	c7 01       	movw	r24, r14
    1258:	b6 01       	movw	r22, r12
    125a:	2a e0       	ldi	r18, 0x0A	; 10
    125c:	37 ed       	ldi	r19, 0xD7	; 215
    125e:	43 e2       	ldi	r20, 0x23	; 35
    1260:	5c e3       	ldi	r21, 0x3C	; 60
    1262:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gtsf2>
    1266:	18 16       	cp	r1, r24
    1268:	4c f4       	brge	.+18     	; 0x127c <_ZN12PDController8autoTuneEdd+0x70>
    126a:	c7 01       	movw	r24, r14
    126c:	b6 01       	movw	r22, r12
    126e:	2d ec       	ldi	r18, 0xCD	; 205
    1270:	3c ec       	ldi	r19, 0xCC	; 204
    1272:	4c ec       	ldi	r20, 0xCC	; 204
    1274:	5d e3       	ldi	r21, 0x3D	; 61
    1276:	0e 94 12 11 	call	0x2224	; 0x2224 <__subsf3>
    127a:	1e c0       	rjmp	.+60     	; 0x12b8 <_ZN12PDController8autoTuneEdd+0xac>
    127c:	c5 01       	movw	r24, r10
    127e:	b4 01       	movw	r22, r8
    1280:	a3 01       	movw	r20, r6
    1282:	92 01       	movw	r18, r4
    1284:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__ltsf2>
    1288:	87 ff       	sbrs	r24, 7
    128a:	1a c0       	rjmp	.+52     	; 0x12c0 <_ZN12PDController8autoTuneEdd+0xb4>
    128c:	c8 88       	ldd	r12, Y+16	; 0x10
    128e:	d9 88       	ldd	r13, Y+17	; 0x11
    1290:	ea 88       	ldd	r14, Y+18	; 0x12
    1292:	fb 88       	ldd	r15, Y+19	; 0x13
    1294:	c7 01       	movw	r24, r14
    1296:	b6 01       	movw	r22, r12
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	48 e4       	ldi	r20, 0x48	; 72
    129e:	53 e4       	ldi	r21, 0x43	; 67
    12a0:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__ltsf2>
    12a4:	87 ff       	sbrs	r24, 7
    12a6:	0c c0       	rjmp	.+24     	; 0x12c0 <_ZN12PDController8autoTuneEdd+0xb4>
    12a8:	c7 01       	movw	r24, r14
    12aa:	b6 01       	movw	r22, r12
    12ac:	2d ec       	ldi	r18, 0xCD	; 205
    12ae:	3c ec       	ldi	r19, 0xCC	; 204
    12b0:	4c ec       	ldi	r20, 0xCC	; 204
    12b2:	5d e3       	ldi	r21, 0x3D	; 61
    12b4:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__addsf3>
    12b8:	68 8b       	std	Y+16, r22	; 0x10
    12ba:	79 8b       	std	Y+17, r23	; 0x11
    12bc:	8a 8b       	std	Y+18, r24	; 0x12
    12be:	9b 8b       	std	Y+19, r25	; 0x13
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	cf 90       	pop	r12
    12d0:	bf 90       	pop	r11
    12d2:	af 90       	pop	r10
    12d4:	9f 90       	pop	r9
    12d6:	8f 90       	pop	r8
    12d8:	7f 90       	pop	r7
    12da:	6f 90       	pop	r6
    12dc:	5f 90       	pop	r5
    12de:	4f 90       	pop	r4
    12e0:	08 95       	ret

000012e2 <_ZN12PDController10setTuningsEdd>:
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	ec 01       	movw	r28, r24
    12f8:	5a 01       	movw	r10, r20
    12fa:	6b 01       	movw	r12, r22
    12fc:	78 01       	movw	r14, r16
    12fe:	89 01       	movw	r16, r18
    1300:	68 8d       	ldd	r22, Y+24	; 0x18
    1302:	79 8d       	ldd	r23, Y+25	; 0x19
    1304:	88 27       	eor	r24, r24
    1306:	77 fd       	sbrc	r23, 7
    1308:	80 95       	com	r24
    130a:	98 2f       	mov	r25, r24
    130c:	0e 94 ab 13 	call	0x2756	; 0x2756 <__floatsisf>
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	4a e7       	ldi	r20, 0x7A	; 122
    1316:	54 e4       	ldi	r21, 0x44	; 68
    1318:	0e 94 3d 12 	call	0x247a	; 0x247a <__divsf3>
    131c:	56 2f       	mov	r21, r22
    131e:	47 2f       	mov	r20, r23
    1320:	38 2f       	mov	r19, r24
    1322:	29 2f       	mov	r18, r25
    1324:	a8 8a       	std	Y+16, r10	; 0x10
    1326:	b9 8a       	std	Y+17, r11	; 0x11
    1328:	ca 8a       	std	Y+18, r12	; 0x12
    132a:	db 8a       	std	Y+19, r13	; 0x13
    132c:	c8 01       	movw	r24, r16
    132e:	b7 01       	movw	r22, r14
    1330:	da 01       	movw	r26, r20
    1332:	f9 01       	movw	r30, r18
    1334:	2b 2f       	mov	r18, r27
    1336:	3a 2f       	mov	r19, r26
    1338:	4f 2f       	mov	r20, r31
    133a:	5e 2f       	mov	r21, r30
    133c:	0e 94 3d 12 	call	0x247a	; 0x247a <__divsf3>
    1340:	6c 8b       	std	Y+20, r22	; 0x14
    1342:	7d 8b       	std	Y+21, r23	; 0x15
    1344:	8e 8b       	std	Y+22, r24	; 0x16
    1346:	9f 8b       	std	Y+23, r25	; 0x17
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	df 90       	pop	r13
    1356:	cf 90       	pop	r12
    1358:	bf 90       	pop	r11
    135a:	af 90       	pop	r10
    135c:	08 95       	ret

0000135e <_ZN12PDController15setOutputLimitsEdd>:
    135e:	6f 92       	push	r6
    1360:	7f 92       	push	r7
    1362:	8f 92       	push	r8
    1364:	9f 92       	push	r9
    1366:	af 92       	push	r10
    1368:	bf 92       	push	r11
    136a:	cf 92       	push	r12
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	ec 01       	movw	r28, r24
    137c:	5a 01       	movw	r10, r20
    137e:	6b 01       	movw	r12, r22
    1380:	78 01       	movw	r14, r16
    1382:	89 01       	movw	r16, r18
    1384:	cb 01       	movw	r24, r22
    1386:	ba 01       	movw	r22, r20
    1388:	a8 01       	movw	r20, r16
    138a:	97 01       	movw	r18, r14
    138c:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gtsf2>
    1390:	18 16       	cp	r1, r24
    1392:	2c f1       	brlt	.+74     	; 0x13de <_ZN12PDController15setOutputLimitsEdd+0x80>
    1394:	aa 8e       	std	Y+26, r10	; 0x1a
    1396:	bb 8e       	std	Y+27, r11	; 0x1b
    1398:	cc 8e       	std	Y+28, r12	; 0x1c
    139a:	dd 8e       	std	Y+29, r13	; 0x1d
    139c:	ee 8e       	std	Y+30, r14	; 0x1e
    139e:	ff 8e       	std	Y+31, r15	; 0x1f
    13a0:	08 a3       	std	Y+32, r16	; 0x20
    13a2:	19 a3       	std	Y+33, r17	; 0x21
    13a4:	6c 80       	ldd	r6, Y+4	; 0x04
    13a6:	7d 80       	ldd	r7, Y+5	; 0x05
    13a8:	8e 80       	ldd	r8, Y+6	; 0x06
    13aa:	9f 80       	ldd	r9, Y+7	; 0x07
    13ac:	c4 01       	movw	r24, r8
    13ae:	b3 01       	movw	r22, r6
    13b0:	a8 01       	movw	r20, r16
    13b2:	97 01       	movw	r18, r14
    13b4:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gtsf2>
    13b8:	18 16       	cp	r1, r24
    13ba:	2c f4       	brge	.+10     	; 0x13c6 <_ZN12PDController15setOutputLimitsEdd+0x68>
    13bc:	ec 82       	std	Y+4, r14	; 0x04
    13be:	fd 82       	std	Y+5, r15	; 0x05
    13c0:	0e 83       	std	Y+6, r16	; 0x06
    13c2:	1f 83       	std	Y+7, r17	; 0x07
    13c4:	0c c0       	rjmp	.+24     	; 0x13de <_ZN12PDController15setOutputLimitsEdd+0x80>
    13c6:	c4 01       	movw	r24, r8
    13c8:	b3 01       	movw	r22, r6
    13ca:	a6 01       	movw	r20, r12
    13cc:	95 01       	movw	r18, r10
    13ce:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__ltsf2>
    13d2:	87 ff       	sbrs	r24, 7
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <_ZN12PDController15setOutputLimitsEdd+0x80>
    13d6:	ac 82       	std	Y+4, r10	; 0x04
    13d8:	bd 82       	std	Y+5, r11	; 0x05
    13da:	ce 82       	std	Y+6, r12	; 0x06
    13dc:	df 82       	std	Y+7, r13	; 0x07
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	cf 90       	pop	r12
    13ee:	bf 90       	pop	r11
    13f0:	af 90       	pop	r10
    13f2:	9f 90       	pop	r9
    13f4:	8f 90       	pop	r8
    13f6:	7f 90       	pop	r7
    13f8:	6f 90       	pop	r6
    13fa:	08 95       	ret

000013fc <_Z17PDController_initv>:
    13fc:	f8 94       	cli
    13fe:	10 92 80 00 	sts	0x0080, r1
    1402:	e1 e8       	ldi	r30, 0x81	; 129
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	10 82       	st	Z, r1
    1408:	10 92 85 00 	sts	0x0085, r1
    140c:	10 92 84 00 	sts	0x0084, r1
    1410:	89 e0       	ldi	r24, 0x09	; 9
    1412:	9d e3       	ldi	r25, 0x3D	; 61
    1414:	90 93 89 00 	sts	0x0089, r25
    1418:	80 93 88 00 	sts	0x0088, r24
    141c:	80 81       	ld	r24, Z
    141e:	88 60       	ori	r24, 0x08	; 8
    1420:	80 83       	st	Z, r24
    1422:	80 81       	ld	r24, Z
    1424:	84 60       	ori	r24, 0x04	; 4
    1426:	80 83       	st	Z, r24
    1428:	ef e6       	ldi	r30, 0x6F	; 111
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	82 60       	ori	r24, 0x02	; 2
    1430:	80 83       	st	Z, r24
    1432:	78 94       	sei
    1434:	08 95       	ret

00001436 <__vector_7>:
    1436:	1f 92       	push	r1
    1438:	0f 92       	push	r0
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	0f 92       	push	r0
    143e:	11 24       	eor	r1, r1
    1440:	2f 93       	push	r18
    1442:	3f 93       	push	r19
    1444:	4f 93       	push	r20
    1446:	5f 93       	push	r21
    1448:	6f 93       	push	r22
    144a:	8f 93       	push	r24
    144c:	9f 93       	push	r25
    144e:	af 93       	push	r26
    1450:	bf 93       	push	r27
    1452:	ef 93       	push	r30
    1454:	ff 93       	push	r31
    1456:	80 91 2e 01 	lds	r24, 0x012E
    145a:	8f 5f       	subi	r24, 0xFF	; 255
    145c:	80 93 2e 01 	sts	0x012E, r24
    1460:	80 91 2e 01 	lds	r24, 0x012E
    1464:	88 23       	and	r24, r24
    1466:	19 f0       	breq	.+6      	; 0x146e <__vector_7+0x38>
    1468:	e3 e2       	ldi	r30, 0x23	; 35
    146a:	f3 e0       	ldi	r31, 0x03	; 3
    146c:	40 c0       	rjmp	.+128    	; 0x14ee <__vector_7+0xb8>
    146e:	e4 e2       	ldi	r30, 0x24	; 36
    1470:	f3 e0       	ldi	r31, 0x03	; 3
    1472:	66 81       	ldd	r22, Z+6	; 0x06
    1474:	66 23       	and	r22, r22
    1476:	19 f4       	brne	.+6      	; 0x147e <__vector_7+0x48>
    1478:	87 81       	ldd	r24, Z+7	; 0x07
    147a:	88 23       	and	r24, r24
    147c:	f9 f0       	breq	.+62     	; 0x14bc <__vector_7+0x86>
    147e:	84 81       	ldd	r24, Z+4	; 0x04
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	25 81       	ldd	r18, Z+5	; 0x05
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	ac 01       	movw	r20, r24
    1488:	42 1b       	sub	r20, r18
    148a:	53 0b       	sbc	r21, r19
    148c:	14 16       	cp	r1, r20
    148e:	15 06       	cpc	r1, r21
    1490:	44 f4       	brge	.+16     	; 0x14a2 <__vector_7+0x6c>
    1492:	66 23       	and	r22, r22
    1494:	a1 f0       	breq	.+40     	; 0x14be <__vector_7+0x88>
    1496:	26 0f       	add	r18, r22
    1498:	31 1d       	adc	r19, r1
    149a:	28 17       	cp	r18, r24
    149c:	39 07       	cpc	r19, r25
    149e:	7c f4       	brge	.+30     	; 0x14be <__vector_7+0x88>
    14a0:	0b c0       	rjmp	.+22     	; 0x14b8 <__vector_7+0x82>
    14a2:	41 15       	cp	r20, r1
    14a4:	51 05       	cpc	r21, r1
    14a6:	59 f0       	breq	.+22     	; 0x14be <__vector_7+0x88>
    14a8:	47 81       	ldd	r20, Z+7	; 0x07
    14aa:	44 23       	and	r20, r20
    14ac:	41 f0       	breq	.+16     	; 0x14be <__vector_7+0x88>
    14ae:	24 1b       	sub	r18, r20
    14b0:	31 09       	sbc	r19, r1
    14b2:	82 17       	cp	r24, r18
    14b4:	93 07       	cpc	r25, r19
    14b6:	1c f4       	brge	.+6      	; 0x14be <__vector_7+0x88>
    14b8:	c9 01       	movw	r24, r18
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <__vector_7+0x88>
    14bc:	84 81       	ldd	r24, Z+4	; 0x04
    14be:	85 83       	std	Z+5, r24	; 0x05
    14c0:	85 81       	ldd	r24, Z+5	; 0x05
    14c2:	88 23       	and	r24, r24
    14c4:	71 f0       	breq	.+28     	; 0x14e2 <__vector_7+0xac>
    14c6:	90 81       	ld	r25, Z
    14c8:	a1 81       	ldd	r26, Z+1	; 0x01
    14ca:	b2 81       	ldd	r27, Z+2	; 0x02
    14cc:	83 81       	ldd	r24, Z+3	; 0x03
    14ce:	99 23       	and	r25, r25
    14d0:	21 f4       	brne	.+8      	; 0x14da <__vector_7+0xa4>
    14d2:	9c 91       	ld	r25, X
    14d4:	98 2b       	or	r25, r24
    14d6:	9c 93       	st	X, r25
    14d8:	04 c0       	rjmp	.+8      	; 0x14e2 <__vector_7+0xac>
    14da:	9c 91       	ld	r25, X
    14dc:	80 95       	com	r24
    14de:	89 23       	and	r24, r25
    14e0:	8c 93       	st	X, r24
    14e2:	39 96       	adiw	r30, 0x09	; 9
    14e4:	83 e0       	ldi	r24, 0x03	; 3
    14e6:	e6 33       	cpi	r30, 0x36	; 54
    14e8:	f8 07       	cpc	r31, r24
    14ea:	19 f6       	brne	.-122    	; 0x1472 <__vector_7+0x3c>
    14ec:	bd cf       	rjmp	.-134    	; 0x1468 <__vector_7+0x32>
    14ee:	80 81       	ld	r24, Z
    14f0:	87 fd       	sbrc	r24, 7
    14f2:	13 c0       	rjmp	.+38     	; 0x151a <__vector_7+0xe4>
    14f4:	80 91 2e 01 	lds	r24, 0x012E
    14f8:	96 81       	ldd	r25, Z+6	; 0x06
    14fa:	98 17       	cp	r25, r24
    14fc:	71 f4       	brne	.+28     	; 0x151a <__vector_7+0xe4>
    14fe:	81 81       	ldd	r24, Z+1	; 0x01
    1500:	a2 81       	ldd	r26, Z+2	; 0x02
    1502:	b3 81       	ldd	r27, Z+3	; 0x03
    1504:	94 81       	ldd	r25, Z+4	; 0x04
    1506:	88 23       	and	r24, r24
    1508:	29 f4       	brne	.+10     	; 0x1514 <__vector_7+0xde>
    150a:	2c 91       	ld	r18, X
    150c:	89 2f       	mov	r24, r25
    150e:	80 95       	com	r24
    1510:	82 23       	and	r24, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <__vector_7+0xe2>
    1514:	8c 91       	ld	r24, X
    1516:	89 2b       	or	r24, r25
    1518:	8c 93       	st	X, r24
    151a:	39 96       	adiw	r30, 0x09	; 9
    151c:	83 e0       	ldi	r24, 0x03	; 3
    151e:	e5 33       	cpi	r30, 0x35	; 53
    1520:	f8 07       	cpc	r31, r24
    1522:	29 f7       	brne	.-54     	; 0x14ee <__vector_7+0xb8>
    1524:	ff 91       	pop	r31
    1526:	ef 91       	pop	r30
    1528:	bf 91       	pop	r27
    152a:	af 91       	pop	r26
    152c:	9f 91       	pop	r25
    152e:	8f 91       	pop	r24
    1530:	6f 91       	pop	r22
    1532:	5f 91       	pop	r21
    1534:	4f 91       	pop	r20
    1536:	3f 91       	pop	r19
    1538:	2f 91       	pop	r18
    153a:	0f 90       	pop	r0
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	0f 90       	pop	r0
    1540:	1f 90       	pop	r1
    1542:	18 95       	reti

00001544 <_Z12SoftPWMBeginh>:
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	97 bb       	out	0x17, r25	; 23
    1548:	92 e0       	ldi	r25, 0x02	; 2
    154a:	90 93 b1 00 	sts	0x00B1, r25
    154e:	90 93 b0 00 	sts	0x00B0, r25
    1552:	22 e8       	ldi	r18, 0x82	; 130
    1554:	20 93 b3 00 	sts	0x00B3, r18
    1558:	e0 e7       	ldi	r30, 0x70	; 112
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	90 83       	st	Z, r25
    155e:	90 81       	ld	r25, Z
    1560:	9f ef       	ldi	r25, 0xFF	; 255
    1562:	90 93 23 03 	sts	0x0323, r25
    1566:	10 92 24 03 	sts	0x0324, r1
    156a:	10 92 26 03 	sts	0x0326, r1
    156e:	10 92 25 03 	sts	0x0325, r1
    1572:	10 92 2a 03 	sts	0x032A, r1
    1576:	10 92 2b 03 	sts	0x032B, r1
    157a:	90 93 2c 03 	sts	0x032C, r25
    157e:	10 92 2d 03 	sts	0x032D, r1
    1582:	10 92 2f 03 	sts	0x032F, r1
    1586:	10 92 2e 03 	sts	0x032E, r1
    158a:	10 92 33 03 	sts	0x0333, r1
    158e:	10 92 34 03 	sts	0x0334, r1
    1592:	80 93 22 03 	sts	0x0322, r24
    1596:	08 95       	ret

00001598 <_Z18SoftPWMSetPolarityah>:
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	66 23       	and	r22, r22
    159c:	09 f4       	brne	.+2      	; 0x15a0 <_Z18SoftPWMSetPolarityah+0x8>
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	30 91 23 03 	lds	r19, 0x0323
    15a4:	20 91 2c 03 	lds	r18, 0x032C
    15a8:	87 ff       	sbrs	r24, 7
    15aa:	06 c0       	rjmp	.+12     	; 0x15b8 <_Z18SoftPWMSetPolarityah+0x20>
    15ac:	08 c0       	rjmp	.+16     	; 0x15be <_Z18SoftPWMSetPolarityah+0x26>
    15ae:	90 93 24 03 	sts	0x0324, r25
    15b2:	87 ff       	sbrs	r24, 7
    15b4:	0a c0       	rjmp	.+20     	; 0x15ca <_Z18SoftPWMSetPolarityah+0x32>
    15b6:	0c c0       	rjmp	.+24     	; 0x15d0 <_Z18SoftPWMSetPolarityah+0x38>
    15b8:	38 17       	cp	r19, r24
    15ba:	39 f4       	brne	.+14     	; 0x15ca <_Z18SoftPWMSetPolarityah+0x32>
    15bc:	f8 cf       	rjmp	.-16     	; 0x15ae <_Z18SoftPWMSetPolarityah+0x16>
    15be:	37 ff       	sbrs	r19, 7
    15c0:	f6 cf       	rjmp	.-20     	; 0x15ae <_Z18SoftPWMSetPolarityah+0x16>
    15c2:	06 c0       	rjmp	.+12     	; 0x15d0 <_Z18SoftPWMSetPolarityah+0x38>
    15c4:	90 93 2d 03 	sts	0x032D, r25
    15c8:	08 95       	ret
    15ca:	28 17       	cp	r18, r24
    15cc:	19 f4       	brne	.+6      	; 0x15d4 <_Z18SoftPWMSetPolarityah+0x3c>
    15ce:	fa cf       	rjmp	.-12     	; 0x15c4 <_Z18SoftPWMSetPolarityah+0x2c>
    15d0:	27 ff       	sbrs	r18, 7
    15d2:	f8 cf       	rjmp	.-16     	; 0x15c4 <_Z18SoftPWMSetPolarityah+0x2c>
    15d4:	08 95       	ret

000015d6 <_Z10SoftPWMSetahh>:
    15d6:	1f 93       	push	r17
    15d8:	18 2f       	mov	r17, r24
    15da:	44 23       	and	r20, r20
    15dc:	29 f0       	breq	.+10     	; 0x15e8 <_Z10SoftPWMSetahh+0x12>
    15de:	10 92 b2 00 	sts	0x00B2, r1
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	80 93 2e 01 	sts	0x012E, r24
    15e8:	e3 e2       	ldi	r30, 0x23	; 35
    15ea:	f3 e0       	ldi	r31, 0x03	; 3
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	20 81       	ld	r18, Z
    15f2:	17 ff       	sbrs	r17, 7
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <_Z10SoftPWMSetahh+0x26>
    15f6:	27 ff       	sbrs	r18, 7
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <_Z10SoftPWMSetahh+0x2a>
    15fa:	05 c0       	rjmp	.+10     	; 0x1606 <_Z10SoftPWMSetahh+0x30>
    15fc:	21 17       	cp	r18, r17
    15fe:	19 f4       	brne	.+6      	; 0x1606 <_Z10SoftPWMSetahh+0x30>
    1600:	65 83       	std	Z+5, r22	; 0x05
    1602:	17 ff       	sbrs	r17, 7
    1604:	4d c0       	rjmp	.+154    	; 0x16a0 <_Z10SoftPWMSetahh+0xca>
    1606:	8f 3f       	cpi	r24, 0xFF	; 255
    1608:	19 f4       	brne	.+6      	; 0x1610 <_Z10SoftPWMSetahh+0x3a>
    160a:	20 81       	ld	r18, Z
    160c:	27 fd       	sbrc	r18, 7
    160e:	89 2f       	mov	r24, r25
    1610:	9f 5f       	subi	r25, 0xFF	; 255
    1612:	39 96       	adiw	r30, 0x09	; 9
    1614:	92 30       	cpi	r25, 0x02	; 2
    1616:	61 f7       	brne	.-40     	; 0x15f0 <_Z10SoftPWMSetahh+0x1a>
    1618:	17 fd       	sbrc	r17, 7
    161a:	42 c0       	rjmp	.+132    	; 0x16a0 <_Z10SoftPWMSetahh+0xca>
    161c:	8f 3f       	cpi	r24, 0xFF	; 255
    161e:	09 f4       	brne	.+2      	; 0x1622 <_Z10SoftPWMSetahh+0x4c>
    1620:	3f c0       	rjmp	.+126    	; 0x16a0 <_Z10SoftPWMSetahh+0xca>
    1622:	99 27       	eor	r25, r25
    1624:	87 fd       	sbrc	r24, 7
    1626:	90 95       	com	r25
    1628:	dc 01       	movw	r26, r24
    162a:	23 e0       	ldi	r18, 0x03	; 3
    162c:	aa 0f       	add	r26, r26
    162e:	bb 1f       	adc	r27, r27
    1630:	2a 95       	dec	r18
    1632:	e1 f7       	brne	.-8      	; 0x162c <_Z10SoftPWMSetahh+0x56>
    1634:	a8 0f       	add	r26, r24
    1636:	b9 1f       	adc	r27, r25
    1638:	ad 5d       	subi	r26, 0xDD	; 221
    163a:	bc 4f       	sbci	r27, 0xFC	; 252
    163c:	1c 93       	st	X, r17
    163e:	80 91 22 03 	lds	r24, 0x0322
    1642:	11 96       	adiw	r26, 0x01	; 1
    1644:	8c 93       	st	X, r24
    1646:	11 97       	sbiw	r26, 0x01	; 1
    1648:	21 2f       	mov	r18, r17
    164a:	33 27       	eor	r19, r19
    164c:	27 fd       	sbrc	r18, 7
    164e:	30 95       	com	r19
    1650:	f9 01       	movw	r30, r18
    1652:	ea 57       	subi	r30, 0x7A	; 122
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	e4 91       	lpm	r30, Z+
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	ee 0f       	add	r30, r30
    165c:	ff 1f       	adc	r31, r31
    165e:	ee 58       	subi	r30, 0x8E	; 142
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	45 91       	lpm	r20, Z+
    1664:	54 91       	lpm	r21, Z+
    1666:	12 96       	adiw	r26, 0x02	; 2
    1668:	4c 93       	st	X, r20
    166a:	12 97       	sbiw	r26, 0x02	; 2
    166c:	13 96       	adiw	r26, 0x03	; 3
    166e:	5c 93       	st	X, r21
    1670:	13 97       	sbiw	r26, 0x03	; 3
    1672:	26 56       	subi	r18, 0x66	; 102
    1674:	3f 4f       	sbci	r19, 0xFF	; 255
    1676:	f9 01       	movw	r30, r18
    1678:	24 91       	lpm	r18, Z+
    167a:	14 96       	adiw	r26, 0x04	; 4
    167c:	2c 93       	st	X, r18
    167e:	14 97       	sbiw	r26, 0x04	; 4
    1680:	15 96       	adiw	r26, 0x05	; 5
    1682:	6c 93       	st	X, r22
    1684:	15 97       	sbiw	r26, 0x05	; 5
    1686:	88 23       	and	r24, r24
    1688:	19 f4       	brne	.+6      	; 0x1690 <_Z10SoftPWMSetahh+0xba>
    168a:	81 2f       	mov	r24, r17
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <_Z10SoftPWMSetahh+0xbe>
    1690:	81 2f       	mov	r24, r17
    1692:	61 e0       	ldi	r22, 0x01	; 1
    1694:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
    1698:	81 2f       	mov	r24, r17
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
    16a0:	1f 91       	pop	r17
    16a2:	08 95       	ret

000016a4 <_Z17SoftPWMSetPercentahh>:
    16a4:	e8 2f       	mov	r30, r24
    16a6:	8f ef       	ldi	r24, 0xFF	; 255
    16a8:	68 9f       	mul	r22, r24
    16aa:	b0 01       	movw	r22, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	cb 01       	movw	r24, r22
    16b0:	64 e6       	ldi	r22, 0x64	; 100
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <__udivmodhi4>
    16b8:	8e 2f       	mov	r24, r30
    16ba:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <_Z10SoftPWMSetahh>
    16be:	08 95       	ret

000016c0 <_Z10SoftPWMEnda>:
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	18 2f       	mov	r17, r24
    16ca:	c3 e2       	ldi	r28, 0x23	; 35
    16cc:	d3 e0       	ldi	r29, 0x03	; 3
    16ce:	0f ef       	ldi	r16, 0xFF	; 255
    16d0:	88 81       	ld	r24, Y
    16d2:	17 ff       	sbrs	r17, 7
    16d4:	03 c0       	rjmp	.+6      	; 0x16dc <_Z10SoftPWMEnda+0x1c>
    16d6:	87 ff       	sbrs	r24, 7
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <_Z10SoftPWMEnda+0x20>
    16da:	0b c0       	rjmp	.+22     	; 0x16f2 <_Z10SoftPWMEnda+0x32>
    16dc:	81 17       	cp	r24, r17
    16de:	49 f4       	brne	.+18     	; 0x16f2 <_Z10SoftPWMEnda+0x32>
    16e0:	88 81       	ld	r24, Y
    16e2:	61 e0       	ldi	r22, 0x01	; 1
    16e4:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
    16e8:	88 81       	ld	r24, Y
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
    16f0:	08 83       	st	Y, r16
    16f2:	29 96       	adiw	r28, 0x09	; 9
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	c5 33       	cpi	r28, 0x35	; 53
    16f8:	d8 07       	cpc	r29, r24
    16fa:	51 f7       	brne	.-44     	; 0x16d0 <_Z10SoftPWMEnda+0x10>
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	08 95       	ret

00001706 <_Z18SoftPWMSetFadeTimeajj>:
    1706:	2f 92       	push	r2
    1708:	3f 92       	push	r3
    170a:	4f 92       	push	r4
    170c:	5f 92       	push	r5
    170e:	6f 92       	push	r6
    1710:	7f 92       	push	r7
    1712:	8f 92       	push	r8
    1714:	9f 92       	push	r9
    1716:	af 92       	push	r10
    1718:	bf 92       	push	r11
    171a:	cf 92       	push	r12
    171c:	df 92       	push	r13
    171e:	ef 92       	push	r14
    1720:	ff 92       	push	r15
    1722:	1f 93       	push	r17
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	00 d0       	rcall	.+0      	; 0x172a <_Z18SoftPWMSetFadeTimeajj+0x24>
    172a:	00 d0       	rcall	.+0      	; 0x172c <_Z18SoftPWMSetFadeTimeajj+0x26>
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	18 2f       	mov	r17, r24
    1732:	4b 01       	movw	r8, r22
    1734:	5a 01       	movw	r10, r20
    1736:	23 e2       	ldi	r18, 0x23	; 35
    1738:	33 e0       	ldi	r19, 0x03	; 3
    173a:	2a 01       	movw	r4, r20
    173c:	66 24       	eor	r6, r6
    173e:	77 24       	eor	r7, r7
    1740:	40 ef       	ldi	r20, 0xF0	; 240
    1742:	c4 2e       	mov	r12, r20
    1744:	4f e0       	ldi	r20, 0x0F	; 15
    1746:	d4 2e       	mov	r13, r20
    1748:	e1 2c       	mov	r14, r1
    174a:	f1 2c       	mov	r15, r1
    174c:	cb 01       	movw	r24, r22
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	ab 83       	std	Y+3, r26	; 0x03
    1758:	bc 83       	std	Y+4, r27	; 0x04
    175a:	19 01       	movw	r2, r18
    175c:	d1 01       	movw	r26, r2
    175e:	8c 91       	ld	r24, X
    1760:	17 ff       	sbrs	r17, 7
    1762:	03 c0       	rjmp	.+6      	; 0x176a <_Z18SoftPWMSetFadeTimeajj+0x64>
    1764:	87 ff       	sbrs	r24, 7
    1766:	03 c0       	rjmp	.+6      	; 0x176e <_Z18SoftPWMSetFadeTimeajj+0x68>
    1768:	26 c0       	rjmp	.+76     	; 0x17b6 <_Z18SoftPWMSetFadeTimeajj+0xb0>
    176a:	81 17       	cp	r24, r17
    176c:	21 f5       	brne	.+72     	; 0x17b6 <_Z18SoftPWMSetFadeTimeajj+0xb0>
    176e:	81 14       	cp	r8, r1
    1770:	91 04       	cpc	r9, r1
    1772:	51 f0       	breq	.+20     	; 0x1788 <_Z18SoftPWMSetFadeTimeajj+0x82>
    1774:	c7 01       	movw	r24, r14
    1776:	b6 01       	movw	r22, r12
    1778:	29 81       	ldd	r18, Y+1	; 0x01
    177a:	3a 81       	ldd	r19, Y+2	; 0x02
    177c:	4b 81       	ldd	r20, Y+3	; 0x03
    177e:	5c 81       	ldd	r21, Y+4	; 0x04
    1780:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__udivmodsi4>
    1784:	c9 01       	movw	r24, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <_Z18SoftPWMSetFadeTimeajj+0x86>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	f1 01       	movw	r30, r2
    178e:	87 83       	std	Z+7, r24	; 0x07
    1790:	a1 14       	cp	r10, r1
    1792:	b1 04       	cpc	r11, r1
    1794:	41 f0       	breq	.+16     	; 0x17a6 <_Z18SoftPWMSetFadeTimeajj+0xa0>
    1796:	c7 01       	movw	r24, r14
    1798:	b6 01       	movw	r22, r12
    179a:	a3 01       	movw	r20, r6
    179c:	92 01       	movw	r18, r4
    179e:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__udivmodsi4>
    17a2:	c9 01       	movw	r24, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <_Z18SoftPWMSetFadeTimeajj+0xa4>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	d1 01       	movw	r26, r2
    17ac:	18 96       	adiw	r26, 0x08	; 8
    17ae:	8c 93       	st	X, r24
    17b0:	18 97       	sbiw	r26, 0x08	; 8
    17b2:	17 ff       	sbrs	r17, 7
    17b4:	09 c0       	rjmp	.+18     	; 0x17c8 <_Z18SoftPWMSetFadeTimeajj+0xc2>
    17b6:	e9 e0       	ldi	r30, 0x09	; 9
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	2e 0e       	add	r2, r30
    17bc:	3f 1e       	adc	r3, r31
    17be:	f5 e3       	ldi	r31, 0x35	; 53
    17c0:	2f 16       	cp	r2, r31
    17c2:	f3 e0       	ldi	r31, 0x03	; 3
    17c4:	3f 06       	cpc	r3, r31
    17c6:	51 f6       	brne	.-108    	; 0x175c <_Z18SoftPWMSetFadeTimeajj+0x56>
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	1f 91       	pop	r17
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	df 90       	pop	r13
    17dc:	cf 90       	pop	r12
    17de:	bf 90       	pop	r11
    17e0:	af 90       	pop	r10
    17e2:	9f 90       	pop	r9
    17e4:	8f 90       	pop	r8
    17e6:	7f 90       	pop	r7
    17e8:	6f 90       	pop	r6
    17ea:	5f 90       	pop	r5
    17ec:	4f 90       	pop	r4
    17ee:	3f 90       	pop	r3
    17f0:	2f 90       	pop	r2
    17f2:	08 95       	ret

000017f4 <_ZN12StepperMotorC1Ehhhhh>:
    17f4:	ef 92       	push	r14
    17f6:	0f 93       	push	r16
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	ec 01       	movw	r28, r24
    17fe:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN12AccelStepperC1Ehhhhh>
    1802:	83 e3       	ldi	r24, 0x33	; 51
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	99 83       	std	Y+1, r25	; 0x01
    1808:	88 83       	st	Y, r24
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	0f 91       	pop	r16
    1810:	ef 90       	pop	r14
    1812:	08 95       	ret

00001814 <_ZN12StepperMotor12advanceFrameEi>:
    1814:	ef 92       	push	r14
    1816:	ff 92       	push	r15
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	7c 01       	movw	r14, r24
    1822:	eb 01       	movw	r28, r22
    1824:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN12AccelStepper15currentPositionEv>
    1828:	ab 01       	movw	r20, r22
    182a:	bc 01       	movw	r22, r24
    182c:	8e 01       	movw	r16, r28
    182e:	22 27       	eor	r18, r18
    1830:	17 fd       	sbrc	r17, 7
    1832:	20 95       	com	r18
    1834:	32 2f       	mov	r19, r18
    1836:	40 0f       	add	r20, r16
    1838:	51 1f       	adc	r21, r17
    183a:	62 1f       	adc	r22, r18
    183c:	73 1f       	adc	r23, r19
    183e:	c7 01       	movw	r24, r14
    1840:	0e 94 91 03 	call	0x722	; 0x722 <_ZN12AccelStepper6moveToEl>
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	08 95       	ret

00001852 <_ZN12StepperMotor12reverseFrameEi>:
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	ec 01       	movw	r28, r24
    1858:	88 27       	eor	r24, r24
    185a:	77 fd       	sbrc	r23, 7
    185c:	80 95       	com	r24
    185e:	98 2f       	mov	r25, r24
    1860:	0e 94 ab 13 	call	0x2756	; 0x2756 <__floatsisf>
    1864:	ab 01       	movw	r20, r22
    1866:	bc 01       	movw	r22, r24
    1868:	ce 01       	movw	r24, r28
    186a:	0e 94 18 03 	call	0x630	; 0x630 <_ZN12AccelStepper8setSpeedEf>
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	08 95       	ret

00001874 <setup>:
    1874:	8f 92       	push	r8
    1876:	af 92       	push	r10
    1878:	cf 92       	push	r12
    187a:	df 92       	push	r13
    187c:	ef 92       	push	r14
    187e:	ff 92       	push	r15
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	cc ed       	ldi	r28, 0xDC	; 220
    188a:	d3 e0       	ldi	r29, 0x03	; 3
    188c:	ce 01       	movw	r24, r28
    188e:	40 e8       	ldi	r20, 0x80	; 128
    1890:	55 e2       	ldi	r21, 0x25	; 37
    1892:	60 e0       	ldi	r22, 0x00	; 0
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	0e 94 8a 25 	call	0x4b14	; 0x4b14 <_ZN14HardwareSerial5beginEm>
    189a:	64 e6       	ldi	r22, 0x64	; 100
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <delay>
    18a6:	ce 01       	movw	r24, r28
    18a8:	6f e3       	ldi	r22, 0x3F	; 63
    18aa:	71 e0       	ldi	r23, 0x01	; 1
    18ac:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <_ZN5Print7printlnEPKc>
    18b0:	82 e0       	ldi	r24, 0x02	; 2
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <_Znwj>
    18b8:	18 2f       	mov	r17, r24
    18ba:	f9 2e       	mov	r15, r25
    18bc:	6c e0       	ldi	r22, 0x0C	; 12
    18be:	4b e0       	ldi	r20, 0x0B	; 11
    18c0:	25 e0       	ldi	r18, 0x05	; 5
    18c2:	04 e0       	ldi	r16, 0x04	; 4
    18c4:	f3 e0       	ldi	r31, 0x03	; 3
    18c6:	ef 2e       	mov	r14, r31
    18c8:	e2 e0       	ldi	r30, 0x02	; 2
    18ca:	ce 2e       	mov	r12, r30
    18cc:	70 e1       	ldi	r23, 0x10	; 16
    18ce:	a7 2e       	mov	r10, r23
    18d0:	52 e0       	ldi	r21, 0x02	; 2
    18d2:	85 2e       	mov	r8, r21
    18d4:	0e 94 b8 04 	call	0x970	; 0x970 <_ZN3LCDC1Ehhhhhhhh>
    18d8:	10 93 39 03 	sts	0x0339, r17
    18dc:	f0 92 3a 03 	sts	0x033A, r15
    18e0:	64 e6       	ldi	r22, 0x64	; 100
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <delay>
    18ec:	ce 01       	movw	r24, r28
    18ee:	6e e4       	ldi	r22, 0x4E	; 78
    18f0:	71 e0       	ldi	r23, 0x01	; 1
    18f2:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <_ZN5Print7printlnEPKc>
    18f6:	0e 94 b4 04 	call	0x968	; 0x968 <_Z12DCMotor_intiv>
    18fa:	64 e6       	ldi	r22, 0x64	; 100
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <delay>
    1906:	ce 01       	movw	r24, r28
    1908:	6d e5       	ldi	r22, 0x5D	; 93
    190a:	71 e0       	ldi	r23, 0x01	; 1
    190c:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <_ZN5Print7printlnEPKc>
    1910:	85 e0       	ldi	r24, 0x05	; 5
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <_Znwj>
    1918:	8c 01       	movw	r16, r24
    191a:	61 e1       	ldi	r22, 0x11	; 17
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	4e e0       	ldi	r20, 0x0E	; 14
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN7DCMotorC1Eii>
    1926:	00 93 3b 03 	sts	0x033B, r16
    192a:	10 93 3c 03 	sts	0x033C, r17
    192e:	85 e0       	ldi	r24, 0x05	; 5
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <_Znwj>
    1936:	8c 01       	movw	r16, r24
    1938:	62 e1       	ldi	r22, 0x12	; 18
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	43 e1       	ldi	r20, 0x13	; 19
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN7DCMotorC1Eii>
    1944:	00 93 3d 03 	sts	0x033D, r16
    1948:	10 93 3e 03 	sts	0x033E, r17
    194c:	64 e6       	ldi	r22, 0x64	; 100
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <delay>
    1958:	ce 01       	movw	r24, r28
    195a:	61 e7       	ldi	r22, 0x71	; 113
    195c:	71 e0       	ldi	r23, 0x01	; 1
    195e:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <_ZN5Print7printlnEPKc>
    1962:	87 e2       	ldi	r24, 0x27	; 39
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <_Znwj>
    196a:	f8 2e       	mov	r15, r24
    196c:	19 2f       	mov	r17, r25
    196e:	64 e0       	ldi	r22, 0x04	; 4
    1970:	48 e0       	ldi	r20, 0x08	; 8
    1972:	29 e0       	ldi	r18, 0x09	; 9
    1974:	06 e0       	ldi	r16, 0x06	; 6
    1976:	37 e0       	ldi	r19, 0x07	; 7
    1978:	e3 2e       	mov	r14, r19
    197a:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN12StepperMotorC1Ehhhhh>
    197e:	f0 92 3f 03 	sts	0x033F, r15
    1982:	10 93 40 03 	sts	0x0340, r17
    1986:	8f 2d       	mov	r24, r15
    1988:	91 2f       	mov	r25, r17
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	50 e8       	ldi	r21, 0x80	; 128
    198e:	6b e3       	ldi	r22, 0x3B	; 59
    1990:	75 e4       	ldi	r23, 0x45	; 69
    1992:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN12AccelStepper11setMaxSpeedEf>
    1996:	80 91 3f 03 	lds	r24, 0x033F
    199a:	90 91 40 03 	lds	r25, 0x0340
    199e:	40 e0       	ldi	r20, 0x00	; 0
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	6a ef       	ldi	r22, 0xFA	; 250
    19a4:	73 e4       	ldi	r23, 0x43	; 67
    19a6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN12AccelStepper15setAccelerationEf>
    19aa:	64 e6       	ldi	r22, 0x64	; 100
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <delay>
    19b6:	ce 01       	movw	r24, r28
    19b8:	6a e8       	ldi	r22, 0x8A	; 138
    19ba:	71 e0       	ldi	r23, 0x01	; 1
    19bc:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <_ZN5Print7printlnEPKc>
    19c0:	82 e2       	ldi	r24, 0x22	; 34
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <_Znwj>
    19c8:	8c 01       	movw	r16, r24
    19ca:	0e 94 84 08 	call	0x1108	; 0x1108 <_ZN12PDControllerC1Ev>
    19ce:	10 93 36 03 	sts	0x0336, r17
    19d2:	00 93 35 03 	sts	0x0335, r16
    19d6:	0f 2e       	mov	r0, r31
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	cf 2e       	mov	r12, r31
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	df 2e       	mov	r13, r31
    19e0:	f0 e7       	ldi	r31, 0x70	; 112
    19e2:	ef 2e       	mov	r14, r31
    19e4:	f2 e4       	ldi	r31, 0x42	; 66
    19e6:	ff 2e       	mov	r15, r31
    19e8:	f0 2d       	mov	r31, r0
    19ea:	f8 01       	movw	r30, r16
    19ec:	c0 86       	std	Z+8, r12	; 0x08
    19ee:	d1 86       	std	Z+9, r13	; 0x09
    19f0:	e2 86       	std	Z+10, r14	; 0x0a
    19f2:	f3 86       	std	Z+11, r15	; 0x0b
    19f4:	c8 01       	movw	r24, r16
    19f6:	46 e6       	ldi	r20, 0x66	; 102
    19f8:	56 e6       	ldi	r21, 0x66	; 102
    19fa:	66 e9       	ldi	r22, 0x96	; 150
    19fc:	70 e4       	ldi	r23, 0x40	; 64
    19fe:	0a e0       	ldi	r16, 0x0A	; 10
    1a00:	17 ed       	ldi	r17, 0xD7	; 215
    1a02:	23 ea       	ldi	r18, 0xA3	; 163
    1a04:	3b e3       	ldi	r19, 0x3B	; 59
    1a06:	0e 94 71 09 	call	0x12e2	; 0x12e2 <_ZN12PDController10setTuningsEdd>
    1a0a:	80 91 35 03 	lds	r24, 0x0335
    1a0e:	90 91 36 03 	lds	r25, 0x0336
    1a12:	40 e0       	ldi	r20, 0x00	; 0
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	6f e7       	ldi	r22, 0x7F	; 127
    1a18:	73 ec       	ldi	r23, 0xC3	; 195
    1a1a:	00 e0       	ldi	r16, 0x00	; 0
    1a1c:	10 e0       	ldi	r17, 0x00	; 0
    1a1e:	2f e7       	ldi	r18, 0x7F	; 127
    1a20:	33 e4       	ldi	r19, 0x43	; 67
    1a22:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN12PDController15setOutputLimitsEdd>
    1a26:	64 e6       	ldi	r22, 0x64	; 100
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <delay>
    1a32:	ce 01       	movw	r24, r28
    1a34:	6e e9       	ldi	r22, 0x9E	; 158
    1a36:	71 e0       	ldi	r23, 0x01	; 1
    1a38:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <_ZN5Print7printlnEPKc>
    1a3c:	82 e2       	ldi	r24, 0x22	; 34
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <_Znwj>
    1a44:	8c 01       	movw	r16, r24
    1a46:	0e 94 84 08 	call	0x1108	; 0x1108 <_ZN12PDControllerC1Ev>
    1a4a:	10 93 38 03 	sts	0x0338, r17
    1a4e:	00 93 37 03 	sts	0x0337, r16
    1a52:	f8 01       	movw	r30, r16
    1a54:	c0 86       	std	Z+8, r12	; 0x08
    1a56:	d1 86       	std	Z+9, r13	; 0x09
    1a58:	e2 86       	std	Z+10, r14	; 0x0a
    1a5a:	f3 86       	std	Z+11, r15	; 0x0b
    1a5c:	c8 01       	movw	r24, r16
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	60 e4       	ldi	r22, 0x40	; 64
    1a64:	70 e4       	ldi	r23, 0x40	; 64
    1a66:	0a e0       	ldi	r16, 0x0A	; 10
    1a68:	17 ed       	ldi	r17, 0xD7	; 215
    1a6a:	23 ea       	ldi	r18, 0xA3	; 163
    1a6c:	3b e3       	ldi	r19, 0x3B	; 59
    1a6e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <_ZN12PDController10setTuningsEdd>
    1a72:	80 91 37 03 	lds	r24, 0x0337
    1a76:	90 91 38 03 	lds	r25, 0x0338
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	6f e7       	ldi	r22, 0x7F	; 127
    1a80:	73 ec       	ldi	r23, 0xC3	; 195
    1a82:	00 e0       	ldi	r16, 0x00	; 0
    1a84:	10 e0       	ldi	r17, 0x00	; 0
    1a86:	2f e7       	ldi	r18, 0x7F	; 127
    1a88:	33 e4       	ldi	r19, 0x43	; 67
    1a8a:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN12PDController15setOutputLimitsEdd>
    1a8e:	64 e6       	ldi	r22, 0x64	; 100
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <delay>
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	63 eb       	ldi	r22, 0xB3	; 179
    1a9e:	71 e0       	ldi	r23, 0x01	; 1
    1aa0:	0e 94 e8 21 	call	0x43d0	; 0x43d0 <_ZN5Print7printlnEPKc>
    1aa4:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_Z17PDController_initv>
    1aa8:	64 e6       	ldi	r22, 0x64	; 100
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <delay>
    1ab4:	8a e0       	ldi	r24, 0x0A	; 10
    1ab6:	61 e0       	ldi	r22, 0x01	; 1
    1ab8:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
    1abc:	8a e0       	ldi	r24, 0x0A	; 10
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
    1ac4:	8d e0       	ldi	r24, 0x0D	; 13
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	ff 90       	pop	r15
    1ad6:	ef 90       	pop	r14
    1ad8:	df 90       	pop	r13
    1ada:	cf 90       	pop	r12
    1adc:	af 90       	pop	r10
    1ade:	8f 90       	pop	r8
    1ae0:	08 95       	ret

00001ae2 <_Z8shutdownv>:
    1ae2:	80 91 3b 03 	lds	r24, 0x033B
    1ae6:	90 91 3c 03 	lds	r25, 0x033C
    1aea:	0e 94 81 04 	call	0x902	; 0x902 <_ZN7DCMotor4stopEv>
    1aee:	80 91 3d 03 	lds	r24, 0x033D
    1af2:	90 91 3e 03 	lds	r25, 0x033E
    1af6:	0e 94 81 04 	call	0x902	; 0x902 <_ZN7DCMotor4stopEv>
    1afa:	8a e0       	ldi	r24, 0x0A	; 10
    1afc:	60 e0       	ldi	r22, 0x00	; 0
    1afe:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
    1b02:	83 b7       	in	r24, 0x33	; 51
    1b04:	81 60       	ori	r24, 0x01	; 1
    1b06:	83 bf       	out	0x33, r24	; 51
    1b08:	83 b7       	in	r24, 0x33	; 51
    1b0a:	81 60       	ori	r24, 0x01	; 1
    1b0c:	83 bf       	out	0x33, r24	; 51
    1b0e:	88 95       	sleep
    1b10:	83 b7       	in	r24, 0x33	; 51
    1b12:	8e 7f       	andi	r24, 0xFE	; 254
    1b14:	83 bf       	out	0x33, r24	; 51
    1b16:	08 95       	ret

00001b18 <_Z13checkStopFilmv>:
    1b18:	e0 91 37 03 	lds	r30, 0x0337
    1b1c:	f0 91 38 03 	lds	r31, 0x0338
    1b20:	60 81       	ld	r22, Z
    1b22:	71 81       	ldd	r23, Z+1	; 0x01
    1b24:	82 81       	ldd	r24, Z+2	; 0x02
    1b26:	93 81       	ldd	r25, Z+3	; 0x03
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e2       	ldi	r20, 0x20	; 32
    1b2e:	51 e4       	ldi	r21, 0x41	; 65
    1b30:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__ltsf2>
    1b34:	87 ff       	sbrs	r24, 7
    1b36:	1b c0       	rjmp	.+54     	; 0x1b6e <_Z13checkStopFilmv+0x56>
    1b38:	80 91 43 03 	lds	r24, 0x0343
    1b3c:	90 91 44 03 	lds	r25, 0x0344
    1b40:	27 e0       	ldi	r18, 0x07	; 7
    1b42:	81 3d       	cpi	r24, 0xD1	; 209
    1b44:	92 07       	cpc	r25, r18
    1b46:	10 f0       	brcs	.+4      	; 0x1b4c <_Z13checkStopFilmv+0x34>
    1b48:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <_Z8shutdownv>
    1b4c:	e0 91 35 03 	lds	r30, 0x0335
    1b50:	f0 91 36 03 	lds	r31, 0x0336
    1b54:	80 91 43 03 	lds	r24, 0x0343
    1b58:	90 91 44 03 	lds	r25, 0x0344
    1b5c:	20 8d       	ldd	r18, Z+24	; 0x18
    1b5e:	31 8d       	ldd	r19, Z+25	; 0x19
    1b60:	82 0f       	add	r24, r18
    1b62:	93 1f       	adc	r25, r19
    1b64:	90 93 44 03 	sts	0x0344, r25
    1b68:	80 93 43 03 	sts	0x0343, r24
    1b6c:	04 c0       	rjmp	.+8      	; 0x1b76 <_Z13checkStopFilmv+0x5e>
    1b6e:	10 92 44 03 	sts	0x0344, r1
    1b72:	10 92 43 03 	sts	0x0343, r1
    1b76:	e0 91 37 03 	lds	r30, 0x0337
    1b7a:	f0 91 38 03 	lds	r31, 0x0338
    1b7e:	60 81       	ld	r22, Z
    1b80:	71 81       	ldd	r23, Z+1	; 0x01
    1b82:	82 81       	ldd	r24, Z+2	; 0x02
    1b84:	93 81       	ldd	r25, Z+3	; 0x03
    1b86:	20 e0       	ldi	r18, 0x00	; 0
    1b88:	30 e0       	ldi	r19, 0x00	; 0
    1b8a:	40 ef       	ldi	r20, 0xF0	; 240
    1b8c:	52 e4       	ldi	r21, 0x42	; 66
    1b8e:	0e 94 1b 13 	call	0x2636	; 0x2636 <__gtsf2>
    1b92:	18 16       	cp	r1, r24
    1b94:	dc f4       	brge	.+54     	; 0x1bcc <_Z13checkStopFilmv+0xb4>
    1b96:	80 91 45 03 	lds	r24, 0x0345
    1b9a:	90 91 46 03 	lds	r25, 0x0346
    1b9e:	27 e0       	ldi	r18, 0x07	; 7
    1ba0:	81 3d       	cpi	r24, 0xD1	; 209
    1ba2:	92 07       	cpc	r25, r18
    1ba4:	10 f0       	brcs	.+4      	; 0x1baa <_Z13checkStopFilmv+0x92>
    1ba6:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <_Z8shutdownv>
    1baa:	e0 91 37 03 	lds	r30, 0x0337
    1bae:	f0 91 38 03 	lds	r31, 0x0338
    1bb2:	80 91 45 03 	lds	r24, 0x0345
    1bb6:	90 91 46 03 	lds	r25, 0x0346
    1bba:	20 8d       	ldd	r18, Z+24	; 0x18
    1bbc:	31 8d       	ldd	r19, Z+25	; 0x19
    1bbe:	82 0f       	add	r24, r18
    1bc0:	93 1f       	adc	r25, r19
    1bc2:	90 93 46 03 	sts	0x0346, r25
    1bc6:	80 93 45 03 	sts	0x0345, r24
    1bca:	08 95       	ret
    1bcc:	10 92 46 03 	sts	0x0346, r1
    1bd0:	10 92 45 03 	sts	0x0345, r1
    1bd4:	08 95       	ret

00001bd6 <__vector_11>:
    1bd6:	1f 92       	push	r1
    1bd8:	0f 92       	push	r0
    1bda:	0f b6       	in	r0, 0x3f	; 63
    1bdc:	0f 92       	push	r0
    1bde:	11 24       	eor	r1, r1
    1be0:	2f 93       	push	r18
    1be2:	3f 93       	push	r19
    1be4:	4f 93       	push	r20
    1be6:	5f 93       	push	r21
    1be8:	6f 93       	push	r22
    1bea:	7f 93       	push	r23
    1bec:	8f 93       	push	r24
    1bee:	9f 93       	push	r25
    1bf0:	af 93       	push	r26
    1bf2:	bf 93       	push	r27
    1bf4:	cf 93       	push	r28
    1bf6:	df 93       	push	r29
    1bf8:	ef 93       	push	r30
    1bfa:	ff 93       	push	r31
    1bfc:	c0 91 35 03 	lds	r28, 0x0335
    1c00:	d0 91 36 03 	lds	r29, 0x0336
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <analogRead>
    1c0a:	9c 01       	movw	r18, r24
    1c0c:	b9 01       	movw	r22, r18
    1c0e:	88 27       	eor	r24, r24
    1c10:	77 fd       	sbrc	r23, 7
    1c12:	80 95       	com	r24
    1c14:	98 2f       	mov	r25, r24
    1c16:	0e 94 ab 13 	call	0x2756	; 0x2756 <__floatsisf>
    1c1a:	ab 01       	movw	r20, r22
    1c1c:	bc 01       	movw	r22, r24
    1c1e:	ce 01       	movw	r24, r28
    1c20:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZN12PDController7computeEd>
    1c24:	c0 91 37 03 	lds	r28, 0x0337
    1c28:	d0 91 38 03 	lds	r29, 0x0338
    1c2c:	82 e0       	ldi	r24, 0x02	; 2
    1c2e:	0e 94 c2 16 	call	0x2d84	; 0x2d84 <analogRead>
    1c32:	9c 01       	movw	r18, r24
    1c34:	b9 01       	movw	r22, r18
    1c36:	88 27       	eor	r24, r24
    1c38:	77 fd       	sbrc	r23, 7
    1c3a:	80 95       	com	r24
    1c3c:	98 2f       	mov	r25, r24
    1c3e:	0e 94 ab 13 	call	0x2756	; 0x2756 <__floatsisf>
    1c42:	ab 01       	movw	r20, r22
    1c44:	bc 01       	movw	r22, r24
    1c46:	ce 01       	movw	r24, r28
    1c48:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZN12PDController7computeEd>
    1c4c:	c0 91 3b 03 	lds	r28, 0x033B
    1c50:	d0 91 3c 03 	lds	r29, 0x033C
    1c54:	e0 91 35 03 	lds	r30, 0x0335
    1c58:	f0 91 36 03 	lds	r31, 0x0336
    1c5c:	64 81       	ldd	r22, Z+4	; 0x04
    1c5e:	75 81       	ldd	r23, Z+5	; 0x05
    1c60:	86 81       	ldd	r24, Z+6	; 0x06
    1c62:	97 81       	ldd	r25, Z+7	; 0x07
    1c64:	90 58       	subi	r25, 0x80	; 128
    1c66:	0e 94 0b 14 	call	0x2816	; 0x2816 <__fixsfsi>
    1c6a:	9b 01       	movw	r18, r22
    1c6c:	ac 01       	movw	r20, r24
    1c6e:	ce 01       	movw	r24, r28
    1c70:	b9 01       	movw	r22, r18
    1c72:	0e 94 93 04 	call	0x926	; 0x926 <_ZN7DCMotor13setMotorspeedEi>
    1c76:	c0 91 3d 03 	lds	r28, 0x033D
    1c7a:	d0 91 3e 03 	lds	r29, 0x033E
    1c7e:	e0 91 37 03 	lds	r30, 0x0337
    1c82:	f0 91 38 03 	lds	r31, 0x0338
    1c86:	64 81       	ldd	r22, Z+4	; 0x04
    1c88:	75 81       	ldd	r23, Z+5	; 0x05
    1c8a:	86 81       	ldd	r24, Z+6	; 0x06
    1c8c:	97 81       	ldd	r25, Z+7	; 0x07
    1c8e:	0e 94 0b 14 	call	0x2816	; 0x2816 <__fixsfsi>
    1c92:	9b 01       	movw	r18, r22
    1c94:	ac 01       	movw	r20, r24
    1c96:	ce 01       	movw	r24, r28
    1c98:	b9 01       	movw	r22, r18
    1c9a:	0e 94 93 04 	call	0x926	; 0x926 <_ZN7DCMotor13setMotorspeedEi>
    1c9e:	8c ed       	ldi	r24, 0xDC	; 220
    1ca0:	93 e0       	ldi	r25, 0x03	; 3
    1ca2:	67 ec       	ldi	r22, 0xC7	; 199
    1ca4:	71 e0       	ldi	r23, 0x01	; 1
    1ca6:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN5Print5printEPKc>
    1caa:	e0 91 35 03 	lds	r30, 0x0335
    1cae:	f0 91 36 03 	lds	r31, 0x0336
    1cb2:	40 81       	ld	r20, Z
    1cb4:	51 81       	ldd	r21, Z+1	; 0x01
    1cb6:	62 81       	ldd	r22, Z+2	; 0x02
    1cb8:	73 81       	ldd	r23, Z+3	; 0x03
    1cba:	8c ed       	ldi	r24, 0xDC	; 220
    1cbc:	93 e0       	ldi	r25, 0x03	; 3
    1cbe:	22 e0       	ldi	r18, 0x02	; 2
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	0e 94 04 24 	call	0x4808	; 0x4808 <_ZN5Print5printEdi>
    1cc6:	8c ed       	ldi	r24, 0xDC	; 220
    1cc8:	93 e0       	ldi	r25, 0x03	; 3
    1cca:	6e ec       	ldi	r22, 0xCE	; 206
    1ccc:	71 e0       	ldi	r23, 0x01	; 1
    1cce:	0e 94 97 21 	call	0x432e	; 0x432e <_ZN5Print5printEPKc>
    1cd2:	e0 91 37 03 	lds	r30, 0x0337
    1cd6:	f0 91 38 03 	lds	r31, 0x0338
    1cda:	40 81       	ld	r20, Z
    1cdc:	51 81       	ldd	r21, Z+1	; 0x01
    1cde:	62 81       	ldd	r22, Z+2	; 0x02
    1ce0:	73 81       	ldd	r23, Z+3	; 0x03
    1ce2:	8c ed       	ldi	r24, 0xDC	; 220
    1ce4:	93 e0       	ldi	r25, 0x03	; 3
    1ce6:	22 e0       	ldi	r18, 0x02	; 2
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	0e 94 07 24 	call	0x480e	; 0x480e <_ZN5Print7printlnEdi>
    1cee:	80 91 49 03 	lds	r24, 0x0349
    1cf2:	88 23       	and	r24, r24
    1cf4:	11 f0       	breq	.+4      	; 0x1cfa <__vector_11+0x124>
    1cf6:	0e 94 8c 0d 	call	0x1b18	; 0x1b18 <_Z13checkStopFilmv>
    1cfa:	ff 91       	pop	r31
    1cfc:	ef 91       	pop	r30
    1cfe:	df 91       	pop	r29
    1d00:	cf 91       	pop	r28
    1d02:	bf 91       	pop	r27
    1d04:	af 91       	pop	r26
    1d06:	9f 91       	pop	r25
    1d08:	8f 91       	pop	r24
    1d0a:	7f 91       	pop	r23
    1d0c:	6f 91       	pop	r22
    1d0e:	5f 91       	pop	r21
    1d10:	4f 91       	pop	r20
    1d12:	3f 91       	pop	r19
    1d14:	2f 91       	pop	r18
    1d16:	0f 90       	pop	r0
    1d18:	0f be       	out	0x3f, r0	; 63
    1d1a:	0f 90       	pop	r0
    1d1c:	1f 90       	pop	r1
    1d1e:	18 95       	reti

00001d20 <_Z15checkManualModev>:
    1d20:	ef 92       	push	r14
    1d22:	ff 92       	push	r15
    1d24:	0f 93       	push	r16
    1d26:	1f 93       	push	r17
    1d28:	df 93       	push	r29
    1d2a:	cf 93       	push	r28
    1d2c:	cd b7       	in	r28, 0x3d	; 61
    1d2e:	de b7       	in	r29, 0x3e	; 62
    1d30:	2e 97       	sbiw	r28, 0x0e	; 14
    1d32:	0f b6       	in	r0, 0x3f	; 63
    1d34:	f8 94       	cli
    1d36:	de bf       	out	0x3e, r29	; 62
    1d38:	0f be       	out	0x3f, r0	; 63
    1d3a:	cd bf       	out	0x3d, r28	; 61
    1d3c:	8d e0       	ldi	r24, 0x0D	; 13
    1d3e:	0e 94 b4 18 	call	0x3168	; 0x3168 <digitalRead>
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	09 f0       	breq	.+2      	; 0x1d48 <_Z15checkManualModev+0x28>
    1d46:	50 c0       	rjmp	.+160    	; 0x1de8 <_Z15checkManualModev+0xc8>
    1d48:	e0 90 39 03 	lds	r14, 0x0339
    1d4c:	f0 90 3a 03 	lds	r15, 0x033A
    1d50:	8e 01       	movw	r16, r28
    1d52:	0f 5f       	subi	r16, 0xFF	; 255
    1d54:	1f 4f       	sbci	r17, 0xFF	; 255
    1d56:	c8 01       	movw	r24, r16
    1d58:	67 ed       	ldi	r22, 0xD7	; 215
    1d5a:	71 e0       	ldi	r23, 0x01	; 1
    1d5c:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN6StringC1EPKc>
    1d60:	c7 01       	movw	r24, r14
    1d62:	b8 01       	movw	r22, r16
    1d64:	40 e0       	ldi	r20, 0x00	; 0
    1d66:	50 e0       	ldi	r21, 0x00	; 0
    1d68:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_ZN3LCD9updateLCDE6Stringi>
    1d6c:	c8 01       	movw	r24, r16
    1d6e:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN6StringD1Ev>
    1d72:	8a e0       	ldi	r24, 0x0A	; 10
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
    1d7a:	10 92 49 03 	sts	0x0349, r1
    1d7e:	0d c0       	rjmp	.+26     	; 0x1d9a <_Z15checkManualModev+0x7a>
    1d80:	c9 01       	movw	r24, r18
    1d82:	40 e0       	ldi	r20, 0x00	; 0
    1d84:	50 e0       	ldi	r21, 0x00	; 0
    1d86:	60 ea       	ldi	r22, 0xA0	; 160
    1d88:	70 e4       	ldi	r23, 0x40	; 64
    1d8a:	0e 94 18 03 	call	0x630	; 0x630 <_ZN12AccelStepper8setSpeedEf>
    1d8e:	80 91 3f 03 	lds	r24, 0x033F
    1d92:	90 91 40 03 	lds	r25, 0x0340
    1d96:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN12AccelStepper8runSpeedEv>
    1d9a:	8d e0       	ldi	r24, 0x0D	; 13
    1d9c:	0e 94 b4 18 	call	0x3168	; 0x3168 <digitalRead>
    1da0:	20 91 3f 03 	lds	r18, 0x033F
    1da4:	30 91 40 03 	lds	r19, 0x0340
    1da8:	00 97       	sbiw	r24, 0x00	; 0
    1daa:	51 f3       	breq	.-44     	; 0x1d80 <_Z15checkManualModev+0x60>
    1dac:	c9 01       	movw	r24, r18
    1dae:	60 e9       	ldi	r22, 0x90	; 144
    1db0:	71 e0       	ldi	r23, 0x01	; 1
    1db2:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN12StepperMotor12advanceFrameEi>
    1db6:	10 92 42 03 	sts	0x0342, r1
    1dba:	10 92 41 03 	sts	0x0341, r1
    1dbe:	e0 90 39 03 	lds	r14, 0x0339
    1dc2:	f0 90 3a 03 	lds	r15, 0x033A
    1dc6:	8e 01       	movw	r16, r28
    1dc8:	08 5f       	subi	r16, 0xF8	; 248
    1dca:	1f 4f       	sbci	r17, 0xFF	; 255
    1dcc:	c8 01       	movw	r24, r16
    1dce:	6e ed       	ldi	r22, 0xDE	; 222
    1dd0:	71 e0       	ldi	r23, 0x01	; 1
    1dd2:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN6StringC1EPKc>
    1dd6:	c7 01       	movw	r24, r14
    1dd8:	b8 01       	movw	r22, r16
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	50 e0       	ldi	r21, 0x00	; 0
    1dde:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_ZN3LCD9updateLCDE6Stringi>
    1de2:	c8 01       	movw	r24, r16
    1de4:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN6StringD1Ev>
    1de8:	81 e0       	ldi	r24, 0x01	; 1
    1dea:	80 93 49 03 	sts	0x0349, r24
    1dee:	2e 96       	adiw	r28, 0x0e	; 14
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	de bf       	out	0x3e, r29	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	cd bf       	out	0x3d, r28	; 61
    1dfa:	cf 91       	pop	r28
    1dfc:	df 91       	pop	r29
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	ff 90       	pop	r15
    1e04:	ef 90       	pop	r14
    1e06:	08 95       	ret

00001e08 <main>:
    1e08:	ef 92       	push	r14
    1e0a:	ff 92       	push	r15
    1e0c:	0f 93       	push	r16
    1e0e:	1f 93       	push	r17
    1e10:	df 93       	push	r29
    1e12:	cf 93       	push	r28
    1e14:	cd b7       	in	r28, 0x3d	; 61
    1e16:	de b7       	in	r29, 0x3e	; 62
    1e18:	2e 97       	sbiw	r28, 0x0e	; 14
    1e1a:	0f b6       	in	r0, 0x3f	; 63
    1e1c:	f8 94       	cli
    1e1e:	de bf       	out	0x3e, r29	; 62
    1e20:	0f be       	out	0x3f, r0	; 63
    1e22:	cd bf       	out	0x3d, r28	; 61
    1e24:	0e 94 f0 17 	call	0x2fe0	; 0x2fe0 <init>
    1e28:	0e 94 3a 0c 	call	0x1874	; 0x1874 <setup>
    1e2c:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_Z15checkManualModev>
    1e30:	e0 90 39 03 	lds	r14, 0x0339
    1e34:	f0 90 3a 03 	lds	r15, 0x033A
    1e38:	8e 01       	movw	r16, r28
    1e3a:	0f 5f       	subi	r16, 0xFF	; 255
    1e3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3e:	c8 01       	movw	r24, r16
    1e40:	6e ed       	ldi	r22, 0xDE	; 222
    1e42:	71 e0       	ldi	r23, 0x01	; 1
    1e44:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN6StringC1EPKc>
    1e48:	c7 01       	movw	r24, r14
    1e4a:	b8 01       	movw	r22, r16
    1e4c:	40 e0       	ldi	r20, 0x00	; 0
    1e4e:	50 e0       	ldi	r21, 0x00	; 0
    1e50:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_ZN3LCD9updateLCDE6Stringi>
    1e54:	c8 01       	movw	r24, r16
    1e56:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN6StringD1Ev>
    1e5a:	8e 01       	movw	r16, r28
    1e5c:	08 5f       	subi	r16, 0xF8	; 248
    1e5e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e60:	8a e0       	ldi	r24, 0x0A	; 10
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
    1e68:	80 91 3f 03 	lds	r24, 0x033F
    1e6c:	90 91 40 03 	lds	r25, 0x0340
    1e70:	60 e9       	ldi	r22, 0x90	; 144
    1e72:	71 e0       	ldi	r23, 0x01	; 1
    1e74:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN12StepperMotor12advanceFrameEi>
    1e78:	02 c0       	rjmp	.+4      	; 0x1e7e <main+0x76>
    1e7a:	0e 94 90 0e 	call	0x1d20	; 0x1d20 <_Z15checkManualModev>
    1e7e:	80 91 3f 03 	lds	r24, 0x033F
    1e82:	90 91 40 03 	lds	r25, 0x0340
    1e86:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN12AccelStepper3runEv>
    1e8a:	88 23       	and	r24, r24
    1e8c:	b1 f7       	brne	.-20     	; 0x1e7a <main+0x72>
    1e8e:	8a e0       	ldi	r24, 0x0A	; 10
    1e90:	60 e0       	ldi	r22, 0x00	; 0
    1e92:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
    1e96:	60 ed       	ldi	r22, 0xD0	; 208
    1e98:	77 e0       	ldi	r23, 0x07	; 7
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	0e 94 bf 17 	call	0x2f7e	; 0x2f7e <delay>
    1ea2:	80 91 41 03 	lds	r24, 0x0341
    1ea6:	90 91 42 03 	lds	r25, 0x0342
    1eaa:	01 96       	adiw	r24, 0x01	; 1
    1eac:	90 93 42 03 	sts	0x0342, r25
    1eb0:	80 93 41 03 	sts	0x0341, r24
    1eb4:	e0 90 39 03 	lds	r14, 0x0339
    1eb8:	f0 90 3a 03 	lds	r15, 0x033A
    1ebc:	c8 01       	movw	r24, r16
    1ebe:	6e ed       	ldi	r22, 0xDE	; 222
    1ec0:	71 e0       	ldi	r23, 0x01	; 1
    1ec2:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN6StringC1EPKc>
    1ec6:	40 91 41 03 	lds	r20, 0x0341
    1eca:	50 91 42 03 	lds	r21, 0x0342
    1ece:	c7 01       	movw	r24, r14
    1ed0:	b8 01       	movw	r22, r16
    1ed2:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_ZN3LCD9updateLCDE6Stringi>
    1ed6:	c8 01       	movw	r24, r16
    1ed8:	0e 94 de 18 	call	0x31bc	; 0x31bc <_ZN6StringD1Ev>
    1edc:	c1 cf       	rjmp	.-126    	; 0x1e60 <main+0x58>

00001ede <__fixunssfsi>:
    1ede:	ef 92       	push	r14
    1ee0:	ff 92       	push	r15
    1ee2:	0f 93       	push	r16
    1ee4:	1f 93       	push	r17
    1ee6:	7b 01       	movw	r14, r22
    1ee8:	8c 01       	movw	r16, r24
    1eea:	20 e0       	ldi	r18, 0x00	; 0
    1eec:	30 e0       	ldi	r19, 0x00	; 0
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	5f e4       	ldi	r21, 0x4F	; 79
    1ef2:	0e 94 4b 13 	call	0x2696	; 0x2696 <__gesf2>
    1ef6:	87 fd       	sbrc	r24, 7
    1ef8:	11 c0       	rjmp	.+34     	; 0x1f1c <__fixunssfsi+0x3e>
    1efa:	c8 01       	movw	r24, r16
    1efc:	b7 01       	movw	r22, r14
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e0       	ldi	r19, 0x00	; 0
    1f02:	40 e0       	ldi	r20, 0x00	; 0
    1f04:	5f e4       	ldi	r21, 0x4F	; 79
    1f06:	0e 94 12 11 	call	0x2224	; 0x2224 <__subsf3>
    1f0a:	0e 94 0b 14 	call	0x2816	; 0x2816 <__fixsfsi>
    1f0e:	9b 01       	movw	r18, r22
    1f10:	ac 01       	movw	r20, r24
    1f12:	20 50       	subi	r18, 0x00	; 0
    1f14:	30 40       	sbci	r19, 0x00	; 0
    1f16:	40 40       	sbci	r20, 0x00	; 0
    1f18:	50 48       	sbci	r21, 0x80	; 128
    1f1a:	06 c0       	rjmp	.+12     	; 0x1f28 <__fixunssfsi+0x4a>
    1f1c:	c8 01       	movw	r24, r16
    1f1e:	b7 01       	movw	r22, r14
    1f20:	0e 94 0b 14 	call	0x2816	; 0x2816 <__fixsfsi>
    1f24:	9b 01       	movw	r18, r22
    1f26:	ac 01       	movw	r20, r24
    1f28:	b9 01       	movw	r22, r18
    1f2a:	ca 01       	movw	r24, r20
    1f2c:	1f 91       	pop	r17
    1f2e:	0f 91       	pop	r16
    1f30:	ff 90       	pop	r15
    1f32:	ef 90       	pop	r14
    1f34:	08 95       	ret

00001f36 <_fpadd_parts>:
    1f36:	a0 e0       	ldi	r26, 0x00	; 0
    1f38:	b0 e0       	ldi	r27, 0x00	; 0
    1f3a:	e1 ea       	ldi	r30, 0xA1	; 161
    1f3c:	ff e0       	ldi	r31, 0x0F	; 15
    1f3e:	0c 94 e9 26 	jmp	0x4dd2	; 0x4dd2 <__prologue_saves__+0x8>
    1f42:	fc 01       	movw	r30, r24
    1f44:	ea 01       	movw	r28, r20
    1f46:	80 81       	ld	r24, Z
    1f48:	82 30       	cpi	r24, 0x02	; 2
    1f4a:	08 f4       	brcc	.+2      	; 0x1f4e <_fpadd_parts+0x18>
    1f4c:	38 c1       	rjmp	.+624    	; 0x21be <_fpadd_parts+0x288>
    1f4e:	db 01       	movw	r26, r22
    1f50:	9c 91       	ld	r25, X
    1f52:	92 30       	cpi	r25, 0x02	; 2
    1f54:	08 f4       	brcc	.+2      	; 0x1f58 <_fpadd_parts+0x22>
    1f56:	30 c1       	rjmp	.+608    	; 0x21b8 <_fpadd_parts+0x282>
    1f58:	84 30       	cpi	r24, 0x04	; 4
    1f5a:	59 f4       	brne	.+22     	; 0x1f72 <_fpadd_parts+0x3c>
    1f5c:	94 30       	cpi	r25, 0x04	; 4
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <_fpadd_parts+0x2c>
    1f60:	2e c1       	rjmp	.+604    	; 0x21be <_fpadd_parts+0x288>
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	11 96       	adiw	r26, 0x01	; 1
    1f66:	8c 91       	ld	r24, X
    1f68:	11 97       	sbiw	r26, 0x01	; 1
    1f6a:	98 17       	cp	r25, r24
    1f6c:	09 f0       	breq	.+2      	; 0x1f70 <_fpadd_parts+0x3a>
    1f6e:	21 c1       	rjmp	.+578    	; 0x21b2 <_fpadd_parts+0x27c>
    1f70:	26 c1       	rjmp	.+588    	; 0x21be <_fpadd_parts+0x288>
    1f72:	94 30       	cpi	r25, 0x04	; 4
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <_fpadd_parts+0x42>
    1f76:	20 c1       	rjmp	.+576    	; 0x21b8 <_fpadd_parts+0x282>
    1f78:	92 30       	cpi	r25, 0x02	; 2
    1f7a:	b1 f4       	brne	.+44     	; 0x1fa8 <_fpadd_parts+0x72>
    1f7c:	82 30       	cpi	r24, 0x02	; 2
    1f7e:	09 f0       	breq	.+2      	; 0x1f82 <_fpadd_parts+0x4c>
    1f80:	1e c1       	rjmp	.+572    	; 0x21be <_fpadd_parts+0x288>
    1f82:	ca 01       	movw	r24, r20
    1f84:	af 01       	movw	r20, r30
    1f86:	28 e0       	ldi	r18, 0x08	; 8
    1f88:	da 01       	movw	r26, r20
    1f8a:	0d 90       	ld	r0, X+
    1f8c:	ad 01       	movw	r20, r26
    1f8e:	dc 01       	movw	r26, r24
    1f90:	0d 92       	st	X+, r0
    1f92:	cd 01       	movw	r24, r26
    1f94:	21 50       	subi	r18, 0x01	; 1
    1f96:	c1 f7       	brne	.-16     	; 0x1f88 <_fpadd_parts+0x52>
    1f98:	db 01       	movw	r26, r22
    1f9a:	11 96       	adiw	r26, 0x01	; 1
    1f9c:	8c 91       	ld	r24, X
    1f9e:	11 97       	sbiw	r26, 0x01	; 1
    1fa0:	91 81       	ldd	r25, Z+1	; 0x01
    1fa2:	89 23       	and	r24, r25
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	0a c1       	rjmp	.+532    	; 0x21bc <_fpadd_parts+0x286>
    1fa8:	82 30       	cpi	r24, 0x02	; 2
    1faa:	09 f4       	brne	.+2      	; 0x1fae <_fpadd_parts+0x78>
    1fac:	05 c1       	rjmp	.+522    	; 0x21b8 <_fpadd_parts+0x282>
    1fae:	c2 80       	ldd	r12, Z+2	; 0x02
    1fb0:	d3 80       	ldd	r13, Z+3	; 0x03
    1fb2:	db 01       	movw	r26, r22
    1fb4:	12 96       	adiw	r26, 0x02	; 2
    1fb6:	6d 90       	ld	r6, X+
    1fb8:	7c 90       	ld	r7, X
    1fba:	13 97       	sbiw	r26, 0x03	; 3
    1fbc:	24 81       	ldd	r18, Z+4	; 0x04
    1fbe:	35 81       	ldd	r19, Z+5	; 0x05
    1fc0:	46 81       	ldd	r20, Z+6	; 0x06
    1fc2:	57 81       	ldd	r21, Z+7	; 0x07
    1fc4:	14 96       	adiw	r26, 0x04	; 4
    1fc6:	ed 90       	ld	r14, X+
    1fc8:	fd 90       	ld	r15, X+
    1fca:	0d 91       	ld	r16, X+
    1fcc:	1c 91       	ld	r17, X
    1fce:	17 97       	sbiw	r26, 0x07	; 7
    1fd0:	c6 01       	movw	r24, r12
    1fd2:	86 19       	sub	r24, r6
    1fd4:	97 09       	sbc	r25, r7
    1fd6:	5c 01       	movw	r10, r24
    1fd8:	97 ff       	sbrs	r25, 7
    1fda:	04 c0       	rjmp	.+8      	; 0x1fe4 <_fpadd_parts+0xae>
    1fdc:	aa 24       	eor	r10, r10
    1fde:	bb 24       	eor	r11, r11
    1fe0:	a8 1a       	sub	r10, r24
    1fe2:	b9 0a       	sbc	r11, r25
    1fe4:	b0 e2       	ldi	r27, 0x20	; 32
    1fe6:	ab 16       	cp	r10, r27
    1fe8:	b1 04       	cpc	r11, r1
    1fea:	0c f0       	brlt	.+2      	; 0x1fee <_fpadd_parts+0xb8>
    1fec:	61 c0       	rjmp	.+194    	; 0x20b0 <_fpadd_parts+0x17a>
    1fee:	18 16       	cp	r1, r24
    1ff0:	19 06       	cpc	r1, r25
    1ff2:	6c f5       	brge	.+90     	; 0x204e <_fpadd_parts+0x118>
    1ff4:	37 01       	movw	r6, r14
    1ff6:	48 01       	movw	r8, r16
    1ff8:	0a 2c       	mov	r0, r10
    1ffa:	04 c0       	rjmp	.+8      	; 0x2004 <_fpadd_parts+0xce>
    1ffc:	96 94       	lsr	r9
    1ffe:	87 94       	ror	r8
    2000:	77 94       	ror	r7
    2002:	67 94       	ror	r6
    2004:	0a 94       	dec	r0
    2006:	d2 f7       	brpl	.-12     	; 0x1ffc <_fpadd_parts+0xc6>
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	a0 e0       	ldi	r26, 0x00	; 0
    200e:	b0 e0       	ldi	r27, 0x00	; 0
    2010:	0a 2c       	mov	r0, r10
    2012:	04 c0       	rjmp	.+8      	; 0x201c <_fpadd_parts+0xe6>
    2014:	88 0f       	add	r24, r24
    2016:	99 1f       	adc	r25, r25
    2018:	aa 1f       	adc	r26, r26
    201a:	bb 1f       	adc	r27, r27
    201c:	0a 94       	dec	r0
    201e:	d2 f7       	brpl	.-12     	; 0x2014 <_fpadd_parts+0xde>
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	a1 09       	sbc	r26, r1
    2024:	b1 09       	sbc	r27, r1
    2026:	8e 21       	and	r24, r14
    2028:	9f 21       	and	r25, r15
    202a:	a0 23       	and	r26, r16
    202c:	b1 23       	and	r27, r17
    202e:	ee 24       	eor	r14, r14
    2030:	ff 24       	eor	r15, r15
    2032:	87 01       	movw	r16, r14
    2034:	e3 94       	inc	r14
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	a1 05       	cpc	r26, r1
    203a:	b1 05       	cpc	r27, r1
    203c:	19 f4       	brne	.+6      	; 0x2044 <_fpadd_parts+0x10e>
    203e:	ee 24       	eor	r14, r14
    2040:	ff 24       	eor	r15, r15
    2042:	87 01       	movw	r16, r14
    2044:	e6 28       	or	r14, r6
    2046:	f7 28       	or	r15, r7
    2048:	08 29       	or	r16, r8
    204a:	19 29       	or	r17, r9
    204c:	3c c0       	rjmp	.+120    	; 0x20c6 <_fpadd_parts+0x190>
    204e:	00 97       	sbiw	r24, 0x00	; 0
    2050:	d1 f1       	breq	.+116    	; 0x20c6 <_fpadd_parts+0x190>
    2052:	ca 0c       	add	r12, r10
    2054:	db 1c       	adc	r13, r11
    2056:	39 01       	movw	r6, r18
    2058:	4a 01       	movw	r8, r20
    205a:	0a 2c       	mov	r0, r10
    205c:	04 c0       	rjmp	.+8      	; 0x2066 <_fpadd_parts+0x130>
    205e:	96 94       	lsr	r9
    2060:	87 94       	ror	r8
    2062:	77 94       	ror	r7
    2064:	67 94       	ror	r6
    2066:	0a 94       	dec	r0
    2068:	d2 f7       	brpl	.-12     	; 0x205e <_fpadd_parts+0x128>
    206a:	81 e0       	ldi	r24, 0x01	; 1
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	a0 e0       	ldi	r26, 0x00	; 0
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	0a 2c       	mov	r0, r10
    2074:	04 c0       	rjmp	.+8      	; 0x207e <_fpadd_parts+0x148>
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	aa 1f       	adc	r26, r26
    207c:	bb 1f       	adc	r27, r27
    207e:	0a 94       	dec	r0
    2080:	d2 f7       	brpl	.-12     	; 0x2076 <_fpadd_parts+0x140>
    2082:	01 97       	sbiw	r24, 0x01	; 1
    2084:	a1 09       	sbc	r26, r1
    2086:	b1 09       	sbc	r27, r1
    2088:	82 23       	and	r24, r18
    208a:	93 23       	and	r25, r19
    208c:	a4 23       	and	r26, r20
    208e:	b5 23       	and	r27, r21
    2090:	21 e0       	ldi	r18, 0x01	; 1
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	40 e0       	ldi	r20, 0x00	; 0
    2096:	50 e0       	ldi	r21, 0x00	; 0
    2098:	00 97       	sbiw	r24, 0x00	; 0
    209a:	a1 05       	cpc	r26, r1
    209c:	b1 05       	cpc	r27, r1
    209e:	19 f4       	brne	.+6      	; 0x20a6 <_fpadd_parts+0x170>
    20a0:	20 e0       	ldi	r18, 0x00	; 0
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	a9 01       	movw	r20, r18
    20a6:	26 29       	or	r18, r6
    20a8:	37 29       	or	r19, r7
    20aa:	48 29       	or	r20, r8
    20ac:	59 29       	or	r21, r9
    20ae:	0b c0       	rjmp	.+22     	; 0x20c6 <_fpadd_parts+0x190>
    20b0:	6c 14       	cp	r6, r12
    20b2:	7d 04       	cpc	r7, r13
    20b4:	24 f4       	brge	.+8      	; 0x20be <_fpadd_parts+0x188>
    20b6:	ee 24       	eor	r14, r14
    20b8:	ff 24       	eor	r15, r15
    20ba:	87 01       	movw	r16, r14
    20bc:	04 c0       	rjmp	.+8      	; 0x20c6 <_fpadd_parts+0x190>
    20be:	63 01       	movw	r12, r6
    20c0:	20 e0       	ldi	r18, 0x00	; 0
    20c2:	30 e0       	ldi	r19, 0x00	; 0
    20c4:	a9 01       	movw	r20, r18
    20c6:	81 81       	ldd	r24, Z+1	; 0x01
    20c8:	fb 01       	movw	r30, r22
    20ca:	91 81       	ldd	r25, Z+1	; 0x01
    20cc:	89 17       	cp	r24, r25
    20ce:	09 f4       	brne	.+2      	; 0x20d2 <_fpadd_parts+0x19c>
    20d0:	45 c0       	rjmp	.+138    	; 0x215c <_fpadd_parts+0x226>
    20d2:	88 23       	and	r24, r24
    20d4:	49 f0       	breq	.+18     	; 0x20e8 <_fpadd_parts+0x1b2>
    20d6:	d8 01       	movw	r26, r16
    20d8:	c7 01       	movw	r24, r14
    20da:	82 1b       	sub	r24, r18
    20dc:	93 0b       	sbc	r25, r19
    20de:	a4 0b       	sbc	r26, r20
    20e0:	b5 0b       	sbc	r27, r21
    20e2:	9c 01       	movw	r18, r24
    20e4:	ad 01       	movw	r20, r26
    20e6:	04 c0       	rjmp	.+8      	; 0x20f0 <_fpadd_parts+0x1ba>
    20e8:	2e 19       	sub	r18, r14
    20ea:	3f 09       	sbc	r19, r15
    20ec:	40 0b       	sbc	r20, r16
    20ee:	51 0b       	sbc	r21, r17
    20f0:	57 fd       	sbrc	r21, 7
    20f2:	04 c0       	rjmp	.+8      	; 0x20fc <_fpadd_parts+0x1c6>
    20f4:	19 82       	std	Y+1, r1	; 0x01
    20f6:	db 82       	std	Y+3, r13	; 0x03
    20f8:	ca 82       	std	Y+2, r12	; 0x02
    20fa:	0b c0       	rjmp	.+22     	; 0x2112 <_fpadd_parts+0x1dc>
    20fc:	81 e0       	ldi	r24, 0x01	; 1
    20fe:	89 83       	std	Y+1, r24	; 0x01
    2100:	db 82       	std	Y+3, r13	; 0x03
    2102:	ca 82       	std	Y+2, r12	; 0x02
    2104:	50 95       	com	r21
    2106:	40 95       	com	r20
    2108:	30 95       	com	r19
    210a:	21 95       	neg	r18
    210c:	3f 4f       	sbci	r19, 0xFF	; 255
    210e:	4f 4f       	sbci	r20, 0xFF	; 255
    2110:	5f 4f       	sbci	r21, 0xFF	; 255
    2112:	2c 83       	std	Y+4, r18	; 0x04
    2114:	3d 83       	std	Y+5, r19	; 0x05
    2116:	4e 83       	std	Y+6, r20	; 0x06
    2118:	5f 83       	std	Y+7, r21	; 0x07
    211a:	0d c0       	rjmp	.+26     	; 0x2136 <_fpadd_parts+0x200>
    211c:	88 0f       	add	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	aa 1f       	adc	r26, r26
    2122:	bb 1f       	adc	r27, r27
    2124:	8c 83       	std	Y+4, r24	; 0x04
    2126:	9d 83       	std	Y+5, r25	; 0x05
    2128:	ae 83       	std	Y+6, r26	; 0x06
    212a:	bf 83       	std	Y+7, r27	; 0x07
    212c:	8a 81       	ldd	r24, Y+2	; 0x02
    212e:	9b 81       	ldd	r25, Y+3	; 0x03
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	9b 83       	std	Y+3, r25	; 0x03
    2134:	8a 83       	std	Y+2, r24	; 0x02
    2136:	8c 81       	ldd	r24, Y+4	; 0x04
    2138:	9d 81       	ldd	r25, Y+5	; 0x05
    213a:	ae 81       	ldd	r26, Y+6	; 0x06
    213c:	bf 81       	ldd	r27, Y+7	; 0x07
    213e:	9c 01       	movw	r18, r24
    2140:	ad 01       	movw	r20, r26
    2142:	21 50       	subi	r18, 0x01	; 1
    2144:	30 40       	sbci	r19, 0x00	; 0
    2146:	40 40       	sbci	r20, 0x00	; 0
    2148:	50 40       	sbci	r21, 0x00	; 0
    214a:	2f 3f       	cpi	r18, 0xFF	; 255
    214c:	ef ef       	ldi	r30, 0xFF	; 255
    214e:	3e 07       	cpc	r19, r30
    2150:	ef ef       	ldi	r30, 0xFF	; 255
    2152:	4e 07       	cpc	r20, r30
    2154:	ef e3       	ldi	r30, 0x3F	; 63
    2156:	5e 07       	cpc	r21, r30
    2158:	08 f3       	brcs	.-62     	; 0x211c <_fpadd_parts+0x1e6>
    215a:	0b c0       	rjmp	.+22     	; 0x2172 <_fpadd_parts+0x23c>
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	db 82       	std	Y+3, r13	; 0x03
    2160:	ca 82       	std	Y+2, r12	; 0x02
    2162:	2e 0d       	add	r18, r14
    2164:	3f 1d       	adc	r19, r15
    2166:	40 1f       	adc	r20, r16
    2168:	51 1f       	adc	r21, r17
    216a:	2c 83       	std	Y+4, r18	; 0x04
    216c:	3d 83       	std	Y+5, r19	; 0x05
    216e:	4e 83       	std	Y+6, r20	; 0x06
    2170:	5f 83       	std	Y+7, r21	; 0x07
    2172:	83 e0       	ldi	r24, 0x03	; 3
    2174:	88 83       	st	Y, r24
    2176:	2c 81       	ldd	r18, Y+4	; 0x04
    2178:	3d 81       	ldd	r19, Y+5	; 0x05
    217a:	4e 81       	ldd	r20, Y+6	; 0x06
    217c:	5f 81       	ldd	r21, Y+7	; 0x07
    217e:	57 ff       	sbrs	r21, 7
    2180:	1d c0       	rjmp	.+58     	; 0x21bc <_fpadd_parts+0x286>
    2182:	da 01       	movw	r26, r20
    2184:	c9 01       	movw	r24, r18
    2186:	81 70       	andi	r24, 0x01	; 1
    2188:	90 70       	andi	r25, 0x00	; 0
    218a:	a0 70       	andi	r26, 0x00	; 0
    218c:	b0 70       	andi	r27, 0x00	; 0
    218e:	56 95       	lsr	r21
    2190:	47 95       	ror	r20
    2192:	37 95       	ror	r19
    2194:	27 95       	ror	r18
    2196:	82 2b       	or	r24, r18
    2198:	93 2b       	or	r25, r19
    219a:	a4 2b       	or	r26, r20
    219c:	b5 2b       	or	r27, r21
    219e:	8c 83       	std	Y+4, r24	; 0x04
    21a0:	9d 83       	std	Y+5, r25	; 0x05
    21a2:	ae 83       	std	Y+6, r26	; 0x06
    21a4:	bf 83       	std	Y+7, r27	; 0x07
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	9b 81       	ldd	r25, Y+3	; 0x03
    21aa:	01 96       	adiw	r24, 0x01	; 1
    21ac:	9b 83       	std	Y+3, r25	; 0x03
    21ae:	8a 83       	std	Y+2, r24	; 0x02
    21b0:	05 c0       	rjmp	.+10     	; 0x21bc <_fpadd_parts+0x286>
    21b2:	eb ee       	ldi	r30, 0xEB	; 235
    21b4:	f1 e0       	ldi	r31, 0x01	; 1
    21b6:	03 c0       	rjmp	.+6      	; 0x21be <_fpadd_parts+0x288>
    21b8:	fb 01       	movw	r30, r22
    21ba:	01 c0       	rjmp	.+2      	; 0x21be <_fpadd_parts+0x288>
    21bc:	fe 01       	movw	r30, r28
    21be:	cf 01       	movw	r24, r30
    21c0:	cd b7       	in	r28, 0x3d	; 61
    21c2:	de b7       	in	r29, 0x3e	; 62
    21c4:	ee e0       	ldi	r30, 0x0E	; 14
    21c6:	0c 94 05 27 	jmp	0x4e0a	; 0x4e0a <__epilogue_restores__+0x8>

000021ca <__addsf3>:
    21ca:	a0 e2       	ldi	r26, 0x20	; 32
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	eb ee       	ldi	r30, 0xEB	; 235
    21d0:	f0 e1       	ldi	r31, 0x10	; 16
    21d2:	0c 94 f1 26 	jmp	0x4de2	; 0x4de2 <__prologue_saves__+0x18>
    21d6:	69 83       	std	Y+1, r22	; 0x01
    21d8:	7a 83       	std	Y+2, r23	; 0x02
    21da:	8b 83       	std	Y+3, r24	; 0x03
    21dc:	9c 83       	std	Y+4, r25	; 0x04
    21de:	2d 83       	std	Y+5, r18	; 0x05
    21e0:	3e 83       	std	Y+6, r19	; 0x06
    21e2:	4f 83       	std	Y+7, r20	; 0x07
    21e4:	58 87       	std	Y+8, r21	; 0x08
    21e6:	89 e0       	ldi	r24, 0x09	; 9
    21e8:	e8 2e       	mov	r14, r24
    21ea:	f1 2c       	mov	r15, r1
    21ec:	ec 0e       	add	r14, r28
    21ee:	fd 1e       	adc	r15, r29
    21f0:	ce 01       	movw	r24, r28
    21f2:	01 96       	adiw	r24, 0x01	; 1
    21f4:	b7 01       	movw	r22, r14
    21f6:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    21fa:	8e 01       	movw	r16, r28
    21fc:	0f 5e       	subi	r16, 0xEF	; 239
    21fe:	1f 4f       	sbci	r17, 0xFF	; 255
    2200:	ce 01       	movw	r24, r28
    2202:	05 96       	adiw	r24, 0x05	; 5
    2204:	b8 01       	movw	r22, r16
    2206:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    220a:	c7 01       	movw	r24, r14
    220c:	b8 01       	movw	r22, r16
    220e:	ae 01       	movw	r20, r28
    2210:	47 5e       	subi	r20, 0xE7	; 231
    2212:	5f 4f       	sbci	r21, 0xFF	; 255
    2214:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <_fpadd_parts>
    2218:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__pack_f>
    221c:	a0 96       	adiw	r28, 0x20	; 32
    221e:	e6 e0       	ldi	r30, 0x06	; 6
    2220:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__epilogue_restores__+0x18>

00002224 <__subsf3>:
    2224:	a0 e2       	ldi	r26, 0x20	; 32
    2226:	b0 e0       	ldi	r27, 0x00	; 0
    2228:	e8 e1       	ldi	r30, 0x18	; 24
    222a:	f1 e1       	ldi	r31, 0x11	; 17
    222c:	0c 94 f1 26 	jmp	0x4de2	; 0x4de2 <__prologue_saves__+0x18>
    2230:	69 83       	std	Y+1, r22	; 0x01
    2232:	7a 83       	std	Y+2, r23	; 0x02
    2234:	8b 83       	std	Y+3, r24	; 0x03
    2236:	9c 83       	std	Y+4, r25	; 0x04
    2238:	2d 83       	std	Y+5, r18	; 0x05
    223a:	3e 83       	std	Y+6, r19	; 0x06
    223c:	4f 83       	std	Y+7, r20	; 0x07
    223e:	58 87       	std	Y+8, r21	; 0x08
    2240:	8e 01       	movw	r16, r28
    2242:	07 5f       	subi	r16, 0xF7	; 247
    2244:	1f 4f       	sbci	r17, 0xFF	; 255
    2246:	ce 01       	movw	r24, r28
    2248:	01 96       	adiw	r24, 0x01	; 1
    224a:	b8 01       	movw	r22, r16
    224c:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    2250:	91 e1       	ldi	r25, 0x11	; 17
    2252:	e9 2e       	mov	r14, r25
    2254:	f1 2c       	mov	r15, r1
    2256:	ec 0e       	add	r14, r28
    2258:	fd 1e       	adc	r15, r29
    225a:	ce 01       	movw	r24, r28
    225c:	05 96       	adiw	r24, 0x05	; 5
    225e:	b7 01       	movw	r22, r14
    2260:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    2264:	8a 89       	ldd	r24, Y+18	; 0x12
    2266:	91 e0       	ldi	r25, 0x01	; 1
    2268:	89 27       	eor	r24, r25
    226a:	8a 8b       	std	Y+18, r24	; 0x12
    226c:	c8 01       	movw	r24, r16
    226e:	b7 01       	movw	r22, r14
    2270:	ae 01       	movw	r20, r28
    2272:	47 5e       	subi	r20, 0xE7	; 231
    2274:	5f 4f       	sbci	r21, 0xFF	; 255
    2276:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <_fpadd_parts>
    227a:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__pack_f>
    227e:	a0 96       	adiw	r28, 0x20	; 32
    2280:	e6 e0       	ldi	r30, 0x06	; 6
    2282:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__epilogue_restores__+0x18>

00002286 <__mulsf3>:
    2286:	a0 e2       	ldi	r26, 0x20	; 32
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e9 e4       	ldi	r30, 0x49	; 73
    228c:	f1 e1       	ldi	r31, 0x11	; 17
    228e:	0c 94 e5 26 	jmp	0x4dca	; 0x4dca <__prologue_saves__>
    2292:	69 83       	std	Y+1, r22	; 0x01
    2294:	7a 83       	std	Y+2, r23	; 0x02
    2296:	8b 83       	std	Y+3, r24	; 0x03
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	2d 83       	std	Y+5, r18	; 0x05
    229c:	3e 83       	std	Y+6, r19	; 0x06
    229e:	4f 83       	std	Y+7, r20	; 0x07
    22a0:	58 87       	std	Y+8, r21	; 0x08
    22a2:	ce 01       	movw	r24, r28
    22a4:	01 96       	adiw	r24, 0x01	; 1
    22a6:	be 01       	movw	r22, r28
    22a8:	67 5f       	subi	r22, 0xF7	; 247
    22aa:	7f 4f       	sbci	r23, 0xFF	; 255
    22ac:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    22b0:	ce 01       	movw	r24, r28
    22b2:	05 96       	adiw	r24, 0x05	; 5
    22b4:	be 01       	movw	r22, r28
    22b6:	6f 5e       	subi	r22, 0xEF	; 239
    22b8:	7f 4f       	sbci	r23, 0xFF	; 255
    22ba:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    22be:	99 85       	ldd	r25, Y+9	; 0x09
    22c0:	92 30       	cpi	r25, 0x02	; 2
    22c2:	78 f0       	brcs	.+30     	; 0x22e2 <__mulsf3+0x5c>
    22c4:	89 89       	ldd	r24, Y+17	; 0x11
    22c6:	82 30       	cpi	r24, 0x02	; 2
    22c8:	c0 f0       	brcs	.+48     	; 0x22fa <__mulsf3+0x74>
    22ca:	94 30       	cpi	r25, 0x04	; 4
    22cc:	19 f4       	brne	.+6      	; 0x22d4 <__mulsf3+0x4e>
    22ce:	82 30       	cpi	r24, 0x02	; 2
    22d0:	41 f4       	brne	.+16     	; 0x22e2 <__mulsf3+0x5c>
    22d2:	cb c0       	rjmp	.+406    	; 0x246a <__mulsf3+0x1e4>
    22d4:	84 30       	cpi	r24, 0x04	; 4
    22d6:	19 f4       	brne	.+6      	; 0x22de <__mulsf3+0x58>
    22d8:	92 30       	cpi	r25, 0x02	; 2
    22da:	79 f4       	brne	.+30     	; 0x22fa <__mulsf3+0x74>
    22dc:	c6 c0       	rjmp	.+396    	; 0x246a <__mulsf3+0x1e4>
    22de:	92 30       	cpi	r25, 0x02	; 2
    22e0:	51 f4       	brne	.+20     	; 0x22f6 <__mulsf3+0x70>
    22e2:	81 e0       	ldi	r24, 0x01	; 1
    22e4:	2a 85       	ldd	r18, Y+10	; 0x0a
    22e6:	9a 89       	ldd	r25, Y+18	; 0x12
    22e8:	29 17       	cp	r18, r25
    22ea:	09 f4       	brne	.+2      	; 0x22ee <__mulsf3+0x68>
    22ec:	80 e0       	ldi	r24, 0x00	; 0
    22ee:	8a 87       	std	Y+10, r24	; 0x0a
    22f0:	ce 01       	movw	r24, r28
    22f2:	09 96       	adiw	r24, 0x09	; 9
    22f4:	bc c0       	rjmp	.+376    	; 0x246e <__mulsf3+0x1e8>
    22f6:	82 30       	cpi	r24, 0x02	; 2
    22f8:	51 f4       	brne	.+20     	; 0x230e <__mulsf3+0x88>
    22fa:	81 e0       	ldi	r24, 0x01	; 1
    22fc:	2a 85       	ldd	r18, Y+10	; 0x0a
    22fe:	9a 89       	ldd	r25, Y+18	; 0x12
    2300:	29 17       	cp	r18, r25
    2302:	09 f4       	brne	.+2      	; 0x2306 <__mulsf3+0x80>
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	8a 8b       	std	Y+18, r24	; 0x12
    2308:	ce 01       	movw	r24, r28
    230a:	41 96       	adiw	r24, 0x11	; 17
    230c:	b0 c0       	rjmp	.+352    	; 0x246e <__mulsf3+0x1e8>
    230e:	6d 84       	ldd	r6, Y+13	; 0x0d
    2310:	7e 84       	ldd	r7, Y+14	; 0x0e
    2312:	8f 84       	ldd	r8, Y+15	; 0x0f
    2314:	98 88       	ldd	r9, Y+16	; 0x10
    2316:	ed 88       	ldd	r14, Y+21	; 0x15
    2318:	fe 88       	ldd	r15, Y+22	; 0x16
    231a:	0f 89       	ldd	r16, Y+23	; 0x17
    231c:	18 8d       	ldd	r17, Y+24	; 0x18
    231e:	e0 e2       	ldi	r30, 0x20	; 32
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 e0       	ldi	r24, 0x00	; 0
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	dc 01       	movw	r26, r24
    2328:	aa 24       	eor	r10, r10
    232a:	bb 24       	eor	r11, r11
    232c:	65 01       	movw	r12, r10
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	a9 01       	movw	r20, r18
    2334:	b3 01       	movw	r22, r6
    2336:	61 70       	andi	r22, 0x01	; 1
    2338:	70 70       	andi	r23, 0x00	; 0
    233a:	61 15       	cp	r22, r1
    233c:	71 05       	cpc	r23, r1
    233e:	d1 f0       	breq	.+52     	; 0x2374 <__mulsf3+0xee>
    2340:	2e 0d       	add	r18, r14
    2342:	3f 1d       	adc	r19, r15
    2344:	40 1f       	adc	r20, r16
    2346:	51 1f       	adc	r21, r17
    2348:	15 01       	movw	r2, r10
    234a:	26 01       	movw	r4, r12
    234c:	28 0e       	add	r2, r24
    234e:	39 1e       	adc	r3, r25
    2350:	4a 1e       	adc	r4, r26
    2352:	5b 1e       	adc	r5, r27
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	a0 e0       	ldi	r26, 0x00	; 0
    235a:	b0 e0       	ldi	r27, 0x00	; 0
    235c:	2e 15       	cp	r18, r14
    235e:	3f 05       	cpc	r19, r15
    2360:	40 07       	cpc	r20, r16
    2362:	51 07       	cpc	r21, r17
    2364:	18 f0       	brcs	.+6      	; 0x236c <__mulsf3+0xe6>
    2366:	80 e0       	ldi	r24, 0x00	; 0
    2368:	90 e0       	ldi	r25, 0x00	; 0
    236a:	dc 01       	movw	r26, r24
    236c:	82 0d       	add	r24, r2
    236e:	93 1d       	adc	r25, r3
    2370:	a4 1d       	adc	r26, r4
    2372:	b5 1d       	adc	r27, r5
    2374:	aa 0c       	add	r10, r10
    2376:	bb 1c       	adc	r11, r11
    2378:	cc 1c       	adc	r12, r12
    237a:	dd 1c       	adc	r13, r13
    237c:	17 ff       	sbrs	r17, 7
    237e:	09 c0       	rjmp	.+18     	; 0x2392 <__mulsf3+0x10c>
    2380:	61 e0       	ldi	r22, 0x01	; 1
    2382:	26 2e       	mov	r2, r22
    2384:	31 2c       	mov	r3, r1
    2386:	41 2c       	mov	r4, r1
    2388:	51 2c       	mov	r5, r1
    238a:	a2 28       	or	r10, r2
    238c:	b3 28       	or	r11, r3
    238e:	c4 28       	or	r12, r4
    2390:	d5 28       	or	r13, r5
    2392:	31 97       	sbiw	r30, 0x01	; 1
    2394:	49 f0       	breq	.+18     	; 0x23a8 <__mulsf3+0x122>
    2396:	ee 0c       	add	r14, r14
    2398:	ff 1c       	adc	r15, r15
    239a:	00 1f       	adc	r16, r16
    239c:	11 1f       	adc	r17, r17
    239e:	96 94       	lsr	r9
    23a0:	87 94       	ror	r8
    23a2:	77 94       	ror	r7
    23a4:	67 94       	ror	r6
    23a6:	c6 cf       	rjmp	.-116    	; 0x2334 <__mulsf3+0xae>
    23a8:	6b 89       	ldd	r22, Y+19	; 0x13
    23aa:	7c 89       	ldd	r23, Y+20	; 0x14
    23ac:	eb 85       	ldd	r30, Y+11	; 0x0b
    23ae:	fc 85       	ldd	r31, Y+12	; 0x0c
    23b0:	6e 0f       	add	r22, r30
    23b2:	7f 1f       	adc	r23, r31
    23b4:	6e 5f       	subi	r22, 0xFE	; 254
    23b6:	7f 4f       	sbci	r23, 0xFF	; 255
    23b8:	7c 8f       	std	Y+28, r23	; 0x1c
    23ba:	6b 8f       	std	Y+27, r22	; 0x1b
    23bc:	61 e0       	ldi	r22, 0x01	; 1
    23be:	ea 85       	ldd	r30, Y+10	; 0x0a
    23c0:	7a 89       	ldd	r23, Y+18	; 0x12
    23c2:	e7 17       	cp	r30, r23
    23c4:	09 f4       	brne	.+2      	; 0x23c8 <__mulsf3+0x142>
    23c6:	60 e0       	ldi	r22, 0x00	; 0
    23c8:	6a 8f       	std	Y+26, r22	; 0x1a
    23ca:	6b 8d       	ldd	r22, Y+27	; 0x1b
    23cc:	7c 8d       	ldd	r23, Y+28	; 0x1c
    23ce:	10 c0       	rjmp	.+32     	; 0x23f0 <__mulsf3+0x16a>
    23d0:	fc 01       	movw	r30, r24
    23d2:	e1 70       	andi	r30, 0x01	; 1
    23d4:	f0 70       	andi	r31, 0x00	; 0
    23d6:	30 97       	sbiw	r30, 0x00	; 0
    23d8:	29 f0       	breq	.+10     	; 0x23e4 <__mulsf3+0x15e>
    23da:	56 95       	lsr	r21
    23dc:	47 95       	ror	r20
    23de:	37 95       	ror	r19
    23e0:	27 95       	ror	r18
    23e2:	50 68       	ori	r21, 0x80	; 128
    23e4:	b6 95       	lsr	r27
    23e6:	a7 95       	ror	r26
    23e8:	97 95       	ror	r25
    23ea:	87 95       	ror	r24
    23ec:	6f 5f       	subi	r22, 0xFF	; 255
    23ee:	7f 4f       	sbci	r23, 0xFF	; 255
    23f0:	b7 fd       	sbrc	r27, 7
    23f2:	ee cf       	rjmp	.-36     	; 0x23d0 <__mulsf3+0x14a>
    23f4:	0c c0       	rjmp	.+24     	; 0x240e <__mulsf3+0x188>
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	aa 1f       	adc	r26, r26
    23fc:	bb 1f       	adc	r27, r27
    23fe:	57 fd       	sbrc	r21, 7
    2400:	81 60       	ori	r24, 0x01	; 1
    2402:	22 0f       	add	r18, r18
    2404:	33 1f       	adc	r19, r19
    2406:	44 1f       	adc	r20, r20
    2408:	55 1f       	adc	r21, r21
    240a:	61 50       	subi	r22, 0x01	; 1
    240c:	70 40       	sbci	r23, 0x00	; 0
    240e:	80 30       	cpi	r24, 0x00	; 0
    2410:	e0 e0       	ldi	r30, 0x00	; 0
    2412:	9e 07       	cpc	r25, r30
    2414:	e0 e0       	ldi	r30, 0x00	; 0
    2416:	ae 07       	cpc	r26, r30
    2418:	e0 e4       	ldi	r30, 0x40	; 64
    241a:	be 07       	cpc	r27, r30
    241c:	60 f3       	brcs	.-40     	; 0x23f6 <__mulsf3+0x170>
    241e:	6b 8f       	std	Y+27, r22	; 0x1b
    2420:	7c 8f       	std	Y+28, r23	; 0x1c
    2422:	6f e7       	ldi	r22, 0x7F	; 127
    2424:	e6 2e       	mov	r14, r22
    2426:	f1 2c       	mov	r15, r1
    2428:	01 2d       	mov	r16, r1
    242a:	11 2d       	mov	r17, r1
    242c:	e8 22       	and	r14, r24
    242e:	f9 22       	and	r15, r25
    2430:	0a 23       	and	r16, r26
    2432:	1b 23       	and	r17, r27
    2434:	60 e4       	ldi	r22, 0x40	; 64
    2436:	e6 16       	cp	r14, r22
    2438:	f1 04       	cpc	r15, r1
    243a:	01 05       	cpc	r16, r1
    243c:	11 05       	cpc	r17, r1
    243e:	61 f4       	brne	.+24     	; 0x2458 <__mulsf3+0x1d2>
    2440:	87 fd       	sbrc	r24, 7
    2442:	0a c0       	rjmp	.+20     	; 0x2458 <__mulsf3+0x1d2>
    2444:	21 15       	cp	r18, r1
    2446:	31 05       	cpc	r19, r1
    2448:	41 05       	cpc	r20, r1
    244a:	51 05       	cpc	r21, r1
    244c:	29 f0       	breq	.+10     	; 0x2458 <__mulsf3+0x1d2>
    244e:	80 5c       	subi	r24, 0xC0	; 192
    2450:	9f 4f       	sbci	r25, 0xFF	; 255
    2452:	af 4f       	sbci	r26, 0xFF	; 255
    2454:	bf 4f       	sbci	r27, 0xFF	; 255
    2456:	80 78       	andi	r24, 0x80	; 128
    2458:	8d 8f       	std	Y+29, r24	; 0x1d
    245a:	9e 8f       	std	Y+30, r25	; 0x1e
    245c:	af 8f       	std	Y+31, r26	; 0x1f
    245e:	b8 a3       	std	Y+32, r27	; 0x20
    2460:	83 e0       	ldi	r24, 0x03	; 3
    2462:	89 8f       	std	Y+25, r24	; 0x19
    2464:	ce 01       	movw	r24, r28
    2466:	49 96       	adiw	r24, 0x19	; 25
    2468:	02 c0       	rjmp	.+4      	; 0x246e <__mulsf3+0x1e8>
    246a:	8b ee       	ldi	r24, 0xEB	; 235
    246c:	91 e0       	ldi	r25, 0x01	; 1
    246e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__pack_f>
    2472:	a0 96       	adiw	r28, 0x20	; 32
    2474:	e2 e1       	ldi	r30, 0x12	; 18
    2476:	0c 94 01 27 	jmp	0x4e02	; 0x4e02 <__epilogue_restores__>

0000247a <__divsf3>:
    247a:	a8 e1       	ldi	r26, 0x18	; 24
    247c:	b0 e0       	ldi	r27, 0x00	; 0
    247e:	e3 e4       	ldi	r30, 0x43	; 67
    2480:	f2 e1       	ldi	r31, 0x12	; 18
    2482:	0c 94 ed 26 	jmp	0x4dda	; 0x4dda <__prologue_saves__+0x10>
    2486:	69 83       	std	Y+1, r22	; 0x01
    2488:	7a 83       	std	Y+2, r23	; 0x02
    248a:	8b 83       	std	Y+3, r24	; 0x03
    248c:	9c 83       	std	Y+4, r25	; 0x04
    248e:	2d 83       	std	Y+5, r18	; 0x05
    2490:	3e 83       	std	Y+6, r19	; 0x06
    2492:	4f 83       	std	Y+7, r20	; 0x07
    2494:	58 87       	std	Y+8, r21	; 0x08
    2496:	8e 01       	movw	r16, r28
    2498:	07 5f       	subi	r16, 0xF7	; 247
    249a:	1f 4f       	sbci	r17, 0xFF	; 255
    249c:	ce 01       	movw	r24, r28
    249e:	01 96       	adiw	r24, 0x01	; 1
    24a0:	b8 01       	movw	r22, r16
    24a2:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    24a6:	81 e1       	ldi	r24, 0x11	; 17
    24a8:	e8 2e       	mov	r14, r24
    24aa:	f1 2c       	mov	r15, r1
    24ac:	ec 0e       	add	r14, r28
    24ae:	fd 1e       	adc	r15, r29
    24b0:	ce 01       	movw	r24, r28
    24b2:	05 96       	adiw	r24, 0x05	; 5
    24b4:	b7 01       	movw	r22, r14
    24b6:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    24ba:	99 85       	ldd	r25, Y+9	; 0x09
    24bc:	92 30       	cpi	r25, 0x02	; 2
    24be:	08 f4       	brcc	.+2      	; 0x24c2 <__divsf3+0x48>
    24c0:	83 c0       	rjmp	.+262    	; 0x25c8 <__divsf3+0x14e>
    24c2:	89 89       	ldd	r24, Y+17	; 0x11
    24c4:	82 30       	cpi	r24, 0x02	; 2
    24c6:	08 f4       	brcc	.+2      	; 0x24ca <__divsf3+0x50>
    24c8:	7b c0       	rjmp	.+246    	; 0x25c0 <__divsf3+0x146>
    24ca:	2a 85       	ldd	r18, Y+10	; 0x0a
    24cc:	3a 89       	ldd	r19, Y+18	; 0x12
    24ce:	23 27       	eor	r18, r19
    24d0:	2a 87       	std	Y+10, r18	; 0x0a
    24d2:	94 30       	cpi	r25, 0x04	; 4
    24d4:	11 f0       	breq	.+4      	; 0x24da <__divsf3+0x60>
    24d6:	92 30       	cpi	r25, 0x02	; 2
    24d8:	21 f4       	brne	.+8      	; 0x24e2 <__divsf3+0x68>
    24da:	98 17       	cp	r25, r24
    24dc:	09 f0       	breq	.+2      	; 0x24e0 <__divsf3+0x66>
    24de:	6c c0       	rjmp	.+216    	; 0x25b8 <__divsf3+0x13e>
    24e0:	71 c0       	rjmp	.+226    	; 0x25c4 <__divsf3+0x14a>
    24e2:	84 30       	cpi	r24, 0x04	; 4
    24e4:	39 f4       	brne	.+14     	; 0x24f4 <__divsf3+0x7a>
    24e6:	1d 86       	std	Y+13, r1	; 0x0d
    24e8:	1e 86       	std	Y+14, r1	; 0x0e
    24ea:	1f 86       	std	Y+15, r1	; 0x0f
    24ec:	18 8a       	std	Y+16, r1	; 0x10
    24ee:	1c 86       	std	Y+12, r1	; 0x0c
    24f0:	1b 86       	std	Y+11, r1	; 0x0b
    24f2:	6a c0       	rjmp	.+212    	; 0x25c8 <__divsf3+0x14e>
    24f4:	82 30       	cpi	r24, 0x02	; 2
    24f6:	19 f4       	brne	.+6      	; 0x24fe <__divsf3+0x84>
    24f8:	84 e0       	ldi	r24, 0x04	; 4
    24fa:	89 87       	std	Y+9, r24	; 0x09
    24fc:	65 c0       	rjmp	.+202    	; 0x25c8 <__divsf3+0x14e>
    24fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    2500:	9c 85       	ldd	r25, Y+12	; 0x0c
    2502:	2b 89       	ldd	r18, Y+19	; 0x13
    2504:	3c 89       	ldd	r19, Y+20	; 0x14
    2506:	82 1b       	sub	r24, r18
    2508:	93 0b       	sbc	r25, r19
    250a:	9c 87       	std	Y+12, r25	; 0x0c
    250c:	8b 87       	std	Y+11, r24	; 0x0b
    250e:	2d 85       	ldd	r18, Y+13	; 0x0d
    2510:	3e 85       	ldd	r19, Y+14	; 0x0e
    2512:	4f 85       	ldd	r20, Y+15	; 0x0f
    2514:	58 89       	ldd	r21, Y+16	; 0x10
    2516:	ed 88       	ldd	r14, Y+21	; 0x15
    2518:	fe 88       	ldd	r15, Y+22	; 0x16
    251a:	0f 89       	ldd	r16, Y+23	; 0x17
    251c:	18 8d       	ldd	r17, Y+24	; 0x18
    251e:	2e 15       	cp	r18, r14
    2520:	3f 05       	cpc	r19, r15
    2522:	40 07       	cpc	r20, r16
    2524:	51 07       	cpc	r21, r17
    2526:	38 f4       	brcc	.+14     	; 0x2536 <__divsf3+0xbc>
    2528:	22 0f       	add	r18, r18
    252a:	33 1f       	adc	r19, r19
    252c:	44 1f       	adc	r20, r20
    252e:	55 1f       	adc	r21, r21
    2530:	01 97       	sbiw	r24, 0x01	; 1
    2532:	9c 87       	std	Y+12, r25	; 0x0c
    2534:	8b 87       	std	Y+11, r24	; 0x0b
    2536:	6f e1       	ldi	r22, 0x1F	; 31
    2538:	70 e0       	ldi	r23, 0x00	; 0
    253a:	a1 2c       	mov	r10, r1
    253c:	b1 2c       	mov	r11, r1
    253e:	c1 2c       	mov	r12, r1
    2540:	a0 e4       	ldi	r26, 0x40	; 64
    2542:	da 2e       	mov	r13, r26
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	dc 01       	movw	r26, r24
    254a:	2e 15       	cp	r18, r14
    254c:	3f 05       	cpc	r19, r15
    254e:	40 07       	cpc	r20, r16
    2550:	51 07       	cpc	r21, r17
    2552:	40 f0       	brcs	.+16     	; 0x2564 <__divsf3+0xea>
    2554:	8a 29       	or	r24, r10
    2556:	9b 29       	or	r25, r11
    2558:	ac 29       	or	r26, r12
    255a:	bd 29       	or	r27, r13
    255c:	2e 19       	sub	r18, r14
    255e:	3f 09       	sbc	r19, r15
    2560:	40 0b       	sbc	r20, r16
    2562:	51 0b       	sbc	r21, r17
    2564:	d6 94       	lsr	r13
    2566:	c7 94       	ror	r12
    2568:	b7 94       	ror	r11
    256a:	a7 94       	ror	r10
    256c:	22 0f       	add	r18, r18
    256e:	33 1f       	adc	r19, r19
    2570:	44 1f       	adc	r20, r20
    2572:	55 1f       	adc	r21, r21
    2574:	61 50       	subi	r22, 0x01	; 1
    2576:	70 40       	sbci	r23, 0x00	; 0
    2578:	41 f7       	brne	.-48     	; 0x254a <__divsf3+0xd0>
    257a:	6f e7       	ldi	r22, 0x7F	; 127
    257c:	e6 2e       	mov	r14, r22
    257e:	f1 2c       	mov	r15, r1
    2580:	01 2d       	mov	r16, r1
    2582:	11 2d       	mov	r17, r1
    2584:	e8 22       	and	r14, r24
    2586:	f9 22       	and	r15, r25
    2588:	0a 23       	and	r16, r26
    258a:	1b 23       	and	r17, r27
    258c:	60 e4       	ldi	r22, 0x40	; 64
    258e:	e6 16       	cp	r14, r22
    2590:	f1 04       	cpc	r15, r1
    2592:	01 05       	cpc	r16, r1
    2594:	11 05       	cpc	r17, r1
    2596:	61 f4       	brne	.+24     	; 0x25b0 <__divsf3+0x136>
    2598:	87 fd       	sbrc	r24, 7
    259a:	0a c0       	rjmp	.+20     	; 0x25b0 <__divsf3+0x136>
    259c:	21 15       	cp	r18, r1
    259e:	31 05       	cpc	r19, r1
    25a0:	41 05       	cpc	r20, r1
    25a2:	51 05       	cpc	r21, r1
    25a4:	29 f0       	breq	.+10     	; 0x25b0 <__divsf3+0x136>
    25a6:	80 5c       	subi	r24, 0xC0	; 192
    25a8:	9f 4f       	sbci	r25, 0xFF	; 255
    25aa:	af 4f       	sbci	r26, 0xFF	; 255
    25ac:	bf 4f       	sbci	r27, 0xFF	; 255
    25ae:	80 78       	andi	r24, 0x80	; 128
    25b0:	8d 87       	std	Y+13, r24	; 0x0d
    25b2:	9e 87       	std	Y+14, r25	; 0x0e
    25b4:	af 87       	std	Y+15, r26	; 0x0f
    25b6:	b8 8b       	std	Y+16, r27	; 0x10
    25b8:	8e 01       	movw	r16, r28
    25ba:	07 5f       	subi	r16, 0xF7	; 247
    25bc:	1f 4f       	sbci	r17, 0xFF	; 255
    25be:	04 c0       	rjmp	.+8      	; 0x25c8 <__divsf3+0x14e>
    25c0:	87 01       	movw	r16, r14
    25c2:	02 c0       	rjmp	.+4      	; 0x25c8 <__divsf3+0x14e>
    25c4:	0b ee       	ldi	r16, 0xEB	; 235
    25c6:	11 e0       	ldi	r17, 0x01	; 1
    25c8:	c8 01       	movw	r24, r16
    25ca:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__pack_f>
    25ce:	68 96       	adiw	r28, 0x18	; 24
    25d0:	ea e0       	ldi	r30, 0x0A	; 10
    25d2:	0c 94 09 27 	jmp	0x4e12	; 0x4e12 <__epilogue_restores__+0x10>

000025d6 <__eqsf2>:
    25d6:	a8 e1       	ldi	r26, 0x18	; 24
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	e1 ef       	ldi	r30, 0xF1	; 241
    25dc:	f2 e1       	ldi	r31, 0x12	; 18
    25de:	0c 94 f1 26 	jmp	0x4de2	; 0x4de2 <__prologue_saves__+0x18>
    25e2:	69 83       	std	Y+1, r22	; 0x01
    25e4:	7a 83       	std	Y+2, r23	; 0x02
    25e6:	8b 83       	std	Y+3, r24	; 0x03
    25e8:	9c 83       	std	Y+4, r25	; 0x04
    25ea:	2d 83       	std	Y+5, r18	; 0x05
    25ec:	3e 83       	std	Y+6, r19	; 0x06
    25ee:	4f 83       	std	Y+7, r20	; 0x07
    25f0:	58 87       	std	Y+8, r21	; 0x08
    25f2:	8e 01       	movw	r16, r28
    25f4:	07 5f       	subi	r16, 0xF7	; 247
    25f6:	1f 4f       	sbci	r17, 0xFF	; 255
    25f8:	ce 01       	movw	r24, r28
    25fa:	01 96       	adiw	r24, 0x01	; 1
    25fc:	b8 01       	movw	r22, r16
    25fe:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    2602:	81 e1       	ldi	r24, 0x11	; 17
    2604:	e8 2e       	mov	r14, r24
    2606:	f1 2c       	mov	r15, r1
    2608:	ec 0e       	add	r14, r28
    260a:	fd 1e       	adc	r15, r29
    260c:	ce 01       	movw	r24, r28
    260e:	05 96       	adiw	r24, 0x05	; 5
    2610:	b7 01       	movw	r22, r14
    2612:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    2616:	89 85       	ldd	r24, Y+9	; 0x09
    2618:	82 30       	cpi	r24, 0x02	; 2
    261a:	40 f0       	brcs	.+16     	; 0x262c <__eqsf2+0x56>
    261c:	89 89       	ldd	r24, Y+17	; 0x11
    261e:	82 30       	cpi	r24, 0x02	; 2
    2620:	28 f0       	brcs	.+10     	; 0x262c <__eqsf2+0x56>
    2622:	c8 01       	movw	r24, r16
    2624:	b7 01       	movw	r22, r14
    2626:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__fpcmp_parts_f>
    262a:	01 c0       	rjmp	.+2      	; 0x262e <__eqsf2+0x58>
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	68 96       	adiw	r28, 0x18	; 24
    2630:	e6 e0       	ldi	r30, 0x06	; 6
    2632:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__epilogue_restores__+0x18>

00002636 <__gtsf2>:
    2636:	a8 e1       	ldi	r26, 0x18	; 24
    2638:	b0 e0       	ldi	r27, 0x00	; 0
    263a:	e1 e2       	ldi	r30, 0x21	; 33
    263c:	f3 e1       	ldi	r31, 0x13	; 19
    263e:	0c 94 f1 26 	jmp	0x4de2	; 0x4de2 <__prologue_saves__+0x18>
    2642:	69 83       	std	Y+1, r22	; 0x01
    2644:	7a 83       	std	Y+2, r23	; 0x02
    2646:	8b 83       	std	Y+3, r24	; 0x03
    2648:	9c 83       	std	Y+4, r25	; 0x04
    264a:	2d 83       	std	Y+5, r18	; 0x05
    264c:	3e 83       	std	Y+6, r19	; 0x06
    264e:	4f 83       	std	Y+7, r20	; 0x07
    2650:	58 87       	std	Y+8, r21	; 0x08
    2652:	8e 01       	movw	r16, r28
    2654:	07 5f       	subi	r16, 0xF7	; 247
    2656:	1f 4f       	sbci	r17, 0xFF	; 255
    2658:	ce 01       	movw	r24, r28
    265a:	01 96       	adiw	r24, 0x01	; 1
    265c:	b8 01       	movw	r22, r16
    265e:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    2662:	81 e1       	ldi	r24, 0x11	; 17
    2664:	e8 2e       	mov	r14, r24
    2666:	f1 2c       	mov	r15, r1
    2668:	ec 0e       	add	r14, r28
    266a:	fd 1e       	adc	r15, r29
    266c:	ce 01       	movw	r24, r28
    266e:	05 96       	adiw	r24, 0x05	; 5
    2670:	b7 01       	movw	r22, r14
    2672:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    2676:	89 85       	ldd	r24, Y+9	; 0x09
    2678:	82 30       	cpi	r24, 0x02	; 2
    267a:	40 f0       	brcs	.+16     	; 0x268c <__gtsf2+0x56>
    267c:	89 89       	ldd	r24, Y+17	; 0x11
    267e:	82 30       	cpi	r24, 0x02	; 2
    2680:	28 f0       	brcs	.+10     	; 0x268c <__gtsf2+0x56>
    2682:	c8 01       	movw	r24, r16
    2684:	b7 01       	movw	r22, r14
    2686:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__fpcmp_parts_f>
    268a:	01 c0       	rjmp	.+2      	; 0x268e <__gtsf2+0x58>
    268c:	8f ef       	ldi	r24, 0xFF	; 255
    268e:	68 96       	adiw	r28, 0x18	; 24
    2690:	e6 e0       	ldi	r30, 0x06	; 6
    2692:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__epilogue_restores__+0x18>

00002696 <__gesf2>:
    2696:	a8 e1       	ldi	r26, 0x18	; 24
    2698:	b0 e0       	ldi	r27, 0x00	; 0
    269a:	e1 e5       	ldi	r30, 0x51	; 81
    269c:	f3 e1       	ldi	r31, 0x13	; 19
    269e:	0c 94 f1 26 	jmp	0x4de2	; 0x4de2 <__prologue_saves__+0x18>
    26a2:	69 83       	std	Y+1, r22	; 0x01
    26a4:	7a 83       	std	Y+2, r23	; 0x02
    26a6:	8b 83       	std	Y+3, r24	; 0x03
    26a8:	9c 83       	std	Y+4, r25	; 0x04
    26aa:	2d 83       	std	Y+5, r18	; 0x05
    26ac:	3e 83       	std	Y+6, r19	; 0x06
    26ae:	4f 83       	std	Y+7, r20	; 0x07
    26b0:	58 87       	std	Y+8, r21	; 0x08
    26b2:	8e 01       	movw	r16, r28
    26b4:	07 5f       	subi	r16, 0xF7	; 247
    26b6:	1f 4f       	sbci	r17, 0xFF	; 255
    26b8:	ce 01       	movw	r24, r28
    26ba:	01 96       	adiw	r24, 0x01	; 1
    26bc:	b8 01       	movw	r22, r16
    26be:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    26c2:	81 e1       	ldi	r24, 0x11	; 17
    26c4:	e8 2e       	mov	r14, r24
    26c6:	f1 2c       	mov	r15, r1
    26c8:	ec 0e       	add	r14, r28
    26ca:	fd 1e       	adc	r15, r29
    26cc:	ce 01       	movw	r24, r28
    26ce:	05 96       	adiw	r24, 0x05	; 5
    26d0:	b7 01       	movw	r22, r14
    26d2:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    26d6:	89 85       	ldd	r24, Y+9	; 0x09
    26d8:	82 30       	cpi	r24, 0x02	; 2
    26da:	40 f0       	brcs	.+16     	; 0x26ec <__gesf2+0x56>
    26dc:	89 89       	ldd	r24, Y+17	; 0x11
    26de:	82 30       	cpi	r24, 0x02	; 2
    26e0:	28 f0       	brcs	.+10     	; 0x26ec <__gesf2+0x56>
    26e2:	c8 01       	movw	r24, r16
    26e4:	b7 01       	movw	r22, r14
    26e6:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__fpcmp_parts_f>
    26ea:	01 c0       	rjmp	.+2      	; 0x26ee <__gesf2+0x58>
    26ec:	8f ef       	ldi	r24, 0xFF	; 255
    26ee:	68 96       	adiw	r28, 0x18	; 24
    26f0:	e6 e0       	ldi	r30, 0x06	; 6
    26f2:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__epilogue_restores__+0x18>

000026f6 <__ltsf2>:
    26f6:	a8 e1       	ldi	r26, 0x18	; 24
    26f8:	b0 e0       	ldi	r27, 0x00	; 0
    26fa:	e1 e8       	ldi	r30, 0x81	; 129
    26fc:	f3 e1       	ldi	r31, 0x13	; 19
    26fe:	0c 94 f1 26 	jmp	0x4de2	; 0x4de2 <__prologue_saves__+0x18>
    2702:	69 83       	std	Y+1, r22	; 0x01
    2704:	7a 83       	std	Y+2, r23	; 0x02
    2706:	8b 83       	std	Y+3, r24	; 0x03
    2708:	9c 83       	std	Y+4, r25	; 0x04
    270a:	2d 83       	std	Y+5, r18	; 0x05
    270c:	3e 83       	std	Y+6, r19	; 0x06
    270e:	4f 83       	std	Y+7, r20	; 0x07
    2710:	58 87       	std	Y+8, r21	; 0x08
    2712:	8e 01       	movw	r16, r28
    2714:	07 5f       	subi	r16, 0xF7	; 247
    2716:	1f 4f       	sbci	r17, 0xFF	; 255
    2718:	ce 01       	movw	r24, r28
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	b8 01       	movw	r22, r16
    271e:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    2722:	81 e1       	ldi	r24, 0x11	; 17
    2724:	e8 2e       	mov	r14, r24
    2726:	f1 2c       	mov	r15, r1
    2728:	ec 0e       	add	r14, r28
    272a:	fd 1e       	adc	r15, r29
    272c:	ce 01       	movw	r24, r28
    272e:	05 96       	adiw	r24, 0x05	; 5
    2730:	b7 01       	movw	r22, r14
    2732:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    2736:	89 85       	ldd	r24, Y+9	; 0x09
    2738:	82 30       	cpi	r24, 0x02	; 2
    273a:	40 f0       	brcs	.+16     	; 0x274c <__ltsf2+0x56>
    273c:	89 89       	ldd	r24, Y+17	; 0x11
    273e:	82 30       	cpi	r24, 0x02	; 2
    2740:	28 f0       	brcs	.+10     	; 0x274c <__ltsf2+0x56>
    2742:	c8 01       	movw	r24, r16
    2744:	b7 01       	movw	r22, r14
    2746:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__fpcmp_parts_f>
    274a:	01 c0       	rjmp	.+2      	; 0x274e <__ltsf2+0x58>
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	68 96       	adiw	r28, 0x18	; 24
    2750:	e6 e0       	ldi	r30, 0x06	; 6
    2752:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__epilogue_restores__+0x18>

00002756 <__floatsisf>:
    2756:	a8 e0       	ldi	r26, 0x08	; 8
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	e1 eb       	ldi	r30, 0xB1	; 177
    275c:	f3 e1       	ldi	r31, 0x13	; 19
    275e:	0c 94 f1 26 	jmp	0x4de2	; 0x4de2 <__prologue_saves__+0x18>
    2762:	7b 01       	movw	r14, r22
    2764:	8c 01       	movw	r16, r24
    2766:	83 e0       	ldi	r24, 0x03	; 3
    2768:	89 83       	std	Y+1, r24	; 0x01
    276a:	d8 01       	movw	r26, r16
    276c:	c7 01       	movw	r24, r14
    276e:	88 27       	eor	r24, r24
    2770:	b7 fd       	sbrc	r27, 7
    2772:	83 95       	inc	r24
    2774:	99 27       	eor	r25, r25
    2776:	aa 27       	eor	r26, r26
    2778:	bb 27       	eor	r27, r27
    277a:	28 2f       	mov	r18, r24
    277c:	8a 83       	std	Y+2, r24	; 0x02
    277e:	e1 14       	cp	r14, r1
    2780:	f1 04       	cpc	r15, r1
    2782:	01 05       	cpc	r16, r1
    2784:	11 05       	cpc	r17, r1
    2786:	19 f4       	brne	.+6      	; 0x278e <__floatsisf+0x38>
    2788:	82 e0       	ldi	r24, 0x02	; 2
    278a:	89 83       	std	Y+1, r24	; 0x01
    278c:	37 c0       	rjmp	.+110    	; 0x27fc <__floatsisf+0xa6>
    278e:	8e e1       	ldi	r24, 0x1E	; 30
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	9c 83       	std	Y+4, r25	; 0x04
    2794:	8b 83       	std	Y+3, r24	; 0x03
    2796:	22 23       	and	r18, r18
    2798:	89 f0       	breq	.+34     	; 0x27bc <__floatsisf+0x66>
    279a:	80 e0       	ldi	r24, 0x00	; 0
    279c:	e8 16       	cp	r14, r24
    279e:	80 e0       	ldi	r24, 0x00	; 0
    27a0:	f8 06       	cpc	r15, r24
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	08 07       	cpc	r16, r24
    27a6:	80 e8       	ldi	r24, 0x80	; 128
    27a8:	18 07       	cpc	r17, r24
    27aa:	69 f1       	breq	.+90     	; 0x2806 <__floatsisf+0xb0>
    27ac:	10 95       	com	r17
    27ae:	00 95       	com	r16
    27b0:	f0 94       	com	r15
    27b2:	e0 94       	com	r14
    27b4:	e1 1c       	adc	r14, r1
    27b6:	f1 1c       	adc	r15, r1
    27b8:	01 1d       	adc	r16, r1
    27ba:	11 1d       	adc	r17, r1
    27bc:	ed 82       	std	Y+5, r14	; 0x05
    27be:	fe 82       	std	Y+6, r15	; 0x06
    27c0:	0f 83       	std	Y+7, r16	; 0x07
    27c2:	18 87       	std	Y+8, r17	; 0x08
    27c4:	c8 01       	movw	r24, r16
    27c6:	b7 01       	movw	r22, r14
    27c8:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__clzsi2>
    27cc:	9c 01       	movw	r18, r24
    27ce:	21 50       	subi	r18, 0x01	; 1
    27d0:	30 40       	sbci	r19, 0x00	; 0
    27d2:	12 16       	cp	r1, r18
    27d4:	13 06       	cpc	r1, r19
    27d6:	94 f4       	brge	.+36     	; 0x27fc <__floatsisf+0xa6>
    27d8:	02 2e       	mov	r0, r18
    27da:	04 c0       	rjmp	.+8      	; 0x27e4 <__floatsisf+0x8e>
    27dc:	ee 0c       	add	r14, r14
    27de:	ff 1c       	adc	r15, r15
    27e0:	00 1f       	adc	r16, r16
    27e2:	11 1f       	adc	r17, r17
    27e4:	0a 94       	dec	r0
    27e6:	d2 f7       	brpl	.-12     	; 0x27dc <__floatsisf+0x86>
    27e8:	ed 82       	std	Y+5, r14	; 0x05
    27ea:	fe 82       	std	Y+6, r15	; 0x06
    27ec:	0f 83       	std	Y+7, r16	; 0x07
    27ee:	18 87       	std	Y+8, r17	; 0x08
    27f0:	8e e1       	ldi	r24, 0x1E	; 30
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	82 1b       	sub	r24, r18
    27f6:	93 0b       	sbc	r25, r19
    27f8:	9c 83       	std	Y+4, r25	; 0x04
    27fa:	8b 83       	std	Y+3, r24	; 0x03
    27fc:	ce 01       	movw	r24, r28
    27fe:	01 96       	adiw	r24, 0x01	; 1
    2800:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__pack_f>
    2804:	04 c0       	rjmp	.+8      	; 0x280e <__floatsisf+0xb8>
    2806:	60 e0       	ldi	r22, 0x00	; 0
    2808:	70 e0       	ldi	r23, 0x00	; 0
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	9f ec       	ldi	r25, 0xCF	; 207
    280e:	28 96       	adiw	r28, 0x08	; 8
    2810:	e6 e0       	ldi	r30, 0x06	; 6
    2812:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__epilogue_restores__+0x18>

00002816 <__fixsfsi>:
    2816:	ac e0       	ldi	r26, 0x0C	; 12
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	e1 e1       	ldi	r30, 0x11	; 17
    281c:	f4 e1       	ldi	r31, 0x14	; 20
    281e:	0c 94 f5 26 	jmp	0x4dea	; 0x4dea <__prologue_saves__+0x20>
    2822:	69 83       	std	Y+1, r22	; 0x01
    2824:	7a 83       	std	Y+2, r23	; 0x02
    2826:	8b 83       	std	Y+3, r24	; 0x03
    2828:	9c 83       	std	Y+4, r25	; 0x04
    282a:	ce 01       	movw	r24, r28
    282c:	01 96       	adiw	r24, 0x01	; 1
    282e:	be 01       	movw	r22, r28
    2830:	6b 5f       	subi	r22, 0xFB	; 251
    2832:	7f 4f       	sbci	r23, 0xFF	; 255
    2834:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <__unpack_f>
    2838:	8d 81       	ldd	r24, Y+5	; 0x05
    283a:	82 30       	cpi	r24, 0x02	; 2
    283c:	81 f1       	breq	.+96     	; 0x289e <__fixsfsi+0x88>
    283e:	82 30       	cpi	r24, 0x02	; 2
    2840:	70 f1       	brcs	.+92     	; 0x289e <__fixsfsi+0x88>
    2842:	84 30       	cpi	r24, 0x04	; 4
    2844:	21 f4       	brne	.+8      	; 0x284e <__fixsfsi+0x38>
    2846:	8e 81       	ldd	r24, Y+6	; 0x06
    2848:	88 23       	and	r24, r24
    284a:	69 f1       	breq	.+90     	; 0x28a6 <__fixsfsi+0x90>
    284c:	0a c0       	rjmp	.+20     	; 0x2862 <__fixsfsi+0x4c>
    284e:	2f 81       	ldd	r18, Y+7	; 0x07
    2850:	38 85       	ldd	r19, Y+8	; 0x08
    2852:	37 fd       	sbrc	r19, 7
    2854:	24 c0       	rjmp	.+72     	; 0x289e <__fixsfsi+0x88>
    2856:	6e 81       	ldd	r22, Y+6	; 0x06
    2858:	2f 31       	cpi	r18, 0x1F	; 31
    285a:	31 05       	cpc	r19, r1
    285c:	3c f0       	brlt	.+14     	; 0x286c <__fixsfsi+0x56>
    285e:	66 23       	and	r22, r22
    2860:	11 f1       	breq	.+68     	; 0x28a6 <__fixsfsi+0x90>
    2862:	20 e0       	ldi	r18, 0x00	; 0
    2864:	30 e0       	ldi	r19, 0x00	; 0
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	50 e8       	ldi	r21, 0x80	; 128
    286a:	21 c0       	rjmp	.+66     	; 0x28ae <__fixsfsi+0x98>
    286c:	8e e1       	ldi	r24, 0x1E	; 30
    286e:	90 e0       	ldi	r25, 0x00	; 0
    2870:	82 1b       	sub	r24, r18
    2872:	93 0b       	sbc	r25, r19
    2874:	29 85       	ldd	r18, Y+9	; 0x09
    2876:	3a 85       	ldd	r19, Y+10	; 0x0a
    2878:	4b 85       	ldd	r20, Y+11	; 0x0b
    287a:	5c 85       	ldd	r21, Y+12	; 0x0c
    287c:	04 c0       	rjmp	.+8      	; 0x2886 <__fixsfsi+0x70>
    287e:	56 95       	lsr	r21
    2880:	47 95       	ror	r20
    2882:	37 95       	ror	r19
    2884:	27 95       	ror	r18
    2886:	8a 95       	dec	r24
    2888:	d2 f7       	brpl	.-12     	; 0x287e <__fixsfsi+0x68>
    288a:	66 23       	and	r22, r22
    288c:	81 f0       	breq	.+32     	; 0x28ae <__fixsfsi+0x98>
    288e:	50 95       	com	r21
    2890:	40 95       	com	r20
    2892:	30 95       	com	r19
    2894:	21 95       	neg	r18
    2896:	3f 4f       	sbci	r19, 0xFF	; 255
    2898:	4f 4f       	sbci	r20, 0xFF	; 255
    289a:	5f 4f       	sbci	r21, 0xFF	; 255
    289c:	08 c0       	rjmp	.+16     	; 0x28ae <__fixsfsi+0x98>
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	30 e0       	ldi	r19, 0x00	; 0
    28a2:	a9 01       	movw	r20, r18
    28a4:	04 c0       	rjmp	.+8      	; 0x28ae <__fixsfsi+0x98>
    28a6:	2f ef       	ldi	r18, 0xFF	; 255
    28a8:	3f ef       	ldi	r19, 0xFF	; 255
    28aa:	4f ef       	ldi	r20, 0xFF	; 255
    28ac:	5f e7       	ldi	r21, 0x7F	; 127
    28ae:	b9 01       	movw	r22, r18
    28b0:	ca 01       	movw	r24, r20
    28b2:	2c 96       	adiw	r28, 0x0c	; 12
    28b4:	e2 e0       	ldi	r30, 0x02	; 2
    28b6:	0c 94 11 27 	jmp	0x4e22	; 0x4e22 <__epilogue_restores__+0x20>

000028ba <__floatunsisf>:
    28ba:	a8 e0       	ldi	r26, 0x08	; 8
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	e3 e6       	ldi	r30, 0x63	; 99
    28c0:	f4 e1       	ldi	r31, 0x14	; 20
    28c2:	0c 94 ef 26 	jmp	0x4dde	; 0x4dde <__prologue_saves__+0x14>
    28c6:	7b 01       	movw	r14, r22
    28c8:	8c 01       	movw	r16, r24
    28ca:	1a 82       	std	Y+2, r1	; 0x02
    28cc:	61 15       	cp	r22, r1
    28ce:	71 05       	cpc	r23, r1
    28d0:	81 05       	cpc	r24, r1
    28d2:	91 05       	cpc	r25, r1
    28d4:	19 f4       	brne	.+6      	; 0x28dc <__floatunsisf+0x22>
    28d6:	82 e0       	ldi	r24, 0x02	; 2
    28d8:	89 83       	std	Y+1, r24	; 0x01
    28da:	5f c0       	rjmp	.+190    	; 0x299a <__floatunsisf+0xe0>
    28dc:	83 e0       	ldi	r24, 0x03	; 3
    28de:	89 83       	std	Y+1, r24	; 0x01
    28e0:	8e e1       	ldi	r24, 0x1E	; 30
    28e2:	c8 2e       	mov	r12, r24
    28e4:	d1 2c       	mov	r13, r1
    28e6:	dc 82       	std	Y+4, r13	; 0x04
    28e8:	cb 82       	std	Y+3, r12	; 0x03
    28ea:	ed 82       	std	Y+5, r14	; 0x05
    28ec:	fe 82       	std	Y+6, r15	; 0x06
    28ee:	0f 83       	std	Y+7, r16	; 0x07
    28f0:	18 87       	std	Y+8, r17	; 0x08
    28f2:	c8 01       	movw	r24, r16
    28f4:	b7 01       	movw	r22, r14
    28f6:	0e 94 d5 14 	call	0x29aa	; 0x29aa <__clzsi2>
    28fa:	fc 01       	movw	r30, r24
    28fc:	31 97       	sbiw	r30, 0x01	; 1
    28fe:	f7 ff       	sbrs	r31, 7
    2900:	3a c0       	rjmp	.+116    	; 0x2976 <__floatunsisf+0xbc>
    2902:	aa 27       	eor	r26, r26
    2904:	bb 27       	eor	r27, r27
    2906:	ae 1b       	sub	r26, r30
    2908:	bf 0b       	sbc	r27, r31
    290a:	21 e0       	ldi	r18, 0x01	; 1
    290c:	30 e0       	ldi	r19, 0x00	; 0
    290e:	40 e0       	ldi	r20, 0x00	; 0
    2910:	50 e0       	ldi	r21, 0x00	; 0
    2912:	0a 2e       	mov	r0, r26
    2914:	04 c0       	rjmp	.+8      	; 0x291e <__floatunsisf+0x64>
    2916:	22 0f       	add	r18, r18
    2918:	33 1f       	adc	r19, r19
    291a:	44 1f       	adc	r20, r20
    291c:	55 1f       	adc	r21, r21
    291e:	0a 94       	dec	r0
    2920:	d2 f7       	brpl	.-12     	; 0x2916 <__floatunsisf+0x5c>
    2922:	21 50       	subi	r18, 0x01	; 1
    2924:	30 40       	sbci	r19, 0x00	; 0
    2926:	40 40       	sbci	r20, 0x00	; 0
    2928:	50 40       	sbci	r21, 0x00	; 0
    292a:	2e 21       	and	r18, r14
    292c:	3f 21       	and	r19, r15
    292e:	40 23       	and	r20, r16
    2930:	51 23       	and	r21, r17
    2932:	61 e0       	ldi	r22, 0x01	; 1
    2934:	70 e0       	ldi	r23, 0x00	; 0
    2936:	80 e0       	ldi	r24, 0x00	; 0
    2938:	90 e0       	ldi	r25, 0x00	; 0
    293a:	21 15       	cp	r18, r1
    293c:	31 05       	cpc	r19, r1
    293e:	41 05       	cpc	r20, r1
    2940:	51 05       	cpc	r21, r1
    2942:	19 f4       	brne	.+6      	; 0x294a <__floatunsisf+0x90>
    2944:	60 e0       	ldi	r22, 0x00	; 0
    2946:	70 e0       	ldi	r23, 0x00	; 0
    2948:	cb 01       	movw	r24, r22
    294a:	04 c0       	rjmp	.+8      	; 0x2954 <__floatunsisf+0x9a>
    294c:	16 95       	lsr	r17
    294e:	07 95       	ror	r16
    2950:	f7 94       	ror	r15
    2952:	e7 94       	ror	r14
    2954:	aa 95       	dec	r26
    2956:	d2 f7       	brpl	.-12     	; 0x294c <__floatunsisf+0x92>
    2958:	e6 2a       	or	r14, r22
    295a:	f7 2a       	or	r15, r23
    295c:	08 2b       	or	r16, r24
    295e:	19 2b       	or	r17, r25
    2960:	ed 82       	std	Y+5, r14	; 0x05
    2962:	fe 82       	std	Y+6, r15	; 0x06
    2964:	0f 83       	std	Y+7, r16	; 0x07
    2966:	18 87       	std	Y+8, r17	; 0x08
    2968:	8e e1       	ldi	r24, 0x1E	; 30
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	8e 1b       	sub	r24, r30
    296e:	9f 0b       	sbc	r25, r31
    2970:	9c 83       	std	Y+4, r25	; 0x04
    2972:	8b 83       	std	Y+3, r24	; 0x03
    2974:	12 c0       	rjmp	.+36     	; 0x299a <__floatunsisf+0xe0>
    2976:	30 97       	sbiw	r30, 0x00	; 0
    2978:	81 f0       	breq	.+32     	; 0x299a <__floatunsisf+0xe0>
    297a:	0e 2e       	mov	r0, r30
    297c:	04 c0       	rjmp	.+8      	; 0x2986 <__floatunsisf+0xcc>
    297e:	ee 0c       	add	r14, r14
    2980:	ff 1c       	adc	r15, r15
    2982:	00 1f       	adc	r16, r16
    2984:	11 1f       	adc	r17, r17
    2986:	0a 94       	dec	r0
    2988:	d2 f7       	brpl	.-12     	; 0x297e <__floatunsisf+0xc4>
    298a:	ed 82       	std	Y+5, r14	; 0x05
    298c:	fe 82       	std	Y+6, r15	; 0x06
    298e:	0f 83       	std	Y+7, r16	; 0x07
    2990:	18 87       	std	Y+8, r17	; 0x08
    2992:	ce 1a       	sub	r12, r30
    2994:	df 0a       	sbc	r13, r31
    2996:	dc 82       	std	Y+4, r13	; 0x04
    2998:	cb 82       	std	Y+3, r12	; 0x03
    299a:	ce 01       	movw	r24, r28
    299c:	01 96       	adiw	r24, 0x01	; 1
    299e:	0e 94 2f 15 	call	0x2a5e	; 0x2a5e <__pack_f>
    29a2:	28 96       	adiw	r28, 0x08	; 8
    29a4:	e8 e0       	ldi	r30, 0x08	; 8
    29a6:	0c 94 0b 27 	jmp	0x4e16	; 0x4e16 <__epilogue_restores__+0x14>

000029aa <__clzsi2>:
    29aa:	af 92       	push	r10
    29ac:	bf 92       	push	r11
    29ae:	cf 92       	push	r12
    29b0:	df 92       	push	r13
    29b2:	ef 92       	push	r14
    29b4:	ff 92       	push	r15
    29b6:	0f 93       	push	r16
    29b8:	1f 93       	push	r17
    29ba:	7b 01       	movw	r14, r22
    29bc:	8c 01       	movw	r16, r24
    29be:	80 e0       	ldi	r24, 0x00	; 0
    29c0:	e8 16       	cp	r14, r24
    29c2:	80 e0       	ldi	r24, 0x00	; 0
    29c4:	f8 06       	cpc	r15, r24
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	08 07       	cpc	r16, r24
    29ca:	80 e0       	ldi	r24, 0x00	; 0
    29cc:	18 07       	cpc	r17, r24
    29ce:	58 f4       	brcc	.+22     	; 0x29e6 <__clzsi2+0x3c>
    29d0:	ef ef       	ldi	r30, 0xFF	; 255
    29d2:	ee 16       	cp	r14, r30
    29d4:	f1 04       	cpc	r15, r1
    29d6:	01 05       	cpc	r16, r1
    29d8:	11 05       	cpc	r17, r1
    29da:	09 f0       	breq	.+2      	; 0x29de <__clzsi2+0x34>
    29dc:	90 f4       	brcc	.+36     	; 0x2a02 <__clzsi2+0x58>
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	90 e0       	ldi	r25, 0x00	; 0
    29e2:	dc 01       	movw	r26, r24
    29e4:	17 c0       	rjmp	.+46     	; 0x2a14 <__clzsi2+0x6a>
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	ef 16       	cp	r14, r31
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	ff 06       	cpc	r15, r31
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	0f 07       	cpc	r16, r31
    29f2:	f1 e0       	ldi	r31, 0x01	; 1
    29f4:	1f 07       	cpc	r17, r31
    29f6:	50 f4       	brcc	.+20     	; 0x2a0c <__clzsi2+0x62>
    29f8:	80 e1       	ldi	r24, 0x10	; 16
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	a0 e0       	ldi	r26, 0x00	; 0
    29fe:	b0 e0       	ldi	r27, 0x00	; 0
    2a00:	09 c0       	rjmp	.+18     	; 0x2a14 <__clzsi2+0x6a>
    2a02:	88 e0       	ldi	r24, 0x08	; 8
    2a04:	90 e0       	ldi	r25, 0x00	; 0
    2a06:	a0 e0       	ldi	r26, 0x00	; 0
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	04 c0       	rjmp	.+8      	; 0x2a14 <__clzsi2+0x6a>
    2a0c:	88 e1       	ldi	r24, 0x18	; 24
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	a0 e0       	ldi	r26, 0x00	; 0
    2a12:	b0 e0       	ldi	r27, 0x00	; 0
    2a14:	20 e2       	ldi	r18, 0x20	; 32
    2a16:	30 e0       	ldi	r19, 0x00	; 0
    2a18:	40 e0       	ldi	r20, 0x00	; 0
    2a1a:	50 e0       	ldi	r21, 0x00	; 0
    2a1c:	28 1b       	sub	r18, r24
    2a1e:	39 0b       	sbc	r19, r25
    2a20:	4a 0b       	sbc	r20, r26
    2a22:	5b 0b       	sbc	r21, r27
    2a24:	57 01       	movw	r10, r14
    2a26:	68 01       	movw	r12, r16
    2a28:	04 c0       	rjmp	.+8      	; 0x2a32 <__clzsi2+0x88>
    2a2a:	d6 94       	lsr	r13
    2a2c:	c7 94       	ror	r12
    2a2e:	b7 94       	ror	r11
    2a30:	a7 94       	ror	r10
    2a32:	8a 95       	dec	r24
    2a34:	d2 f7       	brpl	.-12     	; 0x2a2a <__clzsi2+0x80>
    2a36:	d6 01       	movw	r26, r12
    2a38:	c5 01       	movw	r24, r10
    2a3a:	8d 50       	subi	r24, 0x0D	; 13
    2a3c:	9e 4f       	sbci	r25, 0xFE	; 254
    2a3e:	fc 01       	movw	r30, r24
    2a40:	80 81       	ld	r24, Z
    2a42:	28 1b       	sub	r18, r24
    2a44:	31 09       	sbc	r19, r1
    2a46:	41 09       	sbc	r20, r1
    2a48:	51 09       	sbc	r21, r1
    2a4a:	c9 01       	movw	r24, r18
    2a4c:	1f 91       	pop	r17
    2a4e:	0f 91       	pop	r16
    2a50:	ff 90       	pop	r15
    2a52:	ef 90       	pop	r14
    2a54:	df 90       	pop	r13
    2a56:	cf 90       	pop	r12
    2a58:	bf 90       	pop	r11
    2a5a:	af 90       	pop	r10
    2a5c:	08 95       	ret

00002a5e <__pack_f>:
    2a5e:	ef 92       	push	r14
    2a60:	ff 92       	push	r15
    2a62:	0f 93       	push	r16
    2a64:	1f 93       	push	r17
    2a66:	cf 93       	push	r28
    2a68:	df 93       	push	r29
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	24 81       	ldd	r18, Z+4	; 0x04
    2a6e:	35 81       	ldd	r19, Z+5	; 0x05
    2a70:	46 81       	ldd	r20, Z+6	; 0x06
    2a72:	57 81       	ldd	r21, Z+7	; 0x07
    2a74:	61 81       	ldd	r22, Z+1	; 0x01
    2a76:	80 81       	ld	r24, Z
    2a78:	82 30       	cpi	r24, 0x02	; 2
    2a7a:	20 f4       	brcc	.+8      	; 0x2a84 <__pack_f+0x26>
    2a7c:	40 61       	ori	r20, 0x10	; 16
    2a7e:	ef ef       	ldi	r30, 0xFF	; 255
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	a3 c0       	rjmp	.+326    	; 0x2bca <__pack_f+0x16c>
    2a84:	84 30       	cpi	r24, 0x04	; 4
    2a86:	09 f4       	brne	.+2      	; 0x2a8a <__pack_f+0x2c>
    2a88:	9b c0       	rjmp	.+310    	; 0x2bc0 <__pack_f+0x162>
    2a8a:	82 30       	cpi	r24, 0x02	; 2
    2a8c:	09 f4       	brne	.+2      	; 0x2a90 <__pack_f+0x32>
    2a8e:	92 c0       	rjmp	.+292    	; 0x2bb4 <__pack_f+0x156>
    2a90:	21 15       	cp	r18, r1
    2a92:	31 05       	cpc	r19, r1
    2a94:	41 05       	cpc	r20, r1
    2a96:	51 05       	cpc	r21, r1
    2a98:	09 f4       	brne	.+2      	; 0x2a9c <__pack_f+0x3e>
    2a9a:	8f c0       	rjmp	.+286    	; 0x2bba <__pack_f+0x15c>
    2a9c:	02 80       	ldd	r0, Z+2	; 0x02
    2a9e:	f3 81       	ldd	r31, Z+3	; 0x03
    2aa0:	e0 2d       	mov	r30, r0
    2aa2:	8f ef       	ldi	r24, 0xFF	; 255
    2aa4:	e2 38       	cpi	r30, 0x82	; 130
    2aa6:	f8 07       	cpc	r31, r24
    2aa8:	0c f0       	brlt	.+2      	; 0x2aac <__pack_f+0x4e>
    2aaa:	5a c0       	rjmp	.+180    	; 0x2b60 <__pack_f+0x102>
    2aac:	c2 e8       	ldi	r28, 0x82	; 130
    2aae:	df ef       	ldi	r29, 0xFF	; 255
    2ab0:	ce 1b       	sub	r28, r30
    2ab2:	df 0b       	sbc	r29, r31
    2ab4:	ca 31       	cpi	r28, 0x1A	; 26
    2ab6:	d1 05       	cpc	r29, r1
    2ab8:	6c f5       	brge	.+90     	; 0x2b14 <__pack_f+0xb6>
    2aba:	79 01       	movw	r14, r18
    2abc:	8a 01       	movw	r16, r20
    2abe:	0c 2e       	mov	r0, r28
    2ac0:	04 c0       	rjmp	.+8      	; 0x2aca <__pack_f+0x6c>
    2ac2:	16 95       	lsr	r17
    2ac4:	07 95       	ror	r16
    2ac6:	f7 94       	ror	r15
    2ac8:	e7 94       	ror	r14
    2aca:	0a 94       	dec	r0
    2acc:	d2 f7       	brpl	.-12     	; 0x2ac2 <__pack_f+0x64>
    2ace:	81 e0       	ldi	r24, 0x01	; 1
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	a0 e0       	ldi	r26, 0x00	; 0
    2ad4:	b0 e0       	ldi	r27, 0x00	; 0
    2ad6:	0c 2e       	mov	r0, r28
    2ad8:	04 c0       	rjmp	.+8      	; 0x2ae2 <__pack_f+0x84>
    2ada:	88 0f       	add	r24, r24
    2adc:	99 1f       	adc	r25, r25
    2ade:	aa 1f       	adc	r26, r26
    2ae0:	bb 1f       	adc	r27, r27
    2ae2:	0a 94       	dec	r0
    2ae4:	d2 f7       	brpl	.-12     	; 0x2ada <__pack_f+0x7c>
    2ae6:	01 97       	sbiw	r24, 0x01	; 1
    2ae8:	a1 09       	sbc	r26, r1
    2aea:	b1 09       	sbc	r27, r1
    2aec:	82 23       	and	r24, r18
    2aee:	93 23       	and	r25, r19
    2af0:	a4 23       	and	r26, r20
    2af2:	b5 23       	and	r27, r21
    2af4:	21 e0       	ldi	r18, 0x01	; 1
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	40 e0       	ldi	r20, 0x00	; 0
    2afa:	50 e0       	ldi	r21, 0x00	; 0
    2afc:	00 97       	sbiw	r24, 0x00	; 0
    2afe:	a1 05       	cpc	r26, r1
    2b00:	b1 05       	cpc	r27, r1
    2b02:	19 f4       	brne	.+6      	; 0x2b0a <__pack_f+0xac>
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	a9 01       	movw	r20, r18
    2b0a:	2e 29       	or	r18, r14
    2b0c:	3f 29       	or	r19, r15
    2b0e:	40 2b       	or	r20, r16
    2b10:	51 2b       	or	r21, r17
    2b12:	03 c0       	rjmp	.+6      	; 0x2b1a <__pack_f+0xbc>
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	a9 01       	movw	r20, r18
    2b1a:	da 01       	movw	r26, r20
    2b1c:	c9 01       	movw	r24, r18
    2b1e:	8f 77       	andi	r24, 0x7F	; 127
    2b20:	90 70       	andi	r25, 0x00	; 0
    2b22:	a0 70       	andi	r26, 0x00	; 0
    2b24:	b0 70       	andi	r27, 0x00	; 0
    2b26:	80 34       	cpi	r24, 0x40	; 64
    2b28:	91 05       	cpc	r25, r1
    2b2a:	a1 05       	cpc	r26, r1
    2b2c:	b1 05       	cpc	r27, r1
    2b2e:	39 f4       	brne	.+14     	; 0x2b3e <__pack_f+0xe0>
    2b30:	27 ff       	sbrs	r18, 7
    2b32:	09 c0       	rjmp	.+18     	; 0x2b46 <__pack_f+0xe8>
    2b34:	20 5c       	subi	r18, 0xC0	; 192
    2b36:	3f 4f       	sbci	r19, 0xFF	; 255
    2b38:	4f 4f       	sbci	r20, 0xFF	; 255
    2b3a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b3c:	04 c0       	rjmp	.+8      	; 0x2b46 <__pack_f+0xe8>
    2b3e:	21 5c       	subi	r18, 0xC1	; 193
    2b40:	3f 4f       	sbci	r19, 0xFF	; 255
    2b42:	4f 4f       	sbci	r20, 0xFF	; 255
    2b44:	5f 4f       	sbci	r21, 0xFF	; 255
    2b46:	e1 e0       	ldi	r30, 0x01	; 1
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	20 30       	cpi	r18, 0x00	; 0
    2b4c:	80 e0       	ldi	r24, 0x00	; 0
    2b4e:	38 07       	cpc	r19, r24
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	48 07       	cpc	r20, r24
    2b54:	80 e4       	ldi	r24, 0x40	; 64
    2b56:	58 07       	cpc	r21, r24
    2b58:	28 f5       	brcc	.+74     	; 0x2ba4 <__pack_f+0x146>
    2b5a:	e0 e0       	ldi	r30, 0x00	; 0
    2b5c:	f0 e0       	ldi	r31, 0x00	; 0
    2b5e:	22 c0       	rjmp	.+68     	; 0x2ba4 <__pack_f+0x146>
    2b60:	e0 38       	cpi	r30, 0x80	; 128
    2b62:	f1 05       	cpc	r31, r1
    2b64:	6c f5       	brge	.+90     	; 0x2bc0 <__pack_f+0x162>
    2b66:	e1 58       	subi	r30, 0x81	; 129
    2b68:	ff 4f       	sbci	r31, 0xFF	; 255
    2b6a:	da 01       	movw	r26, r20
    2b6c:	c9 01       	movw	r24, r18
    2b6e:	8f 77       	andi	r24, 0x7F	; 127
    2b70:	90 70       	andi	r25, 0x00	; 0
    2b72:	a0 70       	andi	r26, 0x00	; 0
    2b74:	b0 70       	andi	r27, 0x00	; 0
    2b76:	80 34       	cpi	r24, 0x40	; 64
    2b78:	91 05       	cpc	r25, r1
    2b7a:	a1 05       	cpc	r26, r1
    2b7c:	b1 05       	cpc	r27, r1
    2b7e:	39 f4       	brne	.+14     	; 0x2b8e <__pack_f+0x130>
    2b80:	27 ff       	sbrs	r18, 7
    2b82:	09 c0       	rjmp	.+18     	; 0x2b96 <__pack_f+0x138>
    2b84:	20 5c       	subi	r18, 0xC0	; 192
    2b86:	3f 4f       	sbci	r19, 0xFF	; 255
    2b88:	4f 4f       	sbci	r20, 0xFF	; 255
    2b8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2b8c:	04 c0       	rjmp	.+8      	; 0x2b96 <__pack_f+0x138>
    2b8e:	21 5c       	subi	r18, 0xC1	; 193
    2b90:	3f 4f       	sbci	r19, 0xFF	; 255
    2b92:	4f 4f       	sbci	r20, 0xFF	; 255
    2b94:	5f 4f       	sbci	r21, 0xFF	; 255
    2b96:	57 ff       	sbrs	r21, 7
    2b98:	05 c0       	rjmp	.+10     	; 0x2ba4 <__pack_f+0x146>
    2b9a:	56 95       	lsr	r21
    2b9c:	47 95       	ror	r20
    2b9e:	37 95       	ror	r19
    2ba0:	27 95       	ror	r18
    2ba2:	31 96       	adiw	r30, 0x01	; 1
    2ba4:	87 e0       	ldi	r24, 0x07	; 7
    2ba6:	56 95       	lsr	r21
    2ba8:	47 95       	ror	r20
    2baa:	37 95       	ror	r19
    2bac:	27 95       	ror	r18
    2bae:	8a 95       	dec	r24
    2bb0:	d1 f7       	brne	.-12     	; 0x2ba6 <__pack_f+0x148>
    2bb2:	0b c0       	rjmp	.+22     	; 0x2bca <__pack_f+0x16c>
    2bb4:	e0 e0       	ldi	r30, 0x00	; 0
    2bb6:	f0 e0       	ldi	r31, 0x00	; 0
    2bb8:	05 c0       	rjmp	.+10     	; 0x2bc4 <__pack_f+0x166>
    2bba:	e0 e0       	ldi	r30, 0x00	; 0
    2bbc:	f0 e0       	ldi	r31, 0x00	; 0
    2bbe:	05 c0       	rjmp	.+10     	; 0x2bca <__pack_f+0x16c>
    2bc0:	ef ef       	ldi	r30, 0xFF	; 255
    2bc2:	f0 e0       	ldi	r31, 0x00	; 0
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	a9 01       	movw	r20, r18
    2bca:	8e 2f       	mov	r24, r30
    2bcc:	87 95       	ror	r24
    2bce:	88 27       	eor	r24, r24
    2bd0:	87 95       	ror	r24
    2bd2:	94 2f       	mov	r25, r20
    2bd4:	9f 77       	andi	r25, 0x7F	; 127
    2bd6:	67 95       	ror	r22
    2bd8:	66 27       	eor	r22, r22
    2bda:	67 95       	ror	r22
    2bdc:	e6 95       	lsr	r30
    2bde:	e2 2e       	mov	r14, r18
    2be0:	a9 2f       	mov	r26, r25
    2be2:	a8 2b       	or	r26, r24
    2be4:	fe 2f       	mov	r31, r30
    2be6:	f6 2b       	or	r31, r22
    2be8:	62 2f       	mov	r22, r18
    2bea:	73 2f       	mov	r23, r19
    2bec:	8a 2f       	mov	r24, r26
    2bee:	9f 2f       	mov	r25, r31
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	e6 e0       	ldi	r30, 0x06	; 6
    2bf6:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <__epilogue_restores__+0x18>

00002bfa <__unpack_f>:
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	fb 01       	movw	r30, r22
    2bfe:	2c 91       	ld	r18, X
    2c00:	11 96       	adiw	r26, 0x01	; 1
    2c02:	3c 91       	ld	r19, X
    2c04:	11 97       	sbiw	r26, 0x01	; 1
    2c06:	12 96       	adiw	r26, 0x02	; 2
    2c08:	8c 91       	ld	r24, X
    2c0a:	12 97       	sbiw	r26, 0x02	; 2
    2c0c:	48 2f       	mov	r20, r24
    2c0e:	4f 77       	andi	r20, 0x7F	; 127
    2c10:	50 e0       	ldi	r21, 0x00	; 0
    2c12:	98 2f       	mov	r25, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	99 27       	eor	r25, r25
    2c18:	99 1f       	adc	r25, r25
    2c1a:	13 96       	adiw	r26, 0x03	; 3
    2c1c:	6c 91       	ld	r22, X
    2c1e:	13 97       	sbiw	r26, 0x03	; 3
    2c20:	86 2f       	mov	r24, r22
    2c22:	88 0f       	add	r24, r24
    2c24:	89 2b       	or	r24, r25
    2c26:	90 e0       	ldi	r25, 0x00	; 0
    2c28:	66 1f       	adc	r22, r22
    2c2a:	66 27       	eor	r22, r22
    2c2c:	66 1f       	adc	r22, r22
    2c2e:	61 83       	std	Z+1, r22	; 0x01
    2c30:	00 97       	sbiw	r24, 0x00	; 0
    2c32:	39 f5       	brne	.+78     	; 0x2c82 <__unpack_f+0x88>
    2c34:	21 15       	cp	r18, r1
    2c36:	31 05       	cpc	r19, r1
    2c38:	41 05       	cpc	r20, r1
    2c3a:	51 05       	cpc	r21, r1
    2c3c:	11 f4       	brne	.+4      	; 0x2c42 <__unpack_f+0x48>
    2c3e:	82 e0       	ldi	r24, 0x02	; 2
    2c40:	29 c0       	rjmp	.+82     	; 0x2c94 <__unpack_f+0x9a>
    2c42:	82 e8       	ldi	r24, 0x82	; 130
    2c44:	9f ef       	ldi	r25, 0xFF	; 255
    2c46:	93 83       	std	Z+3, r25	; 0x03
    2c48:	82 83       	std	Z+2, r24	; 0x02
    2c4a:	67 e0       	ldi	r22, 0x07	; 7
    2c4c:	22 0f       	add	r18, r18
    2c4e:	33 1f       	adc	r19, r19
    2c50:	44 1f       	adc	r20, r20
    2c52:	55 1f       	adc	r21, r21
    2c54:	6a 95       	dec	r22
    2c56:	d1 f7       	brne	.-12     	; 0x2c4c <__unpack_f+0x52>
    2c58:	83 e0       	ldi	r24, 0x03	; 3
    2c5a:	80 83       	st	Z, r24
    2c5c:	09 c0       	rjmp	.+18     	; 0x2c70 <__unpack_f+0x76>
    2c5e:	22 0f       	add	r18, r18
    2c60:	33 1f       	adc	r19, r19
    2c62:	44 1f       	adc	r20, r20
    2c64:	55 1f       	adc	r21, r21
    2c66:	82 81       	ldd	r24, Z+2	; 0x02
    2c68:	93 81       	ldd	r25, Z+3	; 0x03
    2c6a:	01 97       	sbiw	r24, 0x01	; 1
    2c6c:	93 83       	std	Z+3, r25	; 0x03
    2c6e:	82 83       	std	Z+2, r24	; 0x02
    2c70:	20 30       	cpi	r18, 0x00	; 0
    2c72:	80 e0       	ldi	r24, 0x00	; 0
    2c74:	38 07       	cpc	r19, r24
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	48 07       	cpc	r20, r24
    2c7a:	80 e4       	ldi	r24, 0x40	; 64
    2c7c:	58 07       	cpc	r21, r24
    2c7e:	78 f3       	brcs	.-34     	; 0x2c5e <__unpack_f+0x64>
    2c80:	20 c0       	rjmp	.+64     	; 0x2cc2 <__unpack_f+0xc8>
    2c82:	8f 3f       	cpi	r24, 0xFF	; 255
    2c84:	91 05       	cpc	r25, r1
    2c86:	79 f4       	brne	.+30     	; 0x2ca6 <__unpack_f+0xac>
    2c88:	21 15       	cp	r18, r1
    2c8a:	31 05       	cpc	r19, r1
    2c8c:	41 05       	cpc	r20, r1
    2c8e:	51 05       	cpc	r21, r1
    2c90:	19 f4       	brne	.+6      	; 0x2c98 <__unpack_f+0x9e>
    2c92:	84 e0       	ldi	r24, 0x04	; 4
    2c94:	80 83       	st	Z, r24
    2c96:	08 95       	ret
    2c98:	44 ff       	sbrs	r20, 4
    2c9a:	03 c0       	rjmp	.+6      	; 0x2ca2 <__unpack_f+0xa8>
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	80 83       	st	Z, r24
    2ca0:	10 c0       	rjmp	.+32     	; 0x2cc2 <__unpack_f+0xc8>
    2ca2:	10 82       	st	Z, r1
    2ca4:	0e c0       	rjmp	.+28     	; 0x2cc2 <__unpack_f+0xc8>
    2ca6:	8f 57       	subi	r24, 0x7F	; 127
    2ca8:	90 40       	sbci	r25, 0x00	; 0
    2caa:	93 83       	std	Z+3, r25	; 0x03
    2cac:	82 83       	std	Z+2, r24	; 0x02
    2cae:	83 e0       	ldi	r24, 0x03	; 3
    2cb0:	80 83       	st	Z, r24
    2cb2:	87 e0       	ldi	r24, 0x07	; 7
    2cb4:	22 0f       	add	r18, r18
    2cb6:	33 1f       	adc	r19, r19
    2cb8:	44 1f       	adc	r20, r20
    2cba:	55 1f       	adc	r21, r21
    2cbc:	8a 95       	dec	r24
    2cbe:	d1 f7       	brne	.-12     	; 0x2cb4 <__unpack_f+0xba>
    2cc0:	50 64       	ori	r21, 0x40	; 64
    2cc2:	24 83       	std	Z+4, r18	; 0x04
    2cc4:	35 83       	std	Z+5, r19	; 0x05
    2cc6:	46 83       	std	Z+6, r20	; 0x06
    2cc8:	57 83       	std	Z+7, r21	; 0x07
    2cca:	08 95       	ret

00002ccc <__fpcmp_parts_f>:
    2ccc:	fc 01       	movw	r30, r24
    2cce:	db 01       	movw	r26, r22
    2cd0:	90 81       	ld	r25, Z
    2cd2:	92 30       	cpi	r25, 0x02	; 2
    2cd4:	08 f4       	brcc	.+2      	; 0x2cd8 <__fpcmp_parts_f+0xc>
    2cd6:	49 c0       	rjmp	.+146    	; 0x2d6a <__fpcmp_parts_f+0x9e>
    2cd8:	8c 91       	ld	r24, X
    2cda:	82 30       	cpi	r24, 0x02	; 2
    2cdc:	08 f4       	brcc	.+2      	; 0x2ce0 <__fpcmp_parts_f+0x14>
    2cde:	45 c0       	rjmp	.+138    	; 0x2d6a <__fpcmp_parts_f+0x9e>
    2ce0:	94 30       	cpi	r25, 0x04	; 4
    2ce2:	51 f4       	brne	.+20     	; 0x2cf8 <__fpcmp_parts_f+0x2c>
    2ce4:	61 81       	ldd	r22, Z+1	; 0x01
    2ce6:	84 30       	cpi	r24, 0x04	; 4
    2ce8:	b1 f5       	brne	.+108    	; 0x2d56 <__fpcmp_parts_f+0x8a>
    2cea:	11 96       	adiw	r26, 0x01	; 1
    2cec:	2c 91       	ld	r18, X
    2cee:	11 97       	sbiw	r26, 0x01	; 1
    2cf0:	30 e0       	ldi	r19, 0x00	; 0
    2cf2:	26 1b       	sub	r18, r22
    2cf4:	31 09       	sbc	r19, r1
    2cf6:	41 c0       	rjmp	.+130    	; 0x2d7a <__fpcmp_parts_f+0xae>
    2cf8:	84 30       	cpi	r24, 0x04	; 4
    2cfa:	21 f0       	breq	.+8      	; 0x2d04 <__fpcmp_parts_f+0x38>
    2cfc:	92 30       	cpi	r25, 0x02	; 2
    2cfe:	41 f4       	brne	.+16     	; 0x2d10 <__fpcmp_parts_f+0x44>
    2d00:	82 30       	cpi	r24, 0x02	; 2
    2d02:	b1 f1       	breq	.+108    	; 0x2d70 <__fpcmp_parts_f+0xa4>
    2d04:	11 96       	adiw	r26, 0x01	; 1
    2d06:	8c 91       	ld	r24, X
    2d08:	11 97       	sbiw	r26, 0x01	; 1
    2d0a:	88 23       	and	r24, r24
    2d0c:	a1 f1       	breq	.+104    	; 0x2d76 <__fpcmp_parts_f+0xaa>
    2d0e:	2d c0       	rjmp	.+90     	; 0x2d6a <__fpcmp_parts_f+0x9e>
    2d10:	61 81       	ldd	r22, Z+1	; 0x01
    2d12:	82 30       	cpi	r24, 0x02	; 2
    2d14:	01 f1       	breq	.+64     	; 0x2d56 <__fpcmp_parts_f+0x8a>
    2d16:	11 96       	adiw	r26, 0x01	; 1
    2d18:	8c 91       	ld	r24, X
    2d1a:	11 97       	sbiw	r26, 0x01	; 1
    2d1c:	68 17       	cp	r22, r24
    2d1e:	d9 f4       	brne	.+54     	; 0x2d56 <__fpcmp_parts_f+0x8a>
    2d20:	22 81       	ldd	r18, Z+2	; 0x02
    2d22:	33 81       	ldd	r19, Z+3	; 0x03
    2d24:	12 96       	adiw	r26, 0x02	; 2
    2d26:	8d 91       	ld	r24, X+
    2d28:	9c 91       	ld	r25, X
    2d2a:	13 97       	sbiw	r26, 0x03	; 3
    2d2c:	82 17       	cp	r24, r18
    2d2e:	93 07       	cpc	r25, r19
    2d30:	94 f0       	brlt	.+36     	; 0x2d56 <__fpcmp_parts_f+0x8a>
    2d32:	28 17       	cp	r18, r24
    2d34:	39 07       	cpc	r19, r25
    2d36:	bc f0       	brlt	.+46     	; 0x2d66 <__fpcmp_parts_f+0x9a>
    2d38:	24 81       	ldd	r18, Z+4	; 0x04
    2d3a:	35 81       	ldd	r19, Z+5	; 0x05
    2d3c:	46 81       	ldd	r20, Z+6	; 0x06
    2d3e:	57 81       	ldd	r21, Z+7	; 0x07
    2d40:	14 96       	adiw	r26, 0x04	; 4
    2d42:	8d 91       	ld	r24, X+
    2d44:	9d 91       	ld	r25, X+
    2d46:	0d 90       	ld	r0, X+
    2d48:	bc 91       	ld	r27, X
    2d4a:	a0 2d       	mov	r26, r0
    2d4c:	82 17       	cp	r24, r18
    2d4e:	93 07       	cpc	r25, r19
    2d50:	a4 07       	cpc	r26, r20
    2d52:	b5 07       	cpc	r27, r21
    2d54:	18 f4       	brcc	.+6      	; 0x2d5c <__fpcmp_parts_f+0x90>
    2d56:	66 23       	and	r22, r22
    2d58:	41 f0       	breq	.+16     	; 0x2d6a <__fpcmp_parts_f+0x9e>
    2d5a:	0d c0       	rjmp	.+26     	; 0x2d76 <__fpcmp_parts_f+0xaa>
    2d5c:	28 17       	cp	r18, r24
    2d5e:	39 07       	cpc	r19, r25
    2d60:	4a 07       	cpc	r20, r26
    2d62:	5b 07       	cpc	r21, r27
    2d64:	28 f4       	brcc	.+10     	; 0x2d70 <__fpcmp_parts_f+0xa4>
    2d66:	66 23       	and	r22, r22
    2d68:	31 f0       	breq	.+12     	; 0x2d76 <__fpcmp_parts_f+0xaa>
    2d6a:	21 e0       	ldi	r18, 0x01	; 1
    2d6c:	30 e0       	ldi	r19, 0x00	; 0
    2d6e:	05 c0       	rjmp	.+10     	; 0x2d7a <__fpcmp_parts_f+0xae>
    2d70:	20 e0       	ldi	r18, 0x00	; 0
    2d72:	30 e0       	ldi	r19, 0x00	; 0
    2d74:	02 c0       	rjmp	.+4      	; 0x2d7a <__fpcmp_parts_f+0xae>
    2d76:	2f ef       	ldi	r18, 0xFF	; 255
    2d78:	3f ef       	ldi	r19, 0xFF	; 255
    2d7a:	c9 01       	movw	r24, r18
    2d7c:	08 95       	ret

00002d7e <analogReference>:
    2d7e:	80 93 f9 02 	sts	0x02F9, r24
    2d82:	08 95       	ret

00002d84 <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2d84:	8e 30       	cpi	r24, 0x0E	; 14
    2d86:	08 f0       	brcs	.+2      	; 0x2d8a <analogRead+0x6>
    2d88:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2d8a:	87 70       	andi	r24, 0x07	; 7
    2d8c:	90 91 f9 02 	lds	r25, 0x02F9
    2d90:	92 95       	swap	r25
    2d92:	99 0f       	add	r25, r25
    2d94:	99 0f       	add	r25, r25
    2d96:	90 7c       	andi	r25, 0xC0	; 192
    2d98:	98 2b       	or	r25, r24
    2d9a:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2d9e:	80 91 7a 00 	lds	r24, 0x007A
    2da2:	80 64       	ori	r24, 0x40	; 64
    2da4:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2da8:	80 91 7a 00 	lds	r24, 0x007A
    2dac:	86 fd       	sbrc	r24, 6
    2dae:	fc cf       	rjmp	.-8      	; 0x2da8 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2db0:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    2db4:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2db8:	93 2f       	mov	r25, r19
    2dba:	80 e0       	ldi	r24, 0x00	; 0
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	28 2b       	or	r18, r24
    2dc0:	39 2b       	or	r19, r25
}
    2dc2:	c9 01       	movw	r24, r18
    2dc4:	08 95       	ret

00002dc6 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2dc6:	1f 93       	push	r17
    2dc8:	cf 93       	push	r28
    2dca:	df 93       	push	r29
    2dcc:	18 2f       	mov	r17, r24
    2dce:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2dd0:	61 e0       	ldi	r22, 0x01	; 1
    2dd2:	0e 94 58 18 	call	0x30b0	; 0x30b0 <pinMode>
	if (val == 0)
    2dd6:	20 97       	sbiw	r28, 0x00	; 0
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <analogWrite+0x16>
    2dda:	4a c0       	rjmp	.+148    	; 0x2e70 <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    2ddc:	cf 3f       	cpi	r28, 0xFF	; 255
    2dde:	d1 05       	cpc	r29, r1
    2de0:	09 f4       	brne	.+2      	; 0x2de4 <analogWrite+0x1e>
    2de2:	49 c0       	rjmp	.+146    	; 0x2e76 <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2de4:	e1 2f       	mov	r30, r17
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	e2 55       	subi	r30, 0x52	; 82
    2dea:	ff 4f       	sbci	r31, 0xFF	; 255
    2dec:	e4 91       	lpm	r30, Z+
    2dee:	e3 30       	cpi	r30, 0x03	; 3
    2df0:	c1 f0       	breq	.+48     	; 0x2e22 <analogWrite+0x5c>
    2df2:	e4 30       	cpi	r30, 0x04	; 4
    2df4:	28 f4       	brcc	.+10     	; 0x2e00 <analogWrite+0x3a>
    2df6:	e1 30       	cpi	r30, 0x01	; 1
    2df8:	51 f0       	breq	.+20     	; 0x2e0e <analogWrite+0x48>
    2dfa:	e2 30       	cpi	r30, 0x02	; 2
    2dfc:	b1 f5       	brne	.+108    	; 0x2e6a <analogWrite+0xa4>
    2dfe:	0c c0       	rjmp	.+24     	; 0x2e18 <analogWrite+0x52>
    2e00:	e6 30       	cpi	r30, 0x06	; 6
    2e02:	19 f1       	breq	.+70     	; 0x2e4a <analogWrite+0x84>
    2e04:	e7 30       	cpi	r30, 0x07	; 7
    2e06:	49 f1       	breq	.+82     	; 0x2e5a <analogWrite+0x94>
    2e08:	e4 30       	cpi	r30, 0x04	; 4
    2e0a:	79 f5       	brne	.+94     	; 0x2e6a <analogWrite+0xa4>
    2e0c:	14 c0       	rjmp	.+40     	; 0x2e36 <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2e0e:	84 b5       	in	r24, 0x24	; 36
    2e10:	80 68       	ori	r24, 0x80	; 128
    2e12:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2e14:	c7 bd       	out	0x27, r28	; 39
				break;
    2e16:	33 c0       	rjmp	.+102    	; 0x2e7e <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2e18:	84 b5       	in	r24, 0x24	; 36
    2e1a:	80 62       	ori	r24, 0x20	; 32
    2e1c:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2e1e:	c8 bd       	out	0x28, r28	; 40
				break;
    2e20:	2e c0       	rjmp	.+92     	; 0x2e7e <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2e22:	80 91 80 00 	lds	r24, 0x0080
    2e26:	80 68       	ori	r24, 0x80	; 128
    2e28:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    2e2c:	d0 93 89 00 	sts	0x0089, r29
    2e30:	c0 93 88 00 	sts	0x0088, r28
				break;
    2e34:	24 c0       	rjmp	.+72     	; 0x2e7e <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2e36:	80 91 80 00 	lds	r24, 0x0080
    2e3a:	80 62       	ori	r24, 0x20	; 32
    2e3c:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    2e40:	d0 93 8b 00 	sts	0x008B, r29
    2e44:	c0 93 8a 00 	sts	0x008A, r28
				break;
    2e48:	1a c0       	rjmp	.+52     	; 0x2e7e <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2e4a:	80 91 b0 00 	lds	r24, 0x00B0
    2e4e:	80 68       	ori	r24, 0x80	; 128
    2e50:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    2e54:	c0 93 b3 00 	sts	0x00B3, r28
				break;
    2e58:	12 c0       	rjmp	.+36     	; 0x2e7e <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2e5a:	80 91 b0 00 	lds	r24, 0x00B0
    2e5e:	80 62       	ori	r24, 0x20	; 32
    2e60:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    2e64:	c0 93 b4 00 	sts	0x00B4, r28
				break;
    2e68:	0a c0       	rjmp	.+20     	; 0x2e7e <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2e6a:	c0 38       	cpi	r28, 0x80	; 128
    2e6c:	d1 05       	cpc	r29, r1
    2e6e:	1c f4       	brge	.+6      	; 0x2e76 <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    2e70:	81 2f       	mov	r24, r17
    2e72:	60 e0       	ldi	r22, 0x00	; 0
    2e74:	02 c0       	rjmp	.+4      	; 0x2e7a <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    2e76:	81 2f       	mov	r24, r17
    2e78:	61 e0       	ldi	r22, 0x01	; 1
    2e7a:	0e 94 7c 18 	call	0x30f8	; 0x30f8 <digitalWrite>
				}
		}
	}
}
    2e7e:	df 91       	pop	r29
    2e80:	cf 91       	pop	r28
    2e82:	1f 91       	pop	r17
    2e84:	08 95       	ret

00002e86 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    2e86:	1f 92       	push	r1
    2e88:	0f 92       	push	r0
    2e8a:	0f b6       	in	r0, 0x3f	; 63
    2e8c:	0f 92       	push	r0
    2e8e:	11 24       	eor	r1, r1
    2e90:	2f 93       	push	r18
    2e92:	3f 93       	push	r19
    2e94:	8f 93       	push	r24
    2e96:	9f 93       	push	r25
    2e98:	af 93       	push	r26
    2e9a:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2e9c:	80 91 4e 03 	lds	r24, 0x034E
    2ea0:	90 91 4f 03 	lds	r25, 0x034F
    2ea4:	a0 91 50 03 	lds	r26, 0x0350
    2ea8:	b0 91 51 03 	lds	r27, 0x0351
	unsigned char f = timer0_fract;
    2eac:	30 91 52 03 	lds	r19, 0x0352

	m += MILLIS_INC;
    2eb0:	01 96       	adiw	r24, 0x01	; 1
    2eb2:	a1 1d       	adc	r26, r1
    2eb4:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    2eb6:	23 2f       	mov	r18, r19
    2eb8:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2eba:	2d 37       	cpi	r18, 0x7D	; 125
    2ebc:	20 f0       	brcs	.+8      	; 0x2ec6 <__vector_16+0x40>
		f -= FRACT_MAX;
    2ebe:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    2ec0:	01 96       	adiw	r24, 0x01	; 1
    2ec2:	a1 1d       	adc	r26, r1
    2ec4:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2ec6:	20 93 52 03 	sts	0x0352, r18
	timer0_millis = m;
    2eca:	80 93 4e 03 	sts	0x034E, r24
    2ece:	90 93 4f 03 	sts	0x034F, r25
    2ed2:	a0 93 50 03 	sts	0x0350, r26
    2ed6:	b0 93 51 03 	sts	0x0351, r27
	timer0_overflow_count++;
    2eda:	80 91 4a 03 	lds	r24, 0x034A
    2ede:	90 91 4b 03 	lds	r25, 0x034B
    2ee2:	a0 91 4c 03 	lds	r26, 0x034C
    2ee6:	b0 91 4d 03 	lds	r27, 0x034D
    2eea:	01 96       	adiw	r24, 0x01	; 1
    2eec:	a1 1d       	adc	r26, r1
    2eee:	b1 1d       	adc	r27, r1
    2ef0:	80 93 4a 03 	sts	0x034A, r24
    2ef4:	90 93 4b 03 	sts	0x034B, r25
    2ef8:	a0 93 4c 03 	sts	0x034C, r26
    2efc:	b0 93 4d 03 	sts	0x034D, r27
}
    2f00:	bf 91       	pop	r27
    2f02:	af 91       	pop	r26
    2f04:	9f 91       	pop	r25
    2f06:	8f 91       	pop	r24
    2f08:	3f 91       	pop	r19
    2f0a:	2f 91       	pop	r18
    2f0c:	0f 90       	pop	r0
    2f0e:	0f be       	out	0x3f, r0	; 63
    2f10:	0f 90       	pop	r0
    2f12:	1f 90       	pop	r1
    2f14:	18 95       	reti

00002f16 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2f16:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2f18:	f8 94       	cli
	m = timer0_millis;
    2f1a:	20 91 4e 03 	lds	r18, 0x034E
    2f1e:	30 91 4f 03 	lds	r19, 0x034F
    2f22:	40 91 50 03 	lds	r20, 0x0350
    2f26:	50 91 51 03 	lds	r21, 0x0351
	SREG = oldSREG;
    2f2a:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    2f2c:	b9 01       	movw	r22, r18
    2f2e:	ca 01       	movw	r24, r20
    2f30:	08 95       	ret

00002f32 <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2f32:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    2f34:	f8 94       	cli
	m = timer0_overflow_count;
    2f36:	20 91 4a 03 	lds	r18, 0x034A
    2f3a:	30 91 4b 03 	lds	r19, 0x034B
    2f3e:	40 91 4c 03 	lds	r20, 0x034C
    2f42:	50 91 4d 03 	lds	r21, 0x034D
#if defined(TCNT0)
	t = TCNT0;
    2f46:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2f48:	a8 9b       	sbis	0x15, 0	; 21
    2f4a:	06 c0       	rjmp	.+12     	; 0x2f58 <micros+0x26>
    2f4c:	8f 3f       	cpi	r24, 0xFF	; 255
    2f4e:	21 f0       	breq	.+8      	; 0x2f58 <micros+0x26>
		m++;
    2f50:	2f 5f       	subi	r18, 0xFF	; 255
    2f52:	3f 4f       	sbci	r19, 0xFF	; 255
    2f54:	4f 4f       	sbci	r20, 0xFF	; 255
    2f56:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2f58:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2f5a:	54 2f       	mov	r21, r20
    2f5c:	43 2f       	mov	r20, r19
    2f5e:	32 2f       	mov	r19, r18
    2f60:	22 27       	eor	r18, r18
    2f62:	28 0f       	add	r18, r24
    2f64:	31 1d       	adc	r19, r1
    2f66:	41 1d       	adc	r20, r1
    2f68:	51 1d       	adc	r21, r1
    2f6a:	82 e0       	ldi	r24, 0x02	; 2
    2f6c:	22 0f       	add	r18, r18
    2f6e:	33 1f       	adc	r19, r19
    2f70:	44 1f       	adc	r20, r20
    2f72:	55 1f       	adc	r21, r21
    2f74:	8a 95       	dec	r24
    2f76:	d1 f7       	brne	.-12     	; 0x2f6c <micros+0x3a>
}
    2f78:	b9 01       	movw	r22, r18
    2f7a:	ca 01       	movw	r24, r20
    2f7c:	08 95       	ret

00002f7e <delay>:

void delay(unsigned long ms)
{
    2f7e:	ef 92       	push	r14
    2f80:	ff 92       	push	r15
    2f82:	0f 93       	push	r16
    2f84:	1f 93       	push	r17
    2f86:	cf 93       	push	r28
    2f88:	df 93       	push	r29
    2f8a:	7b 01       	movw	r14, r22
    2f8c:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    2f8e:	0e 94 99 17 	call	0x2f32	; 0x2f32 <micros>
    2f92:	eb 01       	movw	r28, r22

	while (ms > 0) {
    2f94:	0f c0       	rjmp	.+30     	; 0x2fb4 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
    2f96:	0e 94 99 17 	call	0x2f32	; 0x2f32 <micros>
    2f9a:	6c 1b       	sub	r22, r28
    2f9c:	7d 0b       	sbc	r23, r29
    2f9e:	83 e0       	ldi	r24, 0x03	; 3
    2fa0:	68 3e       	cpi	r22, 0xE8	; 232
    2fa2:	78 07       	cpc	r23, r24
    2fa4:	38 f0       	brcs	.+14     	; 0x2fb4 <delay+0x36>
			ms--;
    2fa6:	08 94       	sec
    2fa8:	e1 08       	sbc	r14, r1
    2faa:	f1 08       	sbc	r15, r1
    2fac:	01 09       	sbc	r16, r1
    2fae:	11 09       	sbc	r17, r1
			start += 1000;
    2fb0:	c8 51       	subi	r28, 0x18	; 24
    2fb2:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    2fb4:	e1 14       	cp	r14, r1
    2fb6:	f1 04       	cpc	r15, r1
    2fb8:	01 05       	cpc	r16, r1
    2fba:	11 05       	cpc	r17, r1
    2fbc:	61 f7       	brne	.-40     	; 0x2f96 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2fbe:	df 91       	pop	r29
    2fc0:	cf 91       	pop	r28
    2fc2:	1f 91       	pop	r17
    2fc4:	0f 91       	pop	r16
    2fc6:	ff 90       	pop	r15
    2fc8:	ef 90       	pop	r14
    2fca:	08 95       	ret

00002fcc <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    2fcc:	01 97       	sbiw	r24, 0x01	; 1
    2fce:	39 f0       	breq	.+14     	; 0x2fde <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    2fd0:	88 0f       	add	r24, r24
    2fd2:	99 1f       	adc	r25, r25
    2fd4:	88 0f       	add	r24, r24
    2fd6:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    2fd8:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    2fda:	01 97       	sbiw	r24, 0x01	; 1
    2fdc:	f1 f7       	brne	.-4      	; 0x2fda <delayMicroseconds+0xe>
    2fde:	08 95       	ret

00002fe0 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    2fe0:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    2fe2:	84 b5       	in	r24, 0x24	; 36
    2fe4:	82 60       	ori	r24, 0x02	; 2
    2fe6:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    2fe8:	84 b5       	in	r24, 0x24	; 36
    2fea:	81 60       	ori	r24, 0x01	; 1
    2fec:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    2fee:	85 b5       	in	r24, 0x25	; 37
    2ff0:	82 60       	ori	r24, 0x02	; 2
    2ff2:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    2ff4:	85 b5       	in	r24, 0x25	; 37
    2ff6:	81 60       	ori	r24, 0x01	; 1
    2ff8:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    2ffa:	ee e6       	ldi	r30, 0x6E	; 110
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	80 81       	ld	r24, Z
    3000:	81 60       	ori	r24, 0x01	; 1
    3002:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3004:	e1 e8       	ldi	r30, 0x81	; 129
    3006:	f0 e0       	ldi	r31, 0x00	; 0
    3008:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    300a:	80 81       	ld	r24, Z
    300c:	82 60       	ori	r24, 0x02	; 2
    300e:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3010:	80 81       	ld	r24, Z
    3012:	81 60       	ori	r24, 0x01	; 1
    3014:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3016:	e0 e8       	ldi	r30, 0x80	; 128
    3018:	f0 e0       	ldi	r31, 0x00	; 0
    301a:	80 81       	ld	r24, Z
    301c:	81 60       	ori	r24, 0x01	; 1
    301e:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3020:	e1 eb       	ldi	r30, 0xB1	; 177
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	80 81       	ld	r24, Z
    3026:	84 60       	ori	r24, 0x04	; 4
    3028:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    302a:	e0 eb       	ldi	r30, 0xB0	; 176
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	80 81       	ld	r24, Z
    3030:	81 60       	ori	r24, 0x01	; 1
    3032:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    3034:	ea e7       	ldi	r30, 0x7A	; 122
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	80 81       	ld	r24, Z
    303a:	84 60       	ori	r24, 0x04	; 4
    303c:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    303e:	80 81       	ld	r24, Z
    3040:	82 60       	ori	r24, 0x02	; 2
    3042:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    3044:	80 81       	ld	r24, Z
    3046:	81 60       	ori	r24, 0x01	; 1
    3048:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    304a:	80 81       	ld	r24, Z
    304c:	80 68       	ori	r24, 0x80	; 128
    304e:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3050:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    3054:	08 95       	ret

00003056 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3056:	83 30       	cpi	r24, 0x03	; 3
    3058:	71 f0       	breq	.+28     	; 0x3076 <turnOffPWM+0x20>
    305a:	84 30       	cpi	r24, 0x04	; 4
    305c:	28 f4       	brcc	.+10     	; 0x3068 <turnOffPWM+0x12>
    305e:	81 30       	cpi	r24, 0x01	; 1
    3060:	a1 f0       	breq	.+40     	; 0x308a <turnOffPWM+0x34>
    3062:	82 30       	cpi	r24, 0x02	; 2
    3064:	21 f5       	brne	.+72     	; 0x30ae <turnOffPWM+0x58>
    3066:	14 c0       	rjmp	.+40     	; 0x3090 <turnOffPWM+0x3a>
    3068:	86 30       	cpi	r24, 0x06	; 6
    306a:	b1 f0       	breq	.+44     	; 0x3098 <turnOffPWM+0x42>
    306c:	87 30       	cpi	r24, 0x07	; 7
    306e:	d1 f0       	breq	.+52     	; 0x30a4 <turnOffPWM+0x4e>
    3070:	84 30       	cpi	r24, 0x04	; 4
    3072:	e9 f4       	brne	.+58     	; 0x30ae <turnOffPWM+0x58>
    3074:	04 c0       	rjmp	.+8      	; 0x307e <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    3076:	80 91 80 00 	lds	r24, 0x0080
    307a:	8f 77       	andi	r24, 0x7F	; 127
    307c:	03 c0       	rjmp	.+6      	; 0x3084 <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    307e:	80 91 80 00 	lds	r24, 0x0080
    3082:	8f 7d       	andi	r24, 0xDF	; 223
    3084:	80 93 80 00 	sts	0x0080, r24
    3088:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    308a:	84 b5       	in	r24, 0x24	; 36
    308c:	8f 77       	andi	r24, 0x7F	; 127
    308e:	02 c0       	rjmp	.+4      	; 0x3094 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    3090:	84 b5       	in	r24, 0x24	; 36
    3092:	8f 7d       	andi	r24, 0xDF	; 223
    3094:	84 bd       	out	0x24, r24	; 36
    3096:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3098:	80 91 b0 00 	lds	r24, 0x00B0
    309c:	8f 77       	andi	r24, 0x7F	; 127
    309e:	80 93 b0 00 	sts	0x00B0, r24
    30a2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    30a4:	80 91 b0 00 	lds	r24, 0x00B0
    30a8:	8f 7d       	andi	r24, 0xDF	; 223
    30aa:	80 93 b0 00 	sts	0x00B0, r24
    30ae:	08 95       	ret

000030b0 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    30b0:	90 e0       	ldi	r25, 0x00	; 0
    30b2:	fc 01       	movw	r30, r24
    30b4:	e6 56       	subi	r30, 0x66	; 102
    30b6:	ff 4f       	sbci	r31, 0xFF	; 255
    30b8:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    30ba:	fc 01       	movw	r30, r24
    30bc:	ea 57       	subi	r30, 0x7A	; 122
    30be:	ff 4f       	sbci	r31, 0xFF	; 255
    30c0:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    30c2:	ee 23       	and	r30, r30
    30c4:	c1 f0       	breq	.+48     	; 0x30f6 <pinMode+0x46>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    30c6:	f0 e0       	ldi	r31, 0x00	; 0
    30c8:	ee 0f       	add	r30, r30
    30ca:	ff 1f       	adc	r31, r31
    30cc:	e8 59       	subi	r30, 0x98	; 152
    30ce:	ff 4f       	sbci	r31, 0xFF	; 255
    30d0:	85 91       	lpm	r24, Z+
    30d2:	94 91       	lpm	r25, Z+
    30d4:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
    30d6:	66 23       	and	r22, r22
    30d8:	41 f4       	brne	.+16     	; 0x30ea <pinMode+0x3a>
		uint8_t oldSREG = SREG;
    30da:	9f b7       	in	r25, 0x3f	; 63
                cli();
    30dc:	f8 94       	cli
		*reg &= ~bit;
    30de:	8c 91       	ld	r24, X
    30e0:	20 95       	com	r18
    30e2:	82 23       	and	r24, r18
    30e4:	8c 93       	st	X, r24
		SREG = oldSREG;
    30e6:	9f bf       	out	0x3f, r25	; 63
    30e8:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    30ea:	9f b7       	in	r25, 0x3f	; 63
                cli();
    30ec:	f8 94       	cli
		*reg |= bit;
    30ee:	8c 91       	ld	r24, X
    30f0:	82 2b       	or	r24, r18
    30f2:	8c 93       	st	X, r24
		SREG = oldSREG;
    30f4:	9f bf       	out	0x3f, r25	; 63
    30f6:	08 95       	ret

000030f8 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    30f8:	0f 93       	push	r16
    30fa:	1f 93       	push	r17
    30fc:	df 93       	push	r29
    30fe:	cf 93       	push	r28
    3100:	0f 92       	push	r0
    3102:	cd b7       	in	r28, 0x3d	; 61
    3104:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    3106:	28 2f       	mov	r18, r24
    3108:	30 e0       	ldi	r19, 0x00	; 0
    310a:	f9 01       	movw	r30, r18
    310c:	e2 55       	subi	r30, 0x52	; 82
    310e:	ff 4f       	sbci	r31, 0xFF	; 255
    3110:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    3112:	f9 01       	movw	r30, r18
    3114:	e6 56       	subi	r30, 0x66	; 102
    3116:	ff 4f       	sbci	r31, 0xFF	; 255
    3118:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    311a:	2a 57       	subi	r18, 0x7A	; 122
    311c:	3f 4f       	sbci	r19, 0xFF	; 255
    311e:	f9 01       	movw	r30, r18
    3120:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3122:	00 23       	and	r16, r16
    3124:	d9 f0       	breq	.+54     	; 0x315c <digitalWrite+0x64>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3126:	88 23       	and	r24, r24
    3128:	21 f0       	breq	.+8      	; 0x3132 <digitalWrite+0x3a>
    312a:	69 83       	std	Y+1, r22	; 0x01
    312c:	0e 94 2b 18 	call	0x3056	; 0x3056 <turnOffPWM>
    3130:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    3132:	e0 2f       	mov	r30, r16
    3134:	f0 e0       	ldi	r31, 0x00	; 0
    3136:	ee 0f       	add	r30, r30
    3138:	ff 1f       	adc	r31, r31
    313a:	ee 58       	subi	r30, 0x8E	; 142
    313c:	ff 4f       	sbci	r31, 0xFF	; 255
    313e:	85 91       	lpm	r24, Z+
    3140:	94 91       	lpm	r25, Z+
    3142:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    3144:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3146:	f8 94       	cli

	if (val == LOW) {
    3148:	66 23       	and	r22, r22
    314a:	21 f4       	brne	.+8      	; 0x3154 <digitalWrite+0x5c>
		*out &= ~bit;
    314c:	8c 91       	ld	r24, X
    314e:	10 95       	com	r17
    3150:	81 23       	and	r24, r17
    3152:	02 c0       	rjmp	.+4      	; 0x3158 <digitalWrite+0x60>
	} else {
		*out |= bit;
    3154:	8c 91       	ld	r24, X
    3156:	81 2b       	or	r24, r17
    3158:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    315a:	9f bf       	out	0x3f, r25	; 63
}
    315c:	0f 90       	pop	r0
    315e:	cf 91       	pop	r28
    3160:	df 91       	pop	r29
    3162:	1f 91       	pop	r17
    3164:	0f 91       	pop	r16
    3166:	08 95       	ret

00003168 <digitalRead>:

int digitalRead(uint8_t pin)
{
    3168:	0f 93       	push	r16
    316a:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    316c:	28 2f       	mov	r18, r24
    316e:	30 e0       	ldi	r19, 0x00	; 0
    3170:	f9 01       	movw	r30, r18
    3172:	e2 55       	subi	r30, 0x52	; 82
    3174:	ff 4f       	sbci	r31, 0xFF	; 255
    3176:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    3178:	f9 01       	movw	r30, r18
    317a:	e6 56       	subi	r30, 0x66	; 102
    317c:	ff 4f       	sbci	r31, 0xFF	; 255
    317e:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    3180:	2a 57       	subi	r18, 0x7A	; 122
    3182:	3f 4f       	sbci	r19, 0xFF	; 255
    3184:	f9 01       	movw	r30, r18
    3186:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    3188:	11 23       	and	r17, r17
    318a:	91 f0       	breq	.+36     	; 0x31b0 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    318c:	88 23       	and	r24, r24
    318e:	11 f0       	breq	.+4      	; 0x3194 <digitalRead+0x2c>
    3190:	0e 94 2b 18 	call	0x3056	; 0x3056 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    3194:	e1 2f       	mov	r30, r17
    3196:	f0 e0       	ldi	r31, 0x00	; 0
    3198:	ee 0f       	add	r30, r30
    319a:	ff 1f       	adc	r31, r31
    319c:	e4 58       	subi	r30, 0x84	; 132
    319e:	ff 4f       	sbci	r31, 0xFF	; 255
    31a0:	85 91       	lpm	r24, Z+
    31a2:	94 91       	lpm	r25, Z+
    31a4:	dc 01       	movw	r26, r24
    31a6:	8c 91       	ld	r24, X
    31a8:	80 23       	and	r24, r16
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    31aa:	21 e0       	ldi	r18, 0x01	; 1
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	11 f4       	brne	.+4      	; 0x31b4 <digitalRead+0x4c>
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    31b4:	c9 01       	movw	r24, r18
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	08 95       	ret

000031bc <_ZN6StringD1Ev>:
	*this = buf;
}

String::~String()
{
	free(buffer);
    31bc:	fc 01       	movw	r30, r24
    31be:	80 81       	ld	r24, Z
    31c0:	91 81       	ldd	r25, Z+1	; 0x01
    31c2:	0e 94 38 28 	call	0x5070	; 0x5070 <free>
}
    31c6:	08 95       	ret

000031c8 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
    31c8:	cf 93       	push	r28
    31ca:	df 93       	push	r29
    31cc:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    31ce:	88 81       	ld	r24, Y
    31d0:	99 81       	ldd	r25, Y+1	; 0x01
    31d2:	00 97       	sbiw	r24, 0x00	; 0
    31d4:	11 f0       	breq	.+4      	; 0x31da <_ZN6String10invalidateEv+0x12>
    31d6:	0e 94 38 28 	call	0x5070	; 0x5070 <free>
	buffer = NULL;
    31da:	19 82       	std	Y+1, r1	; 0x01
    31dc:	18 82       	st	Y, r1
	capacity = len = 0;
    31de:	1d 82       	std	Y+5, r1	; 0x05
    31e0:	1c 82       	std	Y+4, r1	; 0x04
    31e2:	1b 82       	std	Y+3, r1	; 0x03
    31e4:	1a 82       	std	Y+2, r1	; 0x02
}
    31e6:	df 91       	pop	r29
    31e8:	cf 91       	pop	r28
    31ea:	08 95       	ret

000031ec <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    31ec:	0f 93       	push	r16
    31ee:	1f 93       	push	r17
    31f0:	cf 93       	push	r28
    31f2:	df 93       	push	r29
    31f4:	ec 01       	movw	r28, r24
    31f6:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    31f8:	6f 5f       	subi	r22, 0xFF	; 255
    31fa:	7f 4f       	sbci	r23, 0xFF	; 255
    31fc:	88 81       	ld	r24, Y
    31fe:	99 81       	ldd	r25, Y+1	; 0x01
    3200:	0e 94 d1 28 	call	0x51a2	; 0x51a2 <realloc>
	if (newbuffer) {
    3204:	00 97       	sbiw	r24, 0x00	; 0
    3206:	31 f0       	breq	.+12     	; 0x3214 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    3208:	99 83       	std	Y+1, r25	; 0x01
    320a:	88 83       	st	Y, r24
		capacity = maxStrLen;
    320c:	1b 83       	std	Y+3, r17	; 0x03
    320e:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    3210:	81 e0       	ldi	r24, 0x01	; 1
    3212:	01 c0       	rjmp	.+2      	; 0x3216 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    3214:	80 e0       	ldi	r24, 0x00	; 0
}
    3216:	df 91       	pop	r29
    3218:	cf 91       	pop	r28
    321a:	1f 91       	pop	r17
    321c:	0f 91       	pop	r16
    321e:	08 95       	ret

00003220 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    3220:	cf 93       	push	r28
    3222:	df 93       	push	r29
    3224:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    3226:	88 81       	ld	r24, Y
    3228:	99 81       	ldd	r25, Y+1	; 0x01
    322a:	00 97       	sbiw	r24, 0x00	; 0
    322c:	29 f0       	breq	.+10     	; 0x3238 <_ZN6String7reserveEj+0x18>
    322e:	8a 81       	ldd	r24, Y+2	; 0x02
    3230:	9b 81       	ldd	r25, Y+3	; 0x03
    3232:	86 17       	cp	r24, r22
    3234:	97 07       	cpc	r25, r23
    3236:	78 f4       	brcc	.+30     	; 0x3256 <_ZN6String7reserveEj+0x36>
	if (changeBuffer(size)) {
    3238:	ce 01       	movw	r24, r28
    323a:	0e 94 f6 18 	call	0x31ec	; 0x31ec <_ZN6String12changeBufferEj>
    323e:	88 23       	and	r24, r24
    3240:	41 f0       	breq	.+16     	; 0x3252 <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    3242:	8c 81       	ldd	r24, Y+4	; 0x04
    3244:	9d 81       	ldd	r25, Y+5	; 0x05
    3246:	00 97       	sbiw	r24, 0x00	; 0
    3248:	31 f4       	brne	.+12     	; 0x3256 <_ZN6String7reserveEj+0x36>
    324a:	e8 81       	ld	r30, Y
    324c:	f9 81       	ldd	r31, Y+1	; 0x01
    324e:	10 82       	st	Z, r1
    3250:	02 c0       	rjmp	.+4      	; 0x3256 <_ZN6String7reserveEj+0x36>
		return 1;
	}
	return 0;
    3252:	80 e0       	ldi	r24, 0x00	; 0
    3254:	01 c0       	rjmp	.+2      	; 0x3258 <_ZN6String7reserveEj+0x38>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    3256:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    3258:	df 91       	pop	r29
    325a:	cf 91       	pop	r28
    325c:	08 95       	ret

0000325e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    325e:	ef 92       	push	r14
    3260:	ff 92       	push	r15
    3262:	0f 93       	push	r16
    3264:	1f 93       	push	r17
    3266:	cf 93       	push	r28
    3268:	df 93       	push	r29
    326a:	ec 01       	movw	r28, r24
    326c:	7b 01       	movw	r14, r22
    326e:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    3270:	ba 01       	movw	r22, r20
    3272:	0e 94 10 19 	call	0x3220	; 0x3220 <_ZN6String7reserveEj>
    3276:	88 23       	and	r24, r24
    3278:	21 f4       	brne	.+8      	; 0x3282 <_ZN6String4copyEPKcj+0x24>
		invalidate();
    327a:	ce 01       	movw	r24, r28
    327c:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <_ZN6String10invalidateEv>
		return *this;
    3280:	07 c0       	rjmp	.+14     	; 0x3290 <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    3282:	1d 83       	std	Y+5, r17	; 0x05
    3284:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    3286:	88 81       	ld	r24, Y
    3288:	99 81       	ldd	r25, Y+1	; 0x01
    328a:	b7 01       	movw	r22, r14
    328c:	0e 94 0a 2a 	call	0x5414	; 0x5414 <strcpy>
	return *this;
}
    3290:	ce 01       	movw	r24, r28
    3292:	df 91       	pop	r29
    3294:	cf 91       	pop	r28
    3296:	1f 91       	pop	r17
    3298:	0f 91       	pop	r16
    329a:	ff 90       	pop	r15
    329c:	ef 90       	pop	r14
    329e:	08 95       	ret

000032a0 <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    32a0:	cf 93       	push	r28
    32a2:	df 93       	push	r29
    32a4:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    32a6:	11 82       	std	Z+1, r1	; 0x01
    32a8:	10 82       	st	Z, r1
	capacity = 0;
    32aa:	13 82       	std	Z+3, r1	; 0x03
    32ac:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    32ae:	15 82       	std	Z+5, r1	; 0x05
    32b0:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    32b2:	16 82       	std	Z+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    32b4:	61 15       	cp	r22, r1
    32b6:	71 05       	cpc	r23, r1
    32b8:	59 f0       	breq	.+22     	; 0x32d0 <_ZN6StringC1EPKc+0x30>
    32ba:	eb 01       	movw	r28, r22
    32bc:	09 90       	ld	r0, Y+
    32be:	00 20       	and	r0, r0
    32c0:	e9 f7       	brne	.-6      	; 0x32bc <_ZN6StringC1EPKc+0x1c>
    32c2:	ae 01       	movw	r20, r28
    32c4:	41 50       	subi	r20, 0x01	; 1
    32c6:	50 40       	sbci	r21, 0x00	; 0
    32c8:	46 1b       	sub	r20, r22
    32ca:	57 0b       	sbc	r21, r23
    32cc:	0e 94 2f 19 	call	0x325e	; 0x325e <_ZN6String4copyEPKcj>
}
    32d0:	df 91       	pop	r29
    32d2:	cf 91       	pop	r28
    32d4:	08 95       	ret

000032d6 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    32d6:	ef 92       	push	r14
    32d8:	ff 92       	push	r15
    32da:	cf 93       	push	r28
    32dc:	df 93       	push	r29
    32de:	ec 01       	movw	r28, r24
    32e0:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    32e2:	86 17       	cp	r24, r22
    32e4:	97 07       	cpc	r25, r23
    32e6:	61 f0       	breq	.+24     	; 0x3300 <_ZN6StringaSERKS_+0x2a>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    32e8:	60 81       	ld	r22, Z
    32ea:	71 81       	ldd	r23, Z+1	; 0x01
    32ec:	61 15       	cp	r22, r1
    32ee:	71 05       	cpc	r23, r1
    32f0:	29 f0       	breq	.+10     	; 0x32fc <_ZN6StringaSERKS_+0x26>
    32f2:	44 81       	ldd	r20, Z+4	; 0x04
    32f4:	55 81       	ldd	r21, Z+5	; 0x05
    32f6:	0e 94 2f 19 	call	0x325e	; 0x325e <_ZN6String4copyEPKcj>
    32fa:	02 c0       	rjmp	.+4      	; 0x3300 <_ZN6StringaSERKS_+0x2a>
	else invalidate();
    32fc:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <_ZN6String10invalidateEv>
	
	return *this;
}
    3300:	ce 01       	movw	r24, r28
    3302:	df 91       	pop	r29
    3304:	cf 91       	pop	r28
    3306:	ff 90       	pop	r15
    3308:	ef 90       	pop	r14
    330a:	08 95       	ret

0000330c <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    330c:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    330e:	11 82       	std	Z+1, r1	; 0x01
    3310:	10 82       	st	Z, r1
	capacity = 0;
    3312:	13 82       	std	Z+3, r1	; 0x03
    3314:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3316:	15 82       	std	Z+5, r1	; 0x05
    3318:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    331a:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    331c:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <_ZN6StringaSERKS_>
}
    3320:	08 95       	ret

00003322 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    3322:	0f 93       	push	r16
    3324:	1f 93       	push	r17
    3326:	8c 01       	movw	r16, r24
	if (cstr) copy(cstr, strlen(cstr));
    3328:	61 15       	cp	r22, r1
    332a:	71 05       	cpc	r23, r1
    332c:	61 f0       	breq	.+24     	; 0x3346 <_ZN6StringaSEPKc+0x24>
    332e:	db 01       	movw	r26, r22
    3330:	0d 90       	ld	r0, X+
    3332:	00 20       	and	r0, r0
    3334:	e9 f7       	brne	.-6      	; 0x3330 <_ZN6StringaSEPKc+0xe>
    3336:	ad 01       	movw	r20, r26
    3338:	41 50       	subi	r20, 0x01	; 1
    333a:	50 40       	sbci	r21, 0x00	; 0
    333c:	46 1b       	sub	r20, r22
    333e:	57 0b       	sbc	r21, r23
    3340:	0e 94 2f 19 	call	0x325e	; 0x325e <_ZN6String4copyEPKcj>
    3344:	02 c0       	rjmp	.+4      	; 0x334a <_ZN6StringaSEPKc+0x28>
	else invalidate();
    3346:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <_ZN6String10invalidateEv>
	
	return *this;
}
    334a:	c8 01       	movw	r24, r16
    334c:	1f 91       	pop	r17
    334e:	0f 91       	pop	r16
    3350:	08 95       	ret

00003352 <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    3352:	ef 92       	push	r14
    3354:	ff 92       	push	r15
    3356:	0f 93       	push	r16
    3358:	1f 93       	push	r17
    335a:	df 93       	push	r29
    335c:	cf 93       	push	r28
    335e:	cd b7       	in	r28, 0x3d	; 61
    3360:	de b7       	in	r29, 0x3e	; 62
    3362:	a1 97       	sbiw	r28, 0x21	; 33
    3364:	0f b6       	in	r0, 0x3f	; 63
    3366:	f8 94       	cli
    3368:	de bf       	out	0x3e, r29	; 62
    336a:	0f be       	out	0x3f, r0	; 63
    336c:	cd bf       	out	0x3d, r28	; 61
    336e:	7c 01       	movw	r14, r24
    3370:	cb 01       	movw	r24, r22
    3372:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3374:	f7 01       	movw	r30, r14
    3376:	11 82       	std	Z+1, r1	; 0x01
    3378:	10 82       	st	Z, r1
	capacity = 0;
    337a:	13 82       	std	Z+3, r1	; 0x03
    337c:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    337e:	15 82       	std	Z+5, r1	; 0x05
    3380:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3382:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    3384:	8e 01       	movw	r16, r28
    3386:	0f 5f       	subi	r16, 0xFF	; 255
    3388:	1f 4f       	sbci	r17, 0xFF	; 255
    338a:	a8 01       	movw	r20, r16
    338c:	30 e0       	ldi	r19, 0x00	; 0
    338e:	0e 94 bd 2a 	call	0x557a	; 0x557a <ultoa>
	*this = buf;
    3392:	c7 01       	movw	r24, r14
    3394:	b8 01       	movw	r22, r16
    3396:	0e 94 91 19 	call	0x3322	; 0x3322 <_ZN6StringaSEPKc>
}
    339a:	a1 96       	adiw	r28, 0x21	; 33
    339c:	0f b6       	in	r0, 0x3f	; 63
    339e:	f8 94       	cli
    33a0:	de bf       	out	0x3e, r29	; 62
    33a2:	0f be       	out	0x3f, r0	; 63
    33a4:	cd bf       	out	0x3d, r28	; 61
    33a6:	cf 91       	pop	r28
    33a8:	df 91       	pop	r29
    33aa:	1f 91       	pop	r17
    33ac:	0f 91       	pop	r16
    33ae:	ff 90       	pop	r15
    33b0:	ef 90       	pop	r14
    33b2:	08 95       	ret

000033b4 <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    33b4:	ef 92       	push	r14
    33b6:	ff 92       	push	r15
    33b8:	0f 93       	push	r16
    33ba:	1f 93       	push	r17
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	a2 97       	sbiw	r28, 0x22	; 34
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	f8 94       	cli
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	cd bf       	out	0x3d, r28	; 61
    33d0:	7c 01       	movw	r14, r24
    33d2:	cb 01       	movw	r24, r22
    33d4:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    33d6:	f7 01       	movw	r30, r14
    33d8:	11 82       	std	Z+1, r1	; 0x01
    33da:	10 82       	st	Z, r1
	capacity = 0;
    33dc:	13 82       	std	Z+3, r1	; 0x03
    33de:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    33e0:	15 82       	std	Z+5, r1	; 0x05
    33e2:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    33e4:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    33e6:	8e 01       	movw	r16, r28
    33e8:	0f 5f       	subi	r16, 0xFF	; 255
    33ea:	1f 4f       	sbci	r17, 0xFF	; 255
    33ec:	a8 01       	movw	r20, r16
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <ltoa>
	*this = buf;
    33f4:	c7 01       	movw	r24, r14
    33f6:	b8 01       	movw	r22, r16
    33f8:	0e 94 91 19 	call	0x3322	; 0x3322 <_ZN6StringaSEPKc>
}
    33fc:	a2 96       	adiw	r28, 0x22	; 34
    33fe:	0f b6       	in	r0, 0x3f	; 63
    3400:	f8 94       	cli
    3402:	de bf       	out	0x3e, r29	; 62
    3404:	0f be       	out	0x3f, r0	; 63
    3406:	cd bf       	out	0x3d, r28	; 61
    3408:	cf 91       	pop	r28
    340a:	df 91       	pop	r29
    340c:	1f 91       	pop	r17
    340e:	0f 91       	pop	r16
    3410:	ff 90       	pop	r15
    3412:	ef 90       	pop	r14
    3414:	08 95       	ret

00003416 <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    3416:	ef 92       	push	r14
    3418:	ff 92       	push	r15
    341a:	0f 93       	push	r16
    341c:	1f 93       	push	r17
    341e:	df 93       	push	r29
    3420:	cf 93       	push	r28
    3422:	cd b7       	in	r28, 0x3d	; 61
    3424:	de b7       	in	r29, 0x3e	; 62
    3426:	61 97       	sbiw	r28, 0x11	; 17
    3428:	0f b6       	in	r0, 0x3f	; 63
    342a:	f8 94       	cli
    342c:	de bf       	out	0x3e, r29	; 62
    342e:	0f be       	out	0x3f, r0	; 63
    3430:	cd bf       	out	0x3d, r28	; 61
    3432:	7c 01       	movw	r14, r24
    3434:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3436:	f7 01       	movw	r30, r14
    3438:	11 82       	std	Z+1, r1	; 0x01
    343a:	10 82       	st	Z, r1
	capacity = 0;
    343c:	13 82       	std	Z+3, r1	; 0x03
    343e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3440:	15 82       	std	Z+5, r1	; 0x05
    3442:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3444:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    3446:	8e 01       	movw	r16, r28
    3448:	0f 5f       	subi	r16, 0xFF	; 255
    344a:	1f 4f       	sbci	r17, 0xFF	; 255
    344c:	b8 01       	movw	r22, r16
    344e:	50 e0       	ldi	r21, 0x00	; 0
    3450:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <utoa>
	*this = buf;
    3454:	c7 01       	movw	r24, r14
    3456:	b8 01       	movw	r22, r16
    3458:	0e 94 91 19 	call	0x3322	; 0x3322 <_ZN6StringaSEPKc>
}
    345c:	61 96       	adiw	r28, 0x11	; 17
    345e:	0f b6       	in	r0, 0x3f	; 63
    3460:	f8 94       	cli
    3462:	de bf       	out	0x3e, r29	; 62
    3464:	0f be       	out	0x3f, r0	; 63
    3466:	cd bf       	out	0x3d, r28	; 61
    3468:	cf 91       	pop	r28
    346a:	df 91       	pop	r29
    346c:	1f 91       	pop	r17
    346e:	0f 91       	pop	r16
    3470:	ff 90       	pop	r15
    3472:	ef 90       	pop	r14
    3474:	08 95       	ret

00003476 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    3476:	ef 92       	push	r14
    3478:	ff 92       	push	r15
    347a:	0f 93       	push	r16
    347c:	1f 93       	push	r17
    347e:	df 93       	push	r29
    3480:	cf 93       	push	r28
    3482:	cd b7       	in	r28, 0x3d	; 61
    3484:	de b7       	in	r29, 0x3e	; 62
    3486:	62 97       	sbiw	r28, 0x12	; 18
    3488:	0f b6       	in	r0, 0x3f	; 63
    348a:	f8 94       	cli
    348c:	de bf       	out	0x3e, r29	; 62
    348e:	0f be       	out	0x3f, r0	; 63
    3490:	cd bf       	out	0x3d, r28	; 61
    3492:	7c 01       	movw	r14, r24
    3494:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3496:	f7 01       	movw	r30, r14
    3498:	11 82       	std	Z+1, r1	; 0x01
    349a:	10 82       	st	Z, r1
	capacity = 0;
    349c:	13 82       	std	Z+3, r1	; 0x03
    349e:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    34a0:	15 82       	std	Z+5, r1	; 0x05
    34a2:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    34a4:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    34a6:	8e 01       	movw	r16, r28
    34a8:	0f 5f       	subi	r16, 0xFF	; 255
    34aa:	1f 4f       	sbci	r17, 0xFF	; 255
    34ac:	b8 01       	movw	r22, r16
    34ae:	50 e0       	ldi	r21, 0x00	; 0
    34b0:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <itoa>
	*this = buf;
    34b4:	c7 01       	movw	r24, r14
    34b6:	b8 01       	movw	r22, r16
    34b8:	0e 94 91 19 	call	0x3322	; 0x3322 <_ZN6StringaSEPKc>
}
    34bc:	62 96       	adiw	r28, 0x12	; 18
    34be:	0f b6       	in	r0, 0x3f	; 63
    34c0:	f8 94       	cli
    34c2:	de bf       	out	0x3e, r29	; 62
    34c4:	0f be       	out	0x3f, r0	; 63
    34c6:	cd bf       	out	0x3d, r28	; 61
    34c8:	cf 91       	pop	r28
    34ca:	df 91       	pop	r29
    34cc:	1f 91       	pop	r17
    34ce:	0f 91       	pop	r16
    34d0:	ff 90       	pop	r15
    34d2:	ef 90       	pop	r14
    34d4:	08 95       	ret

000034d6 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    34d6:	ef 92       	push	r14
    34d8:	ff 92       	push	r15
    34da:	0f 93       	push	r16
    34dc:	1f 93       	push	r17
    34de:	df 93       	push	r29
    34e0:	cf 93       	push	r28
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	29 97       	sbiw	r28, 0x09	; 9
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	7c 01       	movw	r14, r24
    34f4:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    34f6:	f7 01       	movw	r30, r14
    34f8:	11 82       	std	Z+1, r1	; 0x01
    34fa:	10 82       	st	Z, r1
	capacity = 0;
    34fc:	13 82       	std	Z+3, r1	; 0x03
    34fe:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3500:	15 82       	std	Z+5, r1	; 0x05
    3502:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3504:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    3506:	90 e0       	ldi	r25, 0x00	; 0
    3508:	8e 01       	movw	r16, r28
    350a:	0f 5f       	subi	r16, 0xFF	; 255
    350c:	1f 4f       	sbci	r17, 0xFF	; 255
    350e:	b8 01       	movw	r22, r16
    3510:	50 e0       	ldi	r21, 0x00	; 0
    3512:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <utoa>
	*this = buf;
    3516:	c7 01       	movw	r24, r14
    3518:	b8 01       	movw	r22, r16
    351a:	0e 94 91 19 	call	0x3322	; 0x3322 <_ZN6StringaSEPKc>
}
    351e:	29 96       	adiw	r28, 0x09	; 9
    3520:	0f b6       	in	r0, 0x3f	; 63
    3522:	f8 94       	cli
    3524:	de bf       	out	0x3e, r29	; 62
    3526:	0f be       	out	0x3f, r0	; 63
    3528:	cd bf       	out	0x3d, r28	; 61
    352a:	cf 91       	pop	r28
    352c:	df 91       	pop	r29
    352e:	1f 91       	pop	r17
    3530:	0f 91       	pop	r16
    3532:	ff 90       	pop	r15
    3534:	ef 90       	pop	r14
    3536:	08 95       	ret

00003538 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    3538:	df 93       	push	r29
    353a:	cf 93       	push	r28
    353c:	00 d0       	rcall	.+0      	; 0x353e <_ZN6StringC1Ec+0x6>
    353e:	cd b7       	in	r28, 0x3d	; 61
    3540:	de b7       	in	r29, 0x3e	; 62
    3542:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3544:	11 82       	std	Z+1, r1	; 0x01
    3546:	10 82       	st	Z, r1
	capacity = 0;
    3548:	13 82       	std	Z+3, r1	; 0x03
    354a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    354c:	15 82       	std	Z+5, r1	; 0x05
    354e:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3550:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    3552:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    3554:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    3556:	be 01       	movw	r22, r28
    3558:	6f 5f       	subi	r22, 0xFF	; 255
    355a:	7f 4f       	sbci	r23, 0xFF	; 255
    355c:	0e 94 91 19 	call	0x3322	; 0x3322 <_ZN6StringaSEPKc>
}
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	cf 91       	pop	r28
    3566:	df 91       	pop	r29
    3568:	08 95       	ret

0000356a <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    356a:	ef 92       	push	r14
    356c:	ff 92       	push	r15
    356e:	0f 93       	push	r16
    3570:	1f 93       	push	r17
    3572:	cf 93       	push	r28
    3574:	df 93       	push	r29
    3576:	ec 01       	movw	r28, r24
    3578:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
    357a:	0c 81       	ldd	r16, Y+4	; 0x04
    357c:	1d 81       	ldd	r17, Y+5	; 0x05
	if (!cstr) return 0;
    357e:	61 15       	cp	r22, r1
    3580:	71 05       	cpc	r23, r1
    3582:	b9 f0       	breq	.+46     	; 0x35b2 <_ZN6String6concatEPKcj+0x48>
	if (length == 0) return 1;
    3584:	41 15       	cp	r20, r1
    3586:	51 05       	cpc	r21, r1
    3588:	91 f0       	breq	.+36     	; 0x35ae <_ZN6String6concatEPKcj+0x44>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    358a:	04 0f       	add	r16, r20
    358c:	15 1f       	adc	r17, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    358e:	b8 01       	movw	r22, r16
    3590:	0e 94 10 19 	call	0x3220	; 0x3220 <_ZN6String7reserveEj>
    3594:	88 23       	and	r24, r24
    3596:	69 f0       	breq	.+26     	; 0x35b2 <_ZN6String6concatEPKcj+0x48>
	strcpy(buffer + len, cstr);
    3598:	28 81       	ld	r18, Y
    359a:	39 81       	ldd	r19, Y+1	; 0x01
    359c:	8c 81       	ldd	r24, Y+4	; 0x04
    359e:	9d 81       	ldd	r25, Y+5	; 0x05
    35a0:	82 0f       	add	r24, r18
    35a2:	93 1f       	adc	r25, r19
    35a4:	b7 01       	movw	r22, r14
    35a6:	0e 94 0a 2a 	call	0x5414	; 0x5414 <strcpy>
	len = newlen;
    35aa:	1d 83       	std	Y+5, r17	; 0x05
    35ac:	0c 83       	std	Y+4, r16	; 0x04

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	01 c0       	rjmp	.+2      	; 0x35b4 <_ZN6String6concatEPKcj+0x4a>
	if (!reserve(newlen)) return 0;
    35b2:	80 e0       	ldi	r24, 0x00	; 0
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    35b4:	df 91       	pop	r29
    35b6:	cf 91       	pop	r28
    35b8:	1f 91       	pop	r17
    35ba:	0f 91       	pop	r16
    35bc:	ff 90       	pop	r15
    35be:	ef 90       	pop	r14
    35c0:	08 95       	ret

000035c2 <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    35c2:	fb 01       	movw	r30, r22
	return concat(s.buffer, s.len);
    35c4:	60 81       	ld	r22, Z
    35c6:	71 81       	ldd	r23, Z+1	; 0x01
    35c8:	44 81       	ldd	r20, Z+4	; 0x04
    35ca:	55 81       	ldd	r21, Z+5	; 0x05
    35cc:	0e 94 b5 1a 	call	0x356a	; 0x356a <_ZN6String6concatEPKcj>
}
    35d0:	08 95       	ret

000035d2 <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    35d2:	61 15       	cp	r22, r1
    35d4:	71 05       	cpc	r23, r1
    35d6:	61 f0       	breq	.+24     	; 0x35f0 <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
    35d8:	db 01       	movw	r26, r22
    35da:	0d 90       	ld	r0, X+
    35dc:	00 20       	and	r0, r0
    35de:	e9 f7       	brne	.-6      	; 0x35da <_ZN6String6concatEPKc+0x8>
    35e0:	ad 01       	movw	r20, r26
    35e2:	41 50       	subi	r20, 0x01	; 1
    35e4:	50 40       	sbci	r21, 0x00	; 0
    35e6:	46 1b       	sub	r20, r22
    35e8:	57 0b       	sbc	r21, r23
    35ea:	0e 94 b5 1a 	call	0x356a	; 0x356a <_ZN6String6concatEPKcj>
    35ee:	08 95       	ret
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    35f0:	80 e0       	ldi	r24, 0x00	; 0
	return concat(cstr, strlen(cstr));
}
    35f2:	08 95       	ret

000035f4 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    35f4:	df 93       	push	r29
    35f6:	cf 93       	push	r28
    35f8:	00 d0       	rcall	.+0      	; 0x35fa <_ZN6String6concatEc+0x6>
    35fa:	cd b7       	in	r28, 0x3d	; 61
    35fc:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    35fe:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    3600:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    3602:	be 01       	movw	r22, r28
    3604:	6f 5f       	subi	r22, 0xFF	; 255
    3606:	7f 4f       	sbci	r23, 0xFF	; 255
    3608:	41 e0       	ldi	r20, 0x01	; 1
    360a:	50 e0       	ldi	r21, 0x00	; 0
    360c:	0e 94 b5 1a 	call	0x356a	; 0x356a <_ZN6String6concatEPKcj>
}
    3610:	0f 90       	pop	r0
    3612:	0f 90       	pop	r0
    3614:	cf 91       	pop	r28
    3616:	df 91       	pop	r29
    3618:	08 95       	ret

0000361a <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    361a:	ef 92       	push	r14
    361c:	ff 92       	push	r15
    361e:	0f 93       	push	r16
    3620:	1f 93       	push	r17
    3622:	df 93       	push	r29
    3624:	cf 93       	push	r28
    3626:	00 d0       	rcall	.+0      	; 0x3628 <_ZN6String6concatEh+0xe>
    3628:	00 d0       	rcall	.+0      	; 0x362a <_ZN6String6concatEh+0x10>
    362a:	cd b7       	in	r28, 0x3d	; 61
    362c:	de b7       	in	r29, 0x3e	; 62
    362e:	7c 01       	movw	r14, r24
    3630:	86 2f       	mov	r24, r22
	char buf[4];
	itoa(num, buf, 10);
    3632:	90 e0       	ldi	r25, 0x00	; 0
    3634:	8e 01       	movw	r16, r28
    3636:	0f 5f       	subi	r16, 0xFF	; 255
    3638:	1f 4f       	sbci	r17, 0xFF	; 255
    363a:	b8 01       	movw	r22, r16
    363c:	4a e0       	ldi	r20, 0x0A	; 10
    363e:	50 e0       	ldi	r21, 0x00	; 0
    3640:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <itoa>
	return concat(buf, strlen(buf));
    3644:	f8 01       	movw	r30, r16
    3646:	01 90       	ld	r0, Z+
    3648:	00 20       	and	r0, r0
    364a:	e9 f7       	brne	.-6      	; 0x3646 <_ZN6String6concatEh+0x2c>
    364c:	af 01       	movw	r20, r30
    364e:	41 50       	subi	r20, 0x01	; 1
    3650:	50 40       	sbci	r21, 0x00	; 0
    3652:	40 1b       	sub	r20, r16
    3654:	51 0b       	sbc	r21, r17
    3656:	c7 01       	movw	r24, r14
    3658:	b8 01       	movw	r22, r16
    365a:	0e 94 b5 1a 	call	0x356a	; 0x356a <_ZN6String6concatEPKcj>
}
    365e:	0f 90       	pop	r0
    3660:	0f 90       	pop	r0
    3662:	0f 90       	pop	r0
    3664:	0f 90       	pop	r0
    3666:	cf 91       	pop	r28
    3668:	df 91       	pop	r29
    366a:	1f 91       	pop	r17
    366c:	0f 91       	pop	r16
    366e:	ff 90       	pop	r15
    3670:	ef 90       	pop	r14
    3672:	08 95       	ret

00003674 <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    3674:	ef 92       	push	r14
    3676:	ff 92       	push	r15
    3678:	0f 93       	push	r16
    367a:	1f 93       	push	r17
    367c:	df 93       	push	r29
    367e:	cf 93       	push	r28
    3680:	cd b7       	in	r28, 0x3d	; 61
    3682:	de b7       	in	r29, 0x3e	; 62
    3684:	27 97       	sbiw	r28, 0x07	; 7
    3686:	0f b6       	in	r0, 0x3f	; 63
    3688:	f8 94       	cli
    368a:	de bf       	out	0x3e, r29	; 62
    368c:	0f be       	out	0x3f, r0	; 63
    368e:	cd bf       	out	0x3d, r28	; 61
    3690:	7c 01       	movw	r14, r24
    3692:	cb 01       	movw	r24, r22
	char buf[7];
	itoa(num, buf, 10);
    3694:	8e 01       	movw	r16, r28
    3696:	0f 5f       	subi	r16, 0xFF	; 255
    3698:	1f 4f       	sbci	r17, 0xFF	; 255
    369a:	b8 01       	movw	r22, r16
    369c:	4a e0       	ldi	r20, 0x0A	; 10
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	0e 94 53 2a 	call	0x54a6	; 0x54a6 <itoa>
	return concat(buf, strlen(buf));
    36a4:	f8 01       	movw	r30, r16
    36a6:	01 90       	ld	r0, Z+
    36a8:	00 20       	and	r0, r0
    36aa:	e9 f7       	brne	.-6      	; 0x36a6 <_ZN6String6concatEi+0x32>
    36ac:	af 01       	movw	r20, r30
    36ae:	41 50       	subi	r20, 0x01	; 1
    36b0:	50 40       	sbci	r21, 0x00	; 0
    36b2:	40 1b       	sub	r20, r16
    36b4:	51 0b       	sbc	r21, r17
    36b6:	c7 01       	movw	r24, r14
    36b8:	b8 01       	movw	r22, r16
    36ba:	0e 94 b5 1a 	call	0x356a	; 0x356a <_ZN6String6concatEPKcj>
}
    36be:	27 96       	adiw	r28, 0x07	; 7
    36c0:	0f b6       	in	r0, 0x3f	; 63
    36c2:	f8 94       	cli
    36c4:	de bf       	out	0x3e, r29	; 62
    36c6:	0f be       	out	0x3f, r0	; 63
    36c8:	cd bf       	out	0x3d, r28	; 61
    36ca:	cf 91       	pop	r28
    36cc:	df 91       	pop	r29
    36ce:	1f 91       	pop	r17
    36d0:	0f 91       	pop	r16
    36d2:	ff 90       	pop	r15
    36d4:	ef 90       	pop	r14
    36d6:	08 95       	ret

000036d8 <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
    36d8:	ef 92       	push	r14
    36da:	ff 92       	push	r15
    36dc:	0f 93       	push	r16
    36de:	1f 93       	push	r17
    36e0:	df 93       	push	r29
    36e2:	cf 93       	push	r28
    36e4:	00 d0       	rcall	.+0      	; 0x36e6 <_ZN6String6concatEj+0xe>
    36e6:	00 d0       	rcall	.+0      	; 0x36e8 <_ZN6String6concatEj+0x10>
    36e8:	00 d0       	rcall	.+0      	; 0x36ea <_ZN6String6concatEj+0x12>
    36ea:	cd b7       	in	r28, 0x3d	; 61
    36ec:	de b7       	in	r29, 0x3e	; 62
    36ee:	7c 01       	movw	r14, r24
    36f0:	cb 01       	movw	r24, r22
	char buf[6];
	utoa(num, buf, 10);
    36f2:	8e 01       	movw	r16, r28
    36f4:	0f 5f       	subi	r16, 0xFF	; 255
    36f6:	1f 4f       	sbci	r17, 0xFF	; 255
    36f8:	b8 01       	movw	r22, r16
    36fa:	4a e0       	ldi	r20, 0x0A	; 10
    36fc:	50 e0       	ldi	r21, 0x00	; 0
    36fe:	0e 94 e2 2a 	call	0x55c4	; 0x55c4 <utoa>
	return concat(buf, strlen(buf));
    3702:	f8 01       	movw	r30, r16
    3704:	01 90       	ld	r0, Z+
    3706:	00 20       	and	r0, r0
    3708:	e9 f7       	brne	.-6      	; 0x3704 <_ZN6String6concatEj+0x2c>
    370a:	af 01       	movw	r20, r30
    370c:	41 50       	subi	r20, 0x01	; 1
    370e:	50 40       	sbci	r21, 0x00	; 0
    3710:	40 1b       	sub	r20, r16
    3712:	51 0b       	sbc	r21, r17
    3714:	c7 01       	movw	r24, r14
    3716:	b8 01       	movw	r22, r16
    3718:	0e 94 b5 1a 	call	0x356a	; 0x356a <_ZN6String6concatEPKcj>
}
    371c:	26 96       	adiw	r28, 0x06	; 6
    371e:	0f b6       	in	r0, 0x3f	; 63
    3720:	f8 94       	cli
    3722:	de bf       	out	0x3e, r29	; 62
    3724:	0f be       	out	0x3f, r0	; 63
    3726:	cd bf       	out	0x3d, r28	; 61
    3728:	cf 91       	pop	r28
    372a:	df 91       	pop	r29
    372c:	1f 91       	pop	r17
    372e:	0f 91       	pop	r16
    3730:	ff 90       	pop	r15
    3732:	ef 90       	pop	r14
    3734:	08 95       	ret

00003736 <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
    3736:	ef 92       	push	r14
    3738:	ff 92       	push	r15
    373a:	0f 93       	push	r16
    373c:	1f 93       	push	r17
    373e:	df 93       	push	r29
    3740:	cf 93       	push	r28
    3742:	cd b7       	in	r28, 0x3d	; 61
    3744:	de b7       	in	r29, 0x3e	; 62
    3746:	2c 97       	sbiw	r28, 0x0c	; 12
    3748:	0f b6       	in	r0, 0x3f	; 63
    374a:	f8 94       	cli
    374c:	de bf       	out	0x3e, r29	; 62
    374e:	0f be       	out	0x3f, r0	; 63
    3750:	cd bf       	out	0x3d, r28	; 61
    3752:	7c 01       	movw	r14, r24
    3754:	cb 01       	movw	r24, r22
    3756:	ba 01       	movw	r22, r20
	char buf[12];
	ltoa(num, buf, 10);
    3758:	8e 01       	movw	r16, r28
    375a:	0f 5f       	subi	r16, 0xFF	; 255
    375c:	1f 4f       	sbci	r17, 0xFF	; 255
    375e:	a8 01       	movw	r20, r16
    3760:	2a e0       	ldi	r18, 0x0A	; 10
    3762:	30 e0       	ldi	r19, 0x00	; 0
    3764:	0e 94 74 2a 	call	0x54e8	; 0x54e8 <ltoa>
	return concat(buf, strlen(buf));
    3768:	f8 01       	movw	r30, r16
    376a:	01 90       	ld	r0, Z+
    376c:	00 20       	and	r0, r0
    376e:	e9 f7       	brne	.-6      	; 0x376a <_ZN6String6concatEl+0x34>
    3770:	af 01       	movw	r20, r30
    3772:	41 50       	subi	r20, 0x01	; 1
    3774:	50 40       	sbci	r21, 0x00	; 0
    3776:	40 1b       	sub	r20, r16
    3778:	51 0b       	sbc	r21, r17
    377a:	c7 01       	movw	r24, r14
    377c:	b8 01       	movw	r22, r16
    377e:	0e 94 b5 1a 	call	0x356a	; 0x356a <_ZN6String6concatEPKcj>
}
    3782:	2c 96       	adiw	r28, 0x0c	; 12
    3784:	0f b6       	in	r0, 0x3f	; 63
    3786:	f8 94       	cli
    3788:	de bf       	out	0x3e, r29	; 62
    378a:	0f be       	out	0x3f, r0	; 63
    378c:	cd bf       	out	0x3d, r28	; 61
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	ff 90       	pop	r15
    3798:	ef 90       	pop	r14
    379a:	08 95       	ret

0000379c <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    379c:	ef 92       	push	r14
    379e:	ff 92       	push	r15
    37a0:	0f 93       	push	r16
    37a2:	1f 93       	push	r17
    37a4:	df 93       	push	r29
    37a6:	cf 93       	push	r28
    37a8:	cd b7       	in	r28, 0x3d	; 61
    37aa:	de b7       	in	r29, 0x3e	; 62
    37ac:	2b 97       	sbiw	r28, 0x0b	; 11
    37ae:	0f b6       	in	r0, 0x3f	; 63
    37b0:	f8 94       	cli
    37b2:	de bf       	out	0x3e, r29	; 62
    37b4:	0f be       	out	0x3f, r0	; 63
    37b6:	cd bf       	out	0x3d, r28	; 61
    37b8:	7c 01       	movw	r14, r24
    37ba:	cb 01       	movw	r24, r22
    37bc:	ba 01       	movw	r22, r20
	char buf[11];
	ultoa(num, buf, 10);
    37be:	8e 01       	movw	r16, r28
    37c0:	0f 5f       	subi	r16, 0xFF	; 255
    37c2:	1f 4f       	sbci	r17, 0xFF	; 255
    37c4:	a8 01       	movw	r20, r16
    37c6:	2a e0       	ldi	r18, 0x0A	; 10
    37c8:	30 e0       	ldi	r19, 0x00	; 0
    37ca:	0e 94 bd 2a 	call	0x557a	; 0x557a <ultoa>
	return concat(buf, strlen(buf));
    37ce:	f8 01       	movw	r30, r16
    37d0:	01 90       	ld	r0, Z+
    37d2:	00 20       	and	r0, r0
    37d4:	e9 f7       	brne	.-6      	; 0x37d0 <_ZN6String6concatEm+0x34>
    37d6:	af 01       	movw	r20, r30
    37d8:	41 50       	subi	r20, 0x01	; 1
    37da:	50 40       	sbci	r21, 0x00	; 0
    37dc:	40 1b       	sub	r20, r16
    37de:	51 0b       	sbc	r21, r17
    37e0:	c7 01       	movw	r24, r14
    37e2:	b8 01       	movw	r22, r16
    37e4:	0e 94 b5 1a 	call	0x356a	; 0x356a <_ZN6String6concatEPKcj>
}
    37e8:	2b 96       	adiw	r28, 0x0b	; 11
    37ea:	0f b6       	in	r0, 0x3f	; 63
    37ec:	f8 94       	cli
    37ee:	de bf       	out	0x3e, r29	; 62
    37f0:	0f be       	out	0x3f, r0	; 63
    37f2:	cd bf       	out	0x3d, r28	; 61
    37f4:	cf 91       	pop	r28
    37f6:	df 91       	pop	r29
    37f8:	1f 91       	pop	r17
    37fa:	0f 91       	pop	r16
    37fc:	ff 90       	pop	r15
    37fe:	ef 90       	pop	r14
    3800:	08 95       	ret

00003802 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    3802:	0f 93       	push	r16
    3804:	1f 93       	push	r17
    3806:	8c 01       	movw	r16, r24
    3808:	fb 01       	movw	r30, r22
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    380a:	60 81       	ld	r22, Z
    380c:	71 81       	ldd	r23, Z+1	; 0x01
    380e:	44 81       	ldd	r20, Z+4	; 0x04
    3810:	55 81       	ldd	r21, Z+5	; 0x05
    3812:	0e 94 b5 1a 	call	0x356a	; 0x356a <_ZN6String6concatEPKcj>
    3816:	88 23       	and	r24, r24
    3818:	19 f4       	brne	.+6      	; 0x3820 <_ZplRK15StringSumHelperRK6String+0x1e>
    381a:	c8 01       	movw	r24, r16
    381c:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <_ZN6String10invalidateEv>
	return a;
}
    3820:	c8 01       	movw	r24, r16
    3822:	1f 91       	pop	r17
    3824:	0f 91       	pop	r16
    3826:	08 95       	ret

00003828 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    3828:	0f 93       	push	r16
    382a:	1f 93       	push	r17
    382c:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    382e:	61 15       	cp	r22, r1
    3830:	71 05       	cpc	r23, r1
    3832:	69 f0       	breq	.+26     	; 0x384e <_ZplRK15StringSumHelperPKc+0x26>
    3834:	db 01       	movw	r26, r22
    3836:	0d 90       	ld	r0, X+
    3838:	00 20       	and	r0, r0
    383a:	e9 f7       	brne	.-6      	; 0x3836 <_ZplRK15StringSumHelperPKc+0xe>
    383c:	ad 01       	movw	r20, r26
    383e:	41 50       	subi	r20, 0x01	; 1
    3840:	50 40       	sbci	r21, 0x00	; 0
    3842:	46 1b       	sub	r20, r22
    3844:	57 0b       	sbc	r21, r23
    3846:	0e 94 b5 1a 	call	0x356a	; 0x356a <_ZN6String6concatEPKcj>
    384a:	88 23       	and	r24, r24
    384c:	19 f4       	brne	.+6      	; 0x3854 <_ZplRK15StringSumHelperPKc+0x2c>
    384e:	c8 01       	movw	r24, r16
    3850:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <_ZN6String10invalidateEv>
	return a;
}
    3854:	c8 01       	movw	r24, r16
    3856:	1f 91       	pop	r17
    3858:	0f 91       	pop	r16
    385a:	08 95       	ret

0000385c <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    385c:	0f 93       	push	r16
    385e:	1f 93       	push	r17
    3860:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    3862:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <_ZN6String6concatEc>
    3866:	88 23       	and	r24, r24
    3868:	19 f4       	brne	.+6      	; 0x3870 <_ZplRK15StringSumHelperc+0x14>
    386a:	c8 01       	movw	r24, r16
    386c:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <_ZN6String10invalidateEv>
	return a;
}
    3870:	c8 01       	movw	r24, r16
    3872:	1f 91       	pop	r17
    3874:	0f 91       	pop	r16
    3876:	08 95       	ret

00003878 <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
    3878:	0f 93       	push	r16
    387a:	1f 93       	push	r17
    387c:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    387e:	0e 94 0d 1b 	call	0x361a	; 0x361a <_ZN6String6concatEh>
    3882:	88 23       	and	r24, r24
    3884:	19 f4       	brne	.+6      	; 0x388c <_ZplRK15StringSumHelperh+0x14>
    3886:	c8 01       	movw	r24, r16
    3888:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <_ZN6String10invalidateEv>
	return a;
}
    388c:	c8 01       	movw	r24, r16
    388e:	1f 91       	pop	r17
    3890:	0f 91       	pop	r16
    3892:	08 95       	ret

00003894 <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    3894:	0f 93       	push	r16
    3896:	1f 93       	push	r17
    3898:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    389a:	0e 94 3a 1b 	call	0x3674	; 0x3674 <_ZN6String6concatEi>
    389e:	88 23       	and	r24, r24
    38a0:	19 f4       	brne	.+6      	; 0x38a8 <_ZplRK15StringSumHelperi+0x14>
    38a2:	c8 01       	movw	r24, r16
    38a4:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <_ZN6String10invalidateEv>
	return a;
}
    38a8:	c8 01       	movw	r24, r16
    38aa:	1f 91       	pop	r17
    38ac:	0f 91       	pop	r16
    38ae:	08 95       	ret

000038b0 <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    38b0:	0f 93       	push	r16
    38b2:	1f 93       	push	r17
    38b4:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    38b6:	0e 94 6c 1b 	call	0x36d8	; 0x36d8 <_ZN6String6concatEj>
    38ba:	88 23       	and	r24, r24
    38bc:	19 f4       	brne	.+6      	; 0x38c4 <_ZplRK15StringSumHelperj+0x14>
    38be:	c8 01       	movw	r24, r16
    38c0:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <_ZN6String10invalidateEv>
	return a;
}
    38c4:	c8 01       	movw	r24, r16
    38c6:	1f 91       	pop	r17
    38c8:	0f 91       	pop	r16
    38ca:	08 95       	ret

000038cc <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    38cc:	0f 93       	push	r16
    38ce:	1f 93       	push	r17
    38d0:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    38d2:	0e 94 9b 1b 	call	0x3736	; 0x3736 <_ZN6String6concatEl>
    38d6:	88 23       	and	r24, r24
    38d8:	19 f4       	brne	.+6      	; 0x38e0 <_ZplRK15StringSumHelperl+0x14>
    38da:	c8 01       	movw	r24, r16
    38dc:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <_ZN6String10invalidateEv>
	return a;
}
    38e0:	c8 01       	movw	r24, r16
    38e2:	1f 91       	pop	r17
    38e4:	0f 91       	pop	r16
    38e6:	08 95       	ret

000038e8 <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    38e8:	0f 93       	push	r16
    38ea:	1f 93       	push	r17
    38ec:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    38ee:	0e 94 ce 1b 	call	0x379c	; 0x379c <_ZN6String6concatEm>
    38f2:	88 23       	and	r24, r24
    38f4:	19 f4       	brne	.+6      	; 0x38fc <_ZplRK15StringSumHelperm+0x14>
    38f6:	c8 01       	movw	r24, r16
    38f8:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <_ZN6String10invalidateEv>
	return a;
}
    38fc:	c8 01       	movw	r24, r16
    38fe:	1f 91       	pop	r17
    3900:	0f 91       	pop	r16
    3902:	08 95       	ret

00003904 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    3904:	cf 93       	push	r28
    3906:	df 93       	push	r29
    3908:	fc 01       	movw	r30, r24
    390a:	db 01       	movw	r26, r22
	if (!buffer || !s.buffer) {
    390c:	80 81       	ld	r24, Z
    390e:	91 81       	ldd	r25, Z+1	; 0x01
    3910:	00 97       	sbiw	r24, 0x00	; 0
    3912:	31 f0       	breq	.+12     	; 0x3920 <_ZNK6String9compareToERKS_+0x1c>
    3914:	6d 91       	ld	r22, X+
    3916:	7c 91       	ld	r23, X
    3918:	11 97       	sbiw	r26, 0x01	; 1
    391a:	61 15       	cp	r22, r1
    391c:	71 05       	cpc	r23, r1
    391e:	e9 f4       	brne	.+58     	; 0x395a <_ZNK6String9compareToERKS_+0x56>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    3920:	cd 91       	ld	r28, X+
    3922:	dc 91       	ld	r29, X
    3924:	11 97       	sbiw	r26, 0x01	; 1
    3926:	20 97       	sbiw	r28, 0x00	; 0
    3928:	69 f0       	breq	.+26     	; 0x3944 <_ZNK6String9compareToERKS_+0x40>
    392a:	14 96       	adiw	r26, 0x04	; 4
    392c:	2d 91       	ld	r18, X+
    392e:	3c 91       	ld	r19, X
    3930:	15 97       	sbiw	r26, 0x05	; 5
    3932:	21 15       	cp	r18, r1
    3934:	31 05       	cpc	r19, r1
    3936:	31 f0       	breq	.+12     	; 0x3944 <_ZNK6String9compareToERKS_+0x40>
    3938:	28 81       	ld	r18, Y
    393a:	30 e0       	ldi	r19, 0x00	; 0
    393c:	30 95       	com	r19
    393e:	21 95       	neg	r18
    3940:	3f 4f       	sbci	r19, 0xFF	; 255
    3942:	12 c0       	rjmp	.+36     	; 0x3968 <_ZNK6String9compareToERKS_+0x64>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    3944:	00 97       	sbiw	r24, 0x00	; 0
    3946:	71 f0       	breq	.+28     	; 0x3964 <_ZNK6String9compareToERKS_+0x60>
    3948:	24 81       	ldd	r18, Z+4	; 0x04
    394a:	35 81       	ldd	r19, Z+5	; 0x05
    394c:	21 15       	cp	r18, r1
    394e:	31 05       	cpc	r19, r1
    3950:	49 f0       	breq	.+18     	; 0x3964 <_ZNK6String9compareToERKS_+0x60>
    3952:	fc 01       	movw	r30, r24
    3954:	20 81       	ld	r18, Z
    3956:	30 e0       	ldi	r19, 0x00	; 0
    3958:	07 c0       	rjmp	.+14     	; 0x3968 <_ZNK6String9compareToERKS_+0x64>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    395a:	0e 94 01 2a 	call	0x5402	; 0x5402 <strcmp>
    395e:	28 2f       	mov	r18, r24
    3960:	39 2f       	mov	r19, r25
    3962:	02 c0       	rjmp	.+4      	; 0x3968 <_ZNK6String9compareToERKS_+0x64>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    3968:	c9 01       	movw	r24, r18
    396a:	df 91       	pop	r29
    396c:	cf 91       	pop	r28
    396e:	08 95       	ret

00003970 <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    3970:	fc 01       	movw	r30, r24
    3972:	44 81       	ldd	r20, Z+4	; 0x04
    3974:	55 81       	ldd	r21, Z+5	; 0x05
    3976:	fb 01       	movw	r30, r22
    3978:	24 81       	ldd	r18, Z+4	; 0x04
    397a:	35 81       	ldd	r19, Z+5	; 0x05
    397c:	42 17       	cp	r20, r18
    397e:	53 07       	cpc	r21, r19
    3980:	29 f4       	brne	.+10     	; 0x398c <_ZNK6String6equalsERKS_+0x1c>
    3982:	0e 94 82 1c 	call	0x3904	; 0x3904 <_ZNK6String9compareToERKS_>
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    3986:	21 e0       	ldi	r18, 0x01	; 1
    3988:	00 97       	sbiw	r24, 0x00	; 0
    398a:	09 f0       	breq	.+2      	; 0x398e <_ZNK6String6equalsERKS_+0x1e>
{
	return (len == s2.len && compareTo(s2) == 0);
    398c:	20 e0       	ldi	r18, 0x00	; 0
}
    398e:	82 2f       	mov	r24, r18
    3990:	08 95       	ret

00003992 <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
    3992:	fc 01       	movw	r30, r24
	if (len == 0) return (cstr == NULL || *cstr == 0);
    3994:	84 81       	ldd	r24, Z+4	; 0x04
    3996:	95 81       	ldd	r25, Z+5	; 0x05
    3998:	00 97       	sbiw	r24, 0x00	; 0
    399a:	41 f4       	brne	.+16     	; 0x39ac <_ZNK6String6equalsEPKc+0x1a>
    399c:	61 15       	cp	r22, r1
    399e:	71 05       	cpc	r23, r1
    39a0:	19 f0       	breq	.+6      	; 0x39a8 <_ZNK6String6equalsEPKc+0x16>
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	fb 01       	movw	r30, r22
    39a6:	09 c0       	rjmp	.+18     	; 0x39ba <_ZNK6String6equalsEPKc+0x28>
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    39a8:	81 e0       	ldi	r24, 0x01	; 1
    39aa:	08 95       	ret
    39ac:	01 90       	ld	r0, Z+
    39ae:	f0 81       	ld	r31, Z
    39b0:	e0 2d       	mov	r30, r0
	if (cstr == NULL) return buffer[0] == 0;
    39b2:	61 15       	cp	r22, r1
    39b4:	71 05       	cpc	r23, r1
    39b6:	31 f4       	brne	.+12     	; 0x39c4 <_ZNK6String6equalsEPKc+0x32>
    39b8:	81 e0       	ldi	r24, 0x01	; 1
    39ba:	90 81       	ld	r25, Z
    39bc:	99 23       	and	r25, r25
    39be:	59 f0       	breq	.+22     	; 0x39d6 <_ZNK6String6equalsEPKc+0x44>
    39c0:	80 e0       	ldi	r24, 0x00	; 0
    39c2:	08 95       	ret
	return strcmp(buffer, cstr) == 0;
    39c4:	cf 01       	movw	r24, r30
    39c6:	0e 94 01 2a 	call	0x5402	; 0x5402 <strcmp>
    39ca:	9c 01       	movw	r18, r24
    39cc:	81 e0       	ldi	r24, 0x01	; 1
    39ce:	21 15       	cp	r18, r1
    39d0:	31 05       	cpc	r19, r1
    39d2:	09 f0       	breq	.+2      	; 0x39d6 <_ZNK6String6equalsEPKc+0x44>
    39d4:	80 e0       	ldi	r24, 0x00	; 0
}
    39d6:	08 95       	ret

000039d8 <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    39d8:	0e 94 82 1c 	call	0x3904	; 0x3904 <_ZNK6String9compareToERKS_>
}
    39dc:	89 2f       	mov	r24, r25
    39de:	88 1f       	adc	r24, r24
    39e0:	88 27       	eor	r24, r24
    39e2:	88 1f       	adc	r24, r24
    39e4:	08 95       	ret

000039e6 <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    39e6:	0e 94 82 1c 	call	0x3904	; 0x3904 <_ZNK6String9compareToERKS_>
    39ea:	21 e0       	ldi	r18, 0x01	; 1
    39ec:	18 16       	cp	r1, r24
    39ee:	19 06       	cpc	r1, r25
    39f0:	0c f0       	brlt	.+2      	; 0x39f4 <_ZNK6StringgtERKS_+0xe>
    39f2:	20 e0       	ldi	r18, 0x00	; 0
}
    39f4:	82 2f       	mov	r24, r18
    39f6:	08 95       	ret

000039f8 <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    39f8:	0e 94 82 1c 	call	0x3904	; 0x3904 <_ZNK6String9compareToERKS_>
    39fc:	21 e0       	ldi	r18, 0x01	; 1
    39fe:	18 16       	cp	r1, r24
    3a00:	19 06       	cpc	r1, r25
    3a02:	0c f4       	brge	.+2      	; 0x3a06 <_ZNK6StringleERKS_+0xe>
    3a04:	20 e0       	ldi	r18, 0x00	; 0
}
    3a06:	82 2f       	mov	r24, r18
    3a08:	08 95       	ret

00003a0a <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    3a0a:	0e 94 82 1c 	call	0x3904	; 0x3904 <_ZNK6String9compareToERKS_>
    3a0e:	89 2f       	mov	r24, r25
    3a10:	80 95       	com	r24
}
    3a12:	88 1f       	adc	r24, r24
    3a14:	88 27       	eor	r24, r24
    3a16:	88 1f       	adc	r24, r24
    3a18:	08 95       	ret

00003a1a <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    3a1a:	ef 92       	push	r14
    3a1c:	ff 92       	push	r15
    3a1e:	0f 93       	push	r16
    3a20:	1f 93       	push	r17
    3a22:	cf 93       	push	r28
    3a24:	df 93       	push	r29
    3a26:	fc 01       	movw	r30, r24
    3a28:	db 01       	movw	r26, r22
	if (this == &s2) return 1;
    3a2a:	86 17       	cp	r24, r22
    3a2c:	97 07       	cpc	r25, r23
    3a2e:	29 f1       	breq	.+74     	; 0x3a7a <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
	if (len != s2.len) return 0;
    3a30:	84 81       	ldd	r24, Z+4	; 0x04
    3a32:	95 81       	ldd	r25, Z+5	; 0x05
    3a34:	14 96       	adiw	r26, 0x04	; 4
    3a36:	2d 91       	ld	r18, X+
    3a38:	3c 91       	ld	r19, X
    3a3a:	15 97       	sbiw	r26, 0x05	; 5
    3a3c:	82 17       	cp	r24, r18
    3a3e:	93 07       	cpc	r25, r19
    3a40:	f1 f4       	brne	.+60     	; 0x3a7e <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len == 0) return 1;
    3a42:	00 97       	sbiw	r24, 0x00	; 0
    3a44:	d1 f0       	breq	.+52     	; 0x3a7a <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
    3a46:	00 81       	ld	r16, Z
    3a48:	11 81       	ldd	r17, Z+1	; 0x01
    3a4a:	cd 91       	ld	r28, X+
    3a4c:	dc 91       	ld	r29, X
    3a4e:	11 97       	sbiw	r26, 0x01	; 1
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    3a50:	0f c0       	rjmp	.+30     	; 0x3a70 <_ZNK6String16equalsIgnoreCaseERKS_+0x56>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    3a52:	99 27       	eor	r25, r25
    3a54:	87 fd       	sbrc	r24, 7
    3a56:	90 95       	com	r25
    3a58:	0e 94 cb 29 	call	0x5396	; 0x5396 <tolower>
    3a5c:	7c 01       	movw	r14, r24
    3a5e:	89 91       	ld	r24, Y+
    3a60:	99 27       	eor	r25, r25
    3a62:	87 fd       	sbrc	r24, 7
    3a64:	90 95       	com	r25
    3a66:	0e 94 cb 29 	call	0x5396	; 0x5396 <tolower>
    3a6a:	e8 16       	cp	r14, r24
    3a6c:	f9 06       	cpc	r15, r25
    3a6e:	39 f4       	brne	.+14     	; 0x3a7e <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    3a70:	f8 01       	movw	r30, r16
    3a72:	81 91       	ld	r24, Z+
    3a74:	8f 01       	movw	r16, r30
    3a76:	88 23       	and	r24, r24
    3a78:	61 f7       	brne	.-40     	; 0x3a52 <_ZNK6String16equalsIgnoreCaseERKS_+0x38>

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
    3a7a:	81 e0       	ldi	r24, 0x01	; 1
    3a7c:	01 c0       	rjmp	.+2      	; 0x3a80 <_ZNK6String16equalsIgnoreCaseERKS_+0x66>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return 1;
}
    3a80:	df 91       	pop	r29
    3a82:	cf 91       	pop	r28
    3a84:	1f 91       	pop	r17
    3a86:	0f 91       	pop	r16
    3a88:	ff 90       	pop	r15
    3a8a:	ef 90       	pop	r14
    3a8c:	08 95       	ret

00003a8e <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    3a8e:	fc 01       	movw	r30, r24
    3a90:	db 01       	movw	r26, r22
    3a92:	ca 01       	movw	r24, r20
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    3a94:	14 96       	adiw	r26, 0x04	; 4
    3a96:	4d 91       	ld	r20, X+
    3a98:	5c 91       	ld	r21, X
    3a9a:	15 97       	sbiw	r26, 0x05	; 5
    3a9c:	24 81       	ldd	r18, Z+4	; 0x04
    3a9e:	35 81       	ldd	r19, Z+5	; 0x05
    3aa0:	24 1b       	sub	r18, r20
    3aa2:	35 0b       	sbc	r19, r21
    3aa4:	28 17       	cp	r18, r24
    3aa6:	39 07       	cpc	r19, r25
    3aa8:	a0 f0       	brcs	.+40     	; 0x3ad2 <_ZNK6String10startsWithERKS_j+0x44>
    3aaa:	20 81       	ld	r18, Z
    3aac:	31 81       	ldd	r19, Z+1	; 0x01
    3aae:	21 15       	cp	r18, r1
    3ab0:	31 05       	cpc	r19, r1
    3ab2:	79 f0       	breq	.+30     	; 0x3ad2 <_ZNK6String10startsWithERKS_j+0x44>
    3ab4:	6d 91       	ld	r22, X+
    3ab6:	7c 91       	ld	r23, X
    3ab8:	11 97       	sbiw	r26, 0x01	; 1
    3aba:	61 15       	cp	r22, r1
    3abc:	71 05       	cpc	r23, r1
    3abe:	59 f0       	breq	.+22     	; 0x3ad6 <_ZNK6String10startsWithERKS_j+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    3ac0:	82 0f       	add	r24, r18
    3ac2:	93 1f       	adc	r25, r19
    3ac4:	0e 94 11 2a 	call	0x5422	; 0x5422 <strncmp>
    3ac8:	9c 01       	movw	r18, r24
    3aca:	81 e0       	ldi	r24, 0x01	; 1
    3acc:	21 15       	cp	r18, r1
    3ace:	31 05       	cpc	r19, r1
    3ad0:	19 f0       	breq	.+6      	; 0x3ad8 <_ZNK6String10startsWithERKS_j+0x4a>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    3ad2:	80 e0       	ldi	r24, 0x00	; 0
    3ad4:	08 95       	ret
    3ad6:	80 e0       	ldi	r24, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    3ad8:	08 95       	ret

00003ada <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    3ada:	fc 01       	movw	r30, r24
    3adc:	44 81       	ldd	r20, Z+4	; 0x04
    3ade:	55 81       	ldd	r21, Z+5	; 0x05
    3ae0:	fb 01       	movw	r30, r22
    3ae2:	24 81       	ldd	r18, Z+4	; 0x04
    3ae4:	35 81       	ldd	r19, Z+5	; 0x05
    3ae6:	42 17       	cp	r20, r18
    3ae8:	53 07       	cpc	r21, r19
    3aea:	28 f0       	brcs	.+10     	; 0x3af6 <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
    3aec:	40 e0       	ldi	r20, 0x00	; 0
    3aee:	50 e0       	ldi	r21, 0x00	; 0
    3af0:	0e 94 47 1d 	call	0x3a8e	; 0x3a8e <_ZNK6String10startsWithERKS_j>
    3af4:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    3af6:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
    3af8:	08 95       	ret

00003afa <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    3afa:	fc 01       	movw	r30, r24
    3afc:	db 01       	movw	r26, r22
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    3afe:	84 81       	ldd	r24, Z+4	; 0x04
    3b00:	95 81       	ldd	r25, Z+5	; 0x05
    3b02:	14 96       	adiw	r26, 0x04	; 4
    3b04:	4d 91       	ld	r20, X+
    3b06:	5c 91       	ld	r21, X
    3b08:	15 97       	sbiw	r26, 0x05	; 5
    3b0a:	84 17       	cp	r24, r20
    3b0c:	95 07       	cpc	r25, r21
    3b0e:	b0 f0       	brcs	.+44     	; 0x3b3c <_ZNK6String8endsWithERKS_+0x42>
    3b10:	20 81       	ld	r18, Z
    3b12:	31 81       	ldd	r19, Z+1	; 0x01
    3b14:	21 15       	cp	r18, r1
    3b16:	31 05       	cpc	r19, r1
    3b18:	89 f0       	breq	.+34     	; 0x3b3c <_ZNK6String8endsWithERKS_+0x42>
    3b1a:	6d 91       	ld	r22, X+
    3b1c:	7c 91       	ld	r23, X
    3b1e:	11 97       	sbiw	r26, 0x01	; 1
    3b20:	61 15       	cp	r22, r1
    3b22:	71 05       	cpc	r23, r1
    3b24:	69 f0       	breq	.+26     	; 0x3b40 <_ZNK6String8endsWithERKS_+0x46>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    3b26:	84 1b       	sub	r24, r20
    3b28:	95 0b       	sbc	r25, r21
    3b2a:	82 0f       	add	r24, r18
    3b2c:	93 1f       	adc	r25, r19
    3b2e:	0e 94 01 2a 	call	0x5402	; 0x5402 <strcmp>
    3b32:	9c 01       	movw	r18, r24
    3b34:	81 e0       	ldi	r24, 0x01	; 1
    3b36:	21 15       	cp	r18, r1
    3b38:	31 05       	cpc	r19, r1
    3b3a:	19 f0       	breq	.+6      	; 0x3b42 <_ZNK6String8endsWithERKS_+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    3b3c:	80 e0       	ldi	r24, 0x00	; 0
    3b3e:	08 95       	ret
    3b40:	80 e0       	ldi	r24, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    3b42:	08 95       	ret

00003b44 <_ZN6String9setCharAtEjc>:
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
    3b44:	fc 01       	movw	r30, r24
	if (loc < len) buffer[loc] = c;
    3b46:	84 81       	ldd	r24, Z+4	; 0x04
    3b48:	95 81       	ldd	r25, Z+5	; 0x05
    3b4a:	68 17       	cp	r22, r24
    3b4c:	79 07       	cpc	r23, r25
    3b4e:	30 f4       	brcc	.+12     	; 0x3b5c <_ZN6String9setCharAtEjc+0x18>
    3b50:	01 90       	ld	r0, Z+
    3b52:	f0 81       	ld	r31, Z
    3b54:	e0 2d       	mov	r30, r0
    3b56:	e6 0f       	add	r30, r22
    3b58:	f7 1f       	adc	r31, r23
    3b5a:	40 83       	st	Z, r20
    3b5c:	08 95       	ret

00003b5e <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
    3b5e:	fc 01       	movw	r30, r24
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    3b60:	84 81       	ldd	r24, Z+4	; 0x04
    3b62:	95 81       	ldd	r25, Z+5	; 0x05
    3b64:	68 17       	cp	r22, r24
    3b66:	79 07       	cpc	r23, r25
    3b68:	20 f4       	brcc	.+8      	; 0x3b72 <_ZN6StringixEj+0x14>
    3b6a:	80 81       	ld	r24, Z
    3b6c:	91 81       	ldd	r25, Z+1	; 0x01
    3b6e:	00 97       	sbiw	r24, 0x00	; 0
    3b70:	29 f4       	brne	.+10     	; 0x3b7c <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    3b72:	10 92 53 03 	sts	0x0353, r1
		return dummy_writable_char;
    3b76:	63 e5       	ldi	r22, 0x53	; 83
    3b78:	73 e0       	ldi	r23, 0x03	; 3
    3b7a:	02 c0       	rjmp	.+4      	; 0x3b80 <_ZN6StringixEj+0x22>
	}
	return buffer[index];
    3b7c:	68 0f       	add	r22, r24
    3b7e:	79 1f       	adc	r23, r25
}
    3b80:	cb 01       	movw	r24, r22
    3b82:	08 95       	ret

00003b84 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    3b84:	fc 01       	movw	r30, r24
	if (index >= len || !buffer) return 0;
    3b86:	84 81       	ldd	r24, Z+4	; 0x04
    3b88:	95 81       	ldd	r25, Z+5	; 0x05
    3b8a:	68 17       	cp	r22, r24
    3b8c:	79 07       	cpc	r23, r25
    3b8e:	48 f4       	brcc	.+18     	; 0x3ba2 <_ZNK6StringixEj+0x1e>
    3b90:	80 81       	ld	r24, Z
    3b92:	91 81       	ldd	r25, Z+1	; 0x01
    3b94:	00 97       	sbiw	r24, 0x00	; 0
    3b96:	39 f0       	breq	.+14     	; 0x3ba6 <_ZNK6StringixEj+0x22>
	return buffer[index];
    3b98:	68 0f       	add	r22, r24
    3b9a:	79 1f       	adc	r23, r25
    3b9c:	fb 01       	movw	r30, r22
    3b9e:	80 81       	ld	r24, Z
    3ba0:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    3ba2:	80 e0       	ldi	r24, 0x00	; 0
    3ba4:	08 95       	ret
    3ba6:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    3ba8:	08 95       	ret

00003baa <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    3baa:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <_ZNK6StringixEj>
}
    3bae:	08 95       	ret

00003bb0 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    3bb0:	0f 93       	push	r16
    3bb2:	1f 93       	push	r17
    3bb4:	cf 93       	push	r28
    3bb6:	df 93       	push	r29
    3bb8:	fc 01       	movw	r30, r24
    3bba:	8b 01       	movw	r16, r22
	if (!bufsize || !buf) return;
    3bbc:	41 15       	cp	r20, r1
    3bbe:	51 05       	cpc	r21, r1
    3bc0:	f1 f0       	breq	.+60     	; 0x3bfe <_ZNK6String8getBytesEPhjj+0x4e>
    3bc2:	61 15       	cp	r22, r1
    3bc4:	71 05       	cpc	r23, r1
    3bc6:	d9 f0       	breq	.+54     	; 0x3bfe <_ZNK6String8getBytesEPhjj+0x4e>
	if (index >= len) {
    3bc8:	c4 81       	ldd	r28, Z+4	; 0x04
    3bca:	d5 81       	ldd	r29, Z+5	; 0x05
    3bcc:	2c 17       	cp	r18, r28
    3bce:	3d 07       	cpc	r19, r29
    3bd0:	18 f0       	brcs	.+6      	; 0x3bd8 <_ZNK6String8getBytesEPhjj+0x28>
		buf[0] = 0;
    3bd2:	fb 01       	movw	r30, r22
    3bd4:	10 82       	st	Z, r1
		return;
    3bd6:	13 c0       	rjmp	.+38     	; 0x3bfe <_ZNK6String8getBytesEPhjj+0x4e>
	}
	unsigned int n = bufsize - 1;
    3bd8:	41 50       	subi	r20, 0x01	; 1
    3bda:	50 40       	sbci	r21, 0x00	; 0
	if (n > len - index) n = len - index;
    3bdc:	c2 1b       	sub	r28, r18
    3bde:	d3 0b       	sbc	r29, r19
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    3be0:	4c 17       	cp	r20, r28
    3be2:	5d 07       	cpc	r21, r29
    3be4:	08 f4       	brcc	.+2      	; 0x3be8 <_ZNK6String8getBytesEPhjj+0x38>
    3be6:	ea 01       	movw	r28, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    3be8:	60 81       	ld	r22, Z
    3bea:	71 81       	ldd	r23, Z+1	; 0x01
    3bec:	62 0f       	add	r22, r18
    3bee:	73 1f       	adc	r23, r19
    3bf0:	c8 01       	movw	r24, r16
    3bf2:	ae 01       	movw	r20, r28
    3bf4:	0e 94 1f 2a 	call	0x543e	; 0x543e <strncpy>
	buf[n] = 0;
    3bf8:	c0 0f       	add	r28, r16
    3bfa:	d1 1f       	adc	r29, r17
    3bfc:	18 82       	st	Y, r1
}
    3bfe:	df 91       	pop	r29
    3c00:	cf 91       	pop	r28
    3c02:	1f 91       	pop	r17
    3c04:	0f 91       	pop	r16
    3c06:	08 95       	ret

00003c08 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    3c08:	cf 93       	push	r28
    3c0a:	df 93       	push	r29
    3c0c:	fc 01       	movw	r30, r24
    3c0e:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    3c10:	24 81       	ldd	r18, Z+4	; 0x04
    3c12:	35 81       	ldd	r19, Z+5	; 0x05
    3c14:	42 17       	cp	r20, r18
    3c16:	53 07       	cpc	r21, r19
    3c18:	78 f4       	brcc	.+30     	; 0x3c38 <_ZNK6String7indexOfEcj+0x30>
	const char* temp = strchr(buffer + fromIndex, ch);
    3c1a:	c0 81       	ld	r28, Z
    3c1c:	d1 81       	ldd	r29, Z+1	; 0x01
    3c1e:	77 27       	eor	r23, r23
    3c20:	67 fd       	sbrc	r22, 7
    3c22:	70 95       	com	r23
    3c24:	8c 0f       	add	r24, r28
    3c26:	9d 1f       	adc	r25, r29
    3c28:	0e 94 f6 29 	call	0x53ec	; 0x53ec <strchr>
	if (temp == NULL) return -1;
    3c2c:	00 97       	sbiw	r24, 0x00	; 0
    3c2e:	21 f0       	breq	.+8      	; 0x3c38 <_ZNK6String7indexOfEcj+0x30>
	return temp - buffer;
    3c30:	9c 01       	movw	r18, r24
    3c32:	2c 1b       	sub	r18, r28
    3c34:	3d 0b       	sbc	r19, r29
    3c36:	02 c0       	rjmp	.+4      	; 0x3c3c <_ZNK6String7indexOfEcj+0x34>

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
    3c38:	2f ef       	ldi	r18, 0xFF	; 255
    3c3a:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    3c3c:	c9 01       	movw	r24, r18
    3c3e:	df 91       	pop	r29
    3c40:	cf 91       	pop	r28
    3c42:	08 95       	ret

00003c44 <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    3c44:	40 e0       	ldi	r20, 0x00	; 0
    3c46:	50 e0       	ldi	r21, 0x00	; 0
    3c48:	0e 94 04 1e 	call	0x3c08	; 0x3c08 <_ZNK6String7indexOfEcj>
}
    3c4c:	08 95       	ret

00003c4e <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    3c4e:	cf 93       	push	r28
    3c50:	df 93       	push	r29
    3c52:	fc 01       	movw	r30, r24
    3c54:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    3c56:	24 81       	ldd	r18, Z+4	; 0x04
    3c58:	35 81       	ldd	r19, Z+5	; 0x05
    3c5a:	42 17       	cp	r20, r18
    3c5c:	53 07       	cpc	r21, r19
    3c5e:	78 f4       	brcc	.+30     	; 0x3c7e <_ZNK6String7indexOfERKS_j+0x30>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    3c60:	c0 81       	ld	r28, Z
    3c62:	d1 81       	ldd	r29, Z+1	; 0x01
    3c64:	fb 01       	movw	r30, r22
    3c66:	60 81       	ld	r22, Z
    3c68:	71 81       	ldd	r23, Z+1	; 0x01
    3c6a:	8c 0f       	add	r24, r28
    3c6c:	9d 1f       	adc	r25, r29
    3c6e:	0e 94 39 2a 	call	0x5472	; 0x5472 <strstr>
	if (found == NULL) return -1;
    3c72:	00 97       	sbiw	r24, 0x00	; 0
    3c74:	21 f0       	breq	.+8      	; 0x3c7e <_ZNK6String7indexOfERKS_j+0x30>
	return found - buffer;
    3c76:	9c 01       	movw	r18, r24
    3c78:	2c 1b       	sub	r18, r28
    3c7a:	3d 0b       	sbc	r19, r29
    3c7c:	02 c0       	rjmp	.+4      	; 0x3c82 <_ZNK6String7indexOfERKS_j+0x34>

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
    3c7e:	2f ef       	ldi	r18, 0xFF	; 255
    3c80:	3f ef       	ldi	r19, 0xFF	; 255
	return found - buffer;
}
    3c82:	c9 01       	movw	r24, r18
    3c84:	df 91       	pop	r29
    3c86:	cf 91       	pop	r28
    3c88:	08 95       	ret

00003c8a <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    3c8a:	40 e0       	ldi	r20, 0x00	; 0
    3c8c:	50 e0       	ldi	r21, 0x00	; 0
    3c8e:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <_ZNK6String7indexOfERKS_j>
}
    3c92:	08 95       	ret

00003c94 <_ZNK6String11lastIndexOfEcj>:
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    3c94:	df 92       	push	r13
    3c96:	ef 92       	push	r14
    3c98:	ff 92       	push	r15
    3c9a:	0f 93       	push	r16
    3c9c:	1f 93       	push	r17
    3c9e:	cf 93       	push	r28
    3ca0:	df 93       	push	r29
    3ca2:	ec 01       	movw	r28, r24
	if (fromIndex >= len || fromIndex < 0) return -1;
    3ca4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ca6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ca8:	48 17       	cp	r20, r24
    3caa:	59 07       	cpc	r21, r25
    3cac:	f8 f4       	brcc	.+62     	; 0x3cec <_ZNK6String11lastIndexOfEcj+0x58>
	char tempchar = buffer[fromIndex + 1];
    3cae:	7a 01       	movw	r14, r20
    3cb0:	08 94       	sec
    3cb2:	e1 1c       	adc	r14, r1
    3cb4:	f1 1c       	adc	r15, r1
    3cb6:	e8 81       	ld	r30, Y
    3cb8:	f9 81       	ldd	r31, Y+1	; 0x01
    3cba:	ee 0d       	add	r30, r14
    3cbc:	ff 1d       	adc	r31, r15
    3cbe:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    3cc0:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    3cc2:	08 81       	ld	r16, Y
    3cc4:	19 81       	ldd	r17, Y+1	; 0x01
    3cc6:	77 27       	eor	r23, r23
    3cc8:	67 fd       	sbrc	r22, 7
    3cca:	70 95       	com	r23
    3ccc:	c8 01       	movw	r24, r16
    3cce:	0e 94 2e 2a 	call	0x545c	; 0x545c <strrchr>
	buffer[fromIndex + 1] = tempchar;
    3cd2:	0e 0d       	add	r16, r14
    3cd4:	1f 1d       	adc	r17, r15
    3cd6:	f8 01       	movw	r30, r16
    3cd8:	d0 82       	st	Z, r13
	if (temp == NULL) return -1;
    3cda:	00 97       	sbiw	r24, 0x00	; 0
    3cdc:	39 f0       	breq	.+14     	; 0x3cec <_ZNK6String11lastIndexOfEcj+0x58>
	return temp - buffer;
    3cde:	28 81       	ld	r18, Y
    3ce0:	39 81       	ldd	r19, Y+1	; 0x01
    3ce2:	ac 01       	movw	r20, r24
    3ce4:	42 1b       	sub	r20, r18
    3ce6:	53 0b       	sbc	r21, r19
    3ce8:	9a 01       	movw	r18, r20
    3cea:	02 c0       	rjmp	.+4      	; 0x3cf0 <_ZNK6String11lastIndexOfEcj+0x5c>
	if (fromIndex >= len || fromIndex < 0) return -1;
	char tempchar = buffer[fromIndex + 1];
	buffer[fromIndex + 1] = '\0';
	char* temp = strrchr( buffer, ch );
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
    3cec:	2f ef       	ldi	r18, 0xFF	; 255
    3cee:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    3cf0:	c9 01       	movw	r24, r18
    3cf2:	df 91       	pop	r29
    3cf4:	cf 91       	pop	r28
    3cf6:	1f 91       	pop	r17
    3cf8:	0f 91       	pop	r16
    3cfa:	ff 90       	pop	r15
    3cfc:	ef 90       	pop	r14
    3cfe:	df 90       	pop	r13
    3d00:	08 95       	ret

00003d02 <_ZNK6String11lastIndexOfEc>:
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
    3d02:	fc 01       	movw	r30, r24
    3d04:	44 81       	ldd	r20, Z+4	; 0x04
    3d06:	55 81       	ldd	r21, Z+5	; 0x05
    3d08:	41 50       	subi	r20, 0x01	; 1
    3d0a:	50 40       	sbci	r21, 0x00	; 0
    3d0c:	0e 94 4a 1e 	call	0x3c94	; 0x3c94 <_ZNK6String11lastIndexOfEcj>
}
    3d10:	08 95       	ret

00003d12 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    3d12:	af 92       	push	r10
    3d14:	bf 92       	push	r11
    3d16:	cf 92       	push	r12
    3d18:	df 92       	push	r13
    3d1a:	ef 92       	push	r14
    3d1c:	ff 92       	push	r15
    3d1e:	0f 93       	push	r16
    3d20:	1f 93       	push	r17
    3d22:	cf 93       	push	r28
    3d24:	df 93       	push	r29
    3d26:	fc 01       	movw	r30, r24
    3d28:	6b 01       	movw	r12, r22
    3d2a:	8a 01       	movw	r16, r20
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    3d2c:	db 01       	movw	r26, r22
    3d2e:	14 96       	adiw	r26, 0x04	; 4
    3d30:	2d 91       	ld	r18, X+
    3d32:	3c 91       	ld	r19, X
    3d34:	15 97       	sbiw	r26, 0x05	; 5
    3d36:	21 15       	cp	r18, r1
    3d38:	31 05       	cpc	r19, r1
    3d3a:	51 f1       	breq	.+84     	; 0x3d90 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    3d3c:	84 81       	ldd	r24, Z+4	; 0x04
    3d3e:	95 81       	ldd	r25, Z+5	; 0x05
    3d40:	00 97       	sbiw	r24, 0x00	; 0
    3d42:	31 f1       	breq	.+76     	; 0x3d90 <_ZNK6String11lastIndexOfERKS_j+0x7e>
    3d44:	82 17       	cp	r24, r18
    3d46:	93 07       	cpc	r25, r19
    3d48:	18 f1       	brcs	.+70     	; 0x3d90 <_ZNK6String11lastIndexOfERKS_j+0x7e>
	if (fromIndex >= len) fromIndex = len - 1;
    3d4a:	48 17       	cp	r20, r24
    3d4c:	59 07       	cpc	r21, r25
    3d4e:	18 f0       	brcs	.+6      	; 0x3d56 <_ZNK6String11lastIndexOfERKS_j+0x44>
    3d50:	8c 01       	movw	r16, r24
    3d52:	01 50       	subi	r16, 0x01	; 1
    3d54:	10 40       	sbci	r17, 0x00	; 0
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3d56:	e0 80       	ld	r14, Z
    3d58:	f1 80       	ldd	r15, Z+1	; 0x01
    3d5a:	c7 01       	movw	r24, r14

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    3d5c:	cf ef       	ldi	r28, 0xFF	; 255
    3d5e:	df ef       	ldi	r29, 0xFF	; 255
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3d60:	57 01       	movw	r10, r14
    3d62:	a0 0e       	add	r10, r16
    3d64:	b1 1e       	adc	r11, r17
    3d66:	10 c0       	rjmp	.+32     	; 0x3d88 <_ZNK6String11lastIndexOfERKS_j+0x76>
		p = strstr(p, s2.buffer);
    3d68:	f6 01       	movw	r30, r12
    3d6a:	60 81       	ld	r22, Z
    3d6c:	71 81       	ldd	r23, Z+1	; 0x01
    3d6e:	0e 94 39 2a 	call	0x5472	; 0x5472 <strstr>
		if (!p) break;
    3d72:	00 97       	sbiw	r24, 0x00	; 0
    3d74:	79 f0       	breq	.+30     	; 0x3d94 <_ZNK6String11lastIndexOfERKS_j+0x82>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    3d76:	9c 01       	movw	r18, r24
    3d78:	2e 19       	sub	r18, r14
    3d7a:	3f 09       	sbc	r19, r15
    3d7c:	02 17       	cp	r16, r18
    3d7e:	13 07       	cpc	r17, r19
    3d80:	08 f4       	brcc	.+2      	; 0x3d84 <_ZNK6String11lastIndexOfERKS_j+0x72>
    3d82:	9e 01       	movw	r18, r28
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3d84:	01 96       	adiw	r24, 0x01	; 1
    3d86:	e9 01       	movw	r28, r18
    3d88:	a8 16       	cp	r10, r24
    3d8a:	b9 06       	cpc	r11, r25
    3d8c:	68 f7       	brcc	.-38     	; 0x3d68 <_ZNK6String11lastIndexOfERKS_j+0x56>
    3d8e:	02 c0       	rjmp	.+4      	; 0x3d94 <_ZNK6String11lastIndexOfERKS_j+0x82>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    3d90:	cf ef       	ldi	r28, 0xFF	; 255
    3d92:	df ef       	ldi	r29, 0xFF	; 255
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    3d94:	ce 01       	movw	r24, r28
    3d96:	df 91       	pop	r29
    3d98:	cf 91       	pop	r28
    3d9a:	1f 91       	pop	r17
    3d9c:	0f 91       	pop	r16
    3d9e:	ff 90       	pop	r15
    3da0:	ef 90       	pop	r14
    3da2:	df 90       	pop	r13
    3da4:	cf 90       	pop	r12
    3da6:	bf 90       	pop	r11
    3da8:	af 90       	pop	r10
    3daa:	08 95       	ret

00003dac <_ZNK6String11lastIndexOfERKS_>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    3dac:	fc 01       	movw	r30, r24
    3dae:	44 81       	ldd	r20, Z+4	; 0x04
    3db0:	55 81       	ldd	r21, Z+5	; 0x05
    3db2:	fb 01       	movw	r30, r22
    3db4:	24 81       	ldd	r18, Z+4	; 0x04
    3db6:	35 81       	ldd	r19, Z+5	; 0x05
    3db8:	42 1b       	sub	r20, r18
    3dba:	53 0b       	sbc	r21, r19
    3dbc:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <_ZNK6String11lastIndexOfERKS_j>
}
    3dc0:	08 95       	ret

00003dc2 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    3dc2:	af 92       	push	r10
    3dc4:	bf 92       	push	r11
    3dc6:	cf 92       	push	r12
    3dc8:	df 92       	push	r13
    3dca:	ef 92       	push	r14
    3dcc:	ff 92       	push	r15
    3dce:	0f 93       	push	r16
    3dd0:	1f 93       	push	r17
    3dd2:	cf 93       	push	r28
    3dd4:	df 93       	push	r29
    3dd6:	f8 2e       	mov	r15, r24
    3dd8:	e9 2e       	mov	r14, r25
    3dda:	6b 01       	movw	r12, r22
    3ddc:	8a 01       	movw	r16, r20
    3dde:	e9 01       	movw	r28, r18
	if (left > right) {
    3de0:	24 17       	cp	r18, r20
    3de2:	35 07       	cpc	r19, r21
    3de4:	48 f4       	brcc	.+18     	; 0x3df8 <_ZNK6String9substringEjj+0x36>
    3de6:	34 2f       	mov	r19, r20
    3de8:	21 2f       	mov	r18, r17
    3dea:	8e 01       	movw	r16, r28
    3dec:	c9 01       	movw	r24, r18
    3dee:	a9 2e       	mov	r10, r25
    3df0:	e5 01       	movw	r28, r10
    3df2:	5e 01       	movw	r10, r28
    3df4:	b2 2e       	mov	r11, r18
    3df6:	e5 01       	movw	r28, r10
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    3df8:	8f 2d       	mov	r24, r15
    3dfa:	9e 2d       	mov	r25, r14
    3dfc:	68 ee       	ldi	r22, 0xE8	; 232
    3dfe:	71 e0       	ldi	r23, 0x01	; 1
    3e00:	0e 94 50 19 	call	0x32a0	; 0x32a0 <_ZN6StringC1EPKc>
	if (left > len) return out;
    3e04:	d6 01       	movw	r26, r12
    3e06:	14 96       	adiw	r26, 0x04	; 4
    3e08:	8d 91       	ld	r24, X+
    3e0a:	9c 91       	ld	r25, X
    3e0c:	15 97       	sbiw	r26, 0x05	; 5
    3e0e:	80 17       	cp	r24, r16
    3e10:	91 07       	cpc	r25, r17
    3e12:	d8 f0       	brcs	.+54     	; 0x3e4a <_ZNK6String9substringEjj+0x88>
    3e14:	8c 17       	cp	r24, r28
    3e16:	9d 07       	cpc	r25, r29
    3e18:	08 f4       	brcc	.+2      	; 0x3e1c <_ZNK6String9substringEjj+0x5a>
    3e1a:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    3e1c:	d6 01       	movw	r26, r12
    3e1e:	ed 91       	ld	r30, X+
    3e20:	fc 91       	ld	r31, X
    3e22:	11 97       	sbiw	r26, 0x01	; 1
    3e24:	ec 0f       	add	r30, r28
    3e26:	fd 1f       	adc	r31, r29
    3e28:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    3e2a:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    3e2c:	6d 91       	ld	r22, X+
    3e2e:	7c 91       	ld	r23, X
    3e30:	60 0f       	add	r22, r16
    3e32:	71 1f       	adc	r23, r17
    3e34:	8f 2d       	mov	r24, r15
    3e36:	9e 2d       	mov	r25, r14
    3e38:	0e 94 91 19 	call	0x3322	; 0x3322 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    3e3c:	d6 01       	movw	r26, r12
    3e3e:	ed 91       	ld	r30, X+
    3e40:	fc 91       	ld	r31, X
    3e42:	11 97       	sbiw	r26, 0x01	; 1
    3e44:	ec 0f       	add	r30, r28
    3e46:	fd 1f       	adc	r31, r29
    3e48:	b0 82       	st	Z, r11
	return out;
}
    3e4a:	8f 2d       	mov	r24, r15
    3e4c:	9e 2d       	mov	r25, r14
    3e4e:	df 91       	pop	r29
    3e50:	cf 91       	pop	r28
    3e52:	1f 91       	pop	r17
    3e54:	0f 91       	pop	r16
    3e56:	ff 90       	pop	r15
    3e58:	ef 90       	pop	r14
    3e5a:	df 90       	pop	r13
    3e5c:	cf 90       	pop	r12
    3e5e:	bf 90       	pop	r11
    3e60:	af 90       	pop	r10
    3e62:	08 95       	ret

00003e64 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    3e64:	cf 93       	push	r28
    3e66:	df 93       	push	r29
    3e68:	ec 01       	movw	r28, r24
	return substring(left, len);
    3e6a:	fb 01       	movw	r30, r22
    3e6c:	24 81       	ldd	r18, Z+4	; 0x04
    3e6e:	35 81       	ldd	r19, Z+5	; 0x05
    3e70:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <_ZNK6String9substringEjj>
}
    3e74:	ce 01       	movw	r24, r28
    3e76:	df 91       	pop	r29
    3e78:	cf 91       	pop	r28
    3e7a:	08 95       	ret

00003e7c <_ZN6String7replaceEcc>:
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    3e7c:	dc 01       	movw	r26, r24
    3e7e:	ed 91       	ld	r30, X+
    3e80:	fc 91       	ld	r31, X
    3e82:	11 97       	sbiw	r26, 0x01	; 1
    3e84:	30 97       	sbiw	r30, 0x00	; 0
    3e86:	29 f4       	brne	.+10     	; 0x3e92 <_ZN6String7replaceEcc+0x16>
    3e88:	08 95       	ret
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    3e8a:	86 17       	cp	r24, r22
    3e8c:	09 f4       	brne	.+2      	; 0x3e90 <_ZN6String7replaceEcc+0x14>
    3e8e:	40 83       	st	Z, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3e90:	31 96       	adiw	r30, 0x01	; 1
    3e92:	80 81       	ld	r24, Z
    3e94:	88 23       	and	r24, r24
    3e96:	c9 f7       	brne	.-14     	; 0x3e8a <_ZN6String7replaceEcc+0xe>
    3e98:	08 95       	ret

00003e9a <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    3e9a:	2f 92       	push	r2
    3e9c:	3f 92       	push	r3
    3e9e:	4f 92       	push	r4
    3ea0:	5f 92       	push	r5
    3ea2:	6f 92       	push	r6
    3ea4:	7f 92       	push	r7
    3ea6:	8f 92       	push	r8
    3ea8:	9f 92       	push	r9
    3eaa:	af 92       	push	r10
    3eac:	bf 92       	push	r11
    3eae:	cf 92       	push	r12
    3eb0:	df 92       	push	r13
    3eb2:	ef 92       	push	r14
    3eb4:	ff 92       	push	r15
    3eb6:	0f 93       	push	r16
    3eb8:	1f 93       	push	r17
    3eba:	cf 93       	push	r28
    3ebc:	df 93       	push	r29
    3ebe:	7c 01       	movw	r14, r24
    3ec0:	2b 01       	movw	r4, r22
    3ec2:	6a 01       	movw	r12, r20
	if (len == 0 || find.len == 0) return;
    3ec4:	dc 01       	movw	r26, r24
    3ec6:	14 96       	adiw	r26, 0x04	; 4
    3ec8:	6d 90       	ld	r6, X+
    3eca:	7c 90       	ld	r7, X
    3ecc:	15 97       	sbiw	r26, 0x05	; 5
    3ece:	61 14       	cp	r6, r1
    3ed0:	71 04       	cpc	r7, r1
    3ed2:	09 f4       	brne	.+2      	; 0x3ed6 <_ZN6String7replaceERKS_S1_+0x3c>
    3ed4:	d9 c0       	rjmp	.+434    	; 0x4088 <_ZN6String7replaceERKS_S1_+0x1ee>
    3ed6:	fb 01       	movw	r30, r22
    3ed8:	84 80       	ldd	r8, Z+4	; 0x04
    3eda:	95 80       	ldd	r9, Z+5	; 0x05
    3edc:	81 14       	cp	r8, r1
    3ede:	91 04       	cpc	r9, r1
    3ee0:	09 f4       	brne	.+2      	; 0x3ee4 <_ZN6String7replaceERKS_S1_+0x4a>
    3ee2:	d2 c0       	rjmp	.+420    	; 0x4088 <_ZN6String7replaceERKS_S1_+0x1ee>
	int diff = replace.len - find.len;
    3ee4:	da 01       	movw	r26, r20
    3ee6:	14 96       	adiw	r26, 0x04	; 4
    3ee8:	ad 90       	ld	r10, X+
    3eea:	bc 90       	ld	r11, X
    3eec:	15 97       	sbiw	r26, 0x05	; 5
    3eee:	a8 18       	sub	r10, r8
    3ef0:	b9 08       	sbc	r11, r9
	char *readFrom = buffer;
    3ef2:	fc 01       	movw	r30, r24
    3ef4:	00 81       	ld	r16, Z
    3ef6:	11 81       	ldd	r17, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    3ef8:	a1 14       	cp	r10, r1
    3efa:	b1 04       	cpc	r11, r1
    3efc:	f1 f4       	brne	.+60     	; 0x3f3a <_ZN6String7replaceERKS_S1_+0xa0>
    3efe:	13 c0       	rjmp	.+38     	; 0x3f26 <_ZN6String7replaceERKS_S1_+0x8c>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    3f00:	d6 01       	movw	r26, r12
    3f02:	6c 91       	ld	r22, X
    3f04:	11 96       	adiw	r26, 0x01	; 1
    3f06:	7c 91       	ld	r23, X
    3f08:	11 97       	sbiw	r26, 0x01	; 1
    3f0a:	14 96       	adiw	r26, 0x04	; 4
    3f0c:	4d 91       	ld	r20, X+
    3f0e:	5c 91       	ld	r21, X
    3f10:	15 97       	sbiw	r26, 0x05	; 5
    3f12:	ce 01       	movw	r24, r28
    3f14:	0e 94 db 29 	call	0x53b6	; 0x53b6 <memcpy>
			readFrom = foundAt + replace.len;
    3f18:	d6 01       	movw	r26, r12
    3f1a:	14 96       	adiw	r26, 0x04	; 4
    3f1c:	0d 91       	ld	r16, X+
    3f1e:	1c 91       	ld	r17, X
    3f20:	15 97       	sbiw	r26, 0x05	; 5
    3f22:	0c 0f       	add	r16, r28
    3f24:	1d 1f       	adc	r17, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3f26:	f2 01       	movw	r30, r4
    3f28:	60 81       	ld	r22, Z
    3f2a:	71 81       	ldd	r23, Z+1	; 0x01
    3f2c:	c8 01       	movw	r24, r16
    3f2e:	0e 94 39 2a 	call	0x5472	; 0x5472 <strstr>
    3f32:	ec 01       	movw	r28, r24
    3f34:	00 97       	sbiw	r24, 0x00	; 0
    3f36:	21 f7       	brne	.-56     	; 0x3f00 <_ZN6String7replaceERKS_S1_+0x66>
    3f38:	a7 c0       	rjmp	.+334    	; 0x4088 <_ZN6String7replaceERKS_S1_+0x1ee>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    3f3a:	b7 fc       	sbrc	r11, 7
    3f3c:	02 c0       	rjmp	.+4      	; 0x3f42 <_ZN6String7replaceERKS_S1_+0xa8>
    3f3e:	e3 01       	movw	r28, r6
    3f40:	42 c0       	rjmp	.+132    	; 0x3fc6 <_ZN6String7replaceERKS_S1_+0x12c>
    3f42:	48 01       	movw	r8, r16
    3f44:	2d c0       	rjmp	.+90     	; 0x3fa0 <_ZN6String7replaceERKS_S1_+0x106>
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    3f46:	e3 01       	movw	r28, r6
    3f48:	c0 1b       	sub	r28, r16
    3f4a:	d1 0b       	sbc	r29, r17
			memcpy(writeTo, readFrom, n);
    3f4c:	c4 01       	movw	r24, r8
    3f4e:	b8 01       	movw	r22, r16
    3f50:	ae 01       	movw	r20, r28
    3f52:	0e 94 db 29 	call	0x53b6	; 0x53b6 <memcpy>
			writeTo += n;
    3f56:	c8 0d       	add	r28, r8
    3f58:	d9 1d       	adc	r29, r9
			memcpy(writeTo, replace.buffer, replace.len);
    3f5a:	d6 01       	movw	r26, r12
    3f5c:	6c 91       	ld	r22, X
    3f5e:	11 96       	adiw	r26, 0x01	; 1
    3f60:	7c 91       	ld	r23, X
    3f62:	11 97       	sbiw	r26, 0x01	; 1
    3f64:	14 96       	adiw	r26, 0x04	; 4
    3f66:	4d 91       	ld	r20, X+
    3f68:	5c 91       	ld	r21, X
    3f6a:	15 97       	sbiw	r26, 0x05	; 5
    3f6c:	ce 01       	movw	r24, r28
    3f6e:	0e 94 db 29 	call	0x53b6	; 0x53b6 <memcpy>
			writeTo += replace.len;
    3f72:	d6 01       	movw	r26, r12
    3f74:	14 96       	adiw	r26, 0x04	; 4
    3f76:	8d 90       	ld	r8, X+
    3f78:	9c 90       	ld	r9, X
    3f7a:	15 97       	sbiw	r26, 0x05	; 5
    3f7c:	8c 0e       	add	r8, r28
    3f7e:	9d 1e       	adc	r9, r29
			readFrom = foundAt + find.len;
    3f80:	f2 01       	movw	r30, r4
    3f82:	04 81       	ldd	r16, Z+4	; 0x04
    3f84:	15 81       	ldd	r17, Z+5	; 0x05
    3f86:	06 0d       	add	r16, r6
    3f88:	17 1d       	adc	r17, r7
			len += diff;
    3f8a:	d7 01       	movw	r26, r14
    3f8c:	14 96       	adiw	r26, 0x04	; 4
    3f8e:	8d 91       	ld	r24, X+
    3f90:	9c 91       	ld	r25, X
    3f92:	15 97       	sbiw	r26, 0x05	; 5
    3f94:	8a 0d       	add	r24, r10
    3f96:	9b 1d       	adc	r25, r11
    3f98:	15 96       	adiw	r26, 0x05	; 5
    3f9a:	9c 93       	st	X, r25
    3f9c:	8e 93       	st	-X, r24
    3f9e:	14 97       	sbiw	r26, 0x04	; 4
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3fa0:	f2 01       	movw	r30, r4
    3fa2:	60 81       	ld	r22, Z
    3fa4:	71 81       	ldd	r23, Z+1	; 0x01
    3fa6:	c8 01       	movw	r24, r16
    3fa8:	0e 94 39 2a 	call	0x5472	; 0x5472 <strstr>
    3fac:	3c 01       	movw	r6, r24
    3fae:	00 97       	sbiw	r24, 0x00	; 0
    3fb0:	51 f6       	brne	.-108    	; 0x3f46 <_ZN6String7replaceERKS_S1_+0xac>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    3fb2:	c4 01       	movw	r24, r8
    3fb4:	b8 01       	movw	r22, r16
    3fb6:	0e 94 0a 2a 	call	0x5414	; 0x5414 <strcpy>
    3fba:	66 c0       	rjmp	.+204    	; 0x4088 <_ZN6String7replaceERKS_S1_+0x1ee>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    3fbc:	8c 01       	movw	r16, r24
    3fbe:	08 0d       	add	r16, r8
    3fc0:	19 1d       	adc	r17, r9
			size += diff;
    3fc2:	ca 0d       	add	r28, r10
    3fc4:	db 1d       	adc	r29, r11
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3fc6:	d2 01       	movw	r26, r4
    3fc8:	6d 91       	ld	r22, X+
    3fca:	7c 91       	ld	r23, X
    3fcc:	c8 01       	movw	r24, r16
    3fce:	0e 94 39 2a 	call	0x5472	; 0x5472 <strstr>
    3fd2:	00 97       	sbiw	r24, 0x00	; 0
    3fd4:	99 f7       	brne	.-26     	; 0x3fbc <_ZN6String7replaceERKS_S1_+0x122>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    3fd6:	c6 15       	cp	r28, r6
    3fd8:	d7 05       	cpc	r29, r7
    3fda:	09 f4       	brne	.+2      	; 0x3fde <_ZN6String7replaceERKS_S1_+0x144>
    3fdc:	55 c0       	rjmp	.+170    	; 0x4088 <_ZN6String7replaceERKS_S1_+0x1ee>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    3fde:	f7 01       	movw	r30, r14
    3fe0:	82 81       	ldd	r24, Z+2	; 0x02
    3fe2:	93 81       	ldd	r25, Z+3	; 0x03
    3fe4:	8c 17       	cp	r24, r28
    3fe6:	9d 07       	cpc	r25, r29
    3fe8:	08 f0       	brcs	.+2      	; 0x3fec <_ZN6String7replaceERKS_S1_+0x152>
    3fea:	45 c0       	rjmp	.+138    	; 0x4076 <_ZN6String7replaceERKS_S1_+0x1dc>
    3fec:	c7 01       	movw	r24, r14
    3fee:	be 01       	movw	r22, r28
    3ff0:	0e 94 f6 18 	call	0x31ec	; 0x31ec <_ZN6String12changeBufferEj>
    3ff4:	88 23       	and	r24, r24
    3ff6:	09 f4       	brne	.+2      	; 0x3ffa <_ZN6String7replaceERKS_S1_+0x160>
    3ff8:	47 c0       	rjmp	.+142    	; 0x4088 <_ZN6String7replaceERKS_S1_+0x1ee>
    3ffa:	3d c0       	rjmp	.+122    	; 0x4076 <_ZN6String7replaceERKS_S1_+0x1dc>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    3ffc:	c7 01       	movw	r24, r14
    3ffe:	b2 01       	movw	r22, r4
    4000:	a9 01       	movw	r20, r18
    4002:	0e 94 89 1e 	call	0x3d12	; 0x3d12 <_ZNK6String11lastIndexOfERKS_j>
    4006:	ec 01       	movw	r28, r24
    4008:	97 fd       	sbrc	r25, 7
    400a:	3e c0       	rjmp	.+124    	; 0x4088 <_ZN6String7replaceERKS_S1_+0x1ee>
			readFrom = buffer + index + find.len;
    400c:	d7 01       	movw	r26, r14
    400e:	6d 91       	ld	r22, X+
    4010:	7c 91       	ld	r23, X
    4012:	11 97       	sbiw	r26, 0x01	; 1
    4014:	f2 01       	movw	r30, r4
    4016:	84 81       	ldd	r24, Z+4	; 0x04
    4018:	95 81       	ldd	r25, Z+5	; 0x05
    401a:	8c 0f       	add	r24, r28
    401c:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    401e:	68 0f       	add	r22, r24
    4020:	79 1f       	adc	r23, r25
    4022:	14 96       	adiw	r26, 0x04	; 4
    4024:	4d 91       	ld	r20, X+
    4026:	5c 91       	ld	r21, X
    4028:	15 97       	sbiw	r26, 0x05	; 5
    402a:	48 1b       	sub	r20, r24
    402c:	59 0b       	sbc	r21, r25
    402e:	cb 01       	movw	r24, r22
    4030:	8a 0d       	add	r24, r10
    4032:	9b 1d       	adc	r25, r11
    4034:	0e 94 e4 29 	call	0x53c8	; 0x53c8 <memmove>
			len += diff;
    4038:	d7 01       	movw	r26, r14
    403a:	14 96       	adiw	r26, 0x04	; 4
    403c:	8d 91       	ld	r24, X+
    403e:	9c 91       	ld	r25, X
    4040:	15 97       	sbiw	r26, 0x05	; 5
    4042:	8a 0d       	add	r24, r10
    4044:	9b 1d       	adc	r25, r11
    4046:	15 96       	adiw	r26, 0x05	; 5
    4048:	9c 93       	st	X, r25
    404a:	8e 93       	st	-X, r24
    404c:	14 97       	sbiw	r26, 0x04	; 4
			buffer[len] = 0;
    404e:	ed 91       	ld	r30, X+
    4050:	fc 91       	ld	r31, X
    4052:	11 97       	sbiw	r26, 0x01	; 1
    4054:	e8 0f       	add	r30, r24
    4056:	f9 1f       	adc	r31, r25
    4058:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    405a:	2d 91       	ld	r18, X+
    405c:	3c 91       	ld	r19, X
    405e:	2c 0f       	add	r18, r28
    4060:	3d 1f       	adc	r19, r29
    4062:	f6 01       	movw	r30, r12
    4064:	60 81       	ld	r22, Z
    4066:	71 81       	ldd	r23, Z+1	; 0x01
    4068:	44 81       	ldd	r20, Z+4	; 0x04
    406a:	55 81       	ldd	r21, Z+5	; 0x05
    406c:	c9 01       	movw	r24, r18
    406e:	0e 94 db 29 	call	0x53b6	; 0x53b6 <memcpy>
			index--;
    4072:	9e 01       	movw	r18, r28
    4074:	05 c0       	rjmp	.+10     	; 0x4080 <_ZN6String7replaceERKS_S1_+0x1e6>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    4076:	d7 01       	movw	r26, r14
    4078:	14 96       	adiw	r26, 0x04	; 4
    407a:	2d 91       	ld	r18, X+
    407c:	3c 91       	ld	r19, X
    407e:	15 97       	sbiw	r26, 0x05	; 5
    4080:	21 50       	subi	r18, 0x01	; 1
    4082:	30 40       	sbci	r19, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    4084:	37 ff       	sbrs	r19, 7
    4086:	ba cf       	rjmp	.-140    	; 0x3ffc <_ZN6String7replaceERKS_S1_+0x162>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    4088:	df 91       	pop	r29
    408a:	cf 91       	pop	r28
    408c:	1f 91       	pop	r17
    408e:	0f 91       	pop	r16
    4090:	ff 90       	pop	r15
    4092:	ef 90       	pop	r14
    4094:	df 90       	pop	r13
    4096:	cf 90       	pop	r12
    4098:	bf 90       	pop	r11
    409a:	af 90       	pop	r10
    409c:	9f 90       	pop	r9
    409e:	8f 90       	pop	r8
    40a0:	7f 90       	pop	r7
    40a2:	6f 90       	pop	r6
    40a4:	5f 90       	pop	r5
    40a6:	4f 90       	pop	r4
    40a8:	3f 90       	pop	r3
    40aa:	2f 90       	pop	r2
    40ac:	08 95       	ret

000040ae <_ZN6String11toLowerCaseEv>:

void String::toLowerCase(void)
{
    40ae:	cf 93       	push	r28
    40b0:	df 93       	push	r29
	if (!buffer) return;
    40b2:	fc 01       	movw	r30, r24
    40b4:	c0 81       	ld	r28, Z
    40b6:	d1 81       	ldd	r29, Z+1	; 0x01
    40b8:	20 97       	sbiw	r28, 0x00	; 0
    40ba:	39 f4       	brne	.+14     	; 0x40ca <_ZN6String11toLowerCaseEv+0x1c>
    40bc:	09 c0       	rjmp	.+18     	; 0x40d0 <_ZN6String11toLowerCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
    40be:	99 27       	eor	r25, r25
    40c0:	87 fd       	sbrc	r24, 7
    40c2:	90 95       	com	r25
    40c4:	0e 94 cb 29 	call	0x5396	; 0x5396 <tolower>
    40c8:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    40ca:	88 81       	ld	r24, Y
    40cc:	88 23       	and	r24, r24
    40ce:	b9 f7       	brne	.-18     	; 0x40be <_ZN6String11toLowerCaseEv+0x10>
		*p = tolower(*p);
	}
}
    40d0:	df 91       	pop	r29
    40d2:	cf 91       	pop	r28
    40d4:	08 95       	ret

000040d6 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    40d6:	cf 93       	push	r28
    40d8:	df 93       	push	r29
	if (!buffer) return;
    40da:	fc 01       	movw	r30, r24
    40dc:	c0 81       	ld	r28, Z
    40de:	d1 81       	ldd	r29, Z+1	; 0x01
    40e0:	20 97       	sbiw	r28, 0x00	; 0
    40e2:	39 f4       	brne	.+14     	; 0x40f2 <_ZN6String11toUpperCaseEv+0x1c>
    40e4:	09 c0       	rjmp	.+18     	; 0x40f8 <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    40e6:	99 27       	eor	r25, r25
    40e8:	87 fd       	sbrc	r24, 7
    40ea:	90 95       	com	r25
    40ec:	0e 94 d3 29 	call	0x53a6	; 0x53a6 <toupper>
    40f0:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    40f2:	88 81       	ld	r24, Y
    40f4:	88 23       	and	r24, r24
    40f6:	b9 f7       	brne	.-18     	; 0x40e6 <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    40f8:	df 91       	pop	r29
    40fa:	cf 91       	pop	r28
    40fc:	08 95       	ret

000040fe <_ZN6String4trimEv>:

void String::trim(void)
{
    40fe:	af 92       	push	r10
    4100:	bf 92       	push	r11
    4102:	cf 92       	push	r12
    4104:	df 92       	push	r13
    4106:	ef 92       	push	r14
    4108:	ff 92       	push	r15
    410a:	0f 93       	push	r16
    410c:	1f 93       	push	r17
    410e:	cf 93       	push	r28
    4110:	df 93       	push	r29
    4112:	6c 01       	movw	r12, r24
	if (!buffer || len == 0) return;
    4114:	dc 01       	movw	r26, r24
    4116:	ed 90       	ld	r14, X+
    4118:	fc 90       	ld	r15, X
    411a:	11 97       	sbiw	r26, 0x01	; 1
    411c:	e1 14       	cp	r14, r1
    411e:	f1 04       	cpc	r15, r1
    4120:	09 f4       	brne	.+2      	; 0x4124 <_ZN6String4trimEv+0x26>
    4122:	43 c0       	rjmp	.+134    	; 0x41aa <_ZN6String4trimEv+0xac>
    4124:	14 96       	adiw	r26, 0x04	; 4
    4126:	ad 90       	ld	r10, X+
    4128:	bc 90       	ld	r11, X
    412a:	15 97       	sbiw	r26, 0x05	; 5
    412c:	a1 14       	cp	r10, r1
    412e:	b1 04       	cpc	r11, r1
    4130:	e1 f1       	breq	.+120    	; 0x41aa <_ZN6String4trimEv+0xac>
    4132:	87 01       	movw	r16, r14
    4134:	e8 01       	movw	r28, r16
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    4136:	88 81       	ld	r24, Y
    4138:	0f 5f       	subi	r16, 0xFF	; 255
    413a:	1f 4f       	sbci	r17, 0xFF	; 255
    413c:	99 27       	eor	r25, r25
    413e:	87 fd       	sbrc	r24, 7
    4140:	90 95       	com	r25
    4142:	0e 94 c3 29 	call	0x5386	; 0x5386 <isspace>
    4146:	00 97       	sbiw	r24, 0x00	; 0
    4148:	a9 f7       	brne	.-22     	; 0x4134 <_ZN6String4trimEv+0x36>
	char *end = buffer + len - 1;
    414a:	85 01       	movw	r16, r10
    414c:	01 50       	subi	r16, 0x01	; 1
    414e:	10 40       	sbci	r17, 0x00	; 0
    4150:	0e 0d       	add	r16, r14
    4152:	1f 1d       	adc	r17, r15
	while (isspace(*end) && end >= begin) end--;
    4154:	f8 01       	movw	r30, r16
    4156:	80 81       	ld	r24, Z
    4158:	99 27       	eor	r25, r25
    415a:	87 fd       	sbrc	r24, 7
    415c:	90 95       	com	r25
    415e:	0e 94 c3 29 	call	0x5386	; 0x5386 <isspace>
    4162:	00 97       	sbiw	r24, 0x00	; 0
    4164:	31 f0       	breq	.+12     	; 0x4172 <_ZN6String4trimEv+0x74>
    4166:	0c 17       	cp	r16, r28
    4168:	1d 07       	cpc	r17, r29
    416a:	18 f0       	brcs	.+6      	; 0x4172 <_ZN6String4trimEv+0x74>
    416c:	01 50       	subi	r16, 0x01	; 1
    416e:	10 40       	sbci	r17, 0x00	; 0
    4170:	f1 cf       	rjmp	.-30     	; 0x4154 <_ZN6String4trimEv+0x56>
	len = end + 1 - begin;
    4172:	0f 5f       	subi	r16, 0xFF	; 255
    4174:	1f 4f       	sbci	r17, 0xFF	; 255
    4176:	0c 1b       	sub	r16, r28
    4178:	1d 0b       	sbc	r17, r29
    417a:	d6 01       	movw	r26, r12
    417c:	15 96       	adiw	r26, 0x05	; 5
    417e:	1c 93       	st	X, r17
    4180:	0e 93       	st	-X, r16
    4182:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    4184:	ec 16       	cp	r14, r28
    4186:	fd 06       	cpc	r15, r29
    4188:	28 f4       	brcc	.+10     	; 0x4194 <_ZN6String4trimEv+0x96>
    418a:	c7 01       	movw	r24, r14
    418c:	be 01       	movw	r22, r28
    418e:	a8 01       	movw	r20, r16
    4190:	0e 94 db 29 	call	0x53b6	; 0x53b6 <memcpy>
	buffer[len] = 0;
    4194:	d6 01       	movw	r26, r12
    4196:	ed 91       	ld	r30, X+
    4198:	fc 91       	ld	r31, X
    419a:	11 97       	sbiw	r26, 0x01	; 1
    419c:	14 96       	adiw	r26, 0x04	; 4
    419e:	8d 91       	ld	r24, X+
    41a0:	9c 91       	ld	r25, X
    41a2:	15 97       	sbiw	r26, 0x05	; 5
    41a4:	e8 0f       	add	r30, r24
    41a6:	f9 1f       	adc	r31, r25
    41a8:	10 82       	st	Z, r1
}
    41aa:	df 91       	pop	r29
    41ac:	cf 91       	pop	r28
    41ae:	1f 91       	pop	r17
    41b0:	0f 91       	pop	r16
    41b2:	ff 90       	pop	r15
    41b4:	ef 90       	pop	r14
    41b6:	df 90       	pop	r13
    41b8:	cf 90       	pop	r12
    41ba:	bf 90       	pop	r11
    41bc:	af 90       	pop	r10
    41be:	08 95       	ret

000041c0 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    41c0:	fc 01       	movw	r30, r24
    41c2:	80 81       	ld	r24, Z
    41c4:	91 81       	ldd	r25, Z+1	; 0x01
    41c6:	00 97       	sbiw	r24, 0x00	; 0
    41c8:	29 f0       	breq	.+10     	; 0x41d4 <_ZNK6String5toIntEv+0x14>
    41ca:	0e 94 9c 29 	call	0x5338	; 0x5338 <atol>
    41ce:	9b 01       	movw	r18, r22
    41d0:	ac 01       	movw	r20, r24
    41d2:	03 c0       	rjmp	.+6      	; 0x41da <_ZNK6String5toIntEv+0x1a>
	return 0;
    41d4:	20 e0       	ldi	r18, 0x00	; 0
    41d6:	30 e0       	ldi	r19, 0x00	; 0
    41d8:	a9 01       	movw	r20, r18
}
    41da:	b9 01       	movw	r22, r18
    41dc:	ca 01       	movw	r24, r20
    41de:	08 95       	ret

000041e0 <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    41e0:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <malloc>
}
    41e4:	08 95       	ret

000041e6 <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    41e6:	0e 94 38 28 	call	0x5070	; 0x5070 <free>
} 
    41ea:	08 95       	ret

000041ec <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    41ec:	21 e0       	ldi	r18, 0x01	; 1
    41ee:	30 e0       	ldi	r19, 0x00	; 0
    41f0:	fc 01       	movw	r30, r24
    41f2:	80 81       	ld	r24, Z
    41f4:	88 23       	and	r24, r24
    41f6:	11 f0       	breq	.+4      	; 0x41fc <__cxa_guard_acquire+0x10>
    41f8:	20 e0       	ldi	r18, 0x00	; 0
    41fa:	30 e0       	ldi	r19, 0x00	; 0
    41fc:	c9 01       	movw	r24, r18
    41fe:	08 95       	ret

00004200 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    4200:	21 e0       	ldi	r18, 0x01	; 1
    4202:	fc 01       	movw	r30, r24
    4204:	20 83       	st	Z, r18
    4206:	08 95       	ret

00004208 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    4208:	08 95       	ret

0000420a <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    420a:	08 95       	ret

0000420c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    420c:	cf 92       	push	r12
    420e:	df 92       	push	r13
    4210:	ef 92       	push	r14
    4212:	ff 92       	push	r15
    4214:	0f 93       	push	r16
    4216:	1f 93       	push	r17
    4218:	cf 93       	push	r28
    421a:	df 93       	push	r29
    421c:	6c 01       	movw	r12, r24
    421e:	7b 01       	movw	r14, r22
    4220:	8a 01       	movw	r16, r20
  size_t n = 0;
    4222:	c0 e0       	ldi	r28, 0x00	; 0
    4224:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    4226:	0f c0       	rjmp	.+30     	; 0x4246 <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
    4228:	d7 01       	movw	r26, r14
    422a:	6d 91       	ld	r22, X+
    422c:	7d 01       	movw	r14, r26
    422e:	d6 01       	movw	r26, r12
    4230:	ed 91       	ld	r30, X+
    4232:	fc 91       	ld	r31, X
    4234:	01 90       	ld	r0, Z+
    4236:	f0 81       	ld	r31, Z
    4238:	e0 2d       	mov	r30, r0
    423a:	c6 01       	movw	r24, r12
    423c:	09 95       	icall
    423e:	c8 0f       	add	r28, r24
    4240:	d9 1f       	adc	r29, r25
    4242:	01 50       	subi	r16, 0x01	; 1
    4244:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    4246:	01 15       	cp	r16, r1
    4248:	11 05       	cpc	r17, r1
    424a:	71 f7       	brne	.-36     	; 0x4228 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    424c:	ce 01       	movw	r24, r28
    424e:	df 91       	pop	r29
    4250:	cf 91       	pop	r28
    4252:	1f 91       	pop	r17
    4254:	0f 91       	pop	r16
    4256:	ff 90       	pop	r15
    4258:	ef 90       	pop	r14
    425a:	df 90       	pop	r13
    425c:	cf 90       	pop	r12
    425e:	08 95       	ret

00004260 <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    4260:	db 01       	movw	r26, r22
    4262:	0d 90       	ld	r0, X+
    4264:	00 20       	and	r0, r0
    4266:	e9 f7       	brne	.-6      	; 0x4262 <_ZN5Print5writeEPKc+0x2>
    4268:	ad 01       	movw	r20, r26
    426a:	41 50       	subi	r20, 0x01	; 1
    426c:	50 40       	sbci	r21, 0x00	; 0
    426e:	46 1b       	sub	r20, r22
    4270:	57 0b       	sbc	r21, r23
    4272:	dc 01       	movw	r26, r24
    4274:	ed 91       	ld	r30, X+
    4276:	fc 91       	ld	r31, X
    4278:	02 80       	ldd	r0, Z+2	; 0x02
    427a:	f3 81       	ldd	r31, Z+3	; 0x03
    427c:	e0 2d       	mov	r30, r0
    427e:	09 95       	icall
    4280:	08 95       	ret

00004282 <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    4282:	ef 92       	push	r14
    4284:	ff 92       	push	r15
    4286:	0f 93       	push	r16
    4288:	1f 93       	push	r17
    428a:	cf 93       	push	r28
    428c:	df 93       	push	r29
    428e:	7c 01       	movw	r14, r24
  const prog_char *p = (const prog_char *)ifsh;
    4290:	06 2f       	mov	r16, r22
    4292:	17 2f       	mov	r17, r23
  size_t n = 0;
    4294:	c0 e0       	ldi	r28, 0x00	; 0
    4296:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
    4298:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    429a:	0f 5f       	subi	r16, 0xFF	; 255
    429c:	1f 4f       	sbci	r17, 0xFF	; 255
    429e:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    42a0:	66 23       	and	r22, r22
    42a2:	51 f0       	breq	.+20     	; 0x42b8 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    42a4:	f7 01       	movw	r30, r14
    42a6:	a0 81       	ld	r26, Z
    42a8:	b1 81       	ldd	r27, Z+1	; 0x01
    42aa:	ed 91       	ld	r30, X+
    42ac:	fc 91       	ld	r31, X
    42ae:	c7 01       	movw	r24, r14
    42b0:	09 95       	icall
    42b2:	c8 0f       	add	r28, r24
    42b4:	d9 1f       	adc	r29, r25

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
  size_t n = 0;
  while (1) {
    42b6:	f0 cf       	rjmp	.-32     	; 0x4298 <_ZN5Print5printEPK19__FlashStringHelper+0x16>
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    42b8:	ce 01       	movw	r24, r28
    42ba:	df 91       	pop	r29
    42bc:	cf 91       	pop	r28
    42be:	1f 91       	pop	r17
    42c0:	0f 91       	pop	r16
    42c2:	ff 90       	pop	r15
    42c4:	ef 90       	pop	r14
    42c6:	08 95       	ret

000042c8 <_ZN5Print5printERK6String>:

size_t Print::print(const String &s)
{
    42c8:	af 92       	push	r10
    42ca:	bf 92       	push	r11
    42cc:	cf 92       	push	r12
    42ce:	df 92       	push	r13
    42d0:	ef 92       	push	r14
    42d2:	ff 92       	push	r15
    42d4:	0f 93       	push	r16
    42d6:	1f 93       	push	r17
    42d8:	cf 93       	push	r28
    42da:	df 93       	push	r29
    42dc:	7c 01       	movw	r14, r24
    42de:	6b 01       	movw	r12, r22
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    42e0:	c0 e0       	ldi	r28, 0x00	; 0
    42e2:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    42e4:	00 e0       	ldi	r16, 0x00	; 0
    42e6:	10 e0       	ldi	r17, 0x00	; 0
  for (uint16_t i = 0; i < s.length(); i++) {
    42e8:	10 c0       	rjmp	.+32     	; 0x430a <_ZN5Print5printERK6String+0x42>
    n += write(s[i]);
    42ea:	d7 01       	movw	r26, r14
    42ec:	ed 91       	ld	r30, X+
    42ee:	fc 91       	ld	r31, X
    42f0:	a0 80       	ld	r10, Z
    42f2:	b1 80       	ldd	r11, Z+1	; 0x01
    42f4:	c6 01       	movw	r24, r12
    42f6:	be 01       	movw	r22, r28
    42f8:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <_ZNK6StringixEj>
    42fc:	68 2f       	mov	r22, r24
    42fe:	c7 01       	movw	r24, r14
    4300:	f5 01       	movw	r30, r10
    4302:	09 95       	icall
    4304:	08 0f       	add	r16, r24
    4306:	19 1f       	adc	r17, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    4308:	21 96       	adiw	r28, 0x01	; 1
    430a:	f6 01       	movw	r30, r12
    430c:	84 81       	ldd	r24, Z+4	; 0x04
    430e:	95 81       	ldd	r25, Z+5	; 0x05
    4310:	c8 17       	cp	r28, r24
    4312:	d9 07       	cpc	r29, r25
    4314:	50 f3       	brcs	.-44     	; 0x42ea <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    4316:	c8 01       	movw	r24, r16
    4318:	df 91       	pop	r29
    431a:	cf 91       	pop	r28
    431c:	1f 91       	pop	r17
    431e:	0f 91       	pop	r16
    4320:	ff 90       	pop	r15
    4322:	ef 90       	pop	r14
    4324:	df 90       	pop	r13
    4326:	cf 90       	pop	r12
    4328:	bf 90       	pop	r11
    432a:	af 90       	pop	r10
    432c:	08 95       	ret

0000432e <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
  return write(str);
    432e:	0e 94 30 21 	call	0x4260	; 0x4260 <_ZN5Print5writeEPKc>
}
    4332:	08 95       	ret

00004334 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    4334:	dc 01       	movw	r26, r24
    4336:	ed 91       	ld	r30, X+
    4338:	fc 91       	ld	r31, X
    433a:	01 90       	ld	r0, Z+
    433c:	f0 81       	ld	r31, Z
    433e:	e0 2d       	mov	r30, r0
    4340:	09 95       	icall
}
    4342:	08 95       	ret

00004344 <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
{
    4344:	9c 01       	movw	r18, r24
    4346:	cb 01       	movw	r24, r22
  return x.printTo(*this);
    4348:	db 01       	movw	r26, r22
    434a:	ed 91       	ld	r30, X+
    434c:	fc 91       	ld	r31, X
    434e:	01 90       	ld	r0, Z+
    4350:	f0 81       	ld	r31, Z
    4352:	e0 2d       	mov	r30, r0
    4354:	b9 01       	movw	r22, r18
    4356:	09 95       	icall
}
    4358:	08 95       	ret

0000435a <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
    435a:	0f 93       	push	r16
    435c:	1f 93       	push	r17
    435e:	cf 93       	push	r28
    4360:	df 93       	push	r29
    4362:	ec 01       	movw	r28, r24
  size_t n = print('\r');
    4364:	6d e0       	ldi	r22, 0x0D	; 13
    4366:	0e 94 9a 21 	call	0x4334	; 0x4334 <_ZN5Print5printEc>
    436a:	8c 01       	movw	r16, r24
  n += print('\n');
    436c:	ce 01       	movw	r24, r28
    436e:	6a e0       	ldi	r22, 0x0A	; 10
    4370:	0e 94 9a 21 	call	0x4334	; 0x4334 <_ZN5Print5printEc>
    4374:	08 0f       	add	r16, r24
    4376:	19 1f       	adc	r17, r25
  return n;
}
    4378:	c8 01       	movw	r24, r16
    437a:	df 91       	pop	r29
    437c:	cf 91       	pop	r28
    437e:	1f 91       	pop	r17
    4380:	0f 91       	pop	r16
    4382:	08 95       	ret

00004384 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    4384:	0f 93       	push	r16
    4386:	1f 93       	push	r17
    4388:	cf 93       	push	r28
    438a:	df 93       	push	r29
    438c:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
    438e:	0e 94 41 21 	call	0x4282	; 0x4282 <_ZN5Print5printEPK19__FlashStringHelper>
    4392:	8c 01       	movw	r16, r24
  n += println();
    4394:	ce 01       	movw	r24, r28
    4396:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print7printlnEv>
    439a:	08 0f       	add	r16, r24
    439c:	19 1f       	adc	r17, r25
  return n;
}
    439e:	c8 01       	movw	r24, r16
    43a0:	df 91       	pop	r29
    43a2:	cf 91       	pop	r28
    43a4:	1f 91       	pop	r17
    43a6:	0f 91       	pop	r16
    43a8:	08 95       	ret

000043aa <_ZN5Print7printlnERK6String>:
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
{
    43aa:	0f 93       	push	r16
    43ac:	1f 93       	push	r17
    43ae:	cf 93       	push	r28
    43b0:	df 93       	push	r29
    43b2:	ec 01       	movw	r28, r24
  size_t n = print(s);
    43b4:	0e 94 64 21 	call	0x42c8	; 0x42c8 <_ZN5Print5printERK6String>
    43b8:	8c 01       	movw	r16, r24
  n += println();
    43ba:	ce 01       	movw	r24, r28
    43bc:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print7printlnEv>
    43c0:	08 0f       	add	r16, r24
    43c2:	19 1f       	adc	r17, r25
  return n;
}
    43c4:	c8 01       	movw	r24, r16
    43c6:	df 91       	pop	r29
    43c8:	cf 91       	pop	r28
    43ca:	1f 91       	pop	r17
    43cc:	0f 91       	pop	r16
    43ce:	08 95       	ret

000043d0 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    43d0:	0f 93       	push	r16
    43d2:	1f 93       	push	r17
    43d4:	cf 93       	push	r28
    43d6:	df 93       	push	r29
    43d8:	ec 01       	movw	r28, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    43da:	0e 94 30 21 	call	0x4260	; 0x4260 <_ZN5Print5writeEPKc>
    43de:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    43e0:	ce 01       	movw	r24, r28
    43e2:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print7printlnEv>
    43e6:	08 0f       	add	r16, r24
    43e8:	19 1f       	adc	r17, r25
  return n;
}
    43ea:	c8 01       	movw	r24, r16
    43ec:	df 91       	pop	r29
    43ee:	cf 91       	pop	r28
    43f0:	1f 91       	pop	r17
    43f2:	0f 91       	pop	r16
    43f4:	08 95       	ret

000043f6 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    43f6:	0f 93       	push	r16
    43f8:	1f 93       	push	r17
    43fa:	cf 93       	push	r28
    43fc:	df 93       	push	r29
    43fe:	ec 01       	movw	r28, r24
  size_t n = print(c);
    4400:	0e 94 9a 21 	call	0x4334	; 0x4334 <_ZN5Print5printEc>
    4404:	8c 01       	movw	r16, r24
  n += println();
    4406:	ce 01       	movw	r24, r28
    4408:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print7printlnEv>
    440c:	08 0f       	add	r16, r24
    440e:	19 1f       	adc	r17, r25
  return n;
}
    4410:	c8 01       	movw	r24, r16
    4412:	df 91       	pop	r29
    4414:	cf 91       	pop	r28
    4416:	1f 91       	pop	r17
    4418:	0f 91       	pop	r16
    441a:	08 95       	ret

0000441c <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
{
    441c:	0f 93       	push	r16
    441e:	1f 93       	push	r17
    4420:	cf 93       	push	r28
    4422:	df 93       	push	r29
    4424:	ec 01       	movw	r28, r24
  size_t n = print(x);
    4426:	0e 94 a2 21 	call	0x4344	; 0x4344 <_ZN5Print5printERK9Printable>
    442a:	8c 01       	movw	r16, r24
  n += println();
    442c:	ce 01       	movw	r24, r28
    442e:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print7printlnEv>
    4432:	08 0f       	add	r16, r24
    4434:	19 1f       	adc	r17, r25
  return n;
}
    4436:	c8 01       	movw	r24, r16
    4438:	df 91       	pop	r29
    443a:	cf 91       	pop	r28
    443c:	1f 91       	pop	r17
    443e:	0f 91       	pop	r16
    4440:	08 95       	ret

00004442 <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    4442:	8f 92       	push	r8
    4444:	9f 92       	push	r9
    4446:	af 92       	push	r10
    4448:	bf 92       	push	r11
    444a:	cf 92       	push	r12
    444c:	df 92       	push	r13
    444e:	ef 92       	push	r14
    4450:	ff 92       	push	r15
    4452:	0f 93       	push	r16
    4454:	1f 93       	push	r17
    4456:	df 93       	push	r29
    4458:	cf 93       	push	r28
    445a:	cd b7       	in	r28, 0x3d	; 61
    445c:	de b7       	in	r29, 0x3e	; 62
    445e:	a1 97       	sbiw	r28, 0x21	; 33
    4460:	0f b6       	in	r0, 0x3f	; 63
    4462:	f8 94       	cli
    4464:	de bf       	out	0x3e, r29	; 62
    4466:	0f be       	out	0x3f, r0	; 63
    4468:	cd bf       	out	0x3d, r28	; 61
    446a:	6c 01       	movw	r12, r24
    446c:	04 2f       	mov	r16, r20
    446e:	e5 2f       	mov	r30, r21
    4470:	cb 01       	movw	r24, r22
    4472:	12 2f       	mov	r17, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    4474:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    4476:	22 30       	cpi	r18, 0x02	; 2
    4478:	08 f4       	brcc	.+2      	; 0x447c <_ZN5Print11printNumberEmh+0x3a>
    447a:	1a e0       	ldi	r17, 0x0A	; 10
    447c:	21 e2       	ldi	r18, 0x21	; 33
    447e:	e2 2e       	mov	r14, r18
    4480:	f1 2c       	mov	r15, r1
    4482:	ec 0e       	add	r14, r28
    4484:	fd 1e       	adc	r15, r29

  do {
    unsigned long m = n;
    n /= base;
    4486:	81 2e       	mov	r8, r17
    4488:	99 24       	eor	r9, r9
    448a:	aa 24       	eor	r10, r10
    448c:	bb 24       	eor	r11, r11
    448e:	03 c0       	rjmp	.+6      	; 0x4496 <_ZN5Print11printNumberEmh+0x54>
    4490:	02 2f       	mov	r16, r18
    4492:	e3 2f       	mov	r30, r19
    4494:	ca 01       	movw	r24, r20
    4496:	60 2f       	mov	r22, r16
    4498:	7e 2f       	mov	r23, r30
    449a:	a5 01       	movw	r20, r10
    449c:	94 01       	movw	r18, r8
    449e:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__udivmodsi4>
    char c = m - base * n;
    44a2:	12 9f       	mul	r17, r18
    44a4:	80 2d       	mov	r24, r0
    44a6:	11 24       	eor	r1, r1
    44a8:	08 1b       	sub	r16, r24
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    44aa:	08 94       	sec
    44ac:	e1 08       	sbc	r14, r1
    44ae:	f1 08       	sbc	r15, r1
    44b0:	0a 30       	cpi	r16, 0x0A	; 10
    44b2:	14 f4       	brge	.+4      	; 0x44b8 <_ZN5Print11printNumberEmh+0x76>
    44b4:	00 5d       	subi	r16, 0xD0	; 208
    44b6:	01 c0       	rjmp	.+2      	; 0x44ba <_ZN5Print11printNumberEmh+0x78>
    44b8:	09 5c       	subi	r16, 0xC9	; 201
    44ba:	f7 01       	movw	r30, r14
    44bc:	00 83       	st	Z, r16
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    44be:	21 15       	cp	r18, r1
    44c0:	31 05       	cpc	r19, r1
    44c2:	41 05       	cpc	r20, r1
    44c4:	51 05       	cpc	r21, r1
    44c6:	21 f7       	brne	.-56     	; 0x4490 <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    44c8:	c6 01       	movw	r24, r12
    44ca:	b7 01       	movw	r22, r14
    44cc:	0e 94 30 21 	call	0x4260	; 0x4260 <_ZN5Print5writeEPKc>
}
    44d0:	a1 96       	adiw	r28, 0x21	; 33
    44d2:	0f b6       	in	r0, 0x3f	; 63
    44d4:	f8 94       	cli
    44d6:	de bf       	out	0x3e, r29	; 62
    44d8:	0f be       	out	0x3f, r0	; 63
    44da:	cd bf       	out	0x3d, r28	; 61
    44dc:	cf 91       	pop	r28
    44de:	df 91       	pop	r29
    44e0:	1f 91       	pop	r17
    44e2:	0f 91       	pop	r16
    44e4:	ff 90       	pop	r15
    44e6:	ef 90       	pop	r14
    44e8:	df 90       	pop	r13
    44ea:	cf 90       	pop	r12
    44ec:	bf 90       	pop	r11
    44ee:	af 90       	pop	r10
    44f0:	9f 90       	pop	r9
    44f2:	8f 90       	pop	r8
    44f4:	08 95       	ret

000044f6 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    44f6:	21 15       	cp	r18, r1
    44f8:	31 05       	cpc	r19, r1
    44fa:	49 f4       	brne	.+18     	; 0x450e <_ZN5Print5printEmi+0x18>
    44fc:	dc 01       	movw	r26, r24
    44fe:	ed 91       	ld	r30, X+
    4500:	fc 91       	ld	r31, X
    4502:	01 90       	ld	r0, Z+
    4504:	f0 81       	ld	r31, Z
    4506:	e0 2d       	mov	r30, r0
    4508:	64 2f       	mov	r22, r20
    450a:	09 95       	icall
    450c:	08 95       	ret
  else return printNumber(n, base);
    450e:	0e 94 21 22 	call	0x4442	; 0x4442 <_ZN5Print11printNumberEmh>
}
    4512:	08 95       	ret

00004514 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    4514:	0f 93       	push	r16
    4516:	1f 93       	push	r17
    4518:	cf 93       	push	r28
    451a:	df 93       	push	r29
    451c:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    451e:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_ZN5Print5printEmi>
    4522:	8c 01       	movw	r16, r24
  n += println();
    4524:	ce 01       	movw	r24, r28
    4526:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print7printlnEv>
    452a:	08 0f       	add	r16, r24
    452c:	19 1f       	adc	r17, r25
  return n;
}
    452e:	c8 01       	movw	r24, r16
    4530:	df 91       	pop	r29
    4532:	cf 91       	pop	r28
    4534:	1f 91       	pop	r17
    4536:	0f 91       	pop	r16
    4538:	08 95       	ret

0000453a <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    453a:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    453c:	ab 01       	movw	r20, r22
    453e:	60 e0       	ldi	r22, 0x00	; 0
    4540:	70 e0       	ldi	r23, 0x00	; 0
    4542:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_ZN5Print5printEmi>
}
    4546:	08 95       	ret

00004548 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    4548:	0f 93       	push	r16
    454a:	1f 93       	push	r17
    454c:	cf 93       	push	r28
    454e:	df 93       	push	r29
    4550:	ec 01       	movw	r28, r24
    4552:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    4554:	ab 01       	movw	r20, r22
    4556:	60 e0       	ldi	r22, 0x00	; 0
    4558:	70 e0       	ldi	r23, 0x00	; 0
    455a:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_ZN5Print5printEmi>
    455e:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    4560:	ce 01       	movw	r24, r28
    4562:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print7printlnEv>
    4566:	08 0f       	add	r16, r24
    4568:	19 1f       	adc	r17, r25
  return n;
}
    456a:	c8 01       	movw	r24, r16
    456c:	df 91       	pop	r29
    456e:	cf 91       	pop	r28
    4570:	1f 91       	pop	r17
    4572:	0f 91       	pop	r16
    4574:	08 95       	ret

00004576 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    4576:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    4578:	46 2f       	mov	r20, r22
    457a:	50 e0       	ldi	r21, 0x00	; 0
    457c:	60 e0       	ldi	r22, 0x00	; 0
    457e:	70 e0       	ldi	r23, 0x00	; 0
    4580:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_ZN5Print5printEmi>
}
    4584:	08 95       	ret

00004586 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    4586:	0f 93       	push	r16
    4588:	1f 93       	push	r17
    458a:	cf 93       	push	r28
    458c:	df 93       	push	r29
    458e:	ec 01       	movw	r28, r24
    4590:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    4592:	46 2f       	mov	r20, r22
    4594:	50 e0       	ldi	r21, 0x00	; 0
    4596:	60 e0       	ldi	r22, 0x00	; 0
    4598:	70 e0       	ldi	r23, 0x00	; 0
    459a:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_ZN5Print5printEmi>
    459e:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    45a0:	ce 01       	movw	r24, r28
    45a2:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print7printlnEv>
    45a6:	08 0f       	add	r16, r24
    45a8:	19 1f       	adc	r17, r25
  return n;
}
    45aa:	c8 01       	movw	r24, r16
    45ac:	df 91       	pop	r29
    45ae:	cf 91       	pop	r28
    45b0:	1f 91       	pop	r17
    45b2:	0f 91       	pop	r16
    45b4:	08 95       	ret

000045b6 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    45b6:	cf 92       	push	r12
    45b8:	df 92       	push	r13
    45ba:	ef 92       	push	r14
    45bc:	ff 92       	push	r15
    45be:	0f 93       	push	r16
    45c0:	1f 93       	push	r17
    45c2:	cf 93       	push	r28
    45c4:	df 93       	push	r29
    45c6:	ec 01       	movw	r28, r24
    45c8:	7a 01       	movw	r14, r20
    45ca:	8b 01       	movw	r16, r22
  if (base == 0) {
    45cc:	21 15       	cp	r18, r1
    45ce:	31 05       	cpc	r19, r1
    45d0:	41 f4       	brne	.+16     	; 0x45e2 <_ZN5Print5printEli+0x2c>
    return write(n);
    45d2:	e8 81       	ld	r30, Y
    45d4:	f9 81       	ldd	r31, Y+1	; 0x01
    45d6:	01 90       	ld	r0, Z+
    45d8:	f0 81       	ld	r31, Z
    45da:	e0 2d       	mov	r30, r0
    45dc:	64 2f       	mov	r22, r20
    45de:	09 95       	icall
    45e0:	1a c0       	rjmp	.+52     	; 0x4616 <_ZN5Print5printEli+0x60>
  } else if (base == 10) {
    45e2:	2a 30       	cpi	r18, 0x0A	; 10
    45e4:	31 05       	cpc	r19, r1
    45e6:	a9 f4       	brne	.+42     	; 0x4612 <_ZN5Print5printEli+0x5c>
    if (n < 0) {
    45e8:	77 ff       	sbrs	r23, 7
    45ea:	12 c0       	rjmp	.+36     	; 0x4610 <_ZN5Print5printEli+0x5a>
      int t = print('-');
    45ec:	6d e2       	ldi	r22, 0x2D	; 45
    45ee:	0e 94 9a 21 	call	0x4334	; 0x4334 <_ZN5Print5printEc>
    45f2:	6c 01       	movw	r12, r24
      n = -n;
    45f4:	44 27       	eor	r20, r20
    45f6:	55 27       	eor	r21, r21
    45f8:	ba 01       	movw	r22, r20
    45fa:	4e 19       	sub	r20, r14
    45fc:	5f 09       	sbc	r21, r15
    45fe:	60 0b       	sbc	r22, r16
    4600:	71 0b       	sbc	r23, r17
      return printNumber(n, 10) + t;
    4602:	ce 01       	movw	r24, r28
    4604:	2a e0       	ldi	r18, 0x0A	; 10
    4606:	0e 94 21 22 	call	0x4442	; 0x4442 <_ZN5Print11printNumberEmh>
    460a:	c8 0e       	add	r12, r24
    460c:	d9 1e       	adc	r13, r25
    460e:	04 c0       	rjmp	.+8      	; 0x4618 <_ZN5Print5printEli+0x62>
    }
    return printNumber(n, 10);
    4610:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    4612:	0e 94 21 22 	call	0x4442	; 0x4442 <_ZN5Print11printNumberEmh>
    4616:	6c 01       	movw	r12, r24
  }
}
    4618:	c6 01       	movw	r24, r12
    461a:	df 91       	pop	r29
    461c:	cf 91       	pop	r28
    461e:	1f 91       	pop	r17
    4620:	0f 91       	pop	r16
    4622:	ff 90       	pop	r15
    4624:	ef 90       	pop	r14
    4626:	df 90       	pop	r13
    4628:	cf 90       	pop	r12
    462a:	08 95       	ret

0000462c <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    462c:	0f 93       	push	r16
    462e:	1f 93       	push	r17
    4630:	cf 93       	push	r28
    4632:	df 93       	push	r29
    4634:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    4636:	0e 94 db 22 	call	0x45b6	; 0x45b6 <_ZN5Print5printEli>
    463a:	8c 01       	movw	r16, r24
  n += println();
    463c:	ce 01       	movw	r24, r28
    463e:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print7printlnEv>
    4642:	08 0f       	add	r16, r24
    4644:	19 1f       	adc	r17, r25
  return n;
}
    4646:	c8 01       	movw	r24, r16
    4648:	df 91       	pop	r29
    464a:	cf 91       	pop	r28
    464c:	1f 91       	pop	r17
    464e:	0f 91       	pop	r16
    4650:	08 95       	ret

00004652 <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    4652:	9a 01       	movw	r18, r20
  return print((long) n, base);
    4654:	fb 01       	movw	r30, r22
    4656:	af 01       	movw	r20, r30
    4658:	66 27       	eor	r22, r22
    465a:	57 fd       	sbrc	r21, 7
    465c:	60 95       	com	r22
    465e:	76 2f       	mov	r23, r22
    4660:	0e 94 db 22 	call	0x45b6	; 0x45b6 <_ZN5Print5printEli>
}
    4664:	08 95       	ret

00004666 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    4666:	0f 93       	push	r16
    4668:	1f 93       	push	r17
    466a:	cf 93       	push	r28
    466c:	df 93       	push	r29
    466e:	ec 01       	movw	r28, r24
    4670:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    4672:	cb 01       	movw	r24, r22
    4674:	ac 01       	movw	r20, r24
    4676:	66 27       	eor	r22, r22
    4678:	57 fd       	sbrc	r21, 7
    467a:	60 95       	com	r22
    467c:	76 2f       	mov	r23, r22
    467e:	ce 01       	movw	r24, r28
    4680:	0e 94 db 22 	call	0x45b6	; 0x45b6 <_ZN5Print5printEli>
    4684:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    4686:	ce 01       	movw	r24, r28
    4688:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print7printlnEv>
    468c:	08 0f       	add	r16, r24
    468e:	19 1f       	adc	r17, r25
  return n;
}
    4690:	c8 01       	movw	r24, r16
    4692:	df 91       	pop	r29
    4694:	cf 91       	pop	r28
    4696:	1f 91       	pop	r17
    4698:	0f 91       	pop	r16
    469a:	08 95       	ret

0000469c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    469c:	6f 92       	push	r6
    469e:	7f 92       	push	r7
    46a0:	9f 92       	push	r9
    46a2:	af 92       	push	r10
    46a4:	bf 92       	push	r11
    46a6:	cf 92       	push	r12
    46a8:	df 92       	push	r13
    46aa:	ef 92       	push	r14
    46ac:	ff 92       	push	r15
    46ae:	0f 93       	push	r16
    46b0:	1f 93       	push	r17
    46b2:	cf 93       	push	r28
    46b4:	df 93       	push	r29
    46b6:	3c 01       	movw	r6, r24
    46b8:	7a 01       	movw	r14, r20
    46ba:	8b 01       	movw	r16, r22
    46bc:	c2 2e       	mov	r12, r18
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    46be:	cb 01       	movw	r24, r22
    46c0:	ba 01       	movw	r22, r20
    46c2:	20 e0       	ldi	r18, 0x00	; 0
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    46c6:	a9 01       	movw	r20, r18
    46c8:	0e 94 7b 13 	call	0x26f6	; 0x26f6 <__ltsf2>
    46cc:	87 ff       	sbrs	r24, 7
    46ce:	0a c0       	rjmp	.+20     	; 0x46e4 <_ZN5Print10printFloatEdh+0x48>
  {
     n += print('-');
    46d0:	c3 01       	movw	r24, r6
    46d2:	6d e2       	ldi	r22, 0x2D	; 45
    46d4:	0e 94 9a 21 	call	0x4334	; 0x4334 <_ZN5Print5printEc>
    46d8:	ec 01       	movw	r28, r24
     number = -number;
    46da:	17 fb       	bst	r17, 7
    46dc:	10 95       	com	r17
    46de:	17 f9       	bld	r17, 7
    46e0:	10 95       	com	r17
    46e2:	02 c0       	rjmp	.+4      	; 0x46e8 <_ZN5Print10printFloatEdh+0x4c>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    46e4:	c0 e0       	ldi	r28, 0x00	; 0
    46e6:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    46e8:	dd 24       	eor	r13, r13
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    46ea:	50 e0       	ldi	r21, 0x00	; 0
    46ec:	40 e0       	ldi	r20, 0x00	; 0
    46ee:	30 e0       	ldi	r19, 0x00	; 0
    46f0:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    46f2:	11 c0       	rjmp	.+34     	; 0x4716 <_ZN5Print10printFloatEdh+0x7a>
    rounding /= 10.0;
    46f4:	da 01       	movw	r26, r20
    46f6:	f9 01       	movw	r30, r18
    46f8:	6b 2f       	mov	r22, r27
    46fa:	74 2f       	mov	r23, r20
    46fc:	8f 2f       	mov	r24, r31
    46fe:	92 2f       	mov	r25, r18
    4700:	20 e0       	ldi	r18, 0x00	; 0
    4702:	30 e0       	ldi	r19, 0x00	; 0
    4704:	40 e2       	ldi	r20, 0x20	; 32
    4706:	51 e4       	ldi	r21, 0x41	; 65
    4708:	0e 94 3d 12 	call	0x247a	; 0x247a <__divsf3>
    470c:	56 2f       	mov	r21, r22
    470e:	47 2f       	mov	r20, r23
    4710:	38 2f       	mov	r19, r24
    4712:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4714:	d3 94       	inc	r13
    4716:	dc 14       	cp	r13, r12
    4718:	68 f3       	brcs	.-38     	; 0x46f4 <_ZN5Print10printFloatEdh+0x58>
    rounding /= 10.0;
  
  number += rounding;
    471a:	c8 01       	movw	r24, r16
    471c:	b7 01       	movw	r22, r14
    471e:	da 01       	movw	r26, r20
    4720:	f9 01       	movw	r30, r18
    4722:	2b 2f       	mov	r18, r27
    4724:	34 2f       	mov	r19, r20
    4726:	4f 2f       	mov	r20, r31
    4728:	5e 2f       	mov	r21, r30
    472a:	0e 94 e5 10 	call	0x21ca	; 0x21ca <__addsf3>
    472e:	5b 01       	movw	r10, r22
    4730:	f8 2e       	mov	r15, r24
    4732:	99 2e       	mov	r9, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4734:	7b 2d       	mov	r23, r11
    4736:	0e 94 6f 0f 	call	0x1ede	; 0x1ede <__fixunssfsi>
    473a:	16 2f       	mov	r17, r22
    473c:	d7 2e       	mov	r13, r23
    473e:	e8 2e       	mov	r14, r24
    4740:	09 2f       	mov	r16, r25
  double remainder = number - (double)int_part;
    4742:	0e 94 5d 14 	call	0x28ba	; 0x28ba <__floatunsisf>
    4746:	9b 01       	movw	r18, r22
    4748:	ac 01       	movw	r20, r24
    474a:	6a 2d       	mov	r22, r10
    474c:	7b 2d       	mov	r23, r11
    474e:	8f 2d       	mov	r24, r15
    4750:	99 2d       	mov	r25, r9
    4752:	0e 94 12 11 	call	0x2224	; 0x2224 <__subsf3>
    4756:	96 2e       	mov	r9, r22
    4758:	a7 2e       	mov	r10, r23
    475a:	b8 2e       	mov	r11, r24
    475c:	f9 2e       	mov	r15, r25
  n += print(int_part);
    475e:	c3 01       	movw	r24, r6
    4760:	41 2f       	mov	r20, r17
    4762:	5d 2d       	mov	r21, r13
    4764:	6e 2d       	mov	r22, r14
    4766:	70 2f       	mov	r23, r16
    4768:	2a e0       	ldi	r18, 0x0A	; 10
    476a:	30 e0       	ldi	r19, 0x00	; 0
    476c:	0e 94 7b 22 	call	0x44f6	; 0x44f6 <_ZN5Print5printEmi>
    4770:	c8 0f       	add	r28, r24
    4772:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    4774:	cc 20       	and	r12, r12
    4776:	b9 f1       	breq	.+110    	; 0x47e6 <_ZN5Print10printFloatEdh+0x14a>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4778:	c3 01       	movw	r24, r6
    477a:	69 ee       	ldi	r22, 0xE9	; 233
    477c:	71 e0       	ldi	r23, 0x01	; 1
    477e:	0e 94 30 21 	call	0x4260	; 0x4260 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    4782:	c8 0f       	add	r28, r24
    4784:	d9 1f       	adc	r29, r25
    4786:	2f c0       	rjmp	.+94     	; 0x47e6 <_ZN5Print10printFloatEdh+0x14a>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    4788:	69 2d       	mov	r22, r9
    478a:	7a 2d       	mov	r23, r10
    478c:	8b 2d       	mov	r24, r11
    478e:	9f 2d       	mov	r25, r15
    4790:	20 e0       	ldi	r18, 0x00	; 0
    4792:	30 e0       	ldi	r19, 0x00	; 0
    4794:	40 e2       	ldi	r20, 0x20	; 32
    4796:	51 e4       	ldi	r21, 0x41	; 65
    4798:	0e 94 43 11 	call	0x2286	; 0x2286 <__mulsf3>
    479c:	d6 2e       	mov	r13, r22
    479e:	b7 2e       	mov	r11, r23
    47a0:	a8 2e       	mov	r10, r24
    47a2:	99 2e       	mov	r9, r25
    int toPrint = int(remainder);
    47a4:	0e 94 0b 14 	call	0x2816	; 0x2816 <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    47a8:	7b 01       	movw	r14, r22
    47aa:	00 27       	eor	r16, r16
    47ac:	f7 fc       	sbrc	r15, 7
    47ae:	00 95       	com	r16
    47b0:	10 2f       	mov	r17, r16
    47b2:	c3 01       	movw	r24, r6
    47b4:	b8 01       	movw	r22, r16
    47b6:	a7 01       	movw	r20, r14
    47b8:	2a e0       	ldi	r18, 0x0A	; 10
    47ba:	30 e0       	ldi	r19, 0x00	; 0
    47bc:	0e 94 db 22 	call	0x45b6	; 0x45b6 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    47c0:	c8 0f       	add	r28, r24
    47c2:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    47c4:	c8 01       	movw	r24, r16
    47c6:	b7 01       	movw	r22, r14
    47c8:	0e 94 ab 13 	call	0x2756	; 0x2756 <__floatsisf>
    47cc:	9b 01       	movw	r18, r22
    47ce:	ac 01       	movw	r20, r24
    47d0:	6d 2d       	mov	r22, r13
    47d2:	7b 2d       	mov	r23, r11
    47d4:	8a 2d       	mov	r24, r10
    47d6:	99 2d       	mov	r25, r9
    47d8:	0e 94 12 11 	call	0x2224	; 0x2224 <__subsf3>
    47dc:	96 2e       	mov	r9, r22
    47de:	a7 2e       	mov	r10, r23
    47e0:	b8 2e       	mov	r11, r24
    47e2:	f9 2e       	mov	r15, r25
    47e4:	ca 94       	dec	r12
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    47e6:	cc 20       	and	r12, r12
    47e8:	79 f6       	brne	.-98     	; 0x4788 <_ZN5Print10printFloatEdh+0xec>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    47ea:	ce 01       	movw	r24, r28
    47ec:	df 91       	pop	r29
    47ee:	cf 91       	pop	r28
    47f0:	1f 91       	pop	r17
    47f2:	0f 91       	pop	r16
    47f4:	ff 90       	pop	r15
    47f6:	ef 90       	pop	r14
    47f8:	df 90       	pop	r13
    47fa:	cf 90       	pop	r12
    47fc:	bf 90       	pop	r11
    47fe:	af 90       	pop	r10
    4800:	9f 90       	pop	r9
    4802:	7f 90       	pop	r7
    4804:	6f 90       	pop	r6
    4806:	08 95       	ret

00004808 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4808:	0e 94 4e 23 	call	0x469c	; 0x469c <_ZN5Print10printFloatEdh>
}
    480c:	08 95       	ret

0000480e <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    480e:	0f 93       	push	r16
    4810:	1f 93       	push	r17
    4812:	cf 93       	push	r28
    4814:	df 93       	push	r29
    4816:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4818:	0e 94 4e 23 	call	0x469c	; 0x469c <_ZN5Print10printFloatEdh>
    481c:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    481e:	ce 01       	movw	r24, r28
    4820:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print7printlnEv>
    4824:	08 0f       	add	r16, r24
    4826:	19 1f       	adc	r17, r25
  return n;
}
    4828:	c8 01       	movw	r24, r16
    482a:	df 91       	pop	r29
    482c:	cf 91       	pop	r28
    482e:	1f 91       	pop	r17
    4830:	0f 91       	pop	r16
    4832:	08 95       	ret

00004834 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    4834:	fc 01       	movw	r30, r24
    4836:	84 85       	ldd	r24, Z+12	; 0x0c
    4838:	95 85       	ldd	r25, Z+13	; 0x0d
    483a:	fc 01       	movw	r30, r24
    483c:	e0 5c       	subi	r30, 0xC0	; 192
    483e:	ff 4f       	sbci	r31, 0xFF	; 255
    4840:	20 81       	ld	r18, Z
    4842:	31 81       	ldd	r19, Z+1	; 0x01
    4844:	8e 5b       	subi	r24, 0xBE	; 190
    4846:	9f 4f       	sbci	r25, 0xFF	; 255
    4848:	fc 01       	movw	r30, r24
    484a:	80 81       	ld	r24, Z
    484c:	91 81       	ldd	r25, Z+1	; 0x01
    484e:	28 1b       	sub	r18, r24
    4850:	39 0b       	sbc	r19, r25
    4852:	2f 73       	andi	r18, 0x3F	; 63
    4854:	30 70       	andi	r19, 0x00	; 0
}
    4856:	c9 01       	movw	r24, r18
    4858:	08 95       	ret

0000485a <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    485a:	fc 01       	movw	r30, r24
    485c:	84 85       	ldd	r24, Z+12	; 0x0c
    485e:	95 85       	ldd	r25, Z+13	; 0x0d
    4860:	fc 01       	movw	r30, r24
    4862:	e0 5c       	subi	r30, 0xC0	; 192
    4864:	ff 4f       	sbci	r31, 0xFF	; 255
    4866:	40 81       	ld	r20, Z
    4868:	51 81       	ldd	r21, Z+1	; 0x01
    486a:	fc 01       	movw	r30, r24
    486c:	ee 5b       	subi	r30, 0xBE	; 190
    486e:	ff 4f       	sbci	r31, 0xFF	; 255
    4870:	20 81       	ld	r18, Z
    4872:	31 81       	ldd	r19, Z+1	; 0x01
    4874:	42 17       	cp	r20, r18
    4876:	53 07       	cpc	r21, r19
    4878:	41 f0       	breq	.+16     	; 0x488a <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    487a:	01 90       	ld	r0, Z+
    487c:	f0 81       	ld	r31, Z
    487e:	e0 2d       	mov	r30, r0
    4880:	e8 0f       	add	r30, r24
    4882:	f9 1f       	adc	r31, r25
    4884:	20 81       	ld	r18, Z
    4886:	30 e0       	ldi	r19, 0x00	; 0
    4888:	02 c0       	rjmp	.+4      	; 0x488e <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    488a:	2f ef       	ldi	r18, 0xFF	; 255
    488c:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    488e:	c9 01       	movw	r24, r18
    4890:	08 95       	ret

00004892 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    4892:	fc 01       	movw	r30, r24
    4894:	84 85       	ldd	r24, Z+12	; 0x0c
    4896:	95 85       	ldd	r25, Z+13	; 0x0d
    4898:	fc 01       	movw	r30, r24
    489a:	e0 5c       	subi	r30, 0xC0	; 192
    489c:	ff 4f       	sbci	r31, 0xFF	; 255
    489e:	40 81       	ld	r20, Z
    48a0:	51 81       	ldd	r21, Z+1	; 0x01
    48a2:	fc 01       	movw	r30, r24
    48a4:	ee 5b       	subi	r30, 0xBE	; 190
    48a6:	ff 4f       	sbci	r31, 0xFF	; 255
    48a8:	20 81       	ld	r18, Z
    48aa:	31 81       	ldd	r19, Z+1	; 0x01
    48ac:	42 17       	cp	r20, r18
    48ae:	53 07       	cpc	r21, r19
    48b0:	71 f0       	breq	.+28     	; 0x48ce <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    48b2:	a0 81       	ld	r26, Z
    48b4:	b1 81       	ldd	r27, Z+1	; 0x01
    48b6:	a8 0f       	add	r26, r24
    48b8:	b9 1f       	adc	r27, r25
    48ba:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    48bc:	80 81       	ld	r24, Z
    48be:	91 81       	ldd	r25, Z+1	; 0x01
    48c0:	01 96       	adiw	r24, 0x01	; 1
    48c2:	8f 73       	andi	r24, 0x3F	; 63
    48c4:	90 70       	andi	r25, 0x00	; 0
    48c6:	91 83       	std	Z+1, r25	; 0x01
    48c8:	80 83       	st	Z, r24
    return c;
    48ca:	30 e0       	ldi	r19, 0x00	; 0
    48cc:	02 c0       	rjmp	.+4      	; 0x48d2 <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    48ce:	2f ef       	ldi	r18, 0xFF	; 255
    48d0:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    48d2:	c9 01       	movw	r24, r18
    48d4:	08 95       	ret

000048d6 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    48d6:	dc 01       	movw	r26, r24
    48d8:	1e 96       	adiw	r26, 0x0e	; 14
    48da:	8d 91       	ld	r24, X+
    48dc:	9c 91       	ld	r25, X
    48de:	1f 97       	sbiw	r26, 0x0f	; 15
    48e0:	fc 01       	movw	r30, r24
    48e2:	e0 5c       	subi	r30, 0xC0	; 192
    48e4:	ff 4f       	sbci	r31, 0xFF	; 255
    48e6:	8e 5b       	subi	r24, 0xBE	; 190
    48e8:	9f 4f       	sbci	r25, 0xFF	; 255
    48ea:	40 81       	ld	r20, Z
    48ec:	51 81       	ldd	r21, Z+1	; 0x01
    48ee:	dc 01       	movw	r26, r24
    48f0:	2d 91       	ld	r18, X+
    48f2:	3c 91       	ld	r19, X
    48f4:	11 97       	sbiw	r26, 0x01	; 1
    48f6:	42 17       	cp	r20, r18
    48f8:	53 07       	cpc	r21, r19
    48fa:	b9 f7       	brne	.-18     	; 0x48ea <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    48fc:	08 95       	ret

000048fe <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    48fe:	1f 93       	push	r17
    4900:	fc 01       	movw	r30, r24
    4902:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4904:	26 85       	ldd	r18, Z+14	; 0x0e
    4906:	37 85       	ldd	r19, Z+15	; 0x0f
    4908:	d9 01       	movw	r26, r18
    490a:	a0 5c       	subi	r26, 0xC0	; 192
    490c:	bf 4f       	sbci	r27, 0xFF	; 255
    490e:	8d 91       	ld	r24, X+
    4910:	9c 91       	ld	r25, X
    4912:	01 96       	adiw	r24, 0x01	; 1
    4914:	60 e4       	ldi	r22, 0x40	; 64
    4916:	70 e0       	ldi	r23, 0x00	; 0
    4918:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    491c:	d9 01       	movw	r26, r18
    491e:	ae 5b       	subi	r26, 0xBE	; 190
    4920:	bf 4f       	sbci	r27, 0xFF	; 255
    4922:	4d 91       	ld	r20, X+
    4924:	5c 91       	ld	r21, X
    4926:	11 97       	sbiw	r26, 0x01	; 1
    4928:	84 17       	cp	r24, r20
    492a:	95 07       	cpc	r25, r21
    492c:	d1 f3       	breq	.-12     	; 0x4922 <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    492e:	d9 01       	movw	r26, r18
    4930:	a0 5c       	subi	r26, 0xC0	; 192
    4932:	bf 4f       	sbci	r27, 0xFF	; 255
    4934:	0d 90       	ld	r0, X+
    4936:	bc 91       	ld	r27, X
    4938:	a0 2d       	mov	r26, r0
    493a:	a2 0f       	add	r26, r18
    493c:	b3 1f       	adc	r27, r19
    493e:	1c 93       	st	X, r17
  _tx_buffer->head = i;
    4940:	a6 85       	ldd	r26, Z+14	; 0x0e
    4942:	b7 85       	ldd	r27, Z+15	; 0x0f
    4944:	a0 5c       	subi	r26, 0xC0	; 192
    4946:	bf 4f       	sbci	r27, 0xFF	; 255
    4948:	11 96       	adiw	r26, 0x01	; 1
    494a:	9c 93       	st	X, r25
    494c:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
    494e:	a6 89       	ldd	r26, Z+22	; 0x16
    4950:	b7 89       	ldd	r27, Z+23	; 0x17
    4952:	2c 91       	ld	r18, X
    4954:	81 e0       	ldi	r24, 0x01	; 1
    4956:	90 e0       	ldi	r25, 0x00	; 0
    4958:	05 8c       	ldd	r0, Z+29	; 0x1d
    495a:	02 c0       	rjmp	.+4      	; 0x4960 <_ZN14HardwareSerial5writeEh+0x62>
    495c:	88 0f       	add	r24, r24
    495e:	99 1f       	adc	r25, r25
    4960:	0a 94       	dec	r0
    4962:	e2 f7       	brpl	.-8      	; 0x495c <_ZN14HardwareSerial5writeEh+0x5e>
    4964:	28 2b       	or	r18, r24
    4966:	2c 93       	st	X, r18
  
  return 1;
}
    4968:	81 e0       	ldi	r24, 0x01	; 1
    496a:	90 e0       	ldi	r25, 0x00	; 0
    496c:	1f 91       	pop	r17
    496e:	08 95       	ret

00004970 <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4970:	fb 01       	movw	r30, r22
    4972:	e0 5c       	subi	r30, 0xC0	; 192
    4974:	ff 4f       	sbci	r31, 0xFF	; 255
    4976:	20 81       	ld	r18, Z
    4978:	31 81       	ldd	r19, Z+1	; 0x01
    497a:	2f 5f       	subi	r18, 0xFF	; 255
    497c:	3f 4f       	sbci	r19, 0xFF	; 255
    497e:	2f 73       	andi	r18, 0x3F	; 63
    4980:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    4982:	db 01       	movw	r26, r22
    4984:	ae 5b       	subi	r26, 0xBE	; 190
    4986:	bf 4f       	sbci	r27, 0xFF	; 255
    4988:	4d 91       	ld	r20, X+
    498a:	5c 91       	ld	r21, X
    498c:	11 97       	sbiw	r26, 0x01	; 1
    498e:	24 17       	cp	r18, r20
    4990:	35 07       	cpc	r19, r21
    4992:	39 f0       	breq	.+14     	; 0x49a2 <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
    4994:	a0 81       	ld	r26, Z
    4996:	b1 81       	ldd	r27, Z+1	; 0x01
    4998:	a6 0f       	add	r26, r22
    499a:	b7 1f       	adc	r27, r23
    499c:	8c 93       	st	X, r24
    buffer->head = i;
    499e:	31 83       	std	Z+1, r19	; 0x01
    49a0:	20 83       	st	Z, r18
    49a2:	08 95       	ret

000049a4 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    49a4:	08 95       	ret

000049a6 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    49a6:	1f 92       	push	r1
    49a8:	0f 92       	push	r0
    49aa:	0f b6       	in	r0, 0x3f	; 63
    49ac:	0f 92       	push	r0
    49ae:	11 24       	eor	r1, r1
    49b0:	2f 93       	push	r18
    49b2:	3f 93       	push	r19
    49b4:	4f 93       	push	r20
    49b6:	5f 93       	push	r21
    49b8:	6f 93       	push	r22
    49ba:	7f 93       	push	r23
    49bc:	8f 93       	push	r24
    49be:	9f 93       	push	r25
    49c0:	af 93       	push	r26
    49c2:	bf 93       	push	r27
    49c4:	ef 93       	push	r30
    49c6:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    49c8:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
    49cc:	64 e5       	ldi	r22, 0x54	; 84
    49ce:	73 e0       	ldi	r23, 0x03	; 3
    49d0:	0e 94 b8 24 	call	0x4970	; 0x4970 <_Z10store_charhP11ring_buffer>
  }
    49d4:	ff 91       	pop	r31
    49d6:	ef 91       	pop	r30
    49d8:	bf 91       	pop	r27
    49da:	af 91       	pop	r26
    49dc:	9f 91       	pop	r25
    49de:	8f 91       	pop	r24
    49e0:	7f 91       	pop	r23
    49e2:	6f 91       	pop	r22
    49e4:	5f 91       	pop	r21
    49e6:	4f 91       	pop	r20
    49e8:	3f 91       	pop	r19
    49ea:	2f 91       	pop	r18
    49ec:	0f 90       	pop	r0
    49ee:	0f be       	out	0x3f, r0	; 63
    49f0:	0f 90       	pop	r0
    49f2:	1f 90       	pop	r1
    49f4:	18 95       	reti

000049f6 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    49f6:	8c ed       	ldi	r24, 0xDC	; 220
    49f8:	93 e0       	ldi	r25, 0x03	; 3
    49fa:	0e 94 1a 24 	call	0x4834	; 0x4834 <_ZN14HardwareSerial9availableEv>
    49fe:	00 97       	sbiw	r24, 0x00	; 0
    4a00:	11 f0       	breq	.+4      	; 0x4a06 <_Z14serialEventRunv+0x10>
    4a02:	0e 94 d2 24 	call	0x49a4	; 0x49a4 <_Z11serialEventv>
    4a06:	08 95       	ret

00004a08 <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    4a08:	1f 92       	push	r1
    4a0a:	0f 92       	push	r0
    4a0c:	0f b6       	in	r0, 0x3f	; 63
    4a0e:	0f 92       	push	r0
    4a10:	11 24       	eor	r1, r1
    4a12:	2f 93       	push	r18
    4a14:	3f 93       	push	r19
    4a16:	5f 93       	push	r21
    4a18:	6f 93       	push	r22
    4a1a:	7f 93       	push	r23
    4a1c:	8f 93       	push	r24
    4a1e:	9f 93       	push	r25
    4a20:	af 93       	push	r26
    4a22:	bf 93       	push	r27
    4a24:	ef 93       	push	r30
    4a26:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    4a28:	20 91 d8 03 	lds	r18, 0x03D8
    4a2c:	30 91 d9 03 	lds	r19, 0x03D9
    4a30:	80 91 da 03 	lds	r24, 0x03DA
    4a34:	90 91 db 03 	lds	r25, 0x03DB
    4a38:	28 17       	cp	r18, r24
    4a3a:	39 07       	cpc	r19, r25
    4a3c:	31 f4       	brne	.+12     	; 0x4a4a <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    4a3e:	80 91 c1 00 	lds	r24, 0x00C1
    4a42:	8f 7d       	andi	r24, 0xDF	; 223
    4a44:	80 93 c1 00 	sts	0x00C1, r24
    4a48:	16 c0       	rjmp	.+44     	; 0x4a76 <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    4a4a:	e0 91 da 03 	lds	r30, 0x03DA
    4a4e:	f0 91 db 03 	lds	r31, 0x03DB
    4a52:	e8 56       	subi	r30, 0x68	; 104
    4a54:	fc 4f       	sbci	r31, 0xFC	; 252
    4a56:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    4a58:	80 91 da 03 	lds	r24, 0x03DA
    4a5c:	90 91 db 03 	lds	r25, 0x03DB
    4a60:	01 96       	adiw	r24, 0x01	; 1
    4a62:	60 e4       	ldi	r22, 0x40	; 64
    4a64:	70 e0       	ldi	r23, 0x00	; 0
    4a66:	0e 94 b0 26 	call	0x4d60	; 0x4d60 <__divmodhi4>
    4a6a:	90 93 db 03 	sts	0x03DB, r25
    4a6e:	80 93 da 03 	sts	0x03DA, r24
	
  #if defined(UDR0)
    UDR0 = c;
    4a72:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    4a76:	ff 91       	pop	r31
    4a78:	ef 91       	pop	r30
    4a7a:	bf 91       	pop	r27
    4a7c:	af 91       	pop	r26
    4a7e:	9f 91       	pop	r25
    4a80:	8f 91       	pop	r24
    4a82:	7f 91       	pop	r23
    4a84:	6f 91       	pop	r22
    4a86:	5f 91       	pop	r21
    4a88:	3f 91       	pop	r19
    4a8a:	2f 91       	pop	r18
    4a8c:	0f 90       	pop	r0
    4a8e:	0f be       	out	0x3f, r0	; 63
    4a90:	0f 90       	pop	r0
    4a92:	1f 90       	pop	r1
    4a94:	18 95       	reti

00004a96 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:
#endif


// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
    4a96:	8f 92       	push	r8
    4a98:	af 92       	push	r10
    4a9a:	bf 92       	push	r11
    4a9c:	cf 92       	push	r12
    4a9e:	df 92       	push	r13
    4aa0:	ef 92       	push	r14
    4aa2:	ff 92       	push	r15
    4aa4:	0f 93       	push	r16
    4aa6:	1f 93       	push	r17
    4aa8:	df 93       	push	r29
    4aaa:	cf 93       	push	r28
    4aac:	cd b7       	in	r28, 0x3d	; 61
    4aae:	de b7       	in	r29, 0x3e	; 62
    4ab0:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4ab2:	13 82       	std	Z+3, r1	; 0x03
    4ab4:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4ab6:	88 ee       	ldi	r24, 0xE8	; 232
    4ab8:	93 e0       	ldi	r25, 0x03	; 3
    4aba:	a0 e0       	ldi	r26, 0x00	; 0
    4abc:	b0 e0       	ldi	r27, 0x00	; 0
    4abe:	84 83       	std	Z+4, r24	; 0x04
    4ac0:	95 83       	std	Z+5, r25	; 0x05
    4ac2:	a6 83       	std	Z+6, r26	; 0x06
    4ac4:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    4ac6:	86 e0       	ldi	r24, 0x06	; 6
    4ac8:	93 e0       	ldi	r25, 0x03	; 3
    4aca:	91 83       	std	Z+1, r25	; 0x01
    4acc:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    4ace:	75 87       	std	Z+13, r23	; 0x0d
    4ad0:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
    4ad2:	57 87       	std	Z+15, r21	; 0x0f
    4ad4:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
    4ad6:	31 8b       	std	Z+17, r19	; 0x11
    4ad8:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
    4ada:	13 8b       	std	Z+19, r17	; 0x13
    4adc:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
    4ade:	f5 8a       	std	Z+21, r15	; 0x15
    4ae0:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
    4ae2:	d7 8a       	std	Z+23, r13	; 0x17
    4ae4:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
    4ae6:	b1 8e       	std	Z+25, r11	; 0x19
    4ae8:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
    4aea:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
    4aec:	8e 85       	ldd	r24, Y+14	; 0x0e
    4aee:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    4af0:	8f 85       	ldd	r24, Y+15	; 0x0f
    4af2:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    4af4:	88 89       	ldd	r24, Y+16	; 0x10
    4af6:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    4af8:	89 89       	ldd	r24, Y+17	; 0x11
    4afa:	86 8f       	std	Z+30, r24	; 0x1e
}
    4afc:	cf 91       	pop	r28
    4afe:	df 91       	pop	r29
    4b00:	1f 91       	pop	r17
    4b02:	0f 91       	pop	r16
    4b04:	ff 90       	pop	r15
    4b06:	ef 90       	pop	r14
    4b08:	df 90       	pop	r13
    4b0a:	cf 90       	pop	r12
    4b0c:	bf 90       	pop	r11
    4b0e:	af 90       	pop	r10
    4b10:	8f 90       	pop	r8
    4b12:	08 95       	ret

00004b14 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    4b14:	df 92       	push	r13
    4b16:	ef 92       	push	r14
    4b18:	ff 92       	push	r15
    4b1a:	0f 93       	push	r16
    4b1c:	1f 93       	push	r17
    4b1e:	cf 93       	push	r28
    4b20:	df 93       	push	r29
    4b22:	ec 01       	movw	r28, r24
    4b24:	7a 01       	movw	r14, r20
    4b26:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    4b28:	dd 24       	eor	r13, r13
    4b2a:	d3 94       	inc	r13
    4b2c:	40 30       	cpi	r20, 0x00	; 0
    4b2e:	81 ee       	ldi	r24, 0xE1	; 225
    4b30:	58 07       	cpc	r21, r24
    4b32:	80 e0       	ldi	r24, 0x00	; 0
    4b34:	68 07       	cpc	r22, r24
    4b36:	80 e0       	ldi	r24, 0x00	; 0
    4b38:	78 07       	cpc	r23, r24
    4b3a:	49 f4       	brne	.+18     	; 0x4b4e <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    4b3c:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    4b3e:	ec 89       	ldd	r30, Y+20	; 0x14
    4b40:	fd 89       	ldd	r31, Y+21	; 0x15
    4b42:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4b44:	60 e8       	ldi	r22, 0x80	; 128
    4b46:	74 e8       	ldi	r23, 0x84	; 132
    4b48:	8e e1       	ldi	r24, 0x1E	; 30
    4b4a:	90 e0       	ldi	r25, 0x00	; 0
    4b4c:	0f c0       	rjmp	.+30     	; 0x4b6c <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    4b4e:	ec 89       	ldd	r30, Y+20	; 0x14
    4b50:	fd 89       	ldd	r31, Y+21	; 0x15
    4b52:	81 e0       	ldi	r24, 0x01	; 1
    4b54:	90 e0       	ldi	r25, 0x00	; 0
    4b56:	0e 8c       	ldd	r0, Y+30	; 0x1e
    4b58:	02 c0       	rjmp	.+4      	; 0x4b5e <_ZN14HardwareSerial5beginEm+0x4a>
    4b5a:	88 0f       	add	r24, r24
    4b5c:	99 1f       	adc	r25, r25
    4b5e:	0a 94       	dec	r0
    4b60:	e2 f7       	brpl	.-8      	; 0x4b5a <_ZN14HardwareSerial5beginEm+0x46>
    4b62:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4b64:	60 e0       	ldi	r22, 0x00	; 0
    4b66:	79 e0       	ldi	r23, 0x09	; 9
    4b68:	8d e3       	ldi	r24, 0x3D	; 61
    4b6a:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4b6c:	a8 01       	movw	r20, r16
    4b6e:	97 01       	movw	r18, r14
    4b70:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__udivmodsi4>
    4b74:	21 50       	subi	r18, 0x01	; 1
    4b76:	30 40       	sbci	r19, 0x00	; 0
    4b78:	40 40       	sbci	r20, 0x00	; 0
    4b7a:	50 40       	sbci	r21, 0x00	; 0
    4b7c:	56 95       	lsr	r21
    4b7e:	47 95       	ror	r20
    4b80:	37 95       	ror	r19
    4b82:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    4b84:	80 e1       	ldi	r24, 0x10	; 16
    4b86:	20 30       	cpi	r18, 0x00	; 0
    4b88:	38 07       	cpc	r19, r24
    4b8a:	10 f0       	brcs	.+4      	; 0x4b90 <_ZN14HardwareSerial5beginEm+0x7c>
    4b8c:	dd 20       	and	r13, r13
    4b8e:	b1 f6       	brne	.-84     	; 0x4b3c <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4b90:	e8 89       	ldd	r30, Y+16	; 0x10
    4b92:	f9 89       	ldd	r31, Y+17	; 0x11
    4b94:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    4b96:	ea 89       	ldd	r30, Y+18	; 0x12
    4b98:	fb 89       	ldd	r31, Y+19	; 0x13
    4b9a:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    4b9c:	ee 89       	ldd	r30, Y+22	; 0x16
    4b9e:	ff 89       	ldd	r31, Y+23	; 0x17
    4ba0:	40 81       	ld	r20, Z
    4ba2:	81 e0       	ldi	r24, 0x01	; 1
    4ba4:	90 e0       	ldi	r25, 0x00	; 0
    4ba6:	9c 01       	movw	r18, r24
    4ba8:	0a 8c       	ldd	r0, Y+26	; 0x1a
    4baa:	02 c0       	rjmp	.+4      	; 0x4bb0 <_ZN14HardwareSerial5beginEm+0x9c>
    4bac:	22 0f       	add	r18, r18
    4bae:	33 1f       	adc	r19, r19
    4bb0:	0a 94       	dec	r0
    4bb2:	e2 f7       	brpl	.-8      	; 0x4bac <_ZN14HardwareSerial5beginEm+0x98>
    4bb4:	42 2b       	or	r20, r18
    4bb6:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    4bb8:	ee 89       	ldd	r30, Y+22	; 0x16
    4bba:	ff 89       	ldd	r31, Y+23	; 0x17
    4bbc:	40 81       	ld	r20, Z
    4bbe:	9c 01       	movw	r18, r24
    4bc0:	0b 8c       	ldd	r0, Y+27	; 0x1b
    4bc2:	02 c0       	rjmp	.+4      	; 0x4bc8 <_ZN14HardwareSerial5beginEm+0xb4>
    4bc4:	22 0f       	add	r18, r18
    4bc6:	33 1f       	adc	r19, r19
    4bc8:	0a 94       	dec	r0
    4bca:	e2 f7       	brpl	.-8      	; 0x4bc4 <_ZN14HardwareSerial5beginEm+0xb0>
    4bcc:	42 2b       	or	r20, r18
    4bce:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    4bd0:	ee 89       	ldd	r30, Y+22	; 0x16
    4bd2:	ff 89       	ldd	r31, Y+23	; 0x17
    4bd4:	40 81       	ld	r20, Z
    4bd6:	9c 01       	movw	r18, r24
    4bd8:	0c 8c       	ldd	r0, Y+28	; 0x1c
    4bda:	02 c0       	rjmp	.+4      	; 0x4be0 <_ZN14HardwareSerial5beginEm+0xcc>
    4bdc:	22 0f       	add	r18, r18
    4bde:	33 1f       	adc	r19, r19
    4be0:	0a 94       	dec	r0
    4be2:	e2 f7       	brpl	.-8      	; 0x4bdc <_ZN14HardwareSerial5beginEm+0xc8>
    4be4:	42 2b       	or	r20, r18
    4be6:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    4be8:	ee 89       	ldd	r30, Y+22	; 0x16
    4bea:	ff 89       	ldd	r31, Y+23	; 0x17
    4bec:	20 81       	ld	r18, Z
    4bee:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4bf0:	02 c0       	rjmp	.+4      	; 0x4bf6 <_ZN14HardwareSerial5beginEm+0xe2>
    4bf2:	88 0f       	add	r24, r24
    4bf4:	99 1f       	adc	r25, r25
    4bf6:	0a 94       	dec	r0
    4bf8:	e2 f7       	brpl	.-8      	; 0x4bf2 <_ZN14HardwareSerial5beginEm+0xde>
    4bfa:	80 95       	com	r24
    4bfc:	82 23       	and	r24, r18
    4bfe:	80 83       	st	Z, r24
}
    4c00:	df 91       	pop	r29
    4c02:	cf 91       	pop	r28
    4c04:	1f 91       	pop	r17
    4c06:	0f 91       	pop	r16
    4c08:	ff 90       	pop	r15
    4c0a:	ef 90       	pop	r14
    4c0c:	df 90       	pop	r13
    4c0e:	08 95       	ret

00004c10 <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    4c10:	cf 93       	push	r28
    4c12:	df 93       	push	r29
    4c14:	fc 01       	movw	r30, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    4c16:	86 85       	ldd	r24, Z+14	; 0x0e
    4c18:	97 85       	ldd	r25, Z+15	; 0x0f
    4c1a:	dc 01       	movw	r26, r24
    4c1c:	a0 5c       	subi	r26, 0xC0	; 192
    4c1e:	bf 4f       	sbci	r27, 0xFF	; 255
    4c20:	8e 5b       	subi	r24, 0xBE	; 190
    4c22:	9f 4f       	sbci	r25, 0xFF	; 255
    4c24:	4d 91       	ld	r20, X+
    4c26:	5c 91       	ld	r21, X
    4c28:	11 97       	sbiw	r26, 0x01	; 1
    4c2a:	ec 01       	movw	r28, r24
    4c2c:	28 81       	ld	r18, Y
    4c2e:	39 81       	ldd	r19, Y+1	; 0x01
    4c30:	42 17       	cp	r20, r18
    4c32:	53 07       	cpc	r21, r19
    4c34:	b9 f7       	brne	.-18     	; 0x4c24 <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
    4c36:	a6 89       	ldd	r26, Z+22	; 0x16
    4c38:	b7 89       	ldd	r27, Z+23	; 0x17
    4c3a:	4c 91       	ld	r20, X
    4c3c:	81 e0       	ldi	r24, 0x01	; 1
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	9c 01       	movw	r18, r24
    4c42:	02 8c       	ldd	r0, Z+26	; 0x1a
    4c44:	02 c0       	rjmp	.+4      	; 0x4c4a <_ZN14HardwareSerial3endEv+0x3a>
    4c46:	22 0f       	add	r18, r18
    4c48:	33 1f       	adc	r19, r19
    4c4a:	0a 94       	dec	r0
    4c4c:	e2 f7       	brpl	.-8      	; 0x4c46 <_ZN14HardwareSerial3endEv+0x36>
    4c4e:	20 95       	com	r18
    4c50:	24 23       	and	r18, r20
    4c52:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    4c54:	a6 89       	ldd	r26, Z+22	; 0x16
    4c56:	b7 89       	ldd	r27, Z+23	; 0x17
    4c58:	4c 91       	ld	r20, X
    4c5a:	9c 01       	movw	r18, r24
    4c5c:	03 8c       	ldd	r0, Z+27	; 0x1b
    4c5e:	02 c0       	rjmp	.+4      	; 0x4c64 <_ZN14HardwareSerial3endEv+0x54>
    4c60:	22 0f       	add	r18, r18
    4c62:	33 1f       	adc	r19, r19
    4c64:	0a 94       	dec	r0
    4c66:	e2 f7       	brpl	.-8      	; 0x4c60 <_ZN14HardwareSerial3endEv+0x50>
    4c68:	20 95       	com	r18
    4c6a:	24 23       	and	r18, r20
    4c6c:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    4c6e:	a6 89       	ldd	r26, Z+22	; 0x16
    4c70:	b7 89       	ldd	r27, Z+23	; 0x17
    4c72:	4c 91       	ld	r20, X
    4c74:	9c 01       	movw	r18, r24
    4c76:	04 8c       	ldd	r0, Z+28	; 0x1c
    4c78:	02 c0       	rjmp	.+4      	; 0x4c7e <_ZN14HardwareSerial3endEv+0x6e>
    4c7a:	22 0f       	add	r18, r18
    4c7c:	33 1f       	adc	r19, r19
    4c7e:	0a 94       	dec	r0
    4c80:	e2 f7       	brpl	.-8      	; 0x4c7a <_ZN14HardwareSerial3endEv+0x6a>
    4c82:	20 95       	com	r18
    4c84:	24 23       	and	r18, r20
    4c86:	2c 93       	st	X, r18
  cbi(*_ucsrb, _udrie);
    4c88:	a6 89       	ldd	r26, Z+22	; 0x16
    4c8a:	b7 89       	ldd	r27, Z+23	; 0x17
    4c8c:	2c 91       	ld	r18, X
    4c8e:	05 8c       	ldd	r0, Z+29	; 0x1d
    4c90:	02 c0       	rjmp	.+4      	; 0x4c96 <_ZN14HardwareSerial3endEv+0x86>
    4c92:	88 0f       	add	r24, r24
    4c94:	99 1f       	adc	r25, r25
    4c96:	0a 94       	dec	r0
    4c98:	e2 f7       	brpl	.-8      	; 0x4c92 <_ZN14HardwareSerial3endEv+0x82>
    4c9a:	80 95       	com	r24
    4c9c:	82 23       	and	r24, r18
    4c9e:	8c 93       	st	X, r24
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    4ca0:	84 85       	ldd	r24, Z+12	; 0x0c
    4ca2:	95 85       	ldd	r25, Z+13	; 0x0d
    4ca4:	fc 01       	movw	r30, r24
    4ca6:	ee 5b       	subi	r30, 0xBE	; 190
    4ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    4caa:	20 81       	ld	r18, Z
    4cac:	31 81       	ldd	r19, Z+1	; 0x01
    4cae:	80 5c       	subi	r24, 0xC0	; 192
    4cb0:	9f 4f       	sbci	r25, 0xFF	; 255
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	31 83       	std	Z+1, r19	; 0x01
    4cb6:	20 83       	st	Z, r18
}
    4cb8:	df 91       	pop	r29
    4cba:	cf 91       	pop	r28
    4cbc:	08 95       	ret

00004cbe <_GLOBAL__I_rx_buffer>:
    4cbe:	10 92 df 03 	sts	0x03DF, r1
    4cc2:	10 92 de 03 	sts	0x03DE, r1
    4cc6:	88 ee       	ldi	r24, 0xE8	; 232
    4cc8:	93 e0       	ldi	r25, 0x03	; 3
    4cca:	a0 e0       	ldi	r26, 0x00	; 0
    4ccc:	b0 e0       	ldi	r27, 0x00	; 0
    4cce:	80 93 e0 03 	sts	0x03E0, r24
    4cd2:	90 93 e1 03 	sts	0x03E1, r25
    4cd6:	a0 93 e2 03 	sts	0x03E2, r26
    4cda:	b0 93 e3 03 	sts	0x03E3, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    4cde:	ee ed       	ldi	r30, 0xDE	; 222
    4ce0:	f3 e0       	ldi	r31, 0x03	; 3
    4ce2:	86 e0       	ldi	r24, 0x06	; 6
    4ce4:	93 e0       	ldi	r25, 0x03	; 3
    4ce6:	92 93       	st	-Z, r25
    4ce8:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
    4cea:	84 e5       	ldi	r24, 0x54	; 84
    4cec:	93 e0       	ldi	r25, 0x03	; 3
    4cee:	95 87       	std	Z+13, r25	; 0x0d
    4cf0:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    4cf2:	88 e9       	ldi	r24, 0x98	; 152
    4cf4:	93 e0       	ldi	r25, 0x03	; 3
    4cf6:	97 87       	std	Z+15, r25	; 0x0f
    4cf8:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    4cfa:	85 ec       	ldi	r24, 0xC5	; 197
    4cfc:	90 e0       	ldi	r25, 0x00	; 0
    4cfe:	91 8b       	std	Z+17, r25	; 0x11
    4d00:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    4d02:	84 ec       	ldi	r24, 0xC4	; 196
    4d04:	90 e0       	ldi	r25, 0x00	; 0
    4d06:	93 8b       	std	Z+19, r25	; 0x13
    4d08:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    4d0a:	80 ec       	ldi	r24, 0xC0	; 192
    4d0c:	90 e0       	ldi	r25, 0x00	; 0
    4d0e:	95 8b       	std	Z+21, r25	; 0x15
    4d10:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    4d12:	81 ec       	ldi	r24, 0xC1	; 193
    4d14:	90 e0       	ldi	r25, 0x00	; 0
    4d16:	97 8b       	std	Z+23, r25	; 0x17
    4d18:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
    4d1a:	86 ec       	ldi	r24, 0xC6	; 198
    4d1c:	90 e0       	ldi	r25, 0x00	; 0
    4d1e:	91 8f       	std	Z+25, r25	; 0x19
    4d20:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
    4d22:	84 e0       	ldi	r24, 0x04	; 4
    4d24:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    4d26:	83 e0       	ldi	r24, 0x03	; 3
    4d28:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    4d2a:	87 e0       	ldi	r24, 0x07	; 7
    4d2c:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    4d2e:	85 e0       	ldi	r24, 0x05	; 5
    4d30:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    4d32:	81 e0       	ldi	r24, 0x01	; 1
    4d34:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    4d36:	08 95       	ret

00004d38 <__udivmodhi4>:
    4d38:	aa 1b       	sub	r26, r26
    4d3a:	bb 1b       	sub	r27, r27
    4d3c:	51 e1       	ldi	r21, 0x11	; 17
    4d3e:	07 c0       	rjmp	.+14     	; 0x4d4e <__udivmodhi4_ep>

00004d40 <__udivmodhi4_loop>:
    4d40:	aa 1f       	adc	r26, r26
    4d42:	bb 1f       	adc	r27, r27
    4d44:	a6 17       	cp	r26, r22
    4d46:	b7 07       	cpc	r27, r23
    4d48:	10 f0       	brcs	.+4      	; 0x4d4e <__udivmodhi4_ep>
    4d4a:	a6 1b       	sub	r26, r22
    4d4c:	b7 0b       	sbc	r27, r23

00004d4e <__udivmodhi4_ep>:
    4d4e:	88 1f       	adc	r24, r24
    4d50:	99 1f       	adc	r25, r25
    4d52:	5a 95       	dec	r21
    4d54:	a9 f7       	brne	.-22     	; 0x4d40 <__udivmodhi4_loop>
    4d56:	80 95       	com	r24
    4d58:	90 95       	com	r25
    4d5a:	bc 01       	movw	r22, r24
    4d5c:	cd 01       	movw	r24, r26
    4d5e:	08 95       	ret

00004d60 <__divmodhi4>:
    4d60:	97 fb       	bst	r25, 7
    4d62:	09 2e       	mov	r0, r25
    4d64:	07 26       	eor	r0, r23
    4d66:	0a d0       	rcall	.+20     	; 0x4d7c <__divmodhi4_neg1>
    4d68:	77 fd       	sbrc	r23, 7
    4d6a:	04 d0       	rcall	.+8      	; 0x4d74 <__divmodhi4_neg2>
    4d6c:	e5 df       	rcall	.-54     	; 0x4d38 <__udivmodhi4>
    4d6e:	06 d0       	rcall	.+12     	; 0x4d7c <__divmodhi4_neg1>
    4d70:	00 20       	and	r0, r0
    4d72:	1a f4       	brpl	.+6      	; 0x4d7a <__divmodhi4_exit>

00004d74 <__divmodhi4_neg2>:
    4d74:	70 95       	com	r23
    4d76:	61 95       	neg	r22
    4d78:	7f 4f       	sbci	r23, 0xFF	; 255

00004d7a <__divmodhi4_exit>:
    4d7a:	08 95       	ret

00004d7c <__divmodhi4_neg1>:
    4d7c:	f6 f7       	brtc	.-4      	; 0x4d7a <__divmodhi4_exit>
    4d7e:	90 95       	com	r25
    4d80:	81 95       	neg	r24
    4d82:	9f 4f       	sbci	r25, 0xFF	; 255
    4d84:	08 95       	ret

00004d86 <__udivmodsi4>:
    4d86:	a1 e2       	ldi	r26, 0x21	; 33
    4d88:	1a 2e       	mov	r1, r26
    4d8a:	aa 1b       	sub	r26, r26
    4d8c:	bb 1b       	sub	r27, r27
    4d8e:	fd 01       	movw	r30, r26
    4d90:	0d c0       	rjmp	.+26     	; 0x4dac <__udivmodsi4_ep>

00004d92 <__udivmodsi4_loop>:
    4d92:	aa 1f       	adc	r26, r26
    4d94:	bb 1f       	adc	r27, r27
    4d96:	ee 1f       	adc	r30, r30
    4d98:	ff 1f       	adc	r31, r31
    4d9a:	a2 17       	cp	r26, r18
    4d9c:	b3 07       	cpc	r27, r19
    4d9e:	e4 07       	cpc	r30, r20
    4da0:	f5 07       	cpc	r31, r21
    4da2:	20 f0       	brcs	.+8      	; 0x4dac <__udivmodsi4_ep>
    4da4:	a2 1b       	sub	r26, r18
    4da6:	b3 0b       	sbc	r27, r19
    4da8:	e4 0b       	sbc	r30, r20
    4daa:	f5 0b       	sbc	r31, r21

00004dac <__udivmodsi4_ep>:
    4dac:	66 1f       	adc	r22, r22
    4dae:	77 1f       	adc	r23, r23
    4db0:	88 1f       	adc	r24, r24
    4db2:	99 1f       	adc	r25, r25
    4db4:	1a 94       	dec	r1
    4db6:	69 f7       	brne	.-38     	; 0x4d92 <__udivmodsi4_loop>
    4db8:	60 95       	com	r22
    4dba:	70 95       	com	r23
    4dbc:	80 95       	com	r24
    4dbe:	90 95       	com	r25
    4dc0:	9b 01       	movw	r18, r22
    4dc2:	ac 01       	movw	r20, r24
    4dc4:	bd 01       	movw	r22, r26
    4dc6:	cf 01       	movw	r24, r30
    4dc8:	08 95       	ret

00004dca <__prologue_saves__>:
    4dca:	2f 92       	push	r2
    4dcc:	3f 92       	push	r3
    4dce:	4f 92       	push	r4
    4dd0:	5f 92       	push	r5
    4dd2:	6f 92       	push	r6
    4dd4:	7f 92       	push	r7
    4dd6:	8f 92       	push	r8
    4dd8:	9f 92       	push	r9
    4dda:	af 92       	push	r10
    4ddc:	bf 92       	push	r11
    4dde:	cf 92       	push	r12
    4de0:	df 92       	push	r13
    4de2:	ef 92       	push	r14
    4de4:	ff 92       	push	r15
    4de6:	0f 93       	push	r16
    4de8:	1f 93       	push	r17
    4dea:	cf 93       	push	r28
    4dec:	df 93       	push	r29
    4dee:	cd b7       	in	r28, 0x3d	; 61
    4df0:	de b7       	in	r29, 0x3e	; 62
    4df2:	ca 1b       	sub	r28, r26
    4df4:	db 0b       	sbc	r29, r27
    4df6:	0f b6       	in	r0, 0x3f	; 63
    4df8:	f8 94       	cli
    4dfa:	de bf       	out	0x3e, r29	; 62
    4dfc:	0f be       	out	0x3f, r0	; 63
    4dfe:	cd bf       	out	0x3d, r28	; 61
    4e00:	09 94       	ijmp

00004e02 <__epilogue_restores__>:
    4e02:	2a 88       	ldd	r2, Y+18	; 0x12
    4e04:	39 88       	ldd	r3, Y+17	; 0x11
    4e06:	48 88       	ldd	r4, Y+16	; 0x10
    4e08:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e0a:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e0c:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e0e:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e10:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e12:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e14:	b9 84       	ldd	r11, Y+9	; 0x09
    4e16:	c8 84       	ldd	r12, Y+8	; 0x08
    4e18:	df 80       	ldd	r13, Y+7	; 0x07
    4e1a:	ee 80       	ldd	r14, Y+6	; 0x06
    4e1c:	fd 80       	ldd	r15, Y+5	; 0x05
    4e1e:	0c 81       	ldd	r16, Y+4	; 0x04
    4e20:	1b 81       	ldd	r17, Y+3	; 0x03
    4e22:	aa 81       	ldd	r26, Y+2	; 0x02
    4e24:	b9 81       	ldd	r27, Y+1	; 0x01
    4e26:	ce 0f       	add	r28, r30
    4e28:	d1 1d       	adc	r29, r1
    4e2a:	0f b6       	in	r0, 0x3f	; 63
    4e2c:	f8 94       	cli
    4e2e:	de bf       	out	0x3e, r29	; 62
    4e30:	0f be       	out	0x3f, r0	; 63
    4e32:	cd bf       	out	0x3d, r28	; 61
    4e34:	ed 01       	movw	r28, r26
    4e36:	08 95       	ret

00004e38 <__tablejump2__>:
    4e38:	ee 0f       	add	r30, r30
    4e3a:	ff 1f       	adc	r31, r31

00004e3c <__tablejump__>:
    4e3c:	05 90       	lpm	r0, Z+
    4e3e:	f4 91       	lpm	r31, Z+
    4e40:	e0 2d       	mov	r30, r0
    4e42:	09 94       	ijmp
    4e44:	11 f4       	brne	.+4      	; 0x4e4a <__tablejump__+0xe>
    4e46:	0e f4       	brtc	.+2      	; 0x4e4a <__tablejump__+0xe>
    4e48:	4d c0       	rjmp	.+154    	; 0x4ee4 <__fp_nan>
    4e4a:	3e c0       	rjmp	.+124    	; 0x4ec8 <__fp_mpack>

00004e4c <sqrt>:
    4e4c:	5d d0       	rcall	.+186    	; 0x4f08 <__fp_splitA>
    4e4e:	d0 f3       	brcs	.-12     	; 0x4e44 <__tablejump__+0x8>
    4e50:	99 23       	and	r25, r25
    4e52:	d9 f3       	breq	.-10     	; 0x4e4a <__tablejump__+0xe>
    4e54:	ce f3       	brts	.-14     	; 0x4e48 <__tablejump__+0xc>
    4e56:	9f 57       	subi	r25, 0x7F	; 127
    4e58:	55 0b       	sbc	r21, r21
    4e5a:	87 ff       	sbrs	r24, 7
    4e5c:	46 d0       	rcall	.+140    	; 0x4eea <__fp_norm2>
    4e5e:	00 24       	eor	r0, r0
    4e60:	a0 e6       	ldi	r26, 0x60	; 96
    4e62:	40 ea       	ldi	r20, 0xA0	; 160
    4e64:	90 01       	movw	r18, r0
    4e66:	80 58       	subi	r24, 0x80	; 128
    4e68:	56 95       	lsr	r21
    4e6a:	97 95       	ror	r25
    4e6c:	28 f4       	brcc	.+10     	; 0x4e78 <sqrt+0x2c>
    4e6e:	80 5c       	subi	r24, 0xC0	; 192
    4e70:	66 0f       	add	r22, r22
    4e72:	77 1f       	adc	r23, r23
    4e74:	88 1f       	adc	r24, r24
    4e76:	20 f0       	brcs	.+8      	; 0x4e80 <sqrt+0x34>
    4e78:	26 17       	cp	r18, r22
    4e7a:	37 07       	cpc	r19, r23
    4e7c:	48 07       	cpc	r20, r24
    4e7e:	30 f4       	brcc	.+12     	; 0x4e8c <sqrt+0x40>
    4e80:	62 1b       	sub	r22, r18
    4e82:	73 0b       	sbc	r23, r19
    4e84:	84 0b       	sbc	r24, r20
    4e86:	20 29       	or	r18, r0
    4e88:	31 29       	or	r19, r1
    4e8a:	4a 2b       	or	r20, r26
    4e8c:	a6 95       	lsr	r26
    4e8e:	17 94       	ror	r1
    4e90:	07 94       	ror	r0
    4e92:	20 25       	eor	r18, r0
    4e94:	31 25       	eor	r19, r1
    4e96:	4a 27       	eor	r20, r26
    4e98:	58 f7       	brcc	.-42     	; 0x4e70 <sqrt+0x24>
    4e9a:	66 0f       	add	r22, r22
    4e9c:	77 1f       	adc	r23, r23
    4e9e:	88 1f       	adc	r24, r24
    4ea0:	20 f0       	brcs	.+8      	; 0x4eaa <sqrt+0x5e>
    4ea2:	26 17       	cp	r18, r22
    4ea4:	37 07       	cpc	r19, r23
    4ea6:	48 07       	cpc	r20, r24
    4ea8:	30 f4       	brcc	.+12     	; 0x4eb6 <sqrt+0x6a>
    4eaa:	62 0b       	sbc	r22, r18
    4eac:	73 0b       	sbc	r23, r19
    4eae:	84 0b       	sbc	r24, r20
    4eb0:	20 0d       	add	r18, r0
    4eb2:	31 1d       	adc	r19, r1
    4eb4:	41 1d       	adc	r20, r1
    4eb6:	a0 95       	com	r26
    4eb8:	81 f7       	brne	.-32     	; 0x4e9a <sqrt+0x4e>
    4eba:	b9 01       	movw	r22, r18
    4ebc:	84 2f       	mov	r24, r20
    4ebe:	91 58       	subi	r25, 0x81	; 129
    4ec0:	88 0f       	add	r24, r24
    4ec2:	96 95       	lsr	r25
    4ec4:	87 95       	ror	r24
    4ec6:	08 95       	ret

00004ec8 <__fp_mpack>:
    4ec8:	9f 3f       	cpi	r25, 0xFF	; 255
    4eca:	31 f0       	breq	.+12     	; 0x4ed8 <__fp_mpack_finite+0xc>

00004ecc <__fp_mpack_finite>:
    4ecc:	91 50       	subi	r25, 0x01	; 1
    4ece:	20 f4       	brcc	.+8      	; 0x4ed8 <__fp_mpack_finite+0xc>
    4ed0:	87 95       	ror	r24
    4ed2:	77 95       	ror	r23
    4ed4:	67 95       	ror	r22
    4ed6:	b7 95       	ror	r27
    4ed8:	88 0f       	add	r24, r24
    4eda:	91 1d       	adc	r25, r1
    4edc:	96 95       	lsr	r25
    4ede:	87 95       	ror	r24
    4ee0:	97 f9       	bld	r25, 7
    4ee2:	08 95       	ret

00004ee4 <__fp_nan>:
    4ee4:	9f ef       	ldi	r25, 0xFF	; 255
    4ee6:	80 ec       	ldi	r24, 0xC0	; 192
    4ee8:	08 95       	ret

00004eea <__fp_norm2>:
    4eea:	91 50       	subi	r25, 0x01	; 1
    4eec:	50 40       	sbci	r21, 0x00	; 0
    4eee:	66 0f       	add	r22, r22
    4ef0:	77 1f       	adc	r23, r23
    4ef2:	88 1f       	adc	r24, r24
    4ef4:	d2 f7       	brpl	.-12     	; 0x4eea <__fp_norm2>
    4ef6:	08 95       	ret

00004ef8 <__fp_split3>:
    4ef8:	57 fd       	sbrc	r21, 7
    4efa:	90 58       	subi	r25, 0x80	; 128
    4efc:	44 0f       	add	r20, r20
    4efe:	55 1f       	adc	r21, r21
    4f00:	59 f0       	breq	.+22     	; 0x4f18 <__fp_splitA+0x10>
    4f02:	5f 3f       	cpi	r21, 0xFF	; 255
    4f04:	71 f0       	breq	.+28     	; 0x4f22 <__fp_splitA+0x1a>
    4f06:	47 95       	ror	r20

00004f08 <__fp_splitA>:
    4f08:	88 0f       	add	r24, r24
    4f0a:	97 fb       	bst	r25, 7
    4f0c:	99 1f       	adc	r25, r25
    4f0e:	61 f0       	breq	.+24     	; 0x4f28 <__fp_splitA+0x20>
    4f10:	9f 3f       	cpi	r25, 0xFF	; 255
    4f12:	79 f0       	breq	.+30     	; 0x4f32 <__fp_splitA+0x2a>
    4f14:	87 95       	ror	r24
    4f16:	08 95       	ret
    4f18:	12 16       	cp	r1, r18
    4f1a:	13 06       	cpc	r1, r19
    4f1c:	14 06       	cpc	r1, r20
    4f1e:	55 1f       	adc	r21, r21
    4f20:	f2 cf       	rjmp	.-28     	; 0x4f06 <__fp_split3+0xe>
    4f22:	46 95       	lsr	r20
    4f24:	f1 df       	rcall	.-30     	; 0x4f08 <__fp_splitA>
    4f26:	08 c0       	rjmp	.+16     	; 0x4f38 <__fp_splitA+0x30>
    4f28:	16 16       	cp	r1, r22
    4f2a:	17 06       	cpc	r1, r23
    4f2c:	18 06       	cpc	r1, r24
    4f2e:	99 1f       	adc	r25, r25
    4f30:	f1 cf       	rjmp	.-30     	; 0x4f14 <__fp_splitA+0xc>
    4f32:	86 95       	lsr	r24
    4f34:	71 05       	cpc	r23, r1
    4f36:	61 05       	cpc	r22, r1
    4f38:	08 94       	sec
    4f3a:	08 95       	ret

00004f3c <malloc>:
    4f3c:	cf 93       	push	r28
    4f3e:	df 93       	push	r29
    4f40:	82 30       	cpi	r24, 0x02	; 2
    4f42:	91 05       	cpc	r25, r1
    4f44:	10 f4       	brcc	.+4      	; 0x4f4a <malloc+0xe>
    4f46:	82 e0       	ldi	r24, 0x02	; 2
    4f48:	90 e0       	ldi	r25, 0x00	; 0
    4f4a:	e0 91 fd 03 	lds	r30, 0x03FD
    4f4e:	f0 91 fe 03 	lds	r31, 0x03FE
    4f52:	40 e0       	ldi	r20, 0x00	; 0
    4f54:	50 e0       	ldi	r21, 0x00	; 0
    4f56:	20 e0       	ldi	r18, 0x00	; 0
    4f58:	30 e0       	ldi	r19, 0x00	; 0
    4f5a:	26 c0       	rjmp	.+76     	; 0x4fa8 <malloc+0x6c>
    4f5c:	60 81       	ld	r22, Z
    4f5e:	71 81       	ldd	r23, Z+1	; 0x01
    4f60:	68 17       	cp	r22, r24
    4f62:	79 07       	cpc	r23, r25
    4f64:	e0 f0       	brcs	.+56     	; 0x4f9e <malloc+0x62>
    4f66:	68 17       	cp	r22, r24
    4f68:	79 07       	cpc	r23, r25
    4f6a:	81 f4       	brne	.+32     	; 0x4f8c <malloc+0x50>
    4f6c:	82 81       	ldd	r24, Z+2	; 0x02
    4f6e:	93 81       	ldd	r25, Z+3	; 0x03
    4f70:	21 15       	cp	r18, r1
    4f72:	31 05       	cpc	r19, r1
    4f74:	31 f0       	breq	.+12     	; 0x4f82 <malloc+0x46>
    4f76:	d9 01       	movw	r26, r18
    4f78:	13 96       	adiw	r26, 0x03	; 3
    4f7a:	9c 93       	st	X, r25
    4f7c:	8e 93       	st	-X, r24
    4f7e:	12 97       	sbiw	r26, 0x02	; 2
    4f80:	2b c0       	rjmp	.+86     	; 0x4fd8 <malloc+0x9c>
    4f82:	90 93 fe 03 	sts	0x03FE, r25
    4f86:	80 93 fd 03 	sts	0x03FD, r24
    4f8a:	26 c0       	rjmp	.+76     	; 0x4fd8 <malloc+0x9c>
    4f8c:	41 15       	cp	r20, r1
    4f8e:	51 05       	cpc	r21, r1
    4f90:	19 f0       	breq	.+6      	; 0x4f98 <malloc+0x5c>
    4f92:	64 17       	cp	r22, r20
    4f94:	75 07       	cpc	r23, r21
    4f96:	18 f4       	brcc	.+6      	; 0x4f9e <malloc+0x62>
    4f98:	ab 01       	movw	r20, r22
    4f9a:	e9 01       	movw	r28, r18
    4f9c:	df 01       	movw	r26, r30
    4f9e:	9f 01       	movw	r18, r30
    4fa0:	72 81       	ldd	r23, Z+2	; 0x02
    4fa2:	63 81       	ldd	r22, Z+3	; 0x03
    4fa4:	e7 2f       	mov	r30, r23
    4fa6:	f6 2f       	mov	r31, r22
    4fa8:	30 97       	sbiw	r30, 0x00	; 0
    4faa:	c1 f6       	brne	.-80     	; 0x4f5c <malloc+0x20>
    4fac:	41 15       	cp	r20, r1
    4fae:	51 05       	cpc	r21, r1
    4fb0:	01 f1       	breq	.+64     	; 0x4ff2 <malloc+0xb6>
    4fb2:	48 1b       	sub	r20, r24
    4fb4:	59 0b       	sbc	r21, r25
    4fb6:	44 30       	cpi	r20, 0x04	; 4
    4fb8:	51 05       	cpc	r21, r1
    4fba:	80 f4       	brcc	.+32     	; 0x4fdc <malloc+0xa0>
    4fbc:	12 96       	adiw	r26, 0x02	; 2
    4fbe:	8d 91       	ld	r24, X+
    4fc0:	9c 91       	ld	r25, X
    4fc2:	13 97       	sbiw	r26, 0x03	; 3
    4fc4:	20 97       	sbiw	r28, 0x00	; 0
    4fc6:	19 f0       	breq	.+6      	; 0x4fce <malloc+0x92>
    4fc8:	9b 83       	std	Y+3, r25	; 0x03
    4fca:	8a 83       	std	Y+2, r24	; 0x02
    4fcc:	04 c0       	rjmp	.+8      	; 0x4fd6 <malloc+0x9a>
    4fce:	90 93 fe 03 	sts	0x03FE, r25
    4fd2:	80 93 fd 03 	sts	0x03FD, r24
    4fd6:	fd 01       	movw	r30, r26
    4fd8:	32 96       	adiw	r30, 0x02	; 2
    4fda:	46 c0       	rjmp	.+140    	; 0x5068 <malloc+0x12c>
    4fdc:	fd 01       	movw	r30, r26
    4fde:	e4 0f       	add	r30, r20
    4fe0:	f5 1f       	adc	r31, r21
    4fe2:	81 93       	st	Z+, r24
    4fe4:	91 93       	st	Z+, r25
    4fe6:	42 50       	subi	r20, 0x02	; 2
    4fe8:	50 40       	sbci	r21, 0x00	; 0
    4fea:	11 96       	adiw	r26, 0x01	; 1
    4fec:	5c 93       	st	X, r21
    4fee:	4e 93       	st	-X, r20
    4ff0:	3b c0       	rjmp	.+118    	; 0x5068 <malloc+0x12c>
    4ff2:	20 91 fb 03 	lds	r18, 0x03FB
    4ff6:	30 91 fc 03 	lds	r19, 0x03FC
    4ffa:	21 15       	cp	r18, r1
    4ffc:	31 05       	cpc	r19, r1
    4ffe:	41 f4       	brne	.+16     	; 0x5010 <malloc+0xd4>
    5000:	20 91 f5 02 	lds	r18, 0x02F5
    5004:	30 91 f6 02 	lds	r19, 0x02F6
    5008:	30 93 fc 03 	sts	0x03FC, r19
    500c:	20 93 fb 03 	sts	0x03FB, r18
    5010:	20 91 f7 02 	lds	r18, 0x02F7
    5014:	30 91 f8 02 	lds	r19, 0x02F8
    5018:	21 15       	cp	r18, r1
    501a:	31 05       	cpc	r19, r1
    501c:	41 f4       	brne	.+16     	; 0x502e <malloc+0xf2>
    501e:	2d b7       	in	r18, 0x3d	; 61
    5020:	3e b7       	in	r19, 0x3e	; 62
    5022:	40 91 f3 02 	lds	r20, 0x02F3
    5026:	50 91 f4 02 	lds	r21, 0x02F4
    502a:	24 1b       	sub	r18, r20
    502c:	35 0b       	sbc	r19, r21
    502e:	e0 91 fb 03 	lds	r30, 0x03FB
    5032:	f0 91 fc 03 	lds	r31, 0x03FC
    5036:	e2 17       	cp	r30, r18
    5038:	f3 07       	cpc	r31, r19
    503a:	a0 f4       	brcc	.+40     	; 0x5064 <malloc+0x128>
    503c:	2e 1b       	sub	r18, r30
    503e:	3f 0b       	sbc	r19, r31
    5040:	28 17       	cp	r18, r24
    5042:	39 07       	cpc	r19, r25
    5044:	78 f0       	brcs	.+30     	; 0x5064 <malloc+0x128>
    5046:	ac 01       	movw	r20, r24
    5048:	4e 5f       	subi	r20, 0xFE	; 254
    504a:	5f 4f       	sbci	r21, 0xFF	; 255
    504c:	24 17       	cp	r18, r20
    504e:	35 07       	cpc	r19, r21
    5050:	48 f0       	brcs	.+18     	; 0x5064 <malloc+0x128>
    5052:	4e 0f       	add	r20, r30
    5054:	5f 1f       	adc	r21, r31
    5056:	50 93 fc 03 	sts	0x03FC, r21
    505a:	40 93 fb 03 	sts	0x03FB, r20
    505e:	81 93       	st	Z+, r24
    5060:	91 93       	st	Z+, r25
    5062:	02 c0       	rjmp	.+4      	; 0x5068 <malloc+0x12c>
    5064:	e0 e0       	ldi	r30, 0x00	; 0
    5066:	f0 e0       	ldi	r31, 0x00	; 0
    5068:	cf 01       	movw	r24, r30
    506a:	df 91       	pop	r29
    506c:	cf 91       	pop	r28
    506e:	08 95       	ret

00005070 <free>:
    5070:	cf 93       	push	r28
    5072:	df 93       	push	r29
    5074:	00 97       	sbiw	r24, 0x00	; 0
    5076:	09 f4       	brne	.+2      	; 0x507a <free+0xa>
    5078:	91 c0       	rjmp	.+290    	; 0x519c <free+0x12c>
    507a:	fc 01       	movw	r30, r24
    507c:	32 97       	sbiw	r30, 0x02	; 2
    507e:	13 82       	std	Z+3, r1	; 0x03
    5080:	12 82       	std	Z+2, r1	; 0x02
    5082:	60 91 fd 03 	lds	r22, 0x03FD
    5086:	70 91 fe 03 	lds	r23, 0x03FE
    508a:	61 15       	cp	r22, r1
    508c:	71 05       	cpc	r23, r1
    508e:	81 f4       	brne	.+32     	; 0x50b0 <free+0x40>
    5090:	20 81       	ld	r18, Z
    5092:	31 81       	ldd	r19, Z+1	; 0x01
    5094:	28 0f       	add	r18, r24
    5096:	39 1f       	adc	r19, r25
    5098:	80 91 fb 03 	lds	r24, 0x03FB
    509c:	90 91 fc 03 	lds	r25, 0x03FC
    50a0:	82 17       	cp	r24, r18
    50a2:	93 07       	cpc	r25, r19
    50a4:	99 f5       	brne	.+102    	; 0x510c <free+0x9c>
    50a6:	f0 93 fc 03 	sts	0x03FC, r31
    50aa:	e0 93 fb 03 	sts	0x03FB, r30
    50ae:	76 c0       	rjmp	.+236    	; 0x519c <free+0x12c>
    50b0:	db 01       	movw	r26, r22
    50b2:	80 e0       	ldi	r24, 0x00	; 0
    50b4:	90 e0       	ldi	r25, 0x00	; 0
    50b6:	02 c0       	rjmp	.+4      	; 0x50bc <free+0x4c>
    50b8:	cd 01       	movw	r24, r26
    50ba:	d9 01       	movw	r26, r18
    50bc:	ae 17       	cp	r26, r30
    50be:	bf 07       	cpc	r27, r31
    50c0:	48 f4       	brcc	.+18     	; 0x50d4 <free+0x64>
    50c2:	12 96       	adiw	r26, 0x02	; 2
    50c4:	2d 91       	ld	r18, X+
    50c6:	3c 91       	ld	r19, X
    50c8:	13 97       	sbiw	r26, 0x03	; 3
    50ca:	21 15       	cp	r18, r1
    50cc:	31 05       	cpc	r19, r1
    50ce:	a1 f7       	brne	.-24     	; 0x50b8 <free+0x48>
    50d0:	cd 01       	movw	r24, r26
    50d2:	21 c0       	rjmp	.+66     	; 0x5116 <free+0xa6>
    50d4:	b3 83       	std	Z+3, r27	; 0x03
    50d6:	a2 83       	std	Z+2, r26	; 0x02
    50d8:	ef 01       	movw	r28, r30
    50da:	49 91       	ld	r20, Y+
    50dc:	59 91       	ld	r21, Y+
    50de:	9e 01       	movw	r18, r28
    50e0:	24 0f       	add	r18, r20
    50e2:	35 1f       	adc	r19, r21
    50e4:	a2 17       	cp	r26, r18
    50e6:	b3 07       	cpc	r27, r19
    50e8:	79 f4       	brne	.+30     	; 0x5108 <free+0x98>
    50ea:	2d 91       	ld	r18, X+
    50ec:	3c 91       	ld	r19, X
    50ee:	11 97       	sbiw	r26, 0x01	; 1
    50f0:	24 0f       	add	r18, r20
    50f2:	35 1f       	adc	r19, r21
    50f4:	2e 5f       	subi	r18, 0xFE	; 254
    50f6:	3f 4f       	sbci	r19, 0xFF	; 255
    50f8:	31 83       	std	Z+1, r19	; 0x01
    50fa:	20 83       	st	Z, r18
    50fc:	12 96       	adiw	r26, 0x02	; 2
    50fe:	2d 91       	ld	r18, X+
    5100:	3c 91       	ld	r19, X
    5102:	13 97       	sbiw	r26, 0x03	; 3
    5104:	33 83       	std	Z+3, r19	; 0x03
    5106:	22 83       	std	Z+2, r18	; 0x02
    5108:	00 97       	sbiw	r24, 0x00	; 0
    510a:	29 f4       	brne	.+10     	; 0x5116 <free+0xa6>
    510c:	f0 93 fe 03 	sts	0x03FE, r31
    5110:	e0 93 fd 03 	sts	0x03FD, r30
    5114:	43 c0       	rjmp	.+134    	; 0x519c <free+0x12c>
    5116:	dc 01       	movw	r26, r24
    5118:	13 96       	adiw	r26, 0x03	; 3
    511a:	fc 93       	st	X, r31
    511c:	ee 93       	st	-X, r30
    511e:	12 97       	sbiw	r26, 0x02	; 2
    5120:	4d 91       	ld	r20, X+
    5122:	5d 91       	ld	r21, X+
    5124:	a4 0f       	add	r26, r20
    5126:	b5 1f       	adc	r27, r21
    5128:	ea 17       	cp	r30, r26
    512a:	fb 07       	cpc	r31, r27
    512c:	69 f4       	brne	.+26     	; 0x5148 <free+0xd8>
    512e:	20 81       	ld	r18, Z
    5130:	31 81       	ldd	r19, Z+1	; 0x01
    5132:	24 0f       	add	r18, r20
    5134:	35 1f       	adc	r19, r21
    5136:	2e 5f       	subi	r18, 0xFE	; 254
    5138:	3f 4f       	sbci	r19, 0xFF	; 255
    513a:	ec 01       	movw	r28, r24
    513c:	39 83       	std	Y+1, r19	; 0x01
    513e:	28 83       	st	Y, r18
    5140:	22 81       	ldd	r18, Z+2	; 0x02
    5142:	33 81       	ldd	r19, Z+3	; 0x03
    5144:	3b 83       	std	Y+3, r19	; 0x03
    5146:	2a 83       	std	Y+2, r18	; 0x02
    5148:	e0 e0       	ldi	r30, 0x00	; 0
    514a:	f0 e0       	ldi	r31, 0x00	; 0
    514c:	02 c0       	rjmp	.+4      	; 0x5152 <free+0xe2>
    514e:	fb 01       	movw	r30, r22
    5150:	bc 01       	movw	r22, r24
    5152:	db 01       	movw	r26, r22
    5154:	12 96       	adiw	r26, 0x02	; 2
    5156:	8d 91       	ld	r24, X+
    5158:	9c 91       	ld	r25, X
    515a:	13 97       	sbiw	r26, 0x03	; 3
    515c:	00 97       	sbiw	r24, 0x00	; 0
    515e:	b9 f7       	brne	.-18     	; 0x514e <free+0xde>
    5160:	9b 01       	movw	r18, r22
    5162:	2e 5f       	subi	r18, 0xFE	; 254
    5164:	3f 4f       	sbci	r19, 0xFF	; 255
    5166:	8d 91       	ld	r24, X+
    5168:	9c 91       	ld	r25, X
    516a:	11 97       	sbiw	r26, 0x01	; 1
    516c:	82 0f       	add	r24, r18
    516e:	93 1f       	adc	r25, r19
    5170:	40 91 fb 03 	lds	r20, 0x03FB
    5174:	50 91 fc 03 	lds	r21, 0x03FC
    5178:	48 17       	cp	r20, r24
    517a:	59 07       	cpc	r21, r25
    517c:	79 f4       	brne	.+30     	; 0x519c <free+0x12c>
    517e:	30 97       	sbiw	r30, 0x00	; 0
    5180:	29 f4       	brne	.+10     	; 0x518c <free+0x11c>
    5182:	10 92 fe 03 	sts	0x03FE, r1
    5186:	10 92 fd 03 	sts	0x03FD, r1
    518a:	02 c0       	rjmp	.+4      	; 0x5190 <free+0x120>
    518c:	13 82       	std	Z+3, r1	; 0x03
    518e:	12 82       	std	Z+2, r1	; 0x02
    5190:	22 50       	subi	r18, 0x02	; 2
    5192:	30 40       	sbci	r19, 0x00	; 0
    5194:	30 93 fc 03 	sts	0x03FC, r19
    5198:	20 93 fb 03 	sts	0x03FB, r18
    519c:	df 91       	pop	r29
    519e:	cf 91       	pop	r28
    51a0:	08 95       	ret

000051a2 <realloc>:
    51a2:	a0 e0       	ldi	r26, 0x00	; 0
    51a4:	b0 e0       	ldi	r27, 0x00	; 0
    51a6:	e7 ed       	ldi	r30, 0xD7	; 215
    51a8:	f8 e2       	ldi	r31, 0x28	; 40
    51aa:	0c 94 eb 26 	jmp	0x4dd6	; 0x4dd6 <__prologue_saves__+0xc>
    51ae:	8c 01       	movw	r16, r24
    51b0:	cb 01       	movw	r24, r22
    51b2:	01 15       	cp	r16, r1
    51b4:	11 05       	cpc	r17, r1
    51b6:	29 f4       	brne	.+10     	; 0x51c2 <realloc+0x20>
    51b8:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <malloc>
    51bc:	08 2f       	mov	r16, r24
    51be:	19 2f       	mov	r17, r25
    51c0:	b5 c0       	rjmp	.+362    	; 0x532c <realloc+0x18a>
    51c2:	d8 01       	movw	r26, r16
    51c4:	12 97       	sbiw	r26, 0x02	; 2
    51c6:	98 01       	movw	r18, r16
    51c8:	26 0f       	add	r18, r22
    51ca:	37 1f       	adc	r19, r23
    51cc:	2a 17       	cp	r18, r26
    51ce:	3b 07       	cpc	r19, r27
    51d0:	08 f4       	brcc	.+2      	; 0x51d4 <realloc+0x32>
    51d2:	aa c0       	rjmp	.+340    	; 0x5328 <realloc+0x186>
    51d4:	ed 90       	ld	r14, X+
    51d6:	fc 90       	ld	r15, X
    51d8:	11 97       	sbiw	r26, 0x01	; 1
    51da:	e6 16       	cp	r14, r22
    51dc:	f7 06       	cpc	r15, r23
    51de:	d0 f0       	brcs	.+52     	; 0x5214 <realloc+0x72>
    51e0:	45 e0       	ldi	r20, 0x05	; 5
    51e2:	e4 16       	cp	r14, r20
    51e4:	f1 04       	cpc	r15, r1
    51e6:	08 f4       	brcc	.+2      	; 0x51ea <realloc+0x48>
    51e8:	a1 c0       	rjmp	.+322    	; 0x532c <realloc+0x18a>
    51ea:	a7 01       	movw	r20, r14
    51ec:	44 50       	subi	r20, 0x04	; 4
    51ee:	50 40       	sbci	r21, 0x00	; 0
    51f0:	46 17       	cp	r20, r22
    51f2:	57 07       	cpc	r21, r23
    51f4:	08 f4       	brcc	.+2      	; 0x51f8 <realloc+0x56>
    51f6:	9a c0       	rjmp	.+308    	; 0x532c <realloc+0x18a>
    51f8:	a7 01       	movw	r20, r14
    51fa:	42 50       	subi	r20, 0x02	; 2
    51fc:	50 40       	sbci	r21, 0x00	; 0
    51fe:	46 1b       	sub	r20, r22
    5200:	57 0b       	sbc	r21, r23
    5202:	f9 01       	movw	r30, r18
    5204:	41 93       	st	Z+, r20
    5206:	51 93       	st	Z+, r21
    5208:	6d 93       	st	X+, r22
    520a:	7c 93       	st	X, r23
    520c:	cf 01       	movw	r24, r30
    520e:	0e 94 38 28 	call	0x5070	; 0x5070 <free>
    5212:	8c c0       	rjmp	.+280    	; 0x532c <realloc+0x18a>
    5214:	5b 01       	movw	r10, r22
    5216:	ae 18       	sub	r10, r14
    5218:	bf 08       	sbc	r11, r15
    521a:	48 01       	movw	r8, r16
    521c:	8e 0c       	add	r8, r14
    521e:	9f 1c       	adc	r9, r15
    5220:	e0 91 fd 03 	lds	r30, 0x03FD
    5224:	f0 91 fe 03 	lds	r31, 0x03FE
    5228:	cc 24       	eor	r12, r12
    522a:	dd 24       	eor	r13, r13
    522c:	c0 e0       	ldi	r28, 0x00	; 0
    522e:	d0 e0       	ldi	r29, 0x00	; 0
    5230:	41 c0       	rjmp	.+130    	; 0x52b4 <realloc+0x112>
    5232:	e8 15       	cp	r30, r8
    5234:	f9 05       	cpc	r31, r9
    5236:	99 f5       	brne	.+102    	; 0x529e <realloc+0xfc>
    5238:	60 81       	ld	r22, Z
    523a:	71 81       	ldd	r23, Z+1	; 0x01
    523c:	ab 01       	movw	r20, r22
    523e:	4e 5f       	subi	r20, 0xFE	; 254
    5240:	5f 4f       	sbci	r21, 0xFF	; 255
    5242:	4a 15       	cp	r20, r10
    5244:	5b 05       	cpc	r21, r11
    5246:	58 f1       	brcs	.+86     	; 0x529e <realloc+0xfc>
    5248:	ab 01       	movw	r20, r22
    524a:	4a 19       	sub	r20, r10
    524c:	5b 09       	sbc	r21, r11
    524e:	cc 24       	eor	r12, r12
    5250:	dd 24       	eor	r13, r13
    5252:	68 94       	set
    5254:	c1 f8       	bld	r12, 1
    5256:	c4 0e       	add	r12, r20
    5258:	d5 1e       	adc	r13, r21
    525a:	82 80       	ldd	r8, Z+2	; 0x02
    525c:	a3 80       	ldd	r10, Z+3	; 0x03
    525e:	e5 e0       	ldi	r30, 0x05	; 5
    5260:	ce 16       	cp	r12, r30
    5262:	d1 04       	cpc	r13, r1
    5264:	48 f0       	brcs	.+18     	; 0x5278 <realloc+0xd6>
    5266:	f9 01       	movw	r30, r18
    5268:	82 82       	std	Z+2, r8	; 0x02
    526a:	a3 82       	std	Z+3, r10	; 0x03
    526c:	51 83       	std	Z+1, r21	; 0x01
    526e:	40 83       	st	Z, r20
    5270:	11 96       	adiw	r26, 0x01	; 1
    5272:	9c 93       	st	X, r25
    5274:	8e 93       	st	-X, r24
    5276:	09 c0       	rjmp	.+18     	; 0x528a <realloc+0xe8>
    5278:	c7 01       	movw	r24, r14
    527a:	02 96       	adiw	r24, 0x02	; 2
    527c:	86 0f       	add	r24, r22
    527e:	97 1f       	adc	r25, r23
    5280:	11 96       	adiw	r26, 0x01	; 1
    5282:	9c 93       	st	X, r25
    5284:	8e 93       	st	-X, r24
    5286:	e8 2d       	mov	r30, r8
    5288:	fa 2d       	mov	r31, r10
    528a:	20 97       	sbiw	r28, 0x00	; 0
    528c:	19 f0       	breq	.+6      	; 0x5294 <realloc+0xf2>
    528e:	fb 83       	std	Y+3, r31	; 0x03
    5290:	ea 83       	std	Y+2, r30	; 0x02
    5292:	4c c0       	rjmp	.+152    	; 0x532c <realloc+0x18a>
    5294:	f0 93 fe 03 	sts	0x03FE, r31
    5298:	e0 93 fd 03 	sts	0x03FD, r30
    529c:	47 c0       	rjmp	.+142    	; 0x532c <realloc+0x18a>
    529e:	40 81       	ld	r20, Z
    52a0:	51 81       	ldd	r21, Z+1	; 0x01
    52a2:	c4 16       	cp	r12, r20
    52a4:	d5 06       	cpc	r13, r21
    52a6:	08 f4       	brcc	.+2      	; 0x52aa <realloc+0x108>
    52a8:	6a 01       	movw	r12, r20
    52aa:	ef 01       	movw	r28, r30
    52ac:	52 81       	ldd	r21, Z+2	; 0x02
    52ae:	43 81       	ldd	r20, Z+3	; 0x03
    52b0:	e5 2f       	mov	r30, r21
    52b2:	f4 2f       	mov	r31, r20
    52b4:	30 97       	sbiw	r30, 0x00	; 0
    52b6:	09 f0       	breq	.+2      	; 0x52ba <realloc+0x118>
    52b8:	bc cf       	rjmp	.-136    	; 0x5232 <realloc+0x90>
    52ba:	40 91 fb 03 	lds	r20, 0x03FB
    52be:	50 91 fc 03 	lds	r21, 0x03FC
    52c2:	48 15       	cp	r20, r8
    52c4:	59 05       	cpc	r21, r9
    52c6:	e9 f4       	brne	.+58     	; 0x5302 <realloc+0x160>
    52c8:	c8 16       	cp	r12, r24
    52ca:	d9 06       	cpc	r13, r25
    52cc:	d0 f4       	brcc	.+52     	; 0x5302 <realloc+0x160>
    52ce:	40 91 f7 02 	lds	r20, 0x02F7
    52d2:	50 91 f8 02 	lds	r21, 0x02F8
    52d6:	41 15       	cp	r20, r1
    52d8:	51 05       	cpc	r21, r1
    52da:	41 f4       	brne	.+16     	; 0x52ec <realloc+0x14a>
    52dc:	4d b7       	in	r20, 0x3d	; 61
    52de:	5e b7       	in	r21, 0x3e	; 62
    52e0:	60 91 f3 02 	lds	r22, 0x02F3
    52e4:	70 91 f4 02 	lds	r23, 0x02F4
    52e8:	46 1b       	sub	r20, r22
    52ea:	57 0b       	sbc	r21, r23
    52ec:	24 17       	cp	r18, r20
    52ee:	35 07       	cpc	r19, r21
    52f0:	d8 f4       	brcc	.+54     	; 0x5328 <realloc+0x186>
    52f2:	30 93 fc 03 	sts	0x03FC, r19
    52f6:	20 93 fb 03 	sts	0x03FB, r18
    52fa:	11 96       	adiw	r26, 0x01	; 1
    52fc:	9c 93       	st	X, r25
    52fe:	8e 93       	st	-X, r24
    5300:	15 c0       	rjmp	.+42     	; 0x532c <realloc+0x18a>
    5302:	0e 94 9e 27 	call	0x4f3c	; 0x4f3c <malloc>
    5306:	c8 2e       	mov	r12, r24
    5308:	e6 01       	movw	r28, r12
    530a:	6e 01       	movw	r12, r28
    530c:	d9 2e       	mov	r13, r25
    530e:	e6 01       	movw	r28, r12
    5310:	20 97       	sbiw	r28, 0x00	; 0
    5312:	51 f0       	breq	.+20     	; 0x5328 <realloc+0x186>
    5314:	8c 2d       	mov	r24, r12
    5316:	b8 01       	movw	r22, r16
    5318:	a7 01       	movw	r20, r14
    531a:	0e 94 db 29 	call	0x53b6	; 0x53b6 <memcpy>
    531e:	c8 01       	movw	r24, r16
    5320:	0e 94 38 28 	call	0x5070	; 0x5070 <free>
    5324:	86 01       	movw	r16, r12
    5326:	02 c0       	rjmp	.+4      	; 0x532c <realloc+0x18a>
    5328:	00 e0       	ldi	r16, 0x00	; 0
    532a:	10 e0       	ldi	r17, 0x00	; 0
    532c:	c8 01       	movw	r24, r16
    532e:	cd b7       	in	r28, 0x3d	; 61
    5330:	de b7       	in	r29, 0x3e	; 62
    5332:	ec e0       	ldi	r30, 0x0C	; 12
    5334:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__epilogue_restores__+0xc>

00005338 <atol>:
    5338:	1f 93       	push	r17
    533a:	fc 01       	movw	r30, r24
    533c:	99 27       	eor	r25, r25
    533e:	88 27       	eor	r24, r24
    5340:	bc 01       	movw	r22, r24
    5342:	e8 94       	clt
    5344:	11 91       	ld	r17, Z+
    5346:	10 32       	cpi	r17, 0x20	; 32
    5348:	e9 f3       	breq	.-6      	; 0x5344 <atol+0xc>
    534a:	19 30       	cpi	r17, 0x09	; 9
    534c:	10 f0       	brcs	.+4      	; 0x5352 <atol+0x1a>
    534e:	1e 30       	cpi	r17, 0x0E	; 14
    5350:	c8 f3       	brcs	.-14     	; 0x5344 <atol+0xc>
    5352:	1b 32       	cpi	r17, 0x2B	; 43
    5354:	51 f0       	breq	.+20     	; 0x536a <atol+0x32>
    5356:	1d 32       	cpi	r17, 0x2D	; 45
    5358:	49 f4       	brne	.+18     	; 0x536c <atol+0x34>
    535a:	68 94       	set
    535c:	06 c0       	rjmp	.+12     	; 0x536a <atol+0x32>
    535e:	0e 94 a8 2a 	call	0x5550	; 0x5550 <__mulsi_const_10>
    5362:	61 0f       	add	r22, r17
    5364:	71 1d       	adc	r23, r1
    5366:	81 1d       	adc	r24, r1
    5368:	91 1d       	adc	r25, r1
    536a:	11 91       	ld	r17, Z+
    536c:	10 53       	subi	r17, 0x30	; 48
    536e:	1a 30       	cpi	r17, 0x0A	; 10
    5370:	b0 f3       	brcs	.-20     	; 0x535e <atol+0x26>
    5372:	3e f4       	brtc	.+14     	; 0x5382 <atol+0x4a>
    5374:	90 95       	com	r25
    5376:	80 95       	com	r24
    5378:	70 95       	com	r23
    537a:	61 95       	neg	r22
    537c:	7f 4f       	sbci	r23, 0xFF	; 255
    537e:	8f 4f       	sbci	r24, 0xFF	; 255
    5380:	9f 4f       	sbci	r25, 0xFF	; 255
    5382:	1f 91       	pop	r17
    5384:	08 95       	ret

00005386 <isspace>:
    5386:	91 11       	cpse	r25, r1
    5388:	33 c1       	rjmp	.+614    	; 0x55f0 <__ctype_isfalse>
    538a:	80 32       	cpi	r24, 0x20	; 32
    538c:	19 f0       	breq	.+6      	; 0x5394 <isspace+0xe>
    538e:	89 50       	subi	r24, 0x09	; 9
    5390:	85 50       	subi	r24, 0x05	; 5
    5392:	d0 f7       	brcc	.-12     	; 0x5388 <isspace+0x2>
    5394:	08 95       	ret

00005396 <tolower>:
    5396:	91 11       	cpse	r25, r1
    5398:	08 95       	ret
    539a:	81 54       	subi	r24, 0x41	; 65
    539c:	8a 51       	subi	r24, 0x1A	; 26
    539e:	08 f4       	brcc	.+2      	; 0x53a2 <tolower+0xc>
    53a0:	80 5e       	subi	r24, 0xE0	; 224
    53a2:	85 5a       	subi	r24, 0xA5	; 165
    53a4:	08 95       	ret

000053a6 <toupper>:
    53a6:	91 11       	cpse	r25, r1
    53a8:	08 95       	ret
    53aa:	81 56       	subi	r24, 0x61	; 97
    53ac:	8a 51       	subi	r24, 0x1A	; 26
    53ae:	08 f4       	brcc	.+2      	; 0x53b2 <toupper+0xc>
    53b0:	80 52       	subi	r24, 0x20	; 32
    53b2:	85 58       	subi	r24, 0x85	; 133
    53b4:	08 95       	ret

000053b6 <memcpy>:
    53b6:	fb 01       	movw	r30, r22
    53b8:	dc 01       	movw	r26, r24
    53ba:	02 c0       	rjmp	.+4      	; 0x53c0 <memcpy+0xa>
    53bc:	01 90       	ld	r0, Z+
    53be:	0d 92       	st	X+, r0
    53c0:	41 50       	subi	r20, 0x01	; 1
    53c2:	50 40       	sbci	r21, 0x00	; 0
    53c4:	d8 f7       	brcc	.-10     	; 0x53bc <memcpy+0x6>
    53c6:	08 95       	ret

000053c8 <memmove>:
    53c8:	68 17       	cp	r22, r24
    53ca:	79 07       	cpc	r23, r25
    53cc:	68 f4       	brcc	.+26     	; 0x53e8 <memmove+0x20>
    53ce:	fb 01       	movw	r30, r22
    53d0:	dc 01       	movw	r26, r24
    53d2:	e4 0f       	add	r30, r20
    53d4:	f5 1f       	adc	r31, r21
    53d6:	a4 0f       	add	r26, r20
    53d8:	b5 1f       	adc	r27, r21
    53da:	02 c0       	rjmp	.+4      	; 0x53e0 <memmove+0x18>
    53dc:	02 90       	ld	r0, -Z
    53de:	0e 92       	st	-X, r0
    53e0:	41 50       	subi	r20, 0x01	; 1
    53e2:	50 40       	sbci	r21, 0x00	; 0
    53e4:	d8 f7       	brcc	.-10     	; 0x53dc <memmove+0x14>
    53e6:	08 95       	ret
    53e8:	0c 94 db 29 	jmp	0x53b6	; 0x53b6 <memcpy>

000053ec <strchr>:
    53ec:	fc 01       	movw	r30, r24
    53ee:	81 91       	ld	r24, Z+
    53f0:	86 17       	cp	r24, r22
    53f2:	21 f0       	breq	.+8      	; 0x53fc <strchr+0x10>
    53f4:	88 23       	and	r24, r24
    53f6:	d9 f7       	brne	.-10     	; 0x53ee <strchr+0x2>
    53f8:	99 27       	eor	r25, r25
    53fa:	08 95       	ret
    53fc:	31 97       	sbiw	r30, 0x01	; 1
    53fe:	cf 01       	movw	r24, r30
    5400:	08 95       	ret

00005402 <strcmp>:
    5402:	fb 01       	movw	r30, r22
    5404:	dc 01       	movw	r26, r24
    5406:	8d 91       	ld	r24, X+
    5408:	01 90       	ld	r0, Z+
    540a:	80 19       	sub	r24, r0
    540c:	01 10       	cpse	r0, r1
    540e:	d9 f3       	breq	.-10     	; 0x5406 <strcmp+0x4>
    5410:	99 0b       	sbc	r25, r25
    5412:	08 95       	ret

00005414 <strcpy>:
    5414:	fb 01       	movw	r30, r22
    5416:	dc 01       	movw	r26, r24
    5418:	01 90       	ld	r0, Z+
    541a:	0d 92       	st	X+, r0
    541c:	00 20       	and	r0, r0
    541e:	e1 f7       	brne	.-8      	; 0x5418 <strcpy+0x4>
    5420:	08 95       	ret

00005422 <strncmp>:
    5422:	fb 01       	movw	r30, r22
    5424:	dc 01       	movw	r26, r24
    5426:	41 50       	subi	r20, 0x01	; 1
    5428:	50 40       	sbci	r21, 0x00	; 0
    542a:	30 f0       	brcs	.+12     	; 0x5438 <strncmp+0x16>
    542c:	8d 91       	ld	r24, X+
    542e:	01 90       	ld	r0, Z+
    5430:	80 19       	sub	r24, r0
    5432:	19 f4       	brne	.+6      	; 0x543a <strncmp+0x18>
    5434:	00 20       	and	r0, r0
    5436:	b9 f7       	brne	.-18     	; 0x5426 <strncmp+0x4>
    5438:	88 1b       	sub	r24, r24
    543a:	99 0b       	sbc	r25, r25
    543c:	08 95       	ret

0000543e <strncpy>:
    543e:	fb 01       	movw	r30, r22
    5440:	dc 01       	movw	r26, r24
    5442:	41 50       	subi	r20, 0x01	; 1
    5444:	50 40       	sbci	r21, 0x00	; 0
    5446:	48 f0       	brcs	.+18     	; 0x545a <strncpy+0x1c>
    5448:	01 90       	ld	r0, Z+
    544a:	0d 92       	st	X+, r0
    544c:	00 20       	and	r0, r0
    544e:	c9 f7       	brne	.-14     	; 0x5442 <strncpy+0x4>
    5450:	01 c0       	rjmp	.+2      	; 0x5454 <strncpy+0x16>
    5452:	1d 92       	st	X+, r1
    5454:	41 50       	subi	r20, 0x01	; 1
    5456:	50 40       	sbci	r21, 0x00	; 0
    5458:	e0 f7       	brcc	.-8      	; 0x5452 <strncpy+0x14>
    545a:	08 95       	ret

0000545c <strrchr>:
    545c:	fc 01       	movw	r30, r24
    545e:	81 e0       	ldi	r24, 0x01	; 1
    5460:	90 e0       	ldi	r25, 0x00	; 0
    5462:	01 90       	ld	r0, Z+
    5464:	06 16       	cp	r0, r22
    5466:	09 f4       	brne	.+2      	; 0x546a <strrchr+0xe>
    5468:	cf 01       	movw	r24, r30
    546a:	00 20       	and	r0, r0
    546c:	d1 f7       	brne	.-12     	; 0x5462 <strrchr+0x6>
    546e:	01 97       	sbiw	r24, 0x01	; 1
    5470:	08 95       	ret

00005472 <strstr>:
    5472:	fb 01       	movw	r30, r22
    5474:	51 91       	ld	r21, Z+
    5476:	55 23       	and	r21, r21
    5478:	a9 f0       	breq	.+42     	; 0x54a4 <strstr+0x32>
    547a:	bf 01       	movw	r22, r30
    547c:	dc 01       	movw	r26, r24
    547e:	4d 91       	ld	r20, X+
    5480:	45 17       	cp	r20, r21
    5482:	41 11       	cpse	r20, r1
    5484:	e1 f7       	brne	.-8      	; 0x547e <strstr+0xc>
    5486:	59 f4       	brne	.+22     	; 0x549e <strstr+0x2c>
    5488:	cd 01       	movw	r24, r26
    548a:	01 90       	ld	r0, Z+
    548c:	00 20       	and	r0, r0
    548e:	49 f0       	breq	.+18     	; 0x54a2 <strstr+0x30>
    5490:	4d 91       	ld	r20, X+
    5492:	40 15       	cp	r20, r0
    5494:	41 11       	cpse	r20, r1
    5496:	c9 f3       	breq	.-14     	; 0x548a <strstr+0x18>
    5498:	fb 01       	movw	r30, r22
    549a:	41 11       	cpse	r20, r1
    549c:	ef cf       	rjmp	.-34     	; 0x547c <strstr+0xa>
    549e:	81 e0       	ldi	r24, 0x01	; 1
    54a0:	90 e0       	ldi	r25, 0x00	; 0
    54a2:	01 97       	sbiw	r24, 0x01	; 1
    54a4:	08 95       	ret

000054a6 <itoa>:
    54a6:	fb 01       	movw	r30, r22
    54a8:	9f 01       	movw	r18, r30
    54aa:	e8 94       	clt
    54ac:	42 30       	cpi	r20, 0x02	; 2
    54ae:	c4 f0       	brlt	.+48     	; 0x54e0 <itoa+0x3a>
    54b0:	45 32       	cpi	r20, 0x25	; 37
    54b2:	b4 f4       	brge	.+44     	; 0x54e0 <itoa+0x3a>
    54b4:	4a 30       	cpi	r20, 0x0A	; 10
    54b6:	29 f4       	brne	.+10     	; 0x54c2 <itoa+0x1c>
    54b8:	97 fb       	bst	r25, 7
    54ba:	1e f4       	brtc	.+6      	; 0x54c2 <itoa+0x1c>
    54bc:	90 95       	com	r25
    54be:	81 95       	neg	r24
    54c0:	9f 4f       	sbci	r25, 0xFF	; 255
    54c2:	64 2f       	mov	r22, r20
    54c4:	77 27       	eor	r23, r23
    54c6:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <__udivmodhi4>
    54ca:	80 5d       	subi	r24, 0xD0	; 208
    54cc:	8a 33       	cpi	r24, 0x3A	; 58
    54ce:	0c f0       	brlt	.+2      	; 0x54d2 <itoa+0x2c>
    54d0:	89 5d       	subi	r24, 0xD9	; 217
    54d2:	81 93       	st	Z+, r24
    54d4:	cb 01       	movw	r24, r22
    54d6:	00 97       	sbiw	r24, 0x00	; 0
    54d8:	a1 f7       	brne	.-24     	; 0x54c2 <itoa+0x1c>
    54da:	16 f4       	brtc	.+4      	; 0x54e0 <itoa+0x3a>
    54dc:	5d e2       	ldi	r21, 0x2D	; 45
    54de:	51 93       	st	Z+, r21
    54e0:	10 82       	st	Z, r1
    54e2:	c9 01       	movw	r24, r18
    54e4:	0c 94 fb 2a 	jmp	0x55f6	; 0x55f6 <strrev>

000054e8 <ltoa>:
    54e8:	fa 01       	movw	r30, r20
    54ea:	cf 93       	push	r28
    54ec:	ff 93       	push	r31
    54ee:	ef 93       	push	r30
    54f0:	22 30       	cpi	r18, 0x02	; 2
    54f2:	44 f1       	brlt	.+80     	; 0x5544 <ltoa+0x5c>
    54f4:	25 32       	cpi	r18, 0x25	; 37
    54f6:	34 f5       	brge	.+76     	; 0x5544 <ltoa+0x5c>
    54f8:	c2 2f       	mov	r28, r18
    54fa:	e8 94       	clt
    54fc:	ca 30       	cpi	r28, 0x0A	; 10
    54fe:	49 f4       	brne	.+18     	; 0x5512 <ltoa+0x2a>
    5500:	97 fb       	bst	r25, 7
    5502:	3e f4       	brtc	.+14     	; 0x5512 <ltoa+0x2a>
    5504:	90 95       	com	r25
    5506:	80 95       	com	r24
    5508:	70 95       	com	r23
    550a:	61 95       	neg	r22
    550c:	7f 4f       	sbci	r23, 0xFF	; 255
    550e:	8f 4f       	sbci	r24, 0xFF	; 255
    5510:	9f 4f       	sbci	r25, 0xFF	; 255
    5512:	2c 2f       	mov	r18, r28
    5514:	33 27       	eor	r19, r19
    5516:	44 27       	eor	r20, r20
    5518:	55 27       	eor	r21, r21
    551a:	ff 93       	push	r31
    551c:	ef 93       	push	r30
    551e:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__udivmodsi4>
    5522:	ef 91       	pop	r30
    5524:	ff 91       	pop	r31
    5526:	60 5d       	subi	r22, 0xD0	; 208
    5528:	6a 33       	cpi	r22, 0x3A	; 58
    552a:	0c f0       	brlt	.+2      	; 0x552e <ltoa+0x46>
    552c:	69 5d       	subi	r22, 0xD9	; 217
    552e:	61 93       	st	Z+, r22
    5530:	b9 01       	movw	r22, r18
    5532:	ca 01       	movw	r24, r20
    5534:	60 50       	subi	r22, 0x00	; 0
    5536:	70 40       	sbci	r23, 0x00	; 0
    5538:	80 40       	sbci	r24, 0x00	; 0
    553a:	90 40       	sbci	r25, 0x00	; 0
    553c:	51 f7       	brne	.-44     	; 0x5512 <ltoa+0x2a>
    553e:	16 f4       	brtc	.+4      	; 0x5544 <ltoa+0x5c>
    5540:	cd e2       	ldi	r28, 0x2D	; 45
    5542:	c1 93       	st	Z+, r28
    5544:	10 82       	st	Z, r1
    5546:	8f 91       	pop	r24
    5548:	9f 91       	pop	r25
    554a:	cf 91       	pop	r28
    554c:	0c 94 fb 2a 	jmp	0x55f6	; 0x55f6 <strrev>

00005550 <__mulsi_const_10>:
    5550:	59 2f       	mov	r21, r25
    5552:	48 2f       	mov	r20, r24
    5554:	37 2f       	mov	r19, r23
    5556:	26 2f       	mov	r18, r22
    5558:	66 0f       	add	r22, r22
    555a:	77 1f       	adc	r23, r23
    555c:	88 1f       	adc	r24, r24
    555e:	99 1f       	adc	r25, r25
    5560:	66 0f       	add	r22, r22
    5562:	77 1f       	adc	r23, r23
    5564:	88 1f       	adc	r24, r24
    5566:	99 1f       	adc	r25, r25
    5568:	62 0f       	add	r22, r18
    556a:	73 1f       	adc	r23, r19
    556c:	84 1f       	adc	r24, r20
    556e:	95 1f       	adc	r25, r21
    5570:	66 0f       	add	r22, r22
    5572:	77 1f       	adc	r23, r23
    5574:	88 1f       	adc	r24, r24
    5576:	99 1f       	adc	r25, r25
    5578:	08 95       	ret

0000557a <ultoa>:
    557a:	fa 01       	movw	r30, r20
    557c:	cf 93       	push	r28
    557e:	ff 93       	push	r31
    5580:	ef 93       	push	r30
    5582:	22 30       	cpi	r18, 0x02	; 2
    5584:	cc f0       	brlt	.+50     	; 0x55b8 <ultoa+0x3e>
    5586:	25 32       	cpi	r18, 0x25	; 37
    5588:	bc f4       	brge	.+46     	; 0x55b8 <ultoa+0x3e>
    558a:	c2 2f       	mov	r28, r18
    558c:	2c 2f       	mov	r18, r28
    558e:	33 27       	eor	r19, r19
    5590:	44 27       	eor	r20, r20
    5592:	55 27       	eor	r21, r21
    5594:	ff 93       	push	r31
    5596:	ef 93       	push	r30
    5598:	0e 94 c3 26 	call	0x4d86	; 0x4d86 <__udivmodsi4>
    559c:	ef 91       	pop	r30
    559e:	ff 91       	pop	r31
    55a0:	60 5d       	subi	r22, 0xD0	; 208
    55a2:	6a 33       	cpi	r22, 0x3A	; 58
    55a4:	0c f0       	brlt	.+2      	; 0x55a8 <ultoa+0x2e>
    55a6:	69 5d       	subi	r22, 0xD9	; 217
    55a8:	61 93       	st	Z+, r22
    55aa:	b9 01       	movw	r22, r18
    55ac:	ca 01       	movw	r24, r20
    55ae:	60 50       	subi	r22, 0x00	; 0
    55b0:	70 40       	sbci	r23, 0x00	; 0
    55b2:	80 40       	sbci	r24, 0x00	; 0
    55b4:	90 40       	sbci	r25, 0x00	; 0
    55b6:	51 f7       	brne	.-44     	; 0x558c <ultoa+0x12>
    55b8:	10 82       	st	Z, r1
    55ba:	8f 91       	pop	r24
    55bc:	9f 91       	pop	r25
    55be:	cf 91       	pop	r28
    55c0:	0c 94 fb 2a 	jmp	0x55f6	; 0x55f6 <strrev>

000055c4 <utoa>:
    55c4:	fb 01       	movw	r30, r22
    55c6:	9f 01       	movw	r18, r30
    55c8:	42 30       	cpi	r20, 0x02	; 2
    55ca:	74 f0       	brlt	.+28     	; 0x55e8 <utoa+0x24>
    55cc:	45 32       	cpi	r20, 0x25	; 37
    55ce:	64 f4       	brge	.+24     	; 0x55e8 <utoa+0x24>
    55d0:	64 2f       	mov	r22, r20
    55d2:	77 27       	eor	r23, r23
    55d4:	0e 94 9c 26 	call	0x4d38	; 0x4d38 <__udivmodhi4>
    55d8:	80 5d       	subi	r24, 0xD0	; 208
    55da:	8a 33       	cpi	r24, 0x3A	; 58
    55dc:	0c f0       	brlt	.+2      	; 0x55e0 <utoa+0x1c>
    55de:	89 5d       	subi	r24, 0xD9	; 217
    55e0:	81 93       	st	Z+, r24
    55e2:	cb 01       	movw	r24, r22
    55e4:	00 97       	sbiw	r24, 0x00	; 0
    55e6:	a1 f7       	brne	.-24     	; 0x55d0 <utoa+0xc>
    55e8:	10 82       	st	Z, r1
    55ea:	c9 01       	movw	r24, r18
    55ec:	0c 94 fb 2a 	jmp	0x55f6	; 0x55f6 <strrev>

000055f0 <__ctype_isfalse>:
    55f0:	99 27       	eor	r25, r25
    55f2:	88 27       	eor	r24, r24

000055f4 <__ctype_istrue>:
    55f4:	08 95       	ret

000055f6 <strrev>:
    55f6:	dc 01       	movw	r26, r24
    55f8:	fc 01       	movw	r30, r24
    55fa:	67 2f       	mov	r22, r23
    55fc:	71 91       	ld	r23, Z+
    55fe:	77 23       	and	r23, r23
    5600:	e1 f7       	brne	.-8      	; 0x55fa <strrev+0x4>
    5602:	32 97       	sbiw	r30, 0x02	; 2
    5604:	04 c0       	rjmp	.+8      	; 0x560e <strrev+0x18>
    5606:	7c 91       	ld	r23, X
    5608:	6d 93       	st	X+, r22
    560a:	70 83       	st	Z, r23
    560c:	62 91       	ld	r22, -Z
    560e:	ae 17       	cp	r26, r30
    5610:	bf 07       	cpc	r27, r31
    5612:	c8 f3       	brcs	.-14     	; 0x5606 <strrev+0x10>
    5614:	08 95       	ret

00005616 <_exit>:
    5616:	f8 94       	cli

00005618 <__stop_program>:
    5618:	ff cf       	rjmp	.-2      	; 0x5618 <__stop_program>
