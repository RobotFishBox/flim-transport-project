
ProjectController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000212  00800100  00005646  000056da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005646  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000dd  00800312  00800312  000058ec  2**0
                  ALLOC
  3 .stab         000097f8  00000000  00000000  000058ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00008d69  00000000  00000000  0000f0e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 62 00 	jmp	0xc4	; 0xc4 <__ctors_end>
       4:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       8:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
       c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      10:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      14:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      18:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      1c:	0c 94 1b 0a 	jmp	0x1436	; 0x1436 <__vector_7>
      20:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      24:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      28:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      2c:	0c 94 1f 0e 	jmp	0x1c3e	; 0x1c3e <__vector_11>
      30:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      34:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      38:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      3c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      40:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__vector_16>
      44:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      48:	0c 94 e9 24 	jmp	0x49d2	; 0x49d2 <__vector_18>
      4c:	0c 94 1a 25 	jmp	0x4a34	; 0x4a34 <__vector_19>
      50:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      54:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      58:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      5c:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      60:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>
      64:	0c 94 8a 00 	jmp	0x114	; 0x114 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	75 26       	eor	r7, r21

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d8 e0       	ldi	r29, 0x08	; 8
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	13 e0       	ldi	r17, 0x03	; 3
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e6 e4       	ldi	r30, 0x46	; 70
      d8:	f6 e5       	ldi	r31, 0x56	; 86
      da:	02 c0       	rjmp	.+4      	; 0xe0 <__do_copy_data+0x10>
      dc:	05 90       	lpm	r0, Z+
      de:	0d 92       	st	X+, r0
      e0:	a2 31       	cpi	r26, 0x12	; 18
      e2:	b1 07       	cpc	r27, r17
      e4:	d9 f7       	brne	.-10     	; 0xdc <__do_copy_data+0xc>

000000e6 <__do_clear_bss>:
      e6:	13 e0       	ldi	r17, 0x03	; 3
      e8:	a2 e1       	ldi	r26, 0x12	; 18
      ea:	b3 e0       	ldi	r27, 0x03	; 3
      ec:	01 c0       	rjmp	.+2      	; 0xf0 <.do_clear_bss_start>

000000ee <.do_clear_bss_loop>:
      ee:	1d 92       	st	X+, r1

000000f0 <.do_clear_bss_start>:
      f0:	af 3e       	cpi	r26, 0xEF	; 239
      f2:	b1 07       	cpc	r27, r17
      f4:	e1 f7       	brne	.-8      	; 0xee <.do_clear_bss_loop>

000000f6 <__do_global_ctors>:
      f6:	10 e0       	ldi	r17, 0x00	; 0
      f8:	c4 ec       	ldi	r28, 0xC4	; 196
      fa:	d0 e0       	ldi	r29, 0x00	; 0
      fc:	04 c0       	rjmp	.+8      	; 0x106 <__do_global_ctors+0x10>
      fe:	22 97       	sbiw	r28, 0x02	; 2
     100:	fe 01       	movw	r30, r28
     102:	0e 94 34 27 	call	0x4e68	; 0x4e68 <__tablejump__>
     106:	c2 3c       	cpi	r28, 0xC2	; 194
     108:	d1 07       	cpc	r29, r17
     10a:	c9 f7       	brne	.-14     	; 0xfe <__do_global_ctors+0x8>
     10c:	0e 94 1a 0f 	call	0x1e34	; 0x1e34 <main>
     110:	0c 94 21 2b 	jmp	0x5642	; 0x5642 <_exit>

00000114 <__bad_interrupt>:
     114:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000118 <_ZN12AccelStepper4stepEh>:
     118:	dc 01       	movw	r26, r24
     11a:	12 96       	adiw	r26, 0x02	; 2
     11c:	2c 91       	ld	r18, X
     11e:	12 97       	sbiw	r26, 0x02	; 2
     120:	21 30       	cpi	r18, 0x01	; 1
     122:	79 f0       	breq	.+30     	; 0x142 <_ZN12AccelStepper4stepEh+0x2a>
     124:	21 30       	cpi	r18, 0x01	; 1
     126:	28 f0       	brcs	.+10     	; 0x132 <_ZN12AccelStepper4stepEh+0x1a>
     128:	22 30       	cpi	r18, 0x02	; 2
     12a:	99 f0       	breq	.+38     	; 0x152 <_ZN12AccelStepper4stepEh+0x3a>
     12c:	24 30       	cpi	r18, 0x04	; 4
     12e:	01 f5       	brne	.+64     	; 0x170 <_ZN12AccelStepper4stepEh+0x58>
     130:	18 c0       	rjmp	.+48     	; 0x162 <_ZN12AccelStepper4stepEh+0x4a>
     132:	dc 01       	movw	r26, r24
     134:	ed 91       	ld	r30, X+
     136:	fc 91       	ld	r31, X
     138:	02 80       	ldd	r0, Z+2	; 0x02
     13a:	f3 81       	ldd	r31, Z+3	; 0x03
     13c:	e0 2d       	mov	r30, r0
     13e:	09 95       	icall
     140:	08 95       	ret
     142:	dc 01       	movw	r26, r24
     144:	ed 91       	ld	r30, X+
     146:	fc 91       	ld	r31, X
     148:	11 97       	sbiw	r26, 0x01	; 1
     14a:	04 80       	ldd	r0, Z+4	; 0x04
     14c:	f5 81       	ldd	r31, Z+5	; 0x05
     14e:	e0 2d       	mov	r30, r0
     150:	06 c0       	rjmp	.+12     	; 0x15e <_ZN12AccelStepper4stepEh+0x46>
     152:	dc 01       	movw	r26, r24
     154:	ed 91       	ld	r30, X+
     156:	fc 91       	ld	r31, X
     158:	06 80       	ldd	r0, Z+6	; 0x06
     15a:	f7 81       	ldd	r31, Z+7	; 0x07
     15c:	e0 2d       	mov	r30, r0
     15e:	09 95       	icall
     160:	08 95       	ret
     162:	dc 01       	movw	r26, r24
     164:	ed 91       	ld	r30, X+
     166:	fc 91       	ld	r31, X
     168:	00 84       	ldd	r0, Z+8	; 0x08
     16a:	f1 85       	ldd	r31, Z+9	; 0x09
     16c:	e0 2d       	mov	r30, r0
     16e:	09 95       	icall
     170:	08 95       	ret

00000172 <_ZN12AccelStepper5step0Ev>:
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	ec 01       	movw	r28, r24
     178:	6f 85       	ldd	r22, Y+15	; 0x0f
     17a:	78 89       	ldd	r23, Y+16	; 0x10
     17c:	89 89       	ldd	r24, Y+17	; 0x11
     17e:	9a 89       	ldd	r25, Y+18	; 0x12
     180:	20 e0       	ldi	r18, 0x00	; 0
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	a9 01       	movw	r20, r18
     186:	0e 94 31 13 	call	0x2662	; 0x2662 <__gtsf2>
     18a:	18 16       	cp	r1, r24
     18c:	1c f4       	brge	.+6      	; 0x194 <_ZN12AccelStepper5step0Ev+0x22>
     18e:	eb a1       	ldd	r30, Y+35	; 0x23
     190:	fc a1       	ldd	r31, Y+36	; 0x24
     192:	02 c0       	rjmp	.+4      	; 0x198 <_ZN12AccelStepper5step0Ev+0x26>
     194:	ed a1       	ldd	r30, Y+37	; 0x25
     196:	fe a1       	ldd	r31, Y+38	; 0x26
     198:	09 95       	icall
     19a:	df 91       	pop	r29
     19c:	cf 91       	pop	r28
     19e:	08 95       	ret

000001a0 <_ZN12AccelStepper5step4Eh>:
     1a0:	cf 93       	push	r28
     1a2:	df 93       	push	r29
     1a4:	ec 01       	movw	r28, r24
     1a6:	61 30       	cpi	r22, 0x01	; 1
     1a8:	71 f0       	breq	.+28     	; 0x1c6 <_ZN12AccelStepper5step4Eh+0x26>
     1aa:	61 30       	cpi	r22, 0x01	; 1
     1ac:	28 f0       	brcs	.+10     	; 0x1b8 <_ZN12AccelStepper5step4Eh+0x18>
     1ae:	62 30       	cpi	r22, 0x02	; 2
     1b0:	c9 f0       	breq	.+50     	; 0x1e4 <_ZN12AccelStepper5step4Eh+0x44>
     1b2:	63 30       	cpi	r22, 0x03	; 3
     1b4:	71 f5       	brne	.+92     	; 0x212 <_ZN12AccelStepper5step4Eh+0x72>
     1b6:	1d c0       	rjmp	.+58     	; 0x1f2 <_ZN12AccelStepper5step4Eh+0x52>
     1b8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ba:	61 e0       	ldi	r22, 0x01	; 1
     1bc:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     1c0:	8c 81       	ldd	r24, Y+4	; 0x04
     1c2:	60 e0       	ldi	r22, 0x00	; 0
     1c4:	06 c0       	rjmp	.+12     	; 0x1d2 <_ZN12AccelStepper5step4Eh+0x32>
     1c6:	8b 81       	ldd	r24, Y+3	; 0x03
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     1ce:	8c 81       	ldd	r24, Y+4	; 0x04
     1d0:	61 e0       	ldi	r22, 0x01	; 1
     1d2:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     1d6:	8d 81       	ldd	r24, Y+5	; 0x05
     1d8:	61 e0       	ldi	r22, 0x01	; 1
     1da:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     1de:	8e 81       	ldd	r24, Y+6	; 0x06
     1e0:	60 e0       	ldi	r22, 0x00	; 0
     1e2:	15 c0       	rjmp	.+42     	; 0x20e <_ZN12AccelStepper5step4Eh+0x6e>
     1e4:	8b 81       	ldd	r24, Y+3	; 0x03
     1e6:	60 e0       	ldi	r22, 0x00	; 0
     1e8:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     1ec:	8c 81       	ldd	r24, Y+4	; 0x04
     1ee:	61 e0       	ldi	r22, 0x01	; 1
     1f0:	06 c0       	rjmp	.+12     	; 0x1fe <_ZN12AccelStepper5step4Eh+0x5e>
     1f2:	8b 81       	ldd	r24, Y+3	; 0x03
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     1fa:	8c 81       	ldd	r24, Y+4	; 0x04
     1fc:	60 e0       	ldi	r22, 0x00	; 0
     1fe:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     202:	8d 81       	ldd	r24, Y+5	; 0x05
     204:	60 e0       	ldi	r22, 0x00	; 0
     206:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     20a:	8e 81       	ldd	r24, Y+6	; 0x06
     20c:	61 e0       	ldi	r22, 0x01	; 1
     20e:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     212:	df 91       	pop	r29
     214:	cf 91       	pop	r28
     216:	08 95       	ret

00000218 <_ZN12AccelStepper5step2Eh>:
     218:	cf 93       	push	r28
     21a:	df 93       	push	r29
     21c:	ec 01       	movw	r28, r24
     21e:	61 30       	cpi	r22, 0x01	; 1
     220:	51 f0       	breq	.+20     	; 0x236 <_ZN12AccelStepper5step2Eh+0x1e>
     222:	61 30       	cpi	r22, 0x01	; 1
     224:	28 f0       	brcs	.+10     	; 0x230 <_ZN12AccelStepper5step2Eh+0x18>
     226:	62 30       	cpi	r22, 0x02	; 2
     228:	69 f0       	breq	.+26     	; 0x244 <_ZN12AccelStepper5step2Eh+0x2c>
     22a:	63 30       	cpi	r22, 0x03	; 3
     22c:	b1 f4       	brne	.+44     	; 0x25a <_ZN12AccelStepper5step2Eh+0x42>
     22e:	0d c0       	rjmp	.+26     	; 0x24a <_ZN12AccelStepper5step2Eh+0x32>
     230:	8b 81       	ldd	r24, Y+3	; 0x03
     232:	60 e0       	ldi	r22, 0x00	; 0
     234:	02 c0       	rjmp	.+4      	; 0x23a <_ZN12AccelStepper5step2Eh+0x22>
     236:	8b 81       	ldd	r24, Y+3	; 0x03
     238:	61 e0       	ldi	r22, 0x01	; 1
     23a:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     23e:	8c 81       	ldd	r24, Y+4	; 0x04
     240:	61 e0       	ldi	r22, 0x01	; 1
     242:	09 c0       	rjmp	.+18     	; 0x256 <_ZN12AccelStepper5step2Eh+0x3e>
     244:	8b 81       	ldd	r24, Y+3	; 0x03
     246:	61 e0       	ldi	r22, 0x01	; 1
     248:	02 c0       	rjmp	.+4      	; 0x24e <_ZN12AccelStepper5step2Eh+0x36>
     24a:	8b 81       	ldd	r24, Y+3	; 0x03
     24c:	60 e0       	ldi	r22, 0x00	; 0
     24e:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     252:	8c 81       	ldd	r24, Y+4	; 0x04
     254:	60 e0       	ldi	r22, 0x00	; 0
     256:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <_ZN12AccelStepper5step1Eh>:
     260:	1f 93       	push	r17
     262:	cf 93       	push	r28
     264:	df 93       	push	r29
     266:	ec 01       	movw	r28, r24
     268:	11 e0       	ldi	r17, 0x01	; 1
     26a:	6f 85       	ldd	r22, Y+15	; 0x0f
     26c:	78 89       	ldd	r23, Y+16	; 0x10
     26e:	89 89       	ldd	r24, Y+17	; 0x11
     270:	9a 89       	ldd	r25, Y+18	; 0x12
     272:	20 e0       	ldi	r18, 0x00	; 0
     274:	30 e0       	ldi	r19, 0x00	; 0
     276:	a9 01       	movw	r20, r18
     278:	0e 94 31 13 	call	0x2662	; 0x2662 <__gtsf2>
     27c:	18 16       	cp	r1, r24
     27e:	0c f0       	brlt	.+2      	; 0x282 <_ZN12AccelStepper5step1Eh+0x22>
     280:	10 e0       	ldi	r17, 0x00	; 0
     282:	8c 81       	ldd	r24, Y+4	; 0x04
     284:	61 2f       	mov	r22, r17
     286:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     28a:	8b 81       	ldd	r24, Y+3	; 0x03
     28c:	61 e0       	ldi	r22, 0x01	; 1
     28e:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     292:	81 e0       	ldi	r24, 0x01	; 1
     294:	90 e0       	ldi	r25, 0x00	; 0
     296:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <delayMicroseconds>
     29a:	8b 81       	ldd	r24, Y+3	; 0x03
     29c:	60 e0       	ldi	r22, 0x00	; 0
     29e:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     2a2:	df 91       	pop	r29
     2a4:	cf 91       	pop	r28
     2a6:	1f 91       	pop	r17
     2a8:	08 95       	ret

000002aa <_ZN12AccelStepper12desiredSpeedEv>:
     2aa:	af 92       	push	r10
     2ac:	bf 92       	push	r11
     2ae:	cf 92       	push	r12
     2b0:	df 92       	push	r13
     2b2:	ef 92       	push	r14
     2b4:	ff 92       	push	r15
     2b6:	0f 93       	push	r16
     2b8:	1f 93       	push	r17
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
     2c0:	6b 85       	ldd	r22, Y+11	; 0x0b
     2c2:	7c 85       	ldd	r23, Y+12	; 0x0c
     2c4:	8d 85       	ldd	r24, Y+13	; 0x0d
     2c6:	9e 85       	ldd	r25, Y+14	; 0x0e
     2c8:	2f 81       	ldd	r18, Y+7	; 0x07
     2ca:	38 85       	ldd	r19, Y+8	; 0x08
     2cc:	49 85       	ldd	r20, Y+9	; 0x09
     2ce:	5a 85       	ldd	r21, Y+10	; 0x0a
     2d0:	62 1b       	sub	r22, r18
     2d2:	73 0b       	sbc	r23, r19
     2d4:	84 0b       	sbc	r24, r20
     2d6:	95 0b       	sbc	r25, r21
     2d8:	09 f4       	brne	.+2      	; 0x2dc <_ZN12AccelStepper12desiredSpeedEv+0x32>
     2da:	d9 c0       	rjmp	.+434    	; 0x48e <_ZN12AccelStepper12desiredSpeedEv+0x1e4>
     2dc:	16 16       	cp	r1, r22
     2de:	17 06       	cpc	r1, r23
     2e0:	18 06       	cpc	r1, r24
     2e2:	19 06       	cpc	r1, r25
     2e4:	8c f4       	brge	.+34     	; 0x308 <_ZN12AccelStepper12desiredSpeedEv+0x5e>
     2e6:	0e 94 c1 13 	call	0x2782	; 0x2782 <__floatsisf>
     2ea:	9b 01       	movw	r18, r22
     2ec:	ac 01       	movw	r20, r24
     2ee:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__addsf3>
     2f2:	2f 89       	ldd	r18, Y+23	; 0x17
     2f4:	38 8d       	ldd	r19, Y+24	; 0x18
     2f6:	49 8d       	ldd	r20, Y+25	; 0x19
     2f8:	5a 8d       	ldd	r21, Y+26	; 0x1a
     2fa:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
     2fe:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <sqrt>
     302:	7b 01       	movw	r14, r22
     304:	8c 01       	movw	r16, r24
     306:	1b c0       	rjmp	.+54     	; 0x33e <_ZN12AccelStepper12desiredSpeedEv+0x94>
     308:	90 95       	com	r25
     30a:	80 95       	com	r24
     30c:	70 95       	com	r23
     30e:	61 95       	neg	r22
     310:	7f 4f       	sbci	r23, 0xFF	; 255
     312:	8f 4f       	sbci	r24, 0xFF	; 255
     314:	9f 4f       	sbci	r25, 0xFF	; 255
     316:	0e 94 c1 13 	call	0x2782	; 0x2782 <__floatsisf>
     31a:	9b 01       	movw	r18, r22
     31c:	ac 01       	movw	r20, r24
     31e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__addsf3>
     322:	2f 89       	ldd	r18, Y+23	; 0x17
     324:	38 8d       	ldd	r19, Y+24	; 0x18
     326:	49 8d       	ldd	r20, Y+25	; 0x19
     328:	5a 8d       	ldd	r21, Y+26	; 0x1a
     32a:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
     32e:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <sqrt>
     332:	7b 01       	movw	r14, r22
     334:	8c 01       	movw	r16, r24
     336:	17 fb       	bst	r17, 7
     338:	10 95       	com	r17
     33a:	17 f9       	bld	r17, 7
     33c:	10 95       	com	r17
     33e:	af 84       	ldd	r10, Y+15	; 0x0f
     340:	b8 88       	ldd	r11, Y+16	; 0x10
     342:	c9 88       	ldd	r12, Y+17	; 0x11
     344:	da 88       	ldd	r13, Y+18	; 0x12
     346:	c8 01       	movw	r24, r16
     348:	b7 01       	movw	r22, r14
     34a:	a6 01       	movw	r20, r12
     34c:	95 01       	movw	r18, r10
     34e:	0e 94 31 13 	call	0x2662	; 0x2662 <__gtsf2>
     352:	18 16       	cp	r1, r24
     354:	0c f0       	brlt	.+2      	; 0x358 <_ZN12AccelStepper12desiredSpeedEv+0xae>
     356:	45 c0       	rjmp	.+138    	; 0x3e2 <_ZN12AccelStepper12desiredSpeedEv+0x138>
     358:	c6 01       	movw	r24, r12
     35a:	b5 01       	movw	r22, r10
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	a9 01       	movw	r20, r18
     362:	0e 94 01 13 	call	0x2602	; 0x2602 <__eqsf2>
     366:	88 23       	and	r24, r24
     368:	59 f4       	brne	.+22     	; 0x380 <_ZN12AccelStepper12desiredSpeedEv+0xd6>
     36a:	2f 89       	ldd	r18, Y+23	; 0x17
     36c:	38 8d       	ldd	r19, Y+24	; 0x18
     36e:	49 8d       	ldd	r20, Y+25	; 0x19
     370:	5a 8d       	ldd	r21, Y+26	; 0x1a
     372:	ca 01       	movw	r24, r20
     374:	b9 01       	movw	r22, r18
     376:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__addsf3>
     37a:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <sqrt>
     37e:	1d c0       	rjmp	.+58     	; 0x3ba <_ZN12AccelStepper12desiredSpeedEv+0x110>
     380:	6f 89       	ldd	r22, Y+23	; 0x17
     382:	78 8d       	ldd	r23, Y+24	; 0x18
     384:	89 8d       	ldd	r24, Y+25	; 0x19
     386:	9a 8d       	ldd	r25, Y+26	; 0x1a
     388:	a6 01       	movw	r20, r12
     38a:	95 01       	movw	r18, r10
     38c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__divsf3>
     390:	e6 2e       	mov	r14, r22
     392:	f7 2e       	mov	r15, r23
     394:	08 2f       	mov	r16, r24
     396:	19 2f       	mov	r17, r25
     398:	20 e0       	ldi	r18, 0x00	; 0
     39a:	30 e0       	ldi	r19, 0x00	; 0
     39c:	a9 01       	movw	r20, r18
     39e:	0e 94 31 13 	call	0x2662	; 0x2662 <__gtsf2>
     3a2:	18 16       	cp	r1, r24
     3a4:	24 f0       	brlt	.+8      	; 0x3ae <_ZN12AccelStepper12desiredSpeedEv+0x104>
     3a6:	17 fb       	bst	r17, 7
     3a8:	10 95       	com	r17
     3aa:	17 f9       	bld	r17, 7
     3ac:	10 95       	com	r17
     3ae:	c6 01       	movw	r24, r12
     3b0:	b5 01       	movw	r22, r10
     3b2:	a8 01       	movw	r20, r16
     3b4:	97 01       	movw	r18, r14
     3b6:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__addsf3>
     3ba:	c6 2e       	mov	r12, r22
     3bc:	b7 2e       	mov	r11, r23
     3be:	a8 2e       	mov	r10, r24
     3c0:	d9 2e       	mov	r13, r25
     3c2:	eb 88       	ldd	r14, Y+19	; 0x13
     3c4:	fc 88       	ldd	r15, Y+20	; 0x14
     3c6:	0d 89       	ldd	r16, Y+21	; 0x15
     3c8:	1e 89       	ldd	r17, Y+22	; 0x16
     3ca:	a8 01       	movw	r20, r16
     3cc:	97 01       	movw	r18, r14
     3ce:	0e 94 31 13 	call	0x2662	; 0x2662 <__gtsf2>
     3d2:	18 16       	cp	r1, r24
     3d4:	0c f4       	brge	.+2      	; 0x3d8 <_ZN12AccelStepper12desiredSpeedEv+0x12e>
     3d6:	65 c0       	rjmp	.+202    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3d8:	ec 2c       	mov	r14, r12
     3da:	fb 2c       	mov	r15, r11
     3dc:	0a 2d       	mov	r16, r10
     3de:	1d 2d       	mov	r17, r13
     3e0:	60 c0       	rjmp	.+192    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3e2:	c8 01       	movw	r24, r16
     3e4:	b7 01       	movw	r22, r14
     3e6:	a6 01       	movw	r20, r12
     3e8:	95 01       	movw	r18, r10
     3ea:	0e 94 91 13 	call	0x2722	; 0x2722 <__ltsf2>
     3ee:	87 ff       	sbrs	r24, 7
     3f0:	58 c0       	rjmp	.+176    	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     3f2:	c6 01       	movw	r24, r12
     3f4:	b5 01       	movw	r22, r10
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	a9 01       	movw	r20, r18
     3fc:	0e 94 01 13 	call	0x2602	; 0x2602 <__eqsf2>
     400:	88 23       	and	r24, r24
     402:	89 f4       	brne	.+34     	; 0x426 <_ZN12AccelStepper12desiredSpeedEv+0x17c>
     404:	2f 89       	ldd	r18, Y+23	; 0x17
     406:	38 8d       	ldd	r19, Y+24	; 0x18
     408:	49 8d       	ldd	r20, Y+25	; 0x19
     40a:	5a 8d       	ldd	r21, Y+26	; 0x1a
     40c:	ca 01       	movw	r24, r20
     40e:	b9 01       	movw	r22, r18
     410:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__addsf3>
     414:	0e 94 3c 27 	call	0x4e78	; 0x4e78 <sqrt>
     418:	5b 01       	movw	r10, r22
     41a:	6c 01       	movw	r12, r24
     41c:	d7 fa       	bst	r13, 7
     41e:	d0 94       	com	r13
     420:	d7 f8       	bld	r13, 7
     422:	d0 94       	com	r13
     424:	21 c0       	rjmp	.+66     	; 0x468 <_ZN12AccelStepper12desiredSpeedEv+0x1be>
     426:	6f 89       	ldd	r22, Y+23	; 0x17
     428:	78 8d       	ldd	r23, Y+24	; 0x18
     42a:	89 8d       	ldd	r24, Y+25	; 0x19
     42c:	9a 8d       	ldd	r25, Y+26	; 0x1a
     42e:	a6 01       	movw	r20, r12
     430:	95 01       	movw	r18, r10
     432:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__divsf3>
     436:	e6 2e       	mov	r14, r22
     438:	f7 2e       	mov	r15, r23
     43a:	08 2f       	mov	r16, r24
     43c:	19 2f       	mov	r17, r25
     43e:	20 e0       	ldi	r18, 0x00	; 0
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	a9 01       	movw	r20, r18
     444:	0e 94 31 13 	call	0x2662	; 0x2662 <__gtsf2>
     448:	18 16       	cp	r1, r24
     44a:	24 f0       	brlt	.+8      	; 0x454 <_ZN12AccelStepper12desiredSpeedEv+0x1aa>
     44c:	17 fb       	bst	r17, 7
     44e:	10 95       	com	r17
     450:	17 f9       	bld	r17, 7
     452:	10 95       	com	r17
     454:	c6 01       	movw	r24, r12
     456:	b5 01       	movw	r22, r10
     458:	a8 01       	movw	r20, r16
     45a:	97 01       	movw	r18, r14
     45c:	0e 94 28 11 	call	0x2250	; 0x2250 <__subsf3>
     460:	a6 2e       	mov	r10, r22
     462:	b7 2e       	mov	r11, r23
     464:	c8 2e       	mov	r12, r24
     466:	d9 2e       	mov	r13, r25
     468:	eb 88       	ldd	r14, Y+19	; 0x13
     46a:	fc 88       	ldd	r15, Y+20	; 0x14
     46c:	0d 89       	ldd	r16, Y+21	; 0x15
     46e:	1e 89       	ldd	r17, Y+22	; 0x16
     470:	17 fb       	bst	r17, 7
     472:	10 95       	com	r17
     474:	17 f9       	bld	r17, 7
     476:	10 95       	com	r17
     478:	c6 01       	movw	r24, r12
     47a:	b5 01       	movw	r22, r10
     47c:	a8 01       	movw	r20, r16
     47e:	97 01       	movw	r18, r14
     480:	0e 94 91 13 	call	0x2722	; 0x2722 <__ltsf2>
     484:	87 fd       	sbrc	r24, 7
     486:	0d c0       	rjmp	.+26     	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     488:	86 01       	movw	r16, r12
     48a:	75 01       	movw	r14, r10
     48c:	0a c0       	rjmp	.+20     	; 0x4a2 <_ZN12AccelStepper12desiredSpeedEv+0x1f8>
     48e:	0f 2e       	mov	r0, r31
     490:	f0 e0       	ldi	r31, 0x00	; 0
     492:	ef 2e       	mov	r14, r31
     494:	f0 e0       	ldi	r31, 0x00	; 0
     496:	ff 2e       	mov	r15, r31
     498:	f0 e0       	ldi	r31, 0x00	; 0
     49a:	0f 2f       	mov	r16, r31
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	1f 2f       	mov	r17, r31
     4a0:	f0 2d       	mov	r31, r0
     4a2:	6e 2d       	mov	r22, r14
     4a4:	7f 2d       	mov	r23, r15
     4a6:	80 2f       	mov	r24, r16
     4a8:	91 2f       	mov	r25, r17
     4aa:	df 91       	pop	r29
     4ac:	cf 91       	pop	r28
     4ae:	1f 91       	pop	r17
     4b0:	0f 91       	pop	r16
     4b2:	ff 90       	pop	r15
     4b4:	ef 90       	pop	r14
     4b6:	df 90       	pop	r13
     4b8:	cf 90       	pop	r12
     4ba:	bf 90       	pop	r11
     4bc:	af 90       	pop	r10
     4be:	08 95       	ret

000004c0 <_ZN12AccelStepper8runSpeedEv>:
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	0f 93       	push	r16
     4ce:	1f 93       	push	r17
     4d0:	cf 93       	push	r28
     4d2:	df 93       	push	r29
     4d4:	ec 01       	movw	r28, r24
     4d6:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <millis>
     4da:	5b 01       	movw	r10, r22
     4dc:	6c 01       	movw	r12, r24
     4de:	8b 8d       	ldd	r24, Y+27	; 0x1b
     4e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     4e2:	ad 8d       	ldd	r26, Y+29	; 0x1d
     4e4:	be 8d       	ldd	r27, Y+30	; 0x1e
     4e6:	2f 8d       	ldd	r18, Y+31	; 0x1f
     4e8:	38 a1       	ldd	r19, Y+32	; 0x20
     4ea:	49 a1       	ldd	r20, Y+33	; 0x21
     4ec:	5a a1       	ldd	r21, Y+34	; 0x22
     4ee:	82 0f       	add	r24, r18
     4f0:	93 1f       	adc	r25, r19
     4f2:	a4 1f       	adc	r26, r20
     4f4:	b5 1f       	adc	r27, r21
     4f6:	8a 15       	cp	r24, r10
     4f8:	9b 05       	cpc	r25, r11
     4fa:	ac 05       	cpc	r26, r12
     4fc:	bd 05       	cpc	r27, r13
     4fe:	c0 f5       	brcc	.+112    	; 0x570 <_ZN12AccelStepper8runSpeedEv+0xb0>
     500:	ef 84       	ldd	r14, Y+15	; 0x0f
     502:	f8 88       	ldd	r15, Y+16	; 0x10
     504:	09 89       	ldd	r16, Y+17	; 0x11
     506:	1a 89       	ldd	r17, Y+18	; 0x12
     508:	c8 01       	movw	r24, r16
     50a:	b7 01       	movw	r22, r14
     50c:	20 e0       	ldi	r18, 0x00	; 0
     50e:	30 e0       	ldi	r19, 0x00	; 0
     510:	a9 01       	movw	r20, r18
     512:	0e 94 31 13 	call	0x2662	; 0x2662 <__gtsf2>
     516:	18 16       	cp	r1, r24
     518:	44 f4       	brge	.+16     	; 0x52a <_ZN12AccelStepper8runSpeedEv+0x6a>
     51a:	8f 81       	ldd	r24, Y+7	; 0x07
     51c:	98 85       	ldd	r25, Y+8	; 0x08
     51e:	a9 85       	ldd	r26, Y+9	; 0x09
     520:	ba 85       	ldd	r27, Y+10	; 0x0a
     522:	01 96       	adiw	r24, 0x01	; 1
     524:	a1 1d       	adc	r26, r1
     526:	b1 1d       	adc	r27, r1
     528:	10 c0       	rjmp	.+32     	; 0x54a <_ZN12AccelStepper8runSpeedEv+0x8a>
     52a:	c8 01       	movw	r24, r16
     52c:	b7 01       	movw	r22, r14
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	a9 01       	movw	r20, r18
     534:	0e 94 91 13 	call	0x2722	; 0x2722 <__ltsf2>
     538:	87 ff       	sbrs	r24, 7
     53a:	0b c0       	rjmp	.+22     	; 0x552 <_ZN12AccelStepper8runSpeedEv+0x92>
     53c:	8f 81       	ldd	r24, Y+7	; 0x07
     53e:	98 85       	ldd	r25, Y+8	; 0x08
     540:	a9 85       	ldd	r26, Y+9	; 0x09
     542:	ba 85       	ldd	r27, Y+10	; 0x0a
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	a1 09       	sbc	r26, r1
     548:	b1 09       	sbc	r27, r1
     54a:	8f 83       	std	Y+7, r24	; 0x07
     54c:	98 87       	std	Y+8, r25	; 0x08
     54e:	a9 87       	std	Y+9, r26	; 0x09
     550:	ba 87       	std	Y+10, r27	; 0x0a
     552:	e8 81       	ld	r30, Y
     554:	f9 81       	ldd	r31, Y+1	; 0x01
     556:	6f 81       	ldd	r22, Y+7	; 0x07
     558:	63 70       	andi	r22, 0x03	; 3
     55a:	01 90       	ld	r0, Z+
     55c:	f0 81       	ld	r31, Z
     55e:	e0 2d       	mov	r30, r0
     560:	ce 01       	movw	r24, r28
     562:	09 95       	icall
     564:	af 8e       	std	Y+31, r10	; 0x1f
     566:	b8 a2       	std	Y+32, r11	; 0x20
     568:	c9 a2       	std	Y+33, r12	; 0x21
     56a:	da a2       	std	Y+34, r13	; 0x22
     56c:	81 e0       	ldi	r24, 0x01	; 1
     56e:	01 c0       	rjmp	.+2      	; 0x572 <_ZN12AccelStepper8runSpeedEv+0xb2>
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	df 91       	pop	r29
     574:	cf 91       	pop	r28
     576:	1f 91       	pop	r17
     578:	0f 91       	pop	r16
     57a:	ff 90       	pop	r15
     57c:	ef 90       	pop	r14
     57e:	df 90       	pop	r13
     580:	cf 90       	pop	r12
     582:	bf 90       	pop	r11
     584:	af 90       	pop	r10
     586:	08 95       	ret

00000588 <_ZN12AccelStepper12distanceToGoEv>:
     588:	fc 01       	movw	r30, r24
     58a:	23 85       	ldd	r18, Z+11	; 0x0b
     58c:	34 85       	ldd	r19, Z+12	; 0x0c
     58e:	45 85       	ldd	r20, Z+13	; 0x0d
     590:	56 85       	ldd	r21, Z+14	; 0x0e
     592:	87 81       	ldd	r24, Z+7	; 0x07
     594:	90 85       	ldd	r25, Z+8	; 0x08
     596:	a1 85       	ldd	r26, Z+9	; 0x09
     598:	b2 85       	ldd	r27, Z+10	; 0x0a
     59a:	28 1b       	sub	r18, r24
     59c:	39 0b       	sbc	r19, r25
     59e:	4a 0b       	sbc	r20, r26
     5a0:	5b 0b       	sbc	r21, r27
     5a2:	b9 01       	movw	r22, r18
     5a4:	ca 01       	movw	r24, r20
     5a6:	08 95       	ret

000005a8 <_ZN12AccelStepper14targetPositionEv>:
     5a8:	fc 01       	movw	r30, r24
     5aa:	63 85       	ldd	r22, Z+11	; 0x0b
     5ac:	74 85       	ldd	r23, Z+12	; 0x0c
     5ae:	85 85       	ldd	r24, Z+13	; 0x0d
     5b0:	96 85       	ldd	r25, Z+14	; 0x0e
     5b2:	08 95       	ret

000005b4 <_ZN12AccelStepper15currentPositionEv>:
     5b4:	fc 01       	movw	r30, r24
     5b6:	67 81       	ldd	r22, Z+7	; 0x07
     5b8:	70 85       	ldd	r23, Z+8	; 0x08
     5ba:	81 85       	ldd	r24, Z+9	; 0x09
     5bc:	92 85       	ldd	r25, Z+10	; 0x0a
     5be:	08 95       	ret

000005c0 <_ZN12AccelStepper18setCurrentPositionEl>:
     5c0:	fc 01       	movw	r30, r24
     5c2:	47 83       	std	Z+7, r20	; 0x07
     5c4:	50 87       	std	Z+8, r21	; 0x08
     5c6:	61 87       	std	Z+9, r22	; 0x09
     5c8:	72 87       	std	Z+10, r23	; 0x0a
     5ca:	08 95       	ret

000005cc <_ZN12AccelStepperC1EPFvvES1_>:
     5cc:	fc 01       	movw	r30, r24
     5ce:	84 e0       	ldi	r24, 0x04	; 4
     5d0:	91 e0       	ldi	r25, 0x01	; 1
     5d2:	91 83       	std	Z+1, r25	; 0x01
     5d4:	80 83       	st	Z, r24
     5d6:	12 82       	std	Z+2, r1	; 0x02
     5d8:	17 82       	std	Z+7, r1	; 0x07
     5da:	10 86       	std	Z+8, r1	; 0x08
     5dc:	11 86       	std	Z+9, r1	; 0x09
     5de:	12 86       	std	Z+10, r1	; 0x0a
     5e0:	13 86       	std	Z+11, r1	; 0x0b
     5e2:	14 86       	std	Z+12, r1	; 0x0c
     5e4:	15 86       	std	Z+13, r1	; 0x0d
     5e6:	16 86       	std	Z+14, r1	; 0x0e
     5e8:	80 e0       	ldi	r24, 0x00	; 0
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	dc 01       	movw	r26, r24
     5ee:	87 87       	std	Z+15, r24	; 0x0f
     5f0:	90 8b       	std	Z+16, r25	; 0x10
     5f2:	a1 8b       	std	Z+17, r26	; 0x11
     5f4:	b2 8b       	std	Z+18, r27	; 0x12
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	90 e0       	ldi	r25, 0x00	; 0
     5fa:	a0 e8       	ldi	r26, 0x80	; 128
     5fc:	bf e3       	ldi	r27, 0x3F	; 63
     5fe:	83 8b       	std	Z+19, r24	; 0x13
     600:	94 8b       	std	Z+20, r25	; 0x14
     602:	a5 8b       	std	Z+21, r26	; 0x15
     604:	b6 8b       	std	Z+22, r27	; 0x16
     606:	87 8b       	std	Z+23, r24	; 0x17
     608:	90 8f       	std	Z+24, r25	; 0x18
     60a:	a1 8f       	std	Z+25, r26	; 0x19
     60c:	b2 8f       	std	Z+26, r27	; 0x1a
     60e:	13 8e       	std	Z+27, r1	; 0x1b
     610:	14 8e       	std	Z+28, r1	; 0x1c
     612:	15 8e       	std	Z+29, r1	; 0x1d
     614:	16 8e       	std	Z+30, r1	; 0x1e
     616:	17 8e       	std	Z+31, r1	; 0x1f
     618:	10 a2       	std	Z+32, r1	; 0x20
     61a:	11 a2       	std	Z+33, r1	; 0x21
     61c:	12 a2       	std	Z+34, r1	; 0x22
     61e:	13 82       	std	Z+3, r1	; 0x03
     620:	14 82       	std	Z+4, r1	; 0x04
     622:	15 82       	std	Z+5, r1	; 0x05
     624:	16 82       	std	Z+6, r1	; 0x06
     626:	74 a3       	std	Z+36, r23	; 0x24
     628:	63 a3       	std	Z+35, r22	; 0x23
     62a:	56 a3       	std	Z+38, r21	; 0x26
     62c:	45 a3       	std	Z+37, r20	; 0x25
     62e:	08 95       	ret

00000630 <_ZN12AccelStepper8setSpeedEf>:
     630:	af 92       	push	r10
     632:	bf 92       	push	r11
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	0f 93       	push	r16
     63e:	1f 93       	push	r17
     640:	cf 93       	push	r28
     642:	df 93       	push	r29
     644:	ec 01       	movw	r28, r24
     646:	9a 01       	movw	r18, r20
     648:	ab 01       	movw	r20, r22
     64a:	2f 87       	std	Y+15, r18	; 0x0f
     64c:	38 8b       	std	Y+16, r19	; 0x10
     64e:	49 8b       	std	Y+17, r20	; 0x11
     650:	5a 8b       	std	Y+18, r21	; 0x12
     652:	60 e0       	ldi	r22, 0x00	; 0
     654:	70 e0       	ldi	r23, 0x00	; 0
     656:	8a e7       	ldi	r24, 0x7A	; 122
     658:	94 e4       	ldi	r25, 0x44	; 68
     65a:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__divsf3>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	5b 01       	movw	r10, r22
     664:	6c 01       	movw	r12, r24
     666:	20 e0       	ldi	r18, 0x00	; 0
     668:	30 e0       	ldi	r19, 0x00	; 0
     66a:	a9 01       	movw	r20, r18
     66c:	0e 94 31 13 	call	0x2662	; 0x2662 <__gtsf2>
     670:	18 16       	cp	r1, r24
     672:	1c f4       	brge	.+6      	; 0x67a <_ZN12AccelStepper8setSpeedEf+0x4a>
     674:	b7 01       	movw	r22, r14
     676:	c8 01       	movw	r24, r16
     678:	03 c0       	rjmp	.+6      	; 0x680 <_ZN12AccelStepper8setSpeedEf+0x50>
     67a:	c6 01       	movw	r24, r12
     67c:	b5 01       	movw	r22, r10
     67e:	90 58       	subi	r25, 0x80	; 128
     680:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__fixunssfsi>
     684:	6b 8f       	std	Y+27, r22	; 0x1b
     686:	7c 8f       	std	Y+28, r23	; 0x1c
     688:	8d 8f       	std	Y+29, r24	; 0x1d
     68a:	9e 8f       	std	Y+30, r25	; 0x1e
     68c:	df 91       	pop	r29
     68e:	cf 91       	pop	r28
     690:	1f 91       	pop	r17
     692:	0f 91       	pop	r16
     694:	ff 90       	pop	r15
     696:	ef 90       	pop	r14
     698:	df 90       	pop	r13
     69a:	cf 90       	pop	r12
     69c:	bf 90       	pop	r11
     69e:	af 90       	pop	r10
     6a0:	08 95       	ret

000006a2 <_ZN12AccelStepper15computeNewSpeedEv>:
     6a2:	cf 93       	push	r28
     6a4:	df 93       	push	r29
     6a6:	ec 01       	movw	r28, r24
     6a8:	e8 81       	ld	r30, Y
     6aa:	f9 81       	ldd	r31, Y+1	; 0x01
     6ac:	02 84       	ldd	r0, Z+10	; 0x0a
     6ae:	f3 85       	ldd	r31, Z+11	; 0x0b
     6b0:	e0 2d       	mov	r30, r0
     6b2:	09 95       	icall
     6b4:	ab 01       	movw	r20, r22
     6b6:	bc 01       	movw	r22, r24
     6b8:	ce 01       	movw	r24, r28
     6ba:	0e 94 18 03 	call	0x630	; 0x630 <_ZN12AccelStepper8setSpeedEf>
     6be:	df 91       	pop	r29
     6c0:	cf 91       	pop	r28
     6c2:	08 95       	ret

000006c4 <_ZN12AccelStepper15setAccelerationEf>:
     6c4:	fc 01       	movw	r30, r24
     6c6:	47 8b       	std	Z+23, r20	; 0x17
     6c8:	50 8f       	std	Z+24, r21	; 0x18
     6ca:	61 8f       	std	Z+25, r22	; 0x19
     6cc:	72 8f       	std	Z+26, r23	; 0x1a
     6ce:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     6d2:	08 95       	ret

000006d4 <_ZN12AccelStepper11setMaxSpeedEf>:
     6d4:	fc 01       	movw	r30, r24
     6d6:	43 8b       	std	Z+19, r20	; 0x13
     6d8:	54 8b       	std	Z+20, r21	; 0x14
     6da:	65 8b       	std	Z+21, r22	; 0x15
     6dc:	76 8b       	std	Z+22, r23	; 0x16
     6de:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     6e2:	08 95       	ret

000006e4 <_ZN12AccelStepper3runEv>:
     6e4:	cf 93       	push	r28
     6e6:	df 93       	push	r29
     6e8:	ec 01       	movw	r28, r24
     6ea:	2b 85       	ldd	r18, Y+11	; 0x0b
     6ec:	3c 85       	ldd	r19, Y+12	; 0x0c
     6ee:	4d 85       	ldd	r20, Y+13	; 0x0d
     6f0:	5e 85       	ldd	r21, Y+14	; 0x0e
     6f2:	8f 81       	ldd	r24, Y+7	; 0x07
     6f4:	98 85       	ldd	r25, Y+8	; 0x08
     6f6:	a9 85       	ldd	r26, Y+9	; 0x09
     6f8:	ba 85       	ldd	r27, Y+10	; 0x0a
     6fa:	28 17       	cp	r18, r24
     6fc:	39 07       	cpc	r19, r25
     6fe:	4a 07       	cpc	r20, r26
     700:	5b 07       	cpc	r21, r27
     702:	49 f0       	breq	.+18     	; 0x716 <_ZN12AccelStepper3runEv+0x32>
     704:	ce 01       	movw	r24, r28
     706:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN12AccelStepper8runSpeedEv>
     70a:	88 23       	and	r24, r24
     70c:	31 f0       	breq	.+12     	; 0x71a <_ZN12AccelStepper3runEv+0x36>
     70e:	ce 01       	movw	r24, r28
     710:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     714:	02 c0       	rjmp	.+4      	; 0x71a <_ZN12AccelStepper3runEv+0x36>
     716:	80 e0       	ldi	r24, 0x00	; 0
     718:	01 c0       	rjmp	.+2      	; 0x71c <_ZN12AccelStepper3runEv+0x38>
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	df 91       	pop	r29
     71e:	cf 91       	pop	r28
     720:	08 95       	ret

00000722 <_ZN12AccelStepper6moveToEl>:
     722:	fc 01       	movw	r30, r24
     724:	43 87       	std	Z+11, r20	; 0x0b
     726:	54 87       	std	Z+12, r21	; 0x0c
     728:	65 87       	std	Z+13, r22	; 0x0d
     72a:	76 87       	std	Z+14, r23	; 0x0e
     72c:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     730:	08 95       	ret

00000732 <_ZN12AccelStepper4moveEl>:
     732:	0f 93       	push	r16
     734:	1f 93       	push	r17
     736:	fc 01       	movw	r30, r24
     738:	07 81       	ldd	r16, Z+7	; 0x07
     73a:	10 85       	ldd	r17, Z+8	; 0x08
     73c:	21 85       	ldd	r18, Z+9	; 0x09
     73e:	32 85       	ldd	r19, Z+10	; 0x0a
     740:	40 0f       	add	r20, r16
     742:	51 1f       	adc	r21, r17
     744:	62 1f       	adc	r22, r18
     746:	73 1f       	adc	r23, r19
     748:	43 87       	std	Z+11, r20	; 0x0b
     74a:	54 87       	std	Z+12, r21	; 0x0c
     74c:	65 87       	std	Z+13, r22	; 0x0d
     74e:	76 87       	std	Z+14, r23	; 0x0e
     750:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     754:	1f 91       	pop	r17
     756:	0f 91       	pop	r16
     758:	08 95       	ret

0000075a <_ZN12AccelStepper5speedEv>:
     75a:	fc 01       	movw	r30, r24
     75c:	57 85       	ldd	r21, Z+15	; 0x0f
     75e:	40 89       	ldd	r20, Z+16	; 0x10
     760:	31 89       	ldd	r19, Z+17	; 0x11
     762:	22 89       	ldd	r18, Z+18	; 0x12
     764:	65 2f       	mov	r22, r21
     766:	74 2f       	mov	r23, r20
     768:	83 2f       	mov	r24, r19
     76a:	92 2f       	mov	r25, r18
     76c:	08 95       	ret

0000076e <_ZN12AccelStepper14disableOutputsEv>:
     76e:	cf 93       	push	r28
     770:	df 93       	push	r29
     772:	ec 01       	movw	r28, r24
     774:	8a 81       	ldd	r24, Y+2	; 0x02
     776:	88 23       	and	r24, r24
     778:	99 f0       	breq	.+38     	; 0x7a0 <_ZN12AccelStepper14disableOutputsEv+0x32>
     77a:	8b 81       	ldd	r24, Y+3	; 0x03
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     782:	8c 81       	ldd	r24, Y+4	; 0x04
     784:	60 e0       	ldi	r22, 0x00	; 0
     786:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     78a:	8a 81       	ldd	r24, Y+2	; 0x02
     78c:	84 30       	cpi	r24, 0x04	; 4
     78e:	41 f4       	brne	.+16     	; 0x7a0 <_ZN12AccelStepper14disableOutputsEv+0x32>
     790:	8d 81       	ldd	r24, Y+5	; 0x05
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     798:	8e 81       	ldd	r24, Y+6	; 0x06
     79a:	60 e0       	ldi	r22, 0x00	; 0
     79c:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     7a0:	df 91       	pop	r29
     7a2:	cf 91       	pop	r28
     7a4:	08 95       	ret

000007a6 <_ZN12AccelStepper13enableOutputsEv>:
     7a6:	cf 93       	push	r28
     7a8:	df 93       	push	r29
     7aa:	ec 01       	movw	r28, r24
     7ac:	8a 81       	ldd	r24, Y+2	; 0x02
     7ae:	88 23       	and	r24, r24
     7b0:	99 f0       	breq	.+38     	; 0x7d8 <_ZN12AccelStepper13enableOutputsEv+0x32>
     7b2:	8b 81       	ldd	r24, Y+3	; 0x03
     7b4:	61 e0       	ldi	r22, 0x01	; 1
     7b6:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
     7ba:	8c 81       	ldd	r24, Y+4	; 0x04
     7bc:	61 e0       	ldi	r22, 0x01	; 1
     7be:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
     7c2:	8a 81       	ldd	r24, Y+2	; 0x02
     7c4:	84 30       	cpi	r24, 0x04	; 4
     7c6:	41 f4       	brne	.+16     	; 0x7d8 <_ZN12AccelStepper13enableOutputsEv+0x32>
     7c8:	8d 81       	ldd	r24, Y+5	; 0x05
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
     7d0:	8e 81       	ldd	r24, Y+6	; 0x06
     7d2:	61 e0       	ldi	r22, 0x01	; 1
     7d4:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
     7d8:	df 91       	pop	r29
     7da:	cf 91       	pop	r28
     7dc:	08 95       	ret

000007de <_ZN12AccelStepperC1Ehhhhh>:
     7de:	ef 92       	push	r14
     7e0:	0f 93       	push	r16
     7e2:	fc 01       	movw	r30, r24
     7e4:	84 e0       	ldi	r24, 0x04	; 4
     7e6:	91 e0       	ldi	r25, 0x01	; 1
     7e8:	91 83       	std	Z+1, r25	; 0x01
     7ea:	80 83       	st	Z, r24
     7ec:	62 83       	std	Z+2, r22	; 0x02
     7ee:	17 82       	std	Z+7, r1	; 0x07
     7f0:	10 86       	std	Z+8, r1	; 0x08
     7f2:	11 86       	std	Z+9, r1	; 0x09
     7f4:	12 86       	std	Z+10, r1	; 0x0a
     7f6:	13 86       	std	Z+11, r1	; 0x0b
     7f8:	14 86       	std	Z+12, r1	; 0x0c
     7fa:	15 86       	std	Z+13, r1	; 0x0d
     7fc:	16 86       	std	Z+14, r1	; 0x0e
     7fe:	80 e0       	ldi	r24, 0x00	; 0
     800:	90 e0       	ldi	r25, 0x00	; 0
     802:	dc 01       	movw	r26, r24
     804:	87 87       	std	Z+15, r24	; 0x0f
     806:	90 8b       	std	Z+16, r25	; 0x10
     808:	a1 8b       	std	Z+17, r26	; 0x11
     80a:	b2 8b       	std	Z+18, r27	; 0x12
     80c:	80 e0       	ldi	r24, 0x00	; 0
     80e:	90 e0       	ldi	r25, 0x00	; 0
     810:	a0 e8       	ldi	r26, 0x80	; 128
     812:	bf e3       	ldi	r27, 0x3F	; 63
     814:	83 8b       	std	Z+19, r24	; 0x13
     816:	94 8b       	std	Z+20, r25	; 0x14
     818:	a5 8b       	std	Z+21, r26	; 0x15
     81a:	b6 8b       	std	Z+22, r27	; 0x16
     81c:	87 8b       	std	Z+23, r24	; 0x17
     81e:	90 8f       	std	Z+24, r25	; 0x18
     820:	a1 8f       	std	Z+25, r26	; 0x19
     822:	b2 8f       	std	Z+26, r27	; 0x1a
     824:	13 8e       	std	Z+27, r1	; 0x1b
     826:	14 8e       	std	Z+28, r1	; 0x1c
     828:	15 8e       	std	Z+29, r1	; 0x1d
     82a:	16 8e       	std	Z+30, r1	; 0x1e
     82c:	17 8e       	std	Z+31, r1	; 0x1f
     82e:	10 a2       	std	Z+32, r1	; 0x20
     830:	11 a2       	std	Z+33, r1	; 0x21
     832:	12 a2       	std	Z+34, r1	; 0x22
     834:	43 83       	std	Z+3, r20	; 0x03
     836:	24 83       	std	Z+4, r18	; 0x04
     838:	05 83       	std	Z+5, r16	; 0x05
     83a:	e6 82       	std	Z+6, r14	; 0x06
     83c:	cf 01       	movw	r24, r30
     83e:	0e 94 d3 03 	call	0x7a6	; 0x7a6 <_ZN12AccelStepper13enableOutputsEv>
     842:	0f 91       	pop	r16
     844:	ef 90       	pop	r14
     846:	08 95       	ret

00000848 <_ZN12AccelStepper13runToPositionEv>:
     848:	cf 93       	push	r28
     84a:	df 93       	push	r29
     84c:	ec 01       	movw	r28, r24
     84e:	ce 01       	movw	r24, r28
     850:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN12AccelStepper3runEv>
     854:	88 23       	and	r24, r24
     856:	d9 f7       	brne	.-10     	; 0x84e <_ZN12AccelStepper13runToPositionEv+0x6>
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	08 95       	ret

0000085e <_ZN12AccelStepper18runSpeedToPositionEv>:
     85e:	fc 01       	movw	r30, r24
     860:	63 85       	ldd	r22, Z+11	; 0x0b
     862:	74 85       	ldd	r23, Z+12	; 0x0c
     864:	85 85       	ldd	r24, Z+13	; 0x0d
     866:	96 85       	ldd	r25, Z+14	; 0x0e
     868:	27 81       	ldd	r18, Z+7	; 0x07
     86a:	30 85       	ldd	r19, Z+8	; 0x08
     86c:	41 85       	ldd	r20, Z+9	; 0x09
     86e:	52 85       	ldd	r21, Z+10	; 0x0a
     870:	62 17       	cp	r22, r18
     872:	73 07       	cpc	r23, r19
     874:	84 07       	cpc	r24, r20
     876:	95 07       	cpc	r25, r21
     878:	21 f0       	breq	.+8      	; 0x882 <_ZN12AccelStepper18runSpeedToPositionEv+0x24>
     87a:	cf 01       	movw	r24, r30
     87c:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN12AccelStepper8runSpeedEv>
     880:	08 95       	ret
     882:	80 e0       	ldi	r24, 0x00	; 0
     884:	08 95       	ret

00000886 <_ZN12AccelStepper16runToNewPositionEl>:
     886:	cf 93       	push	r28
     888:	df 93       	push	r29
     88a:	ec 01       	movw	r28, r24
     88c:	4b 87       	std	Y+11, r20	; 0x0b
     88e:	5c 87       	std	Y+12, r21	; 0x0c
     890:	6d 87       	std	Y+13, r22	; 0x0d
     892:	7e 87       	std	Y+14, r23	; 0x0e
     894:	0e 94 51 03 	call	0x6a2	; 0x6a2 <_ZN12AccelStepper15computeNewSpeedEv>
     898:	ce 01       	movw	r24, r28
     89a:	0e 94 24 04 	call	0x848	; 0x848 <_ZN12AccelStepper13runToPositionEv>
     89e:	df 91       	pop	r29
     8a0:	cf 91       	pop	r28
     8a2:	08 95       	ret

000008a4 <_ZN7DCMotorC1Eii>:
     8a4:	ef 92       	push	r14
     8a6:	ff 92       	push	r15
     8a8:	0f 93       	push	r16
     8aa:	1f 93       	push	r17
     8ac:	df 93       	push	r29
     8ae:	cf 93       	push	r28
     8b0:	0f 92       	push	r0
     8b2:	cd b7       	in	r28, 0x3d	; 61
     8b4:	de b7       	in	r29, 0x3e	; 62
     8b6:	7c 01       	movw	r14, r24
     8b8:	16 2f       	mov	r17, r22
     8ba:	04 2f       	mov	r16, r20
     8bc:	fc 01       	movw	r30, r24
     8be:	60 83       	st	Z, r22
     8c0:	71 83       	std	Z+1, r23	; 0x01
     8c2:	86 2f       	mov	r24, r22
     8c4:	61 e0       	ldi	r22, 0x01	; 1
     8c6:	59 83       	std	Y+1, r21	; 0x01
     8c8:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
     8cc:	81 2f       	mov	r24, r17
     8ce:	61 e0       	ldi	r22, 0x01	; 1
     8d0:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     8d4:	f7 01       	movw	r30, r14
     8d6:	02 83       	std	Z+2, r16	; 0x02
     8d8:	59 81       	ldd	r21, Y+1	; 0x01
     8da:	53 83       	std	Z+3, r21	; 0x03
     8dc:	80 2f       	mov	r24, r16
     8de:	61 e0       	ldi	r22, 0x01	; 1
     8e0:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
     8e4:	80 2f       	mov	r24, r16
     8e6:	61 e0       	ldi	r22, 0x01	; 1
     8e8:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     8ec:	81 e0       	ldi	r24, 0x01	; 1
     8ee:	f7 01       	movw	r30, r14
     8f0:	84 83       	std	Z+4, r24	; 0x04
     8f2:	0f 90       	pop	r0
     8f4:	cf 91       	pop	r28
     8f6:	df 91       	pop	r29
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	08 95       	ret

00000902 <_ZN7DCMotor4stopEv>:
     902:	cf 93       	push	r28
     904:	df 93       	push	r29
     906:	ec 01       	movw	r28, r24
     908:	88 81       	ld	r24, Y
     90a:	0e 94 60 0b 	call	0x16c0	; 0x16c0 <_Z10SoftPWMEnda>
     90e:	88 81       	ld	r24, Y
     910:	61 e0       	ldi	r22, 0x01	; 1
     912:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     916:	8a 81       	ldd	r24, Y+2	; 0x02
     918:	61 e0       	ldi	r22, 0x01	; 1
     91a:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     91e:	1c 82       	std	Y+4, r1	; 0x04
     920:	df 91       	pop	r29
     922:	cf 91       	pop	r28
     924:	08 95       	ret

00000926 <_ZN7DCMotor13setMotorspeedEi>:
     926:	0f 93       	push	r16
     928:	1f 93       	push	r17
     92a:	cf 93       	push	r28
     92c:	df 93       	push	r29
     92e:	ec 01       	movw	r28, r24
     930:	8b 01       	movw	r16, r22
     932:	8c 81       	ldd	r24, Y+4	; 0x04
     934:	88 23       	and	r24, r24
     936:	99 f0       	breq	.+38     	; 0x95e <_ZN7DCMotor13setMotorspeedEi+0x38>
     938:	77 fd       	sbrc	r23, 7
     93a:	07 c0       	rjmp	.+14     	; 0x94a <_ZN7DCMotor13setMotorspeedEi+0x24>
     93c:	8a 81       	ldd	r24, Y+2	; 0x02
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     944:	88 81       	ld	r24, Y
     946:	60 2f       	mov	r22, r16
     948:	07 c0       	rjmp	.+14     	; 0x958 <_ZN7DCMotor13setMotorspeedEi+0x32>
     94a:	8a 81       	ldd	r24, Y+2	; 0x02
     94c:	61 e0       	ldi	r22, 0x01	; 1
     94e:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     952:	60 2f       	mov	r22, r16
     954:	61 50       	subi	r22, 0x01	; 1
     956:	88 81       	ld	r24, Y
     958:	40 e0       	ldi	r20, 0x00	; 0
     95a:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <_Z10SoftPWMSetahh>
     95e:	df 91       	pop	r29
     960:	cf 91       	pop	r28
     962:	1f 91       	pop	r17
     964:	0f 91       	pop	r16
     966:	08 95       	ret

00000968 <_Z12DCMotor_intiv>:
     968:	80 e0       	ldi	r24, 0x00	; 0
     96a:	0e 94 a2 0a 	call	0x1544	; 0x1544 <_Z12SoftPWMBeginh>
     96e:	08 95       	ret

00000970 <_ZN3LCDC1Ehhhhhhhh>:
     970:	6f 92       	push	r6
     972:	7f 92       	push	r7
     974:	8f 92       	push	r8
     976:	af 92       	push	r10
     978:	cf 92       	push	r12
     97a:	ef 92       	push	r14
     97c:	ff 92       	push	r15
     97e:	0f 93       	push	r16
     980:	1f 93       	push	r17
     982:	df 93       	push	r29
     984:	cf 93       	push	r28
     986:	00 d0       	rcall	.+0      	; 0x988 <_ZN3LCDC1Ehhhhhhhh+0x18>
     988:	0f 92       	push	r0
     98a:	cd b7       	in	r28, 0x3d	; 61
     98c:	de b7       	in	r29, 0x3e	; 62
     98e:	3c 01       	movw	r6, r24
     990:	85 e1       	ldi	r24, 0x15	; 21
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	2b 83       	std	Y+3, r18	; 0x03
     996:	4a 83       	std	Y+2, r20	; 0x02
     998:	69 83       	std	Y+1, r22	; 0x01
     99a:	0e 94 06 21 	call	0x420c	; 0x420c <_Znwj>
     99e:	f8 2e       	mov	r15, r24
     9a0:	19 2f       	mov	r17, r25
     9a2:	69 81       	ldd	r22, Y+1	; 0x01
     9a4:	4a 81       	ldd	r20, Y+2	; 0x02
     9a6:	2b 81       	ldd	r18, Y+3	; 0x03
     9a8:	0e 94 8d 07 	call	0xf1a	; 0xf1a <_ZN13LiquidCrystalC1Ehhhhhh>
     9ac:	f3 01       	movw	r30, r6
     9ae:	f0 82       	st	Z, r15
     9b0:	11 83       	std	Z+1, r17	; 0x01
     9b2:	8f 2d       	mov	r24, r15
     9b4:	91 2f       	mov	r25, r17
     9b6:	6a 2d       	mov	r22, r10
     9b8:	48 2d       	mov	r20, r8
     9ba:	20 e0       	ldi	r18, 0x00	; 0
     9bc:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN13LiquidCrystal5beginEhhh>
     9c0:	f3 01       	movw	r30, r6
     9c2:	80 81       	ld	r24, Z
     9c4:	91 81       	ldd	r25, Z+1	; 0x01
     9c6:	0e 94 cf 06 	call	0xd9e	; 0xd9e <_ZN13LiquidCrystal5clearEv>
     9ca:	0f 90       	pop	r0
     9cc:	0f 90       	pop	r0
     9ce:	0f 90       	pop	r0
     9d0:	cf 91       	pop	r28
     9d2:	df 91       	pop	r29
     9d4:	1f 91       	pop	r17
     9d6:	0f 91       	pop	r16
     9d8:	ff 90       	pop	r15
     9da:	ef 90       	pop	r14
     9dc:	cf 90       	pop	r12
     9de:	af 90       	pop	r10
     9e0:	8f 90       	pop	r8
     9e2:	7f 90       	pop	r7
     9e4:	6f 90       	pop	r6
     9e6:	08 95       	ret

000009e8 <_ZN3LCD5traceE6String>:
     9e8:	0f 93       	push	r16
     9ea:	1f 93       	push	r17
     9ec:	cf 93       	push	r28
     9ee:	df 93       	push	r29
     9f0:	ec 01       	movw	r28, r24
     9f2:	8b 01       	movw	r16, r22
     9f4:	88 81       	ld	r24, Y
     9f6:	99 81       	ldd	r25, Y+1	; 0x01
     9f8:	0e 94 cf 06 	call	0xd9e	; 0xd9e <_ZN13LiquidCrystal5clearEv>
     9fc:	88 81       	ld	r24, Y
     9fe:	99 81       	ldd	r25, Y+1	; 0x01
     a00:	60 e0       	ldi	r22, 0x00	; 0
     a02:	40 e0       	ldi	r20, 0x00	; 0
     a04:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN13LiquidCrystal9setCursorEhh>
     a08:	88 81       	ld	r24, Y
     a0a:	99 81       	ldd	r25, Y+1	; 0x01
     a0c:	b8 01       	movw	r22, r16
     a0e:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <_ZN5Print5printERK6String>
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	08 95       	ret

00000a1c <_ZN3LCD9updateLCDE6Stringi>:
     a1c:	ef 92       	push	r14
     a1e:	ff 92       	push	r15
     a20:	0f 93       	push	r16
     a22:	1f 93       	push	r17
     a24:	cf 93       	push	r28
     a26:	df 93       	push	r29
     a28:	ec 01       	movw	r28, r24
     a2a:	7b 01       	movw	r14, r22
     a2c:	8a 01       	movw	r16, r20
     a2e:	88 81       	ld	r24, Y
     a30:	99 81       	ldd	r25, Y+1	; 0x01
     a32:	0e 94 cf 06 	call	0xd9e	; 0xd9e <_ZN13LiquidCrystal5clearEv>
     a36:	88 81       	ld	r24, Y
     a38:	99 81       	ldd	r25, Y+1	; 0x01
     a3a:	60 e0       	ldi	r22, 0x00	; 0
     a3c:	40 e0       	ldi	r20, 0x00	; 0
     a3e:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN13LiquidCrystal9setCursorEhh>
     a42:	88 81       	ld	r24, Y
     a44:	99 81       	ldd	r25, Y+1	; 0x01
     a46:	60 e1       	ldi	r22, 0x10	; 16
     a48:	71 e0       	ldi	r23, 0x01	; 1
     a4a:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print5printEPKc>
     a4e:	88 81       	ld	r24, Y
     a50:	99 81       	ldd	r25, Y+1	; 0x01
     a52:	b7 01       	movw	r22, r14
     a54:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <_ZN5Print5printERK6String>
     a58:	88 81       	ld	r24, Y
     a5a:	99 81       	ldd	r25, Y+1	; 0x01
     a5c:	60 e0       	ldi	r22, 0x00	; 0
     a5e:	41 e0       	ldi	r20, 0x01	; 1
     a60:	0e 94 99 06 	call	0xd32	; 0xd32 <_ZN13LiquidCrystal9setCursorEhh>
     a64:	88 81       	ld	r24, Y
     a66:	99 81       	ldd	r25, Y+1	; 0x01
     a68:	66 e1       	ldi	r22, 0x16	; 22
     a6a:	71 e0       	ldi	r23, 0x01	; 1
     a6c:	0e 94 ad 21 	call	0x435a	; 0x435a <_ZN5Print5printEPKc>
     a70:	88 81       	ld	r24, Y
     a72:	99 81       	ldd	r25, Y+1	; 0x01
     a74:	b8 01       	movw	r22, r16
     a76:	4a e0       	ldi	r20, 0x0A	; 10
     a78:	50 e0       	ldi	r21, 0x00	; 0
     a7a:	0e 94 3f 23 	call	0x467e	; 0x467e <_ZN5Print5printEii>
     a7e:	df 91       	pop	r29
     a80:	cf 91       	pop	r28
     a82:	1f 91       	pop	r17
     a84:	0f 91       	pop	r16
     a86:	ff 90       	pop	r15
     a88:	ef 90       	pop	r14
     a8a:	08 95       	ret

00000a8c <_ZN13LiquidCrystal11pulseEnableEv>:
     a8c:	cf 93       	push	r28
     a8e:	df 93       	push	r29
     a90:	ec 01       	movw	r28, r24
     a92:	8e 81       	ldd	r24, Y+6	; 0x06
     a94:	60 e0       	ldi	r22, 0x00	; 0
     a96:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <delayMicroseconds>
     aa2:	8e 81       	ldd	r24, Y+6	; 0x06
     aa4:	61 e0       	ldi	r22, 0x01	; 1
     aa6:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     aaa:	81 e0       	ldi	r24, 0x01	; 1
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <delayMicroseconds>
     ab2:	8e 81       	ldd	r24, Y+6	; 0x06
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     aba:	84 e6       	ldi	r24, 0x64	; 100
     abc:	90 e0       	ldi	r25, 0x00	; 0
     abe:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <delayMicroseconds>
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	08 95       	ret

00000ac8 <_ZN13LiquidCrystal10write4bitsEh>:
     ac8:	af 92       	push	r10
     aca:	bf 92       	push	r11
     acc:	cf 92       	push	r12
     ace:	df 92       	push	r13
     ad0:	ef 92       	push	r14
     ad2:	ff 92       	push	r15
     ad4:	0f 93       	push	r16
     ad6:	1f 93       	push	r17
     ad8:	cf 93       	push	r28
     ada:	df 93       	push	r29
     adc:	7c 01       	movw	r14, r24
     ade:	8c 01       	movw	r16, r24
     ae0:	09 5f       	subi	r16, 0xF9	; 249
     ae2:	1f 4f       	sbci	r17, 0xFF	; 255
     ae4:	c0 e0       	ldi	r28, 0x00	; 0
     ae6:	d0 e0       	ldi	r29, 0x00	; 0
     ae8:	a6 2e       	mov	r10, r22
     aea:	bb 24       	eor	r11, r11
     aec:	68 01       	movw	r12, r16
     aee:	f8 01       	movw	r30, r16
     af0:	81 91       	ld	r24, Z+
     af2:	8f 01       	movw	r16, r30
     af4:	61 e0       	ldi	r22, 0x01	; 1
     af6:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
     afa:	b5 01       	movw	r22, r10
     afc:	0c 2e       	mov	r0, r28
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <_ZN13LiquidCrystal10write4bitsEh+0x3c>
     b00:	75 95       	asr	r23
     b02:	67 95       	ror	r22
     b04:	0a 94       	dec	r0
     b06:	e2 f7       	brpl	.-8      	; 0xb00 <_ZN13LiquidCrystal10write4bitsEh+0x38>
     b08:	61 70       	andi	r22, 0x01	; 1
     b0a:	f6 01       	movw	r30, r12
     b0c:	80 81       	ld	r24, Z
     b0e:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     b12:	21 96       	adiw	r28, 0x01	; 1
     b14:	c4 30       	cpi	r28, 0x04	; 4
     b16:	d1 05       	cpc	r29, r1
     b18:	49 f7       	brne	.-46     	; 0xaec <_ZN13LiquidCrystal10write4bitsEh+0x24>
     b1a:	c7 01       	movw	r24, r14
     b1c:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13LiquidCrystal11pulseEnableEv>
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	df 90       	pop	r13
     b2e:	cf 90       	pop	r12
     b30:	bf 90       	pop	r11
     b32:	af 90       	pop	r10
     b34:	08 95       	ret

00000b36 <_ZN13LiquidCrystal10write8bitsEh>:
     b36:	af 92       	push	r10
     b38:	bf 92       	push	r11
     b3a:	cf 92       	push	r12
     b3c:	df 92       	push	r13
     b3e:	ef 92       	push	r14
     b40:	ff 92       	push	r15
     b42:	0f 93       	push	r16
     b44:	1f 93       	push	r17
     b46:	cf 93       	push	r28
     b48:	df 93       	push	r29
     b4a:	7c 01       	movw	r14, r24
     b4c:	8c 01       	movw	r16, r24
     b4e:	09 5f       	subi	r16, 0xF9	; 249
     b50:	1f 4f       	sbci	r17, 0xFF	; 255
     b52:	c0 e0       	ldi	r28, 0x00	; 0
     b54:	d0 e0       	ldi	r29, 0x00	; 0
     b56:	a6 2e       	mov	r10, r22
     b58:	bb 24       	eor	r11, r11
     b5a:	68 01       	movw	r12, r16
     b5c:	f8 01       	movw	r30, r16
     b5e:	81 91       	ld	r24, Z+
     b60:	8f 01       	movw	r16, r30
     b62:	61 e0       	ldi	r22, 0x01	; 1
     b64:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
     b68:	b5 01       	movw	r22, r10
     b6a:	0c 2e       	mov	r0, r28
     b6c:	02 c0       	rjmp	.+4      	; 0xb72 <_ZN13LiquidCrystal10write8bitsEh+0x3c>
     b6e:	75 95       	asr	r23
     b70:	67 95       	ror	r22
     b72:	0a 94       	dec	r0
     b74:	e2 f7       	brpl	.-8      	; 0xb6e <_ZN13LiquidCrystal10write8bitsEh+0x38>
     b76:	61 70       	andi	r22, 0x01	; 1
     b78:	f6 01       	movw	r30, r12
     b7a:	80 81       	ld	r24, Z
     b7c:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     b80:	21 96       	adiw	r28, 0x01	; 1
     b82:	c8 30       	cpi	r28, 0x08	; 8
     b84:	d1 05       	cpc	r29, r1
     b86:	49 f7       	brne	.-46     	; 0xb5a <_ZN13LiquidCrystal10write8bitsEh+0x24>
     b88:	c7 01       	movw	r24, r14
     b8a:	0e 94 46 05 	call	0xa8c	; 0xa8c <_ZN13LiquidCrystal11pulseEnableEv>
     b8e:	df 91       	pop	r29
     b90:	cf 91       	pop	r28
     b92:	1f 91       	pop	r17
     b94:	0f 91       	pop	r16
     b96:	ff 90       	pop	r15
     b98:	ef 90       	pop	r14
     b9a:	df 90       	pop	r13
     b9c:	cf 90       	pop	r12
     b9e:	bf 90       	pop	r11
     ba0:	af 90       	pop	r10
     ba2:	08 95       	ret

00000ba4 <_ZN13LiquidCrystal4sendEhh>:
     ba4:	1f 93       	push	r17
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	ec 01       	movw	r28, r24
     bac:	16 2f       	mov	r17, r22
     bae:	8c 81       	ldd	r24, Y+4	; 0x04
     bb0:	64 2f       	mov	r22, r20
     bb2:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     bb6:	8d 81       	ldd	r24, Y+5	; 0x05
     bb8:	8f 3f       	cpi	r24, 0xFF	; 255
     bba:	19 f0       	breq	.+6      	; 0xbc2 <_ZN13LiquidCrystal4sendEhh+0x1e>
     bbc:	60 e0       	ldi	r22, 0x00	; 0
     bbe:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     bc2:	8f 85       	ldd	r24, Y+15	; 0x0f
     bc4:	84 ff       	sbrs	r24, 4
     bc6:	05 c0       	rjmp	.+10     	; 0xbd2 <_ZN13LiquidCrystal4sendEhh+0x2e>
     bc8:	ce 01       	movw	r24, r28
     bca:	61 2f       	mov	r22, r17
     bcc:	0e 94 9b 05 	call	0xb36	; 0xb36 <_ZN13LiquidCrystal10write8bitsEh>
     bd0:	0f c0       	rjmp	.+30     	; 0xbf0 <_ZN13LiquidCrystal4sendEhh+0x4c>
     bd2:	21 2f       	mov	r18, r17
     bd4:	30 e0       	ldi	r19, 0x00	; 0
     bd6:	84 e0       	ldi	r24, 0x04	; 4
     bd8:	35 95       	asr	r19
     bda:	27 95       	ror	r18
     bdc:	8a 95       	dec	r24
     bde:	e1 f7       	brne	.-8      	; 0xbd8 <_ZN13LiquidCrystal4sendEhh+0x34>
     be0:	ce 01       	movw	r24, r28
     be2:	62 2f       	mov	r22, r18
     be4:	0e 94 64 05 	call	0xac8	; 0xac8 <_ZN13LiquidCrystal10write4bitsEh>
     be8:	ce 01       	movw	r24, r28
     bea:	61 2f       	mov	r22, r17
     bec:	0e 94 64 05 	call	0xac8	; 0xac8 <_ZN13LiquidCrystal10write4bitsEh>
     bf0:	df 91       	pop	r29
     bf2:	cf 91       	pop	r28
     bf4:	1f 91       	pop	r17
     bf6:	08 95       	ret

00000bf8 <_ZN13LiquidCrystal5writeEh>:
     bf8:	41 e0       	ldi	r20, 0x01	; 1
     bfa:	0e 94 d2 05 	call	0xba4	; 0xba4 <_ZN13LiquidCrystal4sendEhh>
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	08 95       	ret

00000c04 <_ZN13LiquidCrystal7commandEh>:
     c04:	40 e0       	ldi	r20, 0x00	; 0
     c06:	0e 94 d2 05 	call	0xba4	; 0xba4 <_ZN13LiquidCrystal4sendEhh>
     c0a:	08 95       	ret

00000c0c <_ZN13LiquidCrystal10createCharEhPh>:
     c0c:	cf 92       	push	r12
     c0e:	df 92       	push	r13
     c10:	ef 92       	push	r14
     c12:	ff 92       	push	r15
     c14:	0f 93       	push	r16
     c16:	1f 93       	push	r17
     c18:	df 93       	push	r29
     c1a:	cf 93       	push	r28
     c1c:	00 d0       	rcall	.+0      	; 0xc1e <_ZN13LiquidCrystal10createCharEhPh+0x12>
     c1e:	cd b7       	in	r28, 0x3d	; 61
     c20:	de b7       	in	r29, 0x3e	; 62
     c22:	6c 01       	movw	r12, r24
     c24:	67 70       	andi	r22, 0x07	; 7
     c26:	66 0f       	add	r22, r22
     c28:	66 0f       	add	r22, r22
     c2a:	66 0f       	add	r22, r22
     c2c:	60 64       	ori	r22, 0x40	; 64
     c2e:	49 83       	std	Y+1, r20	; 0x01
     c30:	5a 83       	std	Y+2, r21	; 0x02
     c32:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     c36:	49 81       	ldd	r20, Y+1	; 0x01
     c38:	5a 81       	ldd	r21, Y+2	; 0x02
     c3a:	e4 2e       	mov	r14, r20
     c3c:	f5 2e       	mov	r15, r21
     c3e:	00 e0       	ldi	r16, 0x00	; 0
     c40:	10 e0       	ldi	r17, 0x00	; 0
     c42:	d7 01       	movw	r26, r14
     c44:	6d 91       	ld	r22, X+
     c46:	7d 01       	movw	r14, r26
     c48:	d6 01       	movw	r26, r12
     c4a:	ed 91       	ld	r30, X+
     c4c:	fc 91       	ld	r31, X
     c4e:	01 90       	ld	r0, Z+
     c50:	f0 81       	ld	r31, Z
     c52:	e0 2d       	mov	r30, r0
     c54:	c6 01       	movw	r24, r12
     c56:	09 95       	icall
     c58:	0f 5f       	subi	r16, 0xFF	; 255
     c5a:	1f 4f       	sbci	r17, 0xFF	; 255
     c5c:	08 30       	cpi	r16, 0x08	; 8
     c5e:	11 05       	cpc	r17, r1
     c60:	81 f7       	brne	.-32     	; 0xc42 <_ZN13LiquidCrystal10createCharEhPh+0x36>
     c62:	0f 90       	pop	r0
     c64:	0f 90       	pop	r0
     c66:	cf 91       	pop	r28
     c68:	df 91       	pop	r29
     c6a:	1f 91       	pop	r17
     c6c:	0f 91       	pop	r16
     c6e:	ff 90       	pop	r15
     c70:	ef 90       	pop	r14
     c72:	df 90       	pop	r13
     c74:	cf 90       	pop	r12
     c76:	08 95       	ret

00000c78 <_ZN13LiquidCrystal12noAutoscrollEv>:
     c78:	fc 01       	movw	r30, r24
     c7a:	61 89       	ldd	r22, Z+17	; 0x11
     c7c:	6e 7f       	andi	r22, 0xFE	; 254
     c7e:	61 8b       	std	Z+17, r22	; 0x11
     c80:	64 60       	ori	r22, 0x04	; 4
     c82:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     c86:	08 95       	ret

00000c88 <_ZN13LiquidCrystal10autoscrollEv>:
     c88:	fc 01       	movw	r30, r24
     c8a:	61 89       	ldd	r22, Z+17	; 0x11
     c8c:	26 2f       	mov	r18, r22
     c8e:	21 60       	ori	r18, 0x01	; 1
     c90:	21 8b       	std	Z+17, r18	; 0x11
     c92:	65 60       	ori	r22, 0x05	; 5
     c94:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     c98:	08 95       	ret

00000c9a <_ZN13LiquidCrystal11rightToLeftEv>:
     c9a:	fc 01       	movw	r30, r24
     c9c:	61 89       	ldd	r22, Z+17	; 0x11
     c9e:	6d 7f       	andi	r22, 0xFD	; 253
     ca0:	61 8b       	std	Z+17, r22	; 0x11
     ca2:	64 60       	ori	r22, 0x04	; 4
     ca4:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     ca8:	08 95       	ret

00000caa <_ZN13LiquidCrystal11leftToRightEv>:
     caa:	fc 01       	movw	r30, r24
     cac:	61 89       	ldd	r22, Z+17	; 0x11
     cae:	26 2f       	mov	r18, r22
     cb0:	22 60       	ori	r18, 0x02	; 2
     cb2:	21 8b       	std	Z+17, r18	; 0x11
     cb4:	66 60       	ori	r22, 0x06	; 6
     cb6:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     cba:	08 95       	ret

00000cbc <_ZN13LiquidCrystal18scrollDisplayRightEv>:
     cbc:	6c e1       	ldi	r22, 0x1C	; 28
     cbe:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     cc2:	08 95       	ret

00000cc4 <_ZN13LiquidCrystal17scrollDisplayLeftEv>:
     cc4:	68 e1       	ldi	r22, 0x18	; 24
     cc6:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     cca:	08 95       	ret

00000ccc <_ZN13LiquidCrystal5blinkEv>:
     ccc:	fc 01       	movw	r30, r24
     cce:	60 89       	ldd	r22, Z+16	; 0x10
     cd0:	26 2f       	mov	r18, r22
     cd2:	21 60       	ori	r18, 0x01	; 1
     cd4:	20 8b       	std	Z+16, r18	; 0x10
     cd6:	69 60       	ori	r22, 0x09	; 9
     cd8:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     cdc:	08 95       	ret

00000cde <_ZN13LiquidCrystal7noBlinkEv>:
     cde:	fc 01       	movw	r30, r24
     ce0:	60 89       	ldd	r22, Z+16	; 0x10
     ce2:	6e 7f       	andi	r22, 0xFE	; 254
     ce4:	60 8b       	std	Z+16, r22	; 0x10
     ce6:	68 60       	ori	r22, 0x08	; 8
     ce8:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     cec:	08 95       	ret

00000cee <_ZN13LiquidCrystal6cursorEv>:
     cee:	fc 01       	movw	r30, r24
     cf0:	60 89       	ldd	r22, Z+16	; 0x10
     cf2:	26 2f       	mov	r18, r22
     cf4:	22 60       	ori	r18, 0x02	; 2
     cf6:	20 8b       	std	Z+16, r18	; 0x10
     cf8:	6a 60       	ori	r22, 0x0A	; 10
     cfa:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     cfe:	08 95       	ret

00000d00 <_ZN13LiquidCrystal8noCursorEv>:
     d00:	fc 01       	movw	r30, r24
     d02:	60 89       	ldd	r22, Z+16	; 0x10
     d04:	6d 7f       	andi	r22, 0xFD	; 253
     d06:	60 8b       	std	Z+16, r22	; 0x10
     d08:	68 60       	ori	r22, 0x08	; 8
     d0a:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     d0e:	08 95       	ret

00000d10 <_ZN13LiquidCrystal7displayEv>:
     d10:	fc 01       	movw	r30, r24
     d12:	60 89       	ldd	r22, Z+16	; 0x10
     d14:	26 2f       	mov	r18, r22
     d16:	24 60       	ori	r18, 0x04	; 4
     d18:	20 8b       	std	Z+16, r18	; 0x10
     d1a:	6c 60       	ori	r22, 0x0C	; 12
     d1c:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     d20:	08 95       	ret

00000d22 <_ZN13LiquidCrystal9noDisplayEv>:
     d22:	fc 01       	movw	r30, r24
     d24:	60 89       	ldd	r22, Z+16	; 0x10
     d26:	6b 7f       	andi	r22, 0xFB	; 251
     d28:	60 8b       	std	Z+16, r22	; 0x10
     d2a:	68 60       	ori	r22, 0x08	; 8
     d2c:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     d30:	08 95       	ret

00000d32 <_ZN13LiquidCrystal9setCursorEhh>:
     d32:	df 93       	push	r29
     d34:	cf 93       	push	r28
     d36:	cd b7       	in	r28, 0x3d	; 61
     d38:	de b7       	in	r29, 0x3e	; 62
     d3a:	28 97       	sbiw	r28, 0x08	; 8
     d3c:	0f b6       	in	r0, 0x3f	; 63
     d3e:	f8 94       	cli
     d40:	de bf       	out	0x3e, r29	; 62
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	cd bf       	out	0x3d, r28	; 61
     d46:	fe 01       	movw	r30, r28
     d48:	31 96       	adiw	r30, 0x01	; 1
     d4a:	a6 e2       	ldi	r26, 0x26	; 38
     d4c:	b1 e0       	ldi	r27, 0x01	; 1
     d4e:	28 e0       	ldi	r18, 0x08	; 8
     d50:	0d 90       	ld	r0, X+
     d52:	01 92       	st	Z+, r0
     d54:	21 50       	subi	r18, 0x01	; 1
     d56:	e1 f7       	brne	.-8      	; 0xd50 <_ZN13LiquidCrystal9setCursorEhh+0x1e>
     d58:	fc 01       	movw	r30, r24
     d5a:	23 89       	ldd	r18, Z+19	; 0x13
     d5c:	42 17       	cp	r20, r18
     d5e:	10 f0       	brcs	.+4      	; 0xd64 <_ZN13LiquidCrystal9setCursorEhh+0x32>
     d60:	42 2f       	mov	r20, r18
     d62:	41 50       	subi	r20, 0x01	; 1
     d64:	e4 2f       	mov	r30, r20
     d66:	f0 e0       	ldi	r31, 0x00	; 0
     d68:	ee 0f       	add	r30, r30
     d6a:	ff 1f       	adc	r31, r31
     d6c:	ec 0f       	add	r30, r28
     d6e:	fd 1f       	adc	r31, r29
     d70:	21 81       	ldd	r18, Z+1	; 0x01
     d72:	26 0f       	add	r18, r22
     d74:	20 68       	ori	r18, 0x80	; 128
     d76:	62 2f       	mov	r22, r18
     d78:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     d7c:	28 96       	adiw	r28, 0x08	; 8
     d7e:	0f b6       	in	r0, 0x3f	; 63
     d80:	f8 94       	cli
     d82:	de bf       	out	0x3e, r29	; 62
     d84:	0f be       	out	0x3f, r0	; 63
     d86:	cd bf       	out	0x3d, r28	; 61
     d88:	cf 91       	pop	r28
     d8a:	df 91       	pop	r29
     d8c:	08 95       	ret

00000d8e <_ZN13LiquidCrystal4homeEv>:
     d8e:	62 e0       	ldi	r22, 0x02	; 2
     d90:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     d94:	80 ed       	ldi	r24, 0xD0	; 208
     d96:	97 e0       	ldi	r25, 0x07	; 7
     d98:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <delayMicroseconds>
     d9c:	08 95       	ret

00000d9e <_ZN13LiquidCrystal5clearEv>:
     d9e:	61 e0       	ldi	r22, 0x01	; 1
     da0:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     da4:	80 ed       	ldi	r24, 0xD0	; 208
     da6:	97 e0       	ldi	r25, 0x07	; 7
     da8:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <delayMicroseconds>
     dac:	08 95       	ret

00000dae <_ZN13LiquidCrystal5beginEhhh>:
     dae:	cf 93       	push	r28
     db0:	df 93       	push	r29
     db2:	ec 01       	movw	r28, r24
     db4:	42 30       	cpi	r20, 0x02	; 2
     db6:	18 f0       	brcs	.+6      	; 0xdbe <_ZN13LiquidCrystal5beginEhhh+0x10>
     db8:	8f 85       	ldd	r24, Y+15	; 0x0f
     dba:	88 60       	ori	r24, 0x08	; 8
     dbc:	8f 87       	std	Y+15, r24	; 0x0f
     dbe:	4b 8b       	std	Y+19, r20	; 0x13
     dc0:	1c 8a       	std	Y+20, r1	; 0x14
     dc2:	22 23       	and	r18, r18
     dc4:	29 f0       	breq	.+10     	; 0xdd0 <_ZN13LiquidCrystal5beginEhhh+0x22>
     dc6:	41 30       	cpi	r20, 0x01	; 1
     dc8:	19 f4       	brne	.+6      	; 0xdd0 <_ZN13LiquidCrystal5beginEhhh+0x22>
     dca:	8f 85       	ldd	r24, Y+15	; 0x0f
     dcc:	84 60       	ori	r24, 0x04	; 4
     dce:	8f 87       	std	Y+15, r24	; 0x0f
     dd0:	80 e5       	ldi	r24, 0x50	; 80
     dd2:	93 ec       	ldi	r25, 0xC3	; 195
     dd4:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <delayMicroseconds>
     dd8:	8c 81       	ldd	r24, Y+4	; 0x04
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     de0:	8e 81       	ldd	r24, Y+6	; 0x06
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     de8:	8d 81       	ldd	r24, Y+5	; 0x05
     dea:	8f 3f       	cpi	r24, 0xFF	; 255
     dec:	19 f0       	breq	.+6      	; 0xdf4 <_ZN13LiquidCrystal5beginEhhh+0x46>
     dee:	60 e0       	ldi	r22, 0x00	; 0
     df0:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
     df4:	6f 85       	ldd	r22, Y+15	; 0x0f
     df6:	64 fd       	sbrc	r22, 4
     df8:	1d c0       	rjmp	.+58     	; 0xe34 <_ZN13LiquidCrystal5beginEhhh+0x86>
     dfa:	ce 01       	movw	r24, r28
     dfc:	63 e0       	ldi	r22, 0x03	; 3
     dfe:	0e 94 64 05 	call	0xac8	; 0xac8 <_ZN13LiquidCrystal10write4bitsEh>
     e02:	84 e9       	ldi	r24, 0x94	; 148
     e04:	91 e1       	ldi	r25, 0x11	; 17
     e06:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <delayMicroseconds>
     e0a:	ce 01       	movw	r24, r28
     e0c:	63 e0       	ldi	r22, 0x03	; 3
     e0e:	0e 94 64 05 	call	0xac8	; 0xac8 <_ZN13LiquidCrystal10write4bitsEh>
     e12:	84 e9       	ldi	r24, 0x94	; 148
     e14:	91 e1       	ldi	r25, 0x11	; 17
     e16:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <delayMicroseconds>
     e1a:	ce 01       	movw	r24, r28
     e1c:	63 e0       	ldi	r22, 0x03	; 3
     e1e:	0e 94 64 05 	call	0xac8	; 0xac8 <_ZN13LiquidCrystal10write4bitsEh>
     e22:	86 e9       	ldi	r24, 0x96	; 150
     e24:	90 e0       	ldi	r25, 0x00	; 0
     e26:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <delayMicroseconds>
     e2a:	ce 01       	movw	r24, r28
     e2c:	62 e0       	ldi	r22, 0x02	; 2
     e2e:	0e 94 64 05 	call	0xac8	; 0xac8 <_ZN13LiquidCrystal10write4bitsEh>
     e32:	16 c0       	rjmp	.+44     	; 0xe60 <_ZN13LiquidCrystal5beginEhhh+0xb2>
     e34:	60 62       	ori	r22, 0x20	; 32
     e36:	ce 01       	movw	r24, r28
     e38:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     e3c:	84 e9       	ldi	r24, 0x94	; 148
     e3e:	91 e1       	ldi	r25, 0x11	; 17
     e40:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <delayMicroseconds>
     e44:	6f 85       	ldd	r22, Y+15	; 0x0f
     e46:	60 62       	ori	r22, 0x20	; 32
     e48:	ce 01       	movw	r24, r28
     e4a:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     e4e:	86 e9       	ldi	r24, 0x96	; 150
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <delayMicroseconds>
     e56:	6f 85       	ldd	r22, Y+15	; 0x0f
     e58:	60 62       	ori	r22, 0x20	; 32
     e5a:	ce 01       	movw	r24, r28
     e5c:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     e60:	6f 85       	ldd	r22, Y+15	; 0x0f
     e62:	60 62       	ori	r22, 0x20	; 32
     e64:	ce 01       	movw	r24, r28
     e66:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     e6a:	84 e0       	ldi	r24, 0x04	; 4
     e6c:	88 8b       	std	Y+16, r24	; 0x10
     e6e:	ce 01       	movw	r24, r28
     e70:	0e 94 88 06 	call	0xd10	; 0xd10 <_ZN13LiquidCrystal7displayEv>
     e74:	ce 01       	movw	r24, r28
     e76:	0e 94 cf 06 	call	0xd9e	; 0xd9e <_ZN13LiquidCrystal5clearEv>
     e7a:	82 e0       	ldi	r24, 0x02	; 2
     e7c:	89 8b       	std	Y+17, r24	; 0x11
     e7e:	ce 01       	movw	r24, r28
     e80:	66 e0       	ldi	r22, 0x06	; 6
     e82:	0e 94 02 06 	call	0xc04	; 0xc04 <_ZN13LiquidCrystal7commandEh>
     e86:	df 91       	pop	r29
     e88:	cf 91       	pop	r28
     e8a:	08 95       	ret

00000e8c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>:
     e8c:	6f 92       	push	r6
     e8e:	7f 92       	push	r7
     e90:	8f 92       	push	r8
     e92:	af 92       	push	r10
     e94:	cf 92       	push	r12
     e96:	ef 92       	push	r14
     e98:	0f 93       	push	r16
     e9a:	1f 93       	push	r17
     e9c:	df 93       	push	r29
     e9e:	cf 93       	push	r28
     ea0:	cd b7       	in	r28, 0x3d	; 61
     ea2:	de b7       	in	r29, 0x3e	; 62
     ea4:	3c 01       	movw	r6, r24
     ea6:	16 2f       	mov	r17, r22
     ea8:	84 2f       	mov	r24, r20
     eaa:	f3 01       	movw	r30, r6
     eac:	44 83       	std	Z+4, r20	; 0x04
     eae:	25 83       	std	Z+5, r18	; 0x05
     eb0:	06 83       	std	Z+6, r16	; 0x06
     eb2:	e7 82       	std	Z+7, r14	; 0x07
     eb4:	c0 86       	std	Z+8, r12	; 0x08
     eb6:	a1 86       	std	Z+9, r10	; 0x09
     eb8:	82 86       	std	Z+10, r8	; 0x0a
     eba:	9d 85       	ldd	r25, Y+13	; 0x0d
     ebc:	93 87       	std	Z+11, r25	; 0x0b
     ebe:	9e 85       	ldd	r25, Y+14	; 0x0e
     ec0:	94 87       	std	Z+12, r25	; 0x0c
     ec2:	9f 85       	ldd	r25, Y+15	; 0x0f
     ec4:	95 87       	std	Z+13, r25	; 0x0d
     ec6:	98 89       	ldd	r25, Y+16	; 0x10
     ec8:	96 87       	std	Z+14, r25	; 0x0e
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
     ed0:	f3 01       	movw	r30, r6
     ed2:	85 81       	ldd	r24, Z+5	; 0x05
     ed4:	8f 3f       	cpi	r24, 0xFF	; 255
     ed6:	19 f0       	breq	.+6      	; 0xede <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x52>
     ed8:	61 e0       	ldi	r22, 0x01	; 1
     eda:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
     ede:	f3 01       	movw	r30, r6
     ee0:	86 81       	ldd	r24, Z+6	; 0x06
     ee2:	61 e0       	ldi	r22, 0x01	; 1
     ee4:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
     ee8:	11 23       	and	r17, r17
     eea:	19 f0       	breq	.+6      	; 0xef2 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x66>
     eec:	f3 01       	movw	r30, r6
     eee:	17 86       	std	Z+15, r1	; 0x0f
     ef0:	03 c0       	rjmp	.+6      	; 0xef8 <_ZN13LiquidCrystal4initEhhhhhhhhhhhh+0x6c>
     ef2:	80 e1       	ldi	r24, 0x10	; 16
     ef4:	f3 01       	movw	r30, r6
     ef6:	87 87       	std	Z+15, r24	; 0x0f
     ef8:	c3 01       	movw	r24, r6
     efa:	60 e1       	ldi	r22, 0x10	; 16
     efc:	41 e0       	ldi	r20, 0x01	; 1
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	0e 94 d7 06 	call	0xdae	; 0xdae <_ZN13LiquidCrystal5beginEhhh>
     f04:	cf 91       	pop	r28
     f06:	df 91       	pop	r29
     f08:	1f 91       	pop	r17
     f0a:	0f 91       	pop	r16
     f0c:	ef 90       	pop	r14
     f0e:	cf 90       	pop	r12
     f10:	af 90       	pop	r10
     f12:	8f 90       	pop	r8
     f14:	7f 90       	pop	r7
     f16:	6f 90       	pop	r6
     f18:	08 95       	ret

00000f1a <_ZN13LiquidCrystalC1Ehhhhhh>:
     f1a:	8f 92       	push	r8
     f1c:	af 92       	push	r10
     f1e:	cf 92       	push	r12
     f20:	ef 92       	push	r14
     f22:	0f 93       	push	r16
     f24:	cf 93       	push	r28
     f26:	df 93       	push	r29
     f28:	a6 2f       	mov	r26, r22
     f2a:	74 2f       	mov	r23, r20
     f2c:	52 2f       	mov	r21, r18
     f2e:	30 2f       	mov	r19, r16
     f30:	ae 2c       	mov	r10, r14
     f32:	8c 2c       	mov	r8, r12
     f34:	ec 01       	movw	r28, r24
     f36:	1b 82       	std	Y+3, r1	; 0x03
     f38:	1a 82       	std	Y+2, r1	; 0x02
     f3a:	e2 e2       	ldi	r30, 0x22	; 34
     f3c:	f1 e0       	ldi	r31, 0x01	; 1
     f3e:	f9 83       	std	Y+1, r31	; 0x01
     f40:	e8 83       	st	Y, r30
     f42:	00 d0       	rcall	.+0      	; 0xf44 <_ZN13LiquidCrystalC1Ehhhhhh+0x2a>
     f44:	00 d0       	rcall	.+0      	; 0xf46 <_ZN13LiquidCrystalC1Ehhhhhh+0x2c>
     f46:	ed b7       	in	r30, 0x3d	; 61
     f48:	fe b7       	in	r31, 0x3e	; 62
     f4a:	31 96       	adiw	r30, 0x01	; 1
     f4c:	cd b7       	in	r28, 0x3d	; 61
     f4e:	de b7       	in	r29, 0x3e	; 62
     f50:	19 82       	std	Y+1, r1	; 0x01
     f52:	11 82       	std	Z+1, r1	; 0x01
     f54:	12 82       	std	Z+2, r1	; 0x02
     f56:	13 82       	std	Z+3, r1	; 0x03
     f58:	61 e0       	ldi	r22, 0x01	; 1
     f5a:	4a 2f       	mov	r20, r26
     f5c:	2f ef       	ldi	r18, 0xFF	; 255
     f5e:	07 2f       	mov	r16, r23
     f60:	e5 2e       	mov	r14, r21
     f62:	c3 2e       	mov	r12, r19
     f64:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     f68:	0f 90       	pop	r0
     f6a:	0f 90       	pop	r0
     f6c:	0f 90       	pop	r0
     f6e:	0f 90       	pop	r0
     f70:	df 91       	pop	r29
     f72:	cf 91       	pop	r28
     f74:	0f 91       	pop	r16
     f76:	ef 90       	pop	r14
     f78:	cf 90       	pop	r12
     f7a:	af 90       	pop	r10
     f7c:	8f 90       	pop	r8
     f7e:	08 95       	ret

00000f80 <_ZN13LiquidCrystalC1Ehhhhhhh>:
     f80:	8f 92       	push	r8
     f82:	af 92       	push	r10
     f84:	cf 92       	push	r12
     f86:	ef 92       	push	r14
     f88:	0f 93       	push	r16
     f8a:	1f 93       	push	r17
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	16 2f       	mov	r17, r22
     f92:	f4 2f       	mov	r31, r20
     f94:	e2 2f       	mov	r30, r18
     f96:	70 2f       	mov	r23, r16
     f98:	5e 2d       	mov	r21, r14
     f9a:	3c 2d       	mov	r19, r12
     f9c:	8a 2c       	mov	r8, r10
     f9e:	dc 01       	movw	r26, r24
     fa0:	13 96       	adiw	r26, 0x03	; 3
     fa2:	1c 92       	st	X, r1
     fa4:	1e 92       	st	-X, r1
     fa6:	12 97       	sbiw	r26, 0x02	; 2
     fa8:	c2 e2       	ldi	r28, 0x22	; 34
     faa:	d1 e0       	ldi	r29, 0x01	; 1
     fac:	cd 93       	st	X+, r28
     fae:	dc 93       	st	X, r29
     fb0:	00 d0       	rcall	.+0      	; 0xfb2 <_ZN13LiquidCrystalC1Ehhhhhhh+0x32>
     fb2:	00 d0       	rcall	.+0      	; 0xfb4 <_ZN13LiquidCrystalC1Ehhhhhhh+0x34>
     fb4:	cd b7       	in	r28, 0x3d	; 61
     fb6:	de b7       	in	r29, 0x3e	; 62
     fb8:	21 96       	adiw	r28, 0x01	; 1
     fba:	ad b7       	in	r26, 0x3d	; 61
     fbc:	be b7       	in	r27, 0x3e	; 62
     fbe:	11 96       	adiw	r26, 0x01	; 1
     fc0:	1c 92       	st	X, r1
     fc2:	19 82       	std	Y+1, r1	; 0x01
     fc4:	1a 82       	std	Y+2, r1	; 0x02
     fc6:	1b 82       	std	Y+3, r1	; 0x03
     fc8:	61 e0       	ldi	r22, 0x01	; 1
     fca:	41 2f       	mov	r20, r17
     fcc:	2f 2f       	mov	r18, r31
     fce:	0e 2f       	mov	r16, r30
     fd0:	e7 2e       	mov	r14, r23
     fd2:	c5 2e       	mov	r12, r21
     fd4:	a3 2e       	mov	r10, r19
     fd6:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
     fda:	0f 90       	pop	r0
     fdc:	0f 90       	pop	r0
     fde:	0f 90       	pop	r0
     fe0:	0f 90       	pop	r0
     fe2:	df 91       	pop	r29
     fe4:	cf 91       	pop	r28
     fe6:	1f 91       	pop	r17
     fe8:	0f 91       	pop	r16
     fea:	ef 90       	pop	r14
     fec:	cf 90       	pop	r12
     fee:	af 90       	pop	r10
     ff0:	8f 90       	pop	r8
     ff2:	08 95       	ret

00000ff4 <_ZN13LiquidCrystalC1Ehhhhhhhhhh>:
     ff4:	8f 92       	push	r8
     ff6:	af 92       	push	r10
     ff8:	cf 92       	push	r12
     ffa:	ef 92       	push	r14
     ffc:	ff 92       	push	r15
     ffe:	0f 93       	push	r16
    1000:	1f 93       	push	r17
    1002:	df 93       	push	r29
    1004:	cf 93       	push	r28
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	f6 2e       	mov	r15, r22
    100c:	f4 2f       	mov	r31, r20
    100e:	e2 2f       	mov	r30, r18
    1010:	70 2f       	mov	r23, r16
    1012:	5e 2d       	mov	r21, r14
    1014:	3c 2d       	mov	r19, r12
    1016:	dc 01       	movw	r26, r24
    1018:	13 96       	adiw	r26, 0x03	; 3
    101a:	1c 92       	st	X, r1
    101c:	1e 92       	st	-X, r1
    101e:	12 97       	sbiw	r26, 0x02	; 2
    1020:	02 e2       	ldi	r16, 0x22	; 34
    1022:	11 e0       	ldi	r17, 0x01	; 1
    1024:	0d 93       	st	X+, r16
    1026:	1c 93       	st	X, r17
    1028:	00 d0       	rcall	.+0      	; 0x102a <_ZN13LiquidCrystalC1Ehhhhhhhhhh+0x36>
    102a:	00 d0       	rcall	.+0      	; 0x102c <_ZN13LiquidCrystalC1Ehhhhhhhhhh+0x38>
    102c:	0d b7       	in	r16, 0x3d	; 61
    102e:	1e b7       	in	r17, 0x3e	; 62
    1030:	0f 5f       	subi	r16, 0xFF	; 255
    1032:	1f 4f       	sbci	r17, 0xFF	; 255
    1034:	ad b7       	in	r26, 0x3d	; 61
    1036:	be b7       	in	r27, 0x3e	; 62
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	ac 92       	st	X, r10
    103c:	d8 01       	movw	r26, r16
    103e:	11 96       	adiw	r26, 0x01	; 1
    1040:	8c 92       	st	X, r8
    1042:	11 97       	sbiw	r26, 0x01	; 1
    1044:	2c 85       	ldd	r18, Y+12	; 0x0c
    1046:	12 96       	adiw	r26, 0x02	; 2
    1048:	2c 93       	st	X, r18
    104a:	12 97       	sbiw	r26, 0x02	; 2
    104c:	2d 85       	ldd	r18, Y+13	; 0x0d
    104e:	13 96       	adiw	r26, 0x03	; 3
    1050:	2c 93       	st	X, r18
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	4f 2d       	mov	r20, r15
    1056:	2f ef       	ldi	r18, 0xFF	; 255
    1058:	0f 2f       	mov	r16, r31
    105a:	ee 2e       	mov	r14, r30
    105c:	c7 2e       	mov	r12, r23
    105e:	a5 2e       	mov	r10, r21
    1060:	83 2e       	mov	r8, r19
    1062:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    1066:	0f 90       	pop	r0
    1068:	0f 90       	pop	r0
    106a:	0f 90       	pop	r0
    106c:	0f 90       	pop	r0
    106e:	cf 91       	pop	r28
    1070:	df 91       	pop	r29
    1072:	1f 91       	pop	r17
    1074:	0f 91       	pop	r16
    1076:	ff 90       	pop	r15
    1078:	ef 90       	pop	r14
    107a:	cf 90       	pop	r12
    107c:	af 90       	pop	r10
    107e:	8f 90       	pop	r8
    1080:	08 95       	ret

00001082 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh>:
    1082:	8f 92       	push	r8
    1084:	af 92       	push	r10
    1086:	cf 92       	push	r12
    1088:	df 92       	push	r13
    108a:	ef 92       	push	r14
    108c:	ff 92       	push	r15
    108e:	0f 93       	push	r16
    1090:	1f 93       	push	r17
    1092:	df 93       	push	r29
    1094:	cf 93       	push	r28
    1096:	cd b7       	in	r28, 0x3d	; 61
    1098:	de b7       	in	r29, 0x3e	; 62
    109a:	a6 2f       	mov	r26, r22
    109c:	f4 2e       	mov	r15, r20
    109e:	d2 2e       	mov	r13, r18
    10a0:	70 2f       	mov	r23, r16
    10a2:	5e 2d       	mov	r21, r14
    10a4:	3c 2d       	mov	r19, r12
    10a6:	ba 2d       	mov	r27, r10
    10a8:	fc 01       	movw	r30, r24
    10aa:	13 82       	std	Z+3, r1	; 0x03
    10ac:	12 82       	std	Z+2, r1	; 0x02
    10ae:	02 e2       	ldi	r16, 0x22	; 34
    10b0:	11 e0       	ldi	r17, 0x01	; 1
    10b2:	11 83       	std	Z+1, r17	; 0x01
    10b4:	00 83       	st	Z, r16
    10b6:	00 d0       	rcall	.+0      	; 0x10b8 <_ZN13LiquidCrystalC1Ehhhhhhhhhhh+0x36>
    10b8:	00 d0       	rcall	.+0      	; 0x10ba <_ZN13LiquidCrystalC1Ehhhhhhhhhhh+0x38>
    10ba:	0d b7       	in	r16, 0x3d	; 61
    10bc:	1e b7       	in	r17, 0x3e	; 62
    10be:	0f 5f       	subi	r16, 0xFF	; 255
    10c0:	1f 4f       	sbci	r17, 0xFF	; 255
    10c2:	ed b7       	in	r30, 0x3d	; 61
    10c4:	fe b7       	in	r31, 0x3e	; 62
    10c6:	81 82       	std	Z+1, r8	; 0x01
    10c8:	2d 85       	ldd	r18, Y+13	; 0x0d
    10ca:	f8 01       	movw	r30, r16
    10cc:	21 83       	std	Z+1, r18	; 0x01
    10ce:	2e 85       	ldd	r18, Y+14	; 0x0e
    10d0:	22 83       	std	Z+2, r18	; 0x02
    10d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    10d4:	23 83       	std	Z+3, r18	; 0x03
    10d6:	60 e0       	ldi	r22, 0x00	; 0
    10d8:	4a 2f       	mov	r20, r26
    10da:	2f 2d       	mov	r18, r15
    10dc:	0d 2d       	mov	r16, r13
    10de:	e7 2e       	mov	r14, r23
    10e0:	c5 2e       	mov	r12, r21
    10e2:	a3 2e       	mov	r10, r19
    10e4:	8b 2e       	mov	r8, r27
    10e6:	0e 94 46 07 	call	0xe8c	; 0xe8c <_ZN13LiquidCrystal4initEhhhhhhhhhhhh>
    10ea:	0f 90       	pop	r0
    10ec:	0f 90       	pop	r0
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	cf 91       	pop	r28
    10f4:	df 91       	pop	r29
    10f6:	1f 91       	pop	r17
    10f8:	0f 91       	pop	r16
    10fa:	ff 90       	pop	r15
    10fc:	ef 90       	pop	r14
    10fe:	df 90       	pop	r13
    1100:	cf 90       	pop	r12
    1102:	af 90       	pop	r10
    1104:	8f 90       	pop	r8
    1106:	08 95       	ret

00001108 <_ZN12PDControllerC1Ev>:
    1108:	2a ef       	ldi	r18, 0xFA	; 250
    110a:	30 e0       	ldi	r19, 0x00	; 0
    110c:	fc 01       	movw	r30, r24
    110e:	31 8f       	std	Z+25, r19	; 0x19
    1110:	20 8f       	std	Z+24, r18	; 0x18
    1112:	08 95       	ret

00001114 <_ZN12PDController7computeEd>:
    1114:	6f 92       	push	r6
    1116:	7f 92       	push	r7
    1118:	8f 92       	push	r8
    111a:	9f 92       	push	r9
    111c:	af 92       	push	r10
    111e:	bf 92       	push	r11
    1120:	cf 92       	push	r12
    1122:	df 92       	push	r13
    1124:	ef 92       	push	r14
    1126:	ff 92       	push	r15
    1128:	0f 93       	push	r16
    112a:	1f 93       	push	r17
    112c:	cf 93       	push	r28
    112e:	df 93       	push	r29
    1130:	ec 01       	movw	r28, r24
    1132:	7a 01       	movw	r14, r20
    1134:	8b 01       	movw	r16, r22
    1136:	48 83       	st	Y, r20
    1138:	59 83       	std	Y+1, r21	; 0x01
    113a:	6a 83       	std	Y+2, r22	; 0x02
    113c:	7b 83       	std	Y+3, r23	; 0x03
    113e:	68 85       	ldd	r22, Y+8	; 0x08
    1140:	79 85       	ldd	r23, Y+9	; 0x09
    1142:	8a 85       	ldd	r24, Y+10	; 0x0a
    1144:	9b 85       	ldd	r25, Y+11	; 0x0b
    1146:	a8 01       	movw	r20, r16
    1148:	97 01       	movw	r18, r14
    114a:	0e 94 28 11 	call	0x2250	; 0x2250 <__subsf3>
    114e:	28 89       	ldd	r18, Y+16	; 0x10
    1150:	39 89       	ldd	r19, Y+17	; 0x11
    1152:	4a 89       	ldd	r20, Y+18	; 0x12
    1154:	5b 89       	ldd	r21, Y+19	; 0x13
    1156:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    115a:	5b 01       	movw	r10, r22
    115c:	6c 01       	movw	r12, r24
    115e:	c8 01       	movw	r24, r16
    1160:	b7 01       	movw	r22, r14
    1162:	2c 85       	ldd	r18, Y+12	; 0x0c
    1164:	3d 85       	ldd	r19, Y+13	; 0x0d
    1166:	4e 85       	ldd	r20, Y+14	; 0x0e
    1168:	5f 85       	ldd	r21, Y+15	; 0x0f
    116a:	0e 94 28 11 	call	0x2250	; 0x2250 <__subsf3>
    116e:	2c 89       	ldd	r18, Y+20	; 0x14
    1170:	3d 89       	ldd	r19, Y+21	; 0x15
    1172:	4e 89       	ldd	r20, Y+22	; 0x16
    1174:	5f 89       	ldd	r21, Y+23	; 0x17
    1176:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    117a:	9b 01       	movw	r18, r22
    117c:	ac 01       	movw	r20, r24
    117e:	c6 01       	movw	r24, r12
    1180:	b5 01       	movw	r22, r10
    1182:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__addsf3>
    1186:	d6 2e       	mov	r13, r22
    1188:	c7 2e       	mov	r12, r23
    118a:	b8 2e       	mov	r11, r24
    118c:	a9 2e       	mov	r10, r25
    118e:	a6 01       	movw	r20, r12
    1190:	95 01       	movw	r18, r10
    1192:	85 2f       	mov	r24, r21
    1194:	94 2f       	mov	r25, r20
    1196:	a3 2f       	mov	r26, r19
    1198:	b2 2f       	mov	r27, r18
    119a:	8c 83       	std	Y+4, r24	; 0x04
    119c:	9d 83       	std	Y+5, r25	; 0x05
    119e:	ae 83       	std	Y+6, r26	; 0x06
    11a0:	bf 83       	std	Y+7, r27	; 0x07
    11a2:	6e 8c       	ldd	r6, Y+30	; 0x1e
    11a4:	7f 8c       	ldd	r7, Y+31	; 0x1f
    11a6:	88 a0       	ldd	r8, Y+32	; 0x20
    11a8:	99 a0       	ldd	r9, Y+33	; 0x21
    11aa:	65 2f       	mov	r22, r21
    11ac:	74 2f       	mov	r23, r20
    11ae:	83 2f       	mov	r24, r19
    11b0:	92 2f       	mov	r25, r18
    11b2:	a4 01       	movw	r20, r8
    11b4:	93 01       	movw	r18, r6
    11b6:	0e 94 31 13 	call	0x2662	; 0x2662 <__gtsf2>
    11ba:	18 16       	cp	r1, r24
    11bc:	84 f0       	brlt	.+32     	; 0x11de <_ZN12PDController7computeEd+0xca>
    11be:	6a 8c       	ldd	r6, Y+26	; 0x1a
    11c0:	7b 8c       	ldd	r7, Y+27	; 0x1b
    11c2:	8c 8c       	ldd	r8, Y+28	; 0x1c
    11c4:	9d 8c       	ldd	r9, Y+29	; 0x1d
    11c6:	a6 01       	movw	r20, r12
    11c8:	95 01       	movw	r18, r10
    11ca:	65 2f       	mov	r22, r21
    11cc:	74 2f       	mov	r23, r20
    11ce:	83 2f       	mov	r24, r19
    11d0:	92 2f       	mov	r25, r18
    11d2:	a4 01       	movw	r20, r8
    11d4:	93 01       	movw	r18, r6
    11d6:	0e 94 91 13 	call	0x2722	; 0x2722 <__ltsf2>
    11da:	87 ff       	sbrs	r24, 7
    11dc:	04 c0       	rjmp	.+8      	; 0x11e6 <_ZN12PDController7computeEd+0xd2>
    11de:	6c 82       	std	Y+4, r6	; 0x04
    11e0:	7d 82       	std	Y+5, r7	; 0x05
    11e2:	8e 82       	std	Y+6, r8	; 0x06
    11e4:	9f 82       	std	Y+7, r9	; 0x07
    11e6:	ec 86       	std	Y+12, r14	; 0x0c
    11e8:	fd 86       	std	Y+13, r15	; 0x0d
    11ea:	0e 87       	std	Y+14, r16	; 0x0e
    11ec:	1f 87       	std	Y+15, r17	; 0x0f
    11ee:	df 91       	pop	r29
    11f0:	cf 91       	pop	r28
    11f2:	1f 91       	pop	r17
    11f4:	0f 91       	pop	r16
    11f6:	ff 90       	pop	r15
    11f8:	ef 90       	pop	r14
    11fa:	df 90       	pop	r13
    11fc:	cf 90       	pop	r12
    11fe:	bf 90       	pop	r11
    1200:	af 90       	pop	r10
    1202:	9f 90       	pop	r9
    1204:	8f 90       	pop	r8
    1206:	7f 90       	pop	r7
    1208:	6f 90       	pop	r6
    120a:	08 95       	ret

0000120c <_ZN12PDController8autoTuneEdd>:
    120c:	4f 92       	push	r4
    120e:	5f 92       	push	r5
    1210:	6f 92       	push	r6
    1212:	7f 92       	push	r7
    1214:	8f 92       	push	r8
    1216:	9f 92       	push	r9
    1218:	af 92       	push	r10
    121a:	bf 92       	push	r11
    121c:	cf 92       	push	r12
    121e:	df 92       	push	r13
    1220:	ef 92       	push	r14
    1222:	ff 92       	push	r15
    1224:	0f 93       	push	r16
    1226:	1f 93       	push	r17
    1228:	cf 93       	push	r28
    122a:	df 93       	push	r29
    122c:	ec 01       	movw	r28, r24
    122e:	6a 01       	movw	r12, r20
    1230:	7b 01       	movw	r14, r22
    1232:	28 01       	movw	r4, r16
    1234:	39 01       	movw	r6, r18
    1236:	88 80       	ld	r8, Y
    1238:	99 80       	ldd	r9, Y+1	; 0x01
    123a:	aa 80       	ldd	r10, Y+2	; 0x02
    123c:	bb 80       	ldd	r11, Y+3	; 0x03
    123e:	c5 01       	movw	r24, r10
    1240:	b4 01       	movw	r22, r8
    1242:	a7 01       	movw	r20, r14
    1244:	96 01       	movw	r18, r12
    1246:	0e 94 31 13 	call	0x2662	; 0x2662 <__gtsf2>
    124a:	18 16       	cp	r1, r24
    124c:	bc f4       	brge	.+46     	; 0x127c <_ZN12PDController8autoTuneEdd+0x70>
    124e:	c8 88       	ldd	r12, Y+16	; 0x10
    1250:	d9 88       	ldd	r13, Y+17	; 0x11
    1252:	ea 88       	ldd	r14, Y+18	; 0x12
    1254:	fb 88       	ldd	r15, Y+19	; 0x13
    1256:	c7 01       	movw	r24, r14
    1258:	b6 01       	movw	r22, r12
    125a:	2a e0       	ldi	r18, 0x0A	; 10
    125c:	37 ed       	ldi	r19, 0xD7	; 215
    125e:	43 e2       	ldi	r20, 0x23	; 35
    1260:	5c e3       	ldi	r21, 0x3C	; 60
    1262:	0e 94 31 13 	call	0x2662	; 0x2662 <__gtsf2>
    1266:	18 16       	cp	r1, r24
    1268:	4c f4       	brge	.+18     	; 0x127c <_ZN12PDController8autoTuneEdd+0x70>
    126a:	c7 01       	movw	r24, r14
    126c:	b6 01       	movw	r22, r12
    126e:	2d ec       	ldi	r18, 0xCD	; 205
    1270:	3c ec       	ldi	r19, 0xCC	; 204
    1272:	4c ec       	ldi	r20, 0xCC	; 204
    1274:	5d e3       	ldi	r21, 0x3D	; 61
    1276:	0e 94 28 11 	call	0x2250	; 0x2250 <__subsf3>
    127a:	1e c0       	rjmp	.+60     	; 0x12b8 <_ZN12PDController8autoTuneEdd+0xac>
    127c:	c5 01       	movw	r24, r10
    127e:	b4 01       	movw	r22, r8
    1280:	a3 01       	movw	r20, r6
    1282:	92 01       	movw	r18, r4
    1284:	0e 94 91 13 	call	0x2722	; 0x2722 <__ltsf2>
    1288:	87 ff       	sbrs	r24, 7
    128a:	1a c0       	rjmp	.+52     	; 0x12c0 <_ZN12PDController8autoTuneEdd+0xb4>
    128c:	c8 88       	ldd	r12, Y+16	; 0x10
    128e:	d9 88       	ldd	r13, Y+17	; 0x11
    1290:	ea 88       	ldd	r14, Y+18	; 0x12
    1292:	fb 88       	ldd	r15, Y+19	; 0x13
    1294:	c7 01       	movw	r24, r14
    1296:	b6 01       	movw	r22, r12
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	48 e4       	ldi	r20, 0x48	; 72
    129e:	53 e4       	ldi	r21, 0x43	; 67
    12a0:	0e 94 91 13 	call	0x2722	; 0x2722 <__ltsf2>
    12a4:	87 ff       	sbrs	r24, 7
    12a6:	0c c0       	rjmp	.+24     	; 0x12c0 <_ZN12PDController8autoTuneEdd+0xb4>
    12a8:	c7 01       	movw	r24, r14
    12aa:	b6 01       	movw	r22, r12
    12ac:	2d ec       	ldi	r18, 0xCD	; 205
    12ae:	3c ec       	ldi	r19, 0xCC	; 204
    12b0:	4c ec       	ldi	r20, 0xCC	; 204
    12b2:	5d e3       	ldi	r21, 0x3D	; 61
    12b4:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__addsf3>
    12b8:	68 8b       	std	Y+16, r22	; 0x10
    12ba:	79 8b       	std	Y+17, r23	; 0x11
    12bc:	8a 8b       	std	Y+18, r24	; 0x12
    12be:	9b 8b       	std	Y+19, r25	; 0x13
    12c0:	df 91       	pop	r29
    12c2:	cf 91       	pop	r28
    12c4:	1f 91       	pop	r17
    12c6:	0f 91       	pop	r16
    12c8:	ff 90       	pop	r15
    12ca:	ef 90       	pop	r14
    12cc:	df 90       	pop	r13
    12ce:	cf 90       	pop	r12
    12d0:	bf 90       	pop	r11
    12d2:	af 90       	pop	r10
    12d4:	9f 90       	pop	r9
    12d6:	8f 90       	pop	r8
    12d8:	7f 90       	pop	r7
    12da:	6f 90       	pop	r6
    12dc:	5f 90       	pop	r5
    12de:	4f 90       	pop	r4
    12e0:	08 95       	ret

000012e2 <_ZN12PDController10setTuningsEdd>:
    12e2:	af 92       	push	r10
    12e4:	bf 92       	push	r11
    12e6:	cf 92       	push	r12
    12e8:	df 92       	push	r13
    12ea:	ef 92       	push	r14
    12ec:	ff 92       	push	r15
    12ee:	0f 93       	push	r16
    12f0:	1f 93       	push	r17
    12f2:	cf 93       	push	r28
    12f4:	df 93       	push	r29
    12f6:	ec 01       	movw	r28, r24
    12f8:	5a 01       	movw	r10, r20
    12fa:	6b 01       	movw	r12, r22
    12fc:	78 01       	movw	r14, r16
    12fe:	89 01       	movw	r16, r18
    1300:	68 8d       	ldd	r22, Y+24	; 0x18
    1302:	79 8d       	ldd	r23, Y+25	; 0x19
    1304:	88 27       	eor	r24, r24
    1306:	77 fd       	sbrc	r23, 7
    1308:	80 95       	com	r24
    130a:	98 2f       	mov	r25, r24
    130c:	0e 94 c1 13 	call	0x2782	; 0x2782 <__floatsisf>
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	4a e7       	ldi	r20, 0x7A	; 122
    1316:	54 e4       	ldi	r21, 0x44	; 68
    1318:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__divsf3>
    131c:	56 2f       	mov	r21, r22
    131e:	47 2f       	mov	r20, r23
    1320:	38 2f       	mov	r19, r24
    1322:	29 2f       	mov	r18, r25
    1324:	a8 8a       	std	Y+16, r10	; 0x10
    1326:	b9 8a       	std	Y+17, r11	; 0x11
    1328:	ca 8a       	std	Y+18, r12	; 0x12
    132a:	db 8a       	std	Y+19, r13	; 0x13
    132c:	c8 01       	movw	r24, r16
    132e:	b7 01       	movw	r22, r14
    1330:	da 01       	movw	r26, r20
    1332:	f9 01       	movw	r30, r18
    1334:	2b 2f       	mov	r18, r27
    1336:	3a 2f       	mov	r19, r26
    1338:	4f 2f       	mov	r20, r31
    133a:	5e 2f       	mov	r21, r30
    133c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__divsf3>
    1340:	6c 8b       	std	Y+20, r22	; 0x14
    1342:	7d 8b       	std	Y+21, r23	; 0x15
    1344:	8e 8b       	std	Y+22, r24	; 0x16
    1346:	9f 8b       	std	Y+23, r25	; 0x17
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	df 90       	pop	r13
    1356:	cf 90       	pop	r12
    1358:	bf 90       	pop	r11
    135a:	af 90       	pop	r10
    135c:	08 95       	ret

0000135e <_ZN12PDController15setOutputLimitsEdd>:
    135e:	6f 92       	push	r6
    1360:	7f 92       	push	r7
    1362:	8f 92       	push	r8
    1364:	9f 92       	push	r9
    1366:	af 92       	push	r10
    1368:	bf 92       	push	r11
    136a:	cf 92       	push	r12
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	ec 01       	movw	r28, r24
    137c:	5a 01       	movw	r10, r20
    137e:	6b 01       	movw	r12, r22
    1380:	78 01       	movw	r14, r16
    1382:	89 01       	movw	r16, r18
    1384:	cb 01       	movw	r24, r22
    1386:	ba 01       	movw	r22, r20
    1388:	a8 01       	movw	r20, r16
    138a:	97 01       	movw	r18, r14
    138c:	0e 94 31 13 	call	0x2662	; 0x2662 <__gtsf2>
    1390:	18 16       	cp	r1, r24
    1392:	2c f1       	brlt	.+74     	; 0x13de <_ZN12PDController15setOutputLimitsEdd+0x80>
    1394:	aa 8e       	std	Y+26, r10	; 0x1a
    1396:	bb 8e       	std	Y+27, r11	; 0x1b
    1398:	cc 8e       	std	Y+28, r12	; 0x1c
    139a:	dd 8e       	std	Y+29, r13	; 0x1d
    139c:	ee 8e       	std	Y+30, r14	; 0x1e
    139e:	ff 8e       	std	Y+31, r15	; 0x1f
    13a0:	08 a3       	std	Y+32, r16	; 0x20
    13a2:	19 a3       	std	Y+33, r17	; 0x21
    13a4:	6c 80       	ldd	r6, Y+4	; 0x04
    13a6:	7d 80       	ldd	r7, Y+5	; 0x05
    13a8:	8e 80       	ldd	r8, Y+6	; 0x06
    13aa:	9f 80       	ldd	r9, Y+7	; 0x07
    13ac:	c4 01       	movw	r24, r8
    13ae:	b3 01       	movw	r22, r6
    13b0:	a8 01       	movw	r20, r16
    13b2:	97 01       	movw	r18, r14
    13b4:	0e 94 31 13 	call	0x2662	; 0x2662 <__gtsf2>
    13b8:	18 16       	cp	r1, r24
    13ba:	2c f4       	brge	.+10     	; 0x13c6 <_ZN12PDController15setOutputLimitsEdd+0x68>
    13bc:	ec 82       	std	Y+4, r14	; 0x04
    13be:	fd 82       	std	Y+5, r15	; 0x05
    13c0:	0e 83       	std	Y+6, r16	; 0x06
    13c2:	1f 83       	std	Y+7, r17	; 0x07
    13c4:	0c c0       	rjmp	.+24     	; 0x13de <_ZN12PDController15setOutputLimitsEdd+0x80>
    13c6:	c4 01       	movw	r24, r8
    13c8:	b3 01       	movw	r22, r6
    13ca:	a6 01       	movw	r20, r12
    13cc:	95 01       	movw	r18, r10
    13ce:	0e 94 91 13 	call	0x2722	; 0x2722 <__ltsf2>
    13d2:	87 ff       	sbrs	r24, 7
    13d4:	04 c0       	rjmp	.+8      	; 0x13de <_ZN12PDController15setOutputLimitsEdd+0x80>
    13d6:	ac 82       	std	Y+4, r10	; 0x04
    13d8:	bd 82       	std	Y+5, r11	; 0x05
    13da:	ce 82       	std	Y+6, r12	; 0x06
    13dc:	df 82       	std	Y+7, r13	; 0x07
    13de:	df 91       	pop	r29
    13e0:	cf 91       	pop	r28
    13e2:	1f 91       	pop	r17
    13e4:	0f 91       	pop	r16
    13e6:	ff 90       	pop	r15
    13e8:	ef 90       	pop	r14
    13ea:	df 90       	pop	r13
    13ec:	cf 90       	pop	r12
    13ee:	bf 90       	pop	r11
    13f0:	af 90       	pop	r10
    13f2:	9f 90       	pop	r9
    13f4:	8f 90       	pop	r8
    13f6:	7f 90       	pop	r7
    13f8:	6f 90       	pop	r6
    13fa:	08 95       	ret

000013fc <_Z17PDController_initv>:
    13fc:	f8 94       	cli
    13fe:	10 92 80 00 	sts	0x0080, r1
    1402:	e1 e8       	ldi	r30, 0x81	; 129
    1404:	f0 e0       	ldi	r31, 0x00	; 0
    1406:	10 82       	st	Z, r1
    1408:	10 92 85 00 	sts	0x0085, r1
    140c:	10 92 84 00 	sts	0x0084, r1
    1410:	89 e0       	ldi	r24, 0x09	; 9
    1412:	9d e3       	ldi	r25, 0x3D	; 61
    1414:	90 93 89 00 	sts	0x0089, r25
    1418:	80 93 88 00 	sts	0x0088, r24
    141c:	80 81       	ld	r24, Z
    141e:	88 60       	ori	r24, 0x08	; 8
    1420:	80 83       	st	Z, r24
    1422:	80 81       	ld	r24, Z
    1424:	84 60       	ori	r24, 0x04	; 4
    1426:	80 83       	st	Z, r24
    1428:	ef e6       	ldi	r30, 0x6F	; 111
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	82 60       	ori	r24, 0x02	; 2
    1430:	80 83       	st	Z, r24
    1432:	78 94       	sei
    1434:	08 95       	ret

00001436 <__vector_7>:
    1436:	1f 92       	push	r1
    1438:	0f 92       	push	r0
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	0f 92       	push	r0
    143e:	11 24       	eor	r1, r1
    1440:	2f 93       	push	r18
    1442:	3f 93       	push	r19
    1444:	4f 93       	push	r20
    1446:	5f 93       	push	r21
    1448:	6f 93       	push	r22
    144a:	8f 93       	push	r24
    144c:	9f 93       	push	r25
    144e:	af 93       	push	r26
    1450:	bf 93       	push	r27
    1452:	ef 93       	push	r30
    1454:	ff 93       	push	r31
    1456:	80 91 2e 01 	lds	r24, 0x012E
    145a:	8f 5f       	subi	r24, 0xFF	; 255
    145c:	80 93 2e 01 	sts	0x012E, r24
    1460:	80 91 2e 01 	lds	r24, 0x012E
    1464:	88 23       	and	r24, r24
    1466:	19 f0       	breq	.+6      	; 0x146e <__vector_7+0x38>
    1468:	e3 e1       	ldi	r30, 0x13	; 19
    146a:	f3 e0       	ldi	r31, 0x03	; 3
    146c:	40 c0       	rjmp	.+128    	; 0x14ee <__vector_7+0xb8>
    146e:	e4 e1       	ldi	r30, 0x14	; 20
    1470:	f3 e0       	ldi	r31, 0x03	; 3
    1472:	66 81       	ldd	r22, Z+6	; 0x06
    1474:	66 23       	and	r22, r22
    1476:	19 f4       	brne	.+6      	; 0x147e <__vector_7+0x48>
    1478:	87 81       	ldd	r24, Z+7	; 0x07
    147a:	88 23       	and	r24, r24
    147c:	f9 f0       	breq	.+62     	; 0x14bc <__vector_7+0x86>
    147e:	84 81       	ldd	r24, Z+4	; 0x04
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	25 81       	ldd	r18, Z+5	; 0x05
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	ac 01       	movw	r20, r24
    1488:	42 1b       	sub	r20, r18
    148a:	53 0b       	sbc	r21, r19
    148c:	14 16       	cp	r1, r20
    148e:	15 06       	cpc	r1, r21
    1490:	44 f4       	brge	.+16     	; 0x14a2 <__vector_7+0x6c>
    1492:	66 23       	and	r22, r22
    1494:	a1 f0       	breq	.+40     	; 0x14be <__vector_7+0x88>
    1496:	26 0f       	add	r18, r22
    1498:	31 1d       	adc	r19, r1
    149a:	28 17       	cp	r18, r24
    149c:	39 07       	cpc	r19, r25
    149e:	7c f4       	brge	.+30     	; 0x14be <__vector_7+0x88>
    14a0:	0b c0       	rjmp	.+22     	; 0x14b8 <__vector_7+0x82>
    14a2:	41 15       	cp	r20, r1
    14a4:	51 05       	cpc	r21, r1
    14a6:	59 f0       	breq	.+22     	; 0x14be <__vector_7+0x88>
    14a8:	47 81       	ldd	r20, Z+7	; 0x07
    14aa:	44 23       	and	r20, r20
    14ac:	41 f0       	breq	.+16     	; 0x14be <__vector_7+0x88>
    14ae:	24 1b       	sub	r18, r20
    14b0:	31 09       	sbc	r19, r1
    14b2:	82 17       	cp	r24, r18
    14b4:	93 07       	cpc	r25, r19
    14b6:	1c f4       	brge	.+6      	; 0x14be <__vector_7+0x88>
    14b8:	c9 01       	movw	r24, r18
    14ba:	01 c0       	rjmp	.+2      	; 0x14be <__vector_7+0x88>
    14bc:	84 81       	ldd	r24, Z+4	; 0x04
    14be:	85 83       	std	Z+5, r24	; 0x05
    14c0:	85 81       	ldd	r24, Z+5	; 0x05
    14c2:	88 23       	and	r24, r24
    14c4:	71 f0       	breq	.+28     	; 0x14e2 <__vector_7+0xac>
    14c6:	90 81       	ld	r25, Z
    14c8:	a1 81       	ldd	r26, Z+1	; 0x01
    14ca:	b2 81       	ldd	r27, Z+2	; 0x02
    14cc:	83 81       	ldd	r24, Z+3	; 0x03
    14ce:	99 23       	and	r25, r25
    14d0:	21 f4       	brne	.+8      	; 0x14da <__vector_7+0xa4>
    14d2:	9c 91       	ld	r25, X
    14d4:	98 2b       	or	r25, r24
    14d6:	9c 93       	st	X, r25
    14d8:	04 c0       	rjmp	.+8      	; 0x14e2 <__vector_7+0xac>
    14da:	9c 91       	ld	r25, X
    14dc:	80 95       	com	r24
    14de:	89 23       	and	r24, r25
    14e0:	8c 93       	st	X, r24
    14e2:	39 96       	adiw	r30, 0x09	; 9
    14e4:	83 e0       	ldi	r24, 0x03	; 3
    14e6:	e6 32       	cpi	r30, 0x26	; 38
    14e8:	f8 07       	cpc	r31, r24
    14ea:	19 f6       	brne	.-122    	; 0x1472 <__vector_7+0x3c>
    14ec:	bd cf       	rjmp	.-134    	; 0x1468 <__vector_7+0x32>
    14ee:	80 81       	ld	r24, Z
    14f0:	87 fd       	sbrc	r24, 7
    14f2:	13 c0       	rjmp	.+38     	; 0x151a <__vector_7+0xe4>
    14f4:	80 91 2e 01 	lds	r24, 0x012E
    14f8:	96 81       	ldd	r25, Z+6	; 0x06
    14fa:	98 17       	cp	r25, r24
    14fc:	71 f4       	brne	.+28     	; 0x151a <__vector_7+0xe4>
    14fe:	81 81       	ldd	r24, Z+1	; 0x01
    1500:	a2 81       	ldd	r26, Z+2	; 0x02
    1502:	b3 81       	ldd	r27, Z+3	; 0x03
    1504:	94 81       	ldd	r25, Z+4	; 0x04
    1506:	88 23       	and	r24, r24
    1508:	29 f4       	brne	.+10     	; 0x1514 <__vector_7+0xde>
    150a:	2c 91       	ld	r18, X
    150c:	89 2f       	mov	r24, r25
    150e:	80 95       	com	r24
    1510:	82 23       	and	r24, r18
    1512:	02 c0       	rjmp	.+4      	; 0x1518 <__vector_7+0xe2>
    1514:	8c 91       	ld	r24, X
    1516:	89 2b       	or	r24, r25
    1518:	8c 93       	st	X, r24
    151a:	39 96       	adiw	r30, 0x09	; 9
    151c:	83 e0       	ldi	r24, 0x03	; 3
    151e:	e5 32       	cpi	r30, 0x25	; 37
    1520:	f8 07       	cpc	r31, r24
    1522:	29 f7       	brne	.-54     	; 0x14ee <__vector_7+0xb8>
    1524:	ff 91       	pop	r31
    1526:	ef 91       	pop	r30
    1528:	bf 91       	pop	r27
    152a:	af 91       	pop	r26
    152c:	9f 91       	pop	r25
    152e:	8f 91       	pop	r24
    1530:	6f 91       	pop	r22
    1532:	5f 91       	pop	r21
    1534:	4f 91       	pop	r20
    1536:	3f 91       	pop	r19
    1538:	2f 91       	pop	r18
    153a:	0f 90       	pop	r0
    153c:	0f be       	out	0x3f, r0	; 63
    153e:	0f 90       	pop	r0
    1540:	1f 90       	pop	r1
    1542:	18 95       	reti

00001544 <_Z12SoftPWMBeginh>:
    1544:	91 e0       	ldi	r25, 0x01	; 1
    1546:	97 bb       	out	0x17, r25	; 23
    1548:	92 e0       	ldi	r25, 0x02	; 2
    154a:	90 93 b1 00 	sts	0x00B1, r25
    154e:	90 93 b0 00 	sts	0x00B0, r25
    1552:	22 e8       	ldi	r18, 0x82	; 130
    1554:	20 93 b3 00 	sts	0x00B3, r18
    1558:	e0 e7       	ldi	r30, 0x70	; 112
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	90 83       	st	Z, r25
    155e:	90 81       	ld	r25, Z
    1560:	9f ef       	ldi	r25, 0xFF	; 255
    1562:	90 93 13 03 	sts	0x0313, r25
    1566:	10 92 14 03 	sts	0x0314, r1
    156a:	10 92 16 03 	sts	0x0316, r1
    156e:	10 92 15 03 	sts	0x0315, r1
    1572:	10 92 1a 03 	sts	0x031A, r1
    1576:	10 92 1b 03 	sts	0x031B, r1
    157a:	90 93 1c 03 	sts	0x031C, r25
    157e:	10 92 1d 03 	sts	0x031D, r1
    1582:	10 92 1f 03 	sts	0x031F, r1
    1586:	10 92 1e 03 	sts	0x031E, r1
    158a:	10 92 23 03 	sts	0x0323, r1
    158e:	10 92 24 03 	sts	0x0324, r1
    1592:	80 93 12 03 	sts	0x0312, r24
    1596:	08 95       	ret

00001598 <_Z18SoftPWMSetPolarityah>:
    1598:	91 e0       	ldi	r25, 0x01	; 1
    159a:	66 23       	and	r22, r22
    159c:	09 f4       	brne	.+2      	; 0x15a0 <_Z18SoftPWMSetPolarityah+0x8>
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	30 91 13 03 	lds	r19, 0x0313
    15a4:	20 91 1c 03 	lds	r18, 0x031C
    15a8:	87 ff       	sbrs	r24, 7
    15aa:	06 c0       	rjmp	.+12     	; 0x15b8 <_Z18SoftPWMSetPolarityah+0x20>
    15ac:	08 c0       	rjmp	.+16     	; 0x15be <_Z18SoftPWMSetPolarityah+0x26>
    15ae:	90 93 14 03 	sts	0x0314, r25
    15b2:	87 ff       	sbrs	r24, 7
    15b4:	0a c0       	rjmp	.+20     	; 0x15ca <_Z18SoftPWMSetPolarityah+0x32>
    15b6:	0c c0       	rjmp	.+24     	; 0x15d0 <_Z18SoftPWMSetPolarityah+0x38>
    15b8:	38 17       	cp	r19, r24
    15ba:	39 f4       	brne	.+14     	; 0x15ca <_Z18SoftPWMSetPolarityah+0x32>
    15bc:	f8 cf       	rjmp	.-16     	; 0x15ae <_Z18SoftPWMSetPolarityah+0x16>
    15be:	37 ff       	sbrs	r19, 7
    15c0:	f6 cf       	rjmp	.-20     	; 0x15ae <_Z18SoftPWMSetPolarityah+0x16>
    15c2:	06 c0       	rjmp	.+12     	; 0x15d0 <_Z18SoftPWMSetPolarityah+0x38>
    15c4:	90 93 1d 03 	sts	0x031D, r25
    15c8:	08 95       	ret
    15ca:	28 17       	cp	r18, r24
    15cc:	19 f4       	brne	.+6      	; 0x15d4 <_Z18SoftPWMSetPolarityah+0x3c>
    15ce:	fa cf       	rjmp	.-12     	; 0x15c4 <_Z18SoftPWMSetPolarityah+0x2c>
    15d0:	27 ff       	sbrs	r18, 7
    15d2:	f8 cf       	rjmp	.-16     	; 0x15c4 <_Z18SoftPWMSetPolarityah+0x2c>
    15d4:	08 95       	ret

000015d6 <_Z10SoftPWMSetahh>:
    15d6:	1f 93       	push	r17
    15d8:	18 2f       	mov	r17, r24
    15da:	44 23       	and	r20, r20
    15dc:	29 f0       	breq	.+10     	; 0x15e8 <_Z10SoftPWMSetahh+0x12>
    15de:	10 92 b2 00 	sts	0x00B2, r1
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	80 93 2e 01 	sts	0x012E, r24
    15e8:	e3 e1       	ldi	r30, 0x13	; 19
    15ea:	f3 e0       	ldi	r31, 0x03	; 3
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	8f ef       	ldi	r24, 0xFF	; 255
    15f0:	20 81       	ld	r18, Z
    15f2:	17 ff       	sbrs	r17, 7
    15f4:	03 c0       	rjmp	.+6      	; 0x15fc <_Z10SoftPWMSetahh+0x26>
    15f6:	27 ff       	sbrs	r18, 7
    15f8:	03 c0       	rjmp	.+6      	; 0x1600 <_Z10SoftPWMSetahh+0x2a>
    15fa:	05 c0       	rjmp	.+10     	; 0x1606 <_Z10SoftPWMSetahh+0x30>
    15fc:	21 17       	cp	r18, r17
    15fe:	19 f4       	brne	.+6      	; 0x1606 <_Z10SoftPWMSetahh+0x30>
    1600:	65 83       	std	Z+5, r22	; 0x05
    1602:	17 ff       	sbrs	r17, 7
    1604:	4d c0       	rjmp	.+154    	; 0x16a0 <_Z10SoftPWMSetahh+0xca>
    1606:	8f 3f       	cpi	r24, 0xFF	; 255
    1608:	19 f4       	brne	.+6      	; 0x1610 <_Z10SoftPWMSetahh+0x3a>
    160a:	20 81       	ld	r18, Z
    160c:	27 fd       	sbrc	r18, 7
    160e:	89 2f       	mov	r24, r25
    1610:	9f 5f       	subi	r25, 0xFF	; 255
    1612:	39 96       	adiw	r30, 0x09	; 9
    1614:	92 30       	cpi	r25, 0x02	; 2
    1616:	61 f7       	brne	.-40     	; 0x15f0 <_Z10SoftPWMSetahh+0x1a>
    1618:	17 fd       	sbrc	r17, 7
    161a:	42 c0       	rjmp	.+132    	; 0x16a0 <_Z10SoftPWMSetahh+0xca>
    161c:	8f 3f       	cpi	r24, 0xFF	; 255
    161e:	09 f4       	brne	.+2      	; 0x1622 <_Z10SoftPWMSetahh+0x4c>
    1620:	3f c0       	rjmp	.+126    	; 0x16a0 <_Z10SoftPWMSetahh+0xca>
    1622:	99 27       	eor	r25, r25
    1624:	87 fd       	sbrc	r24, 7
    1626:	90 95       	com	r25
    1628:	dc 01       	movw	r26, r24
    162a:	23 e0       	ldi	r18, 0x03	; 3
    162c:	aa 0f       	add	r26, r26
    162e:	bb 1f       	adc	r27, r27
    1630:	2a 95       	dec	r18
    1632:	e1 f7       	brne	.-8      	; 0x162c <_Z10SoftPWMSetahh+0x56>
    1634:	a8 0f       	add	r26, r24
    1636:	b9 1f       	adc	r27, r25
    1638:	ad 5e       	subi	r26, 0xED	; 237
    163a:	bc 4f       	sbci	r27, 0xFC	; 252
    163c:	1c 93       	st	X, r17
    163e:	80 91 12 03 	lds	r24, 0x0312
    1642:	11 96       	adiw	r26, 0x01	; 1
    1644:	8c 93       	st	X, r24
    1646:	11 97       	sbiw	r26, 0x01	; 1
    1648:	21 2f       	mov	r18, r17
    164a:	33 27       	eor	r19, r19
    164c:	27 fd       	sbrc	r18, 7
    164e:	30 95       	com	r19
    1650:	f9 01       	movw	r30, r18
    1652:	ea 57       	subi	r30, 0x7A	; 122
    1654:	ff 4f       	sbci	r31, 0xFF	; 255
    1656:	e4 91       	lpm	r30, Z+
    1658:	f0 e0       	ldi	r31, 0x00	; 0
    165a:	ee 0f       	add	r30, r30
    165c:	ff 1f       	adc	r31, r31
    165e:	ee 58       	subi	r30, 0x8E	; 142
    1660:	ff 4f       	sbci	r31, 0xFF	; 255
    1662:	45 91       	lpm	r20, Z+
    1664:	54 91       	lpm	r21, Z+
    1666:	12 96       	adiw	r26, 0x02	; 2
    1668:	4c 93       	st	X, r20
    166a:	12 97       	sbiw	r26, 0x02	; 2
    166c:	13 96       	adiw	r26, 0x03	; 3
    166e:	5c 93       	st	X, r21
    1670:	13 97       	sbiw	r26, 0x03	; 3
    1672:	26 56       	subi	r18, 0x66	; 102
    1674:	3f 4f       	sbci	r19, 0xFF	; 255
    1676:	f9 01       	movw	r30, r18
    1678:	24 91       	lpm	r18, Z+
    167a:	14 96       	adiw	r26, 0x04	; 4
    167c:	2c 93       	st	X, r18
    167e:	14 97       	sbiw	r26, 0x04	; 4
    1680:	15 96       	adiw	r26, 0x05	; 5
    1682:	6c 93       	st	X, r22
    1684:	15 97       	sbiw	r26, 0x05	; 5
    1686:	88 23       	and	r24, r24
    1688:	19 f4       	brne	.+6      	; 0x1690 <_Z10SoftPWMSetahh+0xba>
    168a:	81 2f       	mov	r24, r17
    168c:	60 e0       	ldi	r22, 0x00	; 0
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <_Z10SoftPWMSetahh+0xbe>
    1690:	81 2f       	mov	r24, r17
    1692:	61 e0       	ldi	r22, 0x01	; 1
    1694:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
    1698:	81 2f       	mov	r24, r17
    169a:	61 e0       	ldi	r22, 0x01	; 1
    169c:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
    16a0:	1f 91       	pop	r17
    16a2:	08 95       	ret

000016a4 <_Z17SoftPWMSetPercentahh>:
    16a4:	e8 2f       	mov	r30, r24
    16a6:	8f ef       	ldi	r24, 0xFF	; 255
    16a8:	68 9f       	mul	r22, r24
    16aa:	b0 01       	movw	r22, r0
    16ac:	11 24       	eor	r1, r1
    16ae:	cb 01       	movw	r24, r22
    16b0:	64 e6       	ldi	r22, 0x64	; 100
    16b2:	70 e0       	ldi	r23, 0x00	; 0
    16b4:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <__udivmodhi4>
    16b8:	8e 2f       	mov	r24, r30
    16ba:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <_Z10SoftPWMSetahh>
    16be:	08 95       	ret

000016c0 <_Z10SoftPWMEnda>:
    16c0:	0f 93       	push	r16
    16c2:	1f 93       	push	r17
    16c4:	cf 93       	push	r28
    16c6:	df 93       	push	r29
    16c8:	18 2f       	mov	r17, r24
    16ca:	c3 e1       	ldi	r28, 0x13	; 19
    16cc:	d3 e0       	ldi	r29, 0x03	; 3
    16ce:	0f ef       	ldi	r16, 0xFF	; 255
    16d0:	88 81       	ld	r24, Y
    16d2:	17 ff       	sbrs	r17, 7
    16d4:	03 c0       	rjmp	.+6      	; 0x16dc <_Z10SoftPWMEnda+0x1c>
    16d6:	87 ff       	sbrs	r24, 7
    16d8:	03 c0       	rjmp	.+6      	; 0x16e0 <_Z10SoftPWMEnda+0x20>
    16da:	0b c0       	rjmp	.+22     	; 0x16f2 <_Z10SoftPWMEnda+0x32>
    16dc:	81 17       	cp	r24, r17
    16de:	49 f4       	brne	.+18     	; 0x16f2 <_Z10SoftPWMEnda+0x32>
    16e0:	88 81       	ld	r24, Y
    16e2:	61 e0       	ldi	r22, 0x01	; 1
    16e4:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
    16e8:	88 81       	ld	r24, Y
    16ea:	60 e0       	ldi	r22, 0x00	; 0
    16ec:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
    16f0:	08 83       	st	Y, r16
    16f2:	29 96       	adiw	r28, 0x09	; 9
    16f4:	83 e0       	ldi	r24, 0x03	; 3
    16f6:	c5 32       	cpi	r28, 0x25	; 37
    16f8:	d8 07       	cpc	r29, r24
    16fa:	51 f7       	brne	.-44     	; 0x16d0 <_Z10SoftPWMEnda+0x10>
    16fc:	df 91       	pop	r29
    16fe:	cf 91       	pop	r28
    1700:	1f 91       	pop	r17
    1702:	0f 91       	pop	r16
    1704:	08 95       	ret

00001706 <_Z18SoftPWMSetFadeTimeajj>:
    1706:	2f 92       	push	r2
    1708:	3f 92       	push	r3
    170a:	4f 92       	push	r4
    170c:	5f 92       	push	r5
    170e:	6f 92       	push	r6
    1710:	7f 92       	push	r7
    1712:	8f 92       	push	r8
    1714:	9f 92       	push	r9
    1716:	af 92       	push	r10
    1718:	bf 92       	push	r11
    171a:	cf 92       	push	r12
    171c:	df 92       	push	r13
    171e:	ef 92       	push	r14
    1720:	ff 92       	push	r15
    1722:	1f 93       	push	r17
    1724:	df 93       	push	r29
    1726:	cf 93       	push	r28
    1728:	00 d0       	rcall	.+0      	; 0x172a <_Z18SoftPWMSetFadeTimeajj+0x24>
    172a:	00 d0       	rcall	.+0      	; 0x172c <_Z18SoftPWMSetFadeTimeajj+0x26>
    172c:	cd b7       	in	r28, 0x3d	; 61
    172e:	de b7       	in	r29, 0x3e	; 62
    1730:	18 2f       	mov	r17, r24
    1732:	4b 01       	movw	r8, r22
    1734:	5a 01       	movw	r10, r20
    1736:	23 e1       	ldi	r18, 0x13	; 19
    1738:	33 e0       	ldi	r19, 0x03	; 3
    173a:	2a 01       	movw	r4, r20
    173c:	66 24       	eor	r6, r6
    173e:	77 24       	eor	r7, r7
    1740:	40 ef       	ldi	r20, 0xF0	; 240
    1742:	c4 2e       	mov	r12, r20
    1744:	4f e0       	ldi	r20, 0x0F	; 15
    1746:	d4 2e       	mov	r13, r20
    1748:	e1 2c       	mov	r14, r1
    174a:	f1 2c       	mov	r15, r1
    174c:	cb 01       	movw	r24, r22
    174e:	a0 e0       	ldi	r26, 0x00	; 0
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	89 83       	std	Y+1, r24	; 0x01
    1754:	9a 83       	std	Y+2, r25	; 0x02
    1756:	ab 83       	std	Y+3, r26	; 0x03
    1758:	bc 83       	std	Y+4, r27	; 0x04
    175a:	19 01       	movw	r2, r18
    175c:	d1 01       	movw	r26, r2
    175e:	8c 91       	ld	r24, X
    1760:	17 ff       	sbrs	r17, 7
    1762:	03 c0       	rjmp	.+6      	; 0x176a <_Z18SoftPWMSetFadeTimeajj+0x64>
    1764:	87 ff       	sbrs	r24, 7
    1766:	03 c0       	rjmp	.+6      	; 0x176e <_Z18SoftPWMSetFadeTimeajj+0x68>
    1768:	26 c0       	rjmp	.+76     	; 0x17b6 <_Z18SoftPWMSetFadeTimeajj+0xb0>
    176a:	81 17       	cp	r24, r17
    176c:	21 f5       	brne	.+72     	; 0x17b6 <_Z18SoftPWMSetFadeTimeajj+0xb0>
    176e:	81 14       	cp	r8, r1
    1770:	91 04       	cpc	r9, r1
    1772:	51 f0       	breq	.+20     	; 0x1788 <_Z18SoftPWMSetFadeTimeajj+0x82>
    1774:	c7 01       	movw	r24, r14
    1776:	b6 01       	movw	r22, r12
    1778:	29 81       	ldd	r18, Y+1	; 0x01
    177a:	3a 81       	ldd	r19, Y+2	; 0x02
    177c:	4b 81       	ldd	r20, Y+3	; 0x03
    177e:	5c 81       	ldd	r21, Y+4	; 0x04
    1780:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    1784:	c9 01       	movw	r24, r18
    1786:	02 c0       	rjmp	.+4      	; 0x178c <_Z18SoftPWMSetFadeTimeajj+0x86>
    1788:	80 e0       	ldi	r24, 0x00	; 0
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	f1 01       	movw	r30, r2
    178e:	87 83       	std	Z+7, r24	; 0x07
    1790:	a1 14       	cp	r10, r1
    1792:	b1 04       	cpc	r11, r1
    1794:	41 f0       	breq	.+16     	; 0x17a6 <_Z18SoftPWMSetFadeTimeajj+0xa0>
    1796:	c7 01       	movw	r24, r14
    1798:	b6 01       	movw	r22, r12
    179a:	a3 01       	movw	r20, r6
    179c:	92 01       	movw	r18, r4
    179e:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    17a2:	c9 01       	movw	r24, r18
    17a4:	02 c0       	rjmp	.+4      	; 0x17aa <_Z18SoftPWMSetFadeTimeajj+0xa4>
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	d1 01       	movw	r26, r2
    17ac:	18 96       	adiw	r26, 0x08	; 8
    17ae:	8c 93       	st	X, r24
    17b0:	18 97       	sbiw	r26, 0x08	; 8
    17b2:	17 ff       	sbrs	r17, 7
    17b4:	09 c0       	rjmp	.+18     	; 0x17c8 <_Z18SoftPWMSetFadeTimeajj+0xc2>
    17b6:	e9 e0       	ldi	r30, 0x09	; 9
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	2e 0e       	add	r2, r30
    17bc:	3f 1e       	adc	r3, r31
    17be:	f5 e2       	ldi	r31, 0x25	; 37
    17c0:	2f 16       	cp	r2, r31
    17c2:	f3 e0       	ldi	r31, 0x03	; 3
    17c4:	3f 06       	cpc	r3, r31
    17c6:	51 f6       	brne	.-108    	; 0x175c <_Z18SoftPWMSetFadeTimeajj+0x56>
    17c8:	0f 90       	pop	r0
    17ca:	0f 90       	pop	r0
    17cc:	0f 90       	pop	r0
    17ce:	0f 90       	pop	r0
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	1f 91       	pop	r17
    17d6:	ff 90       	pop	r15
    17d8:	ef 90       	pop	r14
    17da:	df 90       	pop	r13
    17dc:	cf 90       	pop	r12
    17de:	bf 90       	pop	r11
    17e0:	af 90       	pop	r10
    17e2:	9f 90       	pop	r9
    17e4:	8f 90       	pop	r8
    17e6:	7f 90       	pop	r7
    17e8:	6f 90       	pop	r6
    17ea:	5f 90       	pop	r5
    17ec:	4f 90       	pop	r4
    17ee:	3f 90       	pop	r3
    17f0:	2f 90       	pop	r2
    17f2:	08 95       	ret

000017f4 <_ZN12StepperMotorC1Ehhhhh>:
    17f4:	ef 92       	push	r14
    17f6:	0f 93       	push	r16
    17f8:	cf 93       	push	r28
    17fa:	df 93       	push	r29
    17fc:	ec 01       	movw	r28, r24
    17fe:	0e 94 ef 03 	call	0x7de	; 0x7de <_ZN12AccelStepperC1Ehhhhh>
    1802:	83 e3       	ldi	r24, 0x33	; 51
    1804:	91 e0       	ldi	r25, 0x01	; 1
    1806:	99 83       	std	Y+1, r25	; 0x01
    1808:	88 83       	st	Y, r24
    180a:	df 91       	pop	r29
    180c:	cf 91       	pop	r28
    180e:	0f 91       	pop	r16
    1810:	ef 90       	pop	r14
    1812:	08 95       	ret

00001814 <_ZN12StepperMotor12advanceFrameEi>:
    1814:	ef 92       	push	r14
    1816:	ff 92       	push	r15
    1818:	0f 93       	push	r16
    181a:	1f 93       	push	r17
    181c:	cf 93       	push	r28
    181e:	df 93       	push	r29
    1820:	7c 01       	movw	r14, r24
    1822:	eb 01       	movw	r28, r22
    1824:	0e 94 da 02 	call	0x5b4	; 0x5b4 <_ZN12AccelStepper15currentPositionEv>
    1828:	ab 01       	movw	r20, r22
    182a:	bc 01       	movw	r22, r24
    182c:	8e 01       	movw	r16, r28
    182e:	22 27       	eor	r18, r18
    1830:	17 fd       	sbrc	r17, 7
    1832:	20 95       	com	r18
    1834:	32 2f       	mov	r19, r18
    1836:	40 0f       	add	r20, r16
    1838:	51 1f       	adc	r21, r17
    183a:	62 1f       	adc	r22, r18
    183c:	73 1f       	adc	r23, r19
    183e:	c7 01       	movw	r24, r14
    1840:	0e 94 91 03 	call	0x722	; 0x722 <_ZN12AccelStepper6moveToEl>
    1844:	df 91       	pop	r29
    1846:	cf 91       	pop	r28
    1848:	1f 91       	pop	r17
    184a:	0f 91       	pop	r16
    184c:	ff 90       	pop	r15
    184e:	ef 90       	pop	r14
    1850:	08 95       	ret

00001852 <_ZN12StepperMotor12reverseFrameEi>:
    1852:	cf 93       	push	r28
    1854:	df 93       	push	r29
    1856:	ec 01       	movw	r28, r24
    1858:	88 27       	eor	r24, r24
    185a:	77 fd       	sbrc	r23, 7
    185c:	80 95       	com	r24
    185e:	98 2f       	mov	r25, r24
    1860:	0e 94 c1 13 	call	0x2782	; 0x2782 <__floatsisf>
    1864:	ab 01       	movw	r20, r22
    1866:	bc 01       	movw	r22, r24
    1868:	ce 01       	movw	r24, r28
    186a:	0e 94 18 03 	call	0x630	; 0x630 <_ZN12AccelStepper8setSpeedEf>
    186e:	df 91       	pop	r29
    1870:	cf 91       	pop	r28
    1872:	08 95       	ret

00001874 <setup>:
    1874:	8f 92       	push	r8
    1876:	af 92       	push	r10
    1878:	cf 92       	push	r12
    187a:	df 92       	push	r13
    187c:	ef 92       	push	r14
    187e:	ff 92       	push	r15
    1880:	0f 93       	push	r16
    1882:	1f 93       	push	r17
    1884:	cf 93       	push	r28
    1886:	df 93       	push	r29
    1888:	cc ec       	ldi	r28, 0xCC	; 204
    188a:	d3 e0       	ldi	r29, 0x03	; 3
    188c:	ce 01       	movw	r24, r28
    188e:	40 e8       	ldi	r20, 0x80	; 128
    1890:	55 e2       	ldi	r21, 0x25	; 37
    1892:	60 e0       	ldi	r22, 0x00	; 0
    1894:	70 e0       	ldi	r23, 0x00	; 0
    1896:	0e 94 a0 25 	call	0x4b40	; 0x4b40 <_ZN14HardwareSerial5beginEm>
    189a:	64 e6       	ldi	r22, 0x64	; 100
    189c:	70 e0       	ldi	r23, 0x00	; 0
    189e:	80 e0       	ldi	r24, 0x00	; 0
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 d5 17 	call	0x2faa	; 0x2faa <delay>
    18a6:	ce 01       	movw	r24, r28
    18a8:	6f e3       	ldi	r22, 0x3F	; 63
    18aa:	71 e0       	ldi	r23, 0x01	; 1
    18ac:	0e 94 fe 21 	call	0x43fc	; 0x43fc <_ZN5Print7printlnEPKc>
    18b0:	82 e0       	ldi	r24, 0x02	; 2
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	0e 94 06 21 	call	0x420c	; 0x420c <_Znwj>
    18b8:	18 2f       	mov	r17, r24
    18ba:	f9 2e       	mov	r15, r25
    18bc:	6c e0       	ldi	r22, 0x0C	; 12
    18be:	4b e0       	ldi	r20, 0x0B	; 11
    18c0:	25 e0       	ldi	r18, 0x05	; 5
    18c2:	04 e0       	ldi	r16, 0x04	; 4
    18c4:	f3 e0       	ldi	r31, 0x03	; 3
    18c6:	ef 2e       	mov	r14, r31
    18c8:	e2 e0       	ldi	r30, 0x02	; 2
    18ca:	ce 2e       	mov	r12, r30
    18cc:	70 e1       	ldi	r23, 0x10	; 16
    18ce:	a7 2e       	mov	r10, r23
    18d0:	52 e0       	ldi	r21, 0x02	; 2
    18d2:	85 2e       	mov	r8, r21
    18d4:	0e 94 b8 04 	call	0x970	; 0x970 <_ZN3LCDC1Ehhhhhhhh>
    18d8:	10 93 29 03 	sts	0x0329, r17
    18dc:	f0 92 2a 03 	sts	0x032A, r15
    18e0:	64 e6       	ldi	r22, 0x64	; 100
    18e2:	70 e0       	ldi	r23, 0x00	; 0
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	0e 94 d5 17 	call	0x2faa	; 0x2faa <delay>
    18ec:	ce 01       	movw	r24, r28
    18ee:	6e e4       	ldi	r22, 0x4E	; 78
    18f0:	71 e0       	ldi	r23, 0x01	; 1
    18f2:	0e 94 fe 21 	call	0x43fc	; 0x43fc <_ZN5Print7printlnEPKc>
    18f6:	0e 94 b4 04 	call	0x968	; 0x968 <_Z12DCMotor_intiv>
    18fa:	64 e6       	ldi	r22, 0x64	; 100
    18fc:	70 e0       	ldi	r23, 0x00	; 0
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	0e 94 d5 17 	call	0x2faa	; 0x2faa <delay>
    1906:	ce 01       	movw	r24, r28
    1908:	6d e5       	ldi	r22, 0x5D	; 93
    190a:	71 e0       	ldi	r23, 0x01	; 1
    190c:	0e 94 fe 21 	call	0x43fc	; 0x43fc <_ZN5Print7printlnEPKc>
    1910:	85 e0       	ldi	r24, 0x05	; 5
    1912:	90 e0       	ldi	r25, 0x00	; 0
    1914:	0e 94 06 21 	call	0x420c	; 0x420c <_Znwj>
    1918:	8c 01       	movw	r16, r24
    191a:	61 e1       	ldi	r22, 0x11	; 17
    191c:	70 e0       	ldi	r23, 0x00	; 0
    191e:	4e e0       	ldi	r20, 0x0E	; 14
    1920:	50 e0       	ldi	r21, 0x00	; 0
    1922:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN7DCMotorC1Eii>
    1926:	00 93 2b 03 	sts	0x032B, r16
    192a:	10 93 2c 03 	sts	0x032C, r17
    192e:	85 e0       	ldi	r24, 0x05	; 5
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	0e 94 06 21 	call	0x420c	; 0x420c <_Znwj>
    1936:	8c 01       	movw	r16, r24
    1938:	62 e1       	ldi	r22, 0x12	; 18
    193a:	70 e0       	ldi	r23, 0x00	; 0
    193c:	43 e1       	ldi	r20, 0x13	; 19
    193e:	50 e0       	ldi	r21, 0x00	; 0
    1940:	0e 94 52 04 	call	0x8a4	; 0x8a4 <_ZN7DCMotorC1Eii>
    1944:	00 93 2d 03 	sts	0x032D, r16
    1948:	10 93 2e 03 	sts	0x032E, r17
    194c:	64 e6       	ldi	r22, 0x64	; 100
    194e:	70 e0       	ldi	r23, 0x00	; 0
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 d5 17 	call	0x2faa	; 0x2faa <delay>
    1958:	ce 01       	movw	r24, r28
    195a:	61 e7       	ldi	r22, 0x71	; 113
    195c:	71 e0       	ldi	r23, 0x01	; 1
    195e:	0e 94 fe 21 	call	0x43fc	; 0x43fc <_ZN5Print7printlnEPKc>
    1962:	87 e2       	ldi	r24, 0x27	; 39
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	0e 94 06 21 	call	0x420c	; 0x420c <_Znwj>
    196a:	f8 2e       	mov	r15, r24
    196c:	19 2f       	mov	r17, r25
    196e:	64 e0       	ldi	r22, 0x04	; 4
    1970:	48 e0       	ldi	r20, 0x08	; 8
    1972:	29 e0       	ldi	r18, 0x09	; 9
    1974:	06 e0       	ldi	r16, 0x06	; 6
    1976:	37 e0       	ldi	r19, 0x07	; 7
    1978:	e3 2e       	mov	r14, r19
    197a:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <_ZN12StepperMotorC1Ehhhhh>
    197e:	f0 92 2f 03 	sts	0x032F, r15
    1982:	10 93 30 03 	sts	0x0330, r17
    1986:	8f 2d       	mov	r24, r15
    1988:	91 2f       	mov	r25, r17
    198a:	40 e0       	ldi	r20, 0x00	; 0
    198c:	50 e8       	ldi	r21, 0x80	; 128
    198e:	6b e3       	ldi	r22, 0x3B	; 59
    1990:	75 e4       	ldi	r23, 0x45	; 69
    1992:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <_ZN12AccelStepper11setMaxSpeedEf>
    1996:	80 91 2f 03 	lds	r24, 0x032F
    199a:	90 91 30 03 	lds	r25, 0x0330
    199e:	40 e0       	ldi	r20, 0x00	; 0
    19a0:	50 e0       	ldi	r21, 0x00	; 0
    19a2:	6a ef       	ldi	r22, 0xFA	; 250
    19a4:	73 e4       	ldi	r23, 0x43	; 67
    19a6:	0e 94 62 03 	call	0x6c4	; 0x6c4 <_ZN12AccelStepper15setAccelerationEf>
    19aa:	64 e6       	ldi	r22, 0x64	; 100
    19ac:	70 e0       	ldi	r23, 0x00	; 0
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	90 e0       	ldi	r25, 0x00	; 0
    19b2:	0e 94 d5 17 	call	0x2faa	; 0x2faa <delay>
    19b6:	ce 01       	movw	r24, r28
    19b8:	6a e8       	ldi	r22, 0x8A	; 138
    19ba:	71 e0       	ldi	r23, 0x01	; 1
    19bc:	0e 94 fe 21 	call	0x43fc	; 0x43fc <_ZN5Print7printlnEPKc>
    19c0:	82 e2       	ldi	r24, 0x22	; 34
    19c2:	90 e0       	ldi	r25, 0x00	; 0
    19c4:	0e 94 06 21 	call	0x420c	; 0x420c <_Znwj>
    19c8:	8c 01       	movw	r16, r24
    19ca:	0e 94 84 08 	call	0x1108	; 0x1108 <_ZN12PDControllerC1Ev>
    19ce:	10 93 26 03 	sts	0x0326, r17
    19d2:	00 93 25 03 	sts	0x0325, r16
    19d6:	0f 2e       	mov	r0, r31
    19d8:	f0 e0       	ldi	r31, 0x00	; 0
    19da:	cf 2e       	mov	r12, r31
    19dc:	f0 e0       	ldi	r31, 0x00	; 0
    19de:	df 2e       	mov	r13, r31
    19e0:	f0 e7       	ldi	r31, 0x70	; 112
    19e2:	ef 2e       	mov	r14, r31
    19e4:	f2 e4       	ldi	r31, 0x42	; 66
    19e6:	ff 2e       	mov	r15, r31
    19e8:	f0 2d       	mov	r31, r0
    19ea:	f8 01       	movw	r30, r16
    19ec:	c0 86       	std	Z+8, r12	; 0x08
    19ee:	d1 86       	std	Z+9, r13	; 0x09
    19f0:	e2 86       	std	Z+10, r14	; 0x0a
    19f2:	f3 86       	std	Z+11, r15	; 0x0b
    19f4:	c8 01       	movw	r24, r16
    19f6:	46 e6       	ldi	r20, 0x66	; 102
    19f8:	56 e6       	ldi	r21, 0x66	; 102
    19fa:	66 e9       	ldi	r22, 0x96	; 150
    19fc:	70 e4       	ldi	r23, 0x40	; 64
    19fe:	0a e0       	ldi	r16, 0x0A	; 10
    1a00:	17 ed       	ldi	r17, 0xD7	; 215
    1a02:	23 ea       	ldi	r18, 0xA3	; 163
    1a04:	3b e3       	ldi	r19, 0x3B	; 59
    1a06:	0e 94 71 09 	call	0x12e2	; 0x12e2 <_ZN12PDController10setTuningsEdd>
    1a0a:	80 91 25 03 	lds	r24, 0x0325
    1a0e:	90 91 26 03 	lds	r25, 0x0326
    1a12:	40 e0       	ldi	r20, 0x00	; 0
    1a14:	50 e0       	ldi	r21, 0x00	; 0
    1a16:	6f e7       	ldi	r22, 0x7F	; 127
    1a18:	73 ec       	ldi	r23, 0xC3	; 195
    1a1a:	00 e0       	ldi	r16, 0x00	; 0
    1a1c:	10 e0       	ldi	r17, 0x00	; 0
    1a1e:	2f e7       	ldi	r18, 0x7F	; 127
    1a20:	33 e4       	ldi	r19, 0x43	; 67
    1a22:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN12PDController15setOutputLimitsEdd>
    1a26:	64 e6       	ldi	r22, 0x64	; 100
    1a28:	70 e0       	ldi	r23, 0x00	; 0
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	90 e0       	ldi	r25, 0x00	; 0
    1a2e:	0e 94 d5 17 	call	0x2faa	; 0x2faa <delay>
    1a32:	ce 01       	movw	r24, r28
    1a34:	6e e9       	ldi	r22, 0x9E	; 158
    1a36:	71 e0       	ldi	r23, 0x01	; 1
    1a38:	0e 94 fe 21 	call	0x43fc	; 0x43fc <_ZN5Print7printlnEPKc>
    1a3c:	82 e2       	ldi	r24, 0x22	; 34
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	0e 94 06 21 	call	0x420c	; 0x420c <_Znwj>
    1a44:	8c 01       	movw	r16, r24
    1a46:	0e 94 84 08 	call	0x1108	; 0x1108 <_ZN12PDControllerC1Ev>
    1a4a:	10 93 28 03 	sts	0x0328, r17
    1a4e:	00 93 27 03 	sts	0x0327, r16
    1a52:	f8 01       	movw	r30, r16
    1a54:	c0 86       	std	Z+8, r12	; 0x08
    1a56:	d1 86       	std	Z+9, r13	; 0x09
    1a58:	e2 86       	std	Z+10, r14	; 0x0a
    1a5a:	f3 86       	std	Z+11, r15	; 0x0b
    1a5c:	c8 01       	movw	r24, r16
    1a5e:	40 e0       	ldi	r20, 0x00	; 0
    1a60:	50 e0       	ldi	r21, 0x00	; 0
    1a62:	60 e4       	ldi	r22, 0x40	; 64
    1a64:	70 e4       	ldi	r23, 0x40	; 64
    1a66:	0a e0       	ldi	r16, 0x0A	; 10
    1a68:	17 ed       	ldi	r17, 0xD7	; 215
    1a6a:	23 ea       	ldi	r18, 0xA3	; 163
    1a6c:	3b e3       	ldi	r19, 0x3B	; 59
    1a6e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <_ZN12PDController10setTuningsEdd>
    1a72:	80 91 27 03 	lds	r24, 0x0327
    1a76:	90 91 28 03 	lds	r25, 0x0328
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	6f e7       	ldi	r22, 0x7F	; 127
    1a80:	73 ec       	ldi	r23, 0xC3	; 195
    1a82:	00 e0       	ldi	r16, 0x00	; 0
    1a84:	10 e0       	ldi	r17, 0x00	; 0
    1a86:	2f e7       	ldi	r18, 0x7F	; 127
    1a88:	33 e4       	ldi	r19, 0x43	; 67
    1a8a:	0e 94 af 09 	call	0x135e	; 0x135e <_ZN12PDController15setOutputLimitsEdd>
    1a8e:	64 e6       	ldi	r22, 0x64	; 100
    1a90:	70 e0       	ldi	r23, 0x00	; 0
    1a92:	80 e0       	ldi	r24, 0x00	; 0
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	0e 94 d5 17 	call	0x2faa	; 0x2faa <delay>
    1a9a:	ce 01       	movw	r24, r28
    1a9c:	63 eb       	ldi	r22, 0xB3	; 179
    1a9e:	71 e0       	ldi	r23, 0x01	; 1
    1aa0:	0e 94 fe 21 	call	0x43fc	; 0x43fc <_ZN5Print7printlnEPKc>
    1aa4:	0e 94 fe 09 	call	0x13fc	; 0x13fc <_Z17PDController_initv>
    1aa8:	64 e6       	ldi	r22, 0x64	; 100
    1aaa:	70 e0       	ldi	r23, 0x00	; 0
    1aac:	80 e0       	ldi	r24, 0x00	; 0
    1aae:	90 e0       	ldi	r25, 0x00	; 0
    1ab0:	0e 94 d5 17 	call	0x2faa	; 0x2faa <delay>
    1ab4:	8a e0       	ldi	r24, 0x0A	; 10
    1ab6:	61 e0       	ldi	r22, 0x01	; 1
    1ab8:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
    1abc:	8a e0       	ldi	r24, 0x0A	; 10
    1abe:	60 e0       	ldi	r22, 0x00	; 0
    1ac0:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
    1ac4:	8d e0       	ldi	r24, 0x0D	; 13
    1ac6:	60 e0       	ldi	r22, 0x00	; 0
    1ac8:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	1f 91       	pop	r17
    1ad2:	0f 91       	pop	r16
    1ad4:	ff 90       	pop	r15
    1ad6:	ef 90       	pop	r14
    1ad8:	df 90       	pop	r13
    1ada:	cf 90       	pop	r12
    1adc:	af 90       	pop	r10
    1ade:	8f 90       	pop	r8
    1ae0:	08 95       	ret

00001ae2 <_Z14checkMotorStopv>:
    1ae2:	e0 91 27 03 	lds	r30, 0x0327
    1ae6:	f0 91 28 03 	lds	r31, 0x0328
    1aea:	60 81       	ld	r22, Z
    1aec:	71 81       	ldd	r23, Z+1	; 0x01
    1aee:	82 81       	ldd	r24, Z+2	; 0x02
    1af0:	93 81       	ldd	r25, Z+3	; 0x03
    1af2:	20 e0       	ldi	r18, 0x00	; 0
    1af4:	30 e0       	ldi	r19, 0x00	; 0
    1af6:	40 e2       	ldi	r20, 0x20	; 32
    1af8:	51 e4       	ldi	r21, 0x41	; 65
    1afa:	0e 94 91 13 	call	0x2722	; 0x2722 <__ltsf2>
    1afe:	87 ff       	sbrs	r24, 7
    1b00:	1f c0       	rjmp	.+62     	; 0x1b40 <_Z14checkMotorStopv+0x5e>
    1b02:	80 91 33 03 	lds	r24, 0x0333
    1b06:	90 91 34 03 	lds	r25, 0x0334
    1b0a:	27 e0       	ldi	r18, 0x07	; 7
    1b0c:	81 3d       	cpi	r24, 0xD1	; 209
    1b0e:	92 07       	cpc	r25, r18
    1b10:	30 f0       	brcs	.+12     	; 0x1b1e <_Z14checkMotorStopv+0x3c>
    1b12:	80 91 2d 03 	lds	r24, 0x032D
    1b16:	90 91 2e 03 	lds	r25, 0x032E
    1b1a:	0e 94 81 04 	call	0x902	; 0x902 <_ZN7DCMotor4stopEv>
    1b1e:	e0 91 27 03 	lds	r30, 0x0327
    1b22:	f0 91 28 03 	lds	r31, 0x0328
    1b26:	80 91 33 03 	lds	r24, 0x0333
    1b2a:	90 91 34 03 	lds	r25, 0x0334
    1b2e:	20 8d       	ldd	r18, Z+24	; 0x18
    1b30:	31 8d       	ldd	r19, Z+25	; 0x19
    1b32:	82 0f       	add	r24, r18
    1b34:	93 1f       	adc	r25, r19
    1b36:	90 93 34 03 	sts	0x0334, r25
    1b3a:	80 93 33 03 	sts	0x0333, r24
    1b3e:	08 95       	ret
    1b40:	10 92 34 03 	sts	0x0334, r1
    1b44:	10 92 33 03 	sts	0x0333, r1
    1b48:	08 95       	ret

00001b4a <_Z8shutdownv>:
    1b4a:	80 91 2b 03 	lds	r24, 0x032B
    1b4e:	90 91 2c 03 	lds	r25, 0x032C
    1b52:	0e 94 81 04 	call	0x902	; 0x902 <_ZN7DCMotor4stopEv>
    1b56:	80 91 2d 03 	lds	r24, 0x032D
    1b5a:	90 91 2e 03 	lds	r25, 0x032E
    1b5e:	0e 94 81 04 	call	0x902	; 0x902 <_ZN7DCMotor4stopEv>
    1b62:	8a e0       	ldi	r24, 0x0A	; 10
    1b64:	60 e0       	ldi	r22, 0x00	; 0
    1b66:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
    1b6a:	83 b7       	in	r24, 0x33	; 51
    1b6c:	81 60       	ori	r24, 0x01	; 1
    1b6e:	83 bf       	out	0x33, r24	; 51
    1b70:	83 b7       	in	r24, 0x33	; 51
    1b72:	81 60       	ori	r24, 0x01	; 1
    1b74:	83 bf       	out	0x33, r24	; 51
    1b76:	88 95       	sleep
    1b78:	83 b7       	in	r24, 0x33	; 51
    1b7a:	8e 7f       	andi	r24, 0xFE	; 254
    1b7c:	83 bf       	out	0x33, r24	; 51
    1b7e:	08 95       	ret

00001b80 <_Z13checkStopFilmv>:
    1b80:	e0 91 27 03 	lds	r30, 0x0327
    1b84:	f0 91 28 03 	lds	r31, 0x0328
    1b88:	60 81       	ld	r22, Z
    1b8a:	71 81       	ldd	r23, Z+1	; 0x01
    1b8c:	82 81       	ldd	r24, Z+2	; 0x02
    1b8e:	93 81       	ldd	r25, Z+3	; 0x03
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	40 e2       	ldi	r20, 0x20	; 32
    1b96:	51 e4       	ldi	r21, 0x41	; 65
    1b98:	0e 94 91 13 	call	0x2722	; 0x2722 <__ltsf2>
    1b9c:	87 ff       	sbrs	r24, 7
    1b9e:	1b c0       	rjmp	.+54     	; 0x1bd6 <_Z13checkStopFilmv+0x56>
    1ba0:	80 91 33 03 	lds	r24, 0x0333
    1ba4:	90 91 34 03 	lds	r25, 0x0334
    1ba8:	27 e0       	ldi	r18, 0x07	; 7
    1baa:	81 3d       	cpi	r24, 0xD1	; 209
    1bac:	92 07       	cpc	r25, r18
    1bae:	10 f0       	brcs	.+4      	; 0x1bb4 <_Z13checkStopFilmv+0x34>
    1bb0:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <_Z8shutdownv>
    1bb4:	e0 91 25 03 	lds	r30, 0x0325
    1bb8:	f0 91 26 03 	lds	r31, 0x0326
    1bbc:	80 91 33 03 	lds	r24, 0x0333
    1bc0:	90 91 34 03 	lds	r25, 0x0334
    1bc4:	20 8d       	ldd	r18, Z+24	; 0x18
    1bc6:	31 8d       	ldd	r19, Z+25	; 0x19
    1bc8:	82 0f       	add	r24, r18
    1bca:	93 1f       	adc	r25, r19
    1bcc:	90 93 34 03 	sts	0x0334, r25
    1bd0:	80 93 33 03 	sts	0x0333, r24
    1bd4:	04 c0       	rjmp	.+8      	; 0x1bde <_Z13checkStopFilmv+0x5e>
    1bd6:	10 92 34 03 	sts	0x0334, r1
    1bda:	10 92 33 03 	sts	0x0333, r1
    1bde:	e0 91 27 03 	lds	r30, 0x0327
    1be2:	f0 91 28 03 	lds	r31, 0x0328
    1be6:	60 81       	ld	r22, Z
    1be8:	71 81       	ldd	r23, Z+1	; 0x01
    1bea:	82 81       	ldd	r24, Z+2	; 0x02
    1bec:	93 81       	ldd	r25, Z+3	; 0x03
    1bee:	20 e0       	ldi	r18, 0x00	; 0
    1bf0:	30 e0       	ldi	r19, 0x00	; 0
    1bf2:	40 ef       	ldi	r20, 0xF0	; 240
    1bf4:	52 e4       	ldi	r21, 0x42	; 66
    1bf6:	0e 94 31 13 	call	0x2662	; 0x2662 <__gtsf2>
    1bfa:	18 16       	cp	r1, r24
    1bfc:	dc f4       	brge	.+54     	; 0x1c34 <_Z13checkStopFilmv+0xb4>
    1bfe:	80 91 35 03 	lds	r24, 0x0335
    1c02:	90 91 36 03 	lds	r25, 0x0336
    1c06:	27 e0       	ldi	r18, 0x07	; 7
    1c08:	81 3d       	cpi	r24, 0xD1	; 209
    1c0a:	92 07       	cpc	r25, r18
    1c0c:	10 f0       	brcs	.+4      	; 0x1c12 <_Z13checkStopFilmv+0x92>
    1c0e:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <_Z8shutdownv>
    1c12:	e0 91 27 03 	lds	r30, 0x0327
    1c16:	f0 91 28 03 	lds	r31, 0x0328
    1c1a:	80 91 35 03 	lds	r24, 0x0335
    1c1e:	90 91 36 03 	lds	r25, 0x0336
    1c22:	20 8d       	ldd	r18, Z+24	; 0x18
    1c24:	31 8d       	ldd	r19, Z+25	; 0x19
    1c26:	82 0f       	add	r24, r18
    1c28:	93 1f       	adc	r25, r19
    1c2a:	90 93 36 03 	sts	0x0336, r25
    1c2e:	80 93 35 03 	sts	0x0335, r24
    1c32:	08 95       	ret
    1c34:	10 92 36 03 	sts	0x0336, r1
    1c38:	10 92 35 03 	sts	0x0335, r1
    1c3c:	08 95       	ret

00001c3e <__vector_11>:
    1c3e:	1f 92       	push	r1
    1c40:	0f 92       	push	r0
    1c42:	0f b6       	in	r0, 0x3f	; 63
    1c44:	0f 92       	push	r0
    1c46:	11 24       	eor	r1, r1
    1c48:	2f 93       	push	r18
    1c4a:	3f 93       	push	r19
    1c4c:	4f 93       	push	r20
    1c4e:	5f 93       	push	r21
    1c50:	6f 93       	push	r22
    1c52:	7f 93       	push	r23
    1c54:	8f 93       	push	r24
    1c56:	9f 93       	push	r25
    1c58:	af 93       	push	r26
    1c5a:	bf 93       	push	r27
    1c5c:	cf 93       	push	r28
    1c5e:	df 93       	push	r29
    1c60:	ef 93       	push	r30
    1c62:	ff 93       	push	r31
    1c64:	c0 91 25 03 	lds	r28, 0x0325
    1c68:	d0 91 26 03 	lds	r29, 0x0326
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <analogRead>
    1c72:	9c 01       	movw	r18, r24
    1c74:	b9 01       	movw	r22, r18
    1c76:	88 27       	eor	r24, r24
    1c78:	77 fd       	sbrc	r23, 7
    1c7a:	80 95       	com	r24
    1c7c:	98 2f       	mov	r25, r24
    1c7e:	0e 94 c1 13 	call	0x2782	; 0x2782 <__floatsisf>
    1c82:	ab 01       	movw	r20, r22
    1c84:	bc 01       	movw	r22, r24
    1c86:	ce 01       	movw	r24, r28
    1c88:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZN12PDController7computeEd>
    1c8c:	c0 91 27 03 	lds	r28, 0x0327
    1c90:	d0 91 28 03 	lds	r29, 0x0328
    1c94:	82 e0       	ldi	r24, 0x02	; 2
    1c96:	0e 94 d8 16 	call	0x2db0	; 0x2db0 <analogRead>
    1c9a:	9c 01       	movw	r18, r24
    1c9c:	b9 01       	movw	r22, r18
    1c9e:	88 27       	eor	r24, r24
    1ca0:	77 fd       	sbrc	r23, 7
    1ca2:	80 95       	com	r24
    1ca4:	98 2f       	mov	r25, r24
    1ca6:	0e 94 c1 13 	call	0x2782	; 0x2782 <__floatsisf>
    1caa:	ab 01       	movw	r20, r22
    1cac:	bc 01       	movw	r22, r24
    1cae:	ce 01       	movw	r24, r28
    1cb0:	0e 94 8a 08 	call	0x1114	; 0x1114 <_ZN12PDController7computeEd>
    1cb4:	c0 91 2b 03 	lds	r28, 0x032B
    1cb8:	d0 91 2c 03 	lds	r29, 0x032C
    1cbc:	e0 91 25 03 	lds	r30, 0x0325
    1cc0:	f0 91 26 03 	lds	r31, 0x0326
    1cc4:	64 81       	ldd	r22, Z+4	; 0x04
    1cc6:	75 81       	ldd	r23, Z+5	; 0x05
    1cc8:	86 81       	ldd	r24, Z+6	; 0x06
    1cca:	97 81       	ldd	r25, Z+7	; 0x07
    1ccc:	90 58       	subi	r25, 0x80	; 128
    1cce:	0e 94 21 14 	call	0x2842	; 0x2842 <__fixsfsi>
    1cd2:	9b 01       	movw	r18, r22
    1cd4:	ac 01       	movw	r20, r24
    1cd6:	ce 01       	movw	r24, r28
    1cd8:	b9 01       	movw	r22, r18
    1cda:	0e 94 93 04 	call	0x926	; 0x926 <_ZN7DCMotor13setMotorspeedEi>
    1cde:	c0 91 2d 03 	lds	r28, 0x032D
    1ce2:	d0 91 2e 03 	lds	r29, 0x032E
    1ce6:	e0 91 27 03 	lds	r30, 0x0327
    1cea:	f0 91 28 03 	lds	r31, 0x0328
    1cee:	64 81       	ldd	r22, Z+4	; 0x04
    1cf0:	75 81       	ldd	r23, Z+5	; 0x05
    1cf2:	86 81       	ldd	r24, Z+6	; 0x06
    1cf4:	97 81       	ldd	r25, Z+7	; 0x07
    1cf6:	0e 94 21 14 	call	0x2842	; 0x2842 <__fixsfsi>
    1cfa:	9b 01       	movw	r18, r22
    1cfc:	ac 01       	movw	r20, r24
    1cfe:	ce 01       	movw	r24, r28
    1d00:	b9 01       	movw	r22, r18
    1d02:	0e 94 93 04 	call	0x926	; 0x926 <_ZN7DCMotor13setMotorspeedEi>
    1d06:	e0 91 25 03 	lds	r30, 0x0325
    1d0a:	f0 91 26 03 	lds	r31, 0x0326
    1d0e:	40 81       	ld	r20, Z
    1d10:	51 81       	ldd	r21, Z+1	; 0x01
    1d12:	62 81       	ldd	r22, Z+2	; 0x02
    1d14:	73 81       	ldd	r23, Z+3	; 0x03
    1d16:	8c ec       	ldi	r24, 0xCC	; 204
    1d18:	93 e0       	ldi	r25, 0x03	; 3
    1d1a:	22 e0       	ldi	r18, 0x02	; 2
    1d1c:	30 e0       	ldi	r19, 0x00	; 0
    1d1e:	0e 94 1d 24 	call	0x483a	; 0x483a <_ZN5Print7printlnEdi>
    1d22:	80 91 39 03 	lds	r24, 0x0339
    1d26:	88 23       	and	r24, r24
    1d28:	11 f0       	breq	.+4      	; 0x1d2e <__vector_11+0xf0>
    1d2a:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <_Z13checkStopFilmv>
    1d2e:	ff 91       	pop	r31
    1d30:	ef 91       	pop	r30
    1d32:	df 91       	pop	r29
    1d34:	cf 91       	pop	r28
    1d36:	bf 91       	pop	r27
    1d38:	af 91       	pop	r26
    1d3a:	9f 91       	pop	r25
    1d3c:	8f 91       	pop	r24
    1d3e:	7f 91       	pop	r23
    1d40:	6f 91       	pop	r22
    1d42:	5f 91       	pop	r21
    1d44:	4f 91       	pop	r20
    1d46:	3f 91       	pop	r19
    1d48:	2f 91       	pop	r18
    1d4a:	0f 90       	pop	r0
    1d4c:	0f be       	out	0x3f, r0	; 63
    1d4e:	0f 90       	pop	r0
    1d50:	1f 90       	pop	r1
    1d52:	18 95       	reti

00001d54 <_Z15checkManualModev>:
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	2e 97       	sbiw	r28, 0x0e	; 14
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
    1d70:	8d e0       	ldi	r24, 0x0D	; 13
    1d72:	0e 94 ca 18 	call	0x3194	; 0x3194 <digitalRead>
    1d76:	00 97       	sbiw	r24, 0x00	; 0
    1d78:	09 f0       	breq	.+2      	; 0x1d7c <_Z15checkManualModev+0x28>
    1d7a:	4c c0       	rjmp	.+152    	; 0x1e14 <_Z15checkManualModev+0xc0>
    1d7c:	e0 90 29 03 	lds	r14, 0x0329
    1d80:	f0 90 2a 03 	lds	r15, 0x032A
    1d84:	8e 01       	movw	r16, r28
    1d86:	0f 5f       	subi	r16, 0xFF	; 255
    1d88:	1f 4f       	sbci	r17, 0xFF	; 255
    1d8a:	c8 01       	movw	r24, r16
    1d8c:	67 ec       	ldi	r22, 0xC7	; 199
    1d8e:	71 e0       	ldi	r23, 0x01	; 1
    1d90:	0e 94 66 19 	call	0x32cc	; 0x32cc <_ZN6StringC1EPKc>
    1d94:	c7 01       	movw	r24, r14
    1d96:	b8 01       	movw	r22, r16
    1d98:	40 e0       	ldi	r20, 0x00	; 0
    1d9a:	50 e0       	ldi	r21, 0x00	; 0
    1d9c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_ZN3LCD9updateLCDE6Stringi>
    1da0:	c8 01       	movw	r24, r16
    1da2:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <_ZN6StringD1Ev>
    1da6:	10 92 39 03 	sts	0x0339, r1
    1daa:	0d c0       	rjmp	.+26     	; 0x1dc6 <_Z15checkManualModev+0x72>
    1dac:	c9 01       	movw	r24, r18
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	50 e0       	ldi	r21, 0x00	; 0
    1db2:	60 ea       	ldi	r22, 0xA0	; 160
    1db4:	70 e4       	ldi	r23, 0x40	; 64
    1db6:	0e 94 18 03 	call	0x630	; 0x630 <_ZN12AccelStepper8setSpeedEf>
    1dba:	80 91 2f 03 	lds	r24, 0x032F
    1dbe:	90 91 30 03 	lds	r25, 0x0330
    1dc2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <_ZN12AccelStepper8runSpeedEv>
    1dc6:	8d e0       	ldi	r24, 0x0D	; 13
    1dc8:	0e 94 ca 18 	call	0x3194	; 0x3194 <digitalRead>
    1dcc:	20 91 2f 03 	lds	r18, 0x032F
    1dd0:	30 91 30 03 	lds	r19, 0x0330
    1dd4:	00 97       	sbiw	r24, 0x00	; 0
    1dd6:	51 f3       	breq	.-44     	; 0x1dac <_Z15checkManualModev+0x58>
    1dd8:	c9 01       	movw	r24, r18
    1dda:	60 e9       	ldi	r22, 0x90	; 144
    1ddc:	71 e0       	ldi	r23, 0x01	; 1
    1dde:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN12StepperMotor12advanceFrameEi>
    1de2:	10 92 32 03 	sts	0x0332, r1
    1de6:	10 92 31 03 	sts	0x0331, r1
    1dea:	e0 90 29 03 	lds	r14, 0x0329
    1dee:	f0 90 2a 03 	lds	r15, 0x032A
    1df2:	8e 01       	movw	r16, r28
    1df4:	08 5f       	subi	r16, 0xF8	; 248
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	c8 01       	movw	r24, r16
    1dfa:	6e ec       	ldi	r22, 0xCE	; 206
    1dfc:	71 e0       	ldi	r23, 0x01	; 1
    1dfe:	0e 94 66 19 	call	0x32cc	; 0x32cc <_ZN6StringC1EPKc>
    1e02:	c7 01       	movw	r24, r14
    1e04:	b8 01       	movw	r22, r16
    1e06:	40 e0       	ldi	r20, 0x00	; 0
    1e08:	50 e0       	ldi	r21, 0x00	; 0
    1e0a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_ZN3LCD9updateLCDE6Stringi>
    1e0e:	c8 01       	movw	r24, r16
    1e10:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <_ZN6StringD1Ev>
    1e14:	81 e0       	ldi	r24, 0x01	; 1
    1e16:	80 93 39 03 	sts	0x0339, r24
    1e1a:	2e 96       	adiw	r28, 0x0e	; 14
    1e1c:	0f b6       	in	r0, 0x3f	; 63
    1e1e:	f8 94       	cli
    1e20:	de bf       	out	0x3e, r29	; 62
    1e22:	0f be       	out	0x3f, r0	; 63
    1e24:	cd bf       	out	0x3d, r28	; 61
    1e26:	cf 91       	pop	r28
    1e28:	df 91       	pop	r29
    1e2a:	1f 91       	pop	r17
    1e2c:	0f 91       	pop	r16
    1e2e:	ff 90       	pop	r15
    1e30:	ef 90       	pop	r14
    1e32:	08 95       	ret

00001e34 <main>:
    1e34:	ef 92       	push	r14
    1e36:	ff 92       	push	r15
    1e38:	0f 93       	push	r16
    1e3a:	1f 93       	push	r17
    1e3c:	df 93       	push	r29
    1e3e:	cf 93       	push	r28
    1e40:	cd b7       	in	r28, 0x3d	; 61
    1e42:	de b7       	in	r29, 0x3e	; 62
    1e44:	2e 97       	sbiw	r28, 0x0e	; 14
    1e46:	0f b6       	in	r0, 0x3f	; 63
    1e48:	f8 94       	cli
    1e4a:	de bf       	out	0x3e, r29	; 62
    1e4c:	0f be       	out	0x3f, r0	; 63
    1e4e:	cd bf       	out	0x3d, r28	; 61
    1e50:	0e 94 06 18 	call	0x300c	; 0x300c <init>
    1e54:	0e 94 3a 0c 	call	0x1874	; 0x1874 <setup>
    1e58:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_Z15checkManualModev>
    1e5c:	e0 90 29 03 	lds	r14, 0x0329
    1e60:	f0 90 2a 03 	lds	r15, 0x032A
    1e64:	8e 01       	movw	r16, r28
    1e66:	0f 5f       	subi	r16, 0xFF	; 255
    1e68:	1f 4f       	sbci	r17, 0xFF	; 255
    1e6a:	c8 01       	movw	r24, r16
    1e6c:	6e ec       	ldi	r22, 0xCE	; 206
    1e6e:	71 e0       	ldi	r23, 0x01	; 1
    1e70:	0e 94 66 19 	call	0x32cc	; 0x32cc <_ZN6StringC1EPKc>
    1e74:	c7 01       	movw	r24, r14
    1e76:	b8 01       	movw	r22, r16
    1e78:	40 e0       	ldi	r20, 0x00	; 0
    1e7a:	50 e0       	ldi	r21, 0x00	; 0
    1e7c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_ZN3LCD9updateLCDE6Stringi>
    1e80:	c8 01       	movw	r24, r16
    1e82:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <_ZN6StringD1Ev>
    1e86:	8e 01       	movw	r16, r28
    1e88:	08 5f       	subi	r16, 0xF8	; 248
    1e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e8c:	8a e0       	ldi	r24, 0x0A	; 10
    1e8e:	61 e0       	ldi	r22, 0x01	; 1
    1e90:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
    1e94:	80 91 2f 03 	lds	r24, 0x032F
    1e98:	90 91 30 03 	lds	r25, 0x0330
    1e9c:	60 e9       	ldi	r22, 0x90	; 144
    1e9e:	71 e0       	ldi	r23, 0x01	; 1
    1ea0:	0e 94 0a 0c 	call	0x1814	; 0x1814 <_ZN12StepperMotor12advanceFrameEi>
    1ea4:	02 c0       	rjmp	.+4      	; 0x1eaa <main+0x76>
    1ea6:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <_Z15checkManualModev>
    1eaa:	80 91 2f 03 	lds	r24, 0x032F
    1eae:	90 91 30 03 	lds	r25, 0x0330
    1eb2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <_ZN12AccelStepper3runEv>
    1eb6:	88 23       	and	r24, r24
    1eb8:	b1 f7       	brne	.-20     	; 0x1ea6 <main+0x72>
    1eba:	8a e0       	ldi	r24, 0x0A	; 10
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
    1ec2:	60 ed       	ldi	r22, 0xD0	; 208
    1ec4:	77 e0       	ldi	r23, 0x07	; 7
    1ec6:	80 e0       	ldi	r24, 0x00	; 0
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	0e 94 d5 17 	call	0x2faa	; 0x2faa <delay>
    1ece:	80 91 31 03 	lds	r24, 0x0331
    1ed2:	90 91 32 03 	lds	r25, 0x0332
    1ed6:	01 96       	adiw	r24, 0x01	; 1
    1ed8:	90 93 32 03 	sts	0x0332, r25
    1edc:	80 93 31 03 	sts	0x0331, r24
    1ee0:	e0 90 29 03 	lds	r14, 0x0329
    1ee4:	f0 90 2a 03 	lds	r15, 0x032A
    1ee8:	c8 01       	movw	r24, r16
    1eea:	6e ec       	ldi	r22, 0xCE	; 206
    1eec:	71 e0       	ldi	r23, 0x01	; 1
    1eee:	0e 94 66 19 	call	0x32cc	; 0x32cc <_ZN6StringC1EPKc>
    1ef2:	40 91 31 03 	lds	r20, 0x0331
    1ef6:	50 91 32 03 	lds	r21, 0x0332
    1efa:	c7 01       	movw	r24, r14
    1efc:	b8 01       	movw	r22, r16
    1efe:	0e 94 0e 05 	call	0xa1c	; 0xa1c <_ZN3LCD9updateLCDE6Stringi>
    1f02:	c8 01       	movw	r24, r16
    1f04:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <_ZN6StringD1Ev>
    1f08:	c1 cf       	rjmp	.-126    	; 0x1e8c <main+0x58>

00001f0a <__fixunssfsi>:
    1f0a:	ef 92       	push	r14
    1f0c:	ff 92       	push	r15
    1f0e:	0f 93       	push	r16
    1f10:	1f 93       	push	r17
    1f12:	7b 01       	movw	r14, r22
    1f14:	8c 01       	movw	r16, r24
    1f16:	20 e0       	ldi	r18, 0x00	; 0
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	5f e4       	ldi	r21, 0x4F	; 79
    1f1e:	0e 94 61 13 	call	0x26c2	; 0x26c2 <__gesf2>
    1f22:	87 fd       	sbrc	r24, 7
    1f24:	11 c0       	rjmp	.+34     	; 0x1f48 <__fixunssfsi+0x3e>
    1f26:	c8 01       	movw	r24, r16
    1f28:	b7 01       	movw	r22, r14
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	5f e4       	ldi	r21, 0x4F	; 79
    1f32:	0e 94 28 11 	call	0x2250	; 0x2250 <__subsf3>
    1f36:	0e 94 21 14 	call	0x2842	; 0x2842 <__fixsfsi>
    1f3a:	9b 01       	movw	r18, r22
    1f3c:	ac 01       	movw	r20, r24
    1f3e:	20 50       	subi	r18, 0x00	; 0
    1f40:	30 40       	sbci	r19, 0x00	; 0
    1f42:	40 40       	sbci	r20, 0x00	; 0
    1f44:	50 48       	sbci	r21, 0x80	; 128
    1f46:	06 c0       	rjmp	.+12     	; 0x1f54 <__fixunssfsi+0x4a>
    1f48:	c8 01       	movw	r24, r16
    1f4a:	b7 01       	movw	r22, r14
    1f4c:	0e 94 21 14 	call	0x2842	; 0x2842 <__fixsfsi>
    1f50:	9b 01       	movw	r18, r22
    1f52:	ac 01       	movw	r20, r24
    1f54:	b9 01       	movw	r22, r18
    1f56:	ca 01       	movw	r24, r20
    1f58:	1f 91       	pop	r17
    1f5a:	0f 91       	pop	r16
    1f5c:	ff 90       	pop	r15
    1f5e:	ef 90       	pop	r14
    1f60:	08 95       	ret

00001f62 <_fpadd_parts>:
    1f62:	a0 e0       	ldi	r26, 0x00	; 0
    1f64:	b0 e0       	ldi	r27, 0x00	; 0
    1f66:	e7 eb       	ldi	r30, 0xB7	; 183
    1f68:	ff e0       	ldi	r31, 0x0F	; 15
    1f6a:	0c 94 ff 26 	jmp	0x4dfe	; 0x4dfe <__prologue_saves__+0x8>
    1f6e:	fc 01       	movw	r30, r24
    1f70:	ea 01       	movw	r28, r20
    1f72:	80 81       	ld	r24, Z
    1f74:	82 30       	cpi	r24, 0x02	; 2
    1f76:	08 f4       	brcc	.+2      	; 0x1f7a <_fpadd_parts+0x18>
    1f78:	38 c1       	rjmp	.+624    	; 0x21ea <_fpadd_parts+0x288>
    1f7a:	db 01       	movw	r26, r22
    1f7c:	9c 91       	ld	r25, X
    1f7e:	92 30       	cpi	r25, 0x02	; 2
    1f80:	08 f4       	brcc	.+2      	; 0x1f84 <_fpadd_parts+0x22>
    1f82:	30 c1       	rjmp	.+608    	; 0x21e4 <_fpadd_parts+0x282>
    1f84:	84 30       	cpi	r24, 0x04	; 4
    1f86:	59 f4       	brne	.+22     	; 0x1f9e <_fpadd_parts+0x3c>
    1f88:	94 30       	cpi	r25, 0x04	; 4
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <_fpadd_parts+0x2c>
    1f8c:	2e c1       	rjmp	.+604    	; 0x21ea <_fpadd_parts+0x288>
    1f8e:	91 81       	ldd	r25, Z+1	; 0x01
    1f90:	11 96       	adiw	r26, 0x01	; 1
    1f92:	8c 91       	ld	r24, X
    1f94:	11 97       	sbiw	r26, 0x01	; 1
    1f96:	98 17       	cp	r25, r24
    1f98:	09 f0       	breq	.+2      	; 0x1f9c <_fpadd_parts+0x3a>
    1f9a:	21 c1       	rjmp	.+578    	; 0x21de <_fpadd_parts+0x27c>
    1f9c:	26 c1       	rjmp	.+588    	; 0x21ea <_fpadd_parts+0x288>
    1f9e:	94 30       	cpi	r25, 0x04	; 4
    1fa0:	09 f4       	brne	.+2      	; 0x1fa4 <_fpadd_parts+0x42>
    1fa2:	20 c1       	rjmp	.+576    	; 0x21e4 <_fpadd_parts+0x282>
    1fa4:	92 30       	cpi	r25, 0x02	; 2
    1fa6:	b1 f4       	brne	.+44     	; 0x1fd4 <_fpadd_parts+0x72>
    1fa8:	82 30       	cpi	r24, 0x02	; 2
    1faa:	09 f0       	breq	.+2      	; 0x1fae <_fpadd_parts+0x4c>
    1fac:	1e c1       	rjmp	.+572    	; 0x21ea <_fpadd_parts+0x288>
    1fae:	ca 01       	movw	r24, r20
    1fb0:	af 01       	movw	r20, r30
    1fb2:	28 e0       	ldi	r18, 0x08	; 8
    1fb4:	da 01       	movw	r26, r20
    1fb6:	0d 90       	ld	r0, X+
    1fb8:	ad 01       	movw	r20, r26
    1fba:	dc 01       	movw	r26, r24
    1fbc:	0d 92       	st	X+, r0
    1fbe:	cd 01       	movw	r24, r26
    1fc0:	21 50       	subi	r18, 0x01	; 1
    1fc2:	c1 f7       	brne	.-16     	; 0x1fb4 <_fpadd_parts+0x52>
    1fc4:	db 01       	movw	r26, r22
    1fc6:	11 96       	adiw	r26, 0x01	; 1
    1fc8:	8c 91       	ld	r24, X
    1fca:	11 97       	sbiw	r26, 0x01	; 1
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	89 23       	and	r24, r25
    1fd0:	89 83       	std	Y+1, r24	; 0x01
    1fd2:	0a c1       	rjmp	.+532    	; 0x21e8 <_fpadd_parts+0x286>
    1fd4:	82 30       	cpi	r24, 0x02	; 2
    1fd6:	09 f4       	brne	.+2      	; 0x1fda <_fpadd_parts+0x78>
    1fd8:	05 c1       	rjmp	.+522    	; 0x21e4 <_fpadd_parts+0x282>
    1fda:	c2 80       	ldd	r12, Z+2	; 0x02
    1fdc:	d3 80       	ldd	r13, Z+3	; 0x03
    1fde:	db 01       	movw	r26, r22
    1fe0:	12 96       	adiw	r26, 0x02	; 2
    1fe2:	6d 90       	ld	r6, X+
    1fe4:	7c 90       	ld	r7, X
    1fe6:	13 97       	sbiw	r26, 0x03	; 3
    1fe8:	24 81       	ldd	r18, Z+4	; 0x04
    1fea:	35 81       	ldd	r19, Z+5	; 0x05
    1fec:	46 81       	ldd	r20, Z+6	; 0x06
    1fee:	57 81       	ldd	r21, Z+7	; 0x07
    1ff0:	14 96       	adiw	r26, 0x04	; 4
    1ff2:	ed 90       	ld	r14, X+
    1ff4:	fd 90       	ld	r15, X+
    1ff6:	0d 91       	ld	r16, X+
    1ff8:	1c 91       	ld	r17, X
    1ffa:	17 97       	sbiw	r26, 0x07	; 7
    1ffc:	c6 01       	movw	r24, r12
    1ffe:	86 19       	sub	r24, r6
    2000:	97 09       	sbc	r25, r7
    2002:	5c 01       	movw	r10, r24
    2004:	97 ff       	sbrs	r25, 7
    2006:	04 c0       	rjmp	.+8      	; 0x2010 <_fpadd_parts+0xae>
    2008:	aa 24       	eor	r10, r10
    200a:	bb 24       	eor	r11, r11
    200c:	a8 1a       	sub	r10, r24
    200e:	b9 0a       	sbc	r11, r25
    2010:	b0 e2       	ldi	r27, 0x20	; 32
    2012:	ab 16       	cp	r10, r27
    2014:	b1 04       	cpc	r11, r1
    2016:	0c f0       	brlt	.+2      	; 0x201a <_fpadd_parts+0xb8>
    2018:	61 c0       	rjmp	.+194    	; 0x20dc <_fpadd_parts+0x17a>
    201a:	18 16       	cp	r1, r24
    201c:	19 06       	cpc	r1, r25
    201e:	6c f5       	brge	.+90     	; 0x207a <_fpadd_parts+0x118>
    2020:	37 01       	movw	r6, r14
    2022:	48 01       	movw	r8, r16
    2024:	0a 2c       	mov	r0, r10
    2026:	04 c0       	rjmp	.+8      	; 0x2030 <_fpadd_parts+0xce>
    2028:	96 94       	lsr	r9
    202a:	87 94       	ror	r8
    202c:	77 94       	ror	r7
    202e:	67 94       	ror	r6
    2030:	0a 94       	dec	r0
    2032:	d2 f7       	brpl	.-12     	; 0x2028 <_fpadd_parts+0xc6>
    2034:	81 e0       	ldi	r24, 0x01	; 1
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a0 e0       	ldi	r26, 0x00	; 0
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	0a 2c       	mov	r0, r10
    203e:	04 c0       	rjmp	.+8      	; 0x2048 <_fpadd_parts+0xe6>
    2040:	88 0f       	add	r24, r24
    2042:	99 1f       	adc	r25, r25
    2044:	aa 1f       	adc	r26, r26
    2046:	bb 1f       	adc	r27, r27
    2048:	0a 94       	dec	r0
    204a:	d2 f7       	brpl	.-12     	; 0x2040 <_fpadd_parts+0xde>
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	a1 09       	sbc	r26, r1
    2050:	b1 09       	sbc	r27, r1
    2052:	8e 21       	and	r24, r14
    2054:	9f 21       	and	r25, r15
    2056:	a0 23       	and	r26, r16
    2058:	b1 23       	and	r27, r17
    205a:	ee 24       	eor	r14, r14
    205c:	ff 24       	eor	r15, r15
    205e:	87 01       	movw	r16, r14
    2060:	e3 94       	inc	r14
    2062:	00 97       	sbiw	r24, 0x00	; 0
    2064:	a1 05       	cpc	r26, r1
    2066:	b1 05       	cpc	r27, r1
    2068:	19 f4       	brne	.+6      	; 0x2070 <_fpadd_parts+0x10e>
    206a:	ee 24       	eor	r14, r14
    206c:	ff 24       	eor	r15, r15
    206e:	87 01       	movw	r16, r14
    2070:	e6 28       	or	r14, r6
    2072:	f7 28       	or	r15, r7
    2074:	08 29       	or	r16, r8
    2076:	19 29       	or	r17, r9
    2078:	3c c0       	rjmp	.+120    	; 0x20f2 <_fpadd_parts+0x190>
    207a:	00 97       	sbiw	r24, 0x00	; 0
    207c:	d1 f1       	breq	.+116    	; 0x20f2 <_fpadd_parts+0x190>
    207e:	ca 0c       	add	r12, r10
    2080:	db 1c       	adc	r13, r11
    2082:	39 01       	movw	r6, r18
    2084:	4a 01       	movw	r8, r20
    2086:	0a 2c       	mov	r0, r10
    2088:	04 c0       	rjmp	.+8      	; 0x2092 <_fpadd_parts+0x130>
    208a:	96 94       	lsr	r9
    208c:	87 94       	ror	r8
    208e:	77 94       	ror	r7
    2090:	67 94       	ror	r6
    2092:	0a 94       	dec	r0
    2094:	d2 f7       	brpl	.-12     	; 0x208a <_fpadd_parts+0x128>
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	90 e0       	ldi	r25, 0x00	; 0
    209a:	a0 e0       	ldi	r26, 0x00	; 0
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	0a 2c       	mov	r0, r10
    20a0:	04 c0       	rjmp	.+8      	; 0x20aa <_fpadd_parts+0x148>
    20a2:	88 0f       	add	r24, r24
    20a4:	99 1f       	adc	r25, r25
    20a6:	aa 1f       	adc	r26, r26
    20a8:	bb 1f       	adc	r27, r27
    20aa:	0a 94       	dec	r0
    20ac:	d2 f7       	brpl	.-12     	; 0x20a2 <_fpadd_parts+0x140>
    20ae:	01 97       	sbiw	r24, 0x01	; 1
    20b0:	a1 09       	sbc	r26, r1
    20b2:	b1 09       	sbc	r27, r1
    20b4:	82 23       	and	r24, r18
    20b6:	93 23       	and	r25, r19
    20b8:	a4 23       	and	r26, r20
    20ba:	b5 23       	and	r27, r21
    20bc:	21 e0       	ldi	r18, 0x01	; 1
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e0       	ldi	r20, 0x00	; 0
    20c2:	50 e0       	ldi	r21, 0x00	; 0
    20c4:	00 97       	sbiw	r24, 0x00	; 0
    20c6:	a1 05       	cpc	r26, r1
    20c8:	b1 05       	cpc	r27, r1
    20ca:	19 f4       	brne	.+6      	; 0x20d2 <_fpadd_parts+0x170>
    20cc:	20 e0       	ldi	r18, 0x00	; 0
    20ce:	30 e0       	ldi	r19, 0x00	; 0
    20d0:	a9 01       	movw	r20, r18
    20d2:	26 29       	or	r18, r6
    20d4:	37 29       	or	r19, r7
    20d6:	48 29       	or	r20, r8
    20d8:	59 29       	or	r21, r9
    20da:	0b c0       	rjmp	.+22     	; 0x20f2 <_fpadd_parts+0x190>
    20dc:	6c 14       	cp	r6, r12
    20de:	7d 04       	cpc	r7, r13
    20e0:	24 f4       	brge	.+8      	; 0x20ea <_fpadd_parts+0x188>
    20e2:	ee 24       	eor	r14, r14
    20e4:	ff 24       	eor	r15, r15
    20e6:	87 01       	movw	r16, r14
    20e8:	04 c0       	rjmp	.+8      	; 0x20f2 <_fpadd_parts+0x190>
    20ea:	63 01       	movw	r12, r6
    20ec:	20 e0       	ldi	r18, 0x00	; 0
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	a9 01       	movw	r20, r18
    20f2:	81 81       	ldd	r24, Z+1	; 0x01
    20f4:	fb 01       	movw	r30, r22
    20f6:	91 81       	ldd	r25, Z+1	; 0x01
    20f8:	89 17       	cp	r24, r25
    20fa:	09 f4       	brne	.+2      	; 0x20fe <_fpadd_parts+0x19c>
    20fc:	45 c0       	rjmp	.+138    	; 0x2188 <_fpadd_parts+0x226>
    20fe:	88 23       	and	r24, r24
    2100:	49 f0       	breq	.+18     	; 0x2114 <_fpadd_parts+0x1b2>
    2102:	d8 01       	movw	r26, r16
    2104:	c7 01       	movw	r24, r14
    2106:	82 1b       	sub	r24, r18
    2108:	93 0b       	sbc	r25, r19
    210a:	a4 0b       	sbc	r26, r20
    210c:	b5 0b       	sbc	r27, r21
    210e:	9c 01       	movw	r18, r24
    2110:	ad 01       	movw	r20, r26
    2112:	04 c0       	rjmp	.+8      	; 0x211c <_fpadd_parts+0x1ba>
    2114:	2e 19       	sub	r18, r14
    2116:	3f 09       	sbc	r19, r15
    2118:	40 0b       	sbc	r20, r16
    211a:	51 0b       	sbc	r21, r17
    211c:	57 fd       	sbrc	r21, 7
    211e:	04 c0       	rjmp	.+8      	; 0x2128 <_fpadd_parts+0x1c6>
    2120:	19 82       	std	Y+1, r1	; 0x01
    2122:	db 82       	std	Y+3, r13	; 0x03
    2124:	ca 82       	std	Y+2, r12	; 0x02
    2126:	0b c0       	rjmp	.+22     	; 0x213e <_fpadd_parts+0x1dc>
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	89 83       	std	Y+1, r24	; 0x01
    212c:	db 82       	std	Y+3, r13	; 0x03
    212e:	ca 82       	std	Y+2, r12	; 0x02
    2130:	50 95       	com	r21
    2132:	40 95       	com	r20
    2134:	30 95       	com	r19
    2136:	21 95       	neg	r18
    2138:	3f 4f       	sbci	r19, 0xFF	; 255
    213a:	4f 4f       	sbci	r20, 0xFF	; 255
    213c:	5f 4f       	sbci	r21, 0xFF	; 255
    213e:	2c 83       	std	Y+4, r18	; 0x04
    2140:	3d 83       	std	Y+5, r19	; 0x05
    2142:	4e 83       	std	Y+6, r20	; 0x06
    2144:	5f 83       	std	Y+7, r21	; 0x07
    2146:	0d c0       	rjmp	.+26     	; 0x2162 <_fpadd_parts+0x200>
    2148:	88 0f       	add	r24, r24
    214a:	99 1f       	adc	r25, r25
    214c:	aa 1f       	adc	r26, r26
    214e:	bb 1f       	adc	r27, r27
    2150:	8c 83       	std	Y+4, r24	; 0x04
    2152:	9d 83       	std	Y+5, r25	; 0x05
    2154:	ae 83       	std	Y+6, r26	; 0x06
    2156:	bf 83       	std	Y+7, r27	; 0x07
    2158:	8a 81       	ldd	r24, Y+2	; 0x02
    215a:	9b 81       	ldd	r25, Y+3	; 0x03
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	9b 83       	std	Y+3, r25	; 0x03
    2160:	8a 83       	std	Y+2, r24	; 0x02
    2162:	8c 81       	ldd	r24, Y+4	; 0x04
    2164:	9d 81       	ldd	r25, Y+5	; 0x05
    2166:	ae 81       	ldd	r26, Y+6	; 0x06
    2168:	bf 81       	ldd	r27, Y+7	; 0x07
    216a:	9c 01       	movw	r18, r24
    216c:	ad 01       	movw	r20, r26
    216e:	21 50       	subi	r18, 0x01	; 1
    2170:	30 40       	sbci	r19, 0x00	; 0
    2172:	40 40       	sbci	r20, 0x00	; 0
    2174:	50 40       	sbci	r21, 0x00	; 0
    2176:	2f 3f       	cpi	r18, 0xFF	; 255
    2178:	ef ef       	ldi	r30, 0xFF	; 255
    217a:	3e 07       	cpc	r19, r30
    217c:	ef ef       	ldi	r30, 0xFF	; 255
    217e:	4e 07       	cpc	r20, r30
    2180:	ef e3       	ldi	r30, 0x3F	; 63
    2182:	5e 07       	cpc	r21, r30
    2184:	08 f3       	brcs	.-62     	; 0x2148 <_fpadd_parts+0x1e6>
    2186:	0b c0       	rjmp	.+22     	; 0x219e <_fpadd_parts+0x23c>
    2188:	89 83       	std	Y+1, r24	; 0x01
    218a:	db 82       	std	Y+3, r13	; 0x03
    218c:	ca 82       	std	Y+2, r12	; 0x02
    218e:	2e 0d       	add	r18, r14
    2190:	3f 1d       	adc	r19, r15
    2192:	40 1f       	adc	r20, r16
    2194:	51 1f       	adc	r21, r17
    2196:	2c 83       	std	Y+4, r18	; 0x04
    2198:	3d 83       	std	Y+5, r19	; 0x05
    219a:	4e 83       	std	Y+6, r20	; 0x06
    219c:	5f 83       	std	Y+7, r21	; 0x07
    219e:	83 e0       	ldi	r24, 0x03	; 3
    21a0:	88 83       	st	Y, r24
    21a2:	2c 81       	ldd	r18, Y+4	; 0x04
    21a4:	3d 81       	ldd	r19, Y+5	; 0x05
    21a6:	4e 81       	ldd	r20, Y+6	; 0x06
    21a8:	5f 81       	ldd	r21, Y+7	; 0x07
    21aa:	57 ff       	sbrs	r21, 7
    21ac:	1d c0       	rjmp	.+58     	; 0x21e8 <_fpadd_parts+0x286>
    21ae:	da 01       	movw	r26, r20
    21b0:	c9 01       	movw	r24, r18
    21b2:	81 70       	andi	r24, 0x01	; 1
    21b4:	90 70       	andi	r25, 0x00	; 0
    21b6:	a0 70       	andi	r26, 0x00	; 0
    21b8:	b0 70       	andi	r27, 0x00	; 0
    21ba:	56 95       	lsr	r21
    21bc:	47 95       	ror	r20
    21be:	37 95       	ror	r19
    21c0:	27 95       	ror	r18
    21c2:	82 2b       	or	r24, r18
    21c4:	93 2b       	or	r25, r19
    21c6:	a4 2b       	or	r26, r20
    21c8:	b5 2b       	or	r27, r21
    21ca:	8c 83       	std	Y+4, r24	; 0x04
    21cc:	9d 83       	std	Y+5, r25	; 0x05
    21ce:	ae 83       	std	Y+6, r26	; 0x06
    21d0:	bf 83       	std	Y+7, r27	; 0x07
    21d2:	8a 81       	ldd	r24, Y+2	; 0x02
    21d4:	9b 81       	ldd	r25, Y+3	; 0x03
    21d6:	01 96       	adiw	r24, 0x01	; 1
    21d8:	9b 83       	std	Y+3, r25	; 0x03
    21da:	8a 83       	std	Y+2, r24	; 0x02
    21dc:	05 c0       	rjmp	.+10     	; 0x21e8 <_fpadd_parts+0x286>
    21de:	eb ed       	ldi	r30, 0xDB	; 219
    21e0:	f1 e0       	ldi	r31, 0x01	; 1
    21e2:	03 c0       	rjmp	.+6      	; 0x21ea <_fpadd_parts+0x288>
    21e4:	fb 01       	movw	r30, r22
    21e6:	01 c0       	rjmp	.+2      	; 0x21ea <_fpadd_parts+0x288>
    21e8:	fe 01       	movw	r30, r28
    21ea:	cf 01       	movw	r24, r30
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	ee e0       	ldi	r30, 0x0E	; 14
    21f2:	0c 94 1b 27 	jmp	0x4e36	; 0x4e36 <__epilogue_restores__+0x8>

000021f6 <__addsf3>:
    21f6:	a0 e2       	ldi	r26, 0x20	; 32
    21f8:	b0 e0       	ldi	r27, 0x00	; 0
    21fa:	e1 e0       	ldi	r30, 0x01	; 1
    21fc:	f1 e1       	ldi	r31, 0x11	; 17
    21fe:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__prologue_saves__+0x18>
    2202:	69 83       	std	Y+1, r22	; 0x01
    2204:	7a 83       	std	Y+2, r23	; 0x02
    2206:	8b 83       	std	Y+3, r24	; 0x03
    2208:	9c 83       	std	Y+4, r25	; 0x04
    220a:	2d 83       	std	Y+5, r18	; 0x05
    220c:	3e 83       	std	Y+6, r19	; 0x06
    220e:	4f 83       	std	Y+7, r20	; 0x07
    2210:	58 87       	std	Y+8, r21	; 0x08
    2212:	89 e0       	ldi	r24, 0x09	; 9
    2214:	e8 2e       	mov	r14, r24
    2216:	f1 2c       	mov	r15, r1
    2218:	ec 0e       	add	r14, r28
    221a:	fd 1e       	adc	r15, r29
    221c:	ce 01       	movw	r24, r28
    221e:	01 96       	adiw	r24, 0x01	; 1
    2220:	b7 01       	movw	r22, r14
    2222:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    2226:	8e 01       	movw	r16, r28
    2228:	0f 5e       	subi	r16, 0xEF	; 239
    222a:	1f 4f       	sbci	r17, 0xFF	; 255
    222c:	ce 01       	movw	r24, r28
    222e:	05 96       	adiw	r24, 0x05	; 5
    2230:	b8 01       	movw	r22, r16
    2232:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    2236:	c7 01       	movw	r24, r14
    2238:	b8 01       	movw	r22, r16
    223a:	ae 01       	movw	r20, r28
    223c:	47 5e       	subi	r20, 0xE7	; 231
    223e:	5f 4f       	sbci	r21, 0xFF	; 255
    2240:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <_fpadd_parts>
    2244:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__pack_f>
    2248:	a0 96       	adiw	r28, 0x20	; 32
    224a:	e6 e0       	ldi	r30, 0x06	; 6
    224c:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__epilogue_restores__+0x18>

00002250 <__subsf3>:
    2250:	a0 e2       	ldi	r26, 0x20	; 32
    2252:	b0 e0       	ldi	r27, 0x00	; 0
    2254:	ee e2       	ldi	r30, 0x2E	; 46
    2256:	f1 e1       	ldi	r31, 0x11	; 17
    2258:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__prologue_saves__+0x18>
    225c:	69 83       	std	Y+1, r22	; 0x01
    225e:	7a 83       	std	Y+2, r23	; 0x02
    2260:	8b 83       	std	Y+3, r24	; 0x03
    2262:	9c 83       	std	Y+4, r25	; 0x04
    2264:	2d 83       	std	Y+5, r18	; 0x05
    2266:	3e 83       	std	Y+6, r19	; 0x06
    2268:	4f 83       	std	Y+7, r20	; 0x07
    226a:	58 87       	std	Y+8, r21	; 0x08
    226c:	8e 01       	movw	r16, r28
    226e:	07 5f       	subi	r16, 0xF7	; 247
    2270:	1f 4f       	sbci	r17, 0xFF	; 255
    2272:	ce 01       	movw	r24, r28
    2274:	01 96       	adiw	r24, 0x01	; 1
    2276:	b8 01       	movw	r22, r16
    2278:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    227c:	91 e1       	ldi	r25, 0x11	; 17
    227e:	e9 2e       	mov	r14, r25
    2280:	f1 2c       	mov	r15, r1
    2282:	ec 0e       	add	r14, r28
    2284:	fd 1e       	adc	r15, r29
    2286:	ce 01       	movw	r24, r28
    2288:	05 96       	adiw	r24, 0x05	; 5
    228a:	b7 01       	movw	r22, r14
    228c:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    2290:	8a 89       	ldd	r24, Y+18	; 0x12
    2292:	91 e0       	ldi	r25, 0x01	; 1
    2294:	89 27       	eor	r24, r25
    2296:	8a 8b       	std	Y+18, r24	; 0x12
    2298:	c8 01       	movw	r24, r16
    229a:	b7 01       	movw	r22, r14
    229c:	ae 01       	movw	r20, r28
    229e:	47 5e       	subi	r20, 0xE7	; 231
    22a0:	5f 4f       	sbci	r21, 0xFF	; 255
    22a2:	0e 94 b1 0f 	call	0x1f62	; 0x1f62 <_fpadd_parts>
    22a6:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__pack_f>
    22aa:	a0 96       	adiw	r28, 0x20	; 32
    22ac:	e6 e0       	ldi	r30, 0x06	; 6
    22ae:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__epilogue_restores__+0x18>

000022b2 <__mulsf3>:
    22b2:	a0 e2       	ldi	r26, 0x20	; 32
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	ef e5       	ldi	r30, 0x5F	; 95
    22b8:	f1 e1       	ldi	r31, 0x11	; 17
    22ba:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <__prologue_saves__>
    22be:	69 83       	std	Y+1, r22	; 0x01
    22c0:	7a 83       	std	Y+2, r23	; 0x02
    22c2:	8b 83       	std	Y+3, r24	; 0x03
    22c4:	9c 83       	std	Y+4, r25	; 0x04
    22c6:	2d 83       	std	Y+5, r18	; 0x05
    22c8:	3e 83       	std	Y+6, r19	; 0x06
    22ca:	4f 83       	std	Y+7, r20	; 0x07
    22cc:	58 87       	std	Y+8, r21	; 0x08
    22ce:	ce 01       	movw	r24, r28
    22d0:	01 96       	adiw	r24, 0x01	; 1
    22d2:	be 01       	movw	r22, r28
    22d4:	67 5f       	subi	r22, 0xF7	; 247
    22d6:	7f 4f       	sbci	r23, 0xFF	; 255
    22d8:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    22dc:	ce 01       	movw	r24, r28
    22de:	05 96       	adiw	r24, 0x05	; 5
    22e0:	be 01       	movw	r22, r28
    22e2:	6f 5e       	subi	r22, 0xEF	; 239
    22e4:	7f 4f       	sbci	r23, 0xFF	; 255
    22e6:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    22ea:	99 85       	ldd	r25, Y+9	; 0x09
    22ec:	92 30       	cpi	r25, 0x02	; 2
    22ee:	78 f0       	brcs	.+30     	; 0x230e <__mulsf3+0x5c>
    22f0:	89 89       	ldd	r24, Y+17	; 0x11
    22f2:	82 30       	cpi	r24, 0x02	; 2
    22f4:	c0 f0       	brcs	.+48     	; 0x2326 <__mulsf3+0x74>
    22f6:	94 30       	cpi	r25, 0x04	; 4
    22f8:	19 f4       	brne	.+6      	; 0x2300 <__mulsf3+0x4e>
    22fa:	82 30       	cpi	r24, 0x02	; 2
    22fc:	41 f4       	brne	.+16     	; 0x230e <__mulsf3+0x5c>
    22fe:	cb c0       	rjmp	.+406    	; 0x2496 <__mulsf3+0x1e4>
    2300:	84 30       	cpi	r24, 0x04	; 4
    2302:	19 f4       	brne	.+6      	; 0x230a <__mulsf3+0x58>
    2304:	92 30       	cpi	r25, 0x02	; 2
    2306:	79 f4       	brne	.+30     	; 0x2326 <__mulsf3+0x74>
    2308:	c6 c0       	rjmp	.+396    	; 0x2496 <__mulsf3+0x1e4>
    230a:	92 30       	cpi	r25, 0x02	; 2
    230c:	51 f4       	brne	.+20     	; 0x2322 <__mulsf3+0x70>
    230e:	81 e0       	ldi	r24, 0x01	; 1
    2310:	2a 85       	ldd	r18, Y+10	; 0x0a
    2312:	9a 89       	ldd	r25, Y+18	; 0x12
    2314:	29 17       	cp	r18, r25
    2316:	09 f4       	brne	.+2      	; 0x231a <__mulsf3+0x68>
    2318:	80 e0       	ldi	r24, 0x00	; 0
    231a:	8a 87       	std	Y+10, r24	; 0x0a
    231c:	ce 01       	movw	r24, r28
    231e:	09 96       	adiw	r24, 0x09	; 9
    2320:	bc c0       	rjmp	.+376    	; 0x249a <__mulsf3+0x1e8>
    2322:	82 30       	cpi	r24, 0x02	; 2
    2324:	51 f4       	brne	.+20     	; 0x233a <__mulsf3+0x88>
    2326:	81 e0       	ldi	r24, 0x01	; 1
    2328:	2a 85       	ldd	r18, Y+10	; 0x0a
    232a:	9a 89       	ldd	r25, Y+18	; 0x12
    232c:	29 17       	cp	r18, r25
    232e:	09 f4       	brne	.+2      	; 0x2332 <__mulsf3+0x80>
    2330:	80 e0       	ldi	r24, 0x00	; 0
    2332:	8a 8b       	std	Y+18, r24	; 0x12
    2334:	ce 01       	movw	r24, r28
    2336:	41 96       	adiw	r24, 0x11	; 17
    2338:	b0 c0       	rjmp	.+352    	; 0x249a <__mulsf3+0x1e8>
    233a:	6d 84       	ldd	r6, Y+13	; 0x0d
    233c:	7e 84       	ldd	r7, Y+14	; 0x0e
    233e:	8f 84       	ldd	r8, Y+15	; 0x0f
    2340:	98 88       	ldd	r9, Y+16	; 0x10
    2342:	ed 88       	ldd	r14, Y+21	; 0x15
    2344:	fe 88       	ldd	r15, Y+22	; 0x16
    2346:	0f 89       	ldd	r16, Y+23	; 0x17
    2348:	18 8d       	ldd	r17, Y+24	; 0x18
    234a:	e0 e2       	ldi	r30, 0x20	; 32
    234c:	f0 e0       	ldi	r31, 0x00	; 0
    234e:	80 e0       	ldi	r24, 0x00	; 0
    2350:	90 e0       	ldi	r25, 0x00	; 0
    2352:	dc 01       	movw	r26, r24
    2354:	aa 24       	eor	r10, r10
    2356:	bb 24       	eor	r11, r11
    2358:	65 01       	movw	r12, r10
    235a:	20 e0       	ldi	r18, 0x00	; 0
    235c:	30 e0       	ldi	r19, 0x00	; 0
    235e:	a9 01       	movw	r20, r18
    2360:	b3 01       	movw	r22, r6
    2362:	61 70       	andi	r22, 0x01	; 1
    2364:	70 70       	andi	r23, 0x00	; 0
    2366:	61 15       	cp	r22, r1
    2368:	71 05       	cpc	r23, r1
    236a:	d1 f0       	breq	.+52     	; 0x23a0 <__mulsf3+0xee>
    236c:	2e 0d       	add	r18, r14
    236e:	3f 1d       	adc	r19, r15
    2370:	40 1f       	adc	r20, r16
    2372:	51 1f       	adc	r21, r17
    2374:	15 01       	movw	r2, r10
    2376:	26 01       	movw	r4, r12
    2378:	28 0e       	add	r2, r24
    237a:	39 1e       	adc	r3, r25
    237c:	4a 1e       	adc	r4, r26
    237e:	5b 1e       	adc	r5, r27
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	a0 e0       	ldi	r26, 0x00	; 0
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	2e 15       	cp	r18, r14
    238a:	3f 05       	cpc	r19, r15
    238c:	40 07       	cpc	r20, r16
    238e:	51 07       	cpc	r21, r17
    2390:	18 f0       	brcs	.+6      	; 0x2398 <__mulsf3+0xe6>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	dc 01       	movw	r26, r24
    2398:	82 0d       	add	r24, r2
    239a:	93 1d       	adc	r25, r3
    239c:	a4 1d       	adc	r26, r4
    239e:	b5 1d       	adc	r27, r5
    23a0:	aa 0c       	add	r10, r10
    23a2:	bb 1c       	adc	r11, r11
    23a4:	cc 1c       	adc	r12, r12
    23a6:	dd 1c       	adc	r13, r13
    23a8:	17 ff       	sbrs	r17, 7
    23aa:	09 c0       	rjmp	.+18     	; 0x23be <__mulsf3+0x10c>
    23ac:	61 e0       	ldi	r22, 0x01	; 1
    23ae:	26 2e       	mov	r2, r22
    23b0:	31 2c       	mov	r3, r1
    23b2:	41 2c       	mov	r4, r1
    23b4:	51 2c       	mov	r5, r1
    23b6:	a2 28       	or	r10, r2
    23b8:	b3 28       	or	r11, r3
    23ba:	c4 28       	or	r12, r4
    23bc:	d5 28       	or	r13, r5
    23be:	31 97       	sbiw	r30, 0x01	; 1
    23c0:	49 f0       	breq	.+18     	; 0x23d4 <__mulsf3+0x122>
    23c2:	ee 0c       	add	r14, r14
    23c4:	ff 1c       	adc	r15, r15
    23c6:	00 1f       	adc	r16, r16
    23c8:	11 1f       	adc	r17, r17
    23ca:	96 94       	lsr	r9
    23cc:	87 94       	ror	r8
    23ce:	77 94       	ror	r7
    23d0:	67 94       	ror	r6
    23d2:	c6 cf       	rjmp	.-116    	; 0x2360 <__mulsf3+0xae>
    23d4:	6b 89       	ldd	r22, Y+19	; 0x13
    23d6:	7c 89       	ldd	r23, Y+20	; 0x14
    23d8:	eb 85       	ldd	r30, Y+11	; 0x0b
    23da:	fc 85       	ldd	r31, Y+12	; 0x0c
    23dc:	6e 0f       	add	r22, r30
    23de:	7f 1f       	adc	r23, r31
    23e0:	6e 5f       	subi	r22, 0xFE	; 254
    23e2:	7f 4f       	sbci	r23, 0xFF	; 255
    23e4:	7c 8f       	std	Y+28, r23	; 0x1c
    23e6:	6b 8f       	std	Y+27, r22	; 0x1b
    23e8:	61 e0       	ldi	r22, 0x01	; 1
    23ea:	ea 85       	ldd	r30, Y+10	; 0x0a
    23ec:	7a 89       	ldd	r23, Y+18	; 0x12
    23ee:	e7 17       	cp	r30, r23
    23f0:	09 f4       	brne	.+2      	; 0x23f4 <__mulsf3+0x142>
    23f2:	60 e0       	ldi	r22, 0x00	; 0
    23f4:	6a 8f       	std	Y+26, r22	; 0x1a
    23f6:	6b 8d       	ldd	r22, Y+27	; 0x1b
    23f8:	7c 8d       	ldd	r23, Y+28	; 0x1c
    23fa:	10 c0       	rjmp	.+32     	; 0x241c <__mulsf3+0x16a>
    23fc:	fc 01       	movw	r30, r24
    23fe:	e1 70       	andi	r30, 0x01	; 1
    2400:	f0 70       	andi	r31, 0x00	; 0
    2402:	30 97       	sbiw	r30, 0x00	; 0
    2404:	29 f0       	breq	.+10     	; 0x2410 <__mulsf3+0x15e>
    2406:	56 95       	lsr	r21
    2408:	47 95       	ror	r20
    240a:	37 95       	ror	r19
    240c:	27 95       	ror	r18
    240e:	50 68       	ori	r21, 0x80	; 128
    2410:	b6 95       	lsr	r27
    2412:	a7 95       	ror	r26
    2414:	97 95       	ror	r25
    2416:	87 95       	ror	r24
    2418:	6f 5f       	subi	r22, 0xFF	; 255
    241a:	7f 4f       	sbci	r23, 0xFF	; 255
    241c:	b7 fd       	sbrc	r27, 7
    241e:	ee cf       	rjmp	.-36     	; 0x23fc <__mulsf3+0x14a>
    2420:	0c c0       	rjmp	.+24     	; 0x243a <__mulsf3+0x188>
    2422:	88 0f       	add	r24, r24
    2424:	99 1f       	adc	r25, r25
    2426:	aa 1f       	adc	r26, r26
    2428:	bb 1f       	adc	r27, r27
    242a:	57 fd       	sbrc	r21, 7
    242c:	81 60       	ori	r24, 0x01	; 1
    242e:	22 0f       	add	r18, r18
    2430:	33 1f       	adc	r19, r19
    2432:	44 1f       	adc	r20, r20
    2434:	55 1f       	adc	r21, r21
    2436:	61 50       	subi	r22, 0x01	; 1
    2438:	70 40       	sbci	r23, 0x00	; 0
    243a:	80 30       	cpi	r24, 0x00	; 0
    243c:	e0 e0       	ldi	r30, 0x00	; 0
    243e:	9e 07       	cpc	r25, r30
    2440:	e0 e0       	ldi	r30, 0x00	; 0
    2442:	ae 07       	cpc	r26, r30
    2444:	e0 e4       	ldi	r30, 0x40	; 64
    2446:	be 07       	cpc	r27, r30
    2448:	60 f3       	brcs	.-40     	; 0x2422 <__mulsf3+0x170>
    244a:	6b 8f       	std	Y+27, r22	; 0x1b
    244c:	7c 8f       	std	Y+28, r23	; 0x1c
    244e:	6f e7       	ldi	r22, 0x7F	; 127
    2450:	e6 2e       	mov	r14, r22
    2452:	f1 2c       	mov	r15, r1
    2454:	01 2d       	mov	r16, r1
    2456:	11 2d       	mov	r17, r1
    2458:	e8 22       	and	r14, r24
    245a:	f9 22       	and	r15, r25
    245c:	0a 23       	and	r16, r26
    245e:	1b 23       	and	r17, r27
    2460:	60 e4       	ldi	r22, 0x40	; 64
    2462:	e6 16       	cp	r14, r22
    2464:	f1 04       	cpc	r15, r1
    2466:	01 05       	cpc	r16, r1
    2468:	11 05       	cpc	r17, r1
    246a:	61 f4       	brne	.+24     	; 0x2484 <__mulsf3+0x1d2>
    246c:	87 fd       	sbrc	r24, 7
    246e:	0a c0       	rjmp	.+20     	; 0x2484 <__mulsf3+0x1d2>
    2470:	21 15       	cp	r18, r1
    2472:	31 05       	cpc	r19, r1
    2474:	41 05       	cpc	r20, r1
    2476:	51 05       	cpc	r21, r1
    2478:	29 f0       	breq	.+10     	; 0x2484 <__mulsf3+0x1d2>
    247a:	80 5c       	subi	r24, 0xC0	; 192
    247c:	9f 4f       	sbci	r25, 0xFF	; 255
    247e:	af 4f       	sbci	r26, 0xFF	; 255
    2480:	bf 4f       	sbci	r27, 0xFF	; 255
    2482:	80 78       	andi	r24, 0x80	; 128
    2484:	8d 8f       	std	Y+29, r24	; 0x1d
    2486:	9e 8f       	std	Y+30, r25	; 0x1e
    2488:	af 8f       	std	Y+31, r26	; 0x1f
    248a:	b8 a3       	std	Y+32, r27	; 0x20
    248c:	83 e0       	ldi	r24, 0x03	; 3
    248e:	89 8f       	std	Y+25, r24	; 0x19
    2490:	ce 01       	movw	r24, r28
    2492:	49 96       	adiw	r24, 0x19	; 25
    2494:	02 c0       	rjmp	.+4      	; 0x249a <__mulsf3+0x1e8>
    2496:	8b ed       	ldi	r24, 0xDB	; 219
    2498:	91 e0       	ldi	r25, 0x01	; 1
    249a:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__pack_f>
    249e:	a0 96       	adiw	r28, 0x20	; 32
    24a0:	e2 e1       	ldi	r30, 0x12	; 18
    24a2:	0c 94 17 27 	jmp	0x4e2e	; 0x4e2e <__epilogue_restores__>

000024a6 <__divsf3>:
    24a6:	a8 e1       	ldi	r26, 0x18	; 24
    24a8:	b0 e0       	ldi	r27, 0x00	; 0
    24aa:	e9 e5       	ldi	r30, 0x59	; 89
    24ac:	f2 e1       	ldi	r31, 0x12	; 18
    24ae:	0c 94 03 27 	jmp	0x4e06	; 0x4e06 <__prologue_saves__+0x10>
    24b2:	69 83       	std	Y+1, r22	; 0x01
    24b4:	7a 83       	std	Y+2, r23	; 0x02
    24b6:	8b 83       	std	Y+3, r24	; 0x03
    24b8:	9c 83       	std	Y+4, r25	; 0x04
    24ba:	2d 83       	std	Y+5, r18	; 0x05
    24bc:	3e 83       	std	Y+6, r19	; 0x06
    24be:	4f 83       	std	Y+7, r20	; 0x07
    24c0:	58 87       	std	Y+8, r21	; 0x08
    24c2:	8e 01       	movw	r16, r28
    24c4:	07 5f       	subi	r16, 0xF7	; 247
    24c6:	1f 4f       	sbci	r17, 0xFF	; 255
    24c8:	ce 01       	movw	r24, r28
    24ca:	01 96       	adiw	r24, 0x01	; 1
    24cc:	b8 01       	movw	r22, r16
    24ce:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    24d2:	81 e1       	ldi	r24, 0x11	; 17
    24d4:	e8 2e       	mov	r14, r24
    24d6:	f1 2c       	mov	r15, r1
    24d8:	ec 0e       	add	r14, r28
    24da:	fd 1e       	adc	r15, r29
    24dc:	ce 01       	movw	r24, r28
    24de:	05 96       	adiw	r24, 0x05	; 5
    24e0:	b7 01       	movw	r22, r14
    24e2:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    24e6:	99 85       	ldd	r25, Y+9	; 0x09
    24e8:	92 30       	cpi	r25, 0x02	; 2
    24ea:	08 f4       	brcc	.+2      	; 0x24ee <__divsf3+0x48>
    24ec:	83 c0       	rjmp	.+262    	; 0x25f4 <__divsf3+0x14e>
    24ee:	89 89       	ldd	r24, Y+17	; 0x11
    24f0:	82 30       	cpi	r24, 0x02	; 2
    24f2:	08 f4       	brcc	.+2      	; 0x24f6 <__divsf3+0x50>
    24f4:	7b c0       	rjmp	.+246    	; 0x25ec <__divsf3+0x146>
    24f6:	2a 85       	ldd	r18, Y+10	; 0x0a
    24f8:	3a 89       	ldd	r19, Y+18	; 0x12
    24fa:	23 27       	eor	r18, r19
    24fc:	2a 87       	std	Y+10, r18	; 0x0a
    24fe:	94 30       	cpi	r25, 0x04	; 4
    2500:	11 f0       	breq	.+4      	; 0x2506 <__divsf3+0x60>
    2502:	92 30       	cpi	r25, 0x02	; 2
    2504:	21 f4       	brne	.+8      	; 0x250e <__divsf3+0x68>
    2506:	98 17       	cp	r25, r24
    2508:	09 f0       	breq	.+2      	; 0x250c <__divsf3+0x66>
    250a:	6c c0       	rjmp	.+216    	; 0x25e4 <__divsf3+0x13e>
    250c:	71 c0       	rjmp	.+226    	; 0x25f0 <__divsf3+0x14a>
    250e:	84 30       	cpi	r24, 0x04	; 4
    2510:	39 f4       	brne	.+14     	; 0x2520 <__divsf3+0x7a>
    2512:	1d 86       	std	Y+13, r1	; 0x0d
    2514:	1e 86       	std	Y+14, r1	; 0x0e
    2516:	1f 86       	std	Y+15, r1	; 0x0f
    2518:	18 8a       	std	Y+16, r1	; 0x10
    251a:	1c 86       	std	Y+12, r1	; 0x0c
    251c:	1b 86       	std	Y+11, r1	; 0x0b
    251e:	6a c0       	rjmp	.+212    	; 0x25f4 <__divsf3+0x14e>
    2520:	82 30       	cpi	r24, 0x02	; 2
    2522:	19 f4       	brne	.+6      	; 0x252a <__divsf3+0x84>
    2524:	84 e0       	ldi	r24, 0x04	; 4
    2526:	89 87       	std	Y+9, r24	; 0x09
    2528:	65 c0       	rjmp	.+202    	; 0x25f4 <__divsf3+0x14e>
    252a:	8b 85       	ldd	r24, Y+11	; 0x0b
    252c:	9c 85       	ldd	r25, Y+12	; 0x0c
    252e:	2b 89       	ldd	r18, Y+19	; 0x13
    2530:	3c 89       	ldd	r19, Y+20	; 0x14
    2532:	82 1b       	sub	r24, r18
    2534:	93 0b       	sbc	r25, r19
    2536:	9c 87       	std	Y+12, r25	; 0x0c
    2538:	8b 87       	std	Y+11, r24	; 0x0b
    253a:	2d 85       	ldd	r18, Y+13	; 0x0d
    253c:	3e 85       	ldd	r19, Y+14	; 0x0e
    253e:	4f 85       	ldd	r20, Y+15	; 0x0f
    2540:	58 89       	ldd	r21, Y+16	; 0x10
    2542:	ed 88       	ldd	r14, Y+21	; 0x15
    2544:	fe 88       	ldd	r15, Y+22	; 0x16
    2546:	0f 89       	ldd	r16, Y+23	; 0x17
    2548:	18 8d       	ldd	r17, Y+24	; 0x18
    254a:	2e 15       	cp	r18, r14
    254c:	3f 05       	cpc	r19, r15
    254e:	40 07       	cpc	r20, r16
    2550:	51 07       	cpc	r21, r17
    2552:	38 f4       	brcc	.+14     	; 0x2562 <__divsf3+0xbc>
    2554:	22 0f       	add	r18, r18
    2556:	33 1f       	adc	r19, r19
    2558:	44 1f       	adc	r20, r20
    255a:	55 1f       	adc	r21, r21
    255c:	01 97       	sbiw	r24, 0x01	; 1
    255e:	9c 87       	std	Y+12, r25	; 0x0c
    2560:	8b 87       	std	Y+11, r24	; 0x0b
    2562:	6f e1       	ldi	r22, 0x1F	; 31
    2564:	70 e0       	ldi	r23, 0x00	; 0
    2566:	a1 2c       	mov	r10, r1
    2568:	b1 2c       	mov	r11, r1
    256a:	c1 2c       	mov	r12, r1
    256c:	a0 e4       	ldi	r26, 0x40	; 64
    256e:	da 2e       	mov	r13, r26
    2570:	80 e0       	ldi	r24, 0x00	; 0
    2572:	90 e0       	ldi	r25, 0x00	; 0
    2574:	dc 01       	movw	r26, r24
    2576:	2e 15       	cp	r18, r14
    2578:	3f 05       	cpc	r19, r15
    257a:	40 07       	cpc	r20, r16
    257c:	51 07       	cpc	r21, r17
    257e:	40 f0       	brcs	.+16     	; 0x2590 <__divsf3+0xea>
    2580:	8a 29       	or	r24, r10
    2582:	9b 29       	or	r25, r11
    2584:	ac 29       	or	r26, r12
    2586:	bd 29       	or	r27, r13
    2588:	2e 19       	sub	r18, r14
    258a:	3f 09       	sbc	r19, r15
    258c:	40 0b       	sbc	r20, r16
    258e:	51 0b       	sbc	r21, r17
    2590:	d6 94       	lsr	r13
    2592:	c7 94       	ror	r12
    2594:	b7 94       	ror	r11
    2596:	a7 94       	ror	r10
    2598:	22 0f       	add	r18, r18
    259a:	33 1f       	adc	r19, r19
    259c:	44 1f       	adc	r20, r20
    259e:	55 1f       	adc	r21, r21
    25a0:	61 50       	subi	r22, 0x01	; 1
    25a2:	70 40       	sbci	r23, 0x00	; 0
    25a4:	41 f7       	brne	.-48     	; 0x2576 <__divsf3+0xd0>
    25a6:	6f e7       	ldi	r22, 0x7F	; 127
    25a8:	e6 2e       	mov	r14, r22
    25aa:	f1 2c       	mov	r15, r1
    25ac:	01 2d       	mov	r16, r1
    25ae:	11 2d       	mov	r17, r1
    25b0:	e8 22       	and	r14, r24
    25b2:	f9 22       	and	r15, r25
    25b4:	0a 23       	and	r16, r26
    25b6:	1b 23       	and	r17, r27
    25b8:	60 e4       	ldi	r22, 0x40	; 64
    25ba:	e6 16       	cp	r14, r22
    25bc:	f1 04       	cpc	r15, r1
    25be:	01 05       	cpc	r16, r1
    25c0:	11 05       	cpc	r17, r1
    25c2:	61 f4       	brne	.+24     	; 0x25dc <__divsf3+0x136>
    25c4:	87 fd       	sbrc	r24, 7
    25c6:	0a c0       	rjmp	.+20     	; 0x25dc <__divsf3+0x136>
    25c8:	21 15       	cp	r18, r1
    25ca:	31 05       	cpc	r19, r1
    25cc:	41 05       	cpc	r20, r1
    25ce:	51 05       	cpc	r21, r1
    25d0:	29 f0       	breq	.+10     	; 0x25dc <__divsf3+0x136>
    25d2:	80 5c       	subi	r24, 0xC0	; 192
    25d4:	9f 4f       	sbci	r25, 0xFF	; 255
    25d6:	af 4f       	sbci	r26, 0xFF	; 255
    25d8:	bf 4f       	sbci	r27, 0xFF	; 255
    25da:	80 78       	andi	r24, 0x80	; 128
    25dc:	8d 87       	std	Y+13, r24	; 0x0d
    25de:	9e 87       	std	Y+14, r25	; 0x0e
    25e0:	af 87       	std	Y+15, r26	; 0x0f
    25e2:	b8 8b       	std	Y+16, r27	; 0x10
    25e4:	8e 01       	movw	r16, r28
    25e6:	07 5f       	subi	r16, 0xF7	; 247
    25e8:	1f 4f       	sbci	r17, 0xFF	; 255
    25ea:	04 c0       	rjmp	.+8      	; 0x25f4 <__divsf3+0x14e>
    25ec:	87 01       	movw	r16, r14
    25ee:	02 c0       	rjmp	.+4      	; 0x25f4 <__divsf3+0x14e>
    25f0:	0b ed       	ldi	r16, 0xDB	; 219
    25f2:	11 e0       	ldi	r17, 0x01	; 1
    25f4:	c8 01       	movw	r24, r16
    25f6:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__pack_f>
    25fa:	68 96       	adiw	r28, 0x18	; 24
    25fc:	ea e0       	ldi	r30, 0x0A	; 10
    25fe:	0c 94 1f 27 	jmp	0x4e3e	; 0x4e3e <__epilogue_restores__+0x10>

00002602 <__eqsf2>:
    2602:	a8 e1       	ldi	r26, 0x18	; 24
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	e7 e0       	ldi	r30, 0x07	; 7
    2608:	f3 e1       	ldi	r31, 0x13	; 19
    260a:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__prologue_saves__+0x18>
    260e:	69 83       	std	Y+1, r22	; 0x01
    2610:	7a 83       	std	Y+2, r23	; 0x02
    2612:	8b 83       	std	Y+3, r24	; 0x03
    2614:	9c 83       	std	Y+4, r25	; 0x04
    2616:	2d 83       	std	Y+5, r18	; 0x05
    2618:	3e 83       	std	Y+6, r19	; 0x06
    261a:	4f 83       	std	Y+7, r20	; 0x07
    261c:	58 87       	std	Y+8, r21	; 0x08
    261e:	8e 01       	movw	r16, r28
    2620:	07 5f       	subi	r16, 0xF7	; 247
    2622:	1f 4f       	sbci	r17, 0xFF	; 255
    2624:	ce 01       	movw	r24, r28
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	b8 01       	movw	r22, r16
    262a:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    262e:	81 e1       	ldi	r24, 0x11	; 17
    2630:	e8 2e       	mov	r14, r24
    2632:	f1 2c       	mov	r15, r1
    2634:	ec 0e       	add	r14, r28
    2636:	fd 1e       	adc	r15, r29
    2638:	ce 01       	movw	r24, r28
    263a:	05 96       	adiw	r24, 0x05	; 5
    263c:	b7 01       	movw	r22, r14
    263e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	82 30       	cpi	r24, 0x02	; 2
    2646:	40 f0       	brcs	.+16     	; 0x2658 <__eqsf2+0x56>
    2648:	89 89       	ldd	r24, Y+17	; 0x11
    264a:	82 30       	cpi	r24, 0x02	; 2
    264c:	28 f0       	brcs	.+10     	; 0x2658 <__eqsf2+0x56>
    264e:	c8 01       	movw	r24, r16
    2650:	b7 01       	movw	r22, r14
    2652:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <__fpcmp_parts_f>
    2656:	01 c0       	rjmp	.+2      	; 0x265a <__eqsf2+0x58>
    2658:	81 e0       	ldi	r24, 0x01	; 1
    265a:	68 96       	adiw	r28, 0x18	; 24
    265c:	e6 e0       	ldi	r30, 0x06	; 6
    265e:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__epilogue_restores__+0x18>

00002662 <__gtsf2>:
    2662:	a8 e1       	ldi	r26, 0x18	; 24
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	e7 e3       	ldi	r30, 0x37	; 55
    2668:	f3 e1       	ldi	r31, 0x13	; 19
    266a:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__prologue_saves__+0x18>
    266e:	69 83       	std	Y+1, r22	; 0x01
    2670:	7a 83       	std	Y+2, r23	; 0x02
    2672:	8b 83       	std	Y+3, r24	; 0x03
    2674:	9c 83       	std	Y+4, r25	; 0x04
    2676:	2d 83       	std	Y+5, r18	; 0x05
    2678:	3e 83       	std	Y+6, r19	; 0x06
    267a:	4f 83       	std	Y+7, r20	; 0x07
    267c:	58 87       	std	Y+8, r21	; 0x08
    267e:	8e 01       	movw	r16, r28
    2680:	07 5f       	subi	r16, 0xF7	; 247
    2682:	1f 4f       	sbci	r17, 0xFF	; 255
    2684:	ce 01       	movw	r24, r28
    2686:	01 96       	adiw	r24, 0x01	; 1
    2688:	b8 01       	movw	r22, r16
    268a:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    268e:	81 e1       	ldi	r24, 0x11	; 17
    2690:	e8 2e       	mov	r14, r24
    2692:	f1 2c       	mov	r15, r1
    2694:	ec 0e       	add	r14, r28
    2696:	fd 1e       	adc	r15, r29
    2698:	ce 01       	movw	r24, r28
    269a:	05 96       	adiw	r24, 0x05	; 5
    269c:	b7 01       	movw	r22, r14
    269e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    26a2:	89 85       	ldd	r24, Y+9	; 0x09
    26a4:	82 30       	cpi	r24, 0x02	; 2
    26a6:	40 f0       	brcs	.+16     	; 0x26b8 <__gtsf2+0x56>
    26a8:	89 89       	ldd	r24, Y+17	; 0x11
    26aa:	82 30       	cpi	r24, 0x02	; 2
    26ac:	28 f0       	brcs	.+10     	; 0x26b8 <__gtsf2+0x56>
    26ae:	c8 01       	movw	r24, r16
    26b0:	b7 01       	movw	r22, r14
    26b2:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <__fpcmp_parts_f>
    26b6:	01 c0       	rjmp	.+2      	; 0x26ba <__gtsf2+0x58>
    26b8:	8f ef       	ldi	r24, 0xFF	; 255
    26ba:	68 96       	adiw	r28, 0x18	; 24
    26bc:	e6 e0       	ldi	r30, 0x06	; 6
    26be:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__epilogue_restores__+0x18>

000026c2 <__gesf2>:
    26c2:	a8 e1       	ldi	r26, 0x18	; 24
    26c4:	b0 e0       	ldi	r27, 0x00	; 0
    26c6:	e7 e6       	ldi	r30, 0x67	; 103
    26c8:	f3 e1       	ldi	r31, 0x13	; 19
    26ca:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__prologue_saves__+0x18>
    26ce:	69 83       	std	Y+1, r22	; 0x01
    26d0:	7a 83       	std	Y+2, r23	; 0x02
    26d2:	8b 83       	std	Y+3, r24	; 0x03
    26d4:	9c 83       	std	Y+4, r25	; 0x04
    26d6:	2d 83       	std	Y+5, r18	; 0x05
    26d8:	3e 83       	std	Y+6, r19	; 0x06
    26da:	4f 83       	std	Y+7, r20	; 0x07
    26dc:	58 87       	std	Y+8, r21	; 0x08
    26de:	8e 01       	movw	r16, r28
    26e0:	07 5f       	subi	r16, 0xF7	; 247
    26e2:	1f 4f       	sbci	r17, 0xFF	; 255
    26e4:	ce 01       	movw	r24, r28
    26e6:	01 96       	adiw	r24, 0x01	; 1
    26e8:	b8 01       	movw	r22, r16
    26ea:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    26ee:	81 e1       	ldi	r24, 0x11	; 17
    26f0:	e8 2e       	mov	r14, r24
    26f2:	f1 2c       	mov	r15, r1
    26f4:	ec 0e       	add	r14, r28
    26f6:	fd 1e       	adc	r15, r29
    26f8:	ce 01       	movw	r24, r28
    26fa:	05 96       	adiw	r24, 0x05	; 5
    26fc:	b7 01       	movw	r22, r14
    26fe:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    2702:	89 85       	ldd	r24, Y+9	; 0x09
    2704:	82 30       	cpi	r24, 0x02	; 2
    2706:	40 f0       	brcs	.+16     	; 0x2718 <__gesf2+0x56>
    2708:	89 89       	ldd	r24, Y+17	; 0x11
    270a:	82 30       	cpi	r24, 0x02	; 2
    270c:	28 f0       	brcs	.+10     	; 0x2718 <__gesf2+0x56>
    270e:	c8 01       	movw	r24, r16
    2710:	b7 01       	movw	r22, r14
    2712:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <__fpcmp_parts_f>
    2716:	01 c0       	rjmp	.+2      	; 0x271a <__gesf2+0x58>
    2718:	8f ef       	ldi	r24, 0xFF	; 255
    271a:	68 96       	adiw	r28, 0x18	; 24
    271c:	e6 e0       	ldi	r30, 0x06	; 6
    271e:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__epilogue_restores__+0x18>

00002722 <__ltsf2>:
    2722:	a8 e1       	ldi	r26, 0x18	; 24
    2724:	b0 e0       	ldi	r27, 0x00	; 0
    2726:	e7 e9       	ldi	r30, 0x97	; 151
    2728:	f3 e1       	ldi	r31, 0x13	; 19
    272a:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__prologue_saves__+0x18>
    272e:	69 83       	std	Y+1, r22	; 0x01
    2730:	7a 83       	std	Y+2, r23	; 0x02
    2732:	8b 83       	std	Y+3, r24	; 0x03
    2734:	9c 83       	std	Y+4, r25	; 0x04
    2736:	2d 83       	std	Y+5, r18	; 0x05
    2738:	3e 83       	std	Y+6, r19	; 0x06
    273a:	4f 83       	std	Y+7, r20	; 0x07
    273c:	58 87       	std	Y+8, r21	; 0x08
    273e:	8e 01       	movw	r16, r28
    2740:	07 5f       	subi	r16, 0xF7	; 247
    2742:	1f 4f       	sbci	r17, 0xFF	; 255
    2744:	ce 01       	movw	r24, r28
    2746:	01 96       	adiw	r24, 0x01	; 1
    2748:	b8 01       	movw	r22, r16
    274a:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    274e:	81 e1       	ldi	r24, 0x11	; 17
    2750:	e8 2e       	mov	r14, r24
    2752:	f1 2c       	mov	r15, r1
    2754:	ec 0e       	add	r14, r28
    2756:	fd 1e       	adc	r15, r29
    2758:	ce 01       	movw	r24, r28
    275a:	05 96       	adiw	r24, 0x05	; 5
    275c:	b7 01       	movw	r22, r14
    275e:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    2762:	89 85       	ldd	r24, Y+9	; 0x09
    2764:	82 30       	cpi	r24, 0x02	; 2
    2766:	40 f0       	brcs	.+16     	; 0x2778 <__ltsf2+0x56>
    2768:	89 89       	ldd	r24, Y+17	; 0x11
    276a:	82 30       	cpi	r24, 0x02	; 2
    276c:	28 f0       	brcs	.+10     	; 0x2778 <__ltsf2+0x56>
    276e:	c8 01       	movw	r24, r16
    2770:	b7 01       	movw	r22, r14
    2772:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <__fpcmp_parts_f>
    2776:	01 c0       	rjmp	.+2      	; 0x277a <__ltsf2+0x58>
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	68 96       	adiw	r28, 0x18	; 24
    277c:	e6 e0       	ldi	r30, 0x06	; 6
    277e:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__epilogue_restores__+0x18>

00002782 <__floatsisf>:
    2782:	a8 e0       	ldi	r26, 0x08	; 8
    2784:	b0 e0       	ldi	r27, 0x00	; 0
    2786:	e7 ec       	ldi	r30, 0xC7	; 199
    2788:	f3 e1       	ldi	r31, 0x13	; 19
    278a:	0c 94 07 27 	jmp	0x4e0e	; 0x4e0e <__prologue_saves__+0x18>
    278e:	7b 01       	movw	r14, r22
    2790:	8c 01       	movw	r16, r24
    2792:	83 e0       	ldi	r24, 0x03	; 3
    2794:	89 83       	std	Y+1, r24	; 0x01
    2796:	d8 01       	movw	r26, r16
    2798:	c7 01       	movw	r24, r14
    279a:	88 27       	eor	r24, r24
    279c:	b7 fd       	sbrc	r27, 7
    279e:	83 95       	inc	r24
    27a0:	99 27       	eor	r25, r25
    27a2:	aa 27       	eor	r26, r26
    27a4:	bb 27       	eor	r27, r27
    27a6:	28 2f       	mov	r18, r24
    27a8:	8a 83       	std	Y+2, r24	; 0x02
    27aa:	e1 14       	cp	r14, r1
    27ac:	f1 04       	cpc	r15, r1
    27ae:	01 05       	cpc	r16, r1
    27b0:	11 05       	cpc	r17, r1
    27b2:	19 f4       	brne	.+6      	; 0x27ba <__floatsisf+0x38>
    27b4:	82 e0       	ldi	r24, 0x02	; 2
    27b6:	89 83       	std	Y+1, r24	; 0x01
    27b8:	37 c0       	rjmp	.+110    	; 0x2828 <__floatsisf+0xa6>
    27ba:	8e e1       	ldi	r24, 0x1E	; 30
    27bc:	90 e0       	ldi	r25, 0x00	; 0
    27be:	9c 83       	std	Y+4, r25	; 0x04
    27c0:	8b 83       	std	Y+3, r24	; 0x03
    27c2:	22 23       	and	r18, r18
    27c4:	89 f0       	breq	.+34     	; 0x27e8 <__floatsisf+0x66>
    27c6:	80 e0       	ldi	r24, 0x00	; 0
    27c8:	e8 16       	cp	r14, r24
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	f8 06       	cpc	r15, r24
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	08 07       	cpc	r16, r24
    27d2:	80 e8       	ldi	r24, 0x80	; 128
    27d4:	18 07       	cpc	r17, r24
    27d6:	69 f1       	breq	.+90     	; 0x2832 <__floatsisf+0xb0>
    27d8:	10 95       	com	r17
    27da:	00 95       	com	r16
    27dc:	f0 94       	com	r15
    27de:	e0 94       	com	r14
    27e0:	e1 1c       	adc	r14, r1
    27e2:	f1 1c       	adc	r15, r1
    27e4:	01 1d       	adc	r16, r1
    27e6:	11 1d       	adc	r17, r1
    27e8:	ed 82       	std	Y+5, r14	; 0x05
    27ea:	fe 82       	std	Y+6, r15	; 0x06
    27ec:	0f 83       	std	Y+7, r16	; 0x07
    27ee:	18 87       	std	Y+8, r17	; 0x08
    27f0:	c8 01       	movw	r24, r16
    27f2:	b7 01       	movw	r22, r14
    27f4:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__clzsi2>
    27f8:	9c 01       	movw	r18, r24
    27fa:	21 50       	subi	r18, 0x01	; 1
    27fc:	30 40       	sbci	r19, 0x00	; 0
    27fe:	12 16       	cp	r1, r18
    2800:	13 06       	cpc	r1, r19
    2802:	94 f4       	brge	.+36     	; 0x2828 <__floatsisf+0xa6>
    2804:	02 2e       	mov	r0, r18
    2806:	04 c0       	rjmp	.+8      	; 0x2810 <__floatsisf+0x8e>
    2808:	ee 0c       	add	r14, r14
    280a:	ff 1c       	adc	r15, r15
    280c:	00 1f       	adc	r16, r16
    280e:	11 1f       	adc	r17, r17
    2810:	0a 94       	dec	r0
    2812:	d2 f7       	brpl	.-12     	; 0x2808 <__floatsisf+0x86>
    2814:	ed 82       	std	Y+5, r14	; 0x05
    2816:	fe 82       	std	Y+6, r15	; 0x06
    2818:	0f 83       	std	Y+7, r16	; 0x07
    281a:	18 87       	std	Y+8, r17	; 0x08
    281c:	8e e1       	ldi	r24, 0x1E	; 30
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	82 1b       	sub	r24, r18
    2822:	93 0b       	sbc	r25, r19
    2824:	9c 83       	std	Y+4, r25	; 0x04
    2826:	8b 83       	std	Y+3, r24	; 0x03
    2828:	ce 01       	movw	r24, r28
    282a:	01 96       	adiw	r24, 0x01	; 1
    282c:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__pack_f>
    2830:	04 c0       	rjmp	.+8      	; 0x283a <__floatsisf+0xb8>
    2832:	60 e0       	ldi	r22, 0x00	; 0
    2834:	70 e0       	ldi	r23, 0x00	; 0
    2836:	80 e0       	ldi	r24, 0x00	; 0
    2838:	9f ec       	ldi	r25, 0xCF	; 207
    283a:	28 96       	adiw	r28, 0x08	; 8
    283c:	e6 e0       	ldi	r30, 0x06	; 6
    283e:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__epilogue_restores__+0x18>

00002842 <__fixsfsi>:
    2842:	ac e0       	ldi	r26, 0x0C	; 12
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	e7 e2       	ldi	r30, 0x27	; 39
    2848:	f4 e1       	ldi	r31, 0x14	; 20
    284a:	0c 94 0b 27 	jmp	0x4e16	; 0x4e16 <__prologue_saves__+0x20>
    284e:	69 83       	std	Y+1, r22	; 0x01
    2850:	7a 83       	std	Y+2, r23	; 0x02
    2852:	8b 83       	std	Y+3, r24	; 0x03
    2854:	9c 83       	std	Y+4, r25	; 0x04
    2856:	ce 01       	movw	r24, r28
    2858:	01 96       	adiw	r24, 0x01	; 1
    285a:	be 01       	movw	r22, r28
    285c:	6b 5f       	subi	r22, 0xFB	; 251
    285e:	7f 4f       	sbci	r23, 0xFF	; 255
    2860:	0e 94 13 16 	call	0x2c26	; 0x2c26 <__unpack_f>
    2864:	8d 81       	ldd	r24, Y+5	; 0x05
    2866:	82 30       	cpi	r24, 0x02	; 2
    2868:	81 f1       	breq	.+96     	; 0x28ca <__fixsfsi+0x88>
    286a:	82 30       	cpi	r24, 0x02	; 2
    286c:	70 f1       	brcs	.+92     	; 0x28ca <__fixsfsi+0x88>
    286e:	84 30       	cpi	r24, 0x04	; 4
    2870:	21 f4       	brne	.+8      	; 0x287a <__fixsfsi+0x38>
    2872:	8e 81       	ldd	r24, Y+6	; 0x06
    2874:	88 23       	and	r24, r24
    2876:	69 f1       	breq	.+90     	; 0x28d2 <__fixsfsi+0x90>
    2878:	0a c0       	rjmp	.+20     	; 0x288e <__fixsfsi+0x4c>
    287a:	2f 81       	ldd	r18, Y+7	; 0x07
    287c:	38 85       	ldd	r19, Y+8	; 0x08
    287e:	37 fd       	sbrc	r19, 7
    2880:	24 c0       	rjmp	.+72     	; 0x28ca <__fixsfsi+0x88>
    2882:	6e 81       	ldd	r22, Y+6	; 0x06
    2884:	2f 31       	cpi	r18, 0x1F	; 31
    2886:	31 05       	cpc	r19, r1
    2888:	3c f0       	brlt	.+14     	; 0x2898 <__fixsfsi+0x56>
    288a:	66 23       	and	r22, r22
    288c:	11 f1       	breq	.+68     	; 0x28d2 <__fixsfsi+0x90>
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	40 e0       	ldi	r20, 0x00	; 0
    2894:	50 e8       	ldi	r21, 0x80	; 128
    2896:	21 c0       	rjmp	.+66     	; 0x28da <__fixsfsi+0x98>
    2898:	8e e1       	ldi	r24, 0x1E	; 30
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	82 1b       	sub	r24, r18
    289e:	93 0b       	sbc	r25, r19
    28a0:	29 85       	ldd	r18, Y+9	; 0x09
    28a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    28a4:	4b 85       	ldd	r20, Y+11	; 0x0b
    28a6:	5c 85       	ldd	r21, Y+12	; 0x0c
    28a8:	04 c0       	rjmp	.+8      	; 0x28b2 <__fixsfsi+0x70>
    28aa:	56 95       	lsr	r21
    28ac:	47 95       	ror	r20
    28ae:	37 95       	ror	r19
    28b0:	27 95       	ror	r18
    28b2:	8a 95       	dec	r24
    28b4:	d2 f7       	brpl	.-12     	; 0x28aa <__fixsfsi+0x68>
    28b6:	66 23       	and	r22, r22
    28b8:	81 f0       	breq	.+32     	; 0x28da <__fixsfsi+0x98>
    28ba:	50 95       	com	r21
    28bc:	40 95       	com	r20
    28be:	30 95       	com	r19
    28c0:	21 95       	neg	r18
    28c2:	3f 4f       	sbci	r19, 0xFF	; 255
    28c4:	4f 4f       	sbci	r20, 0xFF	; 255
    28c6:	5f 4f       	sbci	r21, 0xFF	; 255
    28c8:	08 c0       	rjmp	.+16     	; 0x28da <__fixsfsi+0x98>
    28ca:	20 e0       	ldi	r18, 0x00	; 0
    28cc:	30 e0       	ldi	r19, 0x00	; 0
    28ce:	a9 01       	movw	r20, r18
    28d0:	04 c0       	rjmp	.+8      	; 0x28da <__fixsfsi+0x98>
    28d2:	2f ef       	ldi	r18, 0xFF	; 255
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f ef       	ldi	r20, 0xFF	; 255
    28d8:	5f e7       	ldi	r21, 0x7F	; 127
    28da:	b9 01       	movw	r22, r18
    28dc:	ca 01       	movw	r24, r20
    28de:	2c 96       	adiw	r28, 0x0c	; 12
    28e0:	e2 e0       	ldi	r30, 0x02	; 2
    28e2:	0c 94 27 27 	jmp	0x4e4e	; 0x4e4e <__epilogue_restores__+0x20>

000028e6 <__floatunsisf>:
    28e6:	a8 e0       	ldi	r26, 0x08	; 8
    28e8:	b0 e0       	ldi	r27, 0x00	; 0
    28ea:	e9 e7       	ldi	r30, 0x79	; 121
    28ec:	f4 e1       	ldi	r31, 0x14	; 20
    28ee:	0c 94 05 27 	jmp	0x4e0a	; 0x4e0a <__prologue_saves__+0x14>
    28f2:	7b 01       	movw	r14, r22
    28f4:	8c 01       	movw	r16, r24
    28f6:	1a 82       	std	Y+2, r1	; 0x02
    28f8:	61 15       	cp	r22, r1
    28fa:	71 05       	cpc	r23, r1
    28fc:	81 05       	cpc	r24, r1
    28fe:	91 05       	cpc	r25, r1
    2900:	19 f4       	brne	.+6      	; 0x2908 <__floatunsisf+0x22>
    2902:	82 e0       	ldi	r24, 0x02	; 2
    2904:	89 83       	std	Y+1, r24	; 0x01
    2906:	5f c0       	rjmp	.+190    	; 0x29c6 <__floatunsisf+0xe0>
    2908:	83 e0       	ldi	r24, 0x03	; 3
    290a:	89 83       	std	Y+1, r24	; 0x01
    290c:	8e e1       	ldi	r24, 0x1E	; 30
    290e:	c8 2e       	mov	r12, r24
    2910:	d1 2c       	mov	r13, r1
    2912:	dc 82       	std	Y+4, r13	; 0x04
    2914:	cb 82       	std	Y+3, r12	; 0x03
    2916:	ed 82       	std	Y+5, r14	; 0x05
    2918:	fe 82       	std	Y+6, r15	; 0x06
    291a:	0f 83       	std	Y+7, r16	; 0x07
    291c:	18 87       	std	Y+8, r17	; 0x08
    291e:	c8 01       	movw	r24, r16
    2920:	b7 01       	movw	r22, r14
    2922:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__clzsi2>
    2926:	fc 01       	movw	r30, r24
    2928:	31 97       	sbiw	r30, 0x01	; 1
    292a:	f7 ff       	sbrs	r31, 7
    292c:	3a c0       	rjmp	.+116    	; 0x29a2 <__floatunsisf+0xbc>
    292e:	aa 27       	eor	r26, r26
    2930:	bb 27       	eor	r27, r27
    2932:	ae 1b       	sub	r26, r30
    2934:	bf 0b       	sbc	r27, r31
    2936:	21 e0       	ldi	r18, 0x01	; 1
    2938:	30 e0       	ldi	r19, 0x00	; 0
    293a:	40 e0       	ldi	r20, 0x00	; 0
    293c:	50 e0       	ldi	r21, 0x00	; 0
    293e:	0a 2e       	mov	r0, r26
    2940:	04 c0       	rjmp	.+8      	; 0x294a <__floatunsisf+0x64>
    2942:	22 0f       	add	r18, r18
    2944:	33 1f       	adc	r19, r19
    2946:	44 1f       	adc	r20, r20
    2948:	55 1f       	adc	r21, r21
    294a:	0a 94       	dec	r0
    294c:	d2 f7       	brpl	.-12     	; 0x2942 <__floatunsisf+0x5c>
    294e:	21 50       	subi	r18, 0x01	; 1
    2950:	30 40       	sbci	r19, 0x00	; 0
    2952:	40 40       	sbci	r20, 0x00	; 0
    2954:	50 40       	sbci	r21, 0x00	; 0
    2956:	2e 21       	and	r18, r14
    2958:	3f 21       	and	r19, r15
    295a:	40 23       	and	r20, r16
    295c:	51 23       	and	r21, r17
    295e:	61 e0       	ldi	r22, 0x01	; 1
    2960:	70 e0       	ldi	r23, 0x00	; 0
    2962:	80 e0       	ldi	r24, 0x00	; 0
    2964:	90 e0       	ldi	r25, 0x00	; 0
    2966:	21 15       	cp	r18, r1
    2968:	31 05       	cpc	r19, r1
    296a:	41 05       	cpc	r20, r1
    296c:	51 05       	cpc	r21, r1
    296e:	19 f4       	brne	.+6      	; 0x2976 <__floatunsisf+0x90>
    2970:	60 e0       	ldi	r22, 0x00	; 0
    2972:	70 e0       	ldi	r23, 0x00	; 0
    2974:	cb 01       	movw	r24, r22
    2976:	04 c0       	rjmp	.+8      	; 0x2980 <__floatunsisf+0x9a>
    2978:	16 95       	lsr	r17
    297a:	07 95       	ror	r16
    297c:	f7 94       	ror	r15
    297e:	e7 94       	ror	r14
    2980:	aa 95       	dec	r26
    2982:	d2 f7       	brpl	.-12     	; 0x2978 <__floatunsisf+0x92>
    2984:	e6 2a       	or	r14, r22
    2986:	f7 2a       	or	r15, r23
    2988:	08 2b       	or	r16, r24
    298a:	19 2b       	or	r17, r25
    298c:	ed 82       	std	Y+5, r14	; 0x05
    298e:	fe 82       	std	Y+6, r15	; 0x06
    2990:	0f 83       	std	Y+7, r16	; 0x07
    2992:	18 87       	std	Y+8, r17	; 0x08
    2994:	8e e1       	ldi	r24, 0x1E	; 30
    2996:	90 e0       	ldi	r25, 0x00	; 0
    2998:	8e 1b       	sub	r24, r30
    299a:	9f 0b       	sbc	r25, r31
    299c:	9c 83       	std	Y+4, r25	; 0x04
    299e:	8b 83       	std	Y+3, r24	; 0x03
    29a0:	12 c0       	rjmp	.+36     	; 0x29c6 <__floatunsisf+0xe0>
    29a2:	30 97       	sbiw	r30, 0x00	; 0
    29a4:	81 f0       	breq	.+32     	; 0x29c6 <__floatunsisf+0xe0>
    29a6:	0e 2e       	mov	r0, r30
    29a8:	04 c0       	rjmp	.+8      	; 0x29b2 <__floatunsisf+0xcc>
    29aa:	ee 0c       	add	r14, r14
    29ac:	ff 1c       	adc	r15, r15
    29ae:	00 1f       	adc	r16, r16
    29b0:	11 1f       	adc	r17, r17
    29b2:	0a 94       	dec	r0
    29b4:	d2 f7       	brpl	.-12     	; 0x29aa <__floatunsisf+0xc4>
    29b6:	ed 82       	std	Y+5, r14	; 0x05
    29b8:	fe 82       	std	Y+6, r15	; 0x06
    29ba:	0f 83       	std	Y+7, r16	; 0x07
    29bc:	18 87       	std	Y+8, r17	; 0x08
    29be:	ce 1a       	sub	r12, r30
    29c0:	df 0a       	sbc	r13, r31
    29c2:	dc 82       	std	Y+4, r13	; 0x04
    29c4:	cb 82       	std	Y+3, r12	; 0x03
    29c6:	ce 01       	movw	r24, r28
    29c8:	01 96       	adiw	r24, 0x01	; 1
    29ca:	0e 94 45 15 	call	0x2a8a	; 0x2a8a <__pack_f>
    29ce:	28 96       	adiw	r28, 0x08	; 8
    29d0:	e8 e0       	ldi	r30, 0x08	; 8
    29d2:	0c 94 21 27 	jmp	0x4e42	; 0x4e42 <__epilogue_restores__+0x14>

000029d6 <__clzsi2>:
    29d6:	af 92       	push	r10
    29d8:	bf 92       	push	r11
    29da:	cf 92       	push	r12
    29dc:	df 92       	push	r13
    29de:	ef 92       	push	r14
    29e0:	ff 92       	push	r15
    29e2:	0f 93       	push	r16
    29e4:	1f 93       	push	r17
    29e6:	7b 01       	movw	r14, r22
    29e8:	8c 01       	movw	r16, r24
    29ea:	80 e0       	ldi	r24, 0x00	; 0
    29ec:	e8 16       	cp	r14, r24
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	f8 06       	cpc	r15, r24
    29f2:	81 e0       	ldi	r24, 0x01	; 1
    29f4:	08 07       	cpc	r16, r24
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	18 07       	cpc	r17, r24
    29fa:	58 f4       	brcc	.+22     	; 0x2a12 <__clzsi2+0x3c>
    29fc:	ef ef       	ldi	r30, 0xFF	; 255
    29fe:	ee 16       	cp	r14, r30
    2a00:	f1 04       	cpc	r15, r1
    2a02:	01 05       	cpc	r16, r1
    2a04:	11 05       	cpc	r17, r1
    2a06:	09 f0       	breq	.+2      	; 0x2a0a <__clzsi2+0x34>
    2a08:	90 f4       	brcc	.+36     	; 0x2a2e <__clzsi2+0x58>
    2a0a:	80 e0       	ldi	r24, 0x00	; 0
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	dc 01       	movw	r26, r24
    2a10:	17 c0       	rjmp	.+46     	; 0x2a40 <__clzsi2+0x6a>
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	ef 16       	cp	r14, r31
    2a16:	f0 e0       	ldi	r31, 0x00	; 0
    2a18:	ff 06       	cpc	r15, r31
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	0f 07       	cpc	r16, r31
    2a1e:	f1 e0       	ldi	r31, 0x01	; 1
    2a20:	1f 07       	cpc	r17, r31
    2a22:	50 f4       	brcc	.+20     	; 0x2a38 <__clzsi2+0x62>
    2a24:	80 e1       	ldi	r24, 0x10	; 16
    2a26:	90 e0       	ldi	r25, 0x00	; 0
    2a28:	a0 e0       	ldi	r26, 0x00	; 0
    2a2a:	b0 e0       	ldi	r27, 0x00	; 0
    2a2c:	09 c0       	rjmp	.+18     	; 0x2a40 <__clzsi2+0x6a>
    2a2e:	88 e0       	ldi	r24, 0x08	; 8
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	a0 e0       	ldi	r26, 0x00	; 0
    2a34:	b0 e0       	ldi	r27, 0x00	; 0
    2a36:	04 c0       	rjmp	.+8      	; 0x2a40 <__clzsi2+0x6a>
    2a38:	88 e1       	ldi	r24, 0x18	; 24
    2a3a:	90 e0       	ldi	r25, 0x00	; 0
    2a3c:	a0 e0       	ldi	r26, 0x00	; 0
    2a3e:	b0 e0       	ldi	r27, 0x00	; 0
    2a40:	20 e2       	ldi	r18, 0x20	; 32
    2a42:	30 e0       	ldi	r19, 0x00	; 0
    2a44:	40 e0       	ldi	r20, 0x00	; 0
    2a46:	50 e0       	ldi	r21, 0x00	; 0
    2a48:	28 1b       	sub	r18, r24
    2a4a:	39 0b       	sbc	r19, r25
    2a4c:	4a 0b       	sbc	r20, r26
    2a4e:	5b 0b       	sbc	r21, r27
    2a50:	57 01       	movw	r10, r14
    2a52:	68 01       	movw	r12, r16
    2a54:	04 c0       	rjmp	.+8      	; 0x2a5e <__clzsi2+0x88>
    2a56:	d6 94       	lsr	r13
    2a58:	c7 94       	ror	r12
    2a5a:	b7 94       	ror	r11
    2a5c:	a7 94       	ror	r10
    2a5e:	8a 95       	dec	r24
    2a60:	d2 f7       	brpl	.-12     	; 0x2a56 <__clzsi2+0x80>
    2a62:	d6 01       	movw	r26, r12
    2a64:	c5 01       	movw	r24, r10
    2a66:	8d 51       	subi	r24, 0x1D	; 29
    2a68:	9e 4f       	sbci	r25, 0xFE	; 254
    2a6a:	fc 01       	movw	r30, r24
    2a6c:	80 81       	ld	r24, Z
    2a6e:	28 1b       	sub	r18, r24
    2a70:	31 09       	sbc	r19, r1
    2a72:	41 09       	sbc	r20, r1
    2a74:	51 09       	sbc	r21, r1
    2a76:	c9 01       	movw	r24, r18
    2a78:	1f 91       	pop	r17
    2a7a:	0f 91       	pop	r16
    2a7c:	ff 90       	pop	r15
    2a7e:	ef 90       	pop	r14
    2a80:	df 90       	pop	r13
    2a82:	cf 90       	pop	r12
    2a84:	bf 90       	pop	r11
    2a86:	af 90       	pop	r10
    2a88:	08 95       	ret

00002a8a <__pack_f>:
    2a8a:	ef 92       	push	r14
    2a8c:	ff 92       	push	r15
    2a8e:	0f 93       	push	r16
    2a90:	1f 93       	push	r17
    2a92:	cf 93       	push	r28
    2a94:	df 93       	push	r29
    2a96:	fc 01       	movw	r30, r24
    2a98:	24 81       	ldd	r18, Z+4	; 0x04
    2a9a:	35 81       	ldd	r19, Z+5	; 0x05
    2a9c:	46 81       	ldd	r20, Z+6	; 0x06
    2a9e:	57 81       	ldd	r21, Z+7	; 0x07
    2aa0:	61 81       	ldd	r22, Z+1	; 0x01
    2aa2:	80 81       	ld	r24, Z
    2aa4:	82 30       	cpi	r24, 0x02	; 2
    2aa6:	20 f4       	brcc	.+8      	; 0x2ab0 <__pack_f+0x26>
    2aa8:	40 61       	ori	r20, 0x10	; 16
    2aaa:	ef ef       	ldi	r30, 0xFF	; 255
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	a3 c0       	rjmp	.+326    	; 0x2bf6 <__pack_f+0x16c>
    2ab0:	84 30       	cpi	r24, 0x04	; 4
    2ab2:	09 f4       	brne	.+2      	; 0x2ab6 <__pack_f+0x2c>
    2ab4:	9b c0       	rjmp	.+310    	; 0x2bec <__pack_f+0x162>
    2ab6:	82 30       	cpi	r24, 0x02	; 2
    2ab8:	09 f4       	brne	.+2      	; 0x2abc <__pack_f+0x32>
    2aba:	92 c0       	rjmp	.+292    	; 0x2be0 <__pack_f+0x156>
    2abc:	21 15       	cp	r18, r1
    2abe:	31 05       	cpc	r19, r1
    2ac0:	41 05       	cpc	r20, r1
    2ac2:	51 05       	cpc	r21, r1
    2ac4:	09 f4       	brne	.+2      	; 0x2ac8 <__pack_f+0x3e>
    2ac6:	8f c0       	rjmp	.+286    	; 0x2be6 <__pack_f+0x15c>
    2ac8:	02 80       	ldd	r0, Z+2	; 0x02
    2aca:	f3 81       	ldd	r31, Z+3	; 0x03
    2acc:	e0 2d       	mov	r30, r0
    2ace:	8f ef       	ldi	r24, 0xFF	; 255
    2ad0:	e2 38       	cpi	r30, 0x82	; 130
    2ad2:	f8 07       	cpc	r31, r24
    2ad4:	0c f0       	brlt	.+2      	; 0x2ad8 <__pack_f+0x4e>
    2ad6:	5a c0       	rjmp	.+180    	; 0x2b8c <__pack_f+0x102>
    2ad8:	c2 e8       	ldi	r28, 0x82	; 130
    2ada:	df ef       	ldi	r29, 0xFF	; 255
    2adc:	ce 1b       	sub	r28, r30
    2ade:	df 0b       	sbc	r29, r31
    2ae0:	ca 31       	cpi	r28, 0x1A	; 26
    2ae2:	d1 05       	cpc	r29, r1
    2ae4:	6c f5       	brge	.+90     	; 0x2b40 <__pack_f+0xb6>
    2ae6:	79 01       	movw	r14, r18
    2ae8:	8a 01       	movw	r16, r20
    2aea:	0c 2e       	mov	r0, r28
    2aec:	04 c0       	rjmp	.+8      	; 0x2af6 <__pack_f+0x6c>
    2aee:	16 95       	lsr	r17
    2af0:	07 95       	ror	r16
    2af2:	f7 94       	ror	r15
    2af4:	e7 94       	ror	r14
    2af6:	0a 94       	dec	r0
    2af8:	d2 f7       	brpl	.-12     	; 0x2aee <__pack_f+0x64>
    2afa:	81 e0       	ldi	r24, 0x01	; 1
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	a0 e0       	ldi	r26, 0x00	; 0
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	0c 2e       	mov	r0, r28
    2b04:	04 c0       	rjmp	.+8      	; 0x2b0e <__pack_f+0x84>
    2b06:	88 0f       	add	r24, r24
    2b08:	99 1f       	adc	r25, r25
    2b0a:	aa 1f       	adc	r26, r26
    2b0c:	bb 1f       	adc	r27, r27
    2b0e:	0a 94       	dec	r0
    2b10:	d2 f7       	brpl	.-12     	; 0x2b06 <__pack_f+0x7c>
    2b12:	01 97       	sbiw	r24, 0x01	; 1
    2b14:	a1 09       	sbc	r26, r1
    2b16:	b1 09       	sbc	r27, r1
    2b18:	82 23       	and	r24, r18
    2b1a:	93 23       	and	r25, r19
    2b1c:	a4 23       	and	r26, r20
    2b1e:	b5 23       	and	r27, r21
    2b20:	21 e0       	ldi	r18, 0x01	; 1
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	40 e0       	ldi	r20, 0x00	; 0
    2b26:	50 e0       	ldi	r21, 0x00	; 0
    2b28:	00 97       	sbiw	r24, 0x00	; 0
    2b2a:	a1 05       	cpc	r26, r1
    2b2c:	b1 05       	cpc	r27, r1
    2b2e:	19 f4       	brne	.+6      	; 0x2b36 <__pack_f+0xac>
    2b30:	20 e0       	ldi	r18, 0x00	; 0
    2b32:	30 e0       	ldi	r19, 0x00	; 0
    2b34:	a9 01       	movw	r20, r18
    2b36:	2e 29       	or	r18, r14
    2b38:	3f 29       	or	r19, r15
    2b3a:	40 2b       	or	r20, r16
    2b3c:	51 2b       	or	r21, r17
    2b3e:	03 c0       	rjmp	.+6      	; 0x2b46 <__pack_f+0xbc>
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	a9 01       	movw	r20, r18
    2b46:	da 01       	movw	r26, r20
    2b48:	c9 01       	movw	r24, r18
    2b4a:	8f 77       	andi	r24, 0x7F	; 127
    2b4c:	90 70       	andi	r25, 0x00	; 0
    2b4e:	a0 70       	andi	r26, 0x00	; 0
    2b50:	b0 70       	andi	r27, 0x00	; 0
    2b52:	80 34       	cpi	r24, 0x40	; 64
    2b54:	91 05       	cpc	r25, r1
    2b56:	a1 05       	cpc	r26, r1
    2b58:	b1 05       	cpc	r27, r1
    2b5a:	39 f4       	brne	.+14     	; 0x2b6a <__pack_f+0xe0>
    2b5c:	27 ff       	sbrs	r18, 7
    2b5e:	09 c0       	rjmp	.+18     	; 0x2b72 <__pack_f+0xe8>
    2b60:	20 5c       	subi	r18, 0xC0	; 192
    2b62:	3f 4f       	sbci	r19, 0xFF	; 255
    2b64:	4f 4f       	sbci	r20, 0xFF	; 255
    2b66:	5f 4f       	sbci	r21, 0xFF	; 255
    2b68:	04 c0       	rjmp	.+8      	; 0x2b72 <__pack_f+0xe8>
    2b6a:	21 5c       	subi	r18, 0xC1	; 193
    2b6c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b6e:	4f 4f       	sbci	r20, 0xFF	; 255
    2b70:	5f 4f       	sbci	r21, 0xFF	; 255
    2b72:	e1 e0       	ldi	r30, 0x01	; 1
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	20 30       	cpi	r18, 0x00	; 0
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	38 07       	cpc	r19, r24
    2b7c:	80 e0       	ldi	r24, 0x00	; 0
    2b7e:	48 07       	cpc	r20, r24
    2b80:	80 e4       	ldi	r24, 0x40	; 64
    2b82:	58 07       	cpc	r21, r24
    2b84:	28 f5       	brcc	.+74     	; 0x2bd0 <__pack_f+0x146>
    2b86:	e0 e0       	ldi	r30, 0x00	; 0
    2b88:	f0 e0       	ldi	r31, 0x00	; 0
    2b8a:	22 c0       	rjmp	.+68     	; 0x2bd0 <__pack_f+0x146>
    2b8c:	e0 38       	cpi	r30, 0x80	; 128
    2b8e:	f1 05       	cpc	r31, r1
    2b90:	6c f5       	brge	.+90     	; 0x2bec <__pack_f+0x162>
    2b92:	e1 58       	subi	r30, 0x81	; 129
    2b94:	ff 4f       	sbci	r31, 0xFF	; 255
    2b96:	da 01       	movw	r26, r20
    2b98:	c9 01       	movw	r24, r18
    2b9a:	8f 77       	andi	r24, 0x7F	; 127
    2b9c:	90 70       	andi	r25, 0x00	; 0
    2b9e:	a0 70       	andi	r26, 0x00	; 0
    2ba0:	b0 70       	andi	r27, 0x00	; 0
    2ba2:	80 34       	cpi	r24, 0x40	; 64
    2ba4:	91 05       	cpc	r25, r1
    2ba6:	a1 05       	cpc	r26, r1
    2ba8:	b1 05       	cpc	r27, r1
    2baa:	39 f4       	brne	.+14     	; 0x2bba <__pack_f+0x130>
    2bac:	27 ff       	sbrs	r18, 7
    2bae:	09 c0       	rjmp	.+18     	; 0x2bc2 <__pack_f+0x138>
    2bb0:	20 5c       	subi	r18, 0xC0	; 192
    2bb2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bb4:	4f 4f       	sbci	r20, 0xFF	; 255
    2bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    2bb8:	04 c0       	rjmp	.+8      	; 0x2bc2 <__pack_f+0x138>
    2bba:	21 5c       	subi	r18, 0xC1	; 193
    2bbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2bbe:	4f 4f       	sbci	r20, 0xFF	; 255
    2bc0:	5f 4f       	sbci	r21, 0xFF	; 255
    2bc2:	57 ff       	sbrs	r21, 7
    2bc4:	05 c0       	rjmp	.+10     	; 0x2bd0 <__pack_f+0x146>
    2bc6:	56 95       	lsr	r21
    2bc8:	47 95       	ror	r20
    2bca:	37 95       	ror	r19
    2bcc:	27 95       	ror	r18
    2bce:	31 96       	adiw	r30, 0x01	; 1
    2bd0:	87 e0       	ldi	r24, 0x07	; 7
    2bd2:	56 95       	lsr	r21
    2bd4:	47 95       	ror	r20
    2bd6:	37 95       	ror	r19
    2bd8:	27 95       	ror	r18
    2bda:	8a 95       	dec	r24
    2bdc:	d1 f7       	brne	.-12     	; 0x2bd2 <__pack_f+0x148>
    2bde:	0b c0       	rjmp	.+22     	; 0x2bf6 <__pack_f+0x16c>
    2be0:	e0 e0       	ldi	r30, 0x00	; 0
    2be2:	f0 e0       	ldi	r31, 0x00	; 0
    2be4:	05 c0       	rjmp	.+10     	; 0x2bf0 <__pack_f+0x166>
    2be6:	e0 e0       	ldi	r30, 0x00	; 0
    2be8:	f0 e0       	ldi	r31, 0x00	; 0
    2bea:	05 c0       	rjmp	.+10     	; 0x2bf6 <__pack_f+0x16c>
    2bec:	ef ef       	ldi	r30, 0xFF	; 255
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	20 e0       	ldi	r18, 0x00	; 0
    2bf2:	30 e0       	ldi	r19, 0x00	; 0
    2bf4:	a9 01       	movw	r20, r18
    2bf6:	8e 2f       	mov	r24, r30
    2bf8:	87 95       	ror	r24
    2bfa:	88 27       	eor	r24, r24
    2bfc:	87 95       	ror	r24
    2bfe:	94 2f       	mov	r25, r20
    2c00:	9f 77       	andi	r25, 0x7F	; 127
    2c02:	67 95       	ror	r22
    2c04:	66 27       	eor	r22, r22
    2c06:	67 95       	ror	r22
    2c08:	e6 95       	lsr	r30
    2c0a:	e2 2e       	mov	r14, r18
    2c0c:	a9 2f       	mov	r26, r25
    2c0e:	a8 2b       	or	r26, r24
    2c10:	fe 2f       	mov	r31, r30
    2c12:	f6 2b       	or	r31, r22
    2c14:	62 2f       	mov	r22, r18
    2c16:	73 2f       	mov	r23, r19
    2c18:	8a 2f       	mov	r24, r26
    2c1a:	9f 2f       	mov	r25, r31
    2c1c:	cd b7       	in	r28, 0x3d	; 61
    2c1e:	de b7       	in	r29, 0x3e	; 62
    2c20:	e6 e0       	ldi	r30, 0x06	; 6
    2c22:	0c 94 23 27 	jmp	0x4e46	; 0x4e46 <__epilogue_restores__+0x18>

00002c26 <__unpack_f>:
    2c26:	dc 01       	movw	r26, r24
    2c28:	fb 01       	movw	r30, r22
    2c2a:	2c 91       	ld	r18, X
    2c2c:	11 96       	adiw	r26, 0x01	; 1
    2c2e:	3c 91       	ld	r19, X
    2c30:	11 97       	sbiw	r26, 0x01	; 1
    2c32:	12 96       	adiw	r26, 0x02	; 2
    2c34:	8c 91       	ld	r24, X
    2c36:	12 97       	sbiw	r26, 0x02	; 2
    2c38:	48 2f       	mov	r20, r24
    2c3a:	4f 77       	andi	r20, 0x7F	; 127
    2c3c:	50 e0       	ldi	r21, 0x00	; 0
    2c3e:	98 2f       	mov	r25, r24
    2c40:	99 1f       	adc	r25, r25
    2c42:	99 27       	eor	r25, r25
    2c44:	99 1f       	adc	r25, r25
    2c46:	13 96       	adiw	r26, 0x03	; 3
    2c48:	6c 91       	ld	r22, X
    2c4a:	13 97       	sbiw	r26, 0x03	; 3
    2c4c:	86 2f       	mov	r24, r22
    2c4e:	88 0f       	add	r24, r24
    2c50:	89 2b       	or	r24, r25
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	66 1f       	adc	r22, r22
    2c56:	66 27       	eor	r22, r22
    2c58:	66 1f       	adc	r22, r22
    2c5a:	61 83       	std	Z+1, r22	; 0x01
    2c5c:	00 97       	sbiw	r24, 0x00	; 0
    2c5e:	39 f5       	brne	.+78     	; 0x2cae <__unpack_f+0x88>
    2c60:	21 15       	cp	r18, r1
    2c62:	31 05       	cpc	r19, r1
    2c64:	41 05       	cpc	r20, r1
    2c66:	51 05       	cpc	r21, r1
    2c68:	11 f4       	brne	.+4      	; 0x2c6e <__unpack_f+0x48>
    2c6a:	82 e0       	ldi	r24, 0x02	; 2
    2c6c:	29 c0       	rjmp	.+82     	; 0x2cc0 <__unpack_f+0x9a>
    2c6e:	82 e8       	ldi	r24, 0x82	; 130
    2c70:	9f ef       	ldi	r25, 0xFF	; 255
    2c72:	93 83       	std	Z+3, r25	; 0x03
    2c74:	82 83       	std	Z+2, r24	; 0x02
    2c76:	67 e0       	ldi	r22, 0x07	; 7
    2c78:	22 0f       	add	r18, r18
    2c7a:	33 1f       	adc	r19, r19
    2c7c:	44 1f       	adc	r20, r20
    2c7e:	55 1f       	adc	r21, r21
    2c80:	6a 95       	dec	r22
    2c82:	d1 f7       	brne	.-12     	; 0x2c78 <__unpack_f+0x52>
    2c84:	83 e0       	ldi	r24, 0x03	; 3
    2c86:	80 83       	st	Z, r24
    2c88:	09 c0       	rjmp	.+18     	; 0x2c9c <__unpack_f+0x76>
    2c8a:	22 0f       	add	r18, r18
    2c8c:	33 1f       	adc	r19, r19
    2c8e:	44 1f       	adc	r20, r20
    2c90:	55 1f       	adc	r21, r21
    2c92:	82 81       	ldd	r24, Z+2	; 0x02
    2c94:	93 81       	ldd	r25, Z+3	; 0x03
    2c96:	01 97       	sbiw	r24, 0x01	; 1
    2c98:	93 83       	std	Z+3, r25	; 0x03
    2c9a:	82 83       	std	Z+2, r24	; 0x02
    2c9c:	20 30       	cpi	r18, 0x00	; 0
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	38 07       	cpc	r19, r24
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	48 07       	cpc	r20, r24
    2ca6:	80 e4       	ldi	r24, 0x40	; 64
    2ca8:	58 07       	cpc	r21, r24
    2caa:	78 f3       	brcs	.-34     	; 0x2c8a <__unpack_f+0x64>
    2cac:	20 c0       	rjmp	.+64     	; 0x2cee <__unpack_f+0xc8>
    2cae:	8f 3f       	cpi	r24, 0xFF	; 255
    2cb0:	91 05       	cpc	r25, r1
    2cb2:	79 f4       	brne	.+30     	; 0x2cd2 <__unpack_f+0xac>
    2cb4:	21 15       	cp	r18, r1
    2cb6:	31 05       	cpc	r19, r1
    2cb8:	41 05       	cpc	r20, r1
    2cba:	51 05       	cpc	r21, r1
    2cbc:	19 f4       	brne	.+6      	; 0x2cc4 <__unpack_f+0x9e>
    2cbe:	84 e0       	ldi	r24, 0x04	; 4
    2cc0:	80 83       	st	Z, r24
    2cc2:	08 95       	ret
    2cc4:	44 ff       	sbrs	r20, 4
    2cc6:	03 c0       	rjmp	.+6      	; 0x2cce <__unpack_f+0xa8>
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	80 83       	st	Z, r24
    2ccc:	10 c0       	rjmp	.+32     	; 0x2cee <__unpack_f+0xc8>
    2cce:	10 82       	st	Z, r1
    2cd0:	0e c0       	rjmp	.+28     	; 0x2cee <__unpack_f+0xc8>
    2cd2:	8f 57       	subi	r24, 0x7F	; 127
    2cd4:	90 40       	sbci	r25, 0x00	; 0
    2cd6:	93 83       	std	Z+3, r25	; 0x03
    2cd8:	82 83       	std	Z+2, r24	; 0x02
    2cda:	83 e0       	ldi	r24, 0x03	; 3
    2cdc:	80 83       	st	Z, r24
    2cde:	87 e0       	ldi	r24, 0x07	; 7
    2ce0:	22 0f       	add	r18, r18
    2ce2:	33 1f       	adc	r19, r19
    2ce4:	44 1f       	adc	r20, r20
    2ce6:	55 1f       	adc	r21, r21
    2ce8:	8a 95       	dec	r24
    2cea:	d1 f7       	brne	.-12     	; 0x2ce0 <__unpack_f+0xba>
    2cec:	50 64       	ori	r21, 0x40	; 64
    2cee:	24 83       	std	Z+4, r18	; 0x04
    2cf0:	35 83       	std	Z+5, r19	; 0x05
    2cf2:	46 83       	std	Z+6, r20	; 0x06
    2cf4:	57 83       	std	Z+7, r21	; 0x07
    2cf6:	08 95       	ret

00002cf8 <__fpcmp_parts_f>:
    2cf8:	fc 01       	movw	r30, r24
    2cfa:	db 01       	movw	r26, r22
    2cfc:	90 81       	ld	r25, Z
    2cfe:	92 30       	cpi	r25, 0x02	; 2
    2d00:	08 f4       	brcc	.+2      	; 0x2d04 <__fpcmp_parts_f+0xc>
    2d02:	49 c0       	rjmp	.+146    	; 0x2d96 <__fpcmp_parts_f+0x9e>
    2d04:	8c 91       	ld	r24, X
    2d06:	82 30       	cpi	r24, 0x02	; 2
    2d08:	08 f4       	brcc	.+2      	; 0x2d0c <__fpcmp_parts_f+0x14>
    2d0a:	45 c0       	rjmp	.+138    	; 0x2d96 <__fpcmp_parts_f+0x9e>
    2d0c:	94 30       	cpi	r25, 0x04	; 4
    2d0e:	51 f4       	brne	.+20     	; 0x2d24 <__fpcmp_parts_f+0x2c>
    2d10:	61 81       	ldd	r22, Z+1	; 0x01
    2d12:	84 30       	cpi	r24, 0x04	; 4
    2d14:	b1 f5       	brne	.+108    	; 0x2d82 <__fpcmp_parts_f+0x8a>
    2d16:	11 96       	adiw	r26, 0x01	; 1
    2d18:	2c 91       	ld	r18, X
    2d1a:	11 97       	sbiw	r26, 0x01	; 1
    2d1c:	30 e0       	ldi	r19, 0x00	; 0
    2d1e:	26 1b       	sub	r18, r22
    2d20:	31 09       	sbc	r19, r1
    2d22:	41 c0       	rjmp	.+130    	; 0x2da6 <__fpcmp_parts_f+0xae>
    2d24:	84 30       	cpi	r24, 0x04	; 4
    2d26:	21 f0       	breq	.+8      	; 0x2d30 <__fpcmp_parts_f+0x38>
    2d28:	92 30       	cpi	r25, 0x02	; 2
    2d2a:	41 f4       	brne	.+16     	; 0x2d3c <__fpcmp_parts_f+0x44>
    2d2c:	82 30       	cpi	r24, 0x02	; 2
    2d2e:	b1 f1       	breq	.+108    	; 0x2d9c <__fpcmp_parts_f+0xa4>
    2d30:	11 96       	adiw	r26, 0x01	; 1
    2d32:	8c 91       	ld	r24, X
    2d34:	11 97       	sbiw	r26, 0x01	; 1
    2d36:	88 23       	and	r24, r24
    2d38:	a1 f1       	breq	.+104    	; 0x2da2 <__fpcmp_parts_f+0xaa>
    2d3a:	2d c0       	rjmp	.+90     	; 0x2d96 <__fpcmp_parts_f+0x9e>
    2d3c:	61 81       	ldd	r22, Z+1	; 0x01
    2d3e:	82 30       	cpi	r24, 0x02	; 2
    2d40:	01 f1       	breq	.+64     	; 0x2d82 <__fpcmp_parts_f+0x8a>
    2d42:	11 96       	adiw	r26, 0x01	; 1
    2d44:	8c 91       	ld	r24, X
    2d46:	11 97       	sbiw	r26, 0x01	; 1
    2d48:	68 17       	cp	r22, r24
    2d4a:	d9 f4       	brne	.+54     	; 0x2d82 <__fpcmp_parts_f+0x8a>
    2d4c:	22 81       	ldd	r18, Z+2	; 0x02
    2d4e:	33 81       	ldd	r19, Z+3	; 0x03
    2d50:	12 96       	adiw	r26, 0x02	; 2
    2d52:	8d 91       	ld	r24, X+
    2d54:	9c 91       	ld	r25, X
    2d56:	13 97       	sbiw	r26, 0x03	; 3
    2d58:	82 17       	cp	r24, r18
    2d5a:	93 07       	cpc	r25, r19
    2d5c:	94 f0       	brlt	.+36     	; 0x2d82 <__fpcmp_parts_f+0x8a>
    2d5e:	28 17       	cp	r18, r24
    2d60:	39 07       	cpc	r19, r25
    2d62:	bc f0       	brlt	.+46     	; 0x2d92 <__fpcmp_parts_f+0x9a>
    2d64:	24 81       	ldd	r18, Z+4	; 0x04
    2d66:	35 81       	ldd	r19, Z+5	; 0x05
    2d68:	46 81       	ldd	r20, Z+6	; 0x06
    2d6a:	57 81       	ldd	r21, Z+7	; 0x07
    2d6c:	14 96       	adiw	r26, 0x04	; 4
    2d6e:	8d 91       	ld	r24, X+
    2d70:	9d 91       	ld	r25, X+
    2d72:	0d 90       	ld	r0, X+
    2d74:	bc 91       	ld	r27, X
    2d76:	a0 2d       	mov	r26, r0
    2d78:	82 17       	cp	r24, r18
    2d7a:	93 07       	cpc	r25, r19
    2d7c:	a4 07       	cpc	r26, r20
    2d7e:	b5 07       	cpc	r27, r21
    2d80:	18 f4       	brcc	.+6      	; 0x2d88 <__fpcmp_parts_f+0x90>
    2d82:	66 23       	and	r22, r22
    2d84:	41 f0       	breq	.+16     	; 0x2d96 <__fpcmp_parts_f+0x9e>
    2d86:	0d c0       	rjmp	.+26     	; 0x2da2 <__fpcmp_parts_f+0xaa>
    2d88:	28 17       	cp	r18, r24
    2d8a:	39 07       	cpc	r19, r25
    2d8c:	4a 07       	cpc	r20, r26
    2d8e:	5b 07       	cpc	r21, r27
    2d90:	28 f4       	brcc	.+10     	; 0x2d9c <__fpcmp_parts_f+0xa4>
    2d92:	66 23       	and	r22, r22
    2d94:	31 f0       	breq	.+12     	; 0x2da2 <__fpcmp_parts_f+0xaa>
    2d96:	21 e0       	ldi	r18, 0x01	; 1
    2d98:	30 e0       	ldi	r19, 0x00	; 0
    2d9a:	05 c0       	rjmp	.+10     	; 0x2da6 <__fpcmp_parts_f+0xae>
    2d9c:	20 e0       	ldi	r18, 0x00	; 0
    2d9e:	30 e0       	ldi	r19, 0x00	; 0
    2da0:	02 c0       	rjmp	.+4      	; 0x2da6 <__fpcmp_parts_f+0xae>
    2da2:	2f ef       	ldi	r18, 0xFF	; 255
    2da4:	3f ef       	ldi	r19, 0xFF	; 255
    2da6:	c9 01       	movw	r24, r18
    2da8:	08 95       	ret

00002daa <analogReference>:
    2daa:	80 93 e9 02 	sts	0x02E9, r24
    2dae:	08 95       	ret

00002db0 <analogRead>:
#if defined(__AVR_ATmega1280__) || defined(__AVR_ATmega2560__)
	if (pin >= 54) pin -= 54; // allow for channel or pin numbers
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    2db0:	8e 30       	cpi	r24, 0x0E	; 14
    2db2:	08 f0       	brcs	.+2      	; 0x2db6 <analogRead+0x6>
    2db4:	8e 50       	subi	r24, 0x0E	; 14
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
#if defined(ADMUX)
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    2db6:	87 70       	andi	r24, 0x07	; 7
    2db8:	90 91 e9 02 	lds	r25, 0x02E9
    2dbc:	92 95       	swap	r25
    2dbe:	99 0f       	add	r25, r25
    2dc0:	99 0f       	add	r25, r25
    2dc2:	90 7c       	andi	r25, 0xC0	; 192
    2dc4:	98 2b       	or	r25, r24
    2dc6:	90 93 7c 00 	sts	0x007C, r25
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    2dca:	80 91 7a 00 	lds	r24, 0x007A
    2dce:	80 64       	ori	r24, 0x40	; 64
    2dd0:	80 93 7a 00 	sts	0x007A, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    2dd4:	80 91 7a 00 	lds	r24, 0x007A
    2dd8:	86 fd       	sbrc	r24, 6
    2dda:	fc cf       	rjmp	.-8      	; 0x2dd4 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    2ddc:	20 91 78 00 	lds	r18, 0x0078
	high = ADCH;
    2de0:	30 91 79 00 	lds	r19, 0x0079
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    2de4:	93 2f       	mov	r25, r19
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	28 2b       	or	r18, r24
    2dec:	39 2b       	or	r19, r25
}
    2dee:	c9 01       	movw	r24, r18
    2df0:	08 95       	ret

00002df2 <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
    2df2:	1f 93       	push	r17
    2df4:	cf 93       	push	r28
    2df6:	df 93       	push	r29
    2df8:	18 2f       	mov	r17, r24
    2dfa:	eb 01       	movw	r28, r22
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
    2dfc:	61 e0       	ldi	r22, 0x01	; 1
    2dfe:	0e 94 6e 18 	call	0x30dc	; 0x30dc <pinMode>
	if (val == 0)
    2e02:	20 97       	sbiw	r28, 0x00	; 0
    2e04:	09 f4       	brne	.+2      	; 0x2e08 <analogWrite+0x16>
    2e06:	4a c0       	rjmp	.+148    	; 0x2e9c <analogWrite+0xaa>
	{
		digitalWrite(pin, LOW);
	}
	else if (val == 255)
    2e08:	cf 3f       	cpi	r28, 0xFF	; 255
    2e0a:	d1 05       	cpc	r29, r1
    2e0c:	09 f4       	brne	.+2      	; 0x2e10 <analogWrite+0x1e>
    2e0e:	49 c0       	rjmp	.+146    	; 0x2ea2 <analogWrite+0xb0>
	{
		digitalWrite(pin, HIGH);
	}
	else
	{
		switch(digitalPinToTimer(pin))
    2e10:	e1 2f       	mov	r30, r17
    2e12:	f0 e0       	ldi	r31, 0x00	; 0
    2e14:	e2 55       	subi	r30, 0x52	; 82
    2e16:	ff 4f       	sbci	r31, 0xFF	; 255
    2e18:	e4 91       	lpm	r30, Z+
    2e1a:	e3 30       	cpi	r30, 0x03	; 3
    2e1c:	c1 f0       	breq	.+48     	; 0x2e4e <analogWrite+0x5c>
    2e1e:	e4 30       	cpi	r30, 0x04	; 4
    2e20:	28 f4       	brcc	.+10     	; 0x2e2c <analogWrite+0x3a>
    2e22:	e1 30       	cpi	r30, 0x01	; 1
    2e24:	51 f0       	breq	.+20     	; 0x2e3a <analogWrite+0x48>
    2e26:	e2 30       	cpi	r30, 0x02	; 2
    2e28:	b1 f5       	brne	.+108    	; 0x2e96 <analogWrite+0xa4>
    2e2a:	0c c0       	rjmp	.+24     	; 0x2e44 <analogWrite+0x52>
    2e2c:	e6 30       	cpi	r30, 0x06	; 6
    2e2e:	19 f1       	breq	.+70     	; 0x2e76 <analogWrite+0x84>
    2e30:	e7 30       	cpi	r30, 0x07	; 7
    2e32:	49 f1       	breq	.+82     	; 0x2e86 <analogWrite+0x94>
    2e34:	e4 30       	cpi	r30, 0x04	; 4
    2e36:	79 f5       	brne	.+94     	; 0x2e96 <analogWrite+0xa4>
    2e38:	14 c0       	rjmp	.+40     	; 0x2e62 <analogWrite+0x70>
			#endif

			#if defined(TCCR0A) && defined(COM0A1)
			case TIMER0A:
				// connect pwm to pin on timer 0, channel A
				sbi(TCCR0A, COM0A1);
    2e3a:	84 b5       	in	r24, 0x24	; 36
    2e3c:	80 68       	ori	r24, 0x80	; 128
    2e3e:	84 bd       	out	0x24, r24	; 36
				OCR0A = val; // set pwm duty
    2e40:	c7 bd       	out	0x27, r28	; 39
				break;
    2e42:	33 c0       	rjmp	.+102    	; 0x2eaa <analogWrite+0xb8>
			#endif

			#if defined(TCCR0A) && defined(COM0B1)
			case TIMER0B:
				// connect pwm to pin on timer 0, channel B
				sbi(TCCR0A, COM0B1);
    2e44:	84 b5       	in	r24, 0x24	; 36
    2e46:	80 62       	ori	r24, 0x20	; 32
    2e48:	84 bd       	out	0x24, r24	; 36
				OCR0B = val; // set pwm duty
    2e4a:	c8 bd       	out	0x28, r28	; 40
				break;
    2e4c:	2e c0       	rjmp	.+92     	; 0x2eaa <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1A1)
			case TIMER1A:
				// connect pwm to pin on timer 1, channel A
				sbi(TCCR1A, COM1A1);
    2e4e:	80 91 80 00 	lds	r24, 0x0080
    2e52:	80 68       	ori	r24, 0x80	; 128
    2e54:	80 93 80 00 	sts	0x0080, r24
				OCR1A = val; // set pwm duty
    2e58:	d0 93 89 00 	sts	0x0089, r29
    2e5c:	c0 93 88 00 	sts	0x0088, r28
				break;
    2e60:	24 c0       	rjmp	.+72     	; 0x2eaa <analogWrite+0xb8>
			#endif

			#if defined(TCCR1A) && defined(COM1B1)
			case TIMER1B:
				// connect pwm to pin on timer 1, channel B
				sbi(TCCR1A, COM1B1);
    2e62:	80 91 80 00 	lds	r24, 0x0080
    2e66:	80 62       	ori	r24, 0x20	; 32
    2e68:	80 93 80 00 	sts	0x0080, r24
				OCR1B = val; // set pwm duty
    2e6c:	d0 93 8b 00 	sts	0x008B, r29
    2e70:	c0 93 8a 00 	sts	0x008A, r28
				break;
    2e74:	1a c0       	rjmp	.+52     	; 0x2eaa <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2A1)
			case TIMER2A:
				// connect pwm to pin on timer 2, channel A
				sbi(TCCR2A, COM2A1);
    2e76:	80 91 b0 00 	lds	r24, 0x00B0
    2e7a:	80 68       	ori	r24, 0x80	; 128
    2e7c:	80 93 b0 00 	sts	0x00B0, r24
				OCR2A = val; // set pwm duty
    2e80:	c0 93 b3 00 	sts	0x00B3, r28
				break;
    2e84:	12 c0       	rjmp	.+36     	; 0x2eaa <analogWrite+0xb8>
			#endif

			#if defined(TCCR2A) && defined(COM2B1)
			case TIMER2B:
				// connect pwm to pin on timer 2, channel B
				sbi(TCCR2A, COM2B1);
    2e86:	80 91 b0 00 	lds	r24, 0x00B0
    2e8a:	80 62       	ori	r24, 0x20	; 32
    2e8c:	80 93 b0 00 	sts	0x00B0, r24
				OCR2B = val; // set pwm duty
    2e90:	c0 93 b4 00 	sts	0x00B4, r28
				break;
    2e94:	0a c0       	rjmp	.+20     	; 0x2eaa <analogWrite+0xb8>
				break;
			#endif

			case NOT_ON_TIMER:
			default:
				if (val < 128) {
    2e96:	c0 38       	cpi	r28, 0x80	; 128
    2e98:	d1 05       	cpc	r29, r1
    2e9a:	1c f4       	brge	.+6      	; 0x2ea2 <analogWrite+0xb0>
					digitalWrite(pin, LOW);
    2e9c:	81 2f       	mov	r24, r17
    2e9e:	60 e0       	ldi	r22, 0x00	; 0
    2ea0:	02 c0       	rjmp	.+4      	; 0x2ea6 <analogWrite+0xb4>
				} else {
					digitalWrite(pin, HIGH);
    2ea2:	81 2f       	mov	r24, r17
    2ea4:	61 e0       	ldi	r22, 0x01	; 1
    2ea6:	0e 94 92 18 	call	0x3124	; 0x3124 <digitalWrite>
				}
		}
	}
}
    2eaa:	df 91       	pop	r29
    2eac:	cf 91       	pop	r28
    2eae:	1f 91       	pop	r17
    2eb0:	08 95       	ret

00002eb2 <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
    2eb2:	1f 92       	push	r1
    2eb4:	0f 92       	push	r0
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	0f 92       	push	r0
    2eba:	11 24       	eor	r1, r1
    2ebc:	2f 93       	push	r18
    2ebe:	3f 93       	push	r19
    2ec0:	8f 93       	push	r24
    2ec2:	9f 93       	push	r25
    2ec4:	af 93       	push	r26
    2ec6:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    2ec8:	80 91 3e 03 	lds	r24, 0x033E
    2ecc:	90 91 3f 03 	lds	r25, 0x033F
    2ed0:	a0 91 40 03 	lds	r26, 0x0340
    2ed4:	b0 91 41 03 	lds	r27, 0x0341
	unsigned char f = timer0_fract;
    2ed8:	30 91 42 03 	lds	r19, 0x0342

	m += MILLIS_INC;
    2edc:	01 96       	adiw	r24, 0x01	; 1
    2ede:	a1 1d       	adc	r26, r1
    2ee0:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
    2ee2:	23 2f       	mov	r18, r19
    2ee4:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
    2ee6:	2d 37       	cpi	r18, 0x7D	; 125
    2ee8:	20 f0       	brcs	.+8      	; 0x2ef2 <__vector_16+0x40>
		f -= FRACT_MAX;
    2eea:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	a1 1d       	adc	r26, r1
    2ef0:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    2ef2:	20 93 42 03 	sts	0x0342, r18
	timer0_millis = m;
    2ef6:	80 93 3e 03 	sts	0x033E, r24
    2efa:	90 93 3f 03 	sts	0x033F, r25
    2efe:	a0 93 40 03 	sts	0x0340, r26
    2f02:	b0 93 41 03 	sts	0x0341, r27
	timer0_overflow_count++;
    2f06:	80 91 3a 03 	lds	r24, 0x033A
    2f0a:	90 91 3b 03 	lds	r25, 0x033B
    2f0e:	a0 91 3c 03 	lds	r26, 0x033C
    2f12:	b0 91 3d 03 	lds	r27, 0x033D
    2f16:	01 96       	adiw	r24, 0x01	; 1
    2f18:	a1 1d       	adc	r26, r1
    2f1a:	b1 1d       	adc	r27, r1
    2f1c:	80 93 3a 03 	sts	0x033A, r24
    2f20:	90 93 3b 03 	sts	0x033B, r25
    2f24:	a0 93 3c 03 	sts	0x033C, r26
    2f28:	b0 93 3d 03 	sts	0x033D, r27
}
    2f2c:	bf 91       	pop	r27
    2f2e:	af 91       	pop	r26
    2f30:	9f 91       	pop	r25
    2f32:	8f 91       	pop	r24
    2f34:	3f 91       	pop	r19
    2f36:	2f 91       	pop	r18
    2f38:	0f 90       	pop	r0
    2f3a:	0f be       	out	0x3f, r0	; 63
    2f3c:	0f 90       	pop	r0
    2f3e:	1f 90       	pop	r1
    2f40:	18 95       	reti

00002f42 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    2f42:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    2f44:	f8 94       	cli
	m = timer0_millis;
    2f46:	20 91 3e 03 	lds	r18, 0x033E
    2f4a:	30 91 3f 03 	lds	r19, 0x033F
    2f4e:	40 91 40 03 	lds	r20, 0x0340
    2f52:	50 91 41 03 	lds	r21, 0x0341
	SREG = oldSREG;
    2f56:	8f bf       	out	0x3f, r24	; 63

	return m;
}
    2f58:	b9 01       	movw	r22, r18
    2f5a:	ca 01       	movw	r24, r20
    2f5c:	08 95       	ret

00002f5e <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    2f5e:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
    2f60:	f8 94       	cli
	m = timer0_overflow_count;
    2f62:	20 91 3a 03 	lds	r18, 0x033A
    2f66:	30 91 3b 03 	lds	r19, 0x033B
    2f6a:	40 91 3c 03 	lds	r20, 0x033C
    2f6e:	50 91 3d 03 	lds	r21, 0x033D
#if defined(TCNT0)
	t = TCNT0;
    2f72:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2f74:	a8 9b       	sbis	0x15, 0	; 21
    2f76:	06 c0       	rjmp	.+12     	; 0x2f84 <micros+0x26>
    2f78:	8f 3f       	cpi	r24, 0xFF	; 255
    2f7a:	21 f0       	breq	.+8      	; 0x2f84 <micros+0x26>
		m++;
    2f7c:	2f 5f       	subi	r18, 0xFF	; 255
    2f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f80:	4f 4f       	sbci	r20, 0xFF	; 255
    2f82:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    2f84:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    2f86:	54 2f       	mov	r21, r20
    2f88:	43 2f       	mov	r20, r19
    2f8a:	32 2f       	mov	r19, r18
    2f8c:	22 27       	eor	r18, r18
    2f8e:	28 0f       	add	r18, r24
    2f90:	31 1d       	adc	r19, r1
    2f92:	41 1d       	adc	r20, r1
    2f94:	51 1d       	adc	r21, r1
    2f96:	82 e0       	ldi	r24, 0x02	; 2
    2f98:	22 0f       	add	r18, r18
    2f9a:	33 1f       	adc	r19, r19
    2f9c:	44 1f       	adc	r20, r20
    2f9e:	55 1f       	adc	r21, r21
    2fa0:	8a 95       	dec	r24
    2fa2:	d1 f7       	brne	.-12     	; 0x2f98 <micros+0x3a>
}
    2fa4:	b9 01       	movw	r22, r18
    2fa6:	ca 01       	movw	r24, r20
    2fa8:	08 95       	ret

00002faa <delay>:

void delay(unsigned long ms)
{
    2faa:	ef 92       	push	r14
    2fac:	ff 92       	push	r15
    2fae:	0f 93       	push	r16
    2fb0:	1f 93       	push	r17
    2fb2:	cf 93       	push	r28
    2fb4:	df 93       	push	r29
    2fb6:	7b 01       	movw	r14, r22
    2fb8:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
    2fba:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <micros>
    2fbe:	eb 01       	movw	r28, r22

	while (ms > 0) {
    2fc0:	0f c0       	rjmp	.+30     	; 0x2fe0 <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
    2fc2:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <micros>
    2fc6:	6c 1b       	sub	r22, r28
    2fc8:	7d 0b       	sbc	r23, r29
    2fca:	83 e0       	ldi	r24, 0x03	; 3
    2fcc:	68 3e       	cpi	r22, 0xE8	; 232
    2fce:	78 07       	cpc	r23, r24
    2fd0:	38 f0       	brcs	.+14     	; 0x2fe0 <delay+0x36>
			ms--;
    2fd2:	08 94       	sec
    2fd4:	e1 08       	sbc	r14, r1
    2fd6:	f1 08       	sbc	r15, r1
    2fd8:	01 09       	sbc	r16, r1
    2fda:	11 09       	sbc	r17, r1
			start += 1000;
    2fdc:	c8 51       	subi	r28, 0x18	; 24
    2fde:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
    2fe0:	e1 14       	cp	r14, r1
    2fe2:	f1 04       	cpc	r15, r1
    2fe4:	01 05       	cpc	r16, r1
    2fe6:	11 05       	cpc	r17, r1
    2fe8:	61 f7       	brne	.-40     	; 0x2fc2 <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
    2fea:	df 91       	pop	r29
    2fec:	cf 91       	pop	r28
    2fee:	1f 91       	pop	r17
    2ff0:	0f 91       	pop	r16
    2ff2:	ff 90       	pop	r15
    2ff4:	ef 90       	pop	r14
    2ff6:	08 95       	ret

00002ff8 <delayMicroseconds>:
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
    2ff8:	01 97       	sbiw	r24, 0x01	; 1
    2ffa:	39 f0       	breq	.+14     	; 0x300a <delayMicroseconds+0x12>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
    2ffc:	88 0f       	add	r24, r24
    2ffe:	99 1f       	adc	r25, r25
    3000:	88 0f       	add	r24, r24
    3002:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	us -= 2;
    3004:	02 97       	sbiw	r24, 0x02	; 2
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
    3006:	01 97       	sbiw	r24, 0x01	; 1
    3008:	f1 f7       	brne	.-4      	; 0x3006 <delayMicroseconds+0xe>
    300a:	08 95       	ret

0000300c <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    300c:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    300e:	84 b5       	in	r24, 0x24	; 36
    3010:	82 60       	ori	r24, 0x02	; 2
    3012:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    3014:	84 b5       	in	r24, 0x24	; 36
    3016:	81 60       	ori	r24, 0x01	; 1
    3018:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    301a:	85 b5       	in	r24, 0x25	; 37
    301c:	82 60       	ori	r24, 0x02	; 2
    301e:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    3020:	85 b5       	in	r24, 0x25	; 37
    3022:	81 60       	ori	r24, 0x01	; 1
    3024:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    3026:	ee e6       	ldi	r30, 0x6E	; 110
    3028:	f0 e0       	ldi	r31, 0x00	; 0
    302a:	80 81       	ld	r24, Z
    302c:	81 60       	ori	r24, 0x01	; 1
    302e:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    3030:	e1 e8       	ldi	r30, 0x81	; 129
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    3036:	80 81       	ld	r24, Z
    3038:	82 60       	ori	r24, 0x02	; 2
    303a:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    303c:	80 81       	ld	r24, Z
    303e:	81 60       	ori	r24, 0x01	; 1
    3040:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3042:	e0 e8       	ldi	r30, 0x80	; 128
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	80 81       	ld	r24, Z
    3048:	81 60       	ori	r24, 0x01	; 1
    304a:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    304c:	e1 eb       	ldi	r30, 0xB1	; 177
    304e:	f0 e0       	ldi	r31, 0x00	; 0
    3050:	80 81       	ld	r24, Z
    3052:	84 60       	ori	r24, 0x04	; 4
    3054:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    3056:	e0 eb       	ldi	r30, 0xB0	; 176
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	80 81       	ld	r24, Z
    305c:	81 60       	ori	r24, 0x01	; 1
    305e:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
    3060:	ea e7       	ldi	r30, 0x7A	; 122
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	80 81       	ld	r24, Z
    3066:	84 60       	ori	r24, 0x04	; 4
    3068:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
    306a:	80 81       	ld	r24, Z
    306c:	82 60       	ori	r24, 0x02	; 2
    306e:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
    3070:	80 81       	ld	r24, Z
    3072:	81 60       	ori	r24, 0x01	; 1
    3074:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3076:	80 81       	ld	r24, Z
    3078:	80 68       	ori	r24, 0x80	; 128
    307a:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    307c:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    3080:	08 95       	ret

00003082 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3082:	83 30       	cpi	r24, 0x03	; 3
    3084:	71 f0       	breq	.+28     	; 0x30a2 <turnOffPWM+0x20>
    3086:	84 30       	cpi	r24, 0x04	; 4
    3088:	28 f4       	brcc	.+10     	; 0x3094 <turnOffPWM+0x12>
    308a:	81 30       	cpi	r24, 0x01	; 1
    308c:	a1 f0       	breq	.+40     	; 0x30b6 <turnOffPWM+0x34>
    308e:	82 30       	cpi	r24, 0x02	; 2
    3090:	21 f5       	brne	.+72     	; 0x30da <turnOffPWM+0x58>
    3092:	14 c0       	rjmp	.+40     	; 0x30bc <turnOffPWM+0x3a>
    3094:	86 30       	cpi	r24, 0x06	; 6
    3096:	b1 f0       	breq	.+44     	; 0x30c4 <turnOffPWM+0x42>
    3098:	87 30       	cpi	r24, 0x07	; 7
    309a:	d1 f0       	breq	.+52     	; 0x30d0 <turnOffPWM+0x4e>
    309c:	84 30       	cpi	r24, 0x04	; 4
    309e:	e9 f4       	brne	.+58     	; 0x30da <turnOffPWM+0x58>
    30a0:	04 c0       	rjmp	.+8      	; 0x30aa <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    30a2:	80 91 80 00 	lds	r24, 0x0080
    30a6:	8f 77       	andi	r24, 0x7F	; 127
    30a8:	03 c0       	rjmp	.+6      	; 0x30b0 <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    30aa:	80 91 80 00 	lds	r24, 0x0080
    30ae:	8f 7d       	andi	r24, 0xDF	; 223
    30b0:	80 93 80 00 	sts	0x0080, r24
    30b4:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    30b6:	84 b5       	in	r24, 0x24	; 36
    30b8:	8f 77       	andi	r24, 0x7F	; 127
    30ba:	02 c0       	rjmp	.+4      	; 0x30c0 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    30bc:	84 b5       	in	r24, 0x24	; 36
    30be:	8f 7d       	andi	r24, 0xDF	; 223
    30c0:	84 bd       	out	0x24, r24	; 36
    30c2:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    30c4:	80 91 b0 00 	lds	r24, 0x00B0
    30c8:	8f 77       	andi	r24, 0x7F	; 127
    30ca:	80 93 b0 00 	sts	0x00B0, r24
    30ce:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    30d0:	80 91 b0 00 	lds	r24, 0x00B0
    30d4:	8f 7d       	andi	r24, 0xDF	; 223
    30d6:	80 93 b0 00 	sts	0x00B0, r24
    30da:	08 95       	ret

000030dc <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    30dc:	90 e0       	ldi	r25, 0x00	; 0
    30de:	fc 01       	movw	r30, r24
    30e0:	e6 56       	subi	r30, 0x66	; 102
    30e2:	ff 4f       	sbci	r31, 0xFF	; 255
    30e4:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    30e6:	fc 01       	movw	r30, r24
    30e8:	ea 57       	subi	r30, 0x7A	; 122
    30ea:	ff 4f       	sbci	r31, 0xFF	; 255
    30ec:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    30ee:	ee 23       	and	r30, r30
    30f0:	c1 f0       	breq	.+48     	; 0x3122 <pinMode+0x46>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    30f2:	f0 e0       	ldi	r31, 0x00	; 0
    30f4:	ee 0f       	add	r30, r30
    30f6:	ff 1f       	adc	r31, r31
    30f8:	e8 59       	subi	r30, 0x98	; 152
    30fa:	ff 4f       	sbci	r31, 0xFF	; 255
    30fc:	85 91       	lpm	r24, Z+
    30fe:	94 91       	lpm	r25, Z+
    3100:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
    3102:	66 23       	and	r22, r22
    3104:	41 f4       	brne	.+16     	; 0x3116 <pinMode+0x3a>
		uint8_t oldSREG = SREG;
    3106:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3108:	f8 94       	cli
		*reg &= ~bit;
    310a:	8c 91       	ld	r24, X
    310c:	20 95       	com	r18
    310e:	82 23       	and	r24, r18
    3110:	8c 93       	st	X, r24
		SREG = oldSREG;
    3112:	9f bf       	out	0x3f, r25	; 63
    3114:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    3116:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3118:	f8 94       	cli
		*reg |= bit;
    311a:	8c 91       	ld	r24, X
    311c:	82 2b       	or	r24, r18
    311e:	8c 93       	st	X, r24
		SREG = oldSREG;
    3120:	9f bf       	out	0x3f, r25	; 63
    3122:	08 95       	ret

00003124 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3124:	0f 93       	push	r16
    3126:	1f 93       	push	r17
    3128:	df 93       	push	r29
    312a:	cf 93       	push	r28
    312c:	0f 92       	push	r0
    312e:	cd b7       	in	r28, 0x3d	; 61
    3130:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    3132:	28 2f       	mov	r18, r24
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	f9 01       	movw	r30, r18
    3138:	e2 55       	subi	r30, 0x52	; 82
    313a:	ff 4f       	sbci	r31, 0xFF	; 255
    313c:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    313e:	f9 01       	movw	r30, r18
    3140:	e6 56       	subi	r30, 0x66	; 102
    3142:	ff 4f       	sbci	r31, 0xFF	; 255
    3144:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    3146:	2a 57       	subi	r18, 0x7A	; 122
    3148:	3f 4f       	sbci	r19, 0xFF	; 255
    314a:	f9 01       	movw	r30, r18
    314c:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    314e:	00 23       	and	r16, r16
    3150:	d9 f0       	breq	.+54     	; 0x3188 <digitalWrite+0x64>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3152:	88 23       	and	r24, r24
    3154:	21 f0       	breq	.+8      	; 0x315e <digitalWrite+0x3a>
    3156:	69 83       	std	Y+1, r22	; 0x01
    3158:	0e 94 41 18 	call	0x3082	; 0x3082 <turnOffPWM>
    315c:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    315e:	e0 2f       	mov	r30, r16
    3160:	f0 e0       	ldi	r31, 0x00	; 0
    3162:	ee 0f       	add	r30, r30
    3164:	ff 1f       	adc	r31, r31
    3166:	ee 58       	subi	r30, 0x8E	; 142
    3168:	ff 4f       	sbci	r31, 0xFF	; 255
    316a:	85 91       	lpm	r24, Z+
    316c:	94 91       	lpm	r25, Z+
    316e:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    3170:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3172:	f8 94       	cli

	if (val == LOW) {
    3174:	66 23       	and	r22, r22
    3176:	21 f4       	brne	.+8      	; 0x3180 <digitalWrite+0x5c>
		*out &= ~bit;
    3178:	8c 91       	ld	r24, X
    317a:	10 95       	com	r17
    317c:	81 23       	and	r24, r17
    317e:	02 c0       	rjmp	.+4      	; 0x3184 <digitalWrite+0x60>
	} else {
		*out |= bit;
    3180:	8c 91       	ld	r24, X
    3182:	81 2b       	or	r24, r17
    3184:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    3186:	9f bf       	out	0x3f, r25	; 63
}
    3188:	0f 90       	pop	r0
    318a:	cf 91       	pop	r28
    318c:	df 91       	pop	r29
    318e:	1f 91       	pop	r17
    3190:	0f 91       	pop	r16
    3192:	08 95       	ret

00003194 <digitalRead>:

int digitalRead(uint8_t pin)
{
    3194:	0f 93       	push	r16
    3196:	1f 93       	push	r17
	uint8_t timer = digitalPinToTimer(pin);
    3198:	28 2f       	mov	r18, r24
    319a:	30 e0       	ldi	r19, 0x00	; 0
    319c:	f9 01       	movw	r30, r18
    319e:	e2 55       	subi	r30, 0x52	; 82
    31a0:	ff 4f       	sbci	r31, 0xFF	; 255
    31a2:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    31a4:	f9 01       	movw	r30, r18
    31a6:	e6 56       	subi	r30, 0x66	; 102
    31a8:	ff 4f       	sbci	r31, 0xFF	; 255
    31aa:	04 91       	lpm	r16, Z+
	uint8_t port = digitalPinToPort(pin);
    31ac:	2a 57       	subi	r18, 0x7A	; 122
    31ae:	3f 4f       	sbci	r19, 0xFF	; 255
    31b0:	f9 01       	movw	r30, r18
    31b2:	14 91       	lpm	r17, Z+

	if (port == NOT_A_PIN) return LOW;
    31b4:	11 23       	and	r17, r17
    31b6:	91 f0       	breq	.+36     	; 0x31dc <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    31b8:	88 23       	and	r24, r24
    31ba:	11 f0       	breq	.+4      	; 0x31c0 <digitalRead+0x2c>
    31bc:	0e 94 41 18 	call	0x3082	; 0x3082 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    31c0:	e1 2f       	mov	r30, r17
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	ee 0f       	add	r30, r30
    31c6:	ff 1f       	adc	r31, r31
    31c8:	e4 58       	subi	r30, 0x84	; 132
    31ca:	ff 4f       	sbci	r31, 0xFF	; 255
    31cc:	85 91       	lpm	r24, Z+
    31ce:	94 91       	lpm	r25, Z+
    31d0:	dc 01       	movw	r26, r24
    31d2:	8c 91       	ld	r24, X
    31d4:	80 23       	and	r24, r16
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    31d6:	21 e0       	ldi	r18, 0x01	; 1
    31d8:	30 e0       	ldi	r19, 0x00	; 0
    31da:	11 f4       	brne	.+4      	; 0x31e0 <digitalRead+0x4c>
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    31e0:	c9 01       	movw	r24, r18
    31e2:	1f 91       	pop	r17
    31e4:	0f 91       	pop	r16
    31e6:	08 95       	ret

000031e8 <_ZN6StringD1Ev>:
	*this = buf;
}

String::~String()
{
	free(buffer);
    31e8:	fc 01       	movw	r30, r24
    31ea:	80 81       	ld	r24, Z
    31ec:	91 81       	ldd	r25, Z+1	; 0x01
    31ee:	0e 94 4e 28 	call	0x509c	; 0x509c <free>
}
    31f2:	08 95       	ret

000031f4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
    31f4:	cf 93       	push	r28
    31f6:	df 93       	push	r29
    31f8:	ec 01       	movw	r28, r24
	if (buffer) free(buffer);
    31fa:	88 81       	ld	r24, Y
    31fc:	99 81       	ldd	r25, Y+1	; 0x01
    31fe:	00 97       	sbiw	r24, 0x00	; 0
    3200:	11 f0       	breq	.+4      	; 0x3206 <_ZN6String10invalidateEv+0x12>
    3202:	0e 94 4e 28 	call	0x509c	; 0x509c <free>
	buffer = NULL;
    3206:	19 82       	std	Y+1, r1	; 0x01
    3208:	18 82       	st	Y, r1
	capacity = len = 0;
    320a:	1d 82       	std	Y+5, r1	; 0x05
    320c:	1c 82       	std	Y+4, r1	; 0x04
    320e:	1b 82       	std	Y+3, r1	; 0x03
    3210:	1a 82       	std	Y+2, r1	; 0x02
}
    3212:	df 91       	pop	r29
    3214:	cf 91       	pop	r28
    3216:	08 95       	ret

00003218 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
    3218:	0f 93       	push	r16
    321a:	1f 93       	push	r17
    321c:	cf 93       	push	r28
    321e:	df 93       	push	r29
    3220:	ec 01       	movw	r28, r24
    3222:	8b 01       	movw	r16, r22
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
    3224:	6f 5f       	subi	r22, 0xFF	; 255
    3226:	7f 4f       	sbci	r23, 0xFF	; 255
    3228:	88 81       	ld	r24, Y
    322a:	99 81       	ldd	r25, Y+1	; 0x01
    322c:	0e 94 e7 28 	call	0x51ce	; 0x51ce <realloc>
	if (newbuffer) {
    3230:	00 97       	sbiw	r24, 0x00	; 0
    3232:	31 f0       	breq	.+12     	; 0x3240 <_ZN6String12changeBufferEj+0x28>
		buffer = newbuffer;
    3234:	99 83       	std	Y+1, r25	; 0x01
    3236:	88 83       	st	Y, r24
		capacity = maxStrLen;
    3238:	1b 83       	std	Y+3, r17	; 0x03
    323a:	0a 83       	std	Y+2, r16	; 0x02
		return 1;
    323c:	81 e0       	ldi	r24, 0x01	; 1
    323e:	01 c0       	rjmp	.+2      	; 0x3242 <_ZN6String12changeBufferEj+0x2a>
	}
	return 0;
    3240:	80 e0       	ldi	r24, 0x00	; 0
}
    3242:	df 91       	pop	r29
    3244:	cf 91       	pop	r28
    3246:	1f 91       	pop	r17
    3248:	0f 91       	pop	r16
    324a:	08 95       	ret

0000324c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
    324c:	cf 93       	push	r28
    324e:	df 93       	push	r29
    3250:	ec 01       	movw	r28, r24
	if (buffer && capacity >= size) return 1;
    3252:	88 81       	ld	r24, Y
    3254:	99 81       	ldd	r25, Y+1	; 0x01
    3256:	00 97       	sbiw	r24, 0x00	; 0
    3258:	29 f0       	breq	.+10     	; 0x3264 <_ZN6String7reserveEj+0x18>
    325a:	8a 81       	ldd	r24, Y+2	; 0x02
    325c:	9b 81       	ldd	r25, Y+3	; 0x03
    325e:	86 17       	cp	r24, r22
    3260:	97 07       	cpc	r25, r23
    3262:	78 f4       	brcc	.+30     	; 0x3282 <_ZN6String7reserveEj+0x36>
	if (changeBuffer(size)) {
    3264:	ce 01       	movw	r24, r28
    3266:	0e 94 0c 19 	call	0x3218	; 0x3218 <_ZN6String12changeBufferEj>
    326a:	88 23       	and	r24, r24
    326c:	41 f0       	breq	.+16     	; 0x327e <_ZN6String7reserveEj+0x32>
		if (len == 0) buffer[0] = 0;
    326e:	8c 81       	ldd	r24, Y+4	; 0x04
    3270:	9d 81       	ldd	r25, Y+5	; 0x05
    3272:	00 97       	sbiw	r24, 0x00	; 0
    3274:	31 f4       	brne	.+12     	; 0x3282 <_ZN6String7reserveEj+0x36>
    3276:	e8 81       	ld	r30, Y
    3278:	f9 81       	ldd	r31, Y+1	; 0x01
    327a:	10 82       	st	Z, r1
    327c:	02 c0       	rjmp	.+4      	; 0x3282 <_ZN6String7reserveEj+0x36>
		return 1;
	}
	return 0;
    327e:	80 e0       	ldi	r24, 0x00	; 0
    3280:	01 c0       	rjmp	.+2      	; 0x3284 <_ZN6String7reserveEj+0x38>
unsigned char String::reserve(unsigned int size)
{
	if (buffer && capacity >= size) return 1;
	if (changeBuffer(size)) {
		if (len == 0) buffer[0] = 0;
		return 1;
    3282:	81 e0       	ldi	r24, 0x01	; 1
	}
	return 0;
}
    3284:	df 91       	pop	r29
    3286:	cf 91       	pop	r28
    3288:	08 95       	ret

0000328a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
    328a:	ef 92       	push	r14
    328c:	ff 92       	push	r15
    328e:	0f 93       	push	r16
    3290:	1f 93       	push	r17
    3292:	cf 93       	push	r28
    3294:	df 93       	push	r29
    3296:	ec 01       	movw	r28, r24
    3298:	7b 01       	movw	r14, r22
    329a:	8a 01       	movw	r16, r20
	if (!reserve(length)) {
    329c:	ba 01       	movw	r22, r20
    329e:	0e 94 26 19 	call	0x324c	; 0x324c <_ZN6String7reserveEj>
    32a2:	88 23       	and	r24, r24
    32a4:	21 f4       	brne	.+8      	; 0x32ae <_ZN6String4copyEPKcj+0x24>
		invalidate();
    32a6:	ce 01       	movw	r24, r28
    32a8:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZN6String10invalidateEv>
		return *this;
    32ac:	07 c0       	rjmp	.+14     	; 0x32bc <_ZN6String4copyEPKcj+0x32>
	}
	len = length;
    32ae:	1d 83       	std	Y+5, r17	; 0x05
    32b0:	0c 83       	std	Y+4, r16	; 0x04
	strcpy(buffer, cstr);
    32b2:	88 81       	ld	r24, Y
    32b4:	99 81       	ldd	r25, Y+1	; 0x01
    32b6:	b7 01       	movw	r22, r14
    32b8:	0e 94 20 2a 	call	0x5440	; 0x5440 <strcpy>
	return *this;
}
    32bc:	ce 01       	movw	r24, r28
    32be:	df 91       	pop	r29
    32c0:	cf 91       	pop	r28
    32c2:	1f 91       	pop	r17
    32c4:	0f 91       	pop	r16
    32c6:	ff 90       	pop	r15
    32c8:	ef 90       	pop	r14
    32ca:	08 95       	ret

000032cc <_ZN6StringC1EPKc>:

/*********************************************/
/*  Constructors                             */
/*********************************************/

String::String(const char *cstr)
    32cc:	cf 93       	push	r28
    32ce:	df 93       	push	r29
    32d0:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    32d2:	11 82       	std	Z+1, r1	; 0x01
    32d4:	10 82       	st	Z, r1
	capacity = 0;
    32d6:	13 82       	std	Z+3, r1	; 0x03
    32d8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    32da:	15 82       	std	Z+5, r1	; 0x05
    32dc:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    32de:	16 82       	std	Z+6, r1	; 0x06
/*********************************************/

String::String(const char *cstr)
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
    32e0:	61 15       	cp	r22, r1
    32e2:	71 05       	cpc	r23, r1
    32e4:	59 f0       	breq	.+22     	; 0x32fc <_ZN6StringC1EPKc+0x30>
    32e6:	eb 01       	movw	r28, r22
    32e8:	09 90       	ld	r0, Y+
    32ea:	00 20       	and	r0, r0
    32ec:	e9 f7       	brne	.-6      	; 0x32e8 <_ZN6StringC1EPKc+0x1c>
    32ee:	ae 01       	movw	r20, r28
    32f0:	41 50       	subi	r20, 0x01	; 1
    32f2:	50 40       	sbci	r21, 0x00	; 0
    32f4:	46 1b       	sub	r20, r22
    32f6:	57 0b       	sbc	r21, r23
    32f8:	0e 94 45 19 	call	0x328a	; 0x328a <_ZN6String4copyEPKcj>
}
    32fc:	df 91       	pop	r29
    32fe:	cf 91       	pop	r28
    3300:	08 95       	ret

00003302 <_ZN6StringaSERKS_>:
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
    3302:	ef 92       	push	r14
    3304:	ff 92       	push	r15
    3306:	cf 93       	push	r28
    3308:	df 93       	push	r29
    330a:	ec 01       	movw	r28, r24
    330c:	fb 01       	movw	r30, r22
	if (this == &rhs) return *this;
    330e:	86 17       	cp	r24, r22
    3310:	97 07       	cpc	r25, r23
    3312:	61 f0       	breq	.+24     	; 0x332c <_ZN6StringaSERKS_+0x2a>
	
	if (rhs.buffer) copy(rhs.buffer, rhs.len);
    3314:	60 81       	ld	r22, Z
    3316:	71 81       	ldd	r23, Z+1	; 0x01
    3318:	61 15       	cp	r22, r1
    331a:	71 05       	cpc	r23, r1
    331c:	29 f0       	breq	.+10     	; 0x3328 <_ZN6StringaSERKS_+0x26>
    331e:	44 81       	ldd	r20, Z+4	; 0x04
    3320:	55 81       	ldd	r21, Z+5	; 0x05
    3322:	0e 94 45 19 	call	0x328a	; 0x328a <_ZN6String4copyEPKcj>
    3326:	02 c0       	rjmp	.+4      	; 0x332c <_ZN6StringaSERKS_+0x2a>
	else invalidate();
    3328:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZN6String10invalidateEv>
	
	return *this;
}
    332c:	ce 01       	movw	r24, r28
    332e:	df 91       	pop	r29
    3330:	cf 91       	pop	r28
    3332:	ff 90       	pop	r15
    3334:	ef 90       	pop	r14
    3336:	08 95       	ret

00003338 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, strlen(cstr));
}

String::String(const String &value)
    3338:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    333a:	11 82       	std	Z+1, r1	; 0x01
    333c:	10 82       	st	Z, r1
	capacity = 0;
    333e:	13 82       	std	Z+3, r1	; 0x03
    3340:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3342:	15 82       	std	Z+5, r1	; 0x05
    3344:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3346:	16 82       	std	Z+6, r1	; 0x06
}

String::String(const String &value)
{
	init();
	*this = value;
    3348:	0e 94 81 19 	call	0x3302	; 0x3302 <_ZN6StringaSERKS_>
}
    334c:	08 95       	ret

0000334e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
    334e:	0f 93       	push	r16
    3350:	1f 93       	push	r17
    3352:	8c 01       	movw	r16, r24
	if (cstr) copy(cstr, strlen(cstr));
    3354:	61 15       	cp	r22, r1
    3356:	71 05       	cpc	r23, r1
    3358:	61 f0       	breq	.+24     	; 0x3372 <_ZN6StringaSEPKc+0x24>
    335a:	db 01       	movw	r26, r22
    335c:	0d 90       	ld	r0, X+
    335e:	00 20       	and	r0, r0
    3360:	e9 f7       	brne	.-6      	; 0x335c <_ZN6StringaSEPKc+0xe>
    3362:	ad 01       	movw	r20, r26
    3364:	41 50       	subi	r20, 0x01	; 1
    3366:	50 40       	sbci	r21, 0x00	; 0
    3368:	46 1b       	sub	r20, r22
    336a:	57 0b       	sbc	r21, r23
    336c:	0e 94 45 19 	call	0x328a	; 0x328a <_ZN6String4copyEPKcj>
    3370:	02 c0       	rjmp	.+4      	; 0x3376 <_ZN6StringaSEPKc+0x28>
	else invalidate();
    3372:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZN6String10invalidateEv>
	
	return *this;
}
    3376:	c8 01       	movw	r24, r16
    3378:	1f 91       	pop	r17
    337a:	0f 91       	pop	r16
    337c:	08 95       	ret

0000337e <_ZN6StringC1Emh>:
	char buf[34];
	ltoa(value, buf, base);
	*this = buf;
}

String::String(unsigned long value, unsigned char base)
    337e:	ef 92       	push	r14
    3380:	ff 92       	push	r15
    3382:	0f 93       	push	r16
    3384:	1f 93       	push	r17
    3386:	df 93       	push	r29
    3388:	cf 93       	push	r28
    338a:	cd b7       	in	r28, 0x3d	; 61
    338c:	de b7       	in	r29, 0x3e	; 62
    338e:	a1 97       	sbiw	r28, 0x21	; 33
    3390:	0f b6       	in	r0, 0x3f	; 63
    3392:	f8 94       	cli
    3394:	de bf       	out	0x3e, r29	; 62
    3396:	0f be       	out	0x3f, r0	; 63
    3398:	cd bf       	out	0x3d, r28	; 61
    339a:	7c 01       	movw	r14, r24
    339c:	cb 01       	movw	r24, r22
    339e:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    33a0:	f7 01       	movw	r30, r14
    33a2:	11 82       	std	Z+1, r1	; 0x01
    33a4:	10 82       	st	Z, r1
	capacity = 0;
    33a6:	13 82       	std	Z+3, r1	; 0x03
    33a8:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    33aa:	15 82       	std	Z+5, r1	; 0x05
    33ac:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    33ae:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned long value, unsigned char base)
{
	init();
	char buf[33];
	ultoa(value, buf, base);
    33b0:	8e 01       	movw	r16, r28
    33b2:	0f 5f       	subi	r16, 0xFF	; 255
    33b4:	1f 4f       	sbci	r17, 0xFF	; 255
    33b6:	a8 01       	movw	r20, r16
    33b8:	30 e0       	ldi	r19, 0x00	; 0
    33ba:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <ultoa>
	*this = buf;
    33be:	c7 01       	movw	r24, r14
    33c0:	b8 01       	movw	r22, r16
    33c2:	0e 94 a7 19 	call	0x334e	; 0x334e <_ZN6StringaSEPKc>
}
    33c6:	a1 96       	adiw	r28, 0x21	; 33
    33c8:	0f b6       	in	r0, 0x3f	; 63
    33ca:	f8 94       	cli
    33cc:	de bf       	out	0x3e, r29	; 62
    33ce:	0f be       	out	0x3f, r0	; 63
    33d0:	cd bf       	out	0x3d, r28	; 61
    33d2:	cf 91       	pop	r28
    33d4:	df 91       	pop	r29
    33d6:	1f 91       	pop	r17
    33d8:	0f 91       	pop	r16
    33da:	ff 90       	pop	r15
    33dc:	ef 90       	pop	r14
    33de:	08 95       	ret

000033e0 <_ZN6StringC1Elh>:
	char buf[17];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
    33e0:	ef 92       	push	r14
    33e2:	ff 92       	push	r15
    33e4:	0f 93       	push	r16
    33e6:	1f 93       	push	r17
    33e8:	df 93       	push	r29
    33ea:	cf 93       	push	r28
    33ec:	cd b7       	in	r28, 0x3d	; 61
    33ee:	de b7       	in	r29, 0x3e	; 62
    33f0:	a2 97       	sbiw	r28, 0x22	; 34
    33f2:	0f b6       	in	r0, 0x3f	; 63
    33f4:	f8 94       	cli
    33f6:	de bf       	out	0x3e, r29	; 62
    33f8:	0f be       	out	0x3f, r0	; 63
    33fa:	cd bf       	out	0x3d, r28	; 61
    33fc:	7c 01       	movw	r14, r24
    33fe:	cb 01       	movw	r24, r22
    3400:	ba 01       	movw	r22, r20
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3402:	f7 01       	movw	r30, r14
    3404:	11 82       	std	Z+1, r1	; 0x01
    3406:	10 82       	st	Z, r1
	capacity = 0;
    3408:	13 82       	std	Z+3, r1	; 0x03
    340a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    340c:	15 82       	std	Z+5, r1	; 0x05
    340e:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3410:	16 82       	std	Z+6, r1	; 0x06

String::String(long value, unsigned char base)
{
	init();
	char buf[34];
	ltoa(value, buf, base);
    3412:	8e 01       	movw	r16, r28
    3414:	0f 5f       	subi	r16, 0xFF	; 255
    3416:	1f 4f       	sbci	r17, 0xFF	; 255
    3418:	a8 01       	movw	r20, r16
    341a:	30 e0       	ldi	r19, 0x00	; 0
    341c:	0e 94 8a 2a 	call	0x5514	; 0x5514 <ltoa>
	*this = buf;
    3420:	c7 01       	movw	r24, r14
    3422:	b8 01       	movw	r22, r16
    3424:	0e 94 a7 19 	call	0x334e	; 0x334e <_ZN6StringaSEPKc>
}
    3428:	a2 96       	adiw	r28, 0x22	; 34
    342a:	0f b6       	in	r0, 0x3f	; 63
    342c:	f8 94       	cli
    342e:	de bf       	out	0x3e, r29	; 62
    3430:	0f be       	out	0x3f, r0	; 63
    3432:	cd bf       	out	0x3d, r28	; 61
    3434:	cf 91       	pop	r28
    3436:	df 91       	pop	r29
    3438:	1f 91       	pop	r17
    343a:	0f 91       	pop	r16
    343c:	ff 90       	pop	r15
    343e:	ef 90       	pop	r14
    3440:	08 95       	ret

00003442 <_ZN6StringC1Ejh>:
	char buf[18];
	itoa(value, buf, base);
	*this = buf;
}

String::String(unsigned int value, unsigned char base)
    3442:	ef 92       	push	r14
    3444:	ff 92       	push	r15
    3446:	0f 93       	push	r16
    3448:	1f 93       	push	r17
    344a:	df 93       	push	r29
    344c:	cf 93       	push	r28
    344e:	cd b7       	in	r28, 0x3d	; 61
    3450:	de b7       	in	r29, 0x3e	; 62
    3452:	61 97       	sbiw	r28, 0x11	; 17
    3454:	0f b6       	in	r0, 0x3f	; 63
    3456:	f8 94       	cli
    3458:	de bf       	out	0x3e, r29	; 62
    345a:	0f be       	out	0x3f, r0	; 63
    345c:	cd bf       	out	0x3d, r28	; 61
    345e:	7c 01       	movw	r14, r24
    3460:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3462:	f7 01       	movw	r30, r14
    3464:	11 82       	std	Z+1, r1	; 0x01
    3466:	10 82       	st	Z, r1
	capacity = 0;
    3468:	13 82       	std	Z+3, r1	; 0x03
    346a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    346c:	15 82       	std	Z+5, r1	; 0x05
    346e:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3470:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned int value, unsigned char base)
{
	init();
	char buf[17];
	utoa(value, buf, base);
    3472:	8e 01       	movw	r16, r28
    3474:	0f 5f       	subi	r16, 0xFF	; 255
    3476:	1f 4f       	sbci	r17, 0xFF	; 255
    3478:	b8 01       	movw	r22, r16
    347a:	50 e0       	ldi	r21, 0x00	; 0
    347c:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <utoa>
	*this = buf;
    3480:	c7 01       	movw	r24, r14
    3482:	b8 01       	movw	r22, r16
    3484:	0e 94 a7 19 	call	0x334e	; 0x334e <_ZN6StringaSEPKc>
}
    3488:	61 96       	adiw	r28, 0x11	; 17
    348a:	0f b6       	in	r0, 0x3f	; 63
    348c:	f8 94       	cli
    348e:	de bf       	out	0x3e, r29	; 62
    3490:	0f be       	out	0x3f, r0	; 63
    3492:	cd bf       	out	0x3d, r28	; 61
    3494:	cf 91       	pop	r28
    3496:	df 91       	pop	r29
    3498:	1f 91       	pop	r17
    349a:	0f 91       	pop	r16
    349c:	ff 90       	pop	r15
    349e:	ef 90       	pop	r14
    34a0:	08 95       	ret

000034a2 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
    34a2:	ef 92       	push	r14
    34a4:	ff 92       	push	r15
    34a6:	0f 93       	push	r16
    34a8:	1f 93       	push	r17
    34aa:	df 93       	push	r29
    34ac:	cf 93       	push	r28
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
    34b2:	62 97       	sbiw	r28, 0x12	; 18
    34b4:	0f b6       	in	r0, 0x3f	; 63
    34b6:	f8 94       	cli
    34b8:	de bf       	out	0x3e, r29	; 62
    34ba:	0f be       	out	0x3f, r0	; 63
    34bc:	cd bf       	out	0x3d, r28	; 61
    34be:	7c 01       	movw	r14, r24
    34c0:	cb 01       	movw	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    34c2:	f7 01       	movw	r30, r14
    34c4:	11 82       	std	Z+1, r1	; 0x01
    34c6:	10 82       	st	Z, r1
	capacity = 0;
    34c8:	13 82       	std	Z+3, r1	; 0x03
    34ca:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    34cc:	15 82       	std	Z+5, r1	; 0x05
    34ce:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    34d0:	16 82       	std	Z+6, r1	; 0x06

String::String(int value, unsigned char base)
{
	init();
	char buf[18];
	itoa(value, buf, base);
    34d2:	8e 01       	movw	r16, r28
    34d4:	0f 5f       	subi	r16, 0xFF	; 255
    34d6:	1f 4f       	sbci	r17, 0xFF	; 255
    34d8:	b8 01       	movw	r22, r16
    34da:	50 e0       	ldi	r21, 0x00	; 0
    34dc:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <itoa>
	*this = buf;
    34e0:	c7 01       	movw	r24, r14
    34e2:	b8 01       	movw	r22, r16
    34e4:	0e 94 a7 19 	call	0x334e	; 0x334e <_ZN6StringaSEPKc>
}
    34e8:	62 96       	adiw	r28, 0x12	; 18
    34ea:	0f b6       	in	r0, 0x3f	; 63
    34ec:	f8 94       	cli
    34ee:	de bf       	out	0x3e, r29	; 62
    34f0:	0f be       	out	0x3f, r0	; 63
    34f2:	cd bf       	out	0x3d, r28	; 61
    34f4:	cf 91       	pop	r28
    34f6:	df 91       	pop	r29
    34f8:	1f 91       	pop	r17
    34fa:	0f 91       	pop	r16
    34fc:	ff 90       	pop	r15
    34fe:	ef 90       	pop	r14
    3500:	08 95       	ret

00003502 <_ZN6StringC1Ehh>:
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
}

String::String(unsigned char value, unsigned char base)
    3502:	ef 92       	push	r14
    3504:	ff 92       	push	r15
    3506:	0f 93       	push	r16
    3508:	1f 93       	push	r17
    350a:	df 93       	push	r29
    350c:	cf 93       	push	r28
    350e:	cd b7       	in	r28, 0x3d	; 61
    3510:	de b7       	in	r29, 0x3e	; 62
    3512:	29 97       	sbiw	r28, 0x09	; 9
    3514:	0f b6       	in	r0, 0x3f	; 63
    3516:	f8 94       	cli
    3518:	de bf       	out	0x3e, r29	; 62
    351a:	0f be       	out	0x3f, r0	; 63
    351c:	cd bf       	out	0x3d, r28	; 61
    351e:	7c 01       	movw	r14, r24
    3520:	86 2f       	mov	r24, r22
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3522:	f7 01       	movw	r30, r14
    3524:	11 82       	std	Z+1, r1	; 0x01
    3526:	10 82       	st	Z, r1
	capacity = 0;
    3528:	13 82       	std	Z+3, r1	; 0x03
    352a:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    352c:	15 82       	std	Z+5, r1	; 0x05
    352e:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    3530:	16 82       	std	Z+6, r1	; 0x06

String::String(unsigned char value, unsigned char base)
{
	init();
	char buf[9];
	utoa(value, buf, base);
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	8e 01       	movw	r16, r28
    3536:	0f 5f       	subi	r16, 0xFF	; 255
    3538:	1f 4f       	sbci	r17, 0xFF	; 255
    353a:	b8 01       	movw	r22, r16
    353c:	50 e0       	ldi	r21, 0x00	; 0
    353e:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <utoa>
	*this = buf;
    3542:	c7 01       	movw	r24, r14
    3544:	b8 01       	movw	r22, r16
    3546:	0e 94 a7 19 	call	0x334e	; 0x334e <_ZN6StringaSEPKc>
}
    354a:	29 96       	adiw	r28, 0x09	; 9
    354c:	0f b6       	in	r0, 0x3f	; 63
    354e:	f8 94       	cli
    3550:	de bf       	out	0x3e, r29	; 62
    3552:	0f be       	out	0x3f, r0	; 63
    3554:	cd bf       	out	0x3d, r28	; 61
    3556:	cf 91       	pop	r28
    3558:	df 91       	pop	r29
    355a:	1f 91       	pop	r17
    355c:	0f 91       	pop	r16
    355e:	ff 90       	pop	r15
    3560:	ef 90       	pop	r14
    3562:	08 95       	ret

00003564 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
    3564:	df 93       	push	r29
    3566:	cf 93       	push	r28
    3568:	00 d0       	rcall	.+0      	; 0x356a <_ZN6StringC1Ec+0x6>
    356a:	cd b7       	in	r28, 0x3d	; 61
    356c:	de b7       	in	r29, 0x3e	; 62
    356e:	fc 01       	movw	r30, r24
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
    3570:	11 82       	std	Z+1, r1	; 0x01
    3572:	10 82       	st	Z, r1
	capacity = 0;
    3574:	13 82       	std	Z+3, r1	; 0x03
    3576:	12 82       	std	Z+2, r1	; 0x02
	len = 0;
    3578:	15 82       	std	Z+5, r1	; 0x05
    357a:	14 82       	std	Z+4, r1	; 0x04
	flags = 0;
    357c:	16 82       	std	Z+6, r1	; 0x06

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
    357e:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    3580:	1a 82       	std	Y+2, r1	; 0x02
	*this = buf;
    3582:	be 01       	movw	r22, r28
    3584:	6f 5f       	subi	r22, 0xFF	; 255
    3586:	7f 4f       	sbci	r23, 0xFF	; 255
    3588:	0e 94 a7 19 	call	0x334e	; 0x334e <_ZN6StringaSEPKc>
}
    358c:	0f 90       	pop	r0
    358e:	0f 90       	pop	r0
    3590:	cf 91       	pop	r28
    3592:	df 91       	pop	r29
    3594:	08 95       	ret

00003596 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
    3596:	ef 92       	push	r14
    3598:	ff 92       	push	r15
    359a:	0f 93       	push	r16
    359c:	1f 93       	push	r17
    359e:	cf 93       	push	r28
    35a0:	df 93       	push	r29
    35a2:	ec 01       	movw	r28, r24
    35a4:	7b 01       	movw	r14, r22
	unsigned int newlen = len + length;
    35a6:	0c 81       	ldd	r16, Y+4	; 0x04
    35a8:	1d 81       	ldd	r17, Y+5	; 0x05
	if (!cstr) return 0;
    35aa:	61 15       	cp	r22, r1
    35ac:	71 05       	cpc	r23, r1
    35ae:	b9 f0       	breq	.+46     	; 0x35de <_ZN6String6concatEPKcj+0x48>
	if (length == 0) return 1;
    35b0:	41 15       	cp	r20, r1
    35b2:	51 05       	cpc	r21, r1
    35b4:	91 f0       	breq	.+36     	; 0x35da <_ZN6String6concatEPKcj+0x44>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
    35b6:	04 0f       	add	r16, r20
    35b8:	15 1f       	adc	r17, r21
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
    35ba:	b8 01       	movw	r22, r16
    35bc:	0e 94 26 19 	call	0x324c	; 0x324c <_ZN6String7reserveEj>
    35c0:	88 23       	and	r24, r24
    35c2:	69 f0       	breq	.+26     	; 0x35de <_ZN6String6concatEPKcj+0x48>
	strcpy(buffer + len, cstr);
    35c4:	28 81       	ld	r18, Y
    35c6:	39 81       	ldd	r19, Y+1	; 0x01
    35c8:	8c 81       	ldd	r24, Y+4	; 0x04
    35ca:	9d 81       	ldd	r25, Y+5	; 0x05
    35cc:	82 0f       	add	r24, r18
    35ce:	93 1f       	adc	r25, r19
    35d0:	b7 01       	movw	r22, r14
    35d2:	0e 94 20 2a 	call	0x5440	; 0x5440 <strcpy>
	len = newlen;
    35d6:	1d 83       	std	Y+5, r17	; 0x05
    35d8:	0c 83       	std	Y+4, r16	; 0x04

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
    35da:	81 e0       	ldi	r24, 0x01	; 1
    35dc:	01 c0       	rjmp	.+2      	; 0x35e0 <_ZN6String6concatEPKcj+0x4a>
	if (!reserve(newlen)) return 0;
    35de:	80 e0       	ldi	r24, 0x00	; 0
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
    35e0:	df 91       	pop	r29
    35e2:	cf 91       	pop	r28
    35e4:	1f 91       	pop	r17
    35e6:	0f 91       	pop	r16
    35e8:	ff 90       	pop	r15
    35ea:	ef 90       	pop	r14
    35ec:	08 95       	ret

000035ee <_ZN6String6concatERKS_>:
/*********************************************/
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
    35ee:	fb 01       	movw	r30, r22
	return concat(s.buffer, s.len);
    35f0:	60 81       	ld	r22, Z
    35f2:	71 81       	ldd	r23, Z+1	; 0x01
    35f4:	44 81       	ldd	r20, Z+4	; 0x04
    35f6:	55 81       	ldd	r21, Z+5	; 0x05
    35f8:	0e 94 cb 1a 	call	0x3596	; 0x3596 <_ZN6String6concatEPKcj>
}
    35fc:	08 95       	ret

000035fe <_ZN6String6concatEPKc>:
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    35fe:	61 15       	cp	r22, r1
    3600:	71 05       	cpc	r23, r1
    3602:	61 f0       	breq	.+24     	; 0x361c <_ZN6String6concatEPKc+0x1e>
	return concat(cstr, strlen(cstr));
    3604:	db 01       	movw	r26, r22
    3606:	0d 90       	ld	r0, X+
    3608:	00 20       	and	r0, r0
    360a:	e9 f7       	brne	.-6      	; 0x3606 <_ZN6String6concatEPKc+0x8>
    360c:	ad 01       	movw	r20, r26
    360e:	41 50       	subi	r20, 0x01	; 1
    3610:	50 40       	sbci	r21, 0x00	; 0
    3612:	46 1b       	sub	r20, r22
    3614:	57 0b       	sbc	r21, r23
    3616:	0e 94 cb 1a 	call	0x3596	; 0x3596 <_ZN6String6concatEPKcj>
    361a:	08 95       	ret
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
    361c:	80 e0       	ldi	r24, 0x00	; 0
	return concat(cstr, strlen(cstr));
}
    361e:	08 95       	ret

00003620 <_ZN6String6concatEc>:

unsigned char String::concat(char c)
{
    3620:	df 93       	push	r29
    3622:	cf 93       	push	r28
    3624:	00 d0       	rcall	.+0      	; 0x3626 <_ZN6String6concatEc+0x6>
    3626:	cd b7       	in	r28, 0x3d	; 61
    3628:	de b7       	in	r29, 0x3e	; 62
	char buf[2];
	buf[0] = c;
    362a:	69 83       	std	Y+1, r22	; 0x01
	buf[1] = 0;
    362c:	1a 82       	std	Y+2, r1	; 0x02
	return concat(buf, 1);
    362e:	be 01       	movw	r22, r28
    3630:	6f 5f       	subi	r22, 0xFF	; 255
    3632:	7f 4f       	sbci	r23, 0xFF	; 255
    3634:	41 e0       	ldi	r20, 0x01	; 1
    3636:	50 e0       	ldi	r21, 0x00	; 0
    3638:	0e 94 cb 1a 	call	0x3596	; 0x3596 <_ZN6String6concatEPKcj>
}
    363c:	0f 90       	pop	r0
    363e:	0f 90       	pop	r0
    3640:	cf 91       	pop	r28
    3642:	df 91       	pop	r29
    3644:	08 95       	ret

00003646 <_ZN6String6concatEh>:

unsigned char String::concat(unsigned char num)
{
    3646:	ef 92       	push	r14
    3648:	ff 92       	push	r15
    364a:	0f 93       	push	r16
    364c:	1f 93       	push	r17
    364e:	df 93       	push	r29
    3650:	cf 93       	push	r28
    3652:	00 d0       	rcall	.+0      	; 0x3654 <_ZN6String6concatEh+0xe>
    3654:	00 d0       	rcall	.+0      	; 0x3656 <_ZN6String6concatEh+0x10>
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
    365a:	7c 01       	movw	r14, r24
    365c:	86 2f       	mov	r24, r22
	char buf[4];
	itoa(num, buf, 10);
    365e:	90 e0       	ldi	r25, 0x00	; 0
    3660:	8e 01       	movw	r16, r28
    3662:	0f 5f       	subi	r16, 0xFF	; 255
    3664:	1f 4f       	sbci	r17, 0xFF	; 255
    3666:	b8 01       	movw	r22, r16
    3668:	4a e0       	ldi	r20, 0x0A	; 10
    366a:	50 e0       	ldi	r21, 0x00	; 0
    366c:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <itoa>
	return concat(buf, strlen(buf));
    3670:	f8 01       	movw	r30, r16
    3672:	01 90       	ld	r0, Z+
    3674:	00 20       	and	r0, r0
    3676:	e9 f7       	brne	.-6      	; 0x3672 <_ZN6String6concatEh+0x2c>
    3678:	af 01       	movw	r20, r30
    367a:	41 50       	subi	r20, 0x01	; 1
    367c:	50 40       	sbci	r21, 0x00	; 0
    367e:	40 1b       	sub	r20, r16
    3680:	51 0b       	sbc	r21, r17
    3682:	c7 01       	movw	r24, r14
    3684:	b8 01       	movw	r22, r16
    3686:	0e 94 cb 1a 	call	0x3596	; 0x3596 <_ZN6String6concatEPKcj>
}
    368a:	0f 90       	pop	r0
    368c:	0f 90       	pop	r0
    368e:	0f 90       	pop	r0
    3690:	0f 90       	pop	r0
    3692:	cf 91       	pop	r28
    3694:	df 91       	pop	r29
    3696:	1f 91       	pop	r17
    3698:	0f 91       	pop	r16
    369a:	ff 90       	pop	r15
    369c:	ef 90       	pop	r14
    369e:	08 95       	ret

000036a0 <_ZN6String6concatEi>:

unsigned char String::concat(int num)
{
    36a0:	ef 92       	push	r14
    36a2:	ff 92       	push	r15
    36a4:	0f 93       	push	r16
    36a6:	1f 93       	push	r17
    36a8:	df 93       	push	r29
    36aa:	cf 93       	push	r28
    36ac:	cd b7       	in	r28, 0x3d	; 61
    36ae:	de b7       	in	r29, 0x3e	; 62
    36b0:	27 97       	sbiw	r28, 0x07	; 7
    36b2:	0f b6       	in	r0, 0x3f	; 63
    36b4:	f8 94       	cli
    36b6:	de bf       	out	0x3e, r29	; 62
    36b8:	0f be       	out	0x3f, r0	; 63
    36ba:	cd bf       	out	0x3d, r28	; 61
    36bc:	7c 01       	movw	r14, r24
    36be:	cb 01       	movw	r24, r22
	char buf[7];
	itoa(num, buf, 10);
    36c0:	8e 01       	movw	r16, r28
    36c2:	0f 5f       	subi	r16, 0xFF	; 255
    36c4:	1f 4f       	sbci	r17, 0xFF	; 255
    36c6:	b8 01       	movw	r22, r16
    36c8:	4a e0       	ldi	r20, 0x0A	; 10
    36ca:	50 e0       	ldi	r21, 0x00	; 0
    36cc:	0e 94 69 2a 	call	0x54d2	; 0x54d2 <itoa>
	return concat(buf, strlen(buf));
    36d0:	f8 01       	movw	r30, r16
    36d2:	01 90       	ld	r0, Z+
    36d4:	00 20       	and	r0, r0
    36d6:	e9 f7       	brne	.-6      	; 0x36d2 <_ZN6String6concatEi+0x32>
    36d8:	af 01       	movw	r20, r30
    36da:	41 50       	subi	r20, 0x01	; 1
    36dc:	50 40       	sbci	r21, 0x00	; 0
    36de:	40 1b       	sub	r20, r16
    36e0:	51 0b       	sbc	r21, r17
    36e2:	c7 01       	movw	r24, r14
    36e4:	b8 01       	movw	r22, r16
    36e6:	0e 94 cb 1a 	call	0x3596	; 0x3596 <_ZN6String6concatEPKcj>
}
    36ea:	27 96       	adiw	r28, 0x07	; 7
    36ec:	0f b6       	in	r0, 0x3f	; 63
    36ee:	f8 94       	cli
    36f0:	de bf       	out	0x3e, r29	; 62
    36f2:	0f be       	out	0x3f, r0	; 63
    36f4:	cd bf       	out	0x3d, r28	; 61
    36f6:	cf 91       	pop	r28
    36f8:	df 91       	pop	r29
    36fa:	1f 91       	pop	r17
    36fc:	0f 91       	pop	r16
    36fe:	ff 90       	pop	r15
    3700:	ef 90       	pop	r14
    3702:	08 95       	ret

00003704 <_ZN6String6concatEj>:

unsigned char String::concat(unsigned int num)
{
    3704:	ef 92       	push	r14
    3706:	ff 92       	push	r15
    3708:	0f 93       	push	r16
    370a:	1f 93       	push	r17
    370c:	df 93       	push	r29
    370e:	cf 93       	push	r28
    3710:	00 d0       	rcall	.+0      	; 0x3712 <_ZN6String6concatEj+0xe>
    3712:	00 d0       	rcall	.+0      	; 0x3714 <_ZN6String6concatEj+0x10>
    3714:	00 d0       	rcall	.+0      	; 0x3716 <_ZN6String6concatEj+0x12>
    3716:	cd b7       	in	r28, 0x3d	; 61
    3718:	de b7       	in	r29, 0x3e	; 62
    371a:	7c 01       	movw	r14, r24
    371c:	cb 01       	movw	r24, r22
	char buf[6];
	utoa(num, buf, 10);
    371e:	8e 01       	movw	r16, r28
    3720:	0f 5f       	subi	r16, 0xFF	; 255
    3722:	1f 4f       	sbci	r17, 0xFF	; 255
    3724:	b8 01       	movw	r22, r16
    3726:	4a e0       	ldi	r20, 0x0A	; 10
    3728:	50 e0       	ldi	r21, 0x00	; 0
    372a:	0e 94 f8 2a 	call	0x55f0	; 0x55f0 <utoa>
	return concat(buf, strlen(buf));
    372e:	f8 01       	movw	r30, r16
    3730:	01 90       	ld	r0, Z+
    3732:	00 20       	and	r0, r0
    3734:	e9 f7       	brne	.-6      	; 0x3730 <_ZN6String6concatEj+0x2c>
    3736:	af 01       	movw	r20, r30
    3738:	41 50       	subi	r20, 0x01	; 1
    373a:	50 40       	sbci	r21, 0x00	; 0
    373c:	40 1b       	sub	r20, r16
    373e:	51 0b       	sbc	r21, r17
    3740:	c7 01       	movw	r24, r14
    3742:	b8 01       	movw	r22, r16
    3744:	0e 94 cb 1a 	call	0x3596	; 0x3596 <_ZN6String6concatEPKcj>
}
    3748:	26 96       	adiw	r28, 0x06	; 6
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	de bf       	out	0x3e, r29	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	cd bf       	out	0x3d, r28	; 61
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	1f 91       	pop	r17
    375a:	0f 91       	pop	r16
    375c:	ff 90       	pop	r15
    375e:	ef 90       	pop	r14
    3760:	08 95       	ret

00003762 <_ZN6String6concatEl>:

unsigned char String::concat(long num)
{
    3762:	ef 92       	push	r14
    3764:	ff 92       	push	r15
    3766:	0f 93       	push	r16
    3768:	1f 93       	push	r17
    376a:	df 93       	push	r29
    376c:	cf 93       	push	r28
    376e:	cd b7       	in	r28, 0x3d	; 61
    3770:	de b7       	in	r29, 0x3e	; 62
    3772:	2c 97       	sbiw	r28, 0x0c	; 12
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	cd bf       	out	0x3d, r28	; 61
    377e:	7c 01       	movw	r14, r24
    3780:	cb 01       	movw	r24, r22
    3782:	ba 01       	movw	r22, r20
	char buf[12];
	ltoa(num, buf, 10);
    3784:	8e 01       	movw	r16, r28
    3786:	0f 5f       	subi	r16, 0xFF	; 255
    3788:	1f 4f       	sbci	r17, 0xFF	; 255
    378a:	a8 01       	movw	r20, r16
    378c:	2a e0       	ldi	r18, 0x0A	; 10
    378e:	30 e0       	ldi	r19, 0x00	; 0
    3790:	0e 94 8a 2a 	call	0x5514	; 0x5514 <ltoa>
	return concat(buf, strlen(buf));
    3794:	f8 01       	movw	r30, r16
    3796:	01 90       	ld	r0, Z+
    3798:	00 20       	and	r0, r0
    379a:	e9 f7       	brne	.-6      	; 0x3796 <_ZN6String6concatEl+0x34>
    379c:	af 01       	movw	r20, r30
    379e:	41 50       	subi	r20, 0x01	; 1
    37a0:	50 40       	sbci	r21, 0x00	; 0
    37a2:	40 1b       	sub	r20, r16
    37a4:	51 0b       	sbc	r21, r17
    37a6:	c7 01       	movw	r24, r14
    37a8:	b8 01       	movw	r22, r16
    37aa:	0e 94 cb 1a 	call	0x3596	; 0x3596 <_ZN6String6concatEPKcj>
}
    37ae:	2c 96       	adiw	r28, 0x0c	; 12
    37b0:	0f b6       	in	r0, 0x3f	; 63
    37b2:	f8 94       	cli
    37b4:	de bf       	out	0x3e, r29	; 62
    37b6:	0f be       	out	0x3f, r0	; 63
    37b8:	cd bf       	out	0x3d, r28	; 61
    37ba:	cf 91       	pop	r28
    37bc:	df 91       	pop	r29
    37be:	1f 91       	pop	r17
    37c0:	0f 91       	pop	r16
    37c2:	ff 90       	pop	r15
    37c4:	ef 90       	pop	r14
    37c6:	08 95       	ret

000037c8 <_ZN6String6concatEm>:

unsigned char String::concat(unsigned long num)
{
    37c8:	ef 92       	push	r14
    37ca:	ff 92       	push	r15
    37cc:	0f 93       	push	r16
    37ce:	1f 93       	push	r17
    37d0:	df 93       	push	r29
    37d2:	cf 93       	push	r28
    37d4:	cd b7       	in	r28, 0x3d	; 61
    37d6:	de b7       	in	r29, 0x3e	; 62
    37d8:	2b 97       	sbiw	r28, 0x0b	; 11
    37da:	0f b6       	in	r0, 0x3f	; 63
    37dc:	f8 94       	cli
    37de:	de bf       	out	0x3e, r29	; 62
    37e0:	0f be       	out	0x3f, r0	; 63
    37e2:	cd bf       	out	0x3d, r28	; 61
    37e4:	7c 01       	movw	r14, r24
    37e6:	cb 01       	movw	r24, r22
    37e8:	ba 01       	movw	r22, r20
	char buf[11];
	ultoa(num, buf, 10);
    37ea:	8e 01       	movw	r16, r28
    37ec:	0f 5f       	subi	r16, 0xFF	; 255
    37ee:	1f 4f       	sbci	r17, 0xFF	; 255
    37f0:	a8 01       	movw	r20, r16
    37f2:	2a e0       	ldi	r18, 0x0A	; 10
    37f4:	30 e0       	ldi	r19, 0x00	; 0
    37f6:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <ultoa>
	return concat(buf, strlen(buf));
    37fa:	f8 01       	movw	r30, r16
    37fc:	01 90       	ld	r0, Z+
    37fe:	00 20       	and	r0, r0
    3800:	e9 f7       	brne	.-6      	; 0x37fc <_ZN6String6concatEm+0x34>
    3802:	af 01       	movw	r20, r30
    3804:	41 50       	subi	r20, 0x01	; 1
    3806:	50 40       	sbci	r21, 0x00	; 0
    3808:	40 1b       	sub	r20, r16
    380a:	51 0b       	sbc	r21, r17
    380c:	c7 01       	movw	r24, r14
    380e:	b8 01       	movw	r22, r16
    3810:	0e 94 cb 1a 	call	0x3596	; 0x3596 <_ZN6String6concatEPKcj>
}
    3814:	2b 96       	adiw	r28, 0x0b	; 11
    3816:	0f b6       	in	r0, 0x3f	; 63
    3818:	f8 94       	cli
    381a:	de bf       	out	0x3e, r29	; 62
    381c:	0f be       	out	0x3f, r0	; 63
    381e:	cd bf       	out	0x3d, r28	; 61
    3820:	cf 91       	pop	r28
    3822:	df 91       	pop	r29
    3824:	1f 91       	pop	r17
    3826:	0f 91       	pop	r16
    3828:	ff 90       	pop	r15
    382a:	ef 90       	pop	r14
    382c:	08 95       	ret

0000382e <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
    382e:	0f 93       	push	r16
    3830:	1f 93       	push	r17
    3832:	8c 01       	movw	r16, r24
    3834:	fb 01       	movw	r30, r22
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
    3836:	60 81       	ld	r22, Z
    3838:	71 81       	ldd	r23, Z+1	; 0x01
    383a:	44 81       	ldd	r20, Z+4	; 0x04
    383c:	55 81       	ldd	r21, Z+5	; 0x05
    383e:	0e 94 cb 1a 	call	0x3596	; 0x3596 <_ZN6String6concatEPKcj>
    3842:	88 23       	and	r24, r24
    3844:	19 f4       	brne	.+6      	; 0x384c <_ZplRK15StringSumHelperRK6String+0x1e>
    3846:	c8 01       	movw	r24, r16
    3848:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZN6String10invalidateEv>
	return a;
}
    384c:	c8 01       	movw	r24, r16
    384e:	1f 91       	pop	r17
    3850:	0f 91       	pop	r16
    3852:	08 95       	ret

00003854 <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
    3854:	0f 93       	push	r16
    3856:	1f 93       	push	r17
    3858:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
    385a:	61 15       	cp	r22, r1
    385c:	71 05       	cpc	r23, r1
    385e:	69 f0       	breq	.+26     	; 0x387a <_ZplRK15StringSumHelperPKc+0x26>
    3860:	db 01       	movw	r26, r22
    3862:	0d 90       	ld	r0, X+
    3864:	00 20       	and	r0, r0
    3866:	e9 f7       	brne	.-6      	; 0x3862 <_ZplRK15StringSumHelperPKc+0xe>
    3868:	ad 01       	movw	r20, r26
    386a:	41 50       	subi	r20, 0x01	; 1
    386c:	50 40       	sbci	r21, 0x00	; 0
    386e:	46 1b       	sub	r20, r22
    3870:	57 0b       	sbc	r21, r23
    3872:	0e 94 cb 1a 	call	0x3596	; 0x3596 <_ZN6String6concatEPKcj>
    3876:	88 23       	and	r24, r24
    3878:	19 f4       	brne	.+6      	; 0x3880 <_ZplRK15StringSumHelperPKc+0x2c>
    387a:	c8 01       	movw	r24, r16
    387c:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZN6String10invalidateEv>
	return a;
}
    3880:	c8 01       	movw	r24, r16
    3882:	1f 91       	pop	r17
    3884:	0f 91       	pop	r16
    3886:	08 95       	ret

00003888 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
    3888:	0f 93       	push	r16
    388a:	1f 93       	push	r17
    388c:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
    388e:	0e 94 10 1b 	call	0x3620	; 0x3620 <_ZN6String6concatEc>
    3892:	88 23       	and	r24, r24
    3894:	19 f4       	brne	.+6      	; 0x389c <_ZplRK15StringSumHelperc+0x14>
    3896:	c8 01       	movw	r24, r16
    3898:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZN6String10invalidateEv>
	return a;
}
    389c:	c8 01       	movw	r24, r16
    389e:	1f 91       	pop	r17
    38a0:	0f 91       	pop	r16
    38a2:	08 95       	ret

000038a4 <_ZplRK15StringSumHelperh>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned char num)
{
    38a4:	0f 93       	push	r16
    38a6:	1f 93       	push	r17
    38a8:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    38aa:	0e 94 23 1b 	call	0x3646	; 0x3646 <_ZN6String6concatEh>
    38ae:	88 23       	and	r24, r24
    38b0:	19 f4       	brne	.+6      	; 0x38b8 <_ZplRK15StringSumHelperh+0x14>
    38b2:	c8 01       	movw	r24, r16
    38b4:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZN6String10invalidateEv>
	return a;
}
    38b8:	c8 01       	movw	r24, r16
    38ba:	1f 91       	pop	r17
    38bc:	0f 91       	pop	r16
    38be:	08 95       	ret

000038c0 <_ZplRK15StringSumHelperi>:

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
    38c0:	0f 93       	push	r16
    38c2:	1f 93       	push	r17
    38c4:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    38c6:	0e 94 50 1b 	call	0x36a0	; 0x36a0 <_ZN6String6concatEi>
    38ca:	88 23       	and	r24, r24
    38cc:	19 f4       	brne	.+6      	; 0x38d4 <_ZplRK15StringSumHelperi+0x14>
    38ce:	c8 01       	movw	r24, r16
    38d0:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZN6String10invalidateEv>
	return a;
}
    38d4:	c8 01       	movw	r24, r16
    38d6:	1f 91       	pop	r17
    38d8:	0f 91       	pop	r16
    38da:	08 95       	ret

000038dc <_ZplRK15StringSumHelperj>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned int num)
{
    38dc:	0f 93       	push	r16
    38de:	1f 93       	push	r17
    38e0:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    38e2:	0e 94 82 1b 	call	0x3704	; 0x3704 <_ZN6String6concatEj>
    38e6:	88 23       	and	r24, r24
    38e8:	19 f4       	brne	.+6      	; 0x38f0 <_ZplRK15StringSumHelperj+0x14>
    38ea:	c8 01       	movw	r24, r16
    38ec:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZN6String10invalidateEv>
	return a;
}
    38f0:	c8 01       	movw	r24, r16
    38f2:	1f 91       	pop	r17
    38f4:	0f 91       	pop	r16
    38f6:	08 95       	ret

000038f8 <_ZplRK15StringSumHelperl>:

StringSumHelper & operator + (const StringSumHelper &lhs, long num)
{
    38f8:	0f 93       	push	r16
    38fa:	1f 93       	push	r17
    38fc:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    38fe:	0e 94 b1 1b 	call	0x3762	; 0x3762 <_ZN6String6concatEl>
    3902:	88 23       	and	r24, r24
    3904:	19 f4       	brne	.+6      	; 0x390c <_ZplRK15StringSumHelperl+0x14>
    3906:	c8 01       	movw	r24, r16
    3908:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZN6String10invalidateEv>
	return a;
}
    390c:	c8 01       	movw	r24, r16
    390e:	1f 91       	pop	r17
    3910:	0f 91       	pop	r16
    3912:	08 95       	ret

00003914 <_ZplRK15StringSumHelperm>:

StringSumHelper & operator + (const StringSumHelper &lhs, unsigned long num)
{
    3914:	0f 93       	push	r16
    3916:	1f 93       	push	r17
    3918:	8c 01       	movw	r16, r24
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
    391a:	0e 94 e4 1b 	call	0x37c8	; 0x37c8 <_ZN6String6concatEm>
    391e:	88 23       	and	r24, r24
    3920:	19 f4       	brne	.+6      	; 0x3928 <_ZplRK15StringSumHelperm+0x14>
    3922:	c8 01       	movw	r24, r16
    3924:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <_ZN6String10invalidateEv>
	return a;
}
    3928:	c8 01       	movw	r24, r16
    392a:	1f 91       	pop	r17
    392c:	0f 91       	pop	r16
    392e:	08 95       	ret

00003930 <_ZNK6String9compareToERKS_>:
/*********************************************/
/*  Comparison                               */
/*********************************************/

int String::compareTo(const String &s) const
{
    3930:	cf 93       	push	r28
    3932:	df 93       	push	r29
    3934:	fc 01       	movw	r30, r24
    3936:	db 01       	movw	r26, r22
	if (!buffer || !s.buffer) {
    3938:	80 81       	ld	r24, Z
    393a:	91 81       	ldd	r25, Z+1	; 0x01
    393c:	00 97       	sbiw	r24, 0x00	; 0
    393e:	31 f0       	breq	.+12     	; 0x394c <_ZNK6String9compareToERKS_+0x1c>
    3940:	6d 91       	ld	r22, X+
    3942:	7c 91       	ld	r23, X
    3944:	11 97       	sbiw	r26, 0x01	; 1
    3946:	61 15       	cp	r22, r1
    3948:	71 05       	cpc	r23, r1
    394a:	e9 f4       	brne	.+58     	; 0x3986 <_ZNK6String9compareToERKS_+0x56>
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
    394c:	cd 91       	ld	r28, X+
    394e:	dc 91       	ld	r29, X
    3950:	11 97       	sbiw	r26, 0x01	; 1
    3952:	20 97       	sbiw	r28, 0x00	; 0
    3954:	69 f0       	breq	.+26     	; 0x3970 <_ZNK6String9compareToERKS_+0x40>
    3956:	14 96       	adiw	r26, 0x04	; 4
    3958:	2d 91       	ld	r18, X+
    395a:	3c 91       	ld	r19, X
    395c:	15 97       	sbiw	r26, 0x05	; 5
    395e:	21 15       	cp	r18, r1
    3960:	31 05       	cpc	r19, r1
    3962:	31 f0       	breq	.+12     	; 0x3970 <_ZNK6String9compareToERKS_+0x40>
    3964:	28 81       	ld	r18, Y
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	30 95       	com	r19
    396a:	21 95       	neg	r18
    396c:	3f 4f       	sbci	r19, 0xFF	; 255
    396e:	12 c0       	rjmp	.+36     	; 0x3994 <_ZNK6String9compareToERKS_+0x64>
		if (buffer && len > 0) return *(unsigned char *)buffer;
    3970:	00 97       	sbiw	r24, 0x00	; 0
    3972:	71 f0       	breq	.+28     	; 0x3990 <_ZNK6String9compareToERKS_+0x60>
    3974:	24 81       	ldd	r18, Z+4	; 0x04
    3976:	35 81       	ldd	r19, Z+5	; 0x05
    3978:	21 15       	cp	r18, r1
    397a:	31 05       	cpc	r19, r1
    397c:	49 f0       	breq	.+18     	; 0x3990 <_ZNK6String9compareToERKS_+0x60>
    397e:	fc 01       	movw	r30, r24
    3980:	20 81       	ld	r18, Z
    3982:	30 e0       	ldi	r19, 0x00	; 0
    3984:	07 c0       	rjmp	.+14     	; 0x3994 <_ZNK6String9compareToERKS_+0x64>
		return 0;
	}
	return strcmp(buffer, s.buffer);
    3986:	0e 94 17 2a 	call	0x542e	; 0x542e <strcmp>
    398a:	28 2f       	mov	r18, r24
    398c:	39 2f       	mov	r19, r25
    398e:	02 c0       	rjmp	.+4      	; 0x3994 <_ZNK6String9compareToERKS_+0x64>
int String::compareTo(const String &s) const
{
	if (!buffer || !s.buffer) {
		if (s.buffer && s.len > 0) return 0 - *(unsigned char *)s.buffer;
		if (buffer && len > 0) return *(unsigned char *)buffer;
		return 0;
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
	}
	return strcmp(buffer, s.buffer);
}
    3994:	c9 01       	movw	r24, r18
    3996:	df 91       	pop	r29
    3998:	cf 91       	pop	r28
    399a:	08 95       	ret

0000399c <_ZNK6String6equalsERKS_>:

unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
    399c:	fc 01       	movw	r30, r24
    399e:	44 81       	ldd	r20, Z+4	; 0x04
    39a0:	55 81       	ldd	r21, Z+5	; 0x05
    39a2:	fb 01       	movw	r30, r22
    39a4:	24 81       	ldd	r18, Z+4	; 0x04
    39a6:	35 81       	ldd	r19, Z+5	; 0x05
    39a8:	42 17       	cp	r20, r18
    39aa:	53 07       	cpc	r21, r19
    39ac:	29 f4       	brne	.+10     	; 0x39b8 <_ZNK6String6equalsERKS_+0x1c>
    39ae:	0e 94 98 1c 	call	0x3930	; 0x3930 <_ZNK6String9compareToERKS_>
		return 0;
	}
	return strcmp(buffer, s.buffer);
}

unsigned char String::equals(const String &s2) const
    39b2:	21 e0       	ldi	r18, 0x01	; 1
    39b4:	00 97       	sbiw	r24, 0x00	; 0
    39b6:	09 f0       	breq	.+2      	; 0x39ba <_ZNK6String6equalsERKS_+0x1e>
{
	return (len == s2.len && compareTo(s2) == 0);
    39b8:	20 e0       	ldi	r18, 0x00	; 0
}
    39ba:	82 2f       	mov	r24, r18
    39bc:	08 95       	ret

000039be <_ZNK6String6equalsEPKc>:

unsigned char String::equals(const char *cstr) const
{
    39be:	fc 01       	movw	r30, r24
	if (len == 0) return (cstr == NULL || *cstr == 0);
    39c0:	84 81       	ldd	r24, Z+4	; 0x04
    39c2:	95 81       	ldd	r25, Z+5	; 0x05
    39c4:	00 97       	sbiw	r24, 0x00	; 0
    39c6:	41 f4       	brne	.+16     	; 0x39d8 <_ZNK6String6equalsEPKc+0x1a>
    39c8:	61 15       	cp	r22, r1
    39ca:	71 05       	cpc	r23, r1
    39cc:	19 f0       	breq	.+6      	; 0x39d4 <_ZNK6String6equalsEPKc+0x16>
unsigned char String::equals(const String &s2) const
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
    39ce:	81 e0       	ldi	r24, 0x01	; 1
    39d0:	fb 01       	movw	r30, r22
    39d2:	09 c0       	rjmp	.+18     	; 0x39e6 <_ZNK6String6equalsEPKc+0x28>
{
	if (len == 0) return (cstr == NULL || *cstr == 0);
    39d4:	81 e0       	ldi	r24, 0x01	; 1
    39d6:	08 95       	ret
    39d8:	01 90       	ld	r0, Z+
    39da:	f0 81       	ld	r31, Z
    39dc:	e0 2d       	mov	r30, r0
	if (cstr == NULL) return buffer[0] == 0;
    39de:	61 15       	cp	r22, r1
    39e0:	71 05       	cpc	r23, r1
    39e2:	31 f4       	brne	.+12     	; 0x39f0 <_ZNK6String6equalsEPKc+0x32>
    39e4:	81 e0       	ldi	r24, 0x01	; 1
    39e6:	90 81       	ld	r25, Z
    39e8:	99 23       	and	r25, r25
    39ea:	59 f0       	breq	.+22     	; 0x3a02 <_ZNK6String6equalsEPKc+0x44>
    39ec:	80 e0       	ldi	r24, 0x00	; 0
    39ee:	08 95       	ret
	return strcmp(buffer, cstr) == 0;
    39f0:	cf 01       	movw	r24, r30
    39f2:	0e 94 17 2a 	call	0x542e	; 0x542e <strcmp>
    39f6:	9c 01       	movw	r18, r24
    39f8:	81 e0       	ldi	r24, 0x01	; 1
    39fa:	21 15       	cp	r18, r1
    39fc:	31 05       	cpc	r19, r1
    39fe:	09 f0       	breq	.+2      	; 0x3a02 <_ZNK6String6equalsEPKc+0x44>
    3a00:	80 e0       	ldi	r24, 0x00	; 0
}
    3a02:	08 95       	ret

00003a04 <_ZNK6StringltERKS_>:

unsigned char String::operator<(const String &rhs) const
{
	return compareTo(rhs) < 0;
    3a04:	0e 94 98 1c 	call	0x3930	; 0x3930 <_ZNK6String9compareToERKS_>
}
    3a08:	89 2f       	mov	r24, r25
    3a0a:	88 1f       	adc	r24, r24
    3a0c:	88 27       	eor	r24, r24
    3a0e:	88 1f       	adc	r24, r24
    3a10:	08 95       	ret

00003a12 <_ZNK6StringgtERKS_>:

unsigned char String::operator>(const String &rhs) const
{
	return compareTo(rhs) > 0;
    3a12:	0e 94 98 1c 	call	0x3930	; 0x3930 <_ZNK6String9compareToERKS_>
    3a16:	21 e0       	ldi	r18, 0x01	; 1
    3a18:	18 16       	cp	r1, r24
    3a1a:	19 06       	cpc	r1, r25
    3a1c:	0c f0       	brlt	.+2      	; 0x3a20 <_ZNK6StringgtERKS_+0xe>
    3a1e:	20 e0       	ldi	r18, 0x00	; 0
}
    3a20:	82 2f       	mov	r24, r18
    3a22:	08 95       	ret

00003a24 <_ZNK6StringleERKS_>:

unsigned char String::operator<=(const String &rhs) const
{
	return compareTo(rhs) <= 0;
    3a24:	0e 94 98 1c 	call	0x3930	; 0x3930 <_ZNK6String9compareToERKS_>
    3a28:	21 e0       	ldi	r18, 0x01	; 1
    3a2a:	18 16       	cp	r1, r24
    3a2c:	19 06       	cpc	r1, r25
    3a2e:	0c f4       	brge	.+2      	; 0x3a32 <_ZNK6StringleERKS_+0xe>
    3a30:	20 e0       	ldi	r18, 0x00	; 0
}
    3a32:	82 2f       	mov	r24, r18
    3a34:	08 95       	ret

00003a36 <_ZNK6StringgeERKS_>:

unsigned char String::operator>=(const String &rhs) const
{
	return compareTo(rhs) >= 0;
    3a36:	0e 94 98 1c 	call	0x3930	; 0x3930 <_ZNK6String9compareToERKS_>
    3a3a:	89 2f       	mov	r24, r25
    3a3c:	80 95       	com	r24
}
    3a3e:	88 1f       	adc	r24, r24
    3a40:	88 27       	eor	r24, r24
    3a42:	88 1f       	adc	r24, r24
    3a44:	08 95       	ret

00003a46 <_ZNK6String16equalsIgnoreCaseERKS_>:

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
    3a46:	ef 92       	push	r14
    3a48:	ff 92       	push	r15
    3a4a:	0f 93       	push	r16
    3a4c:	1f 93       	push	r17
    3a4e:	cf 93       	push	r28
    3a50:	df 93       	push	r29
    3a52:	fc 01       	movw	r30, r24
    3a54:	db 01       	movw	r26, r22
	if (this == &s2) return 1;
    3a56:	86 17       	cp	r24, r22
    3a58:	97 07       	cpc	r25, r23
    3a5a:	29 f1       	breq	.+74     	; 0x3aa6 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
	if (len != s2.len) return 0;
    3a5c:	84 81       	ldd	r24, Z+4	; 0x04
    3a5e:	95 81       	ldd	r25, Z+5	; 0x05
    3a60:	14 96       	adiw	r26, 0x04	; 4
    3a62:	2d 91       	ld	r18, X+
    3a64:	3c 91       	ld	r19, X
    3a66:	15 97       	sbiw	r26, 0x05	; 5
    3a68:	82 17       	cp	r24, r18
    3a6a:	93 07       	cpc	r25, r19
    3a6c:	f1 f4       	brne	.+60     	; 0x3aaa <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (len == 0) return 1;
    3a6e:	00 97       	sbiw	r24, 0x00	; 0
    3a70:	d1 f0       	breq	.+52     	; 0x3aa6 <_ZNK6String16equalsIgnoreCaseERKS_+0x60>
    3a72:	00 81       	ld	r16, Z
    3a74:	11 81       	ldd	r17, Z+1	; 0x01
    3a76:	cd 91       	ld	r28, X+
    3a78:	dc 91       	ld	r29, X
    3a7a:	11 97       	sbiw	r26, 0x01	; 1
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    3a7c:	0f c0       	rjmp	.+30     	; 0x3a9c <_ZNK6String16equalsIgnoreCaseERKS_+0x56>
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    3a7e:	99 27       	eor	r25, r25
    3a80:	87 fd       	sbrc	r24, 7
    3a82:	90 95       	com	r25
    3a84:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <tolower>
    3a88:	7c 01       	movw	r14, r24
    3a8a:	89 91       	ld	r24, Y+
    3a8c:	99 27       	eor	r25, r25
    3a8e:	87 fd       	sbrc	r24, 7
    3a90:	90 95       	com	r25
    3a92:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <tolower>
    3a96:	e8 16       	cp	r14, r24
    3a98:	f9 06       	cpc	r15, r25
    3a9a:	39 f4       	brne	.+14     	; 0x3aaa <_ZNK6String16equalsIgnoreCaseERKS_+0x64>
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
    3a9c:	f8 01       	movw	r30, r16
    3a9e:	81 91       	ld	r24, Z+
    3aa0:	8f 01       	movw	r16, r30
    3aa2:	88 23       	and	r24, r24
    3aa4:	61 f7       	brne	.-40     	; 0x3a7e <_ZNK6String16equalsIgnoreCaseERKS_+0x38>

unsigned char String::equalsIgnoreCase( const String &s2 ) const
{
	if (this == &s2) return 1;
	if (len != s2.len) return 0;
	if (len == 0) return 1;
    3aa6:	81 e0       	ldi	r24, 0x01	; 1
    3aa8:	01 c0       	rjmp	.+2      	; 0x3aac <_ZNK6String16equalsIgnoreCaseERKS_+0x66>
	const char *p1 = buffer;
	const char *p2 = s2.buffer;
	while (*p1) {
		if (tolower(*p1++) != tolower(*p2++)) return 0;
    3aaa:	80 e0       	ldi	r24, 0x00	; 0
	} 
	return 1;
}
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	1f 91       	pop	r17
    3ab2:	0f 91       	pop	r16
    3ab4:	ff 90       	pop	r15
    3ab6:	ef 90       	pop	r14
    3ab8:	08 95       	ret

00003aba <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
    3aba:	fc 01       	movw	r30, r24
    3abc:	db 01       	movw	r26, r22
    3abe:	ca 01       	movw	r24, r20
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    3ac0:	14 96       	adiw	r26, 0x04	; 4
    3ac2:	4d 91       	ld	r20, X+
    3ac4:	5c 91       	ld	r21, X
    3ac6:	15 97       	sbiw	r26, 0x05	; 5
    3ac8:	24 81       	ldd	r18, Z+4	; 0x04
    3aca:	35 81       	ldd	r19, Z+5	; 0x05
    3acc:	24 1b       	sub	r18, r20
    3ace:	35 0b       	sbc	r19, r21
    3ad0:	28 17       	cp	r18, r24
    3ad2:	39 07       	cpc	r19, r25
    3ad4:	a0 f0       	brcs	.+40     	; 0x3afe <_ZNK6String10startsWithERKS_j+0x44>
    3ad6:	20 81       	ld	r18, Z
    3ad8:	31 81       	ldd	r19, Z+1	; 0x01
    3ada:	21 15       	cp	r18, r1
    3adc:	31 05       	cpc	r19, r1
    3ade:	79 f0       	breq	.+30     	; 0x3afe <_ZNK6String10startsWithERKS_j+0x44>
    3ae0:	6d 91       	ld	r22, X+
    3ae2:	7c 91       	ld	r23, X
    3ae4:	11 97       	sbiw	r26, 0x01	; 1
    3ae6:	61 15       	cp	r22, r1
    3ae8:	71 05       	cpc	r23, r1
    3aea:	59 f0       	breq	.+22     	; 0x3b02 <_ZNK6String10startsWithERKS_j+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
    3aec:	82 0f       	add	r24, r18
    3aee:	93 1f       	adc	r25, r19
    3af0:	0e 94 27 2a 	call	0x544e	; 0x544e <strncmp>
    3af4:	9c 01       	movw	r18, r24
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	21 15       	cp	r18, r1
    3afa:	31 05       	cpc	r19, r1
    3afc:	19 f0       	breq	.+6      	; 0x3b04 <_ZNK6String10startsWithERKS_j+0x4a>
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
    3afe:	80 e0       	ldi	r24, 0x00	; 0
    3b00:	08 95       	ret
    3b02:	80 e0       	ldi	r24, 0x00	; 0
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
    3b04:	08 95       	ret

00003b06 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    3b06:	fc 01       	movw	r30, r24
    3b08:	44 81       	ldd	r20, Z+4	; 0x04
    3b0a:	55 81       	ldd	r21, Z+5	; 0x05
    3b0c:	fb 01       	movw	r30, r22
    3b0e:	24 81       	ldd	r18, Z+4	; 0x04
    3b10:	35 81       	ldd	r19, Z+5	; 0x05
    3b12:	42 17       	cp	r20, r18
    3b14:	53 07       	cpc	r21, r19
    3b16:	28 f0       	brcs	.+10     	; 0x3b22 <_ZNK6String10startsWithERKS_+0x1c>
	return startsWith(s2, 0);
    3b18:	40 e0       	ldi	r20, 0x00	; 0
    3b1a:	50 e0       	ldi	r21, 0x00	; 0
    3b1c:	0e 94 5d 1d 	call	0x3aba	; 0x3aba <_ZNK6String10startsWithERKS_j>
    3b20:	08 95       	ret
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
    3b22:	80 e0       	ldi	r24, 0x00	; 0
	return startsWith(s2, 0);
}
    3b24:	08 95       	ret

00003b26 <_ZNK6String8endsWithERKS_>:
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
    3b26:	fc 01       	movw	r30, r24
    3b28:	db 01       	movw	r26, r22
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    3b2a:	84 81       	ldd	r24, Z+4	; 0x04
    3b2c:	95 81       	ldd	r25, Z+5	; 0x05
    3b2e:	14 96       	adiw	r26, 0x04	; 4
    3b30:	4d 91       	ld	r20, X+
    3b32:	5c 91       	ld	r21, X
    3b34:	15 97       	sbiw	r26, 0x05	; 5
    3b36:	84 17       	cp	r24, r20
    3b38:	95 07       	cpc	r25, r21
    3b3a:	b0 f0       	brcs	.+44     	; 0x3b68 <_ZNK6String8endsWithERKS_+0x42>
    3b3c:	20 81       	ld	r18, Z
    3b3e:	31 81       	ldd	r19, Z+1	; 0x01
    3b40:	21 15       	cp	r18, r1
    3b42:	31 05       	cpc	r19, r1
    3b44:	89 f0       	breq	.+34     	; 0x3b68 <_ZNK6String8endsWithERKS_+0x42>
    3b46:	6d 91       	ld	r22, X+
    3b48:	7c 91       	ld	r23, X
    3b4a:	11 97       	sbiw	r26, 0x01	; 1
    3b4c:	61 15       	cp	r22, r1
    3b4e:	71 05       	cpc	r23, r1
    3b50:	69 f0       	breq	.+26     	; 0x3b6c <_ZNK6String8endsWithERKS_+0x46>
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
    3b52:	84 1b       	sub	r24, r20
    3b54:	95 0b       	sbc	r25, r21
    3b56:	82 0f       	add	r24, r18
    3b58:	93 1f       	adc	r25, r19
    3b5a:	0e 94 17 2a 	call	0x542e	; 0x542e <strcmp>
    3b5e:	9c 01       	movw	r18, r24
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	21 15       	cp	r18, r1
    3b64:	31 05       	cpc	r19, r1
    3b66:	19 f0       	breq	.+6      	; 0x3b6e <_ZNK6String8endsWithERKS_+0x48>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}

unsigned char String::endsWith( const String &s2 ) const
{
	if ( len < s2.len || !buffer || !s2.buffer) return 0;
    3b68:	80 e0       	ldi	r24, 0x00	; 0
    3b6a:	08 95       	ret
    3b6c:	80 e0       	ldi	r24, 0x00	; 0
	return strcmp(&buffer[len - s2.len], s2.buffer) == 0;
}
    3b6e:	08 95       	ret

00003b70 <_ZN6String9setCharAtEjc>:
{
	return operator[](loc);
}

void String::setCharAt(unsigned int loc, char c) 
{
    3b70:	fc 01       	movw	r30, r24
	if (loc < len) buffer[loc] = c;
    3b72:	84 81       	ldd	r24, Z+4	; 0x04
    3b74:	95 81       	ldd	r25, Z+5	; 0x05
    3b76:	68 17       	cp	r22, r24
    3b78:	79 07       	cpc	r23, r25
    3b7a:	30 f4       	brcc	.+12     	; 0x3b88 <_ZN6String9setCharAtEjc+0x18>
    3b7c:	01 90       	ld	r0, Z+
    3b7e:	f0 81       	ld	r31, Z
    3b80:	e0 2d       	mov	r30, r0
    3b82:	e6 0f       	add	r30, r22
    3b84:	f7 1f       	adc	r31, r23
    3b86:	40 83       	st	Z, r20
    3b88:	08 95       	ret

00003b8a <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
    3b8a:	fc 01       	movw	r30, r24
	static char dummy_writable_char;
	if (index >= len || !buffer) {
    3b8c:	84 81       	ldd	r24, Z+4	; 0x04
    3b8e:	95 81       	ldd	r25, Z+5	; 0x05
    3b90:	68 17       	cp	r22, r24
    3b92:	79 07       	cpc	r23, r25
    3b94:	20 f4       	brcc	.+8      	; 0x3b9e <_ZN6StringixEj+0x14>
    3b96:	80 81       	ld	r24, Z
    3b98:	91 81       	ldd	r25, Z+1	; 0x01
    3b9a:	00 97       	sbiw	r24, 0x00	; 0
    3b9c:	29 f4       	brne	.+10     	; 0x3ba8 <_ZN6StringixEj+0x1e>
		dummy_writable_char = 0;
    3b9e:	10 92 43 03 	sts	0x0343, r1
		return dummy_writable_char;
    3ba2:	63 e4       	ldi	r22, 0x43	; 67
    3ba4:	73 e0       	ldi	r23, 0x03	; 3
    3ba6:	02 c0       	rjmp	.+4      	; 0x3bac <_ZN6StringixEj+0x22>
	}
	return buffer[index];
    3ba8:	68 0f       	add	r22, r24
    3baa:	79 1f       	adc	r23, r25
}
    3bac:	cb 01       	movw	r24, r22
    3bae:	08 95       	ret

00003bb0 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
    3bb0:	fc 01       	movw	r30, r24
	if (index >= len || !buffer) return 0;
    3bb2:	84 81       	ldd	r24, Z+4	; 0x04
    3bb4:	95 81       	ldd	r25, Z+5	; 0x05
    3bb6:	68 17       	cp	r22, r24
    3bb8:	79 07       	cpc	r23, r25
    3bba:	48 f4       	brcc	.+18     	; 0x3bce <_ZNK6StringixEj+0x1e>
    3bbc:	80 81       	ld	r24, Z
    3bbe:	91 81       	ldd	r25, Z+1	; 0x01
    3bc0:	00 97       	sbiw	r24, 0x00	; 0
    3bc2:	39 f0       	breq	.+14     	; 0x3bd2 <_ZNK6StringixEj+0x22>
	return buffer[index];
    3bc4:	68 0f       	add	r22, r24
    3bc6:	79 1f       	adc	r23, r25
    3bc8:	fb 01       	movw	r30, r22
    3bca:	80 81       	ld	r24, Z
    3bcc:	08 95       	ret
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
    3bce:	80 e0       	ldi	r24, 0x00	; 0
    3bd0:	08 95       	ret
    3bd2:	80 e0       	ldi	r24, 0x00	; 0
	return buffer[index];
}
    3bd4:	08 95       	ret

00003bd6 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    3bd6:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <_ZNK6StringixEj>
}
    3bda:	08 95       	ret

00003bdc <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    3bdc:	0f 93       	push	r16
    3bde:	1f 93       	push	r17
    3be0:	cf 93       	push	r28
    3be2:	df 93       	push	r29
    3be4:	fc 01       	movw	r30, r24
    3be6:	8b 01       	movw	r16, r22
	if (!bufsize || !buf) return;
    3be8:	41 15       	cp	r20, r1
    3bea:	51 05       	cpc	r21, r1
    3bec:	f1 f0       	breq	.+60     	; 0x3c2a <_ZNK6String8getBytesEPhjj+0x4e>
    3bee:	61 15       	cp	r22, r1
    3bf0:	71 05       	cpc	r23, r1
    3bf2:	d9 f0       	breq	.+54     	; 0x3c2a <_ZNK6String8getBytesEPhjj+0x4e>
	if (index >= len) {
    3bf4:	c4 81       	ldd	r28, Z+4	; 0x04
    3bf6:	d5 81       	ldd	r29, Z+5	; 0x05
    3bf8:	2c 17       	cp	r18, r28
    3bfa:	3d 07       	cpc	r19, r29
    3bfc:	18 f0       	brcs	.+6      	; 0x3c04 <_ZNK6String8getBytesEPhjj+0x28>
		buf[0] = 0;
    3bfe:	fb 01       	movw	r30, r22
    3c00:	10 82       	st	Z, r1
		return;
    3c02:	13 c0       	rjmp	.+38     	; 0x3c2a <_ZNK6String8getBytesEPhjj+0x4e>
	}
	unsigned int n = bufsize - 1;
    3c04:	41 50       	subi	r20, 0x01	; 1
    3c06:	50 40       	sbci	r21, 0x00	; 0
	if (n > len - index) n = len - index;
    3c08:	c2 1b       	sub	r28, r18
    3c0a:	d3 0b       	sbc	r29, r19
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    3c0c:	4c 17       	cp	r20, r28
    3c0e:	5d 07       	cpc	r21, r29
    3c10:	08 f4       	brcc	.+2      	; 0x3c14 <_ZNK6String8getBytesEPhjj+0x38>
    3c12:	ea 01       	movw	r28, r20
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    3c14:	60 81       	ld	r22, Z
    3c16:	71 81       	ldd	r23, Z+1	; 0x01
    3c18:	62 0f       	add	r22, r18
    3c1a:	73 1f       	adc	r23, r19
    3c1c:	c8 01       	movw	r24, r16
    3c1e:	ae 01       	movw	r20, r28
    3c20:	0e 94 35 2a 	call	0x546a	; 0x546a <strncpy>
	buf[n] = 0;
    3c24:	c0 0f       	add	r28, r16
    3c26:	d1 1f       	adc	r29, r17
    3c28:	18 82       	st	Y, r1
}
    3c2a:	df 91       	pop	r29
    3c2c:	cf 91       	pop	r28
    3c2e:	1f 91       	pop	r17
    3c30:	0f 91       	pop	r16
    3c32:	08 95       	ret

00003c34 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
    3c34:	cf 93       	push	r28
    3c36:	df 93       	push	r29
    3c38:	fc 01       	movw	r30, r24
    3c3a:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    3c3c:	24 81       	ldd	r18, Z+4	; 0x04
    3c3e:	35 81       	ldd	r19, Z+5	; 0x05
    3c40:	42 17       	cp	r20, r18
    3c42:	53 07       	cpc	r21, r19
    3c44:	78 f4       	brcc	.+30     	; 0x3c64 <_ZNK6String7indexOfEcj+0x30>
	const char* temp = strchr(buffer + fromIndex, ch);
    3c46:	c0 81       	ld	r28, Z
    3c48:	d1 81       	ldd	r29, Z+1	; 0x01
    3c4a:	77 27       	eor	r23, r23
    3c4c:	67 fd       	sbrc	r22, 7
    3c4e:	70 95       	com	r23
    3c50:	8c 0f       	add	r24, r28
    3c52:	9d 1f       	adc	r25, r29
    3c54:	0e 94 0c 2a 	call	0x5418	; 0x5418 <strchr>
	if (temp == NULL) return -1;
    3c58:	00 97       	sbiw	r24, 0x00	; 0
    3c5a:	21 f0       	breq	.+8      	; 0x3c64 <_ZNK6String7indexOfEcj+0x30>
	return temp - buffer;
    3c5c:	9c 01       	movw	r18, r24
    3c5e:	2c 1b       	sub	r18, r28
    3c60:	3d 0b       	sbc	r19, r29
    3c62:	02 c0       	rjmp	.+4      	; 0x3c68 <_ZNK6String7indexOfEcj+0x34>

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
    3c64:	2f ef       	ldi	r18, 0xFF	; 255
    3c66:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    3c68:	c9 01       	movw	r24, r18
    3c6a:	df 91       	pop	r29
    3c6c:	cf 91       	pop	r28
    3c6e:	08 95       	ret

00003c70 <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
    3c70:	40 e0       	ldi	r20, 0x00	; 0
    3c72:	50 e0       	ldi	r21, 0x00	; 0
    3c74:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <_ZNK6String7indexOfEcj>
}
    3c78:	08 95       	ret

00003c7a <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
    3c7a:	cf 93       	push	r28
    3c7c:	df 93       	push	r29
    3c7e:	fc 01       	movw	r30, r24
    3c80:	ca 01       	movw	r24, r20
	if (fromIndex >= len) return -1;
    3c82:	24 81       	ldd	r18, Z+4	; 0x04
    3c84:	35 81       	ldd	r19, Z+5	; 0x05
    3c86:	42 17       	cp	r20, r18
    3c88:	53 07       	cpc	r21, r19
    3c8a:	78 f4       	brcc	.+30     	; 0x3caa <_ZNK6String7indexOfERKS_j+0x30>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
    3c8c:	c0 81       	ld	r28, Z
    3c8e:	d1 81       	ldd	r29, Z+1	; 0x01
    3c90:	fb 01       	movw	r30, r22
    3c92:	60 81       	ld	r22, Z
    3c94:	71 81       	ldd	r23, Z+1	; 0x01
    3c96:	8c 0f       	add	r24, r28
    3c98:	9d 1f       	adc	r25, r29
    3c9a:	0e 94 4f 2a 	call	0x549e	; 0x549e <strstr>
	if (found == NULL) return -1;
    3c9e:	00 97       	sbiw	r24, 0x00	; 0
    3ca0:	21 f0       	breq	.+8      	; 0x3caa <_ZNK6String7indexOfERKS_j+0x30>
	return found - buffer;
    3ca2:	9c 01       	movw	r18, r24
    3ca4:	2c 1b       	sub	r18, r28
    3ca6:	3d 0b       	sbc	r19, r29
    3ca8:	02 c0       	rjmp	.+4      	; 0x3cae <_ZNK6String7indexOfERKS_j+0x34>

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
    3caa:	2f ef       	ldi	r18, 0xFF	; 255
    3cac:	3f ef       	ldi	r19, 0xFF	; 255
	return found - buffer;
}
    3cae:	c9 01       	movw	r24, r18
    3cb0:	df 91       	pop	r29
    3cb2:	cf 91       	pop	r28
    3cb4:	08 95       	ret

00003cb6 <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
    3cb6:	40 e0       	ldi	r20, 0x00	; 0
    3cb8:	50 e0       	ldi	r21, 0x00	; 0
    3cba:	0e 94 3d 1e 	call	0x3c7a	; 0x3c7a <_ZNK6String7indexOfERKS_j>
}
    3cbe:	08 95       	ret

00003cc0 <_ZNK6String11lastIndexOfEcj>:
{
	return lastIndexOf(theChar, len - 1);
}

int String::lastIndexOf(char ch, unsigned int fromIndex) const
{
    3cc0:	df 92       	push	r13
    3cc2:	ef 92       	push	r14
    3cc4:	ff 92       	push	r15
    3cc6:	0f 93       	push	r16
    3cc8:	1f 93       	push	r17
    3cca:	cf 93       	push	r28
    3ccc:	df 93       	push	r29
    3cce:	ec 01       	movw	r28, r24
	if (fromIndex >= len || fromIndex < 0) return -1;
    3cd0:	8c 81       	ldd	r24, Y+4	; 0x04
    3cd2:	9d 81       	ldd	r25, Y+5	; 0x05
    3cd4:	48 17       	cp	r20, r24
    3cd6:	59 07       	cpc	r21, r25
    3cd8:	f8 f4       	brcc	.+62     	; 0x3d18 <_ZNK6String11lastIndexOfEcj+0x58>
	char tempchar = buffer[fromIndex + 1];
    3cda:	7a 01       	movw	r14, r20
    3cdc:	08 94       	sec
    3cde:	e1 1c       	adc	r14, r1
    3ce0:	f1 1c       	adc	r15, r1
    3ce2:	e8 81       	ld	r30, Y
    3ce4:	f9 81       	ldd	r31, Y+1	; 0x01
    3ce6:	ee 0d       	add	r30, r14
    3ce8:	ff 1d       	adc	r31, r15
    3cea:	d0 80       	ld	r13, Z
	buffer[fromIndex + 1] = '\0';
    3cec:	10 82       	st	Z, r1
	char* temp = strrchr( buffer, ch );
    3cee:	08 81       	ld	r16, Y
    3cf0:	19 81       	ldd	r17, Y+1	; 0x01
    3cf2:	77 27       	eor	r23, r23
    3cf4:	67 fd       	sbrc	r22, 7
    3cf6:	70 95       	com	r23
    3cf8:	c8 01       	movw	r24, r16
    3cfa:	0e 94 44 2a 	call	0x5488	; 0x5488 <strrchr>
	buffer[fromIndex + 1] = tempchar;
    3cfe:	0e 0d       	add	r16, r14
    3d00:	1f 1d       	adc	r17, r15
    3d02:	f8 01       	movw	r30, r16
    3d04:	d0 82       	st	Z, r13
	if (temp == NULL) return -1;
    3d06:	00 97       	sbiw	r24, 0x00	; 0
    3d08:	39 f0       	breq	.+14     	; 0x3d18 <_ZNK6String11lastIndexOfEcj+0x58>
	return temp - buffer;
    3d0a:	28 81       	ld	r18, Y
    3d0c:	39 81       	ldd	r19, Y+1	; 0x01
    3d0e:	ac 01       	movw	r20, r24
    3d10:	42 1b       	sub	r20, r18
    3d12:	53 0b       	sbc	r21, r19
    3d14:	9a 01       	movw	r18, r20
    3d16:	02 c0       	rjmp	.+4      	; 0x3d1c <_ZNK6String11lastIndexOfEcj+0x5c>
	if (fromIndex >= len || fromIndex < 0) return -1;
	char tempchar = buffer[fromIndex + 1];
	buffer[fromIndex + 1] = '\0';
	char* temp = strrchr( buffer, ch );
	buffer[fromIndex + 1] = tempchar;
	if (temp == NULL) return -1;
    3d18:	2f ef       	ldi	r18, 0xFF	; 255
    3d1a:	3f ef       	ldi	r19, 0xFF	; 255
	return temp - buffer;
}
    3d1c:	c9 01       	movw	r24, r18
    3d1e:	df 91       	pop	r29
    3d20:	cf 91       	pop	r28
    3d22:	1f 91       	pop	r17
    3d24:	0f 91       	pop	r16
    3d26:	ff 90       	pop	r15
    3d28:	ef 90       	pop	r14
    3d2a:	df 90       	pop	r13
    3d2c:	08 95       	ret

00003d2e <_ZNK6String11lastIndexOfEc>:
	return found - buffer;
}

int String::lastIndexOf( char theChar ) const
{
	return lastIndexOf(theChar, len - 1);
    3d2e:	fc 01       	movw	r30, r24
    3d30:	44 81       	ldd	r20, Z+4	; 0x04
    3d32:	55 81       	ldd	r21, Z+5	; 0x05
    3d34:	41 50       	subi	r20, 0x01	; 1
    3d36:	50 40       	sbci	r21, 0x00	; 0
    3d38:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <_ZNK6String11lastIndexOfEcj>
}
    3d3c:	08 95       	ret

00003d3e <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
    3d3e:	af 92       	push	r10
    3d40:	bf 92       	push	r11
    3d42:	cf 92       	push	r12
    3d44:	df 92       	push	r13
    3d46:	ef 92       	push	r14
    3d48:	ff 92       	push	r15
    3d4a:	0f 93       	push	r16
    3d4c:	1f 93       	push	r17
    3d4e:	cf 93       	push	r28
    3d50:	df 93       	push	r29
    3d52:	fc 01       	movw	r30, r24
    3d54:	6b 01       	movw	r12, r22
    3d56:	8a 01       	movw	r16, r20
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    3d58:	db 01       	movw	r26, r22
    3d5a:	14 96       	adiw	r26, 0x04	; 4
    3d5c:	2d 91       	ld	r18, X+
    3d5e:	3c 91       	ld	r19, X
    3d60:	15 97       	sbiw	r26, 0x05	; 5
    3d62:	21 15       	cp	r18, r1
    3d64:	31 05       	cpc	r19, r1
    3d66:	51 f1       	breq	.+84     	; 0x3dbc <_ZNK6String11lastIndexOfERKS_j+0x7e>
    3d68:	84 81       	ldd	r24, Z+4	; 0x04
    3d6a:	95 81       	ldd	r25, Z+5	; 0x05
    3d6c:	00 97       	sbiw	r24, 0x00	; 0
    3d6e:	31 f1       	breq	.+76     	; 0x3dbc <_ZNK6String11lastIndexOfERKS_j+0x7e>
    3d70:	82 17       	cp	r24, r18
    3d72:	93 07       	cpc	r25, r19
    3d74:	18 f1       	brcs	.+70     	; 0x3dbc <_ZNK6String11lastIndexOfERKS_j+0x7e>
	if (fromIndex >= len) fromIndex = len - 1;
    3d76:	48 17       	cp	r20, r24
    3d78:	59 07       	cpc	r21, r25
    3d7a:	18 f0       	brcs	.+6      	; 0x3d82 <_ZNK6String11lastIndexOfERKS_j+0x44>
    3d7c:	8c 01       	movw	r16, r24
    3d7e:	01 50       	subi	r16, 0x01	; 1
    3d80:	10 40       	sbci	r17, 0x00	; 0
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3d82:	e0 80       	ld	r14, Z
    3d84:	f1 80       	ldd	r15, Z+1	; 0x01
    3d86:	c7 01       	movw	r24, r14

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
    3d88:	cf ef       	ldi	r28, 0xFF	; 255
    3d8a:	df ef       	ldi	r29, 0xFF	; 255
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3d8c:	57 01       	movw	r10, r14
    3d8e:	a0 0e       	add	r10, r16
    3d90:	b1 1e       	adc	r11, r17
    3d92:	10 c0       	rjmp	.+32     	; 0x3db4 <_ZNK6String11lastIndexOfERKS_j+0x76>
		p = strstr(p, s2.buffer);
    3d94:	f6 01       	movw	r30, r12
    3d96:	60 81       	ld	r22, Z
    3d98:	71 81       	ldd	r23, Z+1	; 0x01
    3d9a:	0e 94 4f 2a 	call	0x549e	; 0x549e <strstr>
		if (!p) break;
    3d9e:	00 97       	sbiw	r24, 0x00	; 0
    3da0:	79 f0       	breq	.+30     	; 0x3dc0 <_ZNK6String11lastIndexOfERKS_j+0x82>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
    3da2:	9c 01       	movw	r18, r24
    3da4:	2e 19       	sub	r18, r14
    3da6:	3f 09       	sbc	r19, r15
    3da8:	02 17       	cp	r16, r18
    3daa:	13 07       	cpc	r17, r19
    3dac:	08 f4       	brcc	.+2      	; 0x3db0 <_ZNK6String11lastIndexOfERKS_j+0x72>
    3dae:	9e 01       	movw	r18, r28
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
    3db0:	01 96       	adiw	r24, 0x01	; 1
    3db2:	e9 01       	movw	r28, r18
    3db4:	a8 16       	cp	r10, r24
    3db6:	b9 06       	cpc	r11, r25
    3db8:	68 f7       	brcc	.-38     	; 0x3d94 <_ZNK6String11lastIndexOfERKS_j+0x56>
    3dba:	02 c0       	rjmp	.+4      	; 0x3dc0 <_ZNK6String11lastIndexOfERKS_j+0x82>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len || fromIndex < 0) return -1;
    3dbc:	cf ef       	ldi	r28, 0xFF	; 255
    3dbe:	df ef       	ldi	r29, 0xFF	; 255
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
    3dc0:	ce 01       	movw	r24, r28
    3dc2:	df 91       	pop	r29
    3dc4:	cf 91       	pop	r28
    3dc6:	1f 91       	pop	r17
    3dc8:	0f 91       	pop	r16
    3dca:	ff 90       	pop	r15
    3dcc:	ef 90       	pop	r14
    3dce:	df 90       	pop	r13
    3dd0:	cf 90       	pop	r12
    3dd2:	bf 90       	pop	r11
    3dd4:	af 90       	pop	r10
    3dd6:	08 95       	ret

00003dd8 <_ZNK6String11lastIndexOfERKS_>:
	return temp - buffer;
}

int String::lastIndexOf(const String &s2) const
{
	return lastIndexOf(s2, len - s2.len);
    3dd8:	fc 01       	movw	r30, r24
    3dda:	44 81       	ldd	r20, Z+4	; 0x04
    3ddc:	55 81       	ldd	r21, Z+5	; 0x05
    3dde:	fb 01       	movw	r30, r22
    3de0:	24 81       	ldd	r18, Z+4	; 0x04
    3de2:	35 81       	ldd	r19, Z+5	; 0x05
    3de4:	42 1b       	sub	r20, r18
    3de6:	53 0b       	sbc	r21, r19
    3de8:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <_ZNK6String11lastIndexOfERKS_j>
}
    3dec:	08 95       	ret

00003dee <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
    3dee:	af 92       	push	r10
    3df0:	bf 92       	push	r11
    3df2:	cf 92       	push	r12
    3df4:	df 92       	push	r13
    3df6:	ef 92       	push	r14
    3df8:	ff 92       	push	r15
    3dfa:	0f 93       	push	r16
    3dfc:	1f 93       	push	r17
    3dfe:	cf 93       	push	r28
    3e00:	df 93       	push	r29
    3e02:	f8 2e       	mov	r15, r24
    3e04:	e9 2e       	mov	r14, r25
    3e06:	6b 01       	movw	r12, r22
    3e08:	8a 01       	movw	r16, r20
    3e0a:	e9 01       	movw	r28, r18
	if (left > right) {
    3e0c:	24 17       	cp	r18, r20
    3e0e:	35 07       	cpc	r19, r21
    3e10:	48 f4       	brcc	.+18     	; 0x3e24 <_ZNK6String9substringEjj+0x36>
    3e12:	34 2f       	mov	r19, r20
    3e14:	21 2f       	mov	r18, r17
    3e16:	8e 01       	movw	r16, r28
    3e18:	c9 01       	movw	r24, r18
    3e1a:	a9 2e       	mov	r10, r25
    3e1c:	e5 01       	movw	r28, r10
    3e1e:	5e 01       	movw	r10, r28
    3e20:	b2 2e       	mov	r11, r18
    3e22:	e5 01       	movw	r28, r10
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
    3e24:	8f 2d       	mov	r24, r15
    3e26:	9e 2d       	mov	r25, r14
    3e28:	68 ed       	ldi	r22, 0xD8	; 216
    3e2a:	71 e0       	ldi	r23, 0x01	; 1
    3e2c:	0e 94 66 19 	call	0x32cc	; 0x32cc <_ZN6StringC1EPKc>
	if (left > len) return out;
    3e30:	d6 01       	movw	r26, r12
    3e32:	14 96       	adiw	r26, 0x04	; 4
    3e34:	8d 91       	ld	r24, X+
    3e36:	9c 91       	ld	r25, X
    3e38:	15 97       	sbiw	r26, 0x05	; 5
    3e3a:	80 17       	cp	r24, r16
    3e3c:	91 07       	cpc	r25, r17
    3e3e:	d8 f0       	brcs	.+54     	; 0x3e76 <_ZNK6String9substringEjj+0x88>
    3e40:	8c 17       	cp	r24, r28
    3e42:	9d 07       	cpc	r25, r29
    3e44:	08 f4       	brcc	.+2      	; 0x3e48 <_ZNK6String9substringEjj+0x5a>
    3e46:	ec 01       	movw	r28, r24
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
    3e48:	d6 01       	movw	r26, r12
    3e4a:	ed 91       	ld	r30, X+
    3e4c:	fc 91       	ld	r31, X
    3e4e:	11 97       	sbiw	r26, 0x01	; 1
    3e50:	ec 0f       	add	r30, r28
    3e52:	fd 1f       	adc	r31, r29
    3e54:	b0 80       	ld	r11, Z
	buffer[right] = '\0';	
    3e56:	10 82       	st	Z, r1
	out = buffer + left;  // pointer arithmetic
    3e58:	6d 91       	ld	r22, X+
    3e5a:	7c 91       	ld	r23, X
    3e5c:	60 0f       	add	r22, r16
    3e5e:	71 1f       	adc	r23, r17
    3e60:	8f 2d       	mov	r24, r15
    3e62:	9e 2d       	mov	r25, r14
    3e64:	0e 94 a7 19 	call	0x334e	; 0x334e <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
    3e68:	d6 01       	movw	r26, r12
    3e6a:	ed 91       	ld	r30, X+
    3e6c:	fc 91       	ld	r31, X
    3e6e:	11 97       	sbiw	r26, 0x01	; 1
    3e70:	ec 0f       	add	r30, r28
    3e72:	fd 1f       	adc	r31, r29
    3e74:	b0 82       	st	Z, r11
	return out;
}
    3e76:	8f 2d       	mov	r24, r15
    3e78:	9e 2d       	mov	r25, r14
    3e7a:	df 91       	pop	r29
    3e7c:	cf 91       	pop	r28
    3e7e:	1f 91       	pop	r17
    3e80:	0f 91       	pop	r16
    3e82:	ff 90       	pop	r15
    3e84:	ef 90       	pop	r14
    3e86:	df 90       	pop	r13
    3e88:	cf 90       	pop	r12
    3e8a:	bf 90       	pop	r11
    3e8c:	af 90       	pop	r10
    3e8e:	08 95       	ret

00003e90 <_ZNK6String9substringEj>:
	}
	return found;
}

String String::substring( unsigned int left ) const
{
    3e90:	cf 93       	push	r28
    3e92:	df 93       	push	r29
    3e94:	ec 01       	movw	r28, r24
	return substring(left, len);
    3e96:	fb 01       	movw	r30, r22
    3e98:	24 81       	ldd	r18, Z+4	; 0x04
    3e9a:	35 81       	ldd	r19, Z+5	; 0x05
    3e9c:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <_ZNK6String9substringEjj>
}
    3ea0:	ce 01       	movw	r24, r28
    3ea2:	df 91       	pop	r29
    3ea4:	cf 91       	pop	r28
    3ea6:	08 95       	ret

00003ea8 <_ZN6String7replaceEcc>:
/*  Modification                             */
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
    3ea8:	dc 01       	movw	r26, r24
    3eaa:	ed 91       	ld	r30, X+
    3eac:	fc 91       	ld	r31, X
    3eae:	11 97       	sbiw	r26, 0x01	; 1
    3eb0:	30 97       	sbiw	r30, 0x00	; 0
    3eb2:	29 f4       	brne	.+10     	; 0x3ebe <_ZN6String7replaceEcc+0x16>
    3eb4:	08 95       	ret
	for (char *p = buffer; *p; p++) {
		if (*p == find) *p = replace;
    3eb6:	86 17       	cp	r24, r22
    3eb8:	09 f4       	brne	.+2      	; 0x3ebc <_ZN6String7replaceEcc+0x14>
    3eba:	40 83       	st	Z, r20
/*********************************************/

void String::replace(char find, char replace)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    3ebc:	31 96       	adiw	r30, 0x01	; 1
    3ebe:	80 81       	ld	r24, Z
    3ec0:	88 23       	and	r24, r24
    3ec2:	c9 f7       	brne	.-14     	; 0x3eb6 <_ZN6String7replaceEcc+0xe>
    3ec4:	08 95       	ret

00003ec6 <_ZN6String7replaceERKS_S1_>:
		if (*p == find) *p = replace;
	}
}

void String::replace(const String& find, const String& replace)
{
    3ec6:	2f 92       	push	r2
    3ec8:	3f 92       	push	r3
    3eca:	4f 92       	push	r4
    3ecc:	5f 92       	push	r5
    3ece:	6f 92       	push	r6
    3ed0:	7f 92       	push	r7
    3ed2:	8f 92       	push	r8
    3ed4:	9f 92       	push	r9
    3ed6:	af 92       	push	r10
    3ed8:	bf 92       	push	r11
    3eda:	cf 92       	push	r12
    3edc:	df 92       	push	r13
    3ede:	ef 92       	push	r14
    3ee0:	ff 92       	push	r15
    3ee2:	0f 93       	push	r16
    3ee4:	1f 93       	push	r17
    3ee6:	cf 93       	push	r28
    3ee8:	df 93       	push	r29
    3eea:	7c 01       	movw	r14, r24
    3eec:	2b 01       	movw	r4, r22
    3eee:	6a 01       	movw	r12, r20
	if (len == 0 || find.len == 0) return;
    3ef0:	dc 01       	movw	r26, r24
    3ef2:	14 96       	adiw	r26, 0x04	; 4
    3ef4:	6d 90       	ld	r6, X+
    3ef6:	7c 90       	ld	r7, X
    3ef8:	15 97       	sbiw	r26, 0x05	; 5
    3efa:	61 14       	cp	r6, r1
    3efc:	71 04       	cpc	r7, r1
    3efe:	09 f4       	brne	.+2      	; 0x3f02 <_ZN6String7replaceERKS_S1_+0x3c>
    3f00:	d9 c0       	rjmp	.+434    	; 0x40b4 <_ZN6String7replaceERKS_S1_+0x1ee>
    3f02:	fb 01       	movw	r30, r22
    3f04:	84 80       	ldd	r8, Z+4	; 0x04
    3f06:	95 80       	ldd	r9, Z+5	; 0x05
    3f08:	81 14       	cp	r8, r1
    3f0a:	91 04       	cpc	r9, r1
    3f0c:	09 f4       	brne	.+2      	; 0x3f10 <_ZN6String7replaceERKS_S1_+0x4a>
    3f0e:	d2 c0       	rjmp	.+420    	; 0x40b4 <_ZN6String7replaceERKS_S1_+0x1ee>
	int diff = replace.len - find.len;
    3f10:	da 01       	movw	r26, r20
    3f12:	14 96       	adiw	r26, 0x04	; 4
    3f14:	ad 90       	ld	r10, X+
    3f16:	bc 90       	ld	r11, X
    3f18:	15 97       	sbiw	r26, 0x05	; 5
    3f1a:	a8 18       	sub	r10, r8
    3f1c:	b9 08       	sbc	r11, r9
	char *readFrom = buffer;
    3f1e:	fc 01       	movw	r30, r24
    3f20:	00 81       	ld	r16, Z
    3f22:	11 81       	ldd	r17, Z+1	; 0x01
	char *foundAt;
	if (diff == 0) {
    3f24:	a1 14       	cp	r10, r1
    3f26:	b1 04       	cpc	r11, r1
    3f28:	f1 f4       	brne	.+60     	; 0x3f66 <_ZN6String7replaceERKS_S1_+0xa0>
    3f2a:	13 c0       	rjmp	.+38     	; 0x3f52 <_ZN6String7replaceERKS_S1_+0x8c>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			memcpy(foundAt, replace.buffer, replace.len);
    3f2c:	d6 01       	movw	r26, r12
    3f2e:	6c 91       	ld	r22, X
    3f30:	11 96       	adiw	r26, 0x01	; 1
    3f32:	7c 91       	ld	r23, X
    3f34:	11 97       	sbiw	r26, 0x01	; 1
    3f36:	14 96       	adiw	r26, 0x04	; 4
    3f38:	4d 91       	ld	r20, X+
    3f3a:	5c 91       	ld	r21, X
    3f3c:	15 97       	sbiw	r26, 0x05	; 5
    3f3e:	ce 01       	movw	r24, r28
    3f40:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <memcpy>
			readFrom = foundAt + replace.len;
    3f44:	d6 01       	movw	r26, r12
    3f46:	14 96       	adiw	r26, 0x04	; 4
    3f48:	0d 91       	ld	r16, X+
    3f4a:	1c 91       	ld	r17, X
    3f4c:	15 97       	sbiw	r26, 0x05	; 5
    3f4e:	0c 0f       	add	r16, r28
    3f50:	1d 1f       	adc	r17, r29
	if (len == 0 || find.len == 0) return;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3f52:	f2 01       	movw	r30, r4
    3f54:	60 81       	ld	r22, Z
    3f56:	71 81       	ldd	r23, Z+1	; 0x01
    3f58:	c8 01       	movw	r24, r16
    3f5a:	0e 94 4f 2a 	call	0x549e	; 0x549e <strstr>
    3f5e:	ec 01       	movw	r28, r24
    3f60:	00 97       	sbiw	r24, 0x00	; 0
    3f62:	21 f7       	brne	.-56     	; 0x3f2c <_ZN6String7replaceERKS_S1_+0x66>
    3f64:	a7 c0       	rjmp	.+334    	; 0x40b4 <_ZN6String7replaceERKS_S1_+0x1ee>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
    3f66:	b7 fc       	sbrc	r11, 7
    3f68:	02 c0       	rjmp	.+4      	; 0x3f6e <_ZN6String7replaceERKS_S1_+0xa8>
    3f6a:	e3 01       	movw	r28, r6
    3f6c:	42 c0       	rjmp	.+132    	; 0x3ff2 <_ZN6String7replaceERKS_S1_+0x12c>
    3f6e:	48 01       	movw	r8, r16
    3f70:	2d c0       	rjmp	.+90     	; 0x3fcc <_ZN6String7replaceERKS_S1_+0x106>
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
    3f72:	e3 01       	movw	r28, r6
    3f74:	c0 1b       	sub	r28, r16
    3f76:	d1 0b       	sbc	r29, r17
			memcpy(writeTo, readFrom, n);
    3f78:	c4 01       	movw	r24, r8
    3f7a:	b8 01       	movw	r22, r16
    3f7c:	ae 01       	movw	r20, r28
    3f7e:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <memcpy>
			writeTo += n;
    3f82:	c8 0d       	add	r28, r8
    3f84:	d9 1d       	adc	r29, r9
			memcpy(writeTo, replace.buffer, replace.len);
    3f86:	d6 01       	movw	r26, r12
    3f88:	6c 91       	ld	r22, X
    3f8a:	11 96       	adiw	r26, 0x01	; 1
    3f8c:	7c 91       	ld	r23, X
    3f8e:	11 97       	sbiw	r26, 0x01	; 1
    3f90:	14 96       	adiw	r26, 0x04	; 4
    3f92:	4d 91       	ld	r20, X+
    3f94:	5c 91       	ld	r21, X
    3f96:	15 97       	sbiw	r26, 0x05	; 5
    3f98:	ce 01       	movw	r24, r28
    3f9a:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <memcpy>
			writeTo += replace.len;
    3f9e:	d6 01       	movw	r26, r12
    3fa0:	14 96       	adiw	r26, 0x04	; 4
    3fa2:	8d 90       	ld	r8, X+
    3fa4:	9c 90       	ld	r9, X
    3fa6:	15 97       	sbiw	r26, 0x05	; 5
    3fa8:	8c 0e       	add	r8, r28
    3faa:	9d 1e       	adc	r9, r29
			readFrom = foundAt + find.len;
    3fac:	f2 01       	movw	r30, r4
    3fae:	04 81       	ldd	r16, Z+4	; 0x04
    3fb0:	15 81       	ldd	r17, Z+5	; 0x05
    3fb2:	06 0d       	add	r16, r6
    3fb4:	17 1d       	adc	r17, r7
			len += diff;
    3fb6:	d7 01       	movw	r26, r14
    3fb8:	14 96       	adiw	r26, 0x04	; 4
    3fba:	8d 91       	ld	r24, X+
    3fbc:	9c 91       	ld	r25, X
    3fbe:	15 97       	sbiw	r26, 0x05	; 5
    3fc0:	8a 0d       	add	r24, r10
    3fc2:	9b 1d       	adc	r25, r11
    3fc4:	15 96       	adiw	r26, 0x05	; 5
    3fc6:	9c 93       	st	X, r25
    3fc8:	8e 93       	st	-X, r24
    3fca:	14 97       	sbiw	r26, 0x04	; 4
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3fcc:	f2 01       	movw	r30, r4
    3fce:	60 81       	ld	r22, Z
    3fd0:	71 81       	ldd	r23, Z+1	; 0x01
    3fd2:	c8 01       	movw	r24, r16
    3fd4:	0e 94 4f 2a 	call	0x549e	; 0x549e <strstr>
    3fd8:	3c 01       	movw	r6, r24
    3fda:	00 97       	sbiw	r24, 0x00	; 0
    3fdc:	51 f6       	brne	.-108    	; 0x3f72 <_ZN6String7replaceERKS_S1_+0xac>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
    3fde:	c4 01       	movw	r24, r8
    3fe0:	b8 01       	movw	r22, r16
    3fe2:	0e 94 20 2a 	call	0x5440	; 0x5440 <strcpy>
    3fe6:	66 c0       	rjmp	.+204    	; 0x40b4 <_ZN6String7replaceERKS_S1_+0x1ee>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			readFrom = foundAt + find.len;
    3fe8:	8c 01       	movw	r16, r24
    3fea:	08 0d       	add	r16, r8
    3fec:	19 1d       	adc	r17, r9
			size += diff;
    3fee:	ca 0d       	add	r28, r10
    3ff0:	db 1d       	adc	r29, r11
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
    3ff2:	d2 01       	movw	r26, r4
    3ff4:	6d 91       	ld	r22, X+
    3ff6:	7c 91       	ld	r23, X
    3ff8:	c8 01       	movw	r24, r16
    3ffa:	0e 94 4f 2a 	call	0x549e	; 0x549e <strstr>
    3ffe:	00 97       	sbiw	r24, 0x00	; 0
    4000:	99 f7       	brne	.-26     	; 0x3fe8 <_ZN6String7replaceERKS_S1_+0x122>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
    4002:	c6 15       	cp	r28, r6
    4004:	d7 05       	cpc	r29, r7
    4006:	09 f4       	brne	.+2      	; 0x400a <_ZN6String7replaceERKS_S1_+0x144>
    4008:	55 c0       	rjmp	.+170    	; 0x40b4 <_ZN6String7replaceERKS_S1_+0x1ee>
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
    400a:	f7 01       	movw	r30, r14
    400c:	82 81       	ldd	r24, Z+2	; 0x02
    400e:	93 81       	ldd	r25, Z+3	; 0x03
    4010:	8c 17       	cp	r24, r28
    4012:	9d 07       	cpc	r25, r29
    4014:	08 f0       	brcs	.+2      	; 0x4018 <_ZN6String7replaceERKS_S1_+0x152>
    4016:	45 c0       	rjmp	.+138    	; 0x40a2 <_ZN6String7replaceERKS_S1_+0x1dc>
    4018:	c7 01       	movw	r24, r14
    401a:	be 01       	movw	r22, r28
    401c:	0e 94 0c 19 	call	0x3218	; 0x3218 <_ZN6String12changeBufferEj>
    4020:	88 23       	and	r24, r24
    4022:	09 f4       	brne	.+2      	; 0x4026 <_ZN6String7replaceERKS_S1_+0x160>
    4024:	47 c0       	rjmp	.+142    	; 0x40b4 <_ZN6String7replaceERKS_S1_+0x1ee>
    4026:	3d c0       	rjmp	.+122    	; 0x40a2 <_ZN6String7replaceERKS_S1_+0x1dc>
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    4028:	c7 01       	movw	r24, r14
    402a:	b2 01       	movw	r22, r4
    402c:	a9 01       	movw	r20, r18
    402e:	0e 94 9f 1e 	call	0x3d3e	; 0x3d3e <_ZNK6String11lastIndexOfERKS_j>
    4032:	ec 01       	movw	r28, r24
    4034:	97 fd       	sbrc	r25, 7
    4036:	3e c0       	rjmp	.+124    	; 0x40b4 <_ZN6String7replaceERKS_S1_+0x1ee>
			readFrom = buffer + index + find.len;
    4038:	d7 01       	movw	r26, r14
    403a:	6d 91       	ld	r22, X+
    403c:	7c 91       	ld	r23, X
    403e:	11 97       	sbiw	r26, 0x01	; 1
    4040:	f2 01       	movw	r30, r4
    4042:	84 81       	ldd	r24, Z+4	; 0x04
    4044:	95 81       	ldd	r25, Z+5	; 0x05
    4046:	8c 0f       	add	r24, r28
    4048:	9d 1f       	adc	r25, r29
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
    404a:	68 0f       	add	r22, r24
    404c:	79 1f       	adc	r23, r25
    404e:	14 96       	adiw	r26, 0x04	; 4
    4050:	4d 91       	ld	r20, X+
    4052:	5c 91       	ld	r21, X
    4054:	15 97       	sbiw	r26, 0x05	; 5
    4056:	48 1b       	sub	r20, r24
    4058:	59 0b       	sbc	r21, r25
    405a:	cb 01       	movw	r24, r22
    405c:	8a 0d       	add	r24, r10
    405e:	9b 1d       	adc	r25, r11
    4060:	0e 94 fa 29 	call	0x53f4	; 0x53f4 <memmove>
			len += diff;
    4064:	d7 01       	movw	r26, r14
    4066:	14 96       	adiw	r26, 0x04	; 4
    4068:	8d 91       	ld	r24, X+
    406a:	9c 91       	ld	r25, X
    406c:	15 97       	sbiw	r26, 0x05	; 5
    406e:	8a 0d       	add	r24, r10
    4070:	9b 1d       	adc	r25, r11
    4072:	15 96       	adiw	r26, 0x05	; 5
    4074:	9c 93       	st	X, r25
    4076:	8e 93       	st	-X, r24
    4078:	14 97       	sbiw	r26, 0x04	; 4
			buffer[len] = 0;
    407a:	ed 91       	ld	r30, X+
    407c:	fc 91       	ld	r31, X
    407e:	11 97       	sbiw	r26, 0x01	; 1
    4080:	e8 0f       	add	r30, r24
    4082:	f9 1f       	adc	r31, r25
    4084:	10 82       	st	Z, r1
			memcpy(buffer + index, replace.buffer, replace.len);
    4086:	2d 91       	ld	r18, X+
    4088:	3c 91       	ld	r19, X
    408a:	2c 0f       	add	r18, r28
    408c:	3d 1f       	adc	r19, r29
    408e:	f6 01       	movw	r30, r12
    4090:	60 81       	ld	r22, Z
    4092:	71 81       	ldd	r23, Z+1	; 0x01
    4094:	44 81       	ldd	r20, Z+4	; 0x04
    4096:	55 81       	ldd	r21, Z+5	; 0x05
    4098:	c9 01       	movw	r24, r18
    409a:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <memcpy>
			index--;
    409e:	9e 01       	movw	r18, r28
    40a0:	05 c0       	rjmp	.+10     	; 0x40ac <_ZN6String7replaceERKS_S1_+0x1e6>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return;
		if (size > capacity && !changeBuffer(size)) return; // XXX: tell user!
		int index = len - 1;
    40a2:	d7 01       	movw	r26, r14
    40a4:	14 96       	adiw	r26, 0x04	; 4
    40a6:	2d 91       	ld	r18, X+
    40a8:	3c 91       	ld	r19, X
    40aa:	15 97       	sbiw	r26, 0x05	; 5
    40ac:	21 50       	subi	r18, 0x01	; 1
    40ae:	30 40       	sbci	r19, 0x00	; 0
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
    40b0:	37 ff       	sbrs	r19, 7
    40b2:	ba cf       	rjmp	.-140    	; 0x4028 <_ZN6String7replaceERKS_S1_+0x162>
			buffer[len] = 0;
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
}
    40b4:	df 91       	pop	r29
    40b6:	cf 91       	pop	r28
    40b8:	1f 91       	pop	r17
    40ba:	0f 91       	pop	r16
    40bc:	ff 90       	pop	r15
    40be:	ef 90       	pop	r14
    40c0:	df 90       	pop	r13
    40c2:	cf 90       	pop	r12
    40c4:	bf 90       	pop	r11
    40c6:	af 90       	pop	r10
    40c8:	9f 90       	pop	r9
    40ca:	8f 90       	pop	r8
    40cc:	7f 90       	pop	r7
    40ce:	6f 90       	pop	r6
    40d0:	5f 90       	pop	r5
    40d2:	4f 90       	pop	r4
    40d4:	3f 90       	pop	r3
    40d6:	2f 90       	pop	r2
    40d8:	08 95       	ret

000040da <_ZN6String11toLowerCaseEv>:

void String::toLowerCase(void)
{
    40da:	cf 93       	push	r28
    40dc:	df 93       	push	r29
	if (!buffer) return;
    40de:	fc 01       	movw	r30, r24
    40e0:	c0 81       	ld	r28, Z
    40e2:	d1 81       	ldd	r29, Z+1	; 0x01
    40e4:	20 97       	sbiw	r28, 0x00	; 0
    40e6:	39 f4       	brne	.+14     	; 0x40f6 <_ZN6String11toLowerCaseEv+0x1c>
    40e8:	09 c0       	rjmp	.+18     	; 0x40fc <_ZN6String11toLowerCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = tolower(*p);
    40ea:	99 27       	eor	r25, r25
    40ec:	87 fd       	sbrc	r24, 7
    40ee:	90 95       	com	r25
    40f0:	0e 94 e1 29 	call	0x53c2	; 0x53c2 <tolower>
    40f4:	89 93       	st	Y+, r24
}

void String::toLowerCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    40f6:	88 81       	ld	r24, Y
    40f8:	88 23       	and	r24, r24
    40fa:	b9 f7       	brne	.-18     	; 0x40ea <_ZN6String11toLowerCaseEv+0x10>
		*p = tolower(*p);
	}
}
    40fc:	df 91       	pop	r29
    40fe:	cf 91       	pop	r28
    4100:	08 95       	ret

00004102 <_ZN6String11toUpperCaseEv>:

void String::toUpperCase(void)
{
    4102:	cf 93       	push	r28
    4104:	df 93       	push	r29
	if (!buffer) return;
    4106:	fc 01       	movw	r30, r24
    4108:	c0 81       	ld	r28, Z
    410a:	d1 81       	ldd	r29, Z+1	; 0x01
    410c:	20 97       	sbiw	r28, 0x00	; 0
    410e:	39 f4       	brne	.+14     	; 0x411e <_ZN6String11toUpperCaseEv+0x1c>
    4110:	09 c0       	rjmp	.+18     	; 0x4124 <_ZN6String11toUpperCaseEv+0x22>
	for (char *p = buffer; *p; p++) {
		*p = toupper(*p);
    4112:	99 27       	eor	r25, r25
    4114:	87 fd       	sbrc	r24, 7
    4116:	90 95       	com	r25
    4118:	0e 94 e9 29 	call	0x53d2	; 0x53d2 <toupper>
    411c:	89 93       	st	Y+, r24
}

void String::toUpperCase(void)
{
	if (!buffer) return;
	for (char *p = buffer; *p; p++) {
    411e:	88 81       	ld	r24, Y
    4120:	88 23       	and	r24, r24
    4122:	b9 f7       	brne	.-18     	; 0x4112 <_ZN6String11toUpperCaseEv+0x10>
		*p = toupper(*p);
	}
}
    4124:	df 91       	pop	r29
    4126:	cf 91       	pop	r28
    4128:	08 95       	ret

0000412a <_ZN6String4trimEv>:

void String::trim(void)
{
    412a:	af 92       	push	r10
    412c:	bf 92       	push	r11
    412e:	cf 92       	push	r12
    4130:	df 92       	push	r13
    4132:	ef 92       	push	r14
    4134:	ff 92       	push	r15
    4136:	0f 93       	push	r16
    4138:	1f 93       	push	r17
    413a:	cf 93       	push	r28
    413c:	df 93       	push	r29
    413e:	6c 01       	movw	r12, r24
	if (!buffer || len == 0) return;
    4140:	dc 01       	movw	r26, r24
    4142:	ed 90       	ld	r14, X+
    4144:	fc 90       	ld	r15, X
    4146:	11 97       	sbiw	r26, 0x01	; 1
    4148:	e1 14       	cp	r14, r1
    414a:	f1 04       	cpc	r15, r1
    414c:	09 f4       	brne	.+2      	; 0x4150 <_ZN6String4trimEv+0x26>
    414e:	43 c0       	rjmp	.+134    	; 0x41d6 <_ZN6String4trimEv+0xac>
    4150:	14 96       	adiw	r26, 0x04	; 4
    4152:	ad 90       	ld	r10, X+
    4154:	bc 90       	ld	r11, X
    4156:	15 97       	sbiw	r26, 0x05	; 5
    4158:	a1 14       	cp	r10, r1
    415a:	b1 04       	cpc	r11, r1
    415c:	e1 f1       	breq	.+120    	; 0x41d6 <_ZN6String4trimEv+0xac>
    415e:	87 01       	movw	r16, r14
    4160:	e8 01       	movw	r28, r16
	char *begin = buffer;
	while (isspace(*begin)) begin++;
    4162:	88 81       	ld	r24, Y
    4164:	0f 5f       	subi	r16, 0xFF	; 255
    4166:	1f 4f       	sbci	r17, 0xFF	; 255
    4168:	99 27       	eor	r25, r25
    416a:	87 fd       	sbrc	r24, 7
    416c:	90 95       	com	r25
    416e:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <isspace>
    4172:	00 97       	sbiw	r24, 0x00	; 0
    4174:	a9 f7       	brne	.-22     	; 0x4160 <_ZN6String4trimEv+0x36>
	char *end = buffer + len - 1;
    4176:	85 01       	movw	r16, r10
    4178:	01 50       	subi	r16, 0x01	; 1
    417a:	10 40       	sbci	r17, 0x00	; 0
    417c:	0e 0d       	add	r16, r14
    417e:	1f 1d       	adc	r17, r15
	while (isspace(*end) && end >= begin) end--;
    4180:	f8 01       	movw	r30, r16
    4182:	80 81       	ld	r24, Z
    4184:	99 27       	eor	r25, r25
    4186:	87 fd       	sbrc	r24, 7
    4188:	90 95       	com	r25
    418a:	0e 94 d9 29 	call	0x53b2	; 0x53b2 <isspace>
    418e:	00 97       	sbiw	r24, 0x00	; 0
    4190:	31 f0       	breq	.+12     	; 0x419e <_ZN6String4trimEv+0x74>
    4192:	0c 17       	cp	r16, r28
    4194:	1d 07       	cpc	r17, r29
    4196:	18 f0       	brcs	.+6      	; 0x419e <_ZN6String4trimEv+0x74>
    4198:	01 50       	subi	r16, 0x01	; 1
    419a:	10 40       	sbci	r17, 0x00	; 0
    419c:	f1 cf       	rjmp	.-30     	; 0x4180 <_ZN6String4trimEv+0x56>
	len = end + 1 - begin;
    419e:	0f 5f       	subi	r16, 0xFF	; 255
    41a0:	1f 4f       	sbci	r17, 0xFF	; 255
    41a2:	0c 1b       	sub	r16, r28
    41a4:	1d 0b       	sbc	r17, r29
    41a6:	d6 01       	movw	r26, r12
    41a8:	15 96       	adiw	r26, 0x05	; 5
    41aa:	1c 93       	st	X, r17
    41ac:	0e 93       	st	-X, r16
    41ae:	14 97       	sbiw	r26, 0x04	; 4
	if (begin > buffer) memcpy(buffer, begin, len);
    41b0:	ec 16       	cp	r14, r28
    41b2:	fd 06       	cpc	r15, r29
    41b4:	28 f4       	brcc	.+10     	; 0x41c0 <_ZN6String4trimEv+0x96>
    41b6:	c7 01       	movw	r24, r14
    41b8:	be 01       	movw	r22, r28
    41ba:	a8 01       	movw	r20, r16
    41bc:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <memcpy>
	buffer[len] = 0;
    41c0:	d6 01       	movw	r26, r12
    41c2:	ed 91       	ld	r30, X+
    41c4:	fc 91       	ld	r31, X
    41c6:	11 97       	sbiw	r26, 0x01	; 1
    41c8:	14 96       	adiw	r26, 0x04	; 4
    41ca:	8d 91       	ld	r24, X+
    41cc:	9c 91       	ld	r25, X
    41ce:	15 97       	sbiw	r26, 0x05	; 5
    41d0:	e8 0f       	add	r30, r24
    41d2:	f9 1f       	adc	r31, r25
    41d4:	10 82       	st	Z, r1
}
    41d6:	df 91       	pop	r29
    41d8:	cf 91       	pop	r28
    41da:	1f 91       	pop	r17
    41dc:	0f 91       	pop	r16
    41de:	ff 90       	pop	r15
    41e0:	ef 90       	pop	r14
    41e2:	df 90       	pop	r13
    41e4:	cf 90       	pop	r12
    41e6:	bf 90       	pop	r11
    41e8:	af 90       	pop	r10
    41ea:	08 95       	ret

000041ec <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
    41ec:	fc 01       	movw	r30, r24
    41ee:	80 81       	ld	r24, Z
    41f0:	91 81       	ldd	r25, Z+1	; 0x01
    41f2:	00 97       	sbiw	r24, 0x00	; 0
    41f4:	29 f0       	breq	.+10     	; 0x4200 <_ZNK6String5toIntEv+0x14>
    41f6:	0e 94 b2 29 	call	0x5364	; 0x5364 <atol>
    41fa:	9b 01       	movw	r18, r22
    41fc:	ac 01       	movw	r20, r24
    41fe:	03 c0       	rjmp	.+6      	; 0x4206 <_ZNK6String5toIntEv+0x1a>
	return 0;
    4200:	20 e0       	ldi	r18, 0x00	; 0
    4202:	30 e0       	ldi	r19, 0x00	; 0
    4204:	a9 01       	movw	r20, r18
}
    4206:	b9 01       	movw	r22, r18
    4208:	ca 01       	movw	r24, r20
    420a:	08 95       	ret

0000420c <_Znwj>:
#include <new.h>

void * operator new(size_t size)
{
  return malloc(size);
    420c:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <malloc>
}
    4210:	08 95       	ret

00004212 <_ZdlPv>:

void operator delete(void * ptr)
{
  free(ptr);
    4212:	0e 94 4e 28 	call	0x509c	; 0x509c <free>
} 
    4216:	08 95       	ret

00004218 <__cxa_guard_acquire>:

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
    4218:	21 e0       	ldi	r18, 0x01	; 1
    421a:	30 e0       	ldi	r19, 0x00	; 0
    421c:	fc 01       	movw	r30, r24
    421e:	80 81       	ld	r24, Z
    4220:	88 23       	and	r24, r24
    4222:	11 f0       	breq	.+4      	; 0x4228 <__cxa_guard_acquire+0x10>
    4224:	20 e0       	ldi	r18, 0x00	; 0
    4226:	30 e0       	ldi	r19, 0x00	; 0
    4228:	c9 01       	movw	r24, r18
    422a:	08 95       	ret

0000422c <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
    422c:	21 e0       	ldi	r18, 0x01	; 1
    422e:	fc 01       	movw	r30, r24
    4230:	20 83       	st	Z, r18
    4232:	08 95       	ret

00004234 <__cxa_guard_abort>:
void __cxa_guard_abort (__guard *) {}; 
    4234:	08 95       	ret

00004236 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    4236:	08 95       	ret

00004238 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
    4238:	cf 92       	push	r12
    423a:	df 92       	push	r13
    423c:	ef 92       	push	r14
    423e:	ff 92       	push	r15
    4240:	0f 93       	push	r16
    4242:	1f 93       	push	r17
    4244:	cf 93       	push	r28
    4246:	df 93       	push	r29
    4248:	6c 01       	movw	r12, r24
    424a:	7b 01       	movw	r14, r22
    424c:	8a 01       	movw	r16, r20
  size_t n = 0;
    424e:	c0 e0       	ldi	r28, 0x00	; 0
    4250:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
    4252:	0f c0       	rjmp	.+30     	; 0x4272 <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
    4254:	d7 01       	movw	r26, r14
    4256:	6d 91       	ld	r22, X+
    4258:	7d 01       	movw	r14, r26
    425a:	d6 01       	movw	r26, r12
    425c:	ed 91       	ld	r30, X+
    425e:	fc 91       	ld	r31, X
    4260:	01 90       	ld	r0, Z+
    4262:	f0 81       	ld	r31, Z
    4264:	e0 2d       	mov	r30, r0
    4266:	c6 01       	movw	r24, r12
    4268:	09 95       	icall
    426a:	c8 0f       	add	r28, r24
    426c:	d9 1f       	adc	r29, r25
    426e:	01 50       	subi	r16, 0x01	; 1
    4270:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
    4272:	01 15       	cp	r16, r1
    4274:	11 05       	cpc	r17, r1
    4276:	71 f7       	brne	.-36     	; 0x4254 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
    4278:	ce 01       	movw	r24, r28
    427a:	df 91       	pop	r29
    427c:	cf 91       	pop	r28
    427e:	1f 91       	pop	r17
    4280:	0f 91       	pop	r16
    4282:	ff 90       	pop	r15
    4284:	ef 90       	pop	r14
    4286:	df 90       	pop	r13
    4288:	cf 90       	pop	r12
    428a:	08 95       	ret

0000428c <_ZN5Print5writeEPKc>:
  
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }
  
    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) { return write((const uint8_t *)str, strlen(str)); }
    428c:	db 01       	movw	r26, r22
    428e:	0d 90       	ld	r0, X+
    4290:	00 20       	and	r0, r0
    4292:	e9 f7       	brne	.-6      	; 0x428e <_ZN5Print5writeEPKc+0x2>
    4294:	ad 01       	movw	r20, r26
    4296:	41 50       	subi	r20, 0x01	; 1
    4298:	50 40       	sbci	r21, 0x00	; 0
    429a:	46 1b       	sub	r20, r22
    429c:	57 0b       	sbc	r21, r23
    429e:	dc 01       	movw	r26, r24
    42a0:	ed 91       	ld	r30, X+
    42a2:	fc 91       	ld	r31, X
    42a4:	02 80       	ldd	r0, Z+2	; 0x02
    42a6:	f3 81       	ldd	r31, Z+3	; 0x03
    42a8:	e0 2d       	mov	r30, r0
    42aa:	09 95       	icall
    42ac:	08 95       	ret

000042ae <_ZN5Print5printEPK19__FlashStringHelper>:

size_t Print::print(const __FlashStringHelper *ifsh)
{
    42ae:	ef 92       	push	r14
    42b0:	ff 92       	push	r15
    42b2:	0f 93       	push	r16
    42b4:	1f 93       	push	r17
    42b6:	cf 93       	push	r28
    42b8:	df 93       	push	r29
    42ba:	7c 01       	movw	r14, r24
  const prog_char *p = (const prog_char *)ifsh;
    42bc:	06 2f       	mov	r16, r22
    42be:	17 2f       	mov	r17, r23
  size_t n = 0;
    42c0:	c0 e0       	ldi	r28, 0x00	; 0
    42c2:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
    42c4:	f8 01       	movw	r30, r16
  size_t n = 0;
  while (1) {
    unsigned char c = pgm_read_byte(p++);
    42c6:	0f 5f       	subi	r16, 0xFF	; 255
    42c8:	1f 4f       	sbci	r17, 0xFF	; 255
    42ca:	64 91       	lpm	r22, Z+
    if (c == 0) break;
    42cc:	66 23       	and	r22, r22
    42ce:	51 f0       	breq	.+20     	; 0x42e4 <_ZN5Print5printEPK19__FlashStringHelper+0x36>
    n += write(c);
    42d0:	f7 01       	movw	r30, r14
    42d2:	a0 81       	ld	r26, Z
    42d4:	b1 81       	ldd	r27, Z+1	; 0x01
    42d6:	ed 91       	ld	r30, X+
    42d8:	fc 91       	ld	r31, X
    42da:	c7 01       	movw	r24, r14
    42dc:	09 95       	icall
    42de:	c8 0f       	add	r28, r24
    42e0:	d9 1f       	adc	r29, r25

size_t Print::print(const __FlashStringHelper *ifsh)
{
  const prog_char *p = (const prog_char *)ifsh;
  size_t n = 0;
  while (1) {
    42e2:	f0 cf       	rjmp	.-32     	; 0x42c4 <_ZN5Print5printEPK19__FlashStringHelper+0x16>
    unsigned char c = pgm_read_byte(p++);
    if (c == 0) break;
    n += write(c);
  }
  return n;
}
    42e4:	ce 01       	movw	r24, r28
    42e6:	df 91       	pop	r29
    42e8:	cf 91       	pop	r28
    42ea:	1f 91       	pop	r17
    42ec:	0f 91       	pop	r16
    42ee:	ff 90       	pop	r15
    42f0:	ef 90       	pop	r14
    42f2:	08 95       	ret

000042f4 <_ZN5Print5printERK6String>:

size_t Print::print(const String &s)
{
    42f4:	af 92       	push	r10
    42f6:	bf 92       	push	r11
    42f8:	cf 92       	push	r12
    42fa:	df 92       	push	r13
    42fc:	ef 92       	push	r14
    42fe:	ff 92       	push	r15
    4300:	0f 93       	push	r16
    4302:	1f 93       	push	r17
    4304:	cf 93       	push	r28
    4306:	df 93       	push	r29
    4308:	7c 01       	movw	r14, r24
    430a:	6b 01       	movw	r12, r22
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    430c:	c0 e0       	ldi	r28, 0x00	; 0
    430e:	d0 e0       	ldi	r29, 0x00	; 0
  return n;
}

size_t Print::print(const String &s)
{
  size_t n = 0;
    4310:	00 e0       	ldi	r16, 0x00	; 0
    4312:	10 e0       	ldi	r17, 0x00	; 0
  for (uint16_t i = 0; i < s.length(); i++) {
    4314:	10 c0       	rjmp	.+32     	; 0x4336 <_ZN5Print5printERK6String+0x42>
    n += write(s[i]);
    4316:	d7 01       	movw	r26, r14
    4318:	ed 91       	ld	r30, X+
    431a:	fc 91       	ld	r31, X
    431c:	a0 80       	ld	r10, Z
    431e:	b1 80       	ldd	r11, Z+1	; 0x01
    4320:	c6 01       	movw	r24, r12
    4322:	be 01       	movw	r22, r28
    4324:	0e 94 d8 1d 	call	0x3bb0	; 0x3bb0 <_ZNK6StringixEj>
    4328:	68 2f       	mov	r22, r24
    432a:	c7 01       	movw	r24, r14
    432c:	f5 01       	movw	r30, r10
    432e:	09 95       	icall
    4330:	08 0f       	add	r16, r24
    4332:	19 1f       	adc	r17, r25
}

size_t Print::print(const String &s)
{
  size_t n = 0;
  for (uint16_t i = 0; i < s.length(); i++) {
    4334:	21 96       	adiw	r28, 0x01	; 1
    4336:	f6 01       	movw	r30, r12
    4338:	84 81       	ldd	r24, Z+4	; 0x04
    433a:	95 81       	ldd	r25, Z+5	; 0x05
    433c:	c8 17       	cp	r28, r24
    433e:	d9 07       	cpc	r29, r25
    4340:	50 f3       	brcs	.-44     	; 0x4316 <_ZN5Print5printERK6String+0x22>
    n += write(s[i]);
  }
  return n;
}
    4342:	c8 01       	movw	r24, r16
    4344:	df 91       	pop	r29
    4346:	cf 91       	pop	r28
    4348:	1f 91       	pop	r17
    434a:	0f 91       	pop	r16
    434c:	ff 90       	pop	r15
    434e:	ef 90       	pop	r14
    4350:	df 90       	pop	r13
    4352:	cf 90       	pop	r12
    4354:	bf 90       	pop	r11
    4356:	af 90       	pop	r10
    4358:	08 95       	ret

0000435a <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
  return write(str);
    435a:	0e 94 46 21 	call	0x428c	; 0x428c <_ZN5Print5writeEPKc>
}
    435e:	08 95       	ret

00004360 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
    4360:	dc 01       	movw	r26, r24
    4362:	ed 91       	ld	r30, X+
    4364:	fc 91       	ld	r31, X
    4366:	01 90       	ld	r0, Z+
    4368:	f0 81       	ld	r31, Z
    436a:	e0 2d       	mov	r30, r0
    436c:	09 95       	icall
}
    436e:	08 95       	ret

00004370 <_ZN5Print5printERK9Printable>:
  n += println();
  return n;
}

size_t Print::print(const Printable& x)
{
    4370:	9c 01       	movw	r18, r24
    4372:	cb 01       	movw	r24, r22
  return x.printTo(*this);
    4374:	db 01       	movw	r26, r22
    4376:	ed 91       	ld	r30, X+
    4378:	fc 91       	ld	r31, X
    437a:	01 90       	ld	r0, Z+
    437c:	f0 81       	ld	r31, Z
    437e:	e0 2d       	mov	r30, r0
    4380:	b9 01       	movw	r22, r18
    4382:	09 95       	icall
}
    4384:	08 95       	ret

00004386 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
    4386:	0f 93       	push	r16
    4388:	1f 93       	push	r17
    438a:	cf 93       	push	r28
    438c:	df 93       	push	r29
    438e:	ec 01       	movw	r28, r24
  size_t n = print('\r');
    4390:	6d e0       	ldi	r22, 0x0D	; 13
    4392:	0e 94 b0 21 	call	0x4360	; 0x4360 <_ZN5Print5printEc>
    4396:	8c 01       	movw	r16, r24
  n += print('\n');
    4398:	ce 01       	movw	r24, r28
    439a:	6a e0       	ldi	r22, 0x0A	; 10
    439c:	0e 94 b0 21 	call	0x4360	; 0x4360 <_ZN5Print5printEc>
    43a0:	08 0f       	add	r16, r24
    43a2:	19 1f       	adc	r17, r25
  return n;
}
    43a4:	c8 01       	movw	r24, r16
    43a6:	df 91       	pop	r29
    43a8:	cf 91       	pop	r28
    43aa:	1f 91       	pop	r17
    43ac:	0f 91       	pop	r16
    43ae:	08 95       	ret

000043b0 <_ZN5Print7printlnEPK19__FlashStringHelper>:
{
  return printFloat(n, digits);
}

size_t Print::println(const __FlashStringHelper *ifsh)
{
    43b0:	0f 93       	push	r16
    43b2:	1f 93       	push	r17
    43b4:	cf 93       	push	r28
    43b6:	df 93       	push	r29
    43b8:	ec 01       	movw	r28, r24
  size_t n = print(ifsh);
    43ba:	0e 94 57 21 	call	0x42ae	; 0x42ae <_ZN5Print5printEPK19__FlashStringHelper>
    43be:	8c 01       	movw	r16, r24
  n += println();
    43c0:	ce 01       	movw	r24, r28
    43c2:	0e 94 c3 21 	call	0x4386	; 0x4386 <_ZN5Print7printlnEv>
    43c6:	08 0f       	add	r16, r24
    43c8:	19 1f       	adc	r17, r25
  return n;
}
    43ca:	c8 01       	movw	r24, r16
    43cc:	df 91       	pop	r29
    43ce:	cf 91       	pop	r28
    43d0:	1f 91       	pop	r17
    43d2:	0f 91       	pop	r16
    43d4:	08 95       	ret

000043d6 <_ZN5Print7printlnERK6String>:
  n += print('\n');
  return n;
}

size_t Print::println(const String &s)
{
    43d6:	0f 93       	push	r16
    43d8:	1f 93       	push	r17
    43da:	cf 93       	push	r28
    43dc:	df 93       	push	r29
    43de:	ec 01       	movw	r28, r24
  size_t n = print(s);
    43e0:	0e 94 7a 21 	call	0x42f4	; 0x42f4 <_ZN5Print5printERK6String>
    43e4:	8c 01       	movw	r16, r24
  n += println();
    43e6:	ce 01       	movw	r24, r28
    43e8:	0e 94 c3 21 	call	0x4386	; 0x4386 <_ZN5Print7printlnEv>
    43ec:	08 0f       	add	r16, r24
    43ee:	19 1f       	adc	r17, r25
  return n;
}
    43f0:	c8 01       	movw	r24, r16
    43f2:	df 91       	pop	r29
    43f4:	cf 91       	pop	r28
    43f6:	1f 91       	pop	r17
    43f8:	0f 91       	pop	r16
    43fa:	08 95       	ret

000043fc <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
    43fc:	0f 93       	push	r16
    43fe:	1f 93       	push	r17
    4400:	cf 93       	push	r28
    4402:	df 93       	push	r29
    4404:	ec 01       	movw	r28, r24
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    4406:	0e 94 46 21 	call	0x428c	; 0x428c <_ZN5Print5writeEPKc>
    440a:	8c 01       	movw	r16, r24
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
    440c:	ce 01       	movw	r24, r28
    440e:	0e 94 c3 21 	call	0x4386	; 0x4386 <_ZN5Print7printlnEv>
    4412:	08 0f       	add	r16, r24
    4414:	19 1f       	adc	r17, r25
  return n;
}
    4416:	c8 01       	movw	r24, r16
    4418:	df 91       	pop	r29
    441a:	cf 91       	pop	r28
    441c:	1f 91       	pop	r17
    441e:	0f 91       	pop	r16
    4420:	08 95       	ret

00004422 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
    4422:	0f 93       	push	r16
    4424:	1f 93       	push	r17
    4426:	cf 93       	push	r28
    4428:	df 93       	push	r29
    442a:	ec 01       	movw	r28, r24
  size_t n = print(c);
    442c:	0e 94 b0 21 	call	0x4360	; 0x4360 <_ZN5Print5printEc>
    4430:	8c 01       	movw	r16, r24
  n += println();
    4432:	ce 01       	movw	r24, r28
    4434:	0e 94 c3 21 	call	0x4386	; 0x4386 <_ZN5Print7printlnEv>
    4438:	08 0f       	add	r16, r24
    443a:	19 1f       	adc	r17, r25
  return n;
}
    443c:	c8 01       	movw	r24, r16
    443e:	df 91       	pop	r29
    4440:	cf 91       	pop	r28
    4442:	1f 91       	pop	r17
    4444:	0f 91       	pop	r16
    4446:	08 95       	ret

00004448 <_ZN5Print7printlnERK9Printable>:
  n += println();
  return n;
}

size_t Print::println(const Printable& x)
{
    4448:	0f 93       	push	r16
    444a:	1f 93       	push	r17
    444c:	cf 93       	push	r28
    444e:	df 93       	push	r29
    4450:	ec 01       	movw	r28, r24
  size_t n = print(x);
    4452:	0e 94 b8 21 	call	0x4370	; 0x4370 <_ZN5Print5printERK9Printable>
    4456:	8c 01       	movw	r16, r24
  n += println();
    4458:	ce 01       	movw	r24, r28
    445a:	0e 94 c3 21 	call	0x4386	; 0x4386 <_ZN5Print7printlnEv>
    445e:	08 0f       	add	r16, r24
    4460:	19 1f       	adc	r17, r25
  return n;
}
    4462:	c8 01       	movw	r24, r16
    4464:	df 91       	pop	r29
    4466:	cf 91       	pop	r28
    4468:	1f 91       	pop	r17
    446a:	0f 91       	pop	r16
    446c:	08 95       	ret

0000446e <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
    446e:	8f 92       	push	r8
    4470:	9f 92       	push	r9
    4472:	af 92       	push	r10
    4474:	bf 92       	push	r11
    4476:	cf 92       	push	r12
    4478:	df 92       	push	r13
    447a:	ef 92       	push	r14
    447c:	ff 92       	push	r15
    447e:	0f 93       	push	r16
    4480:	1f 93       	push	r17
    4482:	df 93       	push	r29
    4484:	cf 93       	push	r28
    4486:	cd b7       	in	r28, 0x3d	; 61
    4488:	de b7       	in	r29, 0x3e	; 62
    448a:	a1 97       	sbiw	r28, 0x21	; 33
    448c:	0f b6       	in	r0, 0x3f	; 63
    448e:	f8 94       	cli
    4490:	de bf       	out	0x3e, r29	; 62
    4492:	0f be       	out	0x3f, r0	; 63
    4494:	cd bf       	out	0x3d, r28	; 61
    4496:	6c 01       	movw	r12, r24
    4498:	04 2f       	mov	r16, r20
    449a:	e5 2f       	mov	r30, r21
    449c:	cb 01       	movw	r24, r22
    449e:	12 2f       	mov	r17, r18
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
    44a0:	19 a2       	std	Y+33, r1	; 0x21

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
    44a2:	22 30       	cpi	r18, 0x02	; 2
    44a4:	08 f4       	brcc	.+2      	; 0x44a8 <_ZN5Print11printNumberEmh+0x3a>
    44a6:	1a e0       	ldi	r17, 0x0A	; 10
    44a8:	21 e2       	ldi	r18, 0x21	; 33
    44aa:	e2 2e       	mov	r14, r18
    44ac:	f1 2c       	mov	r15, r1
    44ae:	ec 0e       	add	r14, r28
    44b0:	fd 1e       	adc	r15, r29

  do {
    unsigned long m = n;
    n /= base;
    44b2:	81 2e       	mov	r8, r17
    44b4:	99 24       	eor	r9, r9
    44b6:	aa 24       	eor	r10, r10
    44b8:	bb 24       	eor	r11, r11
    44ba:	03 c0       	rjmp	.+6      	; 0x44c2 <_ZN5Print11printNumberEmh+0x54>
    44bc:	02 2f       	mov	r16, r18
    44be:	e3 2f       	mov	r30, r19
    44c0:	ca 01       	movw	r24, r20
    44c2:	60 2f       	mov	r22, r16
    44c4:	7e 2f       	mov	r23, r30
    44c6:	a5 01       	movw	r20, r10
    44c8:	94 01       	movw	r18, r8
    44ca:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    char c = m - base * n;
    44ce:	12 9f       	mul	r17, r18
    44d0:	80 2d       	mov	r24, r0
    44d2:	11 24       	eor	r1, r1
    44d4:	08 1b       	sub	r16, r24
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
    44d6:	08 94       	sec
    44d8:	e1 08       	sbc	r14, r1
    44da:	f1 08       	sbc	r15, r1
    44dc:	0a 30       	cpi	r16, 0x0A	; 10
    44de:	14 f4       	brge	.+4      	; 0x44e4 <_ZN5Print11printNumberEmh+0x76>
    44e0:	00 5d       	subi	r16, 0xD0	; 208
    44e2:	01 c0       	rjmp	.+2      	; 0x44e6 <_ZN5Print11printNumberEmh+0x78>
    44e4:	09 5c       	subi	r16, 0xC9	; 201
    44e6:	f7 01       	movw	r30, r14
    44e8:	00 83       	st	Z, r16
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    44ea:	21 15       	cp	r18, r1
    44ec:	31 05       	cpc	r19, r1
    44ee:	41 05       	cpc	r20, r1
    44f0:	51 05       	cpc	r21, r1
    44f2:	21 f7       	brne	.-56     	; 0x44bc <_ZN5Print11printNumberEmh+0x4e>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
    44f4:	c6 01       	movw	r24, r12
    44f6:	b7 01       	movw	r22, r14
    44f8:	0e 94 46 21 	call	0x428c	; 0x428c <_ZN5Print5writeEPKc>
}
    44fc:	a1 96       	adiw	r28, 0x21	; 33
    44fe:	0f b6       	in	r0, 0x3f	; 63
    4500:	f8 94       	cli
    4502:	de bf       	out	0x3e, r29	; 62
    4504:	0f be       	out	0x3f, r0	; 63
    4506:	cd bf       	out	0x3d, r28	; 61
    4508:	cf 91       	pop	r28
    450a:	df 91       	pop	r29
    450c:	1f 91       	pop	r17
    450e:	0f 91       	pop	r16
    4510:	ff 90       	pop	r15
    4512:	ef 90       	pop	r14
    4514:	df 90       	pop	r13
    4516:	cf 90       	pop	r12
    4518:	bf 90       	pop	r11
    451a:	af 90       	pop	r10
    451c:	9f 90       	pop	r9
    451e:	8f 90       	pop	r8
    4520:	08 95       	ret

00004522 <_ZN5Print5printEmi>:
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
    4522:	21 15       	cp	r18, r1
    4524:	31 05       	cpc	r19, r1
    4526:	49 f4       	brne	.+18     	; 0x453a <_ZN5Print5printEmi+0x18>
    4528:	dc 01       	movw	r26, r24
    452a:	ed 91       	ld	r30, X+
    452c:	fc 91       	ld	r31, X
    452e:	01 90       	ld	r0, Z+
    4530:	f0 81       	ld	r31, Z
    4532:	e0 2d       	mov	r30, r0
    4534:	64 2f       	mov	r22, r20
    4536:	09 95       	icall
    4538:	08 95       	ret
  else return printNumber(n, base);
    453a:	0e 94 37 22 	call	0x446e	; 0x446e <_ZN5Print11printNumberEmh>
}
    453e:	08 95       	ret

00004540 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    4540:	0f 93       	push	r16
    4542:	1f 93       	push	r17
    4544:	cf 93       	push	r28
    4546:	df 93       	push	r29
    4548:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    454a:	0e 94 91 22 	call	0x4522	; 0x4522 <_ZN5Print5printEmi>
    454e:	8c 01       	movw	r16, r24
  n += println();
    4550:	ce 01       	movw	r24, r28
    4552:	0e 94 c3 21 	call	0x4386	; 0x4386 <_ZN5Print7printlnEv>
    4556:	08 0f       	add	r16, r24
    4558:	19 1f       	adc	r17, r25
  return n;
}
    455a:	c8 01       	movw	r24, r16
    455c:	df 91       	pop	r29
    455e:	cf 91       	pop	r28
    4560:	1f 91       	pop	r17
    4562:	0f 91       	pop	r16
    4564:	08 95       	ret

00004566 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    4566:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    4568:	ab 01       	movw	r20, r22
    456a:	60 e0       	ldi	r22, 0x00	; 0
    456c:	70 e0       	ldi	r23, 0x00	; 0
    456e:	0e 94 91 22 	call	0x4522	; 0x4522 <_ZN5Print5printEmi>
}
    4572:	08 95       	ret

00004574 <_ZN5Print7printlnEji>:
  n += println();
  return n;
}

size_t Print::println(unsigned int num, int base)
{
    4574:	0f 93       	push	r16
    4576:	1f 93       	push	r17
    4578:	cf 93       	push	r28
    457a:	df 93       	push	r29
    457c:	ec 01       	movw	r28, r24
    457e:	9a 01       	movw	r18, r20
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
  return print((unsigned long) n, base);
    4580:	ab 01       	movw	r20, r22
    4582:	60 e0       	ldi	r22, 0x00	; 0
    4584:	70 e0       	ldi	r23, 0x00	; 0
    4586:	0e 94 91 22 	call	0x4522	; 0x4522 <_ZN5Print5printEmi>
    458a:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
    458c:	ce 01       	movw	r24, r28
    458e:	0e 94 c3 21 	call	0x4386	; 0x4386 <_ZN5Print7printlnEv>
    4592:	08 0f       	add	r16, r24
    4594:	19 1f       	adc	r17, r25
  return n;
}
    4596:	c8 01       	movw	r24, r16
    4598:	df 91       	pop	r29
    459a:	cf 91       	pop	r28
    459c:	1f 91       	pop	r17
    459e:	0f 91       	pop	r16
    45a0:	08 95       	ret

000045a2 <_ZN5Print5printEhi>:
{
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
    45a2:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
    45a4:	46 2f       	mov	r20, r22
    45a6:	50 e0       	ldi	r21, 0x00	; 0
    45a8:	60 e0       	ldi	r22, 0x00	; 0
    45aa:	70 e0       	ldi	r23, 0x00	; 0
    45ac:	0e 94 91 22 	call	0x4522	; 0x4522 <_ZN5Print5printEmi>
}
    45b0:	08 95       	ret

000045b2 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
    45b2:	0f 93       	push	r16
    45b4:	1f 93       	push	r17
    45b6:	cf 93       	push	r28
    45b8:	df 93       	push	r29
    45ba:	ec 01       	movw	r28, r24
    45bc:	9a 01       	movw	r18, r20
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
    45be:	46 2f       	mov	r20, r22
    45c0:	50 e0       	ldi	r21, 0x00	; 0
    45c2:	60 e0       	ldi	r22, 0x00	; 0
    45c4:	70 e0       	ldi	r23, 0x00	; 0
    45c6:	0e 94 91 22 	call	0x4522	; 0x4522 <_ZN5Print5printEmi>
    45ca:	8c 01       	movw	r16, r24
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
    45cc:	ce 01       	movw	r24, r28
    45ce:	0e 94 c3 21 	call	0x4386	; 0x4386 <_ZN5Print7printlnEv>
    45d2:	08 0f       	add	r16, r24
    45d4:	19 1f       	adc	r17, r25
  return n;
}
    45d6:	c8 01       	movw	r24, r16
    45d8:	df 91       	pop	r29
    45da:	cf 91       	pop	r28
    45dc:	1f 91       	pop	r17
    45de:	0f 91       	pop	r16
    45e0:	08 95       	ret

000045e2 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
    45e2:	cf 92       	push	r12
    45e4:	df 92       	push	r13
    45e6:	ef 92       	push	r14
    45e8:	ff 92       	push	r15
    45ea:	0f 93       	push	r16
    45ec:	1f 93       	push	r17
    45ee:	cf 93       	push	r28
    45f0:	df 93       	push	r29
    45f2:	ec 01       	movw	r28, r24
    45f4:	7a 01       	movw	r14, r20
    45f6:	8b 01       	movw	r16, r22
  if (base == 0) {
    45f8:	21 15       	cp	r18, r1
    45fa:	31 05       	cpc	r19, r1
    45fc:	41 f4       	brne	.+16     	; 0x460e <_ZN5Print5printEli+0x2c>
    return write(n);
    45fe:	e8 81       	ld	r30, Y
    4600:	f9 81       	ldd	r31, Y+1	; 0x01
    4602:	01 90       	ld	r0, Z+
    4604:	f0 81       	ld	r31, Z
    4606:	e0 2d       	mov	r30, r0
    4608:	64 2f       	mov	r22, r20
    460a:	09 95       	icall
    460c:	1a c0       	rjmp	.+52     	; 0x4642 <_ZN5Print5printEli+0x60>
  } else if (base == 10) {
    460e:	2a 30       	cpi	r18, 0x0A	; 10
    4610:	31 05       	cpc	r19, r1
    4612:	a9 f4       	brne	.+42     	; 0x463e <_ZN5Print5printEli+0x5c>
    if (n < 0) {
    4614:	77 ff       	sbrs	r23, 7
    4616:	12 c0       	rjmp	.+36     	; 0x463c <_ZN5Print5printEli+0x5a>
      int t = print('-');
    4618:	6d e2       	ldi	r22, 0x2D	; 45
    461a:	0e 94 b0 21 	call	0x4360	; 0x4360 <_ZN5Print5printEc>
    461e:	6c 01       	movw	r12, r24
      n = -n;
    4620:	44 27       	eor	r20, r20
    4622:	55 27       	eor	r21, r21
    4624:	ba 01       	movw	r22, r20
    4626:	4e 19       	sub	r20, r14
    4628:	5f 09       	sbc	r21, r15
    462a:	60 0b       	sbc	r22, r16
    462c:	71 0b       	sbc	r23, r17
      return printNumber(n, 10) + t;
    462e:	ce 01       	movw	r24, r28
    4630:	2a e0       	ldi	r18, 0x0A	; 10
    4632:	0e 94 37 22 	call	0x446e	; 0x446e <_ZN5Print11printNumberEmh>
    4636:	c8 0e       	add	r12, r24
    4638:	d9 1e       	adc	r13, r25
    463a:	04 c0       	rjmp	.+8      	; 0x4644 <_ZN5Print5printEli+0x62>
    }
    return printNumber(n, 10);
    463c:	2a e0       	ldi	r18, 0x0A	; 10
  } else {
    return printNumber(n, base);
    463e:	0e 94 37 22 	call	0x446e	; 0x446e <_ZN5Print11printNumberEmh>
    4642:	6c 01       	movw	r12, r24
  }
}
    4644:	c6 01       	movw	r24, r12
    4646:	df 91       	pop	r29
    4648:	cf 91       	pop	r28
    464a:	1f 91       	pop	r17
    464c:	0f 91       	pop	r16
    464e:	ff 90       	pop	r15
    4650:	ef 90       	pop	r14
    4652:	df 90       	pop	r13
    4654:	cf 90       	pop	r12
    4656:	08 95       	ret

00004658 <_ZN5Print7printlnEli>:
  n += println();
  return n;
}

size_t Print::println(long num, int base)
{
    4658:	0f 93       	push	r16
    465a:	1f 93       	push	r17
    465c:	cf 93       	push	r28
    465e:	df 93       	push	r29
    4660:	ec 01       	movw	r28, r24
  size_t n = print(num, base);
    4662:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <_ZN5Print5printEli>
    4666:	8c 01       	movw	r16, r24
  n += println();
    4668:	ce 01       	movw	r24, r28
    466a:	0e 94 c3 21 	call	0x4386	; 0x4386 <_ZN5Print7printlnEv>
    466e:	08 0f       	add	r16, r24
    4670:	19 1f       	adc	r17, r25
  return n;
}
    4672:	c8 01       	movw	r24, r16
    4674:	df 91       	pop	r29
    4676:	cf 91       	pop	r28
    4678:	1f 91       	pop	r17
    467a:	0f 91       	pop	r16
    467c:	08 95       	ret

0000467e <_ZN5Print5printEii>:
{
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
    467e:	9a 01       	movw	r18, r20
  return print((long) n, base);
    4680:	fb 01       	movw	r30, r22
    4682:	af 01       	movw	r20, r30
    4684:	66 27       	eor	r22, r22
    4686:	57 fd       	sbrc	r21, 7
    4688:	60 95       	com	r22
    468a:	76 2f       	mov	r23, r22
    468c:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <_ZN5Print5printEli>
}
    4690:	08 95       	ret

00004692 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
    4692:	0f 93       	push	r16
    4694:	1f 93       	push	r17
    4696:	cf 93       	push	r28
    4698:	df 93       	push	r29
    469a:	ec 01       	movw	r28, r24
    469c:	9a 01       	movw	r18, r20
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    469e:	cb 01       	movw	r24, r22
    46a0:	ac 01       	movw	r20, r24
    46a2:	66 27       	eor	r22, r22
    46a4:	57 fd       	sbrc	r21, 7
    46a6:	60 95       	com	r22
    46a8:	76 2f       	mov	r23, r22
    46aa:	ce 01       	movw	r24, r28
    46ac:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <_ZN5Print5printEli>
    46b0:	8c 01       	movw	r16, r24
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
    46b2:	ce 01       	movw	r24, r28
    46b4:	0e 94 c3 21 	call	0x4386	; 0x4386 <_ZN5Print7printlnEv>
    46b8:	08 0f       	add	r16, r24
    46ba:	19 1f       	adc	r17, r25
  return n;
}
    46bc:	c8 01       	movw	r24, r16
    46be:	df 91       	pop	r29
    46c0:	cf 91       	pop	r28
    46c2:	1f 91       	pop	r17
    46c4:	0f 91       	pop	r16
    46c6:	08 95       	ret

000046c8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    46c8:	6f 92       	push	r6
    46ca:	7f 92       	push	r7
    46cc:	9f 92       	push	r9
    46ce:	af 92       	push	r10
    46d0:	bf 92       	push	r11
    46d2:	cf 92       	push	r12
    46d4:	df 92       	push	r13
    46d6:	ef 92       	push	r14
    46d8:	ff 92       	push	r15
    46da:	0f 93       	push	r16
    46dc:	1f 93       	push	r17
    46de:	cf 93       	push	r28
    46e0:	df 93       	push	r29
    46e2:	3c 01       	movw	r6, r24
    46e4:	7a 01       	movw	r14, r20
    46e6:	8b 01       	movw	r16, r22
    46e8:	c2 2e       	mov	r12, r18
  size_t n = 0;
  
  // Handle negative numbers
  if (number < 0.0)
    46ea:	cb 01       	movw	r24, r22
    46ec:	ba 01       	movw	r22, r20
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	a9 01       	movw	r20, r18
    46f4:	0e 94 91 13 	call	0x2722	; 0x2722 <__ltsf2>
    46f8:	87 ff       	sbrs	r24, 7
    46fa:	0a c0       	rjmp	.+20     	; 0x4710 <_ZN5Print10printFloatEdh+0x48>
  {
     n += print('-');
    46fc:	c3 01       	movw	r24, r6
    46fe:	6d e2       	ldi	r22, 0x2D	; 45
    4700:	0e 94 b0 21 	call	0x4360	; 0x4360 <_ZN5Print5printEc>
    4704:	ec 01       	movw	r28, r24
     number = -number;
    4706:	17 fb       	bst	r17, 7
    4708:	10 95       	com	r17
    470a:	17 f9       	bld	r17, 7
    470c:	10 95       	com	r17
    470e:	02 c0       	rjmp	.+4      	; 0x4714 <_ZN5Print10printFloatEdh+0x4c>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    4710:	c0 e0       	ldi	r28, 0x00	; 0
    4712:	d0 e0       	ldi	r29, 0x00	; 0
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4714:	dd 24       	eor	r13, r13
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    4716:	50 e0       	ldi	r21, 0x00	; 0
    4718:	40 e0       	ldi	r20, 0x00	; 0
    471a:	30 e0       	ldi	r19, 0x00	; 0
    471c:	2f e3       	ldi	r18, 0x3F	; 63
  for (uint8_t i=0; i<digits; ++i)
    471e:	11 c0       	rjmp	.+34     	; 0x4742 <_ZN5Print10printFloatEdh+0x7a>
    rounding /= 10.0;
    4720:	da 01       	movw	r26, r20
    4722:	f9 01       	movw	r30, r18
    4724:	6b 2f       	mov	r22, r27
    4726:	74 2f       	mov	r23, r20
    4728:	8f 2f       	mov	r24, r31
    472a:	92 2f       	mov	r25, r18
    472c:	20 e0       	ldi	r18, 0x00	; 0
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	40 e2       	ldi	r20, 0x20	; 32
    4732:	51 e4       	ldi	r21, 0x41	; 65
    4734:	0e 94 53 12 	call	0x24a6	; 0x24a6 <__divsf3>
    4738:	56 2f       	mov	r21, r22
    473a:	47 2f       	mov	r20, r23
    473c:	38 2f       	mov	r19, r24
    473e:	29 2f       	mov	r18, r25
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    4740:	d3 94       	inc	r13
    4742:	dc 14       	cp	r13, r12
    4744:	68 f3       	brcs	.-38     	; 0x4720 <_ZN5Print10printFloatEdh+0x58>
    rounding /= 10.0;
  
  number += rounding;
    4746:	c8 01       	movw	r24, r16
    4748:	b7 01       	movw	r22, r14
    474a:	da 01       	movw	r26, r20
    474c:	f9 01       	movw	r30, r18
    474e:	2b 2f       	mov	r18, r27
    4750:	34 2f       	mov	r19, r20
    4752:	4f 2f       	mov	r20, r31
    4754:	5e 2f       	mov	r21, r30
    4756:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__addsf3>
    475a:	5b 01       	movw	r10, r22
    475c:	f8 2e       	mov	r15, r24
    475e:	99 2e       	mov	r9, r25

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    4760:	7b 2d       	mov	r23, r11
    4762:	0e 94 85 0f 	call	0x1f0a	; 0x1f0a <__fixunssfsi>
    4766:	16 2f       	mov	r17, r22
    4768:	d7 2e       	mov	r13, r23
    476a:	e8 2e       	mov	r14, r24
    476c:	09 2f       	mov	r16, r25
  double remainder = number - (double)int_part;
    476e:	0e 94 73 14 	call	0x28e6	; 0x28e6 <__floatunsisf>
    4772:	9b 01       	movw	r18, r22
    4774:	ac 01       	movw	r20, r24
    4776:	6a 2d       	mov	r22, r10
    4778:	7b 2d       	mov	r23, r11
    477a:	8f 2d       	mov	r24, r15
    477c:	99 2d       	mov	r25, r9
    477e:	0e 94 28 11 	call	0x2250	; 0x2250 <__subsf3>
    4782:	96 2e       	mov	r9, r22
    4784:	a7 2e       	mov	r10, r23
    4786:	b8 2e       	mov	r11, r24
    4788:	f9 2e       	mov	r15, r25
  n += print(int_part);
    478a:	c3 01       	movw	r24, r6
    478c:	41 2f       	mov	r20, r17
    478e:	5d 2d       	mov	r21, r13
    4790:	6e 2d       	mov	r22, r14
    4792:	70 2f       	mov	r23, r16
    4794:	2a e0       	ldi	r18, 0x0A	; 10
    4796:	30 e0       	ldi	r19, 0x00	; 0
    4798:	0e 94 91 22 	call	0x4522	; 0x4522 <_ZN5Print5printEmi>
    479c:	c8 0f       	add	r28, r24
    479e:	d9 1f       	adc	r29, r25

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    47a0:	cc 20       	and	r12, r12
    47a2:	b9 f1       	breq	.+110    	; 0x4812 <_ZN5Print10printFloatEdh+0x14a>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
    47a4:	c3 01       	movw	r24, r6
    47a6:	69 ed       	ldi	r22, 0xD9	; 217
    47a8:	71 e0       	ldi	r23, 0x01	; 1
    47aa:	0e 94 46 21 	call	0x428c	; 0x428c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print("."); 
    47ae:	c8 0f       	add	r28, r24
    47b0:	d9 1f       	adc	r29, r25
    47b2:	2f c0       	rjmp	.+94     	; 0x4812 <_ZN5Print10printFloatEdh+0x14a>
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    47b4:	69 2d       	mov	r22, r9
    47b6:	7a 2d       	mov	r23, r10
    47b8:	8b 2d       	mov	r24, r11
    47ba:	9f 2d       	mov	r25, r15
    47bc:	20 e0       	ldi	r18, 0x00	; 0
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	40 e2       	ldi	r20, 0x20	; 32
    47c2:	51 e4       	ldi	r21, 0x41	; 65
    47c4:	0e 94 59 11 	call	0x22b2	; 0x22b2 <__mulsf3>
    47c8:	d6 2e       	mov	r13, r22
    47ca:	b7 2e       	mov	r11, r23
    47cc:	a8 2e       	mov	r10, r24
    47ce:	99 2e       	mov	r9, r25
    int toPrint = int(remainder);
    47d0:	0e 94 21 14 	call	0x2842	; 0x2842 <__fixsfsi>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
    47d4:	7b 01       	movw	r14, r22
    47d6:	00 27       	eor	r16, r16
    47d8:	f7 fc       	sbrc	r15, 7
    47da:	00 95       	com	r16
    47dc:	10 2f       	mov	r17, r16
    47de:	c3 01       	movw	r24, r6
    47e0:	b8 01       	movw	r22, r16
    47e2:	a7 01       	movw	r20, r14
    47e4:	2a e0       	ldi	r18, 0x0A	; 10
    47e6:	30 e0       	ldi	r19, 0x00	; 0
    47e8:	0e 94 f1 22 	call	0x45e2	; 0x45e2 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    47ec:	c8 0f       	add	r28, r24
    47ee:	d9 1f       	adc	r29, r25
    remainder -= toPrint; 
    47f0:	c8 01       	movw	r24, r16
    47f2:	b7 01       	movw	r22, r14
    47f4:	0e 94 c1 13 	call	0x2782	; 0x2782 <__floatsisf>
    47f8:	9b 01       	movw	r18, r22
    47fa:	ac 01       	movw	r20, r24
    47fc:	6d 2d       	mov	r22, r13
    47fe:	7b 2d       	mov	r23, r11
    4800:	8a 2d       	mov	r24, r10
    4802:	99 2d       	mov	r25, r9
    4804:	0e 94 28 11 	call	0x2250	; 0x2250 <__subsf3>
    4808:	96 2e       	mov	r9, r22
    480a:	a7 2e       	mov	r10, r23
    480c:	b8 2e       	mov	r11, r24
    480e:	f9 2e       	mov	r15, r25
    4810:	ca 94       	dec	r12
  if (digits > 0) {
    n += print("."); 
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    4812:	cc 20       	and	r12, r12
    4814:	79 f6       	brne	.-98     	; 0x47b4 <_ZN5Print10printFloatEdh+0xec>
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    4816:	ce 01       	movw	r24, r28
    4818:	df 91       	pop	r29
    481a:	cf 91       	pop	r28
    481c:	1f 91       	pop	r17
    481e:	0f 91       	pop	r16
    4820:	ff 90       	pop	r15
    4822:	ef 90       	pop	r14
    4824:	df 90       	pop	r13
    4826:	cf 90       	pop	r12
    4828:	bf 90       	pop	r11
    482a:	af 90       	pop	r10
    482c:	9f 90       	pop	r9
    482e:	7f 90       	pop	r7
    4830:	6f 90       	pop	r6
    4832:	08 95       	ret

00004834 <_ZN5Print5printEdi>:
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4834:	0e 94 64 23 	call	0x46c8	; 0x46c8 <_ZN5Print10printFloatEdh>
}
    4838:	08 95       	ret

0000483a <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    483a:	0f 93       	push	r16
    483c:	1f 93       	push	r17
    483e:	cf 93       	push	r28
    4840:	df 93       	push	r29
    4842:	ec 01       	movw	r28, r24
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    4844:	0e 94 64 23 	call	0x46c8	; 0x46c8 <_ZN5Print10printFloatEdh>
    4848:	8c 01       	movw	r16, r24
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    484a:	ce 01       	movw	r24, r28
    484c:	0e 94 c3 21 	call	0x4386	; 0x4386 <_ZN5Print7printlnEv>
    4850:	08 0f       	add	r16, r24
    4852:	19 1f       	adc	r17, r25
  return n;
}
    4854:	c8 01       	movw	r24, r16
    4856:	df 91       	pop	r29
    4858:	cf 91       	pop	r28
    485a:	1f 91       	pop	r17
    485c:	0f 91       	pop	r16
    485e:	08 95       	ret

00004860 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
    4860:	fc 01       	movw	r30, r24
    4862:	84 85       	ldd	r24, Z+12	; 0x0c
    4864:	95 85       	ldd	r25, Z+13	; 0x0d
    4866:	fc 01       	movw	r30, r24
    4868:	e0 5c       	subi	r30, 0xC0	; 192
    486a:	ff 4f       	sbci	r31, 0xFF	; 255
    486c:	20 81       	ld	r18, Z
    486e:	31 81       	ldd	r19, Z+1	; 0x01
    4870:	8e 5b       	subi	r24, 0xBE	; 190
    4872:	9f 4f       	sbci	r25, 0xFF	; 255
    4874:	fc 01       	movw	r30, r24
    4876:	80 81       	ld	r24, Z
    4878:	91 81       	ldd	r25, Z+1	; 0x01
    487a:	28 1b       	sub	r18, r24
    487c:	39 0b       	sbc	r19, r25
    487e:	2f 73       	andi	r18, 0x3F	; 63
    4880:	30 70       	andi	r19, 0x00	; 0
}
    4882:	c9 01       	movw	r24, r18
    4884:	08 95       	ret

00004886 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    4886:	fc 01       	movw	r30, r24
    4888:	84 85       	ldd	r24, Z+12	; 0x0c
    488a:	95 85       	ldd	r25, Z+13	; 0x0d
    488c:	fc 01       	movw	r30, r24
    488e:	e0 5c       	subi	r30, 0xC0	; 192
    4890:	ff 4f       	sbci	r31, 0xFF	; 255
    4892:	40 81       	ld	r20, Z
    4894:	51 81       	ldd	r21, Z+1	; 0x01
    4896:	fc 01       	movw	r30, r24
    4898:	ee 5b       	subi	r30, 0xBE	; 190
    489a:	ff 4f       	sbci	r31, 0xFF	; 255
    489c:	20 81       	ld	r18, Z
    489e:	31 81       	ldd	r19, Z+1	; 0x01
    48a0:	42 17       	cp	r20, r18
    48a2:	53 07       	cpc	r21, r19
    48a4:	41 f0       	breq	.+16     	; 0x48b6 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
    48a6:	01 90       	ld	r0, Z+
    48a8:	f0 81       	ld	r31, Z
    48aa:	e0 2d       	mov	r30, r0
    48ac:	e8 0f       	add	r30, r24
    48ae:	f9 1f       	adc	r31, r25
    48b0:	20 81       	ld	r18, Z
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	02 c0       	rjmp	.+4      	; 0x48ba <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    48b6:	2f ef       	ldi	r18, 0xFF	; 255
    48b8:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
    48ba:	c9 01       	movw	r24, r18
    48bc:	08 95       	ret

000048be <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    48be:	fc 01       	movw	r30, r24
    48c0:	84 85       	ldd	r24, Z+12	; 0x0c
    48c2:	95 85       	ldd	r25, Z+13	; 0x0d
    48c4:	fc 01       	movw	r30, r24
    48c6:	e0 5c       	subi	r30, 0xC0	; 192
    48c8:	ff 4f       	sbci	r31, 0xFF	; 255
    48ca:	40 81       	ld	r20, Z
    48cc:	51 81       	ldd	r21, Z+1	; 0x01
    48ce:	fc 01       	movw	r30, r24
    48d0:	ee 5b       	subi	r30, 0xBE	; 190
    48d2:	ff 4f       	sbci	r31, 0xFF	; 255
    48d4:	20 81       	ld	r18, Z
    48d6:	31 81       	ldd	r19, Z+1	; 0x01
    48d8:	42 17       	cp	r20, r18
    48da:	53 07       	cpc	r21, r19
    48dc:	71 f0       	breq	.+28     	; 0x48fa <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    48de:	a0 81       	ld	r26, Z
    48e0:	b1 81       	ldd	r27, Z+1	; 0x01
    48e2:	a8 0f       	add	r26, r24
    48e4:	b9 1f       	adc	r27, r25
    48e6:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    48e8:	80 81       	ld	r24, Z
    48ea:	91 81       	ldd	r25, Z+1	; 0x01
    48ec:	01 96       	adiw	r24, 0x01	; 1
    48ee:	8f 73       	andi	r24, 0x3F	; 63
    48f0:	90 70       	andi	r25, 0x00	; 0
    48f2:	91 83       	std	Z+1, r25	; 0x01
    48f4:	80 83       	st	Z, r24
    return c;
    48f6:	30 e0       	ldi	r19, 0x00	; 0
    48f8:	02 c0       	rjmp	.+4      	; 0x48fe <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
    48fa:	2f ef       	ldi	r18, 0xFF	; 255
    48fc:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
    48fe:	c9 01       	movw	r24, r18
    4900:	08 95       	ret

00004902 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
    4902:	dc 01       	movw	r26, r24
    4904:	1e 96       	adiw	r26, 0x0e	; 14
    4906:	8d 91       	ld	r24, X+
    4908:	9c 91       	ld	r25, X
    490a:	1f 97       	sbiw	r26, 0x0f	; 15
    490c:	fc 01       	movw	r30, r24
    490e:	e0 5c       	subi	r30, 0xC0	; 192
    4910:	ff 4f       	sbci	r31, 0xFF	; 255
    4912:	8e 5b       	subi	r24, 0xBE	; 190
    4914:	9f 4f       	sbci	r25, 0xFF	; 255
    4916:	40 81       	ld	r20, Z
    4918:	51 81       	ldd	r21, Z+1	; 0x01
    491a:	dc 01       	movw	r26, r24
    491c:	2d 91       	ld	r18, X+
    491e:	3c 91       	ld	r19, X
    4920:	11 97       	sbiw	r26, 0x01	; 1
    4922:	42 17       	cp	r20, r18
    4924:	53 07       	cpc	r21, r19
    4926:	b9 f7       	brne	.-18     	; 0x4916 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
    4928:	08 95       	ret

0000492a <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
    492a:	1f 93       	push	r17
    492c:	fc 01       	movw	r30, r24
    492e:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
    4930:	26 85       	ldd	r18, Z+14	; 0x0e
    4932:	37 85       	ldd	r19, Z+15	; 0x0f
    4934:	d9 01       	movw	r26, r18
    4936:	a0 5c       	subi	r26, 0xC0	; 192
    4938:	bf 4f       	sbci	r27, 0xFF	; 255
    493a:	8d 91       	ld	r24, X+
    493c:	9c 91       	ld	r25, X
    493e:	01 96       	adiw	r24, 0x01	; 1
    4940:	60 e4       	ldi	r22, 0x40	; 64
    4942:	70 e0       	ldi	r23, 0x00	; 0
    4944:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
    4948:	d9 01       	movw	r26, r18
    494a:	ae 5b       	subi	r26, 0xBE	; 190
    494c:	bf 4f       	sbci	r27, 0xFF	; 255
    494e:	4d 91       	ld	r20, X+
    4950:	5c 91       	ld	r21, X
    4952:	11 97       	sbiw	r26, 0x01	; 1
    4954:	84 17       	cp	r24, r20
    4956:	95 07       	cpc	r25, r21
    4958:	d1 f3       	breq	.-12     	; 0x494e <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
    495a:	d9 01       	movw	r26, r18
    495c:	a0 5c       	subi	r26, 0xC0	; 192
    495e:	bf 4f       	sbci	r27, 0xFF	; 255
    4960:	0d 90       	ld	r0, X+
    4962:	bc 91       	ld	r27, X
    4964:	a0 2d       	mov	r26, r0
    4966:	a2 0f       	add	r26, r18
    4968:	b3 1f       	adc	r27, r19
    496a:	1c 93       	st	X, r17
  _tx_buffer->head = i;
    496c:	a6 85       	ldd	r26, Z+14	; 0x0e
    496e:	b7 85       	ldd	r27, Z+15	; 0x0f
    4970:	a0 5c       	subi	r26, 0xC0	; 192
    4972:	bf 4f       	sbci	r27, 0xFF	; 255
    4974:	11 96       	adiw	r26, 0x01	; 1
    4976:	9c 93       	st	X, r25
    4978:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
    497a:	a6 89       	ldd	r26, Z+22	; 0x16
    497c:	b7 89       	ldd	r27, Z+23	; 0x17
    497e:	2c 91       	ld	r18, X
    4980:	81 e0       	ldi	r24, 0x01	; 1
    4982:	90 e0       	ldi	r25, 0x00	; 0
    4984:	05 8c       	ldd	r0, Z+29	; 0x1d
    4986:	02 c0       	rjmp	.+4      	; 0x498c <_ZN14HardwareSerial5writeEh+0x62>
    4988:	88 0f       	add	r24, r24
    498a:	99 1f       	adc	r25, r25
    498c:	0a 94       	dec	r0
    498e:	e2 f7       	brpl	.-8      	; 0x4988 <_ZN14HardwareSerial5writeEh+0x5e>
    4990:	28 2b       	or	r18, r24
    4992:	2c 93       	st	X, r18
  
  return 1;
}
    4994:	81 e0       	ldi	r24, 0x01	; 1
    4996:	90 e0       	ldi	r25, 0x00	; 0
    4998:	1f 91       	pop	r17
    499a:	08 95       	ret

0000499c <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
    499c:	fb 01       	movw	r30, r22
    499e:	e0 5c       	subi	r30, 0xC0	; 192
    49a0:	ff 4f       	sbci	r31, 0xFF	; 255
    49a2:	20 81       	ld	r18, Z
    49a4:	31 81       	ldd	r19, Z+1	; 0x01
    49a6:	2f 5f       	subi	r18, 0xFF	; 255
    49a8:	3f 4f       	sbci	r19, 0xFF	; 255
    49aa:	2f 73       	andi	r18, 0x3F	; 63
    49ac:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
    49ae:	db 01       	movw	r26, r22
    49b0:	ae 5b       	subi	r26, 0xBE	; 190
    49b2:	bf 4f       	sbci	r27, 0xFF	; 255
    49b4:	4d 91       	ld	r20, X+
    49b6:	5c 91       	ld	r21, X
    49b8:	11 97       	sbiw	r26, 0x01	; 1
    49ba:	24 17       	cp	r18, r20
    49bc:	35 07       	cpc	r19, r21
    49be:	39 f0       	breq	.+14     	; 0x49ce <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
    49c0:	a0 81       	ld	r26, Z
    49c2:	b1 81       	ldd	r27, Z+1	; 0x01
    49c4:	a6 0f       	add	r26, r22
    49c6:	b7 1f       	adc	r27, r23
    49c8:	8c 93       	st	X, r24
    buffer->head = i;
    49ca:	31 83       	std	Z+1, r19	; 0x01
    49cc:	20 83       	st	Z, r18
    49ce:	08 95       	ret

000049d0 <_Z11serialEventv>:
    !defined(SIG_UART0_RECV) && !defined(USART0_RX_vect) && \
	!defined(SIG_UART_RECV)
  #error "Don't know what the Data Received vector is called for the first UART"
#else
  void serialEvent() __attribute__((weak));
  void serialEvent() {}
    49d0:	08 95       	ret

000049d2 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
    49d2:	1f 92       	push	r1
    49d4:	0f 92       	push	r0
    49d6:	0f b6       	in	r0, 0x3f	; 63
    49d8:	0f 92       	push	r0
    49da:	11 24       	eor	r1, r1
    49dc:	2f 93       	push	r18
    49de:	3f 93       	push	r19
    49e0:	4f 93       	push	r20
    49e2:	5f 93       	push	r21
    49e4:	6f 93       	push	r22
    49e6:	7f 93       	push	r23
    49e8:	8f 93       	push	r24
    49ea:	9f 93       	push	r25
    49ec:	af 93       	push	r26
    49ee:	bf 93       	push	r27
    49f0:	ef 93       	push	r30
    49f2:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
    49f4:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
    49f8:	64 e4       	ldi	r22, 0x44	; 68
    49fa:	73 e0       	ldi	r23, 0x03	; 3
    49fc:	0e 94 ce 24 	call	0x499c	; 0x499c <_Z10store_charhP11ring_buffer>
  }
    4a00:	ff 91       	pop	r31
    4a02:	ef 91       	pop	r30
    4a04:	bf 91       	pop	r27
    4a06:	af 91       	pop	r26
    4a08:	9f 91       	pop	r25
    4a0a:	8f 91       	pop	r24
    4a0c:	7f 91       	pop	r23
    4a0e:	6f 91       	pop	r22
    4a10:	5f 91       	pop	r21
    4a12:	4f 91       	pop	r20
    4a14:	3f 91       	pop	r19
    4a16:	2f 91       	pop	r18
    4a18:	0f 90       	pop	r0
    4a1a:	0f be       	out	0x3f, r0	; 63
    4a1c:	0f 90       	pop	r0
    4a1e:	1f 90       	pop	r1
    4a20:	18 95       	reti

00004a22 <_Z14serialEventRunv>:
#endif

void serialEventRun(void)
{
#ifdef serialEvent_implemented
  if (Serial.available()) serialEvent();
    4a22:	8c ec       	ldi	r24, 0xCC	; 204
    4a24:	93 e0       	ldi	r25, 0x03	; 3
    4a26:	0e 94 30 24 	call	0x4860	; 0x4860 <_ZN14HardwareSerial9availableEv>
    4a2a:	00 97       	sbiw	r24, 0x00	; 0
    4a2c:	11 f0       	breq	.+4      	; 0x4a32 <_Z14serialEventRunv+0x10>
    4a2e:	0e 94 e8 24 	call	0x49d0	; 0x49d0 <_Z11serialEventv>
    4a32:	08 95       	ret

00004a34 <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
    4a34:	1f 92       	push	r1
    4a36:	0f 92       	push	r0
    4a38:	0f b6       	in	r0, 0x3f	; 63
    4a3a:	0f 92       	push	r0
    4a3c:	11 24       	eor	r1, r1
    4a3e:	2f 93       	push	r18
    4a40:	3f 93       	push	r19
    4a42:	5f 93       	push	r21
    4a44:	6f 93       	push	r22
    4a46:	7f 93       	push	r23
    4a48:	8f 93       	push	r24
    4a4a:	9f 93       	push	r25
    4a4c:	af 93       	push	r26
    4a4e:	bf 93       	push	r27
    4a50:	ef 93       	push	r30
    4a52:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
    4a54:	20 91 c8 03 	lds	r18, 0x03C8
    4a58:	30 91 c9 03 	lds	r19, 0x03C9
    4a5c:	80 91 ca 03 	lds	r24, 0x03CA
    4a60:	90 91 cb 03 	lds	r25, 0x03CB
    4a64:	28 17       	cp	r18, r24
    4a66:	39 07       	cpc	r19, r25
    4a68:	31 f4       	brne	.+12     	; 0x4a76 <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
    4a6a:	80 91 c1 00 	lds	r24, 0x00C1
    4a6e:	8f 7d       	andi	r24, 0xDF	; 223
    4a70:	80 93 c1 00 	sts	0x00C1, r24
    4a74:	16 c0       	rjmp	.+44     	; 0x4aa2 <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
    4a76:	e0 91 ca 03 	lds	r30, 0x03CA
    4a7a:	f0 91 cb 03 	lds	r31, 0x03CB
    4a7e:	e8 57       	subi	r30, 0x78	; 120
    4a80:	fc 4f       	sbci	r31, 0xFC	; 252
    4a82:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
    4a84:	80 91 ca 03 	lds	r24, 0x03CA
    4a88:	90 91 cb 03 	lds	r25, 0x03CB
    4a8c:	01 96       	adiw	r24, 0x01	; 1
    4a8e:	60 e4       	ldi	r22, 0x40	; 64
    4a90:	70 e0       	ldi	r23, 0x00	; 0
    4a92:	0e 94 c6 26 	call	0x4d8c	; 0x4d8c <__divmodhi4>
    4a96:	90 93 cb 03 	sts	0x03CB, r25
    4a9a:	80 93 ca 03 	sts	0x03CA, r24
	
  #if defined(UDR0)
    UDR0 = c;
    4a9e:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
    4aa2:	ff 91       	pop	r31
    4aa4:	ef 91       	pop	r30
    4aa6:	bf 91       	pop	r27
    4aa8:	af 91       	pop	r26
    4aaa:	9f 91       	pop	r25
    4aac:	8f 91       	pop	r24
    4aae:	7f 91       	pop	r23
    4ab0:	6f 91       	pop	r22
    4ab2:	5f 91       	pop	r21
    4ab4:	3f 91       	pop	r19
    4ab6:	2f 91       	pop	r18
    4ab8:	0f 90       	pop	r0
    4aba:	0f be       	out	0x3f, r0	; 63
    4abc:	0f 90       	pop	r0
    4abe:	1f 90       	pop	r1
    4ac0:	18 95       	reti

00004ac2 <_ZN14HardwareSerialC1EP11ring_bufferS1_PVhS3_S3_S3_S3_hhhhh>:
#endif


// Constructors ////////////////////////////////////////////////////////////////

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
    4ac2:	8f 92       	push	r8
    4ac4:	af 92       	push	r10
    4ac6:	bf 92       	push	r11
    4ac8:	cf 92       	push	r12
    4aca:	df 92       	push	r13
    4acc:	ef 92       	push	r14
    4ace:	ff 92       	push	r15
    4ad0:	0f 93       	push	r16
    4ad2:	1f 93       	push	r17
    4ad4:	df 93       	push	r29
    4ad6:	cf 93       	push	r28
    4ad8:	cd b7       	in	r28, 0x3d	; 61
    4ada:	de b7       	in	r29, 0x3e	; 62
    4adc:	fc 01       	movw	r30, r24
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    4ade:	13 82       	std	Z+3, r1	; 0x03
    4ae0:	12 82       	std	Z+2, r1	; 0x02
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
    4ae2:	88 ee       	ldi	r24, 0xE8	; 232
    4ae4:	93 e0       	ldi	r25, 0x03	; 3
    4ae6:	a0 e0       	ldi	r26, 0x00	; 0
    4ae8:	b0 e0       	ldi	r27, 0x00	; 0
    4aea:	84 83       	std	Z+4, r24	; 0x04
    4aec:	95 83       	std	Z+5, r25	; 0x05
    4aee:	a6 83       	std	Z+6, r26	; 0x06
    4af0:	b7 83       	std	Z+7, r27	; 0x07
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    4af2:	86 ef       	ldi	r24, 0xF6	; 246
    4af4:	92 e0       	ldi	r25, 0x02	; 2
    4af6:	91 83       	std	Z+1, r25	; 0x01
    4af8:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
    4afa:	75 87       	std	Z+13, r23	; 0x0d
    4afc:	64 87       	std	Z+12, r22	; 0x0c
  _tx_buffer = tx_buffer;
    4afe:	57 87       	std	Z+15, r21	; 0x0f
    4b00:	46 87       	std	Z+14, r20	; 0x0e
  _ubrrh = ubrrh;
    4b02:	31 8b       	std	Z+17, r19	; 0x11
    4b04:	20 8b       	std	Z+16, r18	; 0x10
  _ubrrl = ubrrl;
    4b06:	13 8b       	std	Z+19, r17	; 0x13
    4b08:	02 8b       	std	Z+18, r16	; 0x12
  _ucsra = ucsra;
    4b0a:	f5 8a       	std	Z+21, r15	; 0x15
    4b0c:	e4 8a       	std	Z+20, r14	; 0x14
  _ucsrb = ucsrb;
    4b0e:	d7 8a       	std	Z+23, r13	; 0x17
    4b10:	c6 8a       	std	Z+22, r12	; 0x16
  _udr = udr;
    4b12:	b1 8e       	std	Z+25, r11	; 0x19
    4b14:	a0 8e       	std	Z+24, r10	; 0x18
  _rxen = rxen;
    4b16:	82 8e       	std	Z+26, r8	; 0x1a
  _txen = txen;
    4b18:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b1a:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    4b1c:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b1e:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    4b20:	88 89       	ldd	r24, Y+16	; 0x10
    4b22:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    4b24:	89 89       	ldd	r24, Y+17	; 0x11
    4b26:	86 8f       	std	Z+30, r24	; 0x1e
}
    4b28:	cf 91       	pop	r28
    4b2a:	df 91       	pop	r29
    4b2c:	1f 91       	pop	r17
    4b2e:	0f 91       	pop	r16
    4b30:	ff 90       	pop	r15
    4b32:	ef 90       	pop	r14
    4b34:	df 90       	pop	r13
    4b36:	cf 90       	pop	r12
    4b38:	bf 90       	pop	r11
    4b3a:	af 90       	pop	r10
    4b3c:	8f 90       	pop	r8
    4b3e:	08 95       	ret

00004b40 <_ZN14HardwareSerial5beginEm>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
    4b40:	df 92       	push	r13
    4b42:	ef 92       	push	r14
    4b44:	ff 92       	push	r15
    4b46:	0f 93       	push	r16
    4b48:	1f 93       	push	r17
    4b4a:	cf 93       	push	r28
    4b4c:	df 93       	push	r29
    4b4e:	ec 01       	movw	r28, r24
    4b50:	7a 01       	movw	r14, r20
    4b52:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
    4b54:	dd 24       	eor	r13, r13
    4b56:	d3 94       	inc	r13
    4b58:	40 30       	cpi	r20, 0x00	; 0
    4b5a:	81 ee       	ldi	r24, 0xE1	; 225
    4b5c:	58 07       	cpc	r21, r24
    4b5e:	80 e0       	ldi	r24, 0x00	; 0
    4b60:	68 07       	cpc	r22, r24
    4b62:	80 e0       	ldi	r24, 0x00	; 0
    4b64:	78 07       	cpc	r23, r24
    4b66:	49 f4       	brne	.+18     	; 0x4b7a <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
    4b68:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
    4b6a:	ec 89       	ldd	r30, Y+20	; 0x14
    4b6c:	fd 89       	ldd	r31, Y+21	; 0x15
    4b6e:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4b70:	60 e8       	ldi	r22, 0x80	; 128
    4b72:	74 e8       	ldi	r23, 0x84	; 132
    4b74:	8e e1       	ldi	r24, 0x1E	; 30
    4b76:	90 e0       	ldi	r25, 0x00	; 0
    4b78:	0f c0       	rjmp	.+30     	; 0x4b98 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    4b7a:	ec 89       	ldd	r30, Y+20	; 0x14
    4b7c:	fd 89       	ldd	r31, Y+21	; 0x15
    4b7e:	81 e0       	ldi	r24, 0x01	; 1
    4b80:	90 e0       	ldi	r25, 0x00	; 0
    4b82:	0e 8c       	ldd	r0, Y+30	; 0x1e
    4b84:	02 c0       	rjmp	.+4      	; 0x4b8a <_ZN14HardwareSerial5beginEm+0x4a>
    4b86:	88 0f       	add	r24, r24
    4b88:	99 1f       	adc	r25, r25
    4b8a:	0a 94       	dec	r0
    4b8c:	e2 f7       	brpl	.-8      	; 0x4b86 <_ZN14HardwareSerial5beginEm+0x46>
    4b8e:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
    4b90:	60 e0       	ldi	r22, 0x00	; 0
    4b92:	79 e0       	ldi	r23, 0x09	; 9
    4b94:	8d e3       	ldi	r24, 0x3D	; 61
    4b96:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    4b98:	a8 01       	movw	r20, r16
    4b9a:	97 01       	movw	r18, r14
    4b9c:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    4ba0:	21 50       	subi	r18, 0x01	; 1
    4ba2:	30 40       	sbci	r19, 0x00	; 0
    4ba4:	40 40       	sbci	r20, 0x00	; 0
    4ba6:	50 40       	sbci	r21, 0x00	; 0
    4ba8:	56 95       	lsr	r21
    4baa:	47 95       	ror	r20
    4bac:	37 95       	ror	r19
    4bae:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
    4bb0:	80 e1       	ldi	r24, 0x10	; 16
    4bb2:	20 30       	cpi	r18, 0x00	; 0
    4bb4:	38 07       	cpc	r19, r24
    4bb6:	10 f0       	brcs	.+4      	; 0x4bbc <_ZN14HardwareSerial5beginEm+0x7c>
    4bb8:	dd 20       	and	r13, r13
    4bba:	b1 f6       	brne	.-84     	; 0x4b68 <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    4bbc:	e8 89       	ldd	r30, Y+16	; 0x10
    4bbe:	f9 89       	ldd	r31, Y+17	; 0x11
    4bc0:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
    4bc2:	ea 89       	ldd	r30, Y+18	; 0x12
    4bc4:	fb 89       	ldd	r31, Y+19	; 0x13
    4bc6:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
    4bc8:	ee 89       	ldd	r30, Y+22	; 0x16
    4bca:	ff 89       	ldd	r31, Y+23	; 0x17
    4bcc:	40 81       	ld	r20, Z
    4bce:	81 e0       	ldi	r24, 0x01	; 1
    4bd0:	90 e0       	ldi	r25, 0x00	; 0
    4bd2:	9c 01       	movw	r18, r24
    4bd4:	0a 8c       	ldd	r0, Y+26	; 0x1a
    4bd6:	02 c0       	rjmp	.+4      	; 0x4bdc <_ZN14HardwareSerial5beginEm+0x9c>
    4bd8:	22 0f       	add	r18, r18
    4bda:	33 1f       	adc	r19, r19
    4bdc:	0a 94       	dec	r0
    4bde:	e2 f7       	brpl	.-8      	; 0x4bd8 <_ZN14HardwareSerial5beginEm+0x98>
    4be0:	42 2b       	or	r20, r18
    4be2:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
    4be4:	ee 89       	ldd	r30, Y+22	; 0x16
    4be6:	ff 89       	ldd	r31, Y+23	; 0x17
    4be8:	40 81       	ld	r20, Z
    4bea:	9c 01       	movw	r18, r24
    4bec:	0b 8c       	ldd	r0, Y+27	; 0x1b
    4bee:	02 c0       	rjmp	.+4      	; 0x4bf4 <_ZN14HardwareSerial5beginEm+0xb4>
    4bf0:	22 0f       	add	r18, r18
    4bf2:	33 1f       	adc	r19, r19
    4bf4:	0a 94       	dec	r0
    4bf6:	e2 f7       	brpl	.-8      	; 0x4bf0 <_ZN14HardwareSerial5beginEm+0xb0>
    4bf8:	42 2b       	or	r20, r18
    4bfa:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
    4bfc:	ee 89       	ldd	r30, Y+22	; 0x16
    4bfe:	ff 89       	ldd	r31, Y+23	; 0x17
    4c00:	40 81       	ld	r20, Z
    4c02:	9c 01       	movw	r18, r24
    4c04:	0c 8c       	ldd	r0, Y+28	; 0x1c
    4c06:	02 c0       	rjmp	.+4      	; 0x4c0c <_ZN14HardwareSerial5beginEm+0xcc>
    4c08:	22 0f       	add	r18, r18
    4c0a:	33 1f       	adc	r19, r19
    4c0c:	0a 94       	dec	r0
    4c0e:	e2 f7       	brpl	.-8      	; 0x4c08 <_ZN14HardwareSerial5beginEm+0xc8>
    4c10:	42 2b       	or	r20, r18
    4c12:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
    4c14:	ee 89       	ldd	r30, Y+22	; 0x16
    4c16:	ff 89       	ldd	r31, Y+23	; 0x17
    4c18:	20 81       	ld	r18, Z
    4c1a:	0d 8c       	ldd	r0, Y+29	; 0x1d
    4c1c:	02 c0       	rjmp	.+4      	; 0x4c22 <_ZN14HardwareSerial5beginEm+0xe2>
    4c1e:	88 0f       	add	r24, r24
    4c20:	99 1f       	adc	r25, r25
    4c22:	0a 94       	dec	r0
    4c24:	e2 f7       	brpl	.-8      	; 0x4c1e <_ZN14HardwareSerial5beginEm+0xde>
    4c26:	80 95       	com	r24
    4c28:	82 23       	and	r24, r18
    4c2a:	80 83       	st	Z, r24
}
    4c2c:	df 91       	pop	r29
    4c2e:	cf 91       	pop	r28
    4c30:	1f 91       	pop	r17
    4c32:	0f 91       	pop	r16
    4c34:	ff 90       	pop	r15
    4c36:	ef 90       	pop	r14
    4c38:	df 90       	pop	r13
    4c3a:	08 95       	ret

00004c3c <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
{
    4c3c:	cf 93       	push	r28
    4c3e:	df 93       	push	r29
    4c40:	fc 01       	movw	r30, r24
  // wait for transmission of outgoing data
  while (_tx_buffer->head != _tx_buffer->tail)
    4c42:	86 85       	ldd	r24, Z+14	; 0x0e
    4c44:	97 85       	ldd	r25, Z+15	; 0x0f
    4c46:	dc 01       	movw	r26, r24
    4c48:	a0 5c       	subi	r26, 0xC0	; 192
    4c4a:	bf 4f       	sbci	r27, 0xFF	; 255
    4c4c:	8e 5b       	subi	r24, 0xBE	; 190
    4c4e:	9f 4f       	sbci	r25, 0xFF	; 255
    4c50:	4d 91       	ld	r20, X+
    4c52:	5c 91       	ld	r21, X
    4c54:	11 97       	sbiw	r26, 0x01	; 1
    4c56:	ec 01       	movw	r28, r24
    4c58:	28 81       	ld	r18, Y
    4c5a:	39 81       	ldd	r19, Y+1	; 0x01
    4c5c:	42 17       	cp	r20, r18
    4c5e:	53 07       	cpc	r21, r19
    4c60:	b9 f7       	brne	.-18     	; 0x4c50 <_ZN14HardwareSerial3endEv+0x14>
    ;

  cbi(*_ucsrb, _rxen);
    4c62:	a6 89       	ldd	r26, Z+22	; 0x16
    4c64:	b7 89       	ldd	r27, Z+23	; 0x17
    4c66:	4c 91       	ld	r20, X
    4c68:	81 e0       	ldi	r24, 0x01	; 1
    4c6a:	90 e0       	ldi	r25, 0x00	; 0
    4c6c:	9c 01       	movw	r18, r24
    4c6e:	02 8c       	ldd	r0, Z+26	; 0x1a
    4c70:	02 c0       	rjmp	.+4      	; 0x4c76 <_ZN14HardwareSerial3endEv+0x3a>
    4c72:	22 0f       	add	r18, r18
    4c74:	33 1f       	adc	r19, r19
    4c76:	0a 94       	dec	r0
    4c78:	e2 f7       	brpl	.-8      	; 0x4c72 <_ZN14HardwareSerial3endEv+0x36>
    4c7a:	20 95       	com	r18
    4c7c:	24 23       	and	r18, r20
    4c7e:	2c 93       	st	X, r18
  cbi(*_ucsrb, _txen);
    4c80:	a6 89       	ldd	r26, Z+22	; 0x16
    4c82:	b7 89       	ldd	r27, Z+23	; 0x17
    4c84:	4c 91       	ld	r20, X
    4c86:	9c 01       	movw	r18, r24
    4c88:	03 8c       	ldd	r0, Z+27	; 0x1b
    4c8a:	02 c0       	rjmp	.+4      	; 0x4c90 <_ZN14HardwareSerial3endEv+0x54>
    4c8c:	22 0f       	add	r18, r18
    4c8e:	33 1f       	adc	r19, r19
    4c90:	0a 94       	dec	r0
    4c92:	e2 f7       	brpl	.-8      	; 0x4c8c <_ZN14HardwareSerial3endEv+0x50>
    4c94:	20 95       	com	r18
    4c96:	24 23       	and	r18, r20
    4c98:	2c 93       	st	X, r18
  cbi(*_ucsrb, _rxcie);  
    4c9a:	a6 89       	ldd	r26, Z+22	; 0x16
    4c9c:	b7 89       	ldd	r27, Z+23	; 0x17
    4c9e:	4c 91       	ld	r20, X
    4ca0:	9c 01       	movw	r18, r24
    4ca2:	04 8c       	ldd	r0, Z+28	; 0x1c
    4ca4:	02 c0       	rjmp	.+4      	; 0x4caa <_ZN14HardwareSerial3endEv+0x6e>
    4ca6:	22 0f       	add	r18, r18
    4ca8:	33 1f       	adc	r19, r19
    4caa:	0a 94       	dec	r0
    4cac:	e2 f7       	brpl	.-8      	; 0x4ca6 <_ZN14HardwareSerial3endEv+0x6a>
    4cae:	20 95       	com	r18
    4cb0:	24 23       	and	r18, r20
    4cb2:	2c 93       	st	X, r18
  cbi(*_ucsrb, _udrie);
    4cb4:	a6 89       	ldd	r26, Z+22	; 0x16
    4cb6:	b7 89       	ldd	r27, Z+23	; 0x17
    4cb8:	2c 91       	ld	r18, X
    4cba:	05 8c       	ldd	r0, Z+29	; 0x1d
    4cbc:	02 c0       	rjmp	.+4      	; 0x4cc2 <_ZN14HardwareSerial3endEv+0x86>
    4cbe:	88 0f       	add	r24, r24
    4cc0:	99 1f       	adc	r25, r25
    4cc2:	0a 94       	dec	r0
    4cc4:	e2 f7       	brpl	.-8      	; 0x4cbe <_ZN14HardwareSerial3endEv+0x82>
    4cc6:	80 95       	com	r24
    4cc8:	82 23       	and	r24, r18
    4cca:	8c 93       	st	X, r24
  
  // clear any received data
  _rx_buffer->head = _rx_buffer->tail;
    4ccc:	84 85       	ldd	r24, Z+12	; 0x0c
    4cce:	95 85       	ldd	r25, Z+13	; 0x0d
    4cd0:	fc 01       	movw	r30, r24
    4cd2:	ee 5b       	subi	r30, 0xBE	; 190
    4cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4cd6:	20 81       	ld	r18, Z
    4cd8:	31 81       	ldd	r19, Z+1	; 0x01
    4cda:	80 5c       	subi	r24, 0xC0	; 192
    4cdc:	9f 4f       	sbci	r25, 0xFF	; 255
    4cde:	fc 01       	movw	r30, r24
    4ce0:	31 83       	std	Z+1, r19	; 0x01
    4ce2:	20 83       	st	Z, r18
}
    4ce4:	df 91       	pop	r29
    4ce6:	cf 91       	pop	r28
    4ce8:	08 95       	ret

00004cea <_GLOBAL__I_rx_buffer>:
    4cea:	10 92 cf 03 	sts	0x03CF, r1
    4cee:	10 92 ce 03 	sts	0x03CE, r1
    4cf2:	88 ee       	ldi	r24, 0xE8	; 232
    4cf4:	93 e0       	ldi	r25, 0x03	; 3
    4cf6:	a0 e0       	ldi	r26, 0x00	; 0
    4cf8:	b0 e0       	ldi	r27, 0x00	; 0
    4cfa:	80 93 d0 03 	sts	0x03D0, r24
    4cfe:	90 93 d1 03 	sts	0x03D1, r25
    4d02:	a0 93 d2 03 	sts	0x03D2, r26
    4d06:	b0 93 d3 03 	sts	0x03D3, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
    4d0a:	ee ec       	ldi	r30, 0xCE	; 206
    4d0c:	f3 e0       	ldi	r31, 0x03	; 3
    4d0e:	86 ef       	ldi	r24, 0xF6	; 246
    4d10:	92 e0       	ldi	r25, 0x02	; 2
    4d12:	92 93       	st	-Z, r25
    4d14:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
    4d16:	84 e4       	ldi	r24, 0x44	; 68
    4d18:	93 e0       	ldi	r25, 0x03	; 3
    4d1a:	95 87       	std	Z+13, r25	; 0x0d
    4d1c:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
    4d1e:	88 e8       	ldi	r24, 0x88	; 136
    4d20:	93 e0       	ldi	r25, 0x03	; 3
    4d22:	97 87       	std	Z+15, r25	; 0x0f
    4d24:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
    4d26:	85 ec       	ldi	r24, 0xC5	; 197
    4d28:	90 e0       	ldi	r25, 0x00	; 0
    4d2a:	91 8b       	std	Z+17, r25	; 0x11
    4d2c:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
    4d2e:	84 ec       	ldi	r24, 0xC4	; 196
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	93 8b       	std	Z+19, r25	; 0x13
    4d34:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
    4d36:	80 ec       	ldi	r24, 0xC0	; 192
    4d38:	90 e0       	ldi	r25, 0x00	; 0
    4d3a:	95 8b       	std	Z+21, r25	; 0x15
    4d3c:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
    4d3e:	81 ec       	ldi	r24, 0xC1	; 193
    4d40:	90 e0       	ldi	r25, 0x00	; 0
    4d42:	97 8b       	std	Z+23, r25	; 0x17
    4d44:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
    4d46:	86 ec       	ldi	r24, 0xC6	; 198
    4d48:	90 e0       	ldi	r25, 0x00	; 0
    4d4a:	91 8f       	std	Z+25, r25	; 0x19
    4d4c:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
    4d4e:	84 e0       	ldi	r24, 0x04	; 4
    4d50:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
    4d52:	83 e0       	ldi	r24, 0x03	; 3
    4d54:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
    4d56:	87 e0       	ldi	r24, 0x07	; 7
    4d58:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
    4d5a:	85 e0       	ldi	r24, 0x05	; 5
    4d5c:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
    4d5e:	81 e0       	ldi	r24, 0x01	; 1
    4d60:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
    4d62:	08 95       	ret

00004d64 <__udivmodhi4>:
    4d64:	aa 1b       	sub	r26, r26
    4d66:	bb 1b       	sub	r27, r27
    4d68:	51 e1       	ldi	r21, 0x11	; 17
    4d6a:	07 c0       	rjmp	.+14     	; 0x4d7a <__udivmodhi4_ep>

00004d6c <__udivmodhi4_loop>:
    4d6c:	aa 1f       	adc	r26, r26
    4d6e:	bb 1f       	adc	r27, r27
    4d70:	a6 17       	cp	r26, r22
    4d72:	b7 07       	cpc	r27, r23
    4d74:	10 f0       	brcs	.+4      	; 0x4d7a <__udivmodhi4_ep>
    4d76:	a6 1b       	sub	r26, r22
    4d78:	b7 0b       	sbc	r27, r23

00004d7a <__udivmodhi4_ep>:
    4d7a:	88 1f       	adc	r24, r24
    4d7c:	99 1f       	adc	r25, r25
    4d7e:	5a 95       	dec	r21
    4d80:	a9 f7       	brne	.-22     	; 0x4d6c <__udivmodhi4_loop>
    4d82:	80 95       	com	r24
    4d84:	90 95       	com	r25
    4d86:	bc 01       	movw	r22, r24
    4d88:	cd 01       	movw	r24, r26
    4d8a:	08 95       	ret

00004d8c <__divmodhi4>:
    4d8c:	97 fb       	bst	r25, 7
    4d8e:	09 2e       	mov	r0, r25
    4d90:	07 26       	eor	r0, r23
    4d92:	0a d0       	rcall	.+20     	; 0x4da8 <__divmodhi4_neg1>
    4d94:	77 fd       	sbrc	r23, 7
    4d96:	04 d0       	rcall	.+8      	; 0x4da0 <__divmodhi4_neg2>
    4d98:	e5 df       	rcall	.-54     	; 0x4d64 <__udivmodhi4>
    4d9a:	06 d0       	rcall	.+12     	; 0x4da8 <__divmodhi4_neg1>
    4d9c:	00 20       	and	r0, r0
    4d9e:	1a f4       	brpl	.+6      	; 0x4da6 <__divmodhi4_exit>

00004da0 <__divmodhi4_neg2>:
    4da0:	70 95       	com	r23
    4da2:	61 95       	neg	r22
    4da4:	7f 4f       	sbci	r23, 0xFF	; 255

00004da6 <__divmodhi4_exit>:
    4da6:	08 95       	ret

00004da8 <__divmodhi4_neg1>:
    4da8:	f6 f7       	brtc	.-4      	; 0x4da6 <__divmodhi4_exit>
    4daa:	90 95       	com	r25
    4dac:	81 95       	neg	r24
    4dae:	9f 4f       	sbci	r25, 0xFF	; 255
    4db0:	08 95       	ret

00004db2 <__udivmodsi4>:
    4db2:	a1 e2       	ldi	r26, 0x21	; 33
    4db4:	1a 2e       	mov	r1, r26
    4db6:	aa 1b       	sub	r26, r26
    4db8:	bb 1b       	sub	r27, r27
    4dba:	fd 01       	movw	r30, r26
    4dbc:	0d c0       	rjmp	.+26     	; 0x4dd8 <__udivmodsi4_ep>

00004dbe <__udivmodsi4_loop>:
    4dbe:	aa 1f       	adc	r26, r26
    4dc0:	bb 1f       	adc	r27, r27
    4dc2:	ee 1f       	adc	r30, r30
    4dc4:	ff 1f       	adc	r31, r31
    4dc6:	a2 17       	cp	r26, r18
    4dc8:	b3 07       	cpc	r27, r19
    4dca:	e4 07       	cpc	r30, r20
    4dcc:	f5 07       	cpc	r31, r21
    4dce:	20 f0       	brcs	.+8      	; 0x4dd8 <__udivmodsi4_ep>
    4dd0:	a2 1b       	sub	r26, r18
    4dd2:	b3 0b       	sbc	r27, r19
    4dd4:	e4 0b       	sbc	r30, r20
    4dd6:	f5 0b       	sbc	r31, r21

00004dd8 <__udivmodsi4_ep>:
    4dd8:	66 1f       	adc	r22, r22
    4dda:	77 1f       	adc	r23, r23
    4ddc:	88 1f       	adc	r24, r24
    4dde:	99 1f       	adc	r25, r25
    4de0:	1a 94       	dec	r1
    4de2:	69 f7       	brne	.-38     	; 0x4dbe <__udivmodsi4_loop>
    4de4:	60 95       	com	r22
    4de6:	70 95       	com	r23
    4de8:	80 95       	com	r24
    4dea:	90 95       	com	r25
    4dec:	9b 01       	movw	r18, r22
    4dee:	ac 01       	movw	r20, r24
    4df0:	bd 01       	movw	r22, r26
    4df2:	cf 01       	movw	r24, r30
    4df4:	08 95       	ret

00004df6 <__prologue_saves__>:
    4df6:	2f 92       	push	r2
    4df8:	3f 92       	push	r3
    4dfa:	4f 92       	push	r4
    4dfc:	5f 92       	push	r5
    4dfe:	6f 92       	push	r6
    4e00:	7f 92       	push	r7
    4e02:	8f 92       	push	r8
    4e04:	9f 92       	push	r9
    4e06:	af 92       	push	r10
    4e08:	bf 92       	push	r11
    4e0a:	cf 92       	push	r12
    4e0c:	df 92       	push	r13
    4e0e:	ef 92       	push	r14
    4e10:	ff 92       	push	r15
    4e12:	0f 93       	push	r16
    4e14:	1f 93       	push	r17
    4e16:	cf 93       	push	r28
    4e18:	df 93       	push	r29
    4e1a:	cd b7       	in	r28, 0x3d	; 61
    4e1c:	de b7       	in	r29, 0x3e	; 62
    4e1e:	ca 1b       	sub	r28, r26
    4e20:	db 0b       	sbc	r29, r27
    4e22:	0f b6       	in	r0, 0x3f	; 63
    4e24:	f8 94       	cli
    4e26:	de bf       	out	0x3e, r29	; 62
    4e28:	0f be       	out	0x3f, r0	; 63
    4e2a:	cd bf       	out	0x3d, r28	; 61
    4e2c:	09 94       	ijmp

00004e2e <__epilogue_restores__>:
    4e2e:	2a 88       	ldd	r2, Y+18	; 0x12
    4e30:	39 88       	ldd	r3, Y+17	; 0x11
    4e32:	48 88       	ldd	r4, Y+16	; 0x10
    4e34:	5f 84       	ldd	r5, Y+15	; 0x0f
    4e36:	6e 84       	ldd	r6, Y+14	; 0x0e
    4e38:	7d 84       	ldd	r7, Y+13	; 0x0d
    4e3a:	8c 84       	ldd	r8, Y+12	; 0x0c
    4e3c:	9b 84       	ldd	r9, Y+11	; 0x0b
    4e3e:	aa 84       	ldd	r10, Y+10	; 0x0a
    4e40:	b9 84       	ldd	r11, Y+9	; 0x09
    4e42:	c8 84       	ldd	r12, Y+8	; 0x08
    4e44:	df 80       	ldd	r13, Y+7	; 0x07
    4e46:	ee 80       	ldd	r14, Y+6	; 0x06
    4e48:	fd 80       	ldd	r15, Y+5	; 0x05
    4e4a:	0c 81       	ldd	r16, Y+4	; 0x04
    4e4c:	1b 81       	ldd	r17, Y+3	; 0x03
    4e4e:	aa 81       	ldd	r26, Y+2	; 0x02
    4e50:	b9 81       	ldd	r27, Y+1	; 0x01
    4e52:	ce 0f       	add	r28, r30
    4e54:	d1 1d       	adc	r29, r1
    4e56:	0f b6       	in	r0, 0x3f	; 63
    4e58:	f8 94       	cli
    4e5a:	de bf       	out	0x3e, r29	; 62
    4e5c:	0f be       	out	0x3f, r0	; 63
    4e5e:	cd bf       	out	0x3d, r28	; 61
    4e60:	ed 01       	movw	r28, r26
    4e62:	08 95       	ret

00004e64 <__tablejump2__>:
    4e64:	ee 0f       	add	r30, r30
    4e66:	ff 1f       	adc	r31, r31

00004e68 <__tablejump__>:
    4e68:	05 90       	lpm	r0, Z+
    4e6a:	f4 91       	lpm	r31, Z+
    4e6c:	e0 2d       	mov	r30, r0
    4e6e:	09 94       	ijmp
    4e70:	11 f4       	brne	.+4      	; 0x4e76 <__tablejump__+0xe>
    4e72:	0e f4       	brtc	.+2      	; 0x4e76 <__tablejump__+0xe>
    4e74:	4d c0       	rjmp	.+154    	; 0x4f10 <__fp_nan>
    4e76:	3e c0       	rjmp	.+124    	; 0x4ef4 <__fp_mpack>

00004e78 <sqrt>:
    4e78:	5d d0       	rcall	.+186    	; 0x4f34 <__fp_splitA>
    4e7a:	d0 f3       	brcs	.-12     	; 0x4e70 <__tablejump__+0x8>
    4e7c:	99 23       	and	r25, r25
    4e7e:	d9 f3       	breq	.-10     	; 0x4e76 <__tablejump__+0xe>
    4e80:	ce f3       	brts	.-14     	; 0x4e74 <__tablejump__+0xc>
    4e82:	9f 57       	subi	r25, 0x7F	; 127
    4e84:	55 0b       	sbc	r21, r21
    4e86:	87 ff       	sbrs	r24, 7
    4e88:	46 d0       	rcall	.+140    	; 0x4f16 <__fp_norm2>
    4e8a:	00 24       	eor	r0, r0
    4e8c:	a0 e6       	ldi	r26, 0x60	; 96
    4e8e:	40 ea       	ldi	r20, 0xA0	; 160
    4e90:	90 01       	movw	r18, r0
    4e92:	80 58       	subi	r24, 0x80	; 128
    4e94:	56 95       	lsr	r21
    4e96:	97 95       	ror	r25
    4e98:	28 f4       	brcc	.+10     	; 0x4ea4 <sqrt+0x2c>
    4e9a:	80 5c       	subi	r24, 0xC0	; 192
    4e9c:	66 0f       	add	r22, r22
    4e9e:	77 1f       	adc	r23, r23
    4ea0:	88 1f       	adc	r24, r24
    4ea2:	20 f0       	brcs	.+8      	; 0x4eac <sqrt+0x34>
    4ea4:	26 17       	cp	r18, r22
    4ea6:	37 07       	cpc	r19, r23
    4ea8:	48 07       	cpc	r20, r24
    4eaa:	30 f4       	brcc	.+12     	; 0x4eb8 <sqrt+0x40>
    4eac:	62 1b       	sub	r22, r18
    4eae:	73 0b       	sbc	r23, r19
    4eb0:	84 0b       	sbc	r24, r20
    4eb2:	20 29       	or	r18, r0
    4eb4:	31 29       	or	r19, r1
    4eb6:	4a 2b       	or	r20, r26
    4eb8:	a6 95       	lsr	r26
    4eba:	17 94       	ror	r1
    4ebc:	07 94       	ror	r0
    4ebe:	20 25       	eor	r18, r0
    4ec0:	31 25       	eor	r19, r1
    4ec2:	4a 27       	eor	r20, r26
    4ec4:	58 f7       	brcc	.-42     	; 0x4e9c <sqrt+0x24>
    4ec6:	66 0f       	add	r22, r22
    4ec8:	77 1f       	adc	r23, r23
    4eca:	88 1f       	adc	r24, r24
    4ecc:	20 f0       	brcs	.+8      	; 0x4ed6 <sqrt+0x5e>
    4ece:	26 17       	cp	r18, r22
    4ed0:	37 07       	cpc	r19, r23
    4ed2:	48 07       	cpc	r20, r24
    4ed4:	30 f4       	brcc	.+12     	; 0x4ee2 <sqrt+0x6a>
    4ed6:	62 0b       	sbc	r22, r18
    4ed8:	73 0b       	sbc	r23, r19
    4eda:	84 0b       	sbc	r24, r20
    4edc:	20 0d       	add	r18, r0
    4ede:	31 1d       	adc	r19, r1
    4ee0:	41 1d       	adc	r20, r1
    4ee2:	a0 95       	com	r26
    4ee4:	81 f7       	brne	.-32     	; 0x4ec6 <sqrt+0x4e>
    4ee6:	b9 01       	movw	r22, r18
    4ee8:	84 2f       	mov	r24, r20
    4eea:	91 58       	subi	r25, 0x81	; 129
    4eec:	88 0f       	add	r24, r24
    4eee:	96 95       	lsr	r25
    4ef0:	87 95       	ror	r24
    4ef2:	08 95       	ret

00004ef4 <__fp_mpack>:
    4ef4:	9f 3f       	cpi	r25, 0xFF	; 255
    4ef6:	31 f0       	breq	.+12     	; 0x4f04 <__fp_mpack_finite+0xc>

00004ef8 <__fp_mpack_finite>:
    4ef8:	91 50       	subi	r25, 0x01	; 1
    4efa:	20 f4       	brcc	.+8      	; 0x4f04 <__fp_mpack_finite+0xc>
    4efc:	87 95       	ror	r24
    4efe:	77 95       	ror	r23
    4f00:	67 95       	ror	r22
    4f02:	b7 95       	ror	r27
    4f04:	88 0f       	add	r24, r24
    4f06:	91 1d       	adc	r25, r1
    4f08:	96 95       	lsr	r25
    4f0a:	87 95       	ror	r24
    4f0c:	97 f9       	bld	r25, 7
    4f0e:	08 95       	ret

00004f10 <__fp_nan>:
    4f10:	9f ef       	ldi	r25, 0xFF	; 255
    4f12:	80 ec       	ldi	r24, 0xC0	; 192
    4f14:	08 95       	ret

00004f16 <__fp_norm2>:
    4f16:	91 50       	subi	r25, 0x01	; 1
    4f18:	50 40       	sbci	r21, 0x00	; 0
    4f1a:	66 0f       	add	r22, r22
    4f1c:	77 1f       	adc	r23, r23
    4f1e:	88 1f       	adc	r24, r24
    4f20:	d2 f7       	brpl	.-12     	; 0x4f16 <__fp_norm2>
    4f22:	08 95       	ret

00004f24 <__fp_split3>:
    4f24:	57 fd       	sbrc	r21, 7
    4f26:	90 58       	subi	r25, 0x80	; 128
    4f28:	44 0f       	add	r20, r20
    4f2a:	55 1f       	adc	r21, r21
    4f2c:	59 f0       	breq	.+22     	; 0x4f44 <__fp_splitA+0x10>
    4f2e:	5f 3f       	cpi	r21, 0xFF	; 255
    4f30:	71 f0       	breq	.+28     	; 0x4f4e <__fp_splitA+0x1a>
    4f32:	47 95       	ror	r20

00004f34 <__fp_splitA>:
    4f34:	88 0f       	add	r24, r24
    4f36:	97 fb       	bst	r25, 7
    4f38:	99 1f       	adc	r25, r25
    4f3a:	61 f0       	breq	.+24     	; 0x4f54 <__fp_splitA+0x20>
    4f3c:	9f 3f       	cpi	r25, 0xFF	; 255
    4f3e:	79 f0       	breq	.+30     	; 0x4f5e <__fp_splitA+0x2a>
    4f40:	87 95       	ror	r24
    4f42:	08 95       	ret
    4f44:	12 16       	cp	r1, r18
    4f46:	13 06       	cpc	r1, r19
    4f48:	14 06       	cpc	r1, r20
    4f4a:	55 1f       	adc	r21, r21
    4f4c:	f2 cf       	rjmp	.-28     	; 0x4f32 <__fp_split3+0xe>
    4f4e:	46 95       	lsr	r20
    4f50:	f1 df       	rcall	.-30     	; 0x4f34 <__fp_splitA>
    4f52:	08 c0       	rjmp	.+16     	; 0x4f64 <__fp_splitA+0x30>
    4f54:	16 16       	cp	r1, r22
    4f56:	17 06       	cpc	r1, r23
    4f58:	18 06       	cpc	r1, r24
    4f5a:	99 1f       	adc	r25, r25
    4f5c:	f1 cf       	rjmp	.-30     	; 0x4f40 <__fp_splitA+0xc>
    4f5e:	86 95       	lsr	r24
    4f60:	71 05       	cpc	r23, r1
    4f62:	61 05       	cpc	r22, r1
    4f64:	08 94       	sec
    4f66:	08 95       	ret

00004f68 <malloc>:
    4f68:	cf 93       	push	r28
    4f6a:	df 93       	push	r29
    4f6c:	82 30       	cpi	r24, 0x02	; 2
    4f6e:	91 05       	cpc	r25, r1
    4f70:	10 f4       	brcc	.+4      	; 0x4f76 <malloc+0xe>
    4f72:	82 e0       	ldi	r24, 0x02	; 2
    4f74:	90 e0       	ldi	r25, 0x00	; 0
    4f76:	e0 91 ed 03 	lds	r30, 0x03ED
    4f7a:	f0 91 ee 03 	lds	r31, 0x03EE
    4f7e:	40 e0       	ldi	r20, 0x00	; 0
    4f80:	50 e0       	ldi	r21, 0x00	; 0
    4f82:	20 e0       	ldi	r18, 0x00	; 0
    4f84:	30 e0       	ldi	r19, 0x00	; 0
    4f86:	26 c0       	rjmp	.+76     	; 0x4fd4 <malloc+0x6c>
    4f88:	60 81       	ld	r22, Z
    4f8a:	71 81       	ldd	r23, Z+1	; 0x01
    4f8c:	68 17       	cp	r22, r24
    4f8e:	79 07       	cpc	r23, r25
    4f90:	e0 f0       	brcs	.+56     	; 0x4fca <malloc+0x62>
    4f92:	68 17       	cp	r22, r24
    4f94:	79 07       	cpc	r23, r25
    4f96:	81 f4       	brne	.+32     	; 0x4fb8 <malloc+0x50>
    4f98:	82 81       	ldd	r24, Z+2	; 0x02
    4f9a:	93 81       	ldd	r25, Z+3	; 0x03
    4f9c:	21 15       	cp	r18, r1
    4f9e:	31 05       	cpc	r19, r1
    4fa0:	31 f0       	breq	.+12     	; 0x4fae <malloc+0x46>
    4fa2:	d9 01       	movw	r26, r18
    4fa4:	13 96       	adiw	r26, 0x03	; 3
    4fa6:	9c 93       	st	X, r25
    4fa8:	8e 93       	st	-X, r24
    4faa:	12 97       	sbiw	r26, 0x02	; 2
    4fac:	2b c0       	rjmp	.+86     	; 0x5004 <malloc+0x9c>
    4fae:	90 93 ee 03 	sts	0x03EE, r25
    4fb2:	80 93 ed 03 	sts	0x03ED, r24
    4fb6:	26 c0       	rjmp	.+76     	; 0x5004 <malloc+0x9c>
    4fb8:	41 15       	cp	r20, r1
    4fba:	51 05       	cpc	r21, r1
    4fbc:	19 f0       	breq	.+6      	; 0x4fc4 <malloc+0x5c>
    4fbe:	64 17       	cp	r22, r20
    4fc0:	75 07       	cpc	r23, r21
    4fc2:	18 f4       	brcc	.+6      	; 0x4fca <malloc+0x62>
    4fc4:	ab 01       	movw	r20, r22
    4fc6:	e9 01       	movw	r28, r18
    4fc8:	df 01       	movw	r26, r30
    4fca:	9f 01       	movw	r18, r30
    4fcc:	72 81       	ldd	r23, Z+2	; 0x02
    4fce:	63 81       	ldd	r22, Z+3	; 0x03
    4fd0:	e7 2f       	mov	r30, r23
    4fd2:	f6 2f       	mov	r31, r22
    4fd4:	30 97       	sbiw	r30, 0x00	; 0
    4fd6:	c1 f6       	brne	.-80     	; 0x4f88 <malloc+0x20>
    4fd8:	41 15       	cp	r20, r1
    4fda:	51 05       	cpc	r21, r1
    4fdc:	01 f1       	breq	.+64     	; 0x501e <malloc+0xb6>
    4fde:	48 1b       	sub	r20, r24
    4fe0:	59 0b       	sbc	r21, r25
    4fe2:	44 30       	cpi	r20, 0x04	; 4
    4fe4:	51 05       	cpc	r21, r1
    4fe6:	80 f4       	brcc	.+32     	; 0x5008 <malloc+0xa0>
    4fe8:	12 96       	adiw	r26, 0x02	; 2
    4fea:	8d 91       	ld	r24, X+
    4fec:	9c 91       	ld	r25, X
    4fee:	13 97       	sbiw	r26, 0x03	; 3
    4ff0:	20 97       	sbiw	r28, 0x00	; 0
    4ff2:	19 f0       	breq	.+6      	; 0x4ffa <malloc+0x92>
    4ff4:	9b 83       	std	Y+3, r25	; 0x03
    4ff6:	8a 83       	std	Y+2, r24	; 0x02
    4ff8:	04 c0       	rjmp	.+8      	; 0x5002 <malloc+0x9a>
    4ffa:	90 93 ee 03 	sts	0x03EE, r25
    4ffe:	80 93 ed 03 	sts	0x03ED, r24
    5002:	fd 01       	movw	r30, r26
    5004:	32 96       	adiw	r30, 0x02	; 2
    5006:	46 c0       	rjmp	.+140    	; 0x5094 <malloc+0x12c>
    5008:	fd 01       	movw	r30, r26
    500a:	e4 0f       	add	r30, r20
    500c:	f5 1f       	adc	r31, r21
    500e:	81 93       	st	Z+, r24
    5010:	91 93       	st	Z+, r25
    5012:	42 50       	subi	r20, 0x02	; 2
    5014:	50 40       	sbci	r21, 0x00	; 0
    5016:	11 96       	adiw	r26, 0x01	; 1
    5018:	5c 93       	st	X, r21
    501a:	4e 93       	st	-X, r20
    501c:	3b c0       	rjmp	.+118    	; 0x5094 <malloc+0x12c>
    501e:	20 91 eb 03 	lds	r18, 0x03EB
    5022:	30 91 ec 03 	lds	r19, 0x03EC
    5026:	21 15       	cp	r18, r1
    5028:	31 05       	cpc	r19, r1
    502a:	41 f4       	brne	.+16     	; 0x503c <malloc+0xd4>
    502c:	20 91 e5 02 	lds	r18, 0x02E5
    5030:	30 91 e6 02 	lds	r19, 0x02E6
    5034:	30 93 ec 03 	sts	0x03EC, r19
    5038:	20 93 eb 03 	sts	0x03EB, r18
    503c:	20 91 e7 02 	lds	r18, 0x02E7
    5040:	30 91 e8 02 	lds	r19, 0x02E8
    5044:	21 15       	cp	r18, r1
    5046:	31 05       	cpc	r19, r1
    5048:	41 f4       	brne	.+16     	; 0x505a <malloc+0xf2>
    504a:	2d b7       	in	r18, 0x3d	; 61
    504c:	3e b7       	in	r19, 0x3e	; 62
    504e:	40 91 e3 02 	lds	r20, 0x02E3
    5052:	50 91 e4 02 	lds	r21, 0x02E4
    5056:	24 1b       	sub	r18, r20
    5058:	35 0b       	sbc	r19, r21
    505a:	e0 91 eb 03 	lds	r30, 0x03EB
    505e:	f0 91 ec 03 	lds	r31, 0x03EC
    5062:	e2 17       	cp	r30, r18
    5064:	f3 07       	cpc	r31, r19
    5066:	a0 f4       	brcc	.+40     	; 0x5090 <malloc+0x128>
    5068:	2e 1b       	sub	r18, r30
    506a:	3f 0b       	sbc	r19, r31
    506c:	28 17       	cp	r18, r24
    506e:	39 07       	cpc	r19, r25
    5070:	78 f0       	brcs	.+30     	; 0x5090 <malloc+0x128>
    5072:	ac 01       	movw	r20, r24
    5074:	4e 5f       	subi	r20, 0xFE	; 254
    5076:	5f 4f       	sbci	r21, 0xFF	; 255
    5078:	24 17       	cp	r18, r20
    507a:	35 07       	cpc	r19, r21
    507c:	48 f0       	brcs	.+18     	; 0x5090 <malloc+0x128>
    507e:	4e 0f       	add	r20, r30
    5080:	5f 1f       	adc	r21, r31
    5082:	50 93 ec 03 	sts	0x03EC, r21
    5086:	40 93 eb 03 	sts	0x03EB, r20
    508a:	81 93       	st	Z+, r24
    508c:	91 93       	st	Z+, r25
    508e:	02 c0       	rjmp	.+4      	; 0x5094 <malloc+0x12c>
    5090:	e0 e0       	ldi	r30, 0x00	; 0
    5092:	f0 e0       	ldi	r31, 0x00	; 0
    5094:	cf 01       	movw	r24, r30
    5096:	df 91       	pop	r29
    5098:	cf 91       	pop	r28
    509a:	08 95       	ret

0000509c <free>:
    509c:	cf 93       	push	r28
    509e:	df 93       	push	r29
    50a0:	00 97       	sbiw	r24, 0x00	; 0
    50a2:	09 f4       	brne	.+2      	; 0x50a6 <free+0xa>
    50a4:	91 c0       	rjmp	.+290    	; 0x51c8 <free+0x12c>
    50a6:	fc 01       	movw	r30, r24
    50a8:	32 97       	sbiw	r30, 0x02	; 2
    50aa:	13 82       	std	Z+3, r1	; 0x03
    50ac:	12 82       	std	Z+2, r1	; 0x02
    50ae:	60 91 ed 03 	lds	r22, 0x03ED
    50b2:	70 91 ee 03 	lds	r23, 0x03EE
    50b6:	61 15       	cp	r22, r1
    50b8:	71 05       	cpc	r23, r1
    50ba:	81 f4       	brne	.+32     	; 0x50dc <free+0x40>
    50bc:	20 81       	ld	r18, Z
    50be:	31 81       	ldd	r19, Z+1	; 0x01
    50c0:	28 0f       	add	r18, r24
    50c2:	39 1f       	adc	r19, r25
    50c4:	80 91 eb 03 	lds	r24, 0x03EB
    50c8:	90 91 ec 03 	lds	r25, 0x03EC
    50cc:	82 17       	cp	r24, r18
    50ce:	93 07       	cpc	r25, r19
    50d0:	99 f5       	brne	.+102    	; 0x5138 <free+0x9c>
    50d2:	f0 93 ec 03 	sts	0x03EC, r31
    50d6:	e0 93 eb 03 	sts	0x03EB, r30
    50da:	76 c0       	rjmp	.+236    	; 0x51c8 <free+0x12c>
    50dc:	db 01       	movw	r26, r22
    50de:	80 e0       	ldi	r24, 0x00	; 0
    50e0:	90 e0       	ldi	r25, 0x00	; 0
    50e2:	02 c0       	rjmp	.+4      	; 0x50e8 <free+0x4c>
    50e4:	cd 01       	movw	r24, r26
    50e6:	d9 01       	movw	r26, r18
    50e8:	ae 17       	cp	r26, r30
    50ea:	bf 07       	cpc	r27, r31
    50ec:	48 f4       	brcc	.+18     	; 0x5100 <free+0x64>
    50ee:	12 96       	adiw	r26, 0x02	; 2
    50f0:	2d 91       	ld	r18, X+
    50f2:	3c 91       	ld	r19, X
    50f4:	13 97       	sbiw	r26, 0x03	; 3
    50f6:	21 15       	cp	r18, r1
    50f8:	31 05       	cpc	r19, r1
    50fa:	a1 f7       	brne	.-24     	; 0x50e4 <free+0x48>
    50fc:	cd 01       	movw	r24, r26
    50fe:	21 c0       	rjmp	.+66     	; 0x5142 <free+0xa6>
    5100:	b3 83       	std	Z+3, r27	; 0x03
    5102:	a2 83       	std	Z+2, r26	; 0x02
    5104:	ef 01       	movw	r28, r30
    5106:	49 91       	ld	r20, Y+
    5108:	59 91       	ld	r21, Y+
    510a:	9e 01       	movw	r18, r28
    510c:	24 0f       	add	r18, r20
    510e:	35 1f       	adc	r19, r21
    5110:	a2 17       	cp	r26, r18
    5112:	b3 07       	cpc	r27, r19
    5114:	79 f4       	brne	.+30     	; 0x5134 <free+0x98>
    5116:	2d 91       	ld	r18, X+
    5118:	3c 91       	ld	r19, X
    511a:	11 97       	sbiw	r26, 0x01	; 1
    511c:	24 0f       	add	r18, r20
    511e:	35 1f       	adc	r19, r21
    5120:	2e 5f       	subi	r18, 0xFE	; 254
    5122:	3f 4f       	sbci	r19, 0xFF	; 255
    5124:	31 83       	std	Z+1, r19	; 0x01
    5126:	20 83       	st	Z, r18
    5128:	12 96       	adiw	r26, 0x02	; 2
    512a:	2d 91       	ld	r18, X+
    512c:	3c 91       	ld	r19, X
    512e:	13 97       	sbiw	r26, 0x03	; 3
    5130:	33 83       	std	Z+3, r19	; 0x03
    5132:	22 83       	std	Z+2, r18	; 0x02
    5134:	00 97       	sbiw	r24, 0x00	; 0
    5136:	29 f4       	brne	.+10     	; 0x5142 <free+0xa6>
    5138:	f0 93 ee 03 	sts	0x03EE, r31
    513c:	e0 93 ed 03 	sts	0x03ED, r30
    5140:	43 c0       	rjmp	.+134    	; 0x51c8 <free+0x12c>
    5142:	dc 01       	movw	r26, r24
    5144:	13 96       	adiw	r26, 0x03	; 3
    5146:	fc 93       	st	X, r31
    5148:	ee 93       	st	-X, r30
    514a:	12 97       	sbiw	r26, 0x02	; 2
    514c:	4d 91       	ld	r20, X+
    514e:	5d 91       	ld	r21, X+
    5150:	a4 0f       	add	r26, r20
    5152:	b5 1f       	adc	r27, r21
    5154:	ea 17       	cp	r30, r26
    5156:	fb 07       	cpc	r31, r27
    5158:	69 f4       	brne	.+26     	; 0x5174 <free+0xd8>
    515a:	20 81       	ld	r18, Z
    515c:	31 81       	ldd	r19, Z+1	; 0x01
    515e:	24 0f       	add	r18, r20
    5160:	35 1f       	adc	r19, r21
    5162:	2e 5f       	subi	r18, 0xFE	; 254
    5164:	3f 4f       	sbci	r19, 0xFF	; 255
    5166:	ec 01       	movw	r28, r24
    5168:	39 83       	std	Y+1, r19	; 0x01
    516a:	28 83       	st	Y, r18
    516c:	22 81       	ldd	r18, Z+2	; 0x02
    516e:	33 81       	ldd	r19, Z+3	; 0x03
    5170:	3b 83       	std	Y+3, r19	; 0x03
    5172:	2a 83       	std	Y+2, r18	; 0x02
    5174:	e0 e0       	ldi	r30, 0x00	; 0
    5176:	f0 e0       	ldi	r31, 0x00	; 0
    5178:	02 c0       	rjmp	.+4      	; 0x517e <free+0xe2>
    517a:	fb 01       	movw	r30, r22
    517c:	bc 01       	movw	r22, r24
    517e:	db 01       	movw	r26, r22
    5180:	12 96       	adiw	r26, 0x02	; 2
    5182:	8d 91       	ld	r24, X+
    5184:	9c 91       	ld	r25, X
    5186:	13 97       	sbiw	r26, 0x03	; 3
    5188:	00 97       	sbiw	r24, 0x00	; 0
    518a:	b9 f7       	brne	.-18     	; 0x517a <free+0xde>
    518c:	9b 01       	movw	r18, r22
    518e:	2e 5f       	subi	r18, 0xFE	; 254
    5190:	3f 4f       	sbci	r19, 0xFF	; 255
    5192:	8d 91       	ld	r24, X+
    5194:	9c 91       	ld	r25, X
    5196:	11 97       	sbiw	r26, 0x01	; 1
    5198:	82 0f       	add	r24, r18
    519a:	93 1f       	adc	r25, r19
    519c:	40 91 eb 03 	lds	r20, 0x03EB
    51a0:	50 91 ec 03 	lds	r21, 0x03EC
    51a4:	48 17       	cp	r20, r24
    51a6:	59 07       	cpc	r21, r25
    51a8:	79 f4       	brne	.+30     	; 0x51c8 <free+0x12c>
    51aa:	30 97       	sbiw	r30, 0x00	; 0
    51ac:	29 f4       	brne	.+10     	; 0x51b8 <free+0x11c>
    51ae:	10 92 ee 03 	sts	0x03EE, r1
    51b2:	10 92 ed 03 	sts	0x03ED, r1
    51b6:	02 c0       	rjmp	.+4      	; 0x51bc <free+0x120>
    51b8:	13 82       	std	Z+3, r1	; 0x03
    51ba:	12 82       	std	Z+2, r1	; 0x02
    51bc:	22 50       	subi	r18, 0x02	; 2
    51be:	30 40       	sbci	r19, 0x00	; 0
    51c0:	30 93 ec 03 	sts	0x03EC, r19
    51c4:	20 93 eb 03 	sts	0x03EB, r18
    51c8:	df 91       	pop	r29
    51ca:	cf 91       	pop	r28
    51cc:	08 95       	ret

000051ce <realloc>:
    51ce:	a0 e0       	ldi	r26, 0x00	; 0
    51d0:	b0 e0       	ldi	r27, 0x00	; 0
    51d2:	ed ee       	ldi	r30, 0xED	; 237
    51d4:	f8 e2       	ldi	r31, 0x28	; 40
    51d6:	0c 94 01 27 	jmp	0x4e02	; 0x4e02 <__prologue_saves__+0xc>
    51da:	8c 01       	movw	r16, r24
    51dc:	cb 01       	movw	r24, r22
    51de:	01 15       	cp	r16, r1
    51e0:	11 05       	cpc	r17, r1
    51e2:	29 f4       	brne	.+10     	; 0x51ee <realloc+0x20>
    51e4:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <malloc>
    51e8:	08 2f       	mov	r16, r24
    51ea:	19 2f       	mov	r17, r25
    51ec:	b5 c0       	rjmp	.+362    	; 0x5358 <realloc+0x18a>
    51ee:	d8 01       	movw	r26, r16
    51f0:	12 97       	sbiw	r26, 0x02	; 2
    51f2:	98 01       	movw	r18, r16
    51f4:	26 0f       	add	r18, r22
    51f6:	37 1f       	adc	r19, r23
    51f8:	2a 17       	cp	r18, r26
    51fa:	3b 07       	cpc	r19, r27
    51fc:	08 f4       	brcc	.+2      	; 0x5200 <realloc+0x32>
    51fe:	aa c0       	rjmp	.+340    	; 0x5354 <realloc+0x186>
    5200:	ed 90       	ld	r14, X+
    5202:	fc 90       	ld	r15, X
    5204:	11 97       	sbiw	r26, 0x01	; 1
    5206:	e6 16       	cp	r14, r22
    5208:	f7 06       	cpc	r15, r23
    520a:	d0 f0       	brcs	.+52     	; 0x5240 <realloc+0x72>
    520c:	45 e0       	ldi	r20, 0x05	; 5
    520e:	e4 16       	cp	r14, r20
    5210:	f1 04       	cpc	r15, r1
    5212:	08 f4       	brcc	.+2      	; 0x5216 <realloc+0x48>
    5214:	a1 c0       	rjmp	.+322    	; 0x5358 <realloc+0x18a>
    5216:	a7 01       	movw	r20, r14
    5218:	44 50       	subi	r20, 0x04	; 4
    521a:	50 40       	sbci	r21, 0x00	; 0
    521c:	46 17       	cp	r20, r22
    521e:	57 07       	cpc	r21, r23
    5220:	08 f4       	brcc	.+2      	; 0x5224 <realloc+0x56>
    5222:	9a c0       	rjmp	.+308    	; 0x5358 <realloc+0x18a>
    5224:	a7 01       	movw	r20, r14
    5226:	42 50       	subi	r20, 0x02	; 2
    5228:	50 40       	sbci	r21, 0x00	; 0
    522a:	46 1b       	sub	r20, r22
    522c:	57 0b       	sbc	r21, r23
    522e:	f9 01       	movw	r30, r18
    5230:	41 93       	st	Z+, r20
    5232:	51 93       	st	Z+, r21
    5234:	6d 93       	st	X+, r22
    5236:	7c 93       	st	X, r23
    5238:	cf 01       	movw	r24, r30
    523a:	0e 94 4e 28 	call	0x509c	; 0x509c <free>
    523e:	8c c0       	rjmp	.+280    	; 0x5358 <realloc+0x18a>
    5240:	5b 01       	movw	r10, r22
    5242:	ae 18       	sub	r10, r14
    5244:	bf 08       	sbc	r11, r15
    5246:	48 01       	movw	r8, r16
    5248:	8e 0c       	add	r8, r14
    524a:	9f 1c       	adc	r9, r15
    524c:	e0 91 ed 03 	lds	r30, 0x03ED
    5250:	f0 91 ee 03 	lds	r31, 0x03EE
    5254:	cc 24       	eor	r12, r12
    5256:	dd 24       	eor	r13, r13
    5258:	c0 e0       	ldi	r28, 0x00	; 0
    525a:	d0 e0       	ldi	r29, 0x00	; 0
    525c:	41 c0       	rjmp	.+130    	; 0x52e0 <realloc+0x112>
    525e:	e8 15       	cp	r30, r8
    5260:	f9 05       	cpc	r31, r9
    5262:	99 f5       	brne	.+102    	; 0x52ca <realloc+0xfc>
    5264:	60 81       	ld	r22, Z
    5266:	71 81       	ldd	r23, Z+1	; 0x01
    5268:	ab 01       	movw	r20, r22
    526a:	4e 5f       	subi	r20, 0xFE	; 254
    526c:	5f 4f       	sbci	r21, 0xFF	; 255
    526e:	4a 15       	cp	r20, r10
    5270:	5b 05       	cpc	r21, r11
    5272:	58 f1       	brcs	.+86     	; 0x52ca <realloc+0xfc>
    5274:	ab 01       	movw	r20, r22
    5276:	4a 19       	sub	r20, r10
    5278:	5b 09       	sbc	r21, r11
    527a:	cc 24       	eor	r12, r12
    527c:	dd 24       	eor	r13, r13
    527e:	68 94       	set
    5280:	c1 f8       	bld	r12, 1
    5282:	c4 0e       	add	r12, r20
    5284:	d5 1e       	adc	r13, r21
    5286:	82 80       	ldd	r8, Z+2	; 0x02
    5288:	a3 80       	ldd	r10, Z+3	; 0x03
    528a:	e5 e0       	ldi	r30, 0x05	; 5
    528c:	ce 16       	cp	r12, r30
    528e:	d1 04       	cpc	r13, r1
    5290:	48 f0       	brcs	.+18     	; 0x52a4 <realloc+0xd6>
    5292:	f9 01       	movw	r30, r18
    5294:	82 82       	std	Z+2, r8	; 0x02
    5296:	a3 82       	std	Z+3, r10	; 0x03
    5298:	51 83       	std	Z+1, r21	; 0x01
    529a:	40 83       	st	Z, r20
    529c:	11 96       	adiw	r26, 0x01	; 1
    529e:	9c 93       	st	X, r25
    52a0:	8e 93       	st	-X, r24
    52a2:	09 c0       	rjmp	.+18     	; 0x52b6 <realloc+0xe8>
    52a4:	c7 01       	movw	r24, r14
    52a6:	02 96       	adiw	r24, 0x02	; 2
    52a8:	86 0f       	add	r24, r22
    52aa:	97 1f       	adc	r25, r23
    52ac:	11 96       	adiw	r26, 0x01	; 1
    52ae:	9c 93       	st	X, r25
    52b0:	8e 93       	st	-X, r24
    52b2:	e8 2d       	mov	r30, r8
    52b4:	fa 2d       	mov	r31, r10
    52b6:	20 97       	sbiw	r28, 0x00	; 0
    52b8:	19 f0       	breq	.+6      	; 0x52c0 <realloc+0xf2>
    52ba:	fb 83       	std	Y+3, r31	; 0x03
    52bc:	ea 83       	std	Y+2, r30	; 0x02
    52be:	4c c0       	rjmp	.+152    	; 0x5358 <realloc+0x18a>
    52c0:	f0 93 ee 03 	sts	0x03EE, r31
    52c4:	e0 93 ed 03 	sts	0x03ED, r30
    52c8:	47 c0       	rjmp	.+142    	; 0x5358 <realloc+0x18a>
    52ca:	40 81       	ld	r20, Z
    52cc:	51 81       	ldd	r21, Z+1	; 0x01
    52ce:	c4 16       	cp	r12, r20
    52d0:	d5 06       	cpc	r13, r21
    52d2:	08 f4       	brcc	.+2      	; 0x52d6 <realloc+0x108>
    52d4:	6a 01       	movw	r12, r20
    52d6:	ef 01       	movw	r28, r30
    52d8:	52 81       	ldd	r21, Z+2	; 0x02
    52da:	43 81       	ldd	r20, Z+3	; 0x03
    52dc:	e5 2f       	mov	r30, r21
    52de:	f4 2f       	mov	r31, r20
    52e0:	30 97       	sbiw	r30, 0x00	; 0
    52e2:	09 f0       	breq	.+2      	; 0x52e6 <realloc+0x118>
    52e4:	bc cf       	rjmp	.-136    	; 0x525e <realloc+0x90>
    52e6:	40 91 eb 03 	lds	r20, 0x03EB
    52ea:	50 91 ec 03 	lds	r21, 0x03EC
    52ee:	48 15       	cp	r20, r8
    52f0:	59 05       	cpc	r21, r9
    52f2:	e9 f4       	brne	.+58     	; 0x532e <realloc+0x160>
    52f4:	c8 16       	cp	r12, r24
    52f6:	d9 06       	cpc	r13, r25
    52f8:	d0 f4       	brcc	.+52     	; 0x532e <realloc+0x160>
    52fa:	40 91 e7 02 	lds	r20, 0x02E7
    52fe:	50 91 e8 02 	lds	r21, 0x02E8
    5302:	41 15       	cp	r20, r1
    5304:	51 05       	cpc	r21, r1
    5306:	41 f4       	brne	.+16     	; 0x5318 <realloc+0x14a>
    5308:	4d b7       	in	r20, 0x3d	; 61
    530a:	5e b7       	in	r21, 0x3e	; 62
    530c:	60 91 e3 02 	lds	r22, 0x02E3
    5310:	70 91 e4 02 	lds	r23, 0x02E4
    5314:	46 1b       	sub	r20, r22
    5316:	57 0b       	sbc	r21, r23
    5318:	24 17       	cp	r18, r20
    531a:	35 07       	cpc	r19, r21
    531c:	d8 f4       	brcc	.+54     	; 0x5354 <realloc+0x186>
    531e:	30 93 ec 03 	sts	0x03EC, r19
    5322:	20 93 eb 03 	sts	0x03EB, r18
    5326:	11 96       	adiw	r26, 0x01	; 1
    5328:	9c 93       	st	X, r25
    532a:	8e 93       	st	-X, r24
    532c:	15 c0       	rjmp	.+42     	; 0x5358 <realloc+0x18a>
    532e:	0e 94 b4 27 	call	0x4f68	; 0x4f68 <malloc>
    5332:	c8 2e       	mov	r12, r24
    5334:	e6 01       	movw	r28, r12
    5336:	6e 01       	movw	r12, r28
    5338:	d9 2e       	mov	r13, r25
    533a:	e6 01       	movw	r28, r12
    533c:	20 97       	sbiw	r28, 0x00	; 0
    533e:	51 f0       	breq	.+20     	; 0x5354 <realloc+0x186>
    5340:	8c 2d       	mov	r24, r12
    5342:	b8 01       	movw	r22, r16
    5344:	a7 01       	movw	r20, r14
    5346:	0e 94 f1 29 	call	0x53e2	; 0x53e2 <memcpy>
    534a:	c8 01       	movw	r24, r16
    534c:	0e 94 4e 28 	call	0x509c	; 0x509c <free>
    5350:	86 01       	movw	r16, r12
    5352:	02 c0       	rjmp	.+4      	; 0x5358 <realloc+0x18a>
    5354:	00 e0       	ldi	r16, 0x00	; 0
    5356:	10 e0       	ldi	r17, 0x00	; 0
    5358:	c8 01       	movw	r24, r16
    535a:	cd b7       	in	r28, 0x3d	; 61
    535c:	de b7       	in	r29, 0x3e	; 62
    535e:	ec e0       	ldi	r30, 0x0C	; 12
    5360:	0c 94 1d 27 	jmp	0x4e3a	; 0x4e3a <__epilogue_restores__+0xc>

00005364 <atol>:
    5364:	1f 93       	push	r17
    5366:	fc 01       	movw	r30, r24
    5368:	99 27       	eor	r25, r25
    536a:	88 27       	eor	r24, r24
    536c:	bc 01       	movw	r22, r24
    536e:	e8 94       	clt
    5370:	11 91       	ld	r17, Z+
    5372:	10 32       	cpi	r17, 0x20	; 32
    5374:	e9 f3       	breq	.-6      	; 0x5370 <atol+0xc>
    5376:	19 30       	cpi	r17, 0x09	; 9
    5378:	10 f0       	brcs	.+4      	; 0x537e <atol+0x1a>
    537a:	1e 30       	cpi	r17, 0x0E	; 14
    537c:	c8 f3       	brcs	.-14     	; 0x5370 <atol+0xc>
    537e:	1b 32       	cpi	r17, 0x2B	; 43
    5380:	51 f0       	breq	.+20     	; 0x5396 <atol+0x32>
    5382:	1d 32       	cpi	r17, 0x2D	; 45
    5384:	49 f4       	brne	.+18     	; 0x5398 <atol+0x34>
    5386:	68 94       	set
    5388:	06 c0       	rjmp	.+12     	; 0x5396 <atol+0x32>
    538a:	0e 94 be 2a 	call	0x557c	; 0x557c <__mulsi_const_10>
    538e:	61 0f       	add	r22, r17
    5390:	71 1d       	adc	r23, r1
    5392:	81 1d       	adc	r24, r1
    5394:	91 1d       	adc	r25, r1
    5396:	11 91       	ld	r17, Z+
    5398:	10 53       	subi	r17, 0x30	; 48
    539a:	1a 30       	cpi	r17, 0x0A	; 10
    539c:	b0 f3       	brcs	.-20     	; 0x538a <atol+0x26>
    539e:	3e f4       	brtc	.+14     	; 0x53ae <atol+0x4a>
    53a0:	90 95       	com	r25
    53a2:	80 95       	com	r24
    53a4:	70 95       	com	r23
    53a6:	61 95       	neg	r22
    53a8:	7f 4f       	sbci	r23, 0xFF	; 255
    53aa:	8f 4f       	sbci	r24, 0xFF	; 255
    53ac:	9f 4f       	sbci	r25, 0xFF	; 255
    53ae:	1f 91       	pop	r17
    53b0:	08 95       	ret

000053b2 <isspace>:
    53b2:	91 11       	cpse	r25, r1
    53b4:	33 c1       	rjmp	.+614    	; 0x561c <__ctype_isfalse>
    53b6:	80 32       	cpi	r24, 0x20	; 32
    53b8:	19 f0       	breq	.+6      	; 0x53c0 <isspace+0xe>
    53ba:	89 50       	subi	r24, 0x09	; 9
    53bc:	85 50       	subi	r24, 0x05	; 5
    53be:	d0 f7       	brcc	.-12     	; 0x53b4 <isspace+0x2>
    53c0:	08 95       	ret

000053c2 <tolower>:
    53c2:	91 11       	cpse	r25, r1
    53c4:	08 95       	ret
    53c6:	81 54       	subi	r24, 0x41	; 65
    53c8:	8a 51       	subi	r24, 0x1A	; 26
    53ca:	08 f4       	brcc	.+2      	; 0x53ce <tolower+0xc>
    53cc:	80 5e       	subi	r24, 0xE0	; 224
    53ce:	85 5a       	subi	r24, 0xA5	; 165
    53d0:	08 95       	ret

000053d2 <toupper>:
    53d2:	91 11       	cpse	r25, r1
    53d4:	08 95       	ret
    53d6:	81 56       	subi	r24, 0x61	; 97
    53d8:	8a 51       	subi	r24, 0x1A	; 26
    53da:	08 f4       	brcc	.+2      	; 0x53de <toupper+0xc>
    53dc:	80 52       	subi	r24, 0x20	; 32
    53de:	85 58       	subi	r24, 0x85	; 133
    53e0:	08 95       	ret

000053e2 <memcpy>:
    53e2:	fb 01       	movw	r30, r22
    53e4:	dc 01       	movw	r26, r24
    53e6:	02 c0       	rjmp	.+4      	; 0x53ec <memcpy+0xa>
    53e8:	01 90       	ld	r0, Z+
    53ea:	0d 92       	st	X+, r0
    53ec:	41 50       	subi	r20, 0x01	; 1
    53ee:	50 40       	sbci	r21, 0x00	; 0
    53f0:	d8 f7       	brcc	.-10     	; 0x53e8 <memcpy+0x6>
    53f2:	08 95       	ret

000053f4 <memmove>:
    53f4:	68 17       	cp	r22, r24
    53f6:	79 07       	cpc	r23, r25
    53f8:	68 f4       	brcc	.+26     	; 0x5414 <memmove+0x20>
    53fa:	fb 01       	movw	r30, r22
    53fc:	dc 01       	movw	r26, r24
    53fe:	e4 0f       	add	r30, r20
    5400:	f5 1f       	adc	r31, r21
    5402:	a4 0f       	add	r26, r20
    5404:	b5 1f       	adc	r27, r21
    5406:	02 c0       	rjmp	.+4      	; 0x540c <memmove+0x18>
    5408:	02 90       	ld	r0, -Z
    540a:	0e 92       	st	-X, r0
    540c:	41 50       	subi	r20, 0x01	; 1
    540e:	50 40       	sbci	r21, 0x00	; 0
    5410:	d8 f7       	brcc	.-10     	; 0x5408 <memmove+0x14>
    5412:	08 95       	ret
    5414:	0c 94 f1 29 	jmp	0x53e2	; 0x53e2 <memcpy>

00005418 <strchr>:
    5418:	fc 01       	movw	r30, r24
    541a:	81 91       	ld	r24, Z+
    541c:	86 17       	cp	r24, r22
    541e:	21 f0       	breq	.+8      	; 0x5428 <strchr+0x10>
    5420:	88 23       	and	r24, r24
    5422:	d9 f7       	brne	.-10     	; 0x541a <strchr+0x2>
    5424:	99 27       	eor	r25, r25
    5426:	08 95       	ret
    5428:	31 97       	sbiw	r30, 0x01	; 1
    542a:	cf 01       	movw	r24, r30
    542c:	08 95       	ret

0000542e <strcmp>:
    542e:	fb 01       	movw	r30, r22
    5430:	dc 01       	movw	r26, r24
    5432:	8d 91       	ld	r24, X+
    5434:	01 90       	ld	r0, Z+
    5436:	80 19       	sub	r24, r0
    5438:	01 10       	cpse	r0, r1
    543a:	d9 f3       	breq	.-10     	; 0x5432 <strcmp+0x4>
    543c:	99 0b       	sbc	r25, r25
    543e:	08 95       	ret

00005440 <strcpy>:
    5440:	fb 01       	movw	r30, r22
    5442:	dc 01       	movw	r26, r24
    5444:	01 90       	ld	r0, Z+
    5446:	0d 92       	st	X+, r0
    5448:	00 20       	and	r0, r0
    544a:	e1 f7       	brne	.-8      	; 0x5444 <strcpy+0x4>
    544c:	08 95       	ret

0000544e <strncmp>:
    544e:	fb 01       	movw	r30, r22
    5450:	dc 01       	movw	r26, r24
    5452:	41 50       	subi	r20, 0x01	; 1
    5454:	50 40       	sbci	r21, 0x00	; 0
    5456:	30 f0       	brcs	.+12     	; 0x5464 <strncmp+0x16>
    5458:	8d 91       	ld	r24, X+
    545a:	01 90       	ld	r0, Z+
    545c:	80 19       	sub	r24, r0
    545e:	19 f4       	brne	.+6      	; 0x5466 <strncmp+0x18>
    5460:	00 20       	and	r0, r0
    5462:	b9 f7       	brne	.-18     	; 0x5452 <strncmp+0x4>
    5464:	88 1b       	sub	r24, r24
    5466:	99 0b       	sbc	r25, r25
    5468:	08 95       	ret

0000546a <strncpy>:
    546a:	fb 01       	movw	r30, r22
    546c:	dc 01       	movw	r26, r24
    546e:	41 50       	subi	r20, 0x01	; 1
    5470:	50 40       	sbci	r21, 0x00	; 0
    5472:	48 f0       	brcs	.+18     	; 0x5486 <strncpy+0x1c>
    5474:	01 90       	ld	r0, Z+
    5476:	0d 92       	st	X+, r0
    5478:	00 20       	and	r0, r0
    547a:	c9 f7       	brne	.-14     	; 0x546e <strncpy+0x4>
    547c:	01 c0       	rjmp	.+2      	; 0x5480 <strncpy+0x16>
    547e:	1d 92       	st	X+, r1
    5480:	41 50       	subi	r20, 0x01	; 1
    5482:	50 40       	sbci	r21, 0x00	; 0
    5484:	e0 f7       	brcc	.-8      	; 0x547e <strncpy+0x14>
    5486:	08 95       	ret

00005488 <strrchr>:
    5488:	fc 01       	movw	r30, r24
    548a:	81 e0       	ldi	r24, 0x01	; 1
    548c:	90 e0       	ldi	r25, 0x00	; 0
    548e:	01 90       	ld	r0, Z+
    5490:	06 16       	cp	r0, r22
    5492:	09 f4       	brne	.+2      	; 0x5496 <strrchr+0xe>
    5494:	cf 01       	movw	r24, r30
    5496:	00 20       	and	r0, r0
    5498:	d1 f7       	brne	.-12     	; 0x548e <strrchr+0x6>
    549a:	01 97       	sbiw	r24, 0x01	; 1
    549c:	08 95       	ret

0000549e <strstr>:
    549e:	fb 01       	movw	r30, r22
    54a0:	51 91       	ld	r21, Z+
    54a2:	55 23       	and	r21, r21
    54a4:	a9 f0       	breq	.+42     	; 0x54d0 <strstr+0x32>
    54a6:	bf 01       	movw	r22, r30
    54a8:	dc 01       	movw	r26, r24
    54aa:	4d 91       	ld	r20, X+
    54ac:	45 17       	cp	r20, r21
    54ae:	41 11       	cpse	r20, r1
    54b0:	e1 f7       	brne	.-8      	; 0x54aa <strstr+0xc>
    54b2:	59 f4       	brne	.+22     	; 0x54ca <strstr+0x2c>
    54b4:	cd 01       	movw	r24, r26
    54b6:	01 90       	ld	r0, Z+
    54b8:	00 20       	and	r0, r0
    54ba:	49 f0       	breq	.+18     	; 0x54ce <strstr+0x30>
    54bc:	4d 91       	ld	r20, X+
    54be:	40 15       	cp	r20, r0
    54c0:	41 11       	cpse	r20, r1
    54c2:	c9 f3       	breq	.-14     	; 0x54b6 <strstr+0x18>
    54c4:	fb 01       	movw	r30, r22
    54c6:	41 11       	cpse	r20, r1
    54c8:	ef cf       	rjmp	.-34     	; 0x54a8 <strstr+0xa>
    54ca:	81 e0       	ldi	r24, 0x01	; 1
    54cc:	90 e0       	ldi	r25, 0x00	; 0
    54ce:	01 97       	sbiw	r24, 0x01	; 1
    54d0:	08 95       	ret

000054d2 <itoa>:
    54d2:	fb 01       	movw	r30, r22
    54d4:	9f 01       	movw	r18, r30
    54d6:	e8 94       	clt
    54d8:	42 30       	cpi	r20, 0x02	; 2
    54da:	c4 f0       	brlt	.+48     	; 0x550c <itoa+0x3a>
    54dc:	45 32       	cpi	r20, 0x25	; 37
    54de:	b4 f4       	brge	.+44     	; 0x550c <itoa+0x3a>
    54e0:	4a 30       	cpi	r20, 0x0A	; 10
    54e2:	29 f4       	brne	.+10     	; 0x54ee <itoa+0x1c>
    54e4:	97 fb       	bst	r25, 7
    54e6:	1e f4       	brtc	.+6      	; 0x54ee <itoa+0x1c>
    54e8:	90 95       	com	r25
    54ea:	81 95       	neg	r24
    54ec:	9f 4f       	sbci	r25, 0xFF	; 255
    54ee:	64 2f       	mov	r22, r20
    54f0:	77 27       	eor	r23, r23
    54f2:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <__udivmodhi4>
    54f6:	80 5d       	subi	r24, 0xD0	; 208
    54f8:	8a 33       	cpi	r24, 0x3A	; 58
    54fa:	0c f0       	brlt	.+2      	; 0x54fe <itoa+0x2c>
    54fc:	89 5d       	subi	r24, 0xD9	; 217
    54fe:	81 93       	st	Z+, r24
    5500:	cb 01       	movw	r24, r22
    5502:	00 97       	sbiw	r24, 0x00	; 0
    5504:	a1 f7       	brne	.-24     	; 0x54ee <itoa+0x1c>
    5506:	16 f4       	brtc	.+4      	; 0x550c <itoa+0x3a>
    5508:	5d e2       	ldi	r21, 0x2D	; 45
    550a:	51 93       	st	Z+, r21
    550c:	10 82       	st	Z, r1
    550e:	c9 01       	movw	r24, r18
    5510:	0c 94 11 2b 	jmp	0x5622	; 0x5622 <strrev>

00005514 <ltoa>:
    5514:	fa 01       	movw	r30, r20
    5516:	cf 93       	push	r28
    5518:	ff 93       	push	r31
    551a:	ef 93       	push	r30
    551c:	22 30       	cpi	r18, 0x02	; 2
    551e:	44 f1       	brlt	.+80     	; 0x5570 <ltoa+0x5c>
    5520:	25 32       	cpi	r18, 0x25	; 37
    5522:	34 f5       	brge	.+76     	; 0x5570 <ltoa+0x5c>
    5524:	c2 2f       	mov	r28, r18
    5526:	e8 94       	clt
    5528:	ca 30       	cpi	r28, 0x0A	; 10
    552a:	49 f4       	brne	.+18     	; 0x553e <ltoa+0x2a>
    552c:	97 fb       	bst	r25, 7
    552e:	3e f4       	brtc	.+14     	; 0x553e <ltoa+0x2a>
    5530:	90 95       	com	r25
    5532:	80 95       	com	r24
    5534:	70 95       	com	r23
    5536:	61 95       	neg	r22
    5538:	7f 4f       	sbci	r23, 0xFF	; 255
    553a:	8f 4f       	sbci	r24, 0xFF	; 255
    553c:	9f 4f       	sbci	r25, 0xFF	; 255
    553e:	2c 2f       	mov	r18, r28
    5540:	33 27       	eor	r19, r19
    5542:	44 27       	eor	r20, r20
    5544:	55 27       	eor	r21, r21
    5546:	ff 93       	push	r31
    5548:	ef 93       	push	r30
    554a:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    554e:	ef 91       	pop	r30
    5550:	ff 91       	pop	r31
    5552:	60 5d       	subi	r22, 0xD0	; 208
    5554:	6a 33       	cpi	r22, 0x3A	; 58
    5556:	0c f0       	brlt	.+2      	; 0x555a <ltoa+0x46>
    5558:	69 5d       	subi	r22, 0xD9	; 217
    555a:	61 93       	st	Z+, r22
    555c:	b9 01       	movw	r22, r18
    555e:	ca 01       	movw	r24, r20
    5560:	60 50       	subi	r22, 0x00	; 0
    5562:	70 40       	sbci	r23, 0x00	; 0
    5564:	80 40       	sbci	r24, 0x00	; 0
    5566:	90 40       	sbci	r25, 0x00	; 0
    5568:	51 f7       	brne	.-44     	; 0x553e <ltoa+0x2a>
    556a:	16 f4       	brtc	.+4      	; 0x5570 <ltoa+0x5c>
    556c:	cd e2       	ldi	r28, 0x2D	; 45
    556e:	c1 93       	st	Z+, r28
    5570:	10 82       	st	Z, r1
    5572:	8f 91       	pop	r24
    5574:	9f 91       	pop	r25
    5576:	cf 91       	pop	r28
    5578:	0c 94 11 2b 	jmp	0x5622	; 0x5622 <strrev>

0000557c <__mulsi_const_10>:
    557c:	59 2f       	mov	r21, r25
    557e:	48 2f       	mov	r20, r24
    5580:	37 2f       	mov	r19, r23
    5582:	26 2f       	mov	r18, r22
    5584:	66 0f       	add	r22, r22
    5586:	77 1f       	adc	r23, r23
    5588:	88 1f       	adc	r24, r24
    558a:	99 1f       	adc	r25, r25
    558c:	66 0f       	add	r22, r22
    558e:	77 1f       	adc	r23, r23
    5590:	88 1f       	adc	r24, r24
    5592:	99 1f       	adc	r25, r25
    5594:	62 0f       	add	r22, r18
    5596:	73 1f       	adc	r23, r19
    5598:	84 1f       	adc	r24, r20
    559a:	95 1f       	adc	r25, r21
    559c:	66 0f       	add	r22, r22
    559e:	77 1f       	adc	r23, r23
    55a0:	88 1f       	adc	r24, r24
    55a2:	99 1f       	adc	r25, r25
    55a4:	08 95       	ret

000055a6 <ultoa>:
    55a6:	fa 01       	movw	r30, r20
    55a8:	cf 93       	push	r28
    55aa:	ff 93       	push	r31
    55ac:	ef 93       	push	r30
    55ae:	22 30       	cpi	r18, 0x02	; 2
    55b0:	cc f0       	brlt	.+50     	; 0x55e4 <ultoa+0x3e>
    55b2:	25 32       	cpi	r18, 0x25	; 37
    55b4:	bc f4       	brge	.+46     	; 0x55e4 <ultoa+0x3e>
    55b6:	c2 2f       	mov	r28, r18
    55b8:	2c 2f       	mov	r18, r28
    55ba:	33 27       	eor	r19, r19
    55bc:	44 27       	eor	r20, r20
    55be:	55 27       	eor	r21, r21
    55c0:	ff 93       	push	r31
    55c2:	ef 93       	push	r30
    55c4:	0e 94 d9 26 	call	0x4db2	; 0x4db2 <__udivmodsi4>
    55c8:	ef 91       	pop	r30
    55ca:	ff 91       	pop	r31
    55cc:	60 5d       	subi	r22, 0xD0	; 208
    55ce:	6a 33       	cpi	r22, 0x3A	; 58
    55d0:	0c f0       	brlt	.+2      	; 0x55d4 <ultoa+0x2e>
    55d2:	69 5d       	subi	r22, 0xD9	; 217
    55d4:	61 93       	st	Z+, r22
    55d6:	b9 01       	movw	r22, r18
    55d8:	ca 01       	movw	r24, r20
    55da:	60 50       	subi	r22, 0x00	; 0
    55dc:	70 40       	sbci	r23, 0x00	; 0
    55de:	80 40       	sbci	r24, 0x00	; 0
    55e0:	90 40       	sbci	r25, 0x00	; 0
    55e2:	51 f7       	brne	.-44     	; 0x55b8 <ultoa+0x12>
    55e4:	10 82       	st	Z, r1
    55e6:	8f 91       	pop	r24
    55e8:	9f 91       	pop	r25
    55ea:	cf 91       	pop	r28
    55ec:	0c 94 11 2b 	jmp	0x5622	; 0x5622 <strrev>

000055f0 <utoa>:
    55f0:	fb 01       	movw	r30, r22
    55f2:	9f 01       	movw	r18, r30
    55f4:	42 30       	cpi	r20, 0x02	; 2
    55f6:	74 f0       	brlt	.+28     	; 0x5614 <utoa+0x24>
    55f8:	45 32       	cpi	r20, 0x25	; 37
    55fa:	64 f4       	brge	.+24     	; 0x5614 <utoa+0x24>
    55fc:	64 2f       	mov	r22, r20
    55fe:	77 27       	eor	r23, r23
    5600:	0e 94 b2 26 	call	0x4d64	; 0x4d64 <__udivmodhi4>
    5604:	80 5d       	subi	r24, 0xD0	; 208
    5606:	8a 33       	cpi	r24, 0x3A	; 58
    5608:	0c f0       	brlt	.+2      	; 0x560c <utoa+0x1c>
    560a:	89 5d       	subi	r24, 0xD9	; 217
    560c:	81 93       	st	Z+, r24
    560e:	cb 01       	movw	r24, r22
    5610:	00 97       	sbiw	r24, 0x00	; 0
    5612:	a1 f7       	brne	.-24     	; 0x55fc <utoa+0xc>
    5614:	10 82       	st	Z, r1
    5616:	c9 01       	movw	r24, r18
    5618:	0c 94 11 2b 	jmp	0x5622	; 0x5622 <strrev>

0000561c <__ctype_isfalse>:
    561c:	99 27       	eor	r25, r25
    561e:	88 27       	eor	r24, r24

00005620 <__ctype_istrue>:
    5620:	08 95       	ret

00005622 <strrev>:
    5622:	dc 01       	movw	r26, r24
    5624:	fc 01       	movw	r30, r24
    5626:	67 2f       	mov	r22, r23
    5628:	71 91       	ld	r23, Z+
    562a:	77 23       	and	r23, r23
    562c:	e1 f7       	brne	.-8      	; 0x5626 <strrev+0x4>
    562e:	32 97       	sbiw	r30, 0x02	; 2
    5630:	04 c0       	rjmp	.+8      	; 0x563a <strrev+0x18>
    5632:	7c 91       	ld	r23, X
    5634:	6d 93       	st	X+, r22
    5636:	70 83       	st	Z, r23
    5638:	62 91       	ld	r22, -Z
    563a:	ae 17       	cp	r26, r30
    563c:	bf 07       	cpc	r27, r31
    563e:	c8 f3       	brcs	.-14     	; 0x5632 <strrev+0x10>
    5640:	08 95       	ret

00005642 <_exit>:
    5642:	f8 94       	cli

00005644 <__stop_program>:
    5644:	ff cf       	rjmp	.-2      	; 0x5644 <__stop_program>
